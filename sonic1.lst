00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000346                            
00000346                            GameInit:
00000346 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000034C 7E00                       		moveq	#0,d7
0000034E 3C3C 3F7F                  		move.w	#$3F7F,d6
00000352                            
00000352                            GameClrRAM:
00000352 2CC7                       		move.l	d7,(a6)+
00000354 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000358                            
00000358 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
0000035E 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000366                            
00000366 6100 0000                  		bsr.w	VDPSetupGame
0000036A 6100 0000                  		bsr.w	SoundDriverLoad
0000036E 6100 0000                  		bsr.w	JoypadInit
00000372 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000378                            
00000378                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000378                            
00000378                            MainGameLoop:
00000378 707E                       		moveq	#$7E,d0
0000037A C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
0000037E 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000382 60F4                       		bra.s	MainGameLoop
00000384                            ; ===========================================================================
00000384                            ; ---------------------------------------------------------------------------
00000384                            ; Main game mode array
00000384                            ; ---------------------------------------------------------------------------
00000384                            
00000384                            GameModeArray:
00000384 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
00000388                            ; ===========================================================================
00000388 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000038C                            ; ===========================================================================
0000038C 6000 0000                  		bra.w	Level		; Demo Mode ($08)
00000390                            ; ===========================================================================
00000390 6000 0000                  		bra.w	Level		; Normal Level ($0C)
00000394                            ; ===========================================================================
00000394 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
00000398                            ; ===========================================================================
00000398 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
0000039C                            ; ===========================================================================
0000039C 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003A4                            ; ===========================================================================
000003A4 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003AA                            ; ===========================================================================
000003AA                            
000003AA                            CheckSumError:
000003AA 6100 0000                  		bsr.w	VDPSetupGame
000003AE 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003B8 7E3F                       		moveq	#$3F,d7
000003BA                            
000003BA                            CheckSum_Red:
000003BA 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003C2 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003C6                            
000003C6                            CheckSum_Loop:
000003C6 60FE                       		bra.s	CheckSum_Loop
000003C8                            ; ===========================================================================
000003C8                            
000003C8                            BusError:
000003C8 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003CE 6000                       		bra.s	loc_43A
000003D0                            ; ===========================================================================
000003D0                            
000003D0                            AddressError:
000003D0 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003D6 6000                       		bra.s	loc_43A
000003D8                            ; ===========================================================================
000003D8                            
000003D8                            IllegalInstr:
000003D8 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003DE 54AF 0002                  		addq.l	#2,2(sp)
000003E2 6000                       		bra.s	loc_462
000003E4                            ; ===========================================================================
000003E4                            
000003E4                            ZeroDivide:
000003E4 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003EA 6000                       		bra.s	loc_462
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            ChkInstr:
000003EC 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_462
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            TrapvInstr:
000003F4 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_462
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            PrivilegeViol:
000003FC 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000402 6000                       		bra.s	loc_462
00000404                            ; ===========================================================================
00000404                            
00000404                            Trace:
00000404 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000040A 6000                       		bra.s	loc_462
0000040C                            ; ===========================================================================
0000040C                            
0000040C                            Line1010Emu:
0000040C 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000412 54AF 0002                  		addq.l	#2,2(sp)
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            Line1111Emu:
00000418 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000041E 54AF 0002                  		addq.l	#2,2(sp)
00000422 6000                       		bra.s	loc_462
00000424                            ; ===========================================================================
00000424                            
00000424                            ErrorExcept:
00000424 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000042A 6000                       		bra.s	loc_462
0000042C                            ; ===========================================================================
0000042C                            
0000042C                            loc_43A:
0000042C 46FC 2700                  		move	#$2700,sr
00000430 544F                       		addq.w	#2,sp
00000432 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000436 544F                       		addq.w	#2,sp
00000438 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000043E 6100 0000                  		bsr.w	ShowErrorMsg
00000442 202F 0002                  		move.l	2(sp),d0
00000446 6100 0000                  		bsr.w	sub_5BA
0000044A 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000044E 6100 0000                  		bsr.w	sub_5BA
00000452 6000                       		bra.s	loc_478
00000454                            ; ===========================================================================
00000454                            
00000454                            loc_462:
00000454 46FC 2700                  		move	#$2700,sr
00000458 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000045E 6100 0000                  		bsr.w	ShowErrorMsg
00000462 202F 0002                  		move.l	2(sp),d0
00000466 6100 0000                  		bsr.w	sub_5BA
0000046A                            
0000046A                            loc_478:
0000046A 6100 0000                  		bsr.w	ErrorWaitForC
0000046E 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000474 46FC 2300                  		move	#$2300,sr
00000478 4E73                       		rte	
0000047A                            
0000047A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000047A                            
0000047A                            
0000047A                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000047A 4DF9 00C0 0000             		lea	($C00000).l,a6
00000480 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000048A 41F9 0000 0000             		lea	(Art_Text).l,a0
00000490 323C 027F                  		move.w	#$27F,d1
00000494                            
00000494                            Error_LoadGfx:
00000494 3C98                       		move.w	(a0)+,(a6)
00000496 51C9 FFFC                  		dbf	d1,Error_LoadGfx
0000049A 7000                       		moveq	#0,d0		; clear	d0
0000049C 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004A0 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004A4 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004A8 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004B2 7212                       		moveq	#$12,d1		; number of characters
000004B4                            
000004B4                            Error_LoopChars:
000004B4 7000                       		moveq	#0,d0
000004B6 1018                       		move.b	(a0)+,d0
000004B8 0640 0790                  		addi.w	#$790,d0
000004BC 3C80                       		move.w	d0,(a6)
000004BE 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004C2 4E75                       		rts	
000004C4                            ; End of function ShowErrorMsg
000004C4                            
000004C4                            ; ===========================================================================
000004C4 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004C8 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004CC 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004D0 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004D4 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004D8 0000                       		dc.w asc_5A6-ErrorText
000004DA 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004ED 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000500 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000513 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000526 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000539 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000054C 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000055F 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000572 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000585 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
00000598 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005AC 00                         		even
000005AC                            
000005AC                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005AC                            
000005AC                            
000005AC                            sub_5BA:				; XREF: loc_43A; loc_462
000005AC 3CBC 07CA                  		move.w	#$7CA,(a6)
000005B0 7407                       		moveq	#7,d2
000005B2                            
000005B2                            loc_5C0:
000005B2 E998                       		rol.l	#4,d0
000005B4 6100                       		bsr.s	sub_5CA
000005B6 51CA FFFA                  		dbf	d2,loc_5C0
000005BA 4E75                       		rts	
000005BC                            ; End of function sub_5BA
000005BC                            
000005BC                            
000005BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BC                            
000005BC                            
000005BC                            sub_5CA:				; XREF: sub_5BA
000005BC 3200                       		move.w	d0,d1
000005BE 0241 000F                  		andi.w	#$F,d1
000005C2 0C41 000A                  		cmpi.w	#$A,d1
000005C6 6500                       		bcs.s	loc_5D8
000005C8 5E41                       		addq.w	#7,d1
000005CA                            
000005CA                            loc_5D8:
000005CA 0641 07C0                  		addi.w	#$7C0,d1
000005CE 3C81                       		move.w	d1,(a6)
000005D0 4E75                       		rts	
000005D2                            ; End of function sub_5CA
000005D2                            
000005D2                            
000005D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D2                            
000005D2                            
000005D2                            ErrorWaitForC:				; XREF: loc_478
000005D2 6100 0000                  		bsr.w	ReadJoypads
000005D6 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005DC 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005E0 4E75                       		rts	
000005E2                            ; End of function ErrorWaitForC
000005E2                            
000005E2                            ; ===========================================================================
000005E2                            
000005E2                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D22                            Art_Text_end:		even
00000D22                            
00000D22                            ; ===========================================================================
00000D22                            ;VBlank
00000D22                            loc_B10:				; XREF: Vectors
00000D22 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D26 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D2A 6700                       		beq.s	loc_B88
00000D2C 3039 00C0 0004             		move.w	($C00004).l,d0
00000D32 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D3C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D44                            ;		btst	#6,($FFFFFFF8).w
00000D44                            ;		beq.s	loc_B42
00000D44                            ;		move.w	#$700,d0
00000D44                            ;
00000D44                            ;loc_B3E:
00000D44                            ;		dbf	d0,loc_B3E
00000D44                            
00000D44                            ;loc_B42:
00000D44 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D48 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D4E 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D54 0240 003E                  		andi.w	#$3E,d0
00000D58 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D5C 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D60                            
00000D60                            loc_B5E:				; XREF: loc_B88
00000D60 4EB9 0000 0000             		jsr	sub_71B4C
00000D66                            
00000D66                            loc_B64:				; XREF: loc_D50
00000D66 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D6A 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D6E 4E73                       		rte	
00000D70                            ; ===========================================================================
00000D70 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D74 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D78 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D7C 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D80 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000D84 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000D88 0000                       		dc.w loc_E72-off_B6E
00000D8A                            ; ===========================================================================
00000D8A                            
00000D8A                            loc_B88:				; XREF: loc_B10; off_B6E
00000D8A 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000D90 6700                       		beq.s	loc_B9A
00000D92 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000D98 6600 FFC6                  		bne.w	loc_B5E
00000D9C                            
00000D9C                            loc_B9A:
00000D9C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DA2 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DA6 3039 00C0 0004             		move.w	($C00004).l,d0
00000DAC                            ;		btst	#6,($FFFFFFF8).w
00000DAC                            ;		beq.s	loc_BBA
00000DAC                            ;		move.w	#$700,d0
00000DAC                            ;
00000DAC                            ;loc_BB6:
00000DAC                            ;		dbf	d0,loc_BB6
00000DAC                            ;
00000DAC                            ;loc_BBA:
00000DAC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DB2 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DBA                            
00000DBA                            loc_BC8:
00000DBA 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DC2 66F6                       		bne.s	loc_BC8
00000DC4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DC8 6600                       		bne.s	loc_BFE
00000DCA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DD0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DD6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DDC 3ABC 977F                  		move.w	#$977F,(a5)
00000DE0 3ABC C000                  		move.w	#$C000,(a5)
00000DE4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DEE 6000                       		bra.s	loc_C22
00000DF0                            ; ===========================================================================
00000DF0                            
00000DF0                            loc_BFE:				; XREF: loc_BC8
00000DF0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DF6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DFC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E02 3ABC 977F                  		move.w	#$977F,(a5)
00000E06 3ABC C000                  		move.w	#$C000,(a5)
00000E0A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E10 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E14                            
00000E14                            loc_C22:				; XREF: loc_BC8
00000E14 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E18 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E20 6000 FF3E                  		bra.w	loc_B5E
00000E24                            ; ===========================================================================
00000E24                            
00000E24                            loc_C32:				; XREF: off_B6E
00000E24 6100 0000                  		bsr.w	sub_106E
00000E28                            
00000E28                            loc_C36:				; XREF: off_B6E
00000E28 4A78 F614                  		tst.w	($FFFFF614).w
00000E2C 6700 0000                  		beq.w	locret_C42
00000E30 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E34                            
00000E34                            locret_C42:
00000E34 4E75                       		rts	
00000E36                            ; ===========================================================================
00000E36                            
00000E36                            loc_C44:				; XREF: off_B6E
00000E36 6100 0000                  		bsr.w	sub_106E
00000E3A 6100 0000                  		bsr.w	sub_6886
00000E3E 6100 0000                  		bsr.w	sub_1642
00000E42 4A78 F614                  		tst.w	($FFFFF614).w
00000E46 6700 0000                  		beq.w	locret_C5C
00000E4A 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E4E                            
00000E4E                            locret_C5C:
00000E4E 4E75                       		rts	
00000E50                            ; ===========================================================================
00000E50                            
00000E50                            loc_C5E:				; XREF: off_B6E
00000E50 6100 0000                  		bsr.w	sub_106E
00000E54 4E75                       		rts	
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C64:				; XREF: off_B6E
00000E56 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E5C 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E60                            
00000E60                            loc_C6E:				; XREF: off_B6E
00000E60 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E68                            
00000E68                            loc_C76:
00000E68 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E70 66F6                       		bne.s	loc_C76		; if not, branch
00000E72 6100 0000                  		bsr.w	ReadJoypads
00000E76 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E7A 6600                       		bne.s	loc_CB0
00000E7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E82 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E88 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E8E 3ABC 977F                  		move.w	#$977F,(a5)
00000E92 3ABC C000                  		move.w	#$C000,(a5)
00000E96 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E9C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EA0 6000                       		bra.s	loc_CD4
00000EA2                            ; ===========================================================================
00000EA2                            
00000EA2                            loc_CB0:				; XREF: loc_C76
00000EA2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EA8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EAE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EB4 3ABC 977F                  		move.w	#$977F,(a5)
00000EB8 3ABC C000                  		move.w	#$C000,(a5)
00000EBC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EC2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EC6                            
00000EC6                            loc_CD4:				; XREF: loc_C76
00000EC6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000ECA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000ED6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EDC 3ABC 977F                  		move.w	#$977F,(a5)
00000EE0 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EE4 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EEA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EEE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EF4 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000EFA 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F00 3ABC 977F                  		move.w	#$977F,(a5)
00000F04 3ABC 7800                  		move.w	#$7800,(a5)
00000F08 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F0E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F12 4A38 F767                  		tst.b	($FFFFF767).w
00000F16 6700                       		beq.s	loc_D50
00000F18 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F1E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F24 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F2A 3ABC 977F                  		move.w	#$977F,(a5)
00000F2E 3ABC 7000                  		move.w	#$7000,(a5)
00000F32 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F38 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F3C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F42                            
00000F42                            loc_D50:
00000F42 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F4A 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F50 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F56 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F5C 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F62 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F68 6400                       		bcc.s	Demo_Time
00000F6A 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F70 588F                       		addq.l	#4,sp
00000F72 6000 FDF2                  		bra.w	loc_B64
00000F76                            
00000F76                            ; ---------------------------------------------------------------------------
00000F76                            ; Subroutine to	run a demo for an amount of time
00000F76                            ; ---------------------------------------------------------------------------
00000F76                            
00000F76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000F76                            
00000F76                            
00000F76                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000F76 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F7A 4EB9 0000 0000             		jsr	AniArt_Load
00000F80 4EB9 0000 0000             		jsr	HudUpdate
00000F86 6100 0000                  		bsr.w	sub_165E
00000F8A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000F8E 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000F92 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000F96                            
00000F96                            Demo_TimeEnd:
00000F96 4E75                       		rts	
00000F98                            ; End of function Demo_Time
00000F98                            
00000F98                            ; ===========================================================================
00000F98                            
00000F98                            loc_DA6:				; XREF: off_B6E
00000F98 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FA0                            
00000FA0                            loc_DAE:
00000FA0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FA8 66F6                       		bne.s	loc_DAE		; if not, branch
00000FAA 6100 0000                  		bsr.w	ReadJoypads
00000FAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FC0 3ABC 977F                  		move.w	#$977F,(a5)
00000FC4 3ABC C000                  		move.w	#$C000,(a5)
00000FC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FCE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FD2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FD8 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FDE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FE4 3ABC 977F                  		move.w	#$977F,(a5)
00000FE8 3ABC 7800                  		move.w	#$7800,(a5)
00000FEC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000FF2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FFC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001002 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001008 3ABC 977F                  		move.w	#$977F,(a5)
0000100C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001010 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001016 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000101A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001022 6100 0000                  		bsr.w	PalCycle_SS
00001026 4A38 F767                  		tst.b	($FFFFF767).w
0000102A 6700                       		beq.s	loc_E64
0000102C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001032 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001038 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000103E 3ABC 977F                  		move.w	#$977F,(a5)
00001042 3ABC 7000                  		move.w	#$7000,(a5)
00001046 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000104C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001050 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001056                            
00001056                            loc_E64:
00001056 4A78 F614                  		tst.w	($FFFFF614).w
0000105A 6700 0000                  		beq.w	locret_E70
0000105E 5378 F614                  		subq.w	#1,($FFFFF614).w
00001062                            
00001062                            locret_E70:
00001062 4E75                       		rts	
00001064                            ; ===========================================================================
00001064                            
00001064                            loc_E72:				; XREF: off_B6E
00001064 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000106C                            
0000106C                            loc_E7A:
0000106C 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001074 66F6                       		bne.s	loc_E7A		; if not, branch
00001076 6100 0000                  		bsr.w	ReadJoypads
0000107A 4A38 F64E                  		tst.b	($FFFFF64E).w
0000107E 6600                       		bne.s	loc_EB4
00001080 4BF9 00C0 0004             		lea	($C00004).l,a5
00001086 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000108C 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001092 3ABC 977F                  		move.w	#$977F,(a5)
00001096 3ABC C000                  		move.w	#$C000,(a5)
0000109A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010A0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010A4 6000                       		bra.s	loc_ED8
000010A6                            ; ===========================================================================
000010A6                            
000010A6                            loc_EB4:				; XREF: loc_E7A
000010A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000010AC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010B2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010B8 3ABC 977F                  		move.w	#$977F,(a5)
000010BC 3ABC C000                  		move.w	#$C000,(a5)
000010C0 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010C6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010CA                            
000010CA                            loc_ED8:				; XREF: loc_E7A
000010CA 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010CE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010D4 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000010DA 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000010E0                            
000010E0                            loc_EEE:
000010E0 3ABC 977F                  		move.w	#$977F,(a5)
000010E4 3ABC 7C00                  		move.w	#$7C00,(a5)
000010E8 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010EE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010FE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001104 3ABC 977F                  		move.w	#$977F,(a5)
00001108 3ABC 7800                  		move.w	#$7800,(a5)
0000110C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001112 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001116 4A38 F767                  		tst.b	($FFFFF767).w
0000111A 6700                       		beq.s	loc_F54
0000111C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001122 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001128 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000112E 3ABC 977F                  		move.w	#$977F,(a5)
00001132 3ABC 7000                  		move.w	#$7000,(a5)
00001136 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000113C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001140 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001146                            
00001146                            loc_F54:
00001146 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000114E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001154 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000115A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001160 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001166 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000116A 4EB9 0000 0000             		jsr	AniArt_Load
00001170 4EB9 0000 0000             		jsr	HudUpdate
00001176 6100 0000                  		bsr.w	sub_1642
0000117A 4E75                       		rts	
0000117C                            ; ===========================================================================
0000117C                            
0000117C                            loc_F8A:				; XREF: off_B6E
0000117C 6100 0000                  		bsr.w	sub_106E
00001180 5238 F628                  		addq.b	#1,($FFFFF628).w
00001184 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
0000118A 4E75                       		rts	
0000118C                            ; ===========================================================================
0000118C                            
0000118C                            loc_F9A:				; XREF: off_B6E
0000118C 6100 0000                  		bsr.w	sub_106E
00001190 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001194 6000 0000                  		bra.w	sub_1642
00001198                            ; ===========================================================================
00001198                            
00001198                            loc_FA6:				; XREF: off_B6E
00001198 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011A0                            
000011A0                            loc_FAE:
000011A0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011A8 66F6                       		bne.s	loc_FAE		; if not, branch
000011AA 6100 0000                  		bsr.w	ReadJoypads
000011AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000011B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011C0 3ABC 977F                  		move.w	#$977F,(a5)
000011C4 3ABC C000                  		move.w	#$C000,(a5)
000011C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011D2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011D8 2ABC 9401 9340             		move.l	#$94019340,(a5)
000011DE 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000011E4 3ABC 977F                  		move.w	#$977F,(a5)
000011E8 3ABC 7800                  		move.w	#$7800,(a5)
000011EC 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000011F2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000011F6 4BF9 00C0 0004             		lea	($C00004).l,a5
000011FC 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001202 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001208 3ABC 977F                  		move.w	#$977F,(a5)
0000120C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001210 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001216 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000121A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001222 4A38 F767                  		tst.b	($FFFFF767).w
00001226 6700                       		beq.s	loc_1060
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001234 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7000                  		move.w	#$7000,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001252                            
00001252                            loc_1060:
00001252 4A78 F614                  		tst.w	($FFFFF614).w
00001256 6700 0000                  		beq.w	locret_106C
0000125A 5378 F614                  		subq.w	#1,($FFFFF614).w
0000125E                            
0000125E                            locret_106C:
0000125E 4E75                       		rts	
00001260                            
00001260                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001260                            
00001260                            
00001260                            sub_106E:				; XREF: loc_C32; et al
00001260 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001268                            
00001268                            loc_1076:
00001268 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00001270 66F6                       		bne.s	loc_1076	; if not, branch
00001272 6100 0000                  		bsr.w	ReadJoypads
00001276 4A38 F64E                  		tst.b	($FFFFF64E).w
0000127A 6600                       		bne.s	loc_10B0
0000127C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001282 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001288 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000128E 3ABC 977F                  		move.w	#$977F,(a5)
00001292 3ABC C000                  		move.w	#$C000,(a5)
00001296 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000129C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012A0 6000                       		bra.s	loc_10D4
000012A2                            ; ===========================================================================
000012A2                            
000012A2                            loc_10B0:				; XREF: sub_106E
000012A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012A8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012AE 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012B4 3ABC 977F                  		move.w	#$977F,(a5)
000012B8 3ABC C000                  		move.w	#$C000,(a5)
000012BC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012C2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012C6                            
000012C6                            loc_10D4:				; XREF: sub_106E
000012C6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CC 2ABC 9401 9340             		move.l	#$94019340,(a5)
000012D2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000012D8 3ABC 977F                  		move.w	#$977F,(a5)
000012DC 3ABC 7800                  		move.w	#$7800,(a5)
000012E0 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000012E6 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F0 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000012F6 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000012FC 3ABC 977F                  		move.w	#$977F,(a5)
00001300 3ABC 7C00                  		move.w	#$7C00,(a5)
00001304 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000130A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001316 4E75                       		rts	
00001318                            ; End of function sub_106E
00001318                            
00001318                            ; ---------------------------------------------------------------------------
00001318                            ; Subroutine to	move pallets from the RAM to CRAM
00001318                            ; ---------------------------------------------------------------------------
00001318                            
00001318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001318                            
00001318                            
00001318                            PalToCRAM:
00001318 46FC 2700                  		move	#$2700,sr
0000131C 4A78 F644                  		tst.w	($FFFFF644).w
00001320 6700                       		beq.s	locret_119C
00001322 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001328 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000132C 43F9 00C0 0000             		lea	($C00000).l,a1
00001332 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001336 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000133E 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001340 2298                       		move.l	(a0)+,(a1)
00001342 2298                       		move.l	(a0)+,(a1)
00001344 2298                       		move.l	(a0)+,(a1)
00001346 2298                       		move.l	(a0)+,(a1)
00001348 2298                       		move.l	(a0)+,(a1)
0000134A 2298                       		move.l	(a0)+,(a1)
0000134C 2298                       		move.l	(a0)+,(a1)
0000134E 2298                       		move.l	(a0)+,(a1)
00001350 2298                       		move.l	(a0)+,(a1)
00001352 2298                       		move.l	(a0)+,(a1)
00001354 2298                       		move.l	(a0)+,(a1)
00001356 2298                       		move.l	(a0)+,(a1)
00001358 2298                       		move.l	(a0)+,(a1)
0000135A 2298                       		move.l	(a0)+,(a1)
0000135C 2298                       		move.l	(a0)+,(a1)
0000135E 2298                       		move.l	(a0)+,(a1)
00001360 2298                       		move.l	(a0)+,(a1)
00001362 2298                       		move.l	(a0)+,(a1)
00001364 2298                       		move.l	(a0)+,(a1)
00001366 2298                       		move.l	(a0)+,(a1)
00001368 2298                       		move.l	(a0)+,(a1)
0000136A 2298                       		move.l	(a0)+,(a1)
0000136C 2298                       		move.l	(a0)+,(a1)
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001384 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001388 4A38 F64F                  		tst.b	($FFFFF64F).w
0000138C 6600                       		bne.s	loc_119E
0000138E                            
0000138E                            locret_119C:
0000138E 4E73                       		rte	
00001390                            ; ===========================================================================
00001390                            
00001390                            loc_119E:				; XREF: PalToCRAM
00001390 4238 F64F                  		clr.b	($FFFFF64F).w
00001394 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001398 6100 FBDC                  		bsr.w	Demo_Time
0000139C 4EB9 0000 0000             		jsr	sub_71B4C
000013A2 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013A6 4E73                       		rte	
000013A8                            ; End of function PalToCRAM
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	initialise joypads
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            JoypadInit:				; XREF: GameClrRAM
000013A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013B0                            
000013B0                            Joypad_WaitZ80:
000013B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013B8 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013BA 7040                       		moveq	#$40,d0
000013BC 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013C2 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013C8 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013CE 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000013D6 4E75                       		rts	
000013D8                            ; End of function JoypadInit
000013D8                            
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            ; Subroutine to	read joypad input, and send it to the RAM
000013D8                            ; ---------------------------------------------------------------------------
000013D8                            
000013D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D8                            
000013D8                            
000013D8                            ReadJoypads:
000013D8 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000013DC 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000013E2 6100                       		bsr.s	Joypad_Read	; do the first joypad
000013E4 5449                       		addq.w	#2,a1		; do the second	joypad
000013E6                            
000013E6                            Joypad_Read:
000013E6 12BC 0000                  		move.b	#0,(a1)
000013EA 4E71                       		nop	
000013EC 4E71                       		nop	
000013EE 1011                       		move.b	(a1),d0
000013F0 E508                       		lsl.b	#2,d0
000013F2 0200 00C0                  		andi.b	#$C0,d0
000013F6 12BC 0040                  		move.b	#$40,(a1)
000013FA 4E71                       		nop	
000013FC 4E71                       		nop	
000013FE 1211                       		move.b	(a1),d1
00001400 0201 003F                  		andi.b	#$3F,d1
00001404 8001                       		or.b	d1,d0
00001406 4600                       		not.b	d0
00001408 1210                       		move.b	(a0),d1
0000140A B101                       		eor.b	d0,d1
0000140C 10C0                       		move.b	d0,(a0)+
0000140E C200                       		and.b	d0,d1
00001410 10C1                       		move.b	d1,(a0)+
00001412 4E75                       		rts	
00001414                            ; End of function ReadJoypads
00001414                            
00001414                            
00001414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001414                            
00001414                            
00001414                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001414 41F9 00C0 0004             		lea	($C00004).l,a0
0000141A 43F9 00C0 0000             		lea	($C00000).l,a1
00001420 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001426 7E12                       		moveq	#$12,d7
00001428                            
00001428                            VDP_Loop:
00001428 309A                       		move.w	(a2)+,(a0)
0000142A 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000142E                            
0000142E 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001434 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
0000143A 6700                       		beq.s	.UseV28			; If not, skip
0000143C 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001440                            .UseV28:
00001440 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001444 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000144A 7000                       		moveq	#0,d0
0000144C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001456 3E3C 003F                  		move.w	#$3F,d7
0000145A                            
0000145A                            VDP_ClrCRAM:
0000145A 3280                       		move.w	d0,(a1)
0000145C 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001460                            
00001460 42B8 F616                  		clr.l	($FFFFF616).w
00001464 42B8 F61A                  		clr.l	($FFFFF61A).w
00001468 2F01                       		move.l	d1,-(sp)
0000146A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001470 3ABC 8F01                  		move.w	#$8F01,(a5)
00001474 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000147A 3ABC 9780                  		move.w	#$9780,(a5)
0000147E 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001484 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000148C                            
0000148C                            loc_128E:
0000148C 3215                       		move.w	(a5),d1
0000148E 0801 0001                  		btst	#1,d1
00001492 66F8                       		bne.s	loc_128E
00001494                            
00001494 3ABC 8F02                  		move.w	#$8F02,(a5)
00001498 221F                       		move.l	(sp)+,d1
0000149A 4E75                       		rts	
0000149C                            ; End of function VDPSetupGame
0000149C                            
0000149C                            ; ===========================================================================
0000149C 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014A4 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014AC 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014B4 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014BC 9001 9100 9200             		dc.w $9001, $9100, $9200
000014C2                            
000014C2                            ; ---------------------------------------------------------------------------
000014C2                            ; Subroutine to	clear the screen
000014C2                            ; ---------------------------------------------------------------------------
000014C2                            
000014C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014C2                            
000014C2                            
000014C2                            ClearScreen:
000014C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014C8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014CC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014D2 3ABC 9780                  		move.w	#$9780,(a5)
000014D6 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014DC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000014E4                            
000014E4                            loc_12E6:
000014E4 3215                       		move.w	(a5),d1
000014E6 0801 0001                  		btst	#1,d1
000014EA 66F8                       		bne.s	loc_12E6
000014EC                            
000014EC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014F0 4BF9 00C0 0004             		lea	($C00004).l,a5
000014F6 3ABC 8F01                  		move.w	#$8F01,(a5)
000014FA 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001500 3ABC 9780                  		move.w	#$9780,(a5)
00001504 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000150A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001512                            
00001512                            loc_1314:
00001512 3215                       		move.w	(a5),d1
00001514 0801 0001                  		btst	#1,d1
00001518 66F8                       		bne.s	loc_1314
0000151A                            
0000151A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000151E 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001526 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000152E 43F8 F800                  		lea	($FFFFF800).w,a1
00001532 7000                       		moveq	#0,d0
00001534 323C 009F                  		move.w	#$9F,d1
00001538                            
00001538                            loc_133A:
00001538 22C0                       		move.l	d0,(a1)+
0000153A 51C9 FFFC                  		dbf	d1,loc_133A
0000153E                            
0000153E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001542 7000                       		moveq	#0,d0
00001544 323C 00FF                  		move.w	#$FF,d1
00001548                            
00001548                            loc_134A:
00001548 22C0                       		move.l	d0,(a1)+
0000154A 51C9 FFFC                  		dbf	d1,loc_134A
0000154E 4E75                       		rts	
00001550                            ; End of function ClearScreen
00001550                            
00001550                            ; ---------------------------------------------------------------------------
00001550                            ; Subroutine to	load the sound driver
00001550                            ; ---------------------------------------------------------------------------
00001550                            
00001550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001550                            
00001550                            
00001550                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001550 4E71                       		nop	
00001552 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000155A 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001562 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001568 43F9 00A0 0000             		lea	($A00000).l,a1
0000156E 6100 0000                  		bsr.w	KosDec		; decompress
00001572 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000157A 4E71                       		nop	
0000157C 4E71                       		nop	
0000157E 4E71                       		nop	
00001580 4E71                       		nop	
00001582 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000158A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001592 4E75                       		rts	
00001594                            ; End of function SoundDriverLoad
00001594                            
00001594                            ; ---------------------------------------------------------------------------
00001594                            ; Subroutine to	play a sound or	music track
00001594                            ; ---------------------------------------------------------------------------
00001594                            
00001594                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001594                            
00001594                            
00001594                            PlaySound:
00001594 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001598 4E75                       		rts	
0000159A                            ; End of function PlaySound
0000159A                            
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            ; Subroutine to	play a special sound/music (E0-E4)
0000159A                            ;
0000159A                            ; E0 - Fade out
0000159A                            ; E1 - Sega
0000159A                            ; E2 - Speed up
0000159A                            ; E3 - Normal speed
0000159A                            ; E4 - Stop
0000159A                            ; ---------------------------------------------------------------------------
0000159A                            
0000159A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000159A                            
0000159A                            
0000159A                            PlaySound_Special:
0000159A 11C0 F00B                  		move.b	d0,($FFFFF00B).w
0000159E 4E75                       		rts	
000015A0                            ; End of function PlaySound_Special
000015A0                            
000015A0                            ; ===========================================================================
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            ; Unused sound/music subroutine
000015A0                            ; ---------------------------------------------------------------------------
000015A0                            
000015A0                            PlaySound_Unk:
000015A0 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015A4 4E75                       		rts	
000015A6                            
000015A6                            ; ---------------------------------------------------------------------------
000015A6                            ; Subroutine to	pause the game
000015A6                            ; ---------------------------------------------------------------------------
000015A6                            
000015A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015A6                            
000015A6                            
000015A6                            PauseGame:				; XREF: Level_MainLoop; et al
000015A6 4E71                       		nop	
000015A8 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015AC 6700                       		beq.s	Unpause		; if not, branch
000015AE 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015B2 6600                       		bne.s	loc_13BE	; if yes, branch
000015B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015BA 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015BC                            
000015BC                            loc_13BE:
000015BC 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015C2 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015C8                            
000015C8                            loc_13CA:
000015C8 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015CE 6100 0000                  		bsr.w	DelayProgram
000015D2 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015D6 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015D8 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000015DE 6700                       		beq.s	Pause_ChkBC	; if not, branch
000015E0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000015E6 4E71                       		nop	
000015E8 6000                       		bra.s	loc_1404
000015EA                            ; ===========================================================================
000015EA                            
000015EA                            Pause_ChkBC:				; XREF: PauseGame
000015EA 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000015F0 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015F2 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000015F8 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000015FA                            
000015FA                            Pause_ChkStart:				; XREF: PauseGame
000015FA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001600 67C6                       		beq.s	loc_13CA	; if not, branch
00001602                            
00001602                            loc_1404:				; XREF: PauseGame
00001602 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001608                            
00001608                            Unpause:				; XREF: PauseGame
00001608 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000160E                            
0000160E                            Pause_DoNothing:			; XREF: PauseGame
0000160E 4E75                       		rts	
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_SlowMo:				; XREF: PauseGame
00001610 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001616 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000161C 4E75                       		rts	
0000161E                            ; End of function PauseGame
0000161E                            
0000161E                            ; ---------------------------------------------------------------------------
0000161E                            ; Subroutine to	display	patterns via the VDP
0000161E                            ; ---------------------------------------------------------------------------
0000161E                            
0000161E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000161E                            
0000161E                            
0000161E                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000161E 4DF9 00C0 0000             		lea	($C00000).l,a6
00001624 283C 0080 0000             		move.l	#$800000,d4
0000162A                            
0000162A                            loc_142C:
0000162A 2D40 0004                  		move.l	d0,4(a6)
0000162E 3601                       		move.w	d1,d3
00001630                            
00001630                            loc_1432:
00001630 3C99                       		move.w	(a1)+,(a6)
00001632 51CB FFFC                  		dbf	d3,loc_1432
00001636 D084                       		add.l	d4,d0
00001638 51CA FFF0                  		dbf	d2,loc_142C
0000163C 4E75                       		rts	
0000163E                            ; End of function ShowVDPGraphics
0000163E                            
0000163E                            ; ---------------------------------------------------------------------------
0000163E                            ; Nemesis decompression	algorithm
0000163E                            ; ---------------------------------------------------------------------------
0000163E                            
0000163E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000163E                            
0000163E                            
0000163E                            NemDec:
0000163E 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001642 47F9 0000 0000             		lea	(loc_1502).l,a3
00001648 49F9 00C0 0000             		lea	($C00000).l,a4
0000164E 6000                       		bra.s	loc_145C
00001650                            ; ===========================================================================
00001650 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001654 47F9 0000 0000             		lea	(loc_1518).l,a3
0000165A                            
0000165A                            loc_145C:				; XREF: NemDec
0000165A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000165E 3418                       		move.w	(a0)+,d2
00001660 E34A                       		lsl.w	#1,d2
00001662 6400                       		bcc.s	loc_146A
00001664 D6FC 000A                  		adda.w	#$A,a3
00001668                            
00001668                            loc_146A:
00001668 E54A                       		lsl.w	#2,d2
0000166A 3A42                       		movea.w	d2,a5
0000166C 7608                       		moveq	#8,d3
0000166E 7400                       		moveq	#0,d2
00001670 7800                       		moveq	#0,d4
00001672 6100 0000                  		bsr.w	NemDec4
00001676 1A18                       		move.b	(a0)+,d5
00001678 E145                       		asl.w	#8,d5
0000167A 1A18                       		move.b	(a0)+,d5
0000167C 3C3C 0010                  		move.w	#$10,d6
00001680 6100                       		bsr.s	NemDec2
00001682 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001686 4E75                       		rts	
00001688                            ; End of function NemDec
00001688                            
00001688                            
00001688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001688                            
00001688                            
00001688                            NemDec2:				; XREF: NemDec
00001688 3E06                       		move.w	d6,d7
0000168A 5147                       		subq.w	#8,d7
0000168C 3205                       		move.w	d5,d1
0000168E EE69                       		lsr.w	d7,d1
00001690 0C01 00FC                  		cmpi.b	#-4,d1
00001694 6400                       		bcc.s	loc_14D6
00001696 0241 00FF                  		andi.w	#$FF,d1
0000169A D241                       		add.w	d1,d1
0000169C 1031 1000                  		move.b	(a1,d1.w),d0
000016A0 4880                       		ext.w	d0
000016A2 9C40                       		sub.w	d0,d6
000016A4 0C46 0009                  		cmpi.w	#9,d6
000016A8 6400                       		bcc.s	loc_14B2
000016AA 5046                       		addq.w	#8,d6
000016AC E145                       		asl.w	#8,d5
000016AE 1A18                       		move.b	(a0)+,d5
000016B0                            
000016B0                            loc_14B2:
000016B0 1231 1001                  		move.b	1(a1,d1.w),d1
000016B4 3001                       		move.w	d1,d0
000016B6 0241 000F                  		andi.w	#$F,d1
000016BA 0240 00F0                  		andi.w	#$F0,d0
000016BE                            
000016BE                            loc_14C0:				; XREF: NemDec3
000016BE E848                       		lsr.w	#4,d0
000016C0                            
000016C0                            loc_14C2:				; XREF: NemDec3
000016C0 E98C                       		lsl.l	#4,d4
000016C2 8801                       		or.b	d1,d4
000016C4 5343                       		subq.w	#1,d3
000016C6 6600                       		bne.s	loc_14D0
000016C8 4ED3                       		jmp	(a3)
000016CA                            ; End of function NemDec2
000016CA                            
000016CA                            
000016CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016CA                            
000016CA                            
000016CA                            NemDec3:				; XREF: loc_1502
000016CA 7800                       		moveq	#0,d4
000016CC 7608                       		moveq	#8,d3
000016CE                            
000016CE                            loc_14D0:				; XREF: NemDec2
000016CE 51C8 FFF0                  		dbf	d0,loc_14C2
000016D2 60B4                       		bra.s	NemDec2
000016D4                            ; ===========================================================================
000016D4                            
000016D4                            loc_14D6:				; XREF: NemDec2
000016D4 5D46                       		subq.w	#6,d6
000016D6 0C46 0009                  		cmpi.w	#9,d6
000016DA 6400                       		bcc.s	loc_14E4
000016DC 5046                       		addq.w	#8,d6
000016DE E145                       		asl.w	#8,d5
000016E0 1A18                       		move.b	(a0)+,d5
000016E2                            
000016E2                            loc_14E4:				; XREF: NemDec3
000016E2 5F46                       		subq.w	#7,d6
000016E4 3205                       		move.w	d5,d1
000016E6 EC69                       		lsr.w	d6,d1
000016E8 3001                       		move.w	d1,d0
000016EA 0241 000F                  		andi.w	#$F,d1
000016EE 0240 0070                  		andi.w	#$70,d0
000016F2 0C46 0009                  		cmpi.w	#9,d6
000016F6 64C6                       		bcc.s	loc_14C0
000016F8 5046                       		addq.w	#8,d6
000016FA E145                       		asl.w	#8,d5
000016FC 1A18                       		move.b	(a0)+,d5
000016FE 60BE                       		bra.s	loc_14C0
00001700                            ; End of function NemDec3
00001700                            
00001700                            ; ===========================================================================
00001700                            
00001700                            loc_1502:				; XREF: NemDec
00001700 2884                       		move.l	d4,(a4)
00001702 534D                       		subq.w	#1,a5
00001704 380D                       		move.w	a5,d4
00001706 66C2                       		bne.s	NemDec3
00001708 4E75                       		rts	
0000170A                            ; ===========================================================================
0000170A B982                       		eor.l	d4,d2
0000170C 2882                       		move.l	d2,(a4)
0000170E 534D                       		subq.w	#1,a5
00001710 380D                       		move.w	a5,d4
00001712 66B6                       		bne.s	NemDec3
00001714 4E75                       		rts	
00001716                            ; ===========================================================================
00001716                            
00001716                            loc_1518:				; XREF: NemDec
00001716 28C4                       		move.l	d4,(a4)+
00001718 534D                       		subq.w	#1,a5
0000171A 380D                       		move.w	a5,d4
0000171C 66AC                       		bne.s	NemDec3
0000171E 4E75                       		rts	
00001720                            ; ===========================================================================
00001720 B982                       		eor.l	d4,d2
00001722 28C2                       		move.l	d2,(a4)+
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66A0                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            
0000172C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000172C                            
0000172C                            
0000172C                            NemDec4:				; XREF: NemDec
0000172C 1018                       		move.b	(a0)+,d0
0000172E                            
0000172E                            loc_1530:
0000172E 0C00 00FF                  		cmpi.b	#-1,d0
00001732 6600                       		bne.s	loc_1538
00001734 4E75                       		rts	
00001736                            ; ===========================================================================
00001736                            
00001736                            loc_1538:				; XREF: NemDec4
00001736 3E00                       		move.w	d0,d7
00001738                            
00001738                            loc_153A:
00001738 1018                       		move.b	(a0)+,d0
0000173A 0C00 0080                  		cmpi.b	#$80,d0
0000173E 64EE                       		bcc.s	loc_1530
00001740 1200                       		move.b	d0,d1
00001742 0247 000F                  		andi.w	#$F,d7
00001746 0241 0070                  		andi.w	#$70,d1
0000174A 8E41                       		or.w	d1,d7
0000174C 0240 000F                  		andi.w	#$F,d0
00001750 1200                       		move.b	d0,d1
00001752 E149                       		lsl.w	#8,d1
00001754 8E41                       		or.w	d1,d7
00001756 7208                       		moveq	#8,d1
00001758 9240                       		sub.w	d0,d1
0000175A 6600                       		bne.s	loc_1568
0000175C 1018                       		move.b	(a0)+,d0
0000175E D040                       		add.w	d0,d0
00001760 3387 0000                  		move.w	d7,(a1,d0.w)
00001764 60D2                       		bra.s	loc_153A
00001766                            ; ===========================================================================
00001766                            
00001766                            loc_1568:				; XREF: NemDec4
00001766 1018                       		move.b	(a0)+,d0
00001768 E368                       		lsl.w	d1,d0
0000176A D040                       		add.w	d0,d0
0000176C 7A01                       		moveq	#1,d5
0000176E E36D                       		lsl.w	d1,d5
00001770 5345                       		subq.w	#1,d5
00001772                            
00001772                            loc_1574:
00001772 3387 0000                  		move.w	d7,(a1,d0.w)
00001776 5440                       		addq.w	#2,d0
00001778 51CD FFF8                  		dbf	d5,loc_1574
0000177C 60BA                       		bra.s	loc_153A
0000177E                            ; End of function NemDec4
0000177E                            
0000177E                            ; ---------------------------------------------------------------------------
0000177E                            ; Subroutine to	load pattern load cues
0000177E                            ; ---------------------------------------------------------------------------
0000177E                            
0000177E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000177E                            
0000177E                            
0000177E                            LoadPLC:
0000177E 48E7 0060                  		movem.l	a1-a2,-(sp)
00001782 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001788 D040                       		add.w	d0,d0
0000178A 3031 0000                  		move.w	(a1,d0.w),d0
0000178E 43F1 0000                  		lea	(a1,d0.w),a1
00001792 45F8 F680                  		lea	($FFFFF680).w,a2
00001796                            
00001796                            loc_1598:
00001796 4A92                       		tst.l	(a2)
00001798 6700                       		beq.s	loc_15A0
0000179A 5C4A                       		addq.w	#6,a2
0000179C 60F8                       		bra.s	loc_1598
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_15A0:				; XREF: LoadPLC
0000179E 3019                       		move.w	(a1)+,d0
000017A0 6B00                       		bmi.s	loc_15AC
000017A2                            
000017A2                            loc_15A4:
000017A2 24D9                       		move.l	(a1)+,(a2)+
000017A4 34D9                       		move.w	(a1)+,(a2)+
000017A6 51C8 FFFA                  		dbf	d0,loc_15A4
000017AA                            
000017AA                            loc_15AC:
000017AA 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017AE 4E75                       		rts	
000017B0                            ; End of function LoadPLC
000017B0                            
000017B0                            
000017B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B0                            
000017B0                            
000017B0                            LoadPLC2:
000017B0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017B4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017BA D040                       		add.w	d0,d0
000017BC 3031 0000                  		move.w	(a1,d0.w),d0
000017C0 43F1 0000                  		lea	(a1,d0.w),a1
000017C4 6100                       		bsr.s	ClearPLC
000017C6 45F8 F680                  		lea	($FFFFF680).w,a2
000017CA 3019                       		move.w	(a1)+,d0
000017CC 6B00                       		bmi.s	loc_15D8
000017CE                            
000017CE                            loc_15D0:
000017CE 24D9                       		move.l	(a1)+,(a2)+
000017D0 34D9                       		move.w	(a1)+,(a2)+
000017D2 51C8 FFFA                  		dbf	d0,loc_15D0
000017D6                            
000017D6                            loc_15D8:
000017D6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017DA 4E75                       		rts	
000017DC                            ; End of function LoadPLC2
000017DC                            
000017DC                            ; ---------------------------------------------------------------------------
000017DC                            ; Subroutine to	clear the pattern load cues
000017DC                            ; ---------------------------------------------------------------------------
000017DC                            
000017DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017DC                            
000017DC                            
000017DC                            ClearPLC:				; XREF: LoadPLC2
000017DC 45F8 F680                  		lea	($FFFFF680).w,a2
000017E0 701F                       		moveq	#$1F,d0
000017E2                            
000017E2                            ClearPLC_Loop:
000017E2 429A                       		clr.l	(a2)+
000017E4 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000017E8 4E75                       		rts	
000017EA                            ; End of function ClearPLC
000017EA                            
000017EA                            ; ---------------------------------------------------------------------------
000017EA                            ; Subroutine to	use graphics listed in a pattern load cue
000017EA                            ; ---------------------------------------------------------------------------
000017EA                            
000017EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017EA                            
000017EA                            
000017EA                            RunPLC_RAM:				; XREF: Pal_FadeTo
000017EA 4AB8 F680                  		tst.l	($FFFFF680).w
000017EE 6700                       		beq.s	locret_1640
000017F0 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000017F4 6600                       		bne.s	locret_1640
000017F6 2078 F680                  		movea.l	($FFFFF680).w,a0
000017FA 47F9 0000 1700             		lea	(loc_1502).l,a3
00001800 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001804 3418                       		move.w	(a0)+,d2
00001806 6A00                       		bpl.s	loc_160E
00001808 D6FC 000A                  		adda.w	#$A,a3
0000180C                            
0000180C                            loc_160E:
0000180C 0242 7FFF                  		andi.w	#$7FFF,d2
00001810 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001814 6100 FF16                  		bsr.w	NemDec4
00001818 1A18                       		move.b	(a0)+,d5
0000181A E145                       		asl.w	#8,d5
0000181C 1A18                       		move.b	(a0)+,d5
0000181E 7C10                       		moveq	#$10,d6
00001820 7000                       		moveq	#0,d0
00001822 21C8 F680                  		move.l	a0,($FFFFF680).w
00001826 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000182A 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000182E 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001832 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001836 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000183A 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000183E                            
0000183E                            locret_1640:
0000183E 4E75                       		rts	
00001840                            ; End of function RunPLC_RAM
00001840                            
00001840                            
00001840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001840                            
00001840                            
00001840                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001840 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001844 6700 0000                  		beq.w	locret_16DA
00001848 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000184E 7000                       		moveq	#0,d0
00001850 3038 F684                  		move.w	($FFFFF684).w,d0
00001854 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000185A 6000                       		bra.s	loc_1676
0000185C                            ; End of function sub_1642
0000185C                            
0000185C                            
0000185C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000185C                            
0000185C                            
0000185C                            sub_165E:				; XREF: Demo_Time
0000185C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001860 6700                       		beq.s	locret_16DA
00001862 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001868 7000                       		moveq	#0,d0
0000186A 3038 F684                  		move.w	($FFFFF684).w,d0
0000186E 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001874                            
00001874                            loc_1676:				; XREF: sub_1642
00001874 49F9 00C0 0004             		lea	($C00004).l,a4
0000187A E588                       		lsl.l	#2,d0
0000187C E448                       		lsr.w	#2,d0
0000187E 0040 4000                  		ori.w	#$4000,d0
00001882 4840                       		swap	d0
00001884 2880                       		move.l	d0,(a4)
00001886 594C                       		subq.w	#4,a4
00001888 2078 F680                  		movea.l	($FFFFF680).w,a0
0000188C 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001890 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001894 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001898 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000189C 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018A0 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018A4 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018A8                            
000018A8                            loc_16AA:				; XREF: sub_165E
000018A8 3A7C 0008                  		movea.w	#8,a5
000018AC 6100 FE1C                  		bsr.w	NemDec3
000018B0 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018B4 6700                       		beq.s	loc_16DC
000018B6 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018BA 66EC                       		bne.s	loc_16AA
000018BC 21C8 F680                  		move.l	a0,($FFFFF680).w
000018C0 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018C4 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018C8 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018CC 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018D0 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018D4 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018D8                            
000018D8                            locret_16DA:				; XREF: sub_1642
000018D8 4E75                       		rts	
000018DA                            ; ===========================================================================
000018DA                            
000018DA                            loc_16DC:				; XREF: sub_165E
000018DA 41F8 F680                  		lea	($FFFFF680).w,a0
000018DE 7015                       		moveq	#$15,d0
000018E0                            
000018E0                            loc_16E2:				; XREF: sub_165E
000018E0 20E8 0006                  		move.l	6(a0),(a0)+
000018E4 51C8 FFFA                  		dbf	d0,loc_16E2
000018E8 4E75                       		rts	
000018EA                            ; End of function sub_165E
000018EA                            
000018EA                            ; ---------------------------------------------------------------------------
000018EA                            ; Subroutine to	execute	the pattern load cue
000018EA                            ; ---------------------------------------------------------------------------
000018EA                            
000018EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018EA                            
000018EA                            
000018EA                            RunPLC_ROM:
000018EA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000018F0 D040                       		add.w	d0,d0
000018F2 3031 0000                  		move.w	(a1,d0.w),d0
000018F6 43F1 0000                  		lea	(a1,d0.w),a1
000018FA 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000018FC                            
000018FC                            RunPLC_Loop:
000018FC 2059                       		movea.l	(a1)+,a0	; get art pointer
000018FE 7000                       		moveq	#0,d0
00001900 3019                       		move.w	(a1)+,d0	; get VRAM address
00001902 E588                       		lsl.l	#2,d0		; divide address by $20
00001904 E448                       		lsr.w	#2,d0
00001906 0040 4000                  		ori.w	#$4000,d0
0000190A 4840                       		swap	d0
0000190C 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001912 6100 FD2A                  		bsr.w	NemDec		; decompress
00001916 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000191A 4E75                       		rts	
0000191C                            ; End of function RunPLC_ROM
0000191C                            
0000191C                            ; ---------------------------------------------------------------------------
0000191C                            ; Enigma decompression algorithm
0000191C                            ; ---------------------------------------------------------------------------
0000191C                            
0000191C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000191C                            
0000191C                            
0000191C                            EniDec:
0000191C 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001920 3640                       		movea.w	d0,a3
00001922 1018                       		move.b	(a0)+,d0
00001924 4880                       		ext.w	d0
00001926 3A40                       		movea.w	d0,a5
00001928 1818                       		move.b	(a0)+,d4
0000192A E70C                       		lsl.b	#3,d4
0000192C 3458                       		movea.w	(a0)+,a2
0000192E D4CB                       		adda.w	a3,a2
00001930 3858                       		movea.w	(a0)+,a4
00001932 D8CB                       		adda.w	a3,a4
00001934 1A18                       		move.b	(a0)+,d5
00001936 E145                       		asl.w	#8,d5
00001938 1A18                       		move.b	(a0)+,d5
0000193A 7C10                       		moveq	#$10,d6
0000193C                            
0000193C                            loc_173E:				; XREF: loc_1768
0000193C 7007                       		moveq	#7,d0
0000193E 3E06                       		move.w	d6,d7
00001940 9E40                       		sub.w	d0,d7
00001942 3205                       		move.w	d5,d1
00001944 EE69                       		lsr.w	d7,d1
00001946 0241 007F                  		andi.w	#$7F,d1
0000194A 3401                       		move.w	d1,d2
0000194C 0C41 0040                  		cmpi.w	#$40,d1
00001950 6400                       		bcc.s	loc_1758
00001952 7006                       		moveq	#6,d0
00001954 E24A                       		lsr.w	#1,d2
00001956                            
00001956                            loc_1758:
00001956 6100 0000                  		bsr.w	sub_188C
0000195A 0242 000F                  		andi.w	#$F,d2
0000195E E849                       		lsr.w	#4,d1
00001960 D241                       		add.w	d1,d1
00001962 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001966                            ; End of function EniDec
00001966                            
00001966                            ; ===========================================================================
00001966                            
00001966                            loc_1768:				; XREF: loc_17B4
00001966 32CA                       		move.w	a2,(a1)+
00001968 524A                       		addq.w	#1,a2
0000196A 51CA FFFA                  		dbf	d2,loc_1768
0000196E 60CC                       		bra.s	loc_173E
00001970                            ; ===========================================================================
00001970                            
00001970                            loc_1772:				; XREF: loc_17B4
00001970 32CC                       		move.w	a4,(a1)+
00001972 51CA FFFC                  		dbf	d2,loc_1772
00001976 60C4                       		bra.s	loc_173E
00001978                            ; ===========================================================================
00001978                            
00001978                            loc_177A:				; XREF: loc_17B4
00001978 6100 0000                  		bsr.w	loc_17DC
0000197C                            
0000197C                            loc_177E:
0000197C 32C1                       		move.w	d1,(a1)+
0000197E 51CA FFFC                  		dbf	d2,loc_177E
00001982 60B8                       		bra.s	loc_173E
00001984                            ; ===========================================================================
00001984                            
00001984                            loc_1786:				; XREF: loc_17B4
00001984 6100 0000                  		bsr.w	loc_17DC
00001988                            
00001988                            loc_178A:
00001988 32C1                       		move.w	d1,(a1)+
0000198A 5241                       		addq.w	#1,d1
0000198C 51CA FFFA                  		dbf	d2,loc_178A
00001990 60AA                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1794:				; XREF: loc_17B4
00001992 6100 0000                  		bsr.w	loc_17DC
00001996                            
00001996                            loc_1798:
00001996 32C1                       		move.w	d1,(a1)+
00001998 5341                       		subq.w	#1,d1
0000199A 51CA FFFA                  		dbf	d2,loc_1798
0000199E 609C                       		bra.s	loc_173E
000019A0                            ; ===========================================================================
000019A0                            
000019A0                            loc_17A2:				; XREF: loc_17B4
000019A0 0C42 000F                  		cmpi.w	#$F,d2
000019A4 6700                       		beq.s	loc_17C4
000019A6                            
000019A6                            loc_17A8:
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 51CA FFF8                  		dbf	d2,loc_17A8
000019B0 608A                       		bra.s	loc_173E
000019B2                            ; ===========================================================================
000019B2                            
000019B2                            loc_17B4:				; XREF: EniDec
000019B2 60B2                       		bra.s	loc_1768
000019B4                            ; ===========================================================================
000019B4 60B0                       		bra.s	loc_1768
000019B6                            ; ===========================================================================
000019B6 60B8                       		bra.s	loc_1772
000019B8                            ; ===========================================================================
000019B8 60B6                       		bra.s	loc_1772
000019BA                            ; ===========================================================================
000019BA 60BC                       		bra.s	loc_177A
000019BC                            ; ===========================================================================
000019BC 60C6                       		bra.s	loc_1786
000019BE                            ; ===========================================================================
000019BE 60D2                       		bra.s	loc_1794
000019C0                            ; ===========================================================================
000019C0 60DE                       		bra.s	loc_17A2
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17C4:				; XREF: loc_17A2
000019C2 5348                       		subq.w	#1,a0
000019C4 0C46 0010                  		cmpi.w	#$10,d6
000019C8 6600                       		bne.s	loc_17CE
000019CA 5348                       		subq.w	#1,a0
000019CC                            
000019CC                            loc_17CE:
000019CC 3008                       		move.w	a0,d0
000019CE E248                       		lsr.w	#1,d0
000019D0 6400                       		bcc.s	loc_17D6
000019D2 5248                       		addq.w	#1,a0
000019D4                            
000019D4                            loc_17D6:
000019D4 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019D8 4E75                       		rts	
000019DA                            ; ===========================================================================
000019DA                            
000019DA                            loc_17DC:				; XREF: loc_17A2
000019DA 360B                       		move.w	a3,d3
000019DC 1204                       		move.b	d4,d1
000019DE D201                       		add.b	d1,d1
000019E0 6400                       		bcc.s	loc_17EE
000019E2 5346                       		subq.w	#1,d6
000019E4 0D05                       		btst	d6,d5
000019E6 6700                       		beq.s	loc_17EE
000019E8 0043 8000                  		ori.w	#-$8000,d3
000019EC                            
000019EC                            loc_17EE:
000019EC D201                       		add.b	d1,d1
000019EE 6400                       		bcc.s	loc_17FC
000019F0 5346                       		subq.w	#1,d6
000019F2 0D05                       		btst	d6,d5
000019F4 6700                       		beq.s	loc_17FC
000019F6 0643 4000                  		addi.w	#$4000,d3
000019FA                            
000019FA                            loc_17FC:
000019FA D201                       		add.b	d1,d1
000019FC 6400                       		bcc.s	loc_180A
000019FE 5346                       		subq.w	#1,d6
00001A00 0D05                       		btst	d6,d5
00001A02 6700                       		beq.s	loc_180A
00001A04 0643 2000                  		addi.w	#$2000,d3
00001A08                            
00001A08                            loc_180A:
00001A08 D201                       		add.b	d1,d1
00001A0A 6400                       		bcc.s	loc_1818
00001A0C 5346                       		subq.w	#1,d6
00001A0E 0D05                       		btst	d6,d5
00001A10 6700                       		beq.s	loc_1818
00001A12 0043 1000                  		ori.w	#$1000,d3
00001A16                            
00001A16                            loc_1818:
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_1826
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_1826
00001A20 0043 0800                  		ori.w	#$800,d3
00001A24                            
00001A24                            loc_1826:
00001A24 3205                       		move.w	d5,d1
00001A26 3E06                       		move.w	d6,d7
00001A28 9E4D                       		sub.w	a5,d7
00001A2A 6400                       		bcc.s	loc_1856
00001A2C 3C07                       		move.w	d7,d6
00001A2E 0646 0010                  		addi.w	#$10,d6
00001A32 4447                       		neg.w	d7
00001A34 EF69                       		lsl.w	d7,d1
00001A36 1A10                       		move.b	(a0),d5
00001A38 EF3D                       		rol.b	d7,d5
00001A3A DE47                       		add.w	d7,d7
00001A3C CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A40 D245                       		add.w	d5,d1
00001A42                            
00001A42                            loc_1844:				; XREF: loc_1868
00001A42 300D                       		move.w	a5,d0
00001A44 D040                       		add.w	d0,d0
00001A46 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A4A D243                       		add.w	d3,d1
00001A4C 1A18                       		move.b	(a0)+,d5
00001A4E E14D                       		lsl.w	#8,d5
00001A50 1A18                       		move.b	(a0)+,d5
00001A52 4E75                       		rts	
00001A54                            ; ===========================================================================
00001A54                            
00001A54                            loc_1856:				; XREF: loc_1826
00001A54 6700                       		beq.s	loc_1868
00001A56 EE69                       		lsr.w	d7,d1
00001A58 300D                       		move.w	a5,d0
00001A5A D040                       		add.w	d0,d0
00001A5C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A60 D243                       		add.w	d3,d1
00001A62 300D                       		move.w	a5,d0
00001A64 6000                       		bra.s	sub_188C
00001A66                            ; ===========================================================================
00001A66                            
00001A66                            loc_1868:				; XREF: loc_1856
00001A66 7C10                       		moveq	#$10,d6
00001A68                            
00001A68                            loc_186A:
00001A68 60D8                       		bra.s	loc_1844
00001A6A                            ; ===========================================================================
00001A6A 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001A80 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001A8A                            
00001A8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A8A                            
00001A8A                            
00001A8A                            sub_188C:				; XREF: EniDec
00001A8A 9C40                       		sub.w	d0,d6
00001A8C 0C46 0009                  		cmpi.w	#9,d6
00001A90 6400                       		bcc.s	locret_189A
00001A92 5046                       		addq.w	#8,d6
00001A94 E145                       		asl.w	#8,d5
00001A96 1A18                       		move.b	(a0)+,d5
00001A98                            
00001A98                            locret_189A:
00001A98 4E75                       		rts	
00001A9A                            ; End of function sub_188C
00001A9A                            
00001A9A                            ; ---------------------------------------------------------------------------
00001A9A                            ; Kosinski decompression algorithm
00001A9A                            ; ---------------------------------------------------------------------------
00001A9A                            
00001A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A9A                            
00001A9A                            
00001A9A                            KosDec:
00001A9A                            
00001A9A =FFFFFFFE                  var_2		= -2
00001A9A =FFFFFFFF                  var_1		= -1
00001A9A                            
00001A9A 558F                       		subq.l	#2,sp
00001A9C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AA0 1E98                       		move.b	(a0)+,(sp)
00001AA2 3A17                       		move.w	(sp),d5
00001AA4 780F                       		moveq	#$F,d4
00001AA6                            
00001AA6                            loc_18A8:
00001AA6 E24D                       		lsr.w	#1,d5
00001AA8 40C6                       		move	sr,d6
00001AAA 51CC 0000                  		dbf	d4,loc_18BA
00001AAE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AB2 1E98                       		move.b	(a0)+,(sp)
00001AB4 3A17                       		move.w	(sp),d5
00001AB6 780F                       		moveq	#$F,d4
00001AB8                            
00001AB8                            loc_18BA:
00001AB8 44C6                       		move	d6,ccr
00001ABA 6400                       		bcc.s	loc_18C2
00001ABC 12D8                       		move.b	(a0)+,(a1)+
00001ABE 60E6                       		bra.s	loc_18A8
00001AC0                            ; ===========================================================================
00001AC0                            
00001AC0                            loc_18C2:				; XREF: KosDec
00001AC0 7600                       		moveq	#0,d3
00001AC2 E24D                       		lsr.w	#1,d5
00001AC4 40C6                       		move	sr,d6
00001AC6 51CC 0000                  		dbf	d4,loc_18D6
00001ACA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001ACE 1E98                       		move.b	(a0)+,(sp)
00001AD0 3A17                       		move.w	(sp),d5
00001AD2 780F                       		moveq	#$F,d4
00001AD4                            
00001AD4                            loc_18D6:
00001AD4 44C6                       		move	d6,ccr
00001AD6 6500                       		bcs.s	loc_1906
00001AD8 E24D                       		lsr.w	#1,d5
00001ADA 51CC 0000                  		dbf	d4,loc_18EA
00001ADE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AE2 1E98                       		move.b	(a0)+,(sp)
00001AE4 3A17                       		move.w	(sp),d5
00001AE6 780F                       		moveq	#$F,d4
00001AE8                            
00001AE8                            loc_18EA:
00001AE8 E353                       		roxl.w	#1,d3
00001AEA E24D                       		lsr.w	#1,d5
00001AEC 51CC 0000                  		dbf	d4,loc_18FC
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18FC:
00001AFA E353                       		roxl.w	#1,d3
00001AFC 5243                       		addq.w	#1,d3
00001AFE 74FF                       		moveq	#-1,d2
00001B00 1418                       		move.b	(a0)+,d2
00001B02 6000                       		bra.s	loc_191C
00001B04                            ; ===========================================================================
00001B04                            
00001B04                            loc_1906:				; XREF: loc_18C2
00001B04 1018                       		move.b	(a0)+,d0
00001B06 1218                       		move.b	(a0)+,d1
00001B08 74FF                       		moveq	#-1,d2
00001B0A 1401                       		move.b	d1,d2
00001B0C EB4A                       		lsl.w	#5,d2
00001B0E 1400                       		move.b	d0,d2
00001B10 0241 0007                  		andi.w	#7,d1
00001B14 6700                       		beq.s	loc_1928
00001B16 1601                       		move.b	d1,d3
00001B18 5243                       		addq.w	#1,d3
00001B1A                            
00001B1A                            loc_191C:
00001B1A 1031 2000                  		move.b	(a1,d2.w),d0
00001B1E 12C0                       		move.b	d0,(a1)+
00001B20 51CB FFF8                  		dbf	d3,loc_191C
00001B24 6080                       		bra.s	loc_18A8
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1928:				; XREF: loc_1906
00001B26 1218                       		move.b	(a0)+,d1
00001B28 6700                       		beq.s	loc_1938
00001B2A 0C01 0001                  		cmpi.b	#1,d1
00001B2E 6700 FF76                  		beq.w	loc_18A8
00001B32 1601                       		move.b	d1,d3
00001B34 60E4                       		bra.s	loc_191C
00001B36                            ; ===========================================================================
00001B36                            
00001B36                            loc_1938:				; XREF: loc_1928
00001B36 548F                       		addq.l	#2,sp
00001B38 4E75                       		rts	
00001B3A                            ; End of function KosDec
00001B3A                            
00001B3A                            ; ---------------------------------------------------------------------------
00001B3A                            ; Pallet cycling routine loading subroutine
00001B3A                            ; ---------------------------------------------------------------------------
00001B3A                            
00001B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B3A                            
00001B3A                            
00001B3A                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B3A 7400                       		moveq	#0,d2
00001B3C 7000                       		moveq	#0,d0
00001B3E 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B42 D040                       		add.w	d0,d0		; multiply by 2
00001B44 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B48 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B4C                            ; End of function PalCycle_Load
00001B4C                            
00001B4C                            ; ===========================================================================
00001B4C                            ; ---------------------------------------------------------------------------
00001B4C                            ; Pallet cycling routines
00001B4C                            ; ---------------------------------------------------------------------------
00001B4C 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B4E 0000                       		dc.w PalCycle_LZ-PalCycle
00001B50 0000                       		dc.w PalCycle_MZ-PalCycle
00001B52 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B54 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B56 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B58 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B5A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Title:				; XREF: TitleScreen
00001B5C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B62 6000                       		bra.s	loc_196A
00001B64                            ; ===========================================================================
00001B64                            
00001B64                            PalCycle_GHZ:				; XREF: PalCycle
00001B64 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B6A                            
00001B6A                            loc_196A:				; XREF: PalCycle_Title
00001B6A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B6E 6A00                       		bpl.s	locret_1990
00001B70 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B76 3038 F632                  		move.w	($FFFFF632).w,d0
00001B7A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B7E 0240 0003                  		andi.w	#3,d0
00001B82 E748                       		lsl.w	#3,d0
00001B84 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001B88 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B8C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001B90                            
00001B90                            locret_1990:
00001B90 4E75                       		rts	
00001B92                            ; End of function PalCycle_Title
00001B92                            
00001B92                            
00001B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B92                            
00001B92                            
00001B92                            PalCycle_LZ:				; XREF: PalCycle
00001B92 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B96 6A00                       		bpl.s	loc_19D8
00001B98 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001B9E 3038 F632                  		move.w	($FFFFF632).w,d0
00001BA2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA6 0240 0003                  		andi.w	#3,d0
00001BAA E748                       		lsl.w	#3,d0
00001BAC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BB2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BB8 6600                       		bne.s	loc_19C0
00001BBA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BC0                            
00001BC0                            loc_19C0:
00001BC0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BC4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BCC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BD0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BD4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BD8                            
00001BD8                            loc_19D8:
00001BD8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BDC 0240 0007                  		andi.w	#7,d0
00001BE0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001BE4 6700                       		beq.s	locret_1A3A
00001BE6 7201                       		moveq	#1,d1
00001BE8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001BEC 6700                       		beq.s	loc_19F0
00001BEE 4441                       		neg.w	d1
00001BF0                            
00001BF0                            loc_19F0:
00001BF0 3038 F650                  		move.w	($FFFFF650).w,d0
00001BF4 0240 0003                  		andi.w	#3,d0
00001BF8 D041                       		add.w	d1,d0
00001BFA 0C40 0003                  		cmpi.w	#3,d0
00001BFE 6500                       		bcs.s	loc_1A0A
00001C00 3200                       		move.w	d0,d1
00001C02 7000                       		moveq	#0,d0
00001C04 4A41                       		tst.w	d1
00001C06 6A00                       		bpl.s	loc_1A0A
00001C08 7002                       		moveq	#2,d0
00001C0A                            
00001C0A                            loc_1A0A:
00001C0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C0E D040                       		add.w	d0,d0
00001C10 3200                       		move.w	d0,d1
00001C12 D040                       		add.w	d0,d0
00001C14 D041                       		add.w	d1,d0
00001C16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C3A                            
00001C3A                            locret_1A3A:
00001C3A 4E75                       		rts	
00001C3C                            ; End of function PalCycle_LZ
00001C3C                            
00001C3C                            ; ===========================================================================
00001C3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C44                            ; ===========================================================================
00001C44                            
00001C44                            PalCycle_MZ:				; XREF: PalCycle
00001C44 4E75                       		rts	
00001C46                            
00001C46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C46                            
00001C46                            
00001C46                            PalCycle_SLZ:				; XREF: PalCycle
00001C46 4E75                       		rts	
00001C48                            ; End of function PalCycle_SLZ
00001C48                            
00001C48                            
00001C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C48                            
00001C48                            
00001C48                            PalCycle_SYZ:				; XREF: PalCycle
00001C48 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C4C 6A00                       		bpl.s	locret_1AC6
00001C4E 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C54 3038 F632                  		move.w	($FFFFF632).w,d0
00001C58 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C5C 0240 0003                  		andi.w	#3,d0
00001C60 E548                       		lsl.w	#2,d0
00001C62 3200                       		move.w	d0,d1
00001C64 D040                       		add.w	d0,d0
00001C66 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C6C 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C70 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C74 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C78 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001C7E 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C82 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001C86 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001C8C                            
00001C8C                            locret_1AC6:
00001C8C 4E75                       		rts	
00001C8E                            ; End of function PalCycle_SYZ
00001C8E                            
00001C8E                            
00001C8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C8E                            
00001C8E                            
00001C8E                            PalCycle_SBZ:				; XREF: PalCycle
00001C8E 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001C94 4A38 FE11                  		tst.b	($FFFFFE11).w
00001C98 6700                       		beq.s	loc_1ADA
00001C9A 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CA0                            
00001CA0                            loc_1ADA:
00001CA0 43F8 F650                  		lea	($FFFFF650).w,a1
00001CA4 321A                       		move.w	(a2)+,d1
00001CA6                            
00001CA6                            loc_1AE0:
00001CA6 5311                       		subq.b	#1,(a1)
00001CA8 6B00                       		bmi.s	loc_1AEA
00001CAA 5489                       		addq.l	#2,a1
00001CAC 5C8A                       		addq.l	#6,a2
00001CAE 6000                       		bra.s	loc_1B06
00001CB0                            ; ===========================================================================
00001CB0                            
00001CB0                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CB0 12DA                       		move.b	(a2)+,(a1)+
00001CB2 1011                       		move.b	(a1),d0
00001CB4 5200                       		addq.b	#1,d0
00001CB6 B01A                       		cmp.b	(a2)+,d0
00001CB8 6500                       		bcs.s	loc_1AF6
00001CBA 7000                       		moveq	#0,d0
00001CBC                            
00001CBC                            loc_1AF6:
00001CBC 12C0                       		move.b	d0,(a1)+
00001CBE 0240 000F                  		andi.w	#$F,d0
00001CC2 D040                       		add.w	d0,d0
00001CC4 305A                       		movea.w	(a2)+,a0
00001CC6 365A                       		movea.w	(a2)+,a3
00001CC8 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CCC                            
00001CCC                            loc_1B06:				; XREF: PalCycle_SBZ
00001CCC 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CD0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CD4 6A00                       		bpl.s	locret_1B64
00001CD6 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001CDC 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001CE2 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CE6 6700                       		beq.s	loc_1B2E
00001CE8 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001CEE 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001CF4                            
00001CF4                            loc_1B2E:
00001CF4 72FF                       		moveq	#-1,d1
00001CF6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001CFA 6700                       		beq.s	loc_1B38
00001CFC 4441                       		neg.w	d1
00001CFE                            
00001CFE                            loc_1B38:
00001CFE 3038 F632                  		move.w	($FFFFF632).w,d0
00001D02 0240 0003                  		andi.w	#3,d0
00001D06 D041                       		add.w	d1,d0
00001D08 0C40 0003                  		cmpi.w	#3,d0
00001D0C 6500                       		bcs.s	loc_1B52
00001D0E 3200                       		move.w	d0,d1
00001D10 7000                       		moveq	#0,d0
00001D12 4A41                       		tst.w	d1
00001D14 6A00                       		bpl.s	loc_1B52
00001D16 7002                       		moveq	#2,d0
00001D18                            
00001D18                            loc_1B52:
00001D18 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D1C D040                       		add.w	d0,d0
00001D1E 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D22 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D26 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D2A                            
00001D2A                            locret_1B64:
00001D2A 4E75                       		rts	
00001D2C                            ; End of function PalCycle_SBZ
00001D2C                            
00001D2C                            ; ===========================================================================
00001D2C                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D4C                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D6C                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001D8C                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001D9E                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DB0                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E18                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E3C                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E5C                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E6C                            
00001E6C                            Pal_SBZCycList:
00001E6C                            	include "_inc\SBZ pallet script 1.asm"
00001E6C                            ; ---------------------------------------------------------------------------
00001E6C                            ; Scrap Brain Zone 1 pallet cycling script
00001E6C                            ; ---------------------------------------------------------------------------
00001E6C 0008                       	dc.w 8			; number of entries - 1
00001E6E 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E70 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E72 FB50                       	dc.w $FB50		; RAM address
00001E74 0D08                       	dc.b $D, 8
00001E76 0000                       	dc.w Pal_SBZCyc2
00001E78 FB52                       	dc.w $FB52
00001E7A 0E08                       	dc.b $E, 8
00001E7C 0000                       	dc.w Pal_SBZCyc3
00001E7E FB6E                       	dc.w $FB6E
00001E80 0B08                       	dc.b $B, 8
00001E82 0000                       	dc.w Pal_SBZCyc5
00001E84 FB70                       	dc.w $FB70
00001E86 0708                       	dc.b 7,	8
00001E88 0000                       	dc.w Pal_SBZCyc6
00001E8A FB72                       	dc.w $FB72
00001E8C 1C10                       	dc.b $1C, $10
00001E8E 0000                       	dc.w Pal_SBZCyc7
00001E90 FB7E                       	dc.w $FB7E
00001E92 0303                       	dc.b 3,	3
00001E94 0000                       	dc.w Pal_SBZCyc8
00001E96 FB78                       	dc.w $FB78
00001E98 0303                       	dc.b 3,	3
00001E9A 0000                       	dc.w Pal_SBZCyc8+2
00001E9C FB7A                       	dc.w $FB7A
00001E9E 0303                       	dc.b 3,	3
00001EA0 0000                       	dc.w Pal_SBZCyc8+4
00001EA2 FB7C                       	dc.w $FB7C
00001EA4                            	even
00001EA4                            	even
00001EA4                            
00001EA4                            Pal_SBZCycList2:
00001EA4                            	include "_inc\SBZ pallet script 2.asm"
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4                            ; Scrap Brain Zone 2 pallet cycling script
00001EA4                            ; ---------------------------------------------------------------------------
00001EA4 0006                       	dc.w 6
00001EA6 0708                       	dc.b 7,	8
00001EA8 0000                       	dc.w Pal_SBZCyc1
00001EAA FB50                       	dc.w $FB50
00001EAC 0D08                       	dc.b $D, 8
00001EAE 0000                       	dc.w Pal_SBZCyc2
00001EB0 FB52                       	dc.w $FB52
00001EB2 0908                       	dc.b 9,	8
00001EB4 0000                       	dc.w Pal_SBZCyc9
00001EB6 FB70                       	dc.w $FB70
00001EB8 0708                       	dc.b 7,	8
00001EBA 0000                       	dc.w Pal_SBZCyc6
00001EBC FB72                       	dc.w $FB72
00001EBE 0303                       	dc.b 3,	3
00001EC0 0000                       	dc.w Pal_SBZCyc8
00001EC2 FB78                       	dc.w $FB78
00001EC4 0303                       	dc.b 3,	3
00001EC6 0000                       	dc.w Pal_SBZCyc8+2
00001EC8 FB7A                       	dc.w $FB7A
00001ECA 0303                       	dc.b 3,	3
00001ECC 0000                       	dc.w Pal_SBZCyc8+4
00001ECE FB7C                       	dc.w $FB7C
00001ED0                            	even
00001ED0                            	even
00001ED0                            
00001ED0                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001EE0                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001EF0                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F00                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F0C                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F1C                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F2C                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F4C                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F56                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F66                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F72                            ; ---------------------------------------------------------------------------
00001F72                            ; Subroutine to	fade out and fade in
00001F72                            ; ---------------------------------------------------------------------------
00001F72                            
00001F72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F72                            
00001F72                            
00001F72                            Pal_FadeTo:
00001F72 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F78                            
00001F78                            Pal_FadeTo2:
00001F78 7000                       		moveq	#0,d0
00001F7A 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F7E 1038 F626                  		move.b	($FFFFF626).w,d0
00001F82 D0C0                       		adda.w	d0,a0
00001F84 7200                       		moveq	#0,d1
00001F86 1038 F627                  		move.b	($FFFFF627).w,d0
00001F8A                            
00001F8A                            Pal_ToBlack:
00001F8A 30C1                       		move.w	d1,(a0)+
00001F8C 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001F90                            
00001F90 383C 0015                  		move.w	#$15,d4
00001F94 1A3C 0009                  		move.b	#9,d5
00001F98                            
00001F98                            loc_1DCE:
00001F98 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F9E 6100 0000                  		bsr.w	DelayProgram
00001FA2 6100                       		bsr.s	Pal_FadeIn
00001FA4 6100 F844                  		bsr.w	RunPLC_RAM
00001FA8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FAC 4E75                       		rts	
00001FAE                            ; End of function Pal_FadeTo
00001FAE                            
00001FAE                            ; ---------------------------------------------------------------------------
00001FAE                            ; Pallet fade-in subroutine
00001FAE                            ; ---------------------------------------------------------------------------
00001FAE                            
00001FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FAE                            
00001FAE                            
00001FAE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FAE 7000                       		moveq	#0,d0
00001FB0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE D2C0                       		adda.w	d0,a1
00001FC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC4                            
00001FC4                            loc_1DFA:
00001FC4 6100                       		bsr.s	Pal_AddColor
00001FC6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FCA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FD0 6600                       		bne.s	locret_1E24
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FD8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001FE0 D0C0                       		adda.w	d0,a0
00001FE2 D2C0                       		adda.w	d0,a1
00001FE4 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE8                            
00001FE8                            loc_1E1E:
00001FE8 6100                       		bsr.s	Pal_AddColor
00001FEA 51C8 FFFC                  		dbf	d0,loc_1E1E
00001FEE                            
00001FEE                            locret_1E24:
00001FEE 4E75                       		rts	
00001FF0                            ; End of function Pal_FadeIn
00001FF0                            
00001FF0                            
00001FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF0                            
00001FF0                            
00001FF0                            Pal_AddColor:				; XREF: Pal_FadeIn
00001FF0 3419                       		move.w	(a1)+,d2
00001FF2 3610                       		move.w	(a0),d3
00001FF4 B642                       		cmp.w	d2,d3
00001FF6 6700                       		beq.s	loc_1E4E
00001FF8 3203                       		move.w	d3,d1
00001FFA 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001FFE B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002000 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002002 30C1                       		move.w	d1,(a0)+	; update pallet
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            Pal_AddGreen:				; XREF: Pal_AddColor
00002006 3203                       		move.w	d3,d1
00002008 0641 0020                  		addi.w	#$20,d1		; increase green value
0000200C B242                       		cmp.w	d2,d1
0000200E 6200                       		bhi.s	Pal_AddRed
00002010 30C1                       		move.w	d1,(a0)+	; update pallet
00002012 4E75                       		rts	
00002014                            ; ===========================================================================
00002014                            
00002014                            Pal_AddRed:				; XREF: Pal_AddGreen
00002014 5458                       		addq.w	#2,(a0)+	; increase red value
00002016 4E75                       		rts	
00002018                            ; ===========================================================================
00002018                            
00002018                            loc_1E4E:				; XREF: Pal_AddColor
00002018 5448                       		addq.w	#2,a0
0000201A 4E75                       		rts	
0000201C                            ; End of function Pal_AddColor
0000201C                            
0000201C                            
0000201C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000201C                            
0000201C                            
0000201C                            Pal_FadeFrom:
0000201C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002022 383C 0015                  		move.w	#$15,d4
00002026                            loc_1E5C:
00002026 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000202C 6100 0000                  		bsr.w	DelayProgram
00002030 6100                       		bsr.s	Pal_FadeOut
00002032 6100 F7B6                  		bsr.w	RunPLC_RAM
00002036 51CC FFEE                  		dbf	d4,loc_1E5C
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_FadeFrom
0000203C                            
0000203C                            ; ---------------------------------------------------------------------------
0000203C                            ; Pallet fade-out subroutine
0000203C                            ; ---------------------------------------------------------------------------
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000203C 7000                       		moveq	#0,d0
0000203E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002042 1038 F626                  		move.b	($FFFFF626).w,d0
00002046 D0C0                       		adda.w	d0,a0
00002048 1038 F627                  		move.b	($FFFFF627).w,d0
0000204C                            
0000204C                            loc_1E82:
0000204C 6100                       		bsr.s	Pal_DecColor
0000204E 51C8 FFFC                  		dbf	d0,loc_1E82
00002052                            
00002052 7000                       		moveq	#0,d0
00002054 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002058 1038 F626                  		move.b	($FFFFF626).w,d0
0000205C D0C0                       		adda.w	d0,a0
0000205E 1038 F627                  		move.b	($FFFFF627).w,d0
00002062                            
00002062                            loc_1E98:
00002062 6100                       		bsr.s	Pal_DecColor
00002064 51C8 FFFC                  		dbf	d0,loc_1E98
00002068 4E75                       		rts	
0000206A                            ; End of function Pal_FadeOut
0000206A                            
0000206A                            
0000206A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000206A                            
0000206A                            
0000206A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000206A 3410                       		move.w	(a0),d2
0000206C 6700                       		beq.s	loc_1ECC
0000206E 3202                       		move.w	d2,d1
00002070 0241 000E                  		andi.w	#$E,d1
00002074 6700                       		beq.s	Pal_DecGreen
00002076 5558                       		subq.w	#2,(a0)+	; decrease red value
00002078 4E75                       		rts	
0000207A                            ; ===========================================================================
0000207A                            
0000207A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000207A 3202                       		move.w	d2,d1
0000207C 0241 00E0                  		andi.w	#$E0,d1
00002080 6700                       		beq.s	Pal_DecBlue
00002082 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            Pal_DecBlue:				; XREF: Pal_DecGreen
00002088 3202                       		move.w	d2,d1
0000208A 0241 0E00                  		andi.w	#$E00,d1
0000208E 6700                       		beq.s	loc_1ECC
00002090 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002094 4E75                       		rts	
00002096                            ; ===========================================================================
00002096                            
00002096                            loc_1ECC:				; XREF: Pal_DecColor
00002096 5448                       		addq.w	#2,a0
00002098 4E75                       		rts	
0000209A                            ; End of function Pal_DecColor
0000209A                            
0000209A                            ; ---------------------------------------------------------------------------
0000209A                            ; Subroutine to	fill the pallet	with white (special stage)
0000209A                            ; ---------------------------------------------------------------------------
0000209A                            
0000209A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000209A                            
0000209A                            
0000209A                            Pal_MakeWhite:				; XREF: SpecialStage
0000209A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020A0 7000                       		moveq	#0,d0
000020A2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020A6 1038 F626                  		move.b	($FFFFF626).w,d0
000020AA D0C0                       		adda.w	d0,a0
000020AC 323C 0EEE                  		move.w	#$EEE,d1
000020B0 1038 F627                  		move.b	($FFFFF627).w,d0
000020B4                            
000020B4                            PalWhite_Loop:
000020B4 30C1                       		move.w	d1,(a0)+
000020B6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020BA 383C 0015                  		move.w	#$15,d4
000020BE                            
000020BE                            loc_1EF4:
000020BE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020C4 6100 0000                  		bsr.w	DelayProgram
000020C8 6100                       		bsr.s	Pal_WhiteToBlack
000020CA 6100 F71E                  		bsr.w	RunPLC_RAM
000020CE 51CC FFEE                  		dbf	d4,loc_1EF4
000020D2 4E75                       		rts	
000020D4                            ; End of function Pal_MakeWhite
000020D4                            
000020D4                            
000020D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020D4                            
000020D4                            
000020D4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020D4 7000                       		moveq	#0,d0
000020D6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020DA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020DE 1038 F626                  		move.b	($FFFFF626).w,d0
000020E2 D0C0                       		adda.w	d0,a0
000020E4 D2C0                       		adda.w	d0,a1
000020E6 1038 F627                  		move.b	($FFFFF627).w,d0
000020EA                            
000020EA                            loc_1F20:
000020EA 6100                       		bsr.s	Pal_DecColor2
000020EC 51C8 FFFC                  		dbf	d0,loc_1F20
000020F0                            
000020F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000020F6 6600                       		bne.s	locret_1F4A
000020F8 7000                       		moveq	#0,d0
000020FA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020FE 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002102 1038 F626                  		move.b	($FFFFF626).w,d0
00002106 D0C0                       		adda.w	d0,a0
00002108 D2C0                       		adda.w	d0,a1
0000210A 1038 F627                  		move.b	($FFFFF627).w,d0
0000210E                            
0000210E                            loc_1F44:
0000210E 6100                       		bsr.s	Pal_DecColor2
00002110 51C8 FFFC                  		dbf	d0,loc_1F44
00002114                            
00002114                            locret_1F4A:
00002114 4E75                       		rts	
00002116                            ; End of function Pal_WhiteToBlack
00002116                            
00002116                            
00002116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002116                            
00002116                            
00002116                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002116 3419                       		move.w	(a1)+,d2
00002118 3610                       		move.w	(a0),d3
0000211A B642                       		cmp.w	d2,d3
0000211C 6700                       		beq.s	loc_1F78
0000211E 3203                       		move.w	d3,d1
00002120 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002124 6500                       		bcs.s	loc_1F64
00002126 B242                       		cmp.w	d2,d1
00002128 6500                       		bcs.s	loc_1F64
0000212A 30C1                       		move.w	d1,(a0)+
0000212C 4E75                       		rts	
0000212E                            ; ===========================================================================
0000212E                            
0000212E                            loc_1F64:				; XREF: Pal_DecColor2
0000212E 3203                       		move.w	d3,d1
00002130 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002134 6500                       		bcs.s	loc_1F74
00002136 B242                       		cmp.w	d2,d1
00002138 6500                       		bcs.s	loc_1F74
0000213A 30C1                       		move.w	d1,(a0)+
0000213C 4E75                       		rts	
0000213E                            ; ===========================================================================
0000213E                            
0000213E                            loc_1F74:				; XREF: loc_1F64
0000213E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002140 4E75                       		rts	
00002142                            ; ===========================================================================
00002142                            
00002142                            loc_1F78:				; XREF: Pal_DecColor2
00002142 5448                       		addq.w	#2,a0
00002144 4E75                       		rts	
00002146                            ; End of function Pal_DecColor2
00002146                            
00002146                            ; ---------------------------------------------------------------------------
00002146                            ; Subroutine to	make a white flash when	you enter a special stage
00002146                            ; ---------------------------------------------------------------------------
00002146                            
00002146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002146                            
00002146                            
00002146                            Pal_MakeFlash:				; XREF: SpecialStage
00002146 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000214C 383C 0015                  		move.w	#$15,d4
00002150                            
00002150                            loc_1F86:
00002150 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002156 6100 0000                  		bsr.w	DelayProgram
0000215A 6100                       		bsr.s	Pal_ToWhite
0000215C 6100 F68C                  		bsr.w	RunPLC_RAM
00002160 51CC FFEE                  		dbf	d4,loc_1F86
00002164 4E75                       		rts	
00002166                            ; End of function Pal_MakeFlash
00002166                            
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002166 7000                       		moveq	#0,d0
00002168 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000216C 1038 F626                  		move.b	($FFFFF626).w,d0
00002170 D0C0                       		adda.w	d0,a0
00002172 1038 F627                  		move.b	($FFFFF627).w,d0
00002176                            
00002176                            loc_1FAC:
00002176 6100                       		bsr.s	Pal_AddColor2
00002178 51C8 FFFC                  		dbf	d0,loc_1FAC
0000217C 7000                       		moveq	#0,d0
0000217E 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002182 1038 F626                  		move.b	($FFFFF626).w,d0
00002186 D0C0                       		adda.w	d0,a0
00002188 1038 F627                  		move.b	($FFFFF627).w,d0
0000218C                            
0000218C                            loc_1FC2:
0000218C 6100                       		bsr.s	Pal_AddColor2
0000218E 51C8 FFFC                  		dbf	d0,loc_1FC2
00002192 4E75                       		rts	
00002194                            ; End of function Pal_ToWhite
00002194                            
00002194                            
00002194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002194                            
00002194                            
00002194                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002194 3410                       		move.w	(a0),d2
00002196 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000219A 6700                       		beq.s	loc_2006
0000219C 3202                       		move.w	d2,d1
0000219E 0241 000E                  		andi.w	#$E,d1
000021A2 0C41 000E                  		cmpi.w	#$E,d1
000021A6 6700                       		beq.s	loc_1FE2
000021A8 5458                       		addq.w	#2,(a0)+	; increase red value
000021AA 4E75                       		rts	
000021AC                            ; ===========================================================================
000021AC                            
000021AC                            loc_1FE2:				; XREF: Pal_AddColor2
000021AC 3202                       		move.w	d2,d1
000021AE 0241 00E0                  		andi.w	#$E0,d1
000021B2 0C41 00E0                  		cmpi.w	#$E0,d1
000021B6 6700                       		beq.s	loc_1FF4
000021B8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021BC 4E75                       		rts	
000021BE                            ; ===========================================================================
000021BE                            
000021BE                            loc_1FF4:				; XREF: loc_1FE2
000021BE 3202                       		move.w	d2,d1
000021C0 0241 0E00                  		andi.w	#$E00,d1
000021C4 0C41 0E00                  		cmpi.w	#$E00,d1
000021C8 6700                       		beq.s	loc_2006
000021CA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021CE 4E75                       		rts	
000021D0                            ; ===========================================================================
000021D0                            
000021D0                            loc_2006:				; XREF: Pal_AddColor2
000021D0 5448                       		addq.w	#2,a0
000021D2 4E75                       		rts	
000021D4                            ; End of function Pal_AddColor2
000021D4                            
000021D4                            ; ---------------------------------------------------------------------------
000021D4                            ; Pallet cycling routine - Sega	logo
000021D4                            ; ---------------------------------------------------------------------------
000021D4                            
000021D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021D4                            
000021D4                            
000021D4                            PalCycle_Sega:				; XREF: SegaScreen
000021D4 4A38 F635                  		tst.b	($FFFFF635).w
000021D8 6600                       		bne.s	loc_206A
000021DA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021DE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000021E4 7205                       		moveq	#5,d1
000021E6 3038 F632                  		move.w	($FFFFF632).w,d0
000021EA                            
000021EA                            loc_2020:
000021EA 6A00                       		bpl.s	loc_202A
000021EC 5448                       		addq.w	#2,a0
000021EE 5341                       		subq.w	#1,d1
000021F0 5440                       		addq.w	#2,d0
000021F2 60F6                       		bra.s	loc_2020
000021F4                            ; ===========================================================================
000021F4                            
000021F4                            loc_202A:				; XREF: PalCycle_Sega
000021F4 3400                       		move.w	d0,d2
000021F6 0242 001E                  		andi.w	#$1E,d2
000021FA 6600                       		bne.s	loc_2034
000021FC 5440                       		addq.w	#2,d0
000021FE                            
000021FE                            loc_2034:
000021FE 0C40 0060                  		cmpi.w	#$60,d0
00002202 6400                       		bcc.s	loc_203E
00002204 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002208                            
00002208                            loc_203E:
00002208 5440                       		addq.w	#2,d0
0000220A 51C9 FFE8                  		dbf	d1,loc_202A
0000220E 3038 F632                  		move.w	($FFFFF632).w,d0
00002212 5440                       		addq.w	#2,d0
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2054
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2054:
0000221E 0C40 0064                  		cmpi.w	#$64,d0
00002222 6D00                       		blt.s	loc_2062
00002224 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000222A 70F4                       		moveq	#-$C,d0
0000222C                            
0000222C                            loc_2062:
0000222C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002230 7001                       		moveq	#1,d0
00002232 4E75                       		rts	
00002234                            ; ===========================================================================
00002234                            
00002234                            loc_206A:				; XREF: loc_202A
00002234 5338 F634                  		subq.b	#1,($FFFFF634).w
00002238 6A00                       		bpl.s	loc_20BC
0000223A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002240 3038 F632                  		move.w	($FFFFF632).w,d0
00002244 0640 000C                  		addi.w	#$C,d0
00002248 0C40 0030                  		cmpi.w	#$30,d0
0000224C 6500                       		bcs.s	loc_2088
0000224E 7000                       		moveq	#0,d0
00002250 4E75                       		rts	
00002252                            ; ===========================================================================
00002252                            
00002252                            loc_2088:				; XREF: loc_206A
00002252 31C0 F632                  		move.w	d0,($FFFFF632).w
00002256 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000225C 41F0 0000                  		lea	(a0,d0.w),a0
00002260 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002264 22D8                       		move.l	(a0)+,(a1)+
00002266 22D8                       		move.l	(a0)+,(a1)+
00002268 3298                       		move.w	(a0)+,(a1)
0000226A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000226E 7000                       		moveq	#0,d0
00002270 722C                       		moveq	#$2C,d1
00002272                            
00002272                            loc_20A8:
00002272 3400                       		move.w	d0,d2
00002274 0242 001E                  		andi.w	#$1E,d2
00002278 6600                       		bne.s	loc_20B2
0000227A 5440                       		addq.w	#2,d0
0000227C                            
0000227C                            loc_20B2:
0000227C 3390 0000                  		move.w	(a0),(a1,d0.w)
00002280 5440                       		addq.w	#2,d0
00002282 51C9 FFEE                  		dbf	d1,loc_20A8
00002286                            
00002286                            loc_20BC:
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; End of function PalCycle_Sega
0000228A                            
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            Pal_Sega1:	incbin	pallet\sega1.bin
00002296                            Pal_Sega2:	incbin	pallet\sega2.bin
000022C6                            
000022C6                            ; ---------------------------------------------------------------------------
000022C6                            ; Subroutines to load pallets
000022C6                            ; ---------------------------------------------------------------------------
000022C6                            
000022C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022C6                            
000022C6                            
000022C6                            PalLoad1:
000022C6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022CC E748                       		lsl.w	#3,d0
000022CE D2C0                       		adda.w	d0,a1
000022D0 2459                       		movea.l	(a1)+,a2
000022D2 3659                       		movea.w	(a1)+,a3
000022D4 D6FC 0080                  		adda.w	#$80,a3
000022D8 3E19                       		move.w	(a1)+,d7
000022DA                            
000022DA                            loc_2110:
000022DA 26DA                       		move.l	(a2)+,(a3)+
000022DC 51CF FFFC                  		dbf	d7,loc_2110
000022E0 4E75                       		rts	
000022E2                            ; End of function PalLoad1
000022E2                            
000022E2                            
000022E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E2                            
000022E2                            
000022E2                            PalLoad2:
000022E2 43F9 0000 0000             		lea	(PalPointers).l,a1
000022E8 E748                       		lsl.w	#3,d0
000022EA D2C0                       		adda.w	d0,a1
000022EC 2459                       		movea.l	(a1)+,a2
000022EE 3659                       		movea.w	(a1)+,a3
000022F0 3E19                       		move.w	(a1)+,d7
000022F2                            
000022F2                            loc_2128:
000022F2 26DA                       		move.l	(a2)+,(a3)+
000022F4 51CF FFFC                  		dbf	d7,loc_2128
000022F8 4E75                       		rts	
000022FA                            ; End of function PalLoad2
000022FA                            
000022FA                            ; ---------------------------------------------------------------------------
000022FA                            ; Underwater pallet loading subroutine
000022FA                            ; ---------------------------------------------------------------------------
000022FA                            
000022FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022FA                            
000022FA                            
000022FA                            PalLoad3_Water:
000022FA 43F9 0000 0000             		lea	(PalPointers).l,a1
00002300 E748                       		lsl.w	#3,d0
00002302 D2C0                       		adda.w	d0,a1
00002304 2459                       		movea.l	(a1)+,a2
00002306 3659                       		movea.w	(a1)+,a3
00002308 96FC 0080                  		suba.w	#$80,a3
0000230C 3E19                       		move.w	(a1)+,d7
0000230E                            
0000230E                            loc_2144:
0000230E 26DA                       		move.l	(a2)+,(a3)+
00002310 51CF FFFC                  		dbf	d7,loc_2144
00002314 4E75                       		rts	
00002316                            ; End of function PalLoad3_Water
00002316                            
00002316                            
00002316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002316                            
00002316                            
00002316                            PalLoad4_Water:
00002316 43F9 0000 0000             		lea	(PalPointers).l,a1
0000231C E748                       		lsl.w	#3,d0
0000231E D2C0                       		adda.w	d0,a1
00002320 2459                       		movea.l	(a1)+,a2
00002322 3659                       		movea.w	(a1)+,a3
00002324 96FC 0100                  		suba.w	#$100,a3
00002328 3E19                       		move.w	(a1)+,d7
0000232A                            
0000232A                            loc_2160:
0000232A 26DA                       		move.l	(a2)+,(a3)+
0000232C 51CF FFFC                  		dbf	d7,loc_2160
00002330 4E75                       		rts	
00002332                            ; End of function PalLoad4_Water
00002332                            
00002332                            ; ===========================================================================
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Pallet pointers
00002332                            ; ---------------------------------------------------------------------------
00002332                            PalPointers:
00002332                            	include "_inc\Pallet pointers.asm"
00002332                            ; ---------------------------------------------------------------------------
00002332                            ; Pallet pointers
00002332                            ; ---------------------------------------------------------------------------
00002332 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002336 FB00                       	dc.w $FB00		; RAM address
00002338 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000233A 0000 0000                  	dc.l Pal_Title
0000233E FB00                       	dc.w $FB00
00002340 001F                       	dc.w $1F
00002342 0000 0000                  	dc.l Pal_LevelSel
00002346 FB00                       	dc.w $FB00
00002348 001F                       	dc.w $1F
0000234A 0000 0000                  	dc.l Pal_Sonic
0000234E FB00                       	dc.w $FB00
00002350 0007                       	dc.w 7
00002352 0000 0000                  	dc.l Pal_GHZ
00002356 FB20                       	dc.w $FB20
00002358 0017                       	dc.w $17
0000235A 0000 0000                  	dc.l Pal_LZ
0000235E FB20                       	dc.w $FB20
00002360 0017                       	dc.w $17
00002362 0000 0000                  	dc.l Pal_MZ
00002366 FB20                       	dc.w $FB20
00002368 0017                       	dc.w $17
0000236A 0000 0000                  	dc.l Pal_SLZ
0000236E FB20                       	dc.w $FB20
00002370 0017                       	dc.w $17
00002372 0000 0000                  	dc.l Pal_SYZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_SBZ1
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_Special
00002386 FB00                       	dc.w $FB00
00002388 001F                       	dc.w $1F
0000238A 0000 0000                  	dc.l Pal_LZWater
0000238E FB00                       	dc.w $FB00
00002390 001F                       	dc.w $1F
00002392 0000 0000                  	dc.l Pal_SBZ3
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ3Water
0000239E FB00                       	dc.w $FB00
000023A0 001F                       	dc.w $1F
000023A2 0000 0000                  	dc.l Pal_SBZ2
000023A6 FB20                       	dc.w $FB20
000023A8 0017                       	dc.w $17
000023AA 0000 0000                  	dc.l Pal_LZSonWater
000023AE FB00                       	dc.w $FB00
000023B0 0007                       	dc.w 7
000023B2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023B6 FB00                       	dc.w $FB00
000023B8 0007                       	dc.w 7
000023BA 0000 0000                  	dc.l Pal_SpeResult
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SpeContinue
000023C6 FB00                       	dc.w $FB00
000023C8 000F                       	dc.w $F
000023CA 0000 0000                  	dc.l Pal_Ending
000023CE FB00                       	dc.w $FB00
000023D0 001F                       	dc.w $1F
000023D2 0000 0000                  	dc.l Pal_Idiot
000023D6 FB20                       	dc.w $FB20
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_BHZ
000023DE FB20                       	dc.w $FB20
000023E0 0017                       	dc.w $17
000023E2 0000 0000                  	dc.l Pal_Gronic
000023E6 FB00                       	dc.w $FB00
000023E8 0007                       	dc.w 7
000023EA 0000 0000                  	dc.l Pal_LZGroWater
000023EE FB00                       	dc.w $FB00
000023F0 0007                       	dc.w 7
000023F2 0000 0000                  	dc.l Pal_SBZ3GroWat
000023F6 FB00                       	dc.w $FB00
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Anakama
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002400 0007                       	dc.w 7
00002402                            
00002402                            ; ---------------------------------------------------------------------------
00002402                            ; Pallet data
00002402                            ; ---------------------------------------------------------------------------
00002402                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002482                            Pal_Title:	incbin	pallet\title.bin
00002502                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002582                            Pal_Sonic:	incbin	pallet\sonic.bin
000025A2                            Pal_GHZ:	incbin	pallet\ghz.bin
00002602                            Pal_LZ:		incbin	pallet\lz.bin
00002662                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026E2                            Pal_MZ:		incbin	pallet\mz.bin
00002742                            Pal_SLZ:	incbin	pallet\slz.bin
000027A2                            Pal_SYZ:	incbin	pallet\syz.bin
00002802                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002862                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028C2                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002942                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029A2                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A22                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A42                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A62                            Pal_BHZ:	incbin	pallet\bhz.bin
00002AC2                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B42                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B82                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C02                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C22                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C42                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C62                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C82                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002D02                            
00002D02                            ; ---------------------------------------------------------------------------
00002D02                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002D02                            ; ---------------------------------------------------------------------------
00002D02                            
00002D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D02                            
00002D02                            
00002D02                            DelayProgram:				; XREF: PauseGame
00002D02 46FC 2300                  		move	#$2300,sr
00002D06                            
00002D06                            loc_29AC:
00002D06 4A38 F62A                  		tst.b	($FFFFF62A).w
00002D0A 66FA                       		bne.s	loc_29AC
00002D0C 4E75                       		rts	
00002D0E                            ; End of function DelayProgram
00002D0E                            
00002D0E                            ; ---------------------------------------------------------------------------
00002D0E                            ; Subroutine to	generate a pseudo-random number	in d0
00002D0E                            ; ---------------------------------------------------------------------------
00002D0E                            
00002D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D0E                            
00002D0E                            
00002D0E                            RandomNumber:
00002D0E 2238 F636                  		move.l	($FFFFF636).w,d1
00002D12 6600                       		bne.s	loc_29C0
00002D14 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002D1A                            
00002D1A                            loc_29C0:
00002D1A 2001                       		move.l	d1,d0
00002D1C E581                       		asl.l	#2,d1
00002D1E D280                       		add.l	d0,d1
00002D20 E781                       		asl.l	#3,d1
00002D22 D280                       		add.l	d0,d1
00002D24 3001                       		move.w	d1,d0
00002D26 4841                       		swap	d1
00002D28 D041                       		add.w	d1,d0
00002D2A 3200                       		move.w	d0,d1
00002D2C 4841                       		swap	d1
00002D2E 21C1 F636                  		move.l	d1,($FFFFF636).w
00002D32 4E75                       		rts	
00002D34                            ; End of function RandomNumber
00002D34                            
00002D34                            
00002D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002D34                            
00002D34                            
00002D34                            CalcSine:				; XREF: SS_BGAnimate; et al
00002D34 0240 00FF                  		andi.w	#$FF,d0
00002D38 D040                       		add.w	d0,d0
00002D3A 0640 0080                  		addi.w	#$80,d0
00002D3E 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D42 0440 0080                  		subi.w	#$80,d0
00002D46 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D4A 4E75                       		rts	
00002D4C                            ; End of function CalcSine
00002D4C                            
00002D4C                            ; ===========================================================================
00002D4C                            
00002D4C                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002FCC                            
00002FCC                            ; ===========================================================================
00002FCC 48E7 6000                  		movem.l	d1-d2,-(sp)
00002FD0 3200                       		move.w	d0,d1
00002FD2 4841                       		swap	d1
00002FD4 7000                       		moveq	#0,d0
00002FD6 3200                       		move.w	d0,d1
00002FD8 7407                       		moveq	#7,d2
00002FDA                            
00002FDA                            loc_2C80:
00002FDA E599                       		rol.l	#2,d1
00002FDC D040                       		add.w	d0,d0
00002FDE 5240                       		addq.w	#1,d0
00002FE0 9240                       		sub.w	d0,d1
00002FE2 6400                       		bcc.s	loc_2C9A
00002FE4 D240                       		add.w	d0,d1
00002FE6 5340                       		subq.w	#1,d0
00002FE8 51CA FFF0                  		dbf	d2,loc_2C80
00002FEC E248                       		lsr.w	#1,d0
00002FEE 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FF2 4E75                       		rts	
00002FF4                            ; ===========================================================================
00002FF4                            
00002FF4                            loc_2C9A:
00002FF4 5240                       		addq.w	#1,d0
00002FF6 51CA FFE2                  		dbf	d2,loc_2C80
00002FFA E248                       		lsr.w	#1,d0
00002FFC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00003000 4E75                       		rts	
00003002                            
00003002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003002                            
00003002                            
00003002                            CalcAngle:
00003002 48E7 1800                  		movem.l	d3-d4,-(sp)
00003006 7600                       		moveq	#0,d3
00003008 7800                       		moveq	#0,d4
0000300A 3601                       		move.w	d1,d3
0000300C 3802                       		move.w	d2,d4
0000300E 8843                       		or.w	d3,d4
00003010 6700                       		beq.s	loc_2D04
00003012 3802                       		move.w	d2,d4
00003014 4A43                       		tst.w	d3
00003016 6A00 0000                  		bpl.w	loc_2CC2
0000301A 4443                       		neg.w	d3
0000301C                            
0000301C                            loc_2CC2:
0000301C 4A44                       		tst.w	d4
0000301E 6A00 0000                  		bpl.w	loc_2CCA
00003022 4444                       		neg.w	d4
00003024                            
00003024                            loc_2CCA:
00003024 B843                       		cmp.w	d3,d4
00003026 6400 0000                  		bcc.w	loc_2CDC
0000302A E18C                       		lsl.l	#8,d4
0000302C 88C3                       		divu.w	d3,d4
0000302E 7000                       		moveq	#0,d0
00003030 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003034 6000                       		bra.s	loc_2CE6
00003036                            ; ===========================================================================
00003036                            
00003036                            loc_2CDC:				; XREF: CalcAngle
00003036 E18B                       		lsl.l	#8,d3
00003038 86C4                       		divu.w	d4,d3
0000303A 7040                       		moveq	#$40,d0
0000303C 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003040                            
00003040                            loc_2CE6:
00003040 4A41                       		tst.w	d1
00003042 6A00 0000                  		bpl.w	loc_2CF2
00003046 4440                       		neg.w	d0
00003048 0640 0080                  		addi.w	#$80,d0
0000304C                            
0000304C                            loc_2CF2:
0000304C 4A42                       		tst.w	d2
0000304E 6A00 0000                  		bpl.w	loc_2CFE
00003052 4440                       		neg.w	d0
00003054 0640 0100                  		addi.w	#$100,d0
00003058                            
00003058                            loc_2CFE:
00003058 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000305C 4E75                       		rts	
0000305E                            ; ===========================================================================
0000305E                            
0000305E                            loc_2D04:				; XREF: CalcAngle
0000305E 303C 0040                  		move.w	#$40,d0
00003062 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003066 4E75                       		rts	
00003068                            ; End of function CalcAngle
00003068                            
00003068                            ; ===========================================================================
00003068                            
00003068                            Angle_Data:	incbin	misc\angles.bin
0000316A                            
0000316A                            ; ===========================================================================
0000316A                            
0000316A                            ; ---------------------------------------------------------------------------
0000316A                            ; Sega screen
0000316A                            ; ---------------------------------------------------------------------------
0000316A                            
0000316A                            SegaScreen:				; XREF: GameModeArray
0000316A 103C 00E4                  		move.b	#$E4,d0
0000316E 6100 E42A                  		bsr.w	PlaySound_Special ; stop music
00003172 6100 E668                  		bsr.w	ClearPLC
00003176 6100 EEA4                  		bsr.w	Pal_FadeFrom
0000317A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003180 3CBC 8004                  		move.w	#$8004,(a6)
00003184 3CBC 8230                  		move.w	#$8230,(a6)
00003188 3CBC 8407                  		move.w	#$8407,(a6)
0000318C 3CBC 8700                  		move.w	#$8700,(a6)
00003190 3CBC 8B00                  		move.w	#$8B00,(a6)
00003194 4238 F64E                  		clr.b	($FFFFF64E).w
00003198 46FC 2700                  		move	#$2700,sr
0000319C 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031A0 0200 00BF                  		andi.b	#$BF,d0
000031A4 33C0 00C0 0004             		move.w	d0,($C00004).l
000031AA 6100 E316                  		bsr.w	ClearScreen
000031AE 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031B8 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000031BE 6100 E47E                  		bsr.w	NemDec
000031C2 43F9 00FF 0000             		lea	($FF0000).l,a1
000031C8 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000031CE 303C 0000                  		move.w	#0,d0
000031D2 6100 E748                  		bsr.w	EniDec
000031D6 43F9 00FF 0000             		lea	($FF0000).l,a1
000031DC 203C 6510 0003             		move.l	#$65100003,d0
000031E2 7217                       		moveq	#$17,d1
000031E4 7407                       		moveq	#7,d2
000031E6 6100 E436                  		bsr.w	ShowVDPGraphics
000031EA 43F9 00FF 0180             		lea	($FF0180).l,a1
000031F0 203C 4000 0003             		move.l	#$40000003,d0
000031F6 7227                       		moveq	#$27,d1
000031F8 741B                       		moveq	#$1B,d2
000031FA 6100 E422                  		bsr.w	ShowVDPGraphics
000031FE 7000                       		moveq	#0,d0
00003200 6100 F0E0                  		bsr.w	PalLoad2	; load Sega logo pallet
00003204 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000320A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003210 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003216 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000321C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003220 0000 0040                  		ori.b	#$40,d0
00003224 33C0 00C0 0004             		move.w	d0,($C00004).l
0000322A                            
0000322A                            Sega_WaitPallet:
0000322A 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003230 6100 FAD0                  		bsr.w	DelayProgram
00003234 6100 EF9E                  		bsr.w	PalCycle_Sega
00003238 66F0                       		bne.s	Sega_WaitPallet
0000323A                            
0000323A 103C 00E1                  		move.b	#$E1,d0
0000323E 6100 E35A                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003242 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003248 6100 FAB8                  		bsr.w	DelayProgram
0000324C 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003252                            
00003252                            Sega_WaitEnd:
00003252 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003258 6100 FAA8                  		bsr.w	DelayProgram
0000325C 4A78 F614                  		tst.w	($FFFFF614).w
00003260 6700                       		beq.s	Sega_GotoTitle
00003262 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003268 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
0000326A                            
0000326A                            Sega_GotoTitle:
0000326A 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003270 4E75                       		rts	
00003272                            ; ===========================================================================
00003272                            
00003272                            ; ---------------------------------------------------------------------------
00003272                            ; Title	screen
00003272                            ; ---------------------------------------------------------------------------
00003272                            
00003272                            TitleScreen:				; XREF: GameModeArray
00003272 103C 00E4                  		move.b	#$E4,d0
00003276 6100 E322                  		bsr.w	PlaySound_Special ; stop music
0000327A 6100 EDA0                  		bsr.w	Pal_FadeFrom
0000327E 6100 E55C                  		bsr.w	ClearPLC
00003282 46FC 2700                  		move	#$2700,sr
00003286 6100 E2C8                  		bsr.w	SoundDriverLoad
0000328A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003290 3CBC 8004                  		move.w	#$8004,(a6)
00003294 3CBC 8230                  		move.w	#$8230,(a6)
00003298 3CBC 8407                  		move.w	#$8407,(a6)
0000329C 3CBC 9001                  		move.w	#$9001,(a6)
000032A0 3CBC 9200                  		move.w	#$9200,(a6)
000032A4 3CBC 8B03                  		move.w	#$8B03,(a6)
000032A8 3CBC 8720                  		move.w	#$8720,(a6)
000032AC 4238 F64E                  		clr.b	($FFFFF64E).w
000032B0 6100 E210                  		bsr.w	ClearScreen
000032B4 43F8 D000                  		lea	($FFFFD000).w,a1
000032B8 7000                       		moveq	#0,d0
000032BA 323C 07FF                  		move.w	#$7FF,d1
000032BE                            
000032BE                            Title_ClrObjRam:
000032BE 22C0                       		move.l	d0,(a1)+
000032C0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000032C4                            
000032C4                            ; gomer
000032C4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032CE 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000032D4 6100 E368                  		bsr.w	NemDec
000032D8 7003                       		moveq	#3,d0		; load Sonic's pallet
000032DA 6100 EFEA                  		bsr.w	PalLoad1
000032DE                            
000032DE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032E4 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032EA 303C 0000                  		move.w	#0,d0
000032EE 6100 E62C                  		bsr.w	EniDec
000032F2                            ; help how the fuck can i do this IT SHOWS NOTHING
000032F2 6100 EC7E                  		bsr.w	Pal_FadeTo
000032F6 43F9 00FF 0000             		lea	($FF0000).l,a1
000032FC 203C 4000 0003             		move.l	#$40000003,d0
00003302 7227                       		moveq	#$27,d1
00003304 741B                       		moveq	#$1B,d2
00003306 6100 E316                  		bsr.w	ShowVDPGraphics
0000330A                            
0000330A                            
0000330A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003310 203C 6000 0003             		move.l	#$60000003,d0
00003316 7227                       		moveq	#$27,d1
00003318 741B                       		moveq	#$1B,d2
0000331A                            
0000331A 6100 ED00                  		bsr.w	Pal_FadeFrom
0000331E                            
0000331E                            
0000331E 6100 E1A2                  		bsr.w	ClearScreen
00003322 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000332C 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003332 6100 E30A                  		bsr.w	NemDec
00003336 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003340 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003346 6100 E2F6                  		bsr.w	NemDec
0000334A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003350 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003356 303C 0000                  		move.w	#0,d0
0000335A 6100 E5C0                  		bsr.w	EniDec
0000335E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003364 203C 4000 0003             		move.l	#$40000003,d0
0000336A 7227                       		moveq	#$27,d1
0000336C 741B                       		moveq	#$1B,d2
0000336E 6100 E2AE                  		bsr.w	ShowVDPGraphics
00003372 6100 ECA8                  		bsr.w	Pal_FadeFrom
00003376 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000337A 7000                       		moveq	#0,d0
0000337C 323C 001F                  		move.w	#$1F,d1
00003380                            
00003380                            
00003380                            Title_ClrPallet:
00003380 22C0                       		move.l	d0,(a1)+
00003382 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003386                            
00003386 7003                       		moveq	#3,d0		; load Sonic's pallet
00003388 6100 EF3C                  		bsr.w	PalLoad1
0000338C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003392 4EB9 0000 0000             		jsr	ObjectsLoad
00003398 4EB9 0000 0000             		jsr	BuildSprites
0000339E 6100 EBD2                  		bsr.w	Pal_FadeTo
000033A2 46FC 2700                  		move	#$2700,sr
000033A6 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
000033B0 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
000033B6 6100 E286                  		bsr.w	NemDec
000033BA 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
000033C4 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
000033CA 6100 E272                  		bsr.w	NemDec
000033CE 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000033D8 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000033DE 6100 E25E                  		bsr.w	NemDec
000033E2 4DF9 00C0 0000             		lea	($C00000).l,a6
000033E8 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033F0 4BF9 0000 05E2             		lea	(Art_Text).l,a5
000033F6 323C 0BA9                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033FA                            
000033FA                            Title_LoadText:
000033FA 2C9D                       		move.l	(a5)+,(a6)
000033FC 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003400                            
00003400 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003406 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000340C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003412 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003418 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
0000341E 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003424 6100 0000                  		bsr.w	LevelSizeLoad
00003428 6100 0000                  		bsr.w	DeformBgLayer
0000342C                            
0000342C 43F8 B000                  		lea	($FFFFB000).w,a1
00003430 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003436 303C 0000                  		move.w	#0,d0
0000343A 6100 E4E0                  		bsr.w	EniDec
0000343E 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003444 43F9 00FF 0000             		lea	($FF0000).l,a1
0000344A 6100 E64E                  		bsr.w	KosDec
0000344E 6100 0000                  		bsr.w	LevelLayoutLoad
00003452                            
00003452 46FC 2700                  		move	#$2700,sr
00003456 6100 E06A                  		bsr.w	ClearScreen
0000345A 4BF9 00C0 0004             		lea	($C00004).l,a5
00003460 4DF9 00C0 0000             		lea	($C00000).l,a6
00003466 47F8 F708                  		lea	($FFFFF708).w,a3
0000346A 49F8 A440                  		lea	($FFFFA440).w,a4
0000346E 343C 6000                  		move.w	#$6000,d2
00003472 6100 0000                  		bsr.w	LoadTilesFromStart2
00003476 43F9 00FF 0000             		lea	($FF0000).l,a1
0000347C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003482 303C 0000                  		move.w	#0,d0
00003486 6100 E494                  		bsr.w	EniDec
0000348A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003490 203C 4206 0003             		move.l	#$42060003,d0
00003496 7221                       		moveq	#$21,d1
00003498 7415                       		moveq	#$15,d2
0000349A 6100 E182                  		bsr.w	ShowVDPGraphics
0000349E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000034A8 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000034AE 6100 E18E                  		bsr.w	NemDec
000034B2 7001                       		moveq	#1,d0		; load title screen pallet
000034B4 6100 EE10                  		bsr.w	PalLoad1
000034B8 103C 008A                  		move.b	#$8A,d0		; play title screen music
000034BC 6100 E0DC                  		bsr.w	PlaySound_Special
000034C0 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
000034C6 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000034CC 43F8 D080                  		lea	($FFFFD080).w,a1
000034D0 7000                       		moveq	#0,d0
000034D2 323C 000F                  		move.w	#$F,d1
000034D6                            
000034D6                            Title_ClrObjRam2:
000034D6 22C0                       		move.l	d0,(a1)+
000034D8 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000034DC                            
000034DC 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000034E2 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034E8 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034EE 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034F4 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034FA 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003500 4EB9 0000 0000             		jsr	ObjectsLoad
00003506 6100 0000                  		bsr.w	DeformBgLayer
0000350A 4EB9 0000 0000             		jsr	BuildSprites
00003510 7000                       		moveq	#0,d0
00003512 6100 E29C                  		bsr.w	LoadPLC2
00003516 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000351C 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003522 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003526 0000 0040                  		ori.b	#$40,d0
0000352A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003530 6100 EA40                  		bsr.w	Pal_FadeTo
00003534                            
00003534                            loc_317C:
00003534 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000353A 6100 F7C6                  		bsr.w	DelayProgram
0000353E 4EB9 0000 0000             		jsr	ObjectsLoad
00003544 6100 0000                  		bsr.w	DeformBgLayer
00003548 4EB9 0000 0000             		jsr	BuildSprites
0000354E 6100 E60C                  		bsr.w	PalCycle_Title
00003552 6100 E296                  		bsr.w	RunPLC_RAM
00003556 3038 D008                  		move.w	($FFFFD008).w,d0
0000355A 5440                       		addq.w	#2,d0
0000355C 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003560 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003564 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003566 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
0000356C 4E75                       		rts	
0000356E                            ; ===========================================================================
0000356E                            
0000356E                            Title_ChkRegion:
0000356E 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003572 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003574 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000357A 6000                       		bra.s	Title_EnterCheat
0000357C                            ; ===========================================================================
0000357C                            
0000357C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000357C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003582                            
00003582                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003582 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003586 D0C0                       		adda.w	d0,a0
00003588 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000358C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003590 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003592 6600                       		bne.s	loc_3210	; if not, branch
00003594 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003598 4A00                       		tst.b	d0
0000359A 6600                       		bne.s	Title_CountC
0000359C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000035A0 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000035A4 E249                       		lsr.w	#1,d1
000035A6 0241 0003                  		andi.w	#3,d1
000035AA 6700                       		beq.s	Title_PlayRing
000035AC 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000035B0 6A00                       		bpl.s	Title_PlayRing
000035B2 7201                       		moveq	#1,d1
000035B4 1181 1001                  		move.b	d1,1(a0,d1.w)
000035B8                            
000035B8                            Title_PlayRing:
000035B8 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000035BE 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035C2 6100 DFD6                  		bsr.w	PlaySound_Special
000035C6 6000                       		bra.s	Title_CountC
000035C8                            ; ===========================================================================
000035C8                            
000035C8                            loc_3210:				; XREF: Title_EnterCheat
000035C8 4A00                       		tst.b	d0
000035CA 6700                       		beq.s	Title_CountC
000035CC 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000035D2 6700                       		beq.s	Title_CountC
000035D4 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035DA                            
000035DA                            Title_CountC:
000035DA 1038 F605                  		move.b	($FFFFF605).w,d0
000035DE 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000035E2 6700                       		beq.s	loc_3230	; if not, branch
000035E4 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035E8                            
000035E8                            loc_3230:
000035E8 4A78 F614                  		tst.w	($FFFFF614).w
000035EC 6700 0000                  		beq.w	Demo
000035F0                            		; (temporary until we have an actual options screen)
000035F0 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035F6 6700                       		beq.s	@notc
000035F8                            
000035F8 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035FC 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003602 6D00                       		blt.s	@notoverflow
00003604 11FC 0000 FFE8             		move.b	#0,(v_character).w
0000360A                            	@notoverflow:
0000360A 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000360E 6100 DF8A                  		bsr.w	PlaySound_Special
00003612                            	@notc:
00003612 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003618 6700 FF1A                  		beq.w	loc_317C	; if not, branch
0000361C                            
0000361C                            Title_ChkLevSel:
0000361C 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003622 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003626                            		
00003626                            		
00003626 7002                       		moveq	#2,d0
00003628 6100 ECB8                  		bsr.w	PalLoad2	; load level select pallet
0000362C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003630 7000                       		moveq	#0,d0
00003632 323C 00DF                  		move.w	#$DF,d1
00003636                            
00003636                            Title_ClrScroll:
00003636 22C0                       		move.l	d0,(a1)+
00003638 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000363C                            
0000363C 21C0 F616                  		move.l	d0,($FFFFF616).w
00003640 46FC 2700                  		move	#$2700,sr
00003644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000364A 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003654 323C 03FF                  		move.w	#$3FF,d1
00003658                            
00003658                            Title_ClrVram:
00003658 2C80                       		move.l	d0,(a6)
0000365A 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000365E                            
0000365E 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003662 6700 0000                  		beq.w	GotoOptions	; if not, play level
00003666                            
00003666 6100 0000                  		bsr.w	LevSelTextLoad
0000366A                            		
0000366A                            		; sound test fix
0000366A 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000366E 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003674                            		
00003674 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003678 0C46 0014                  		cmpi.w	#$14,d6
0000367C 6700                       		beq.s	@issndtst
0000367E 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003682                            	@issndtst:
00003682 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003686 31C6 FF82                  		move.w	d6,($FFFFFF82).w
0000368A                            		
0000368A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000368E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003696                            		
00003696 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000369C 6700                       		beq.s	@issndtst2
0000369E                            		
0000369E 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
000036A4 6100 0000                  		bsr.w	CStringSlop
000036A8 6000                       		bra.s	LevelSelect
000036AA                            	@issndtst2:
000036AA 43F9 0000 0000             		lea	(Controls_SND).l,a1
000036B0 6100 0000                  		bsr.w	CStringSlop
000036B4                            		
000036B4                            ; ---------------------------------------------------------------------------
000036B4                            ; Level	Select
000036B4                            ; ---------------------------------------------------------------------------
000036B4                            LevelSelect:
000036B4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036BA 6100 F646                  		bsr.w	DelayProgram
000036BE 6100 0000                  		bsr.w	LevSelControls
000036C2 6100 E126                  		bsr.w	RunPLC_RAM
000036C6 4AB8 F680                  		tst.l	($FFFFF680).w
000036CA 66E8                       		bne.s	LevelSelect
000036CC 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000036D2 67E0                       		beq.s	LevelSelect	; if not, branch
000036D4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036D8 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000036DC 6600                       		bne.s	@dont	; if not, dont blow this place up
000036DE                            			
000036DE 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000036E4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036EA 6100 F616                  		bsr.w	DelayProgram
000036EE                            	@dont:
000036EE 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036F2 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036F4                            		
000036F4 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036FA 67B8                       		beq.s	LevelSelect	; if not, branch
000036FC                            		
000036FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003702 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003704                            		
00003704 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003708 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000370C                            		
0000370C 4EB9 0000 0000             		jsr		ShowNow_Playing
00003712 60A0                       		bra.s	LevelSelect
00003714                            ; ===========================================================================
00003714                            
00003714                            LevSel_SEGA:				; XREF: LevelSelect
00003714 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000371A 4E75                       		rts	
0000371C                            ; ===========================================================================
0000371C                            
0000371C                            LevSel_Ending:				; XREF: LevelSelect
0000371C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003722 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003728 4E75                       		rts	
0000372A                            ; ===========================================================================
0000372A                            
0000372A                            LevSel_Credits:				; XREF: LevelSelect
0000372A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003730 103C 0091                  		move.b	#$91,d0
00003734 6100 DE64                  		bsr.w	PlaySound_Special ; play credits music
00003738 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000373E 4E75                       		rts	
00003740                            ; ===========================================================================
00003740                            
00003740                            LevSel_Level_SS:			; XREF: LevelSelect
00003740 D040                       		add.w	d0,d0
00003742 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003746 6B00 FF6C                  		bmi.w	LevelSelect
0000374A 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
0000374E 6600                       		bne.s	LevSel_Level	; if not, branch
00003750 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003756 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
0000375A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003760 7000                       		moveq	#0,d0
00003762 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003766 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000376A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000376E 4E75                       		rts	
00003770                            ; ===========================================================================
00003770                            
00003770                            LevSel_Level:				; XREF: LevSel_Level_SS
00003770 0240 3FFF                  		andi.w	#$3FFF,d0
00003774 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003778                            
00003778                            PlayLevel:				; XREF: ROM:00003246j ...
00003778 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000377E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003784 7000                       		moveq	#0,d0
00003786 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000378A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000378E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003792 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003796 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000379A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000379E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
000037A2 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
000037A6 103C 00E0                  		move.b	#$E0,d0
000037AA 6100 DDEE                  		bsr.w	PlaySound_Special ; fade out music
000037AE 4E75                       		rts	
000037B0                            ; ===========================================================================
000037B0                            ; ---------------------------------------------------------------------------
000037B0                            ; Level	select - level pointers
000037B0                            ; ---------------------------------------------------------------------------
000037B0                            LSelectPointers:
000037B0 0000                       		dc.w $0000 ; crz
000037B2 0001                       		dc.w $0001
000037B4 0002                       		dc.w $0002
000037B6 0100                       		dc.w $0100 ; ilfez
000037B8 0101                       		dc.w $0101
000037BA 0102                       		dc.w $0102
000037BC 0200                       		dc.w $0200 ; mz
000037BE 0201                       		dc.w $0201
000037C0 0202                       		dc.w $0202
000037C2 0300                       		dc.w $0300 ; dgrotz
000037C4 0301                       		dc.w $0301 
000037C6 0302                       		dc.w $0302 
000037C8 0700                       		dc.w $0700 ; the other mz...
000037CA 0701                       		dc.w $0701 
000037CC 0702                       		dc.w $0702 
000037CE 0400                       		dc.w $0400 ; tpfbz
000037D0 0401                       		dc.w $0401
000037D2 0402                       		dc.w $0402
000037D4 0500                       		dc.w $0500 ; zzzzz
000037D6 0501                       		dc.w $0501 
000037D8 0103                       		dc.w $0103 
000037DA 0502                       		dc.w $0502 ; fz
000037DC FFFF                       		dc.w $FFFF ; special
000037DE 8000                       		dc.w $8000 ; sound test
000037E0                            		even
000037E0                            ; --------------------------------------
000037E0                            ; ---------------------------------------------------------------------------
000037E0                            ; Level	select codes
000037E0                            ; ---------------------------------------------------------------------------
000037E0                            LevelSelectCode_J:
000037E0                            		incbin	misc\ls_jcode.bin
000037E6                            		even
000037E6                            
000037E6                            LevelSelectCode_US:
000037E6                            		incbin	misc\ls_ucode.bin
000037EC                            		even
000037EC                            ; ===========================================================================
000037EC                            
000037EC                            ; ---------------------------------------------------------------------------
000037EC                            ; Demo mode
000037EC                            ; ---------------------------------------------------------------------------
000037EC                            
000037EC                            Demo:					; XREF: TitleScreen
000037EC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037F2                            
000037F2                            loc_33B6:				; XREF: loc_33E4
000037F2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037F8 6100 F508                  		bsr.w	DelayProgram
000037FC 6100 0000                  		bsr.w	DeformBgLayer
00003800 6100 E338                  		bsr.w	PalCycle_Load
00003804 6100 DFE4                  		bsr.w	RunPLC_RAM
00003808 3038 D008                  		move.w	($FFFFD008).w,d0
0000380C 5440                       		addq.w	#2,d0
0000380E 31C0 D008                  		move.w	d0,($FFFFD008).w
00003812 0C40 1C00                  		cmpi.w	#$1C00,d0
00003816 6500                       		bcs.s	loc_33E4
00003818 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000381E 4E75                       		rts	
00003820                            ; ===========================================================================
00003820                            
00003820                            loc_33E4:				; XREF: Demo
00003820 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003826 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
0000382A 4A78 F614                  		tst.w	($FFFFF614).w
0000382E 6600 FFC2                  		bne.w	loc_33B6
00003832 103C 00E0                  		move.b	#$E0,d0
00003836 6100 DD62                  		bsr.w	PlaySound_Special ; fade out music
0000383A 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
0000383E 0240 0007                  		andi.w	#7,d0
00003842 D040                       		add.w	d0,d0
00003844 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003848 31C0 FE10                  		move.w	d0,($FFFFFE10).w
0000384C 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003850 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003856 6500                       		bcs.s	loc_3422	; if yes, branch
00003858 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
0000385E                            
0000385E                            loc_3422:
0000385E 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003864 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000386A 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
0000386E 6600                       		bne.s	Demo_Level	; if not, branch
00003870 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003876 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000387A 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
0000387E                            
0000387E                            Demo_Level:
0000387E 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003884 7000                       		moveq	#0,d0
00003886 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000388A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000388E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003892 4E75                       		rts	
00003894                            ; ===========================================================================
00003894                            ; ---------------------------------------------------------------------------
00003894                            ; Levels used in demos
00003894                            ; ---------------------------------------------------------------------------
00003894                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000389C                            		even
0000389C                            
0000389C                            ; ---------------------------------------------------------------------------
0000389C                            ; Subroutine to	change what you're selecting in the level select
0000389C                            ; ---------------------------------------------------------------------------
0000389C                            
0000389C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000389C                            
0000389C                            
0000389C                            LevSelControls:				; XREF: LevelSelect
0000389C 1238 F605                  		move.b	($FFFFF605).w,d1
000038A0 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
000038A4 6600                       		bne.s	LevSel_UpDown	; if yes, branch
000038A6 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
000038AA 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
000038AE                            
000038AE                            LevSel_UpDown:
000038AE 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
000038B4 1238 F604                  		move.b	($FFFFF604).w,d1
000038B8 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
000038BC 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
000038C0 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000038C4 0801 0000                  		btst	#0,d1		; is up	pressed?
000038C8 6700                       		beq.s	LevSel_Down	; if not, branch
000038CA 5346                       		subq.w	#1,d6		; move up 1 selection
000038CC 6400                       		bcc.s	LevSel_Down
000038CE 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000038D0                            
000038D0                            LevSel_Down:
000038D0 0801 0001                  		btst	#1,d1		; is down pressed?
000038D4 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038D6 5246                       		addq.w	#1,d6		; move down 1 selection
000038D8 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038DC 6500                       		bcs.s	LevSel_Refresh
000038DE 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000038E0 6000                       		bra.s	LevSel_Refresh
000038E2                            		
000038E2                            LevSel_LR:
000038E2 0801 0002                  		btst	#2,d1		; is left pressed?
000038E6 6700                       		beq.s	LevSel_Right	; if not, branch
000038E8 0446 0000                  		sub.w	#lsrow2size,d6
000038EC 64E2                       		bcc.s	LevSel_Down
000038EE 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038F2                            LevSel_Right:
000038F2 0801 0003                  		btst	#3,d1		; is right pressed?
000038F6 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038F8 0646 0000                  		add.w	#lsrow1size,d6
000038FC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003900 6500                       		bcs.s	LevSel_Refresh
00003902 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003906                            ; ===========================================================================
00003906                            LevSel_Refresh:
00003906                            		
00003906 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000390A 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000390E                            		
0000390E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003914 6600                       		bne.s	@exitsndtest
00003916                            		
00003916 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
0000391A 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00003920 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003928 6100 0000                  		bsr.w	CStringSlop
0000392C                            	@exitsndtest:
0000392C                            	
0000392C 363C C65F                  		move.w	#$C680-$21,d3
00003930 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003934 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003938                            		
00003938 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
0000393E 6600                       		bne.s	@entersndtest
00003940                            		
00003940 363C C65F                  		move.w	#$C680-$21,d3
00003944 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000394A 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003952 6100 0000                  		bsr.w	CStringSlop
00003956                            	@entersndtest:
00003956 4E75                       		rts	
00003958                            		
00003958                            LevSel_SndTest:				; XREF: LevSelControls
00003958 1238 F605                  		move.b	($FFFFF605).w,d1
0000395C 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003960 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003962 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
00003968 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
0000396C                            		
0000396C 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003970 0801 0002                  		btst	#2,d1		; is left pressed?
00003974 6700                       		beq.s	SndTest_Right	; if not, branch
00003976 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
00003978                            		; no need the fact it's a byte does the trick
00003978                            
00003978                            SndTest_Right:
00003978 0801 0003                  		btst	#3,d1		; is right pressed?
0000397C 6700                       		beq.s	SndTest_A	; if not, branch
0000397E 5200                       		addq.b	#1,d0		; add 1	to sound test
00003980                            		; same here
00003980                            		
00003980                            SndTest_A:
00003980 0801 0006                  		btst	#6,d1		; is A pressed?
00003984 6700                       		beq.s	SndTest_B	; if not, branch
00003986 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00003988 5100                       		subq.b	#8,d0
0000398A                            		
0000398A                            SndTest_B:
0000398A 0801 0004                  		btst	#4,d1		; is B pressed?
0000398E 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003990 5000                       		addq.b	#8,d0		; add $10 to sound test
00003992 5000                       		addq.b	#8,d0
00003994                            
00003994                            SndTest_Refresh:
00003994 363C C65F                  		move.w	#$C680-$21,d3
00003998 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000399C 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000039A0                            
000039A0                            LevSel_NoMove:
000039A0 4E75                       		rts	
000039A2                            ; End of function LevSelControls
000039A2                            
000039A2                            ; ---------------------------------------------------------------------------
000039A2                            ; Subroutine to load level select text
000039A2                            ; ---------------------------------------------------------------------------
000039A2                            
000039A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039A2                            
000039A2                            LevSelTextLoad_loop:
000039A2 2D44 0004                  		move.l	d4,4(a6)
000039A6 6100 0000                  		bsr.w	LevSel_ChgLine
000039AA 0684 0080 0000             		addi.l	#$800000,d4
000039B0 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000039B4 4E75                       		rts
000039B6                            LevSelTextLoad:				; XREF: TitleScreen
000039B6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039BC 4DF9 00C0 0000             		lea	($C00000).l,a6
000039C2 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000039C6 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000039CC                            		
000039CC 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000039D0 61D0                       		bsr.s	LevSelTextLoad_loop
000039D2                            		
000039D2                            		
000039D2 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000039D8 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000039DC 61C4                       		bsr.s	LevSelTextLoad_loop
000039DE 363C C65F                  		move.w	#$C680-$21,d3
000039E2                            		
000039E2                            LevSelHighlightCode:
000039E2 4DF9 00C0 0000             		lea	($C00000).l,a6
000039E8 7000                       		moveq	#0,d0
000039EA 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039EE 3200                       		move.w	d0,d1
000039F0 283C 6086 0003             		move.l	#lsscrpos,d4
000039F6                            		
000039F6 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039FA 6D00                       		blt.s	@notsecond
000039FC                            		
000039FC 0440 0000                  		sub.w	#lsrow1size,d0
00003A00 0684 0024 0000             		addi.l	#lsoff,d4
00003A06                            	@notsecond:
00003A06 EF48                       		lsl.w	#7,d0
00003A08 4840                       		swap	d0
00003A0A D880                       		add.l	d0,d4
00003A0C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003A12 E749                       		lsl.w	#3,d1
00003A14 D241                       		add.w	d1,d1
00003A16 D2C1                       		adda.w	d1,a1
00003A18 2D44 0004                  		move.l	d4,4(a6)
00003A1C 6100 0000                  		bsr.w	LevSel_ChgLine
00003A20 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003A26 6700                       		beq.s	LevSelSndTest
00003A28 4E75                       		rts
00003A2A                            
00003A2A                            LevSelSndTest:
00003A2A 0643 0030                  		add.w	#$30,d3
00003A2E 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003A38 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A3C 1400                       		move.b	d0,d2
00003A3E E808                       		lsr.b	#4,d0
00003A40 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A44 1002                       		move.b	d2,d0
00003A46 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A4A 4E75                       		rts	
00003A4C                            ; End of function LevSelTextLoad
00003A4C                            
00003A4C                            
00003A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A4C                            
00003A4C                            
00003A4C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A4C 0240 000F                  		andi.w	#$F,d0
00003A50 0C00 000A                  		cmpi.b	#$A,d0
00003A54 6500                       		bcs.s	loc_3580
00003A56 5E00                       		addi.b	#7,d0
00003A58                            
00003A58                            loc_3580:
00003A58 D043                       		add.w	d3,d0
00003A5A 3C80                       		move.w	d0,(a6)
00003A5C 4E75                       		rts	
00003A5E                            ; End of function LevSel_ChgSnd
00003A5E                            
00003A5E                            
00003A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A5E                            
00003A5E                            
00003A5E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A5E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A60                            
00003A60                            @loop:
00003A60 7000                       		moveq	#0,d0
00003A62 1019                       		move.b	(a1)+,d0
00003A64 0C00 0020                  		cmpi.b	#$20,d0
00003A68 6E00                       		bgt.s	@draw
00003A6A 3CBC 0000                  		move.w	#0,(a6)
00003A6E 51CA FFF0                  		dbf	d2,@loop
00003A72 4E75                       		rts	
00003A74                            ; ===========================================================================
00003A74                            
00003A74                            @draw:				; XREF: LevSel_ChgLine
00003A74 D043                       		add.w	d3,d0
00003A76 3C80                       		move.w	d0,(a6)
00003A78 51CA FFE6                  		dbf	d2,@loop
00003A7C 4E75                       		rts	
00003A7E                            ; End of function LevSel_ChgLine
00003A7E                            		
00003A7E                            CStringSlop_draw:
00003A7E D043                       		add.w	d3,d0
00003A80 3C80                       		move.w	d0,(a6)
00003A82                            CStringSlop:				; XREF: LevSelTextLoad
00003A82 7000                       		moveq	#0,d0
00003A84 1019                       		move.b	(a1)+,d0
00003A86 0C00 0020                  		cmpi.b	#$20,d0
00003A8A 6EF2                       		bgt.s	CStringSlop_draw
00003A8C                            		
00003A8C 0C00 0001                  		cmpi.b	#1,d0
00003A90 6700                       		beq.s	@InsertSpaces
00003A92 6500                       		blo.s	@end
00003A94                            		
00003A94 3CBC 0000                  		move.w	#0,(a6)
00003A98 60E8                       		bra.s	CStringSlop
00003A9A                            	@end:
00003A9A 4E75                       		rts
00003A9C                            	@InsertSpaces:
00003A9C 7000                       		moveq	#0,d0
00003A9E 1019                       		move.b	(a1)+,d0
00003AA0                            		
00003AA0                            	@insert:
00003AA0 3CBC 0000                  		move.w	#0,(a6)
00003AA4 51C8 FFFA                  		dbf.w	d0,@insert
00003AA8 60D8                       		bra.s	CStringSlop
00003AAA                            ; End of function LevSel_ChgLine
00003AAA                            
00003AAA                            ; ===========================================================================
00003AAA                            ; ---------------------------------------------------------------------------
00003AAA                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003AAA                            ; ---------------------------------------------------------------------------
00003AAA                            LevelMenuText:	
00003AAA 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003ABA 2020 2020 2020 2020 2020+          dc.b    "               2"
00003ACA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ADA 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003AEA 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003AFA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B0A 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003B1A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B2A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B3A 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B4A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B5A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B6A 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00003B7A 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B8A 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B9A                            LMTSecondRow:
00003B9A 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003BAA 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003BBA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BCA 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003BDA 2020 2020 2020 2020 2020+          dc.b    "               2"
00003BEA 2020 2020 2020 2020 2020+          dc.b    "               3"
00003BFA 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003C0A 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003C1A 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003C2A 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003C3A 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003C4A                            LMTSelectableEnd:
00003C4A 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003C5A                            LMTEnd:
00003C5A                            
00003C5A                            Now_Playing:
00003C5A 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003C6A                            		even
00003C6A                            NP_Track:
00003C6A 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C72                            		even
00003C72                            NP_SFX:
00003C72 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C7A                            		even
00003C7A                            
00003C7A                            ShowNow_Playing:
00003C7A 1C00                       		move.b	d0,d6
00003C7C 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C80 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C84 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C8A 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C92 6100 FDEE                  		bsr.w	CStringSlop
00003C96                            		
00003C96 43FA FFD2                  		lea	NP_Track(pc),a1
00003C9A 0C06 00A0                  		cmpi.b	#$A0,d6
00003C9E 6D00                       		blt.s	@track
00003CA0                            		
00003CA0 43FA FFD0                  		lea	NP_SFX(pc),a1
00003CA4                            	@track:
00003CA4 6100 FDDC                  		bsr.w	CStringSlop
00003CA8                            		
00003CA8 0643 0030                  		add.w	#$30,d3
00003CAC 1006                       		move.b	d6,d0
00003CAE 1400                       		move.b	d0,d2
00003CB0 E808                       		lsr.b	#4,d0
00003CB2 6100 FD98                  		bsr.w	LevSel_ChgSnd
00003CB6 1002                       		move.b	d2,d0
00003CB8 6100 FD92                  		bsr.w	LevSel_ChgSnd
00003CBC 4E75                       		rts	
00003CBE                            
00003CBE                            ; 1 is insert spaces btw
00003CBE                            Controls_Normal:
00003CBE 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003CCA                            		even		
00003CCA                            Controls_SND:
00003CCA 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003CF0 00                         		even
00003CF0                            		
00003CF0                            OptionMenuText:	
00003CF0 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
00003D00 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
00003D10                            OMTEnd:
00003D10                            		
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            ; Level	Select
00003D10                            ; ---------------------------------------------------------------------------
00003D10                            GotoOptions:
00003D10 43F9 0000 3CF0             		lea	(OptionMenuText).l,a1
00003D16 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D1C 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003D20 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003D26                            		
00003D26 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00003D2A 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00003D2E                            
00003D2E                            OptionsMenu:
00003D2E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003D34 6100 EFCC                  		bsr.w	DelayProgram
00003D38 6100 0000                  		bsr.w	OptControls
00003D3C 6100 DAAC                  		bsr.w	RunPLC_RAM
00003D40 4AB8 F680                  		tst.l	($FFFFF680).w
00003D44 66E8                       		bne.s	OptionsMenu
00003D46 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003D4C 67E0                       		beq.s	OptionsMenu	; if not, branch
00003D4E 4E71                       		nop
00003D50 60DC                       		bra.s	OptionsMenu
00003D52                            		
00003D52                            OptReturn:
00003D52 4E75                       		rts
00003D54                            OptControls:				; XREF: LevelSelect
00003D54 1238 F605                  		move.b	($FFFFF605).w,d1
00003D58 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003D5C 6600                       		bne.s	Opt_UpDown	; if yes, branch
00003D5E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003D62 6AEE                       		bpl.s	OptReturn	; if time remains, branch
00003D64                            Opt_UpDown:
00003D64 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003D6A 1238 F604                  		move.b	($FFFFF604).w,d1
00003D6E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D72 0801 0000                  		btst	#0,d1		; is up	pressed?
00003D76 6700                       		beq.s	Opt_Down	; if not, branch
00003D78 5346                       		subq.w	#1,d6		; move up 1 selection
00003D7A 6400                       		bcc.s	Opt_Down
00003D7C 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003D7E                            
00003D7E                            Opt_Down:
00003D7E 0801 0001                  		btst	#1,d1		; is down pressed?
00003D82 6700                       		beq.s	Opt_Refresh	; if not, branch
00003D84 5246                       		addq.w	#1,d6		; move down 1 selection
00003D86 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003D8A 6500                       		bcs.s	Opt_Refresh
00003D8C 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003D8E                            Opt_Refresh:
00003D8E                            		
00003D8E                            ; ---------------------------------------------------------------------------
00003D8E                            ; Music	playlist
00003D8E                            ; ---------------------------------------------------------------------------
00003D8E                            MusicList1:	incbin	misc\muslist1.bin
00003D96                            		even
00003D96                            MusicList2:	incbin	misc\muslist2.bin
00003D9E                            		even
00003D9E                            MusicList3:	incbin	misc\muslist3.bin
00003DA6                            		even
00003DA6                            MusicList4:	incbin	misc\muslist4.bin
00003DAE                            		even
00003DAE                            ; ===========================================================================
00003DAE                            
00003DAE                            ; ---------------------------------------------------------------------------
00003DAE                            ; Level
00003DAE                            ; ---------------------------------------------------------------------------
00003DAE                            
00003DAE                            Level:					; XREF: GameModeArray
00003DAE 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003DB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DB8 6B00                       		bmi.s	loc_37B6
00003DBA 103C 00E0                  		move.b	#$E0,d0
00003DBE 6100 D7DA                  		bsr.w	PlaySound_Special ; fade out music
00003DC2                            
00003DC2                            loc_37B6:
00003DC2 6100 DA18                  		bsr.w	ClearPLC
00003DC6 6100 E254                  		bsr.w	Pal_FadeFrom
00003DCA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DCE 6B00                       		bmi.s	Level_ClrRam
00003DD0 46FC 2700                  		move	#$2700,sr
00003DD4 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003DDE 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003DE4 6100 D858                  		bsr.w	NemDec
00003DE8 46FC 2300                  		move	#$2300,sr
00003DEC 7000                       		moveq	#0,d0
00003DEE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DF2 E948                       		lsl.w	#4,d0
00003DF4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003DFA 45F2 0000                  		lea	(a2,d0.w),a2
00003DFE 7000                       		moveq	#0,d0
00003E00 1012                       		move.b	(a2),d0
00003E02 6700                       		beq.s	loc_37FC
00003E04 6100 D978                  		bsr.w	LoadPLC		; load level patterns
00003E08                            
00003E08                            loc_37FC:
00003E08 7001                       		moveq	#1,d0
00003E0A 6100 D972                  		bsr.w	LoadPLC		; load standard	patterns
00003E0E                            
00003E0E                            Level_ClrRam:
00003E0E 43F8 D000                  		lea	($FFFFD000).w,a1
00003E12 7000                       		moveq	#0,d0
00003E14 323C 07FF                  		move.w	#$7FF,d1
00003E18                            
00003E18                            Level_ClrObjRam:
00003E18 22C0                       		move.l	d0,(a1)+
00003E1A 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003E1E                            
00003E1E 43F8 F628                  		lea	($FFFFF628).w,a1
00003E22 7000                       		moveq	#0,d0
00003E24 323C 0015                  		move.w	#$15,d1
00003E28                            
00003E28                            Level_ClrVars:
00003E28 22C0                       		move.l	d0,(a1)+
00003E2A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003E2E                            
00003E2E 43F8 F700                  		lea	($FFFFF700).w,a1
00003E32 7000                       		moveq	#0,d0
00003E34 323C 003F                  		move.w	#$3F,d1
00003E38                            
00003E38                            Level_ClrVars2:
00003E38 22C0                       		move.l	d0,(a1)+
00003E3A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003E3E                            
00003E3E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003E42 7000                       		moveq	#0,d0
00003E44 323C 0047                  		move.w	#$47,d1
00003E48                            
00003E48                            Level_ClrVars3:
00003E48 22C0                       		move.l	d0,(a1)+
00003E4A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003E4E                            
00003E4E 46FC 2700                  		move	#$2700,sr
00003E52 6100 D66E                  		bsr.w	ClearScreen
00003E56 4DF9 00C0 0004             		lea	($C00004).l,a6
00003E5C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003E60 3CBC 8230                  		move.w	#$8230,(a6)
00003E64 3CBC 8407                  		move.w	#$8407,(a6)
00003E68 3CBC 857C                  		move.w	#$857C,(a6)
00003E6C 3CBC 9001                  		move.w	#$9001,(a6)
00003E70 3CBC 8004                  		move.w	#$8004,(a6)
00003E74 3CBC 8720                  		move.w	#$8720,(a6)
00003E78 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003E7E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003E82 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003E88 6600                       		bne.s	Level_LoadPal	; if not, branch
00003E8A 3CBC 8014                  		move.w	#$8014,(a6)
00003E8E 7000                       		moveq	#0,d0
00003E90 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E94 D040                       		add.w	d0,d0
00003E96 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003E9C 3031 0000                  		move.w	(a1,d0.w),d0
00003EA0 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003EA4 31C0 F648                  		move.w	d0,($FFFFF648).w
00003EA8 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003EAC 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003EB0 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003EB4 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003EBA 6000 0000                  		bra.w	Level_LoadPal
00003EBE                            Player_Palette:
00003EBE                            		; normal, lz, sbz, blank
00003EBE 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003EC6                            		
00003EC6 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
00003ECE 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
00003ED6 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
00003EDE                            
00003EDE                            		; add more player palettes
00003EDE                            Level_LoadPal:
00003EDE 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003EE4 46FC 2300                  		move	#$2300,sr
00003EE8                            
00003EE8 7200                       		moveq	#0,d1
00003EEA 1238 FFE8                  		move.b	(v_character),d1
00003EEE D241                       		add.w	d1,d1
00003EF0 D241                       		add.w	d1,d1
00003EF2 D241                       		add.w	d1,d1
00003EF4 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003EF8                            		
00003EF8 6100 E3E8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003EFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003F02 6600                       		bne.s	Level_GetBgm	; if not, branch
00003F04 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003F08 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003F0E 6600                       		bne.s	Level_WaterPal	; if not, branch
00003F10 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003F14                            
00003F14                            Level_WaterPal:
00003F14 6100 E3E4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003F18 4A38 FE30                  		tst.b	($FFFFFE30).w
00003F1C 6700                       		beq.s	Level_GetBgm
00003F1E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003F24                            
00003F24                            ; NineKode begins here - How to play different songs on different acts
00003F24                             
00003F24                            Level_GetBgm:
00003F24 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F28 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003F2C 7000                       		moveq	#0,d0
00003F2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F32                             
00003F32 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003F38 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003F3A 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003F40 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F42                             
00003F42                            Level_GetBgm2:
00003F42 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003F48 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003F4A 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003F50 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F52                             
00003F52                            Level_GetBgm3:
00003F52 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003F58 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003F5A 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003F60 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003F62                             
00003F62                            Level_GetBgm4:
00003F62 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003F68 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003F6A 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003F70                             
00003F70                            Level_PlayBgm:
00003F70 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003F74 6100 D61E                  		bsr.w	PlaySound	; play music
00003F78 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003F7E                             
00003F7E                            ; NineKode ends here
00003F7E                            
00003F7E                            Level_TtlCard:
00003F7E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003F84 6100 ED7C                  		bsr.w	DelayProgram
00003F88 4EB9 0000 0000             		jsr	ObjectsLoad
00003F8E 4EB9 0000 0000             		jsr	BuildSprites
00003F94 6100 D854                  		bsr.w	RunPLC_RAM
00003F98 3038 D108                  		move.w	($FFFFD108).w,d0
00003F9C B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003FA0 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003FA2 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003FA6 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003FA8 4EB9 0000 0000             		jsr	Hud_Base
00003FAE                            
00003FAE                            loc_3946:
00003FAE 7003                       		moveq	#3,d0
00003FB0 6100 E314                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003FB4 6100 0000                  		bsr.w	LevelSizeLoad
00003FB8 6100 0000                  		bsr.w	DeformBgLayer
00003FBC 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003FC2 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003FC6 6100 0000                  		bsr.w	LoadTilesFromStart
00003FCA 4EB9 0000 0000             		jsr	FloorLog_Unk
00003FD0 6100 0000                  		bsr.w	ColIndexLoad
00003FD4 6100 0000                  		bsr.w	LZWaterEffects
00003FD8 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003FDE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FE2 6B00                       		bmi.s	Level_ChkDebug
00003FE4 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003FEA                            
00003FEA                            Level_ChkDebug:
00003FEA 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003FEE 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF0 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003FF6 6700                       		beq.s	Level_ChkWater	; if not, branch
00003FF8 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003FFE                            
00003FFE                            Level_ChkWater:
00003FFE 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00004004 31FC 0000 F604             		move.w	#0,($FFFFF604).w
0000400A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00004010 6600                       		bne.s	Level_LoadObj	; if not, branch
00004012 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00004018 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
0000401E 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00004024 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
0000402A                            
0000402A                            Level_LoadObj:
0000402A 4EB9 0000 0000             		jsr	ObjPosLoad
00004030 4EB9 0000 0000             		jsr	ObjectsLoad
00004036 4EB9 0000 0000             		jsr	BuildSprites
0000403C 7000                       		moveq	#0,d0
0000403E 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004042 6600                       		bne.s	loc_39E8	; if yes, branch
00004044 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004048 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000404C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004050                            
00004050                            loc_39E8:
00004050 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00004054 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00004058 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
0000405C 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004060                            		; move.b	d0,($FFFFFE2F).w
00004060 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00004066 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000406A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000406E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004072 6100 0000                  		bsr.w	OscillateNumInit
00004076 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000407C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00004082 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004088 31FC 0000 F790             		move.w	#0,($FFFFF790).w
0000408E 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00004094 7000                       		moveq	#0,d0
00004096 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000409A E548                       		lsl.w	#2,d0
0000409C 2271 0000                  		movea.l	(a1,d0.w),a1
000040A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040A4 6A00                       		bpl.s	Level_Demo	; if yes, branch
000040A6 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
000040AC 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000040B0 5340                       		subq.w	#1,d0
000040B2 E548                       		lsl.w	#2,d0
000040B4 2271 0000                  		movea.l	(a1,d0.w),a1
000040B8                            
000040B8                            Level_Demo:
000040B8 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000040BE 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000040C2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000040C8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000040CC 6A00                       		bpl.s	Level_ChkWaterPal
000040CE 31FC 021C F614             		move.w	#540,($FFFFF614).w
000040D4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000040DA 6600                       		bne.s	Level_ChkWaterPal
000040DC 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000040E2                            
000040E2                            Level_ChkWaterPal:
000040E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000040E8 6600                       		bne.s	Level_Delay	; if not, branch
000040EA 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000040EC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000040F2 6600                       		bne.s	Level_WaterPal2	; if not, branch
000040F4 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000040F6                            
000040F6                            Level_WaterPal2:
000040F6 6100 E21E                  		bsr.w	PalLoad4_Water
000040FA                            
000040FA                            Level_Delay:
000040FA 323C 0003                  		move.w	#3,d1
000040FE                            
000040FE                            Level_DelayLoop:
000040FE 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004104 6100 EBFC                  		bsr.w	DelayProgram
00004108 51C9 FFF4                  		dbf	d1,Level_DelayLoop
0000410C                            
0000410C 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00004112 6100 DE64                  		bsr.w	Pal_FadeTo2
00004116 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000411A 6B00                       		bmi.s	Level_ClrCardArt
0000411C 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004120 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00004124 5838 D124                  		addq.b	#4,($FFFFD124).w
00004128 5838 D164                  		addq.b	#4,($FFFFD164).w
0000412C 6000                       		bra.s	Level_StartGame
0000412E                            ; ===========================================================================
0000412E                            
0000412E                            Level_ClrCardArt:
0000412E 7002                       		moveq	#2,d0
00004130 4EB9 0000 177E             		jsr	(LoadPLC).l	; load explosion patterns
00004136 7000                       		moveq	#0,d0
00004138 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000413C 0640 0015                  		addi.w	#$15,d0
00004140 4EB9 0000 177E             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004146                            
00004146                            Level_StartGame:
00004146 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
0000414C                            
0000414C                            ; ---------------------------------------------------------------------------
0000414C                            ; Main level loop (when	all title card and loading sequences are finished)
0000414C                            ; ---------------------------------------------------------------------------
0000414C                            
0000414C                            Level_MainLoop:
0000414C 6100 D458                  		bsr.w	PauseGame
00004150 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004156 6100 EBAA                  		bsr.w	DelayProgram
0000415A 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
0000415E 6100 0000                  		bsr.w	MoveSonicInDemo
00004162 6100 0000                  		bsr.w	LZWaterEffects
00004166 4EB9 0000 0000             		jsr	ObjectsLoad
0000416C 4A78 FE08                  		tst.w	($FFFFFE08).w
00004170 6600                       		bne.s	loc_3B10
00004172 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004178 6400                       		bcc.s	loc_3B14
0000417A                            
0000417A                            loc_3B10:
0000417A 6100 0000                  		bsr.w	DeformBgLayer
0000417E                            
0000417E                            loc_3B14:
0000417E 4EB9 0000 0000             		jsr	BuildSprites
00004184 4EB9 0000 0000             		jsr	ObjPosLoad
0000418A 6100 D9AE                  		bsr.w	PalCycle_Load
0000418E 6100 D65A                  		bsr.w	RunPLC_RAM
00004192 6100 0000                  		bsr.w	OscillateNumDo
00004196 6100 0000                  		bsr.w	ChangeRingFrame
0000419A 6100 0000                  		bsr.w	SignpostArtLoad
0000419E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041A4 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
000041A6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
000041AA 6600 FC02                  		bne.w	Level		; if yes, branch
000041AE 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
000041B4 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000041B8 4E75                       		rts	
000041BA                            ; ===========================================================================
000041BA                            
000041BA                            Level_ChkDemo:				; XREF: Level_MainLoop
000041BA 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000041BE 6600                       		bne.s	Level_EndDemo	; if yes, branch
000041C0 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000041C4 6700                       		beq.s	Level_EndDemo	; if not, branch
000041C6 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000041CC 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000041D0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041D6 4E75                       		rts	
000041D8                            ; ===========================================================================
000041D8                            
000041D8                            Level_EndDemo:				; XREF: Level_ChkDemo
000041D8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000041DE 6600                       		bne.s	loc_3B88	; if not, branch
000041E0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000041E6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000041EA 6A00                       		bpl.s	loc_3B88	; if yes, branch
000041EC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000041F2                            
000041F2                            loc_3B88:
000041F2 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000041F8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000041FE 4278 F794                  		clr.w	($FFFFF794).w
00004202                            
00004202                            loc_3B98:
00004202 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004208 6100 EAF8                  		bsr.w	DelayProgram
0000420C 6100 0000                  		bsr.w	MoveSonicInDemo
00004210 4EB9 0000 0000             		jsr	ObjectsLoad
00004216 4EB9 0000 0000             		jsr	BuildSprites
0000421C 4EB9 0000 0000             		jsr	ObjPosLoad
00004222 5378 F794                  		subq.w	#1,($FFFFF794).w
00004226 6A00                       		bpl.s	loc_3BC8
00004228 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000422E 6100 DE0C                  		bsr.w	Pal_FadeOut
00004232                            
00004232                            loc_3BC8:
00004232 4A78 F614                  		tst.w	($FFFFF614).w
00004236 66CA                       		bne.s	loc_3B98
00004238 4E75                       		rts	
0000423A                            ; ===========================================================================
0000423A                            ; ---------------------------------------------------------------------------
0000423A                            ; Subroutine to	do special water effects in Labyrinth Zone
0000423A                            ; ---------------------------------------------------------------------------
0000423A                            
0000423A                            LZWaterEffects:				; XREF: Level
0000423A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004240 6600                       		bne.s	locret_3C28	; if not, branch
00004242 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004248 6400                       		bcc.s	LZMoveWater
0000424A 6100 0000                  		bsr.w	LZWindTunnels
0000424E 6100 0000                  		bsr.w	LZWaterSlides
00004252 6100 0000                  		bsr.w	LZDynamicWater
00004256                            
00004256                            LZMoveWater:
00004256 4238 F64E                  		clr.b	($FFFFF64E).w
0000425A 7000                       		moveq	#0,d0
0000425C 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004260 E248                       		lsr.w	#1,d0
00004262 D078 F648                  		add.w	($FFFFF648).w,d0
00004266 31C0 F646                  		move.w	d0,($FFFFF646).w
0000426A 3038 F646                  		move.w	($FFFFF646).w,d0
0000426E 9078 F704                  		sub.w	($FFFFF704).w,d0
00004272 6400                       		bcc.s	loc_3C1A
00004274 4A40                       		tst.w	d0
00004276 6A00                       		bpl.s	loc_3C1A
00004278 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
0000427E 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00004284                            
00004284                            loc_3C1A:
00004284 0C40 00DF                  		cmpi.w	#$DF,d0
00004288 6500                       		bcs.s	loc_3C24
0000428A 303C 00DF                  		move.w	#$DF,d0
0000428E                            
0000428E                            loc_3C24:
0000428E 11C0 F625                  		move.b	d0,($FFFFF625).w
00004292                            
00004292                            locret_3C28:
00004292 4E75                       		rts	
00004294                            ; ===========================================================================
00004294                            ; ---------------------------------------------------------------------------
00004294                            ; Labyrinth default water heights
00004294                            ; ---------------------------------------------------------------------------
00004294                            WaterHeight:	incbin	misc\lz_heigh.bin
0000429C                            		even
0000429C                            ; ===========================================================================
0000429C                            
0000429C                            ; ---------------------------------------------------------------------------
0000429C                            ; Labyrinth dynamic water routines
0000429C                            ; ---------------------------------------------------------------------------
0000429C                            
0000429C                            LZDynamicWater:				; XREF: LZWaterEffects
0000429C 7000                       		moveq	#0,d0
0000429E 1038 FE11                  		move.b	($FFFFFE11).w,d0
000042A2 D040                       		add.w	d0,d0
000042A4 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
000042A8 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
000042AC 7200                       		moveq	#0,d1
000042AE 1238 F64C                  		move.b	($FFFFF64C).w,d1
000042B2 3038 F64A                  		move.w	($FFFFF64A).w,d0
000042B6 9078 F648                  		sub.w	($FFFFF648).w,d0
000042BA 6700                       		beq.s	locret_3C5A
000042BC 6400                       		bcc.s	loc_3C56
000042BE 4441                       		neg.w	d1
000042C0                            
000042C0                            loc_3C56:
000042C0 D378 F648                  		add.w	d1,($FFFFF648).w
000042C4                            
000042C4                            locret_3C5A:
000042C4 4E75                       		rts	
000042C6                            ; ===========================================================================
000042C6 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000042C8 0000                       		dc.w DynWater_LZ2-DynWater_Index
000042CA 0000                       		dc.w DynWater_LZ3-DynWater_Index
000042CC 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000042CE                            ; ===========================================================================
000042CE                            
000042CE                            DynWater_LZ1:				; XREF: DynWater_Index
000042CE 3038 F700                  		move.w	($FFFFF700).w,d0
000042D2 1438 F64D                  		move.b	($FFFFF64D).w,d2
000042D6 6600                       		bne.s	loc_3CD0
000042D8 323C 00B8                  		move.w	#$B8,d1
000042DC 0C40 0600                  		cmpi.w	#$600,d0
000042E0 6500                       		bcs.s	loc_3CB4
000042E2 323C 0108                  		move.w	#$108,d1
000042E6 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000042EC 6500                       		bcs.s	loc_3CBA
000042EE 0C40 0C00                  		cmpi.w	#$C00,d0
000042F2 6500                       		bcs.s	loc_3CB4
000042F4 323C 0318                  		move.w	#$318,d1
000042F8 0C40 1080                  		cmpi.w	#$1080,d0
000042FC 6500                       		bcs.s	loc_3CB4
000042FE 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00004304 323C 05C8                  		move.w	#$5C8,d1
00004308 0C40 1380                  		cmpi.w	#$1380,d0
0000430C 6500                       		bcs.s	loc_3CB4
0000430E 323C 03A8                  		move.w	#$3A8,d1
00004312 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004316 6600                       		bne.s	loc_3CB4
00004318 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000431E                            
0000431E                            loc_3CB4:
0000431E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            loc_3CBA:				; XREF: DynWater_LZ1
00004324 0C40 0C80                  		cmpi.w	#$C80,d0
00004328 65F4                       		bcs.s	loc_3CB4
0000432A 323C 00E8                  		move.w	#$E8,d1
0000432E 0C40 1500                  		cmpi.w	#$1500,d0
00004332 65EA                       		bcs.s	loc_3CB4
00004334 323C 0108                  		move.w	#$108,d1
00004338 60E4                       		bra.s	loc_3CB4
0000433A                            ; ===========================================================================
0000433A                            
0000433A                            loc_3CD0:				; XREF: DynWater_LZ1
0000433A 5302                       		subq.b	#1,d2
0000433C 6600                       		bne.s	locret_3CF4
0000433E 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004344 6400                       		bcc.s	locret_3CF4
00004346 323C 03A8                  		move.w	#$3A8,d1
0000434A 0C40 1300                  		cmpi.w	#$1300,d0
0000434E 6500                       		bcs.s	loc_3CF0
00004350 323C 0108                  		move.w	#$108,d1
00004354 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000435A                            
0000435A                            loc_3CF0:
0000435A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000435E                            
0000435E                            locret_3CF4:
0000435E 4E75                       		rts	
00004360                            ; ===========================================================================
00004360                            
00004360                            DynWater_LZ2:				; XREF: DynWater_Index
00004360 3038 F700                  		move.w	($FFFFF700).w,d0
00004364 323C 0328                  		move.w	#$328,d1
00004368 0C40 0500                  		cmpi.w	#$500,d0
0000436C 6500                       		bcs.s	loc_3D12
0000436E 323C 03C8                  		move.w	#$3C8,d1
00004372 0C40 0B00                  		cmpi.w	#$B00,d0
00004376 6500                       		bcs.s	loc_3D12
00004378 323C 0428                  		move.w	#$428,d1
0000437C                            
0000437C                            loc_3D12:
0000437C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004380 4E75                       		rts	
00004382                            ; ===========================================================================
00004382                            
00004382                            DynWater_LZ3:				; XREF: DynWater_Index
00004382 3038 F700                  		move.w	($FFFFF700).w,d0
00004386 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000438A 6600                       		bne.s	loc_3D5E
0000438C 323C 0500                  		move.w	#$500,d1
00004390 0C40 0600                  		cmpi.w	#$600,d0
00004394 6500                       		bcs.s	loc_3D54
00004396 0C40 1B00                  		cmpi.w	#$1B00,d0
0000439A 6500                       		bcs.s	loc_3D54
0000439C 323C 0850                  		move.w	#$850,d1
000043A0                            
000043A0                            loc_3D54:
000043A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000043A8 4E75                       		rts	
000043AA                            ; ===========================================================================
000043AA                            
000043AA                            loc_3D5E:				; XREF: DynWater_LZ3
000043AA 5302                       		subq.b	#1,d2
000043AC 6600                       		bne.s	loc_3DA8
000043AE 323C 04C8                  		move.w	#$4C8,d1
000043B2 0C40 0770                  		cmpi.w	#$770,d0
000043B6 6500                       		bcs.s	loc_3DA2
000043B8 323C 0308                  		move.w	#$308,d1
000043BC 0C40 1400                  		cmpi.w	#$1400,d0
000043C0 6500                       		bcs.s	loc_3DA2
000043C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000043C8 6700                       		beq.s	loc_3D8E
000043CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000043D0 6400                       		bcc.s	loc_3D8E
000043D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000043D8 6400                       		bcc.s	loc_3DA2
000043DA                            
000043DA                            loc_3D8E:
000043DA 323C 0508                  		move.w	#$508,d1
000043DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000043E2 0C40 1770                  		cmpi.w	#$1770,d0
000043E6 6500                       		bcs.s	loc_3DA2
000043E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000043EE                            
000043EE                            loc_3DA2:
000043EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000043F2 4E75                       		rts	
000043F4                            ; ===========================================================================
000043F4                            
000043F4                            loc_3DA8:
000043F4 5302                       		subq.b	#1,d2
000043F6 6600                       		bne.s	loc_3DD2
000043F8 323C 0508                  		move.w	#$508,d1
000043FC 0C40 1860                  		cmpi.w	#$1860,d0
00004400 6500                       		bcs.s	loc_3DCC
00004402 323C 0188                  		move.w	#$188,d1
00004406 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000440A 6400                       		bcc.s	loc_3DC6
0000440C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004410 6600                       		bne.s	loc_3DCC
00004412                            
00004412                            loc_3DC6:
00004412 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004418                            
00004418                            loc_3DCC:
00004418 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000441C 4E75                       		rts	
0000441E                            ; ===========================================================================
0000441E                            
0000441E                            loc_3DD2:
0000441E 5302                       		subq.b	#1,d2
00004420 6600                       		bne.s	loc_3E0E
00004422 323C 0188                  		move.w	#$188,d1
00004426 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000442A 6500                       		bcs.s	loc_3E04
0000442C 323C 0900                  		move.w	#$900,d1
00004430 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004434 6500                       		bcs.s	loc_3E04
00004436 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000443C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004442 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004448 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000444E 4E75                       		rts	
00004450                            ; ===========================================================================
00004450                            
00004450                            loc_3E04:
00004450 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004454 31C1 F648                  		move.w	d1,($FFFFF648).w
00004458 4E75                       		rts	
0000445A                            ; ===========================================================================
0000445A                            
0000445A                            loc_3E0E:
0000445A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000445E 6500                       		bcs.s	locret_3E1A
00004460 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004466                            
00004466                            locret_3E1A:
00004466 4E75                       		rts	
00004468                            ; ===========================================================================
00004468                            
00004468                            DynWater_SBZ3:				; XREF: DynWater_Index
00004468 323C 0228                  		move.w	#$228,d1
0000446C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004472 6500                       		bcs.s	loc_3E2C
00004474 323C 04C8                  		move.w	#$4C8,d1
00004478                            
00004478                            loc_3E2C:
00004478 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000447C 4E75                       		rts
0000447E                            
0000447E                            ; ---------------------------------------------------------------------------
0000447E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000447E                            ; ---------------------------------------------------------------------------
0000447E                            
0000447E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000447E                            
0000447E                            
0000447E                            LZWindTunnels:				; XREF: LZWaterEffects
0000447E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004482 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004486 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000448C 7000                       		moveq	#0,d0
0000448E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004492 E748                       		lsl.w	#3,d0
00004494 D4C0                       		adda.w	d0,a2
00004496 7200                       		moveq	#0,d1
00004498 4A38 FE11                  		tst.b	($FFFFFE11).w
0000449C 6600                       		bne.s	loc_3E56
0000449E 7201                       		moveq	#1,d1
000044A0 514A                       		subq.w	#8,a2
000044A2                            
000044A2                            loc_3E56:
000044A2 43F8 D000                  		lea	($FFFFD000).w,a1
000044A6                            
000044A6                            LZWind_Loop:
000044A6 3029 0008                  		move.w	8(a1),d0
000044AA B052                       		cmp.w	(a2),d0
000044AC 6500 0000                  		bcs.w	loc_3EF4
000044B0 B06A 0004                  		cmp.w	4(a2),d0
000044B4 6400 0000                  		bcc.w	loc_3EF4
000044B8 3429 000C                  		move.w	$C(a1),d2
000044BC B46A 0002                  		cmp.w	2(a2),d2
000044C0 6500                       		bcs.s	loc_3EF4
000044C2 B46A 0006                  		cmp.w	6(a2),d2
000044C6 6400                       		bcc.s	loc_3EF4
000044C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044CC 0200 003F                  		andi.b	#$3F,d0
000044D0 6600                       		bne.s	loc_3E90
000044D2 303C 00D0                  		move.w	#$D0,d0
000044D6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rushing water sound
000044DC                            
000044DC                            loc_3E90:
000044DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000044E0 6600 0000                  		bne.w	locret_3F0A
000044E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000044EA 6400                       		bcc.s	loc_3F06
000044EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000044F2 0440 0080                  		subi.w	#$80,d0
000044F6 B052                       		cmp.w	(a2),d0
000044F8 6400                       		bcc.s	LZWind_Move
000044FA 7002                       		moveq	#2,d0
000044FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004502 6600                       		bne.s	loc_3EBA
00004504 4440                       		neg.w	d0
00004506                            
00004506                            loc_3EBA:
00004506 D169 000C                  		add.w	d0,$C(a1)
0000450A                            
0000450A                            LZWind_Move:
0000450A 5869 0008                  		addq.w	#4,8(a1)
0000450E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004514 337C 0000 0012             		move.w	#0,$12(a1)
0000451A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004520 08E9 0001 0022             		bset	#1,$22(a1)
00004526 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000452C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000452E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004532                            
00004532                            LZWind_MoveDown:
00004532 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004538 6700                       		beq.s	locret_3EF2	; if not, branch
0000453A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000453E                            
0000453E                            locret_3EF2:
0000453E 4E75                       		rts	
00004540                            ; ===========================================================================
00004540                            
00004540                            loc_3EF4:				; XREF: LZWindTunnels
00004540 504A                       		addq.w	#8,a2
00004542 51C9 FF62                  		dbf	d1,LZWind_Loop
00004546 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000454A 6700                       		beq.s	locret_3F0A
0000454C 137C 0000 001C             		move.b	#0,$1C(a1)
00004552                            
00004552                            loc_3F06:
00004552 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004556                            
00004556                            locret_3F0A:
00004556 4E75                       		rts	
00004558                            ; End of function LZWindTunnels
00004558                            
00004558                            ; ===========================================================================
00004558 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004560 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004572 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004580                            					; XREF: LZWindTunnels
00004580                            		even
00004580                            
00004580                            ; ---------------------------------------------------------------------------
00004580                            ; Labyrinth Zone water slide subroutine
00004580                            ; ---------------------------------------------------------------------------
00004580                            
00004580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004580                            
00004580                            
00004580                            LZWaterSlides:				; XREF: LZWaterEffects
00004580 43F8 D000                  		lea	($FFFFD000).w,a1
00004584 0829 0001 0022             		btst	#1,$22(a1)
0000458A 6600                       		bne.s	loc_3F6A
0000458C 3029 000C                  		move.w	$C(a1),d0
00004590 E248                       		lsr.w	#1,d0
00004592 0240 0380                  		andi.w	#$380,d0
00004596 1229 0008                  		move.b	8(a1),d1
0000459A 0241 007F                  		andi.w	#$7F,d1
0000459E D041                       		add.w	d1,d0
000045A0 45F8 A400                  		lea	($FFFFA400).w,a2
000045A4 1032 0000                  		move.b	(a2,d0.w),d0
000045A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000045AC 7206                       		moveq	#6,d1
000045AE                            
000045AE                            loc_3F62:
000045AE B022                       		cmp.b	-(a2),d0
000045B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000045B4 6700                       		beq.s	LZSlide_Move
000045B6                            
000045B6                            loc_3F6A:
000045B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000045BA 6700                       		beq.s	locret_3F7A
000045BC 337C 0005 003E             		move.w	#5,$3E(a1)
000045C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000045C6                            
000045C6                            locret_3F7A:
000045C6 4E75                       		rts	
000045C8                            ; ===========================================================================
000045C8                            
000045C8                            LZSlide_Move:				; XREF: LZWaterSlides
000045C8 0C41 0003                  		cmpi.w	#3,d1
000045CC 6400                       		bcc.s	loc_3F84
000045CE 4E71                       		nop	
000045D0                            
000045D0                            loc_3F84:
000045D0 08A9 0000 0022             		bclr	#0,$22(a1)
000045D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000045DA 1340 0014                  		move.b	d0,$14(a1)
000045DE 6A00                       		bpl.s	loc_3F9A
000045E0 08E9 0000 0022             		bset	#0,$22(a1)
000045E6                            
000045E6                            loc_3F9A:
000045E6 4229 0015                  		clr.b	$15(a1)
000045EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000045F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000045F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000045FA 0200 001F                  		andi.b	#$1F,d0
000045FE 6600                       		bne.s	locret_3FBE
00004600 303C 00D0                  		move.w	#$D0,d0
00004604 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play water sound
0000460A                            
0000460A                            locret_3FBE:
0000460A 4E75                       		rts	
0000460C                            ; End of function LZWaterSlides
0000460C                            
0000460C                            ; ===========================================================================
0000460C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000461B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000461C                            		even
0000461C                            
0000461C                            ; ---------------------------------------------------------------------------
0000461C                            ; Subroutine to	move Sonic in demo mode
0000461C                            ; ---------------------------------------------------------------------------
0000461C                            
0000461C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000461C                            
0000461C                            
0000461C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000461C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004620 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004622 4E75                       		rts	
00004624                            ; ===========================================================================
00004624                            
00004624                            ; This is an unused subroutine for recording a demo
00004624                            
00004624                            MoveDemo_Record:
00004624 43F9 0008 0000             		lea	($80000).l,a1
0000462A 3038 F790                  		move.w	($FFFFF790).w,d0
0000462E D2C0                       		adda.w	d0,a1
00004630 1038 F604                  		move.b	($FFFFF604).w,d0
00004634 B011                       		cmp.b	(a1),d0
00004636 6600                       		bne.s	loc_3FFA
00004638 5229 0001                  		addq.b	#1,1(a1)
0000463C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004642 6700                       		beq.s	loc_3FFA
00004644 4E75                       		rts	
00004646                            ; ===========================================================================
00004646                            
00004646                            loc_3FFA:				; XREF: MoveDemo_Record
00004646 1340 0002                  		move.b	d0,2(a1)
0000464A 137C 0000 0003             		move.b	#0,3(a1)
00004650 5478 F790                  		addq.w	#2,($FFFFF790).w
00004654 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000465A 4E75                       		rts	
0000465C                            ; ===========================================================================
0000465C                            
0000465C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000465C 4A38 F604                  		tst.b	($FFFFF604).w
00004660 6A00                       		bpl.s	loc_4022
00004662 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004666 6B00                       		bmi.s	loc_4022
00004668 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000466E                            
0000466E                            loc_4022:
0000466E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004674 7000                       		moveq	#0,d0
00004676 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000467A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004680 6600                       		bne.s	loc_4038
00004682 7006                       		moveq	#6,d0
00004684                            
00004684                            loc_4038:
00004684 E548                       		lsl.w	#2,d0
00004686 2271 0000                  		movea.l	(a1,d0.w),a1
0000468A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000468E 6A00                       		bpl.s	loc_4056
00004690 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004696 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000469A 5340                       		subq.w	#1,d0
0000469C E548                       		lsl.w	#2,d0
0000469E 2271 0000                  		movea.l	(a1,d0.w),a1
000046A2                            
000046A2                            loc_4056:
000046A2 3038 F790                  		move.w	($FFFFF790).w,d0
000046A6 D2C0                       		adda.w	d0,a1
000046A8 1011                       		move.b	(a1),d0
000046AA 41F8 F604                  		lea	($FFFFF604).w,a0
000046AE 1200                       		move.b	d0,d1
000046B0 1410                       		move.b	(a0),d2
000046B2 B500                       		eor.b	d2,d0
000046B4 10C1                       		move.b	d1,(a0)+
000046B6 C001                       		and.b	d1,d0
000046B8 10C0                       		move.b	d0,(a0)+
000046BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000046BE 6400                       		bcc.s	locret_407E
000046C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000046C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000046CA                            
000046CA                            locret_407E:
000046CA 4E75                       		rts	
000046CC                            ; End of function MoveSonicInDemo
000046CC                            
000046CC                            ; ===========================================================================
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            ; Demo sequence	pointers
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            Demo_Index:
000046CC                            	include "_inc\Demo pointers for intro.asm"
000046CC                            ; ---------------------------------------------------------------------------
000046CC                            ; Demo sequence	pointers
000046CC                            ; ---------------------------------------------------------------------------
000046CC 0000 0000                  	dc.l Demo_GHZ
000046D0 0000 0000                  	dc.l Demo_GHZ
000046D4 0000 0000                  	dc.l Demo_MZ
000046D8 0000 0000                  	dc.l Demo_MZ
000046DC 0000 0000                  	dc.l Demo_SYZ
000046E0 0000 0000                  	dc.l Demo_SYZ
000046E4 0000 0000                  	dc.l Demo_SS
000046E8 0000 0000                  	dc.l Demo_SS
000046E8 0000 0000                  	dc.l Demo_SS
000046EC                            
000046EC                            Demo_EndIndex:
000046EC                            	include "_inc\Demo pointers for ending.asm"
000046EC                            ; ---------------------------------------------------------------------------
000046EC                            ; Demo (ending) sequence pointers
000046EC                            ; ---------------------------------------------------------------------------
000046EC 0000 0000                  	dc.l Demo_EndGHZ1
000046F0 0000 0000                  	dc.l Demo_EndMZ
000046F4 0000 0000                  	dc.l Demo_EndSYZ
000046F8 0000 0000                  	dc.l Demo_EndLZ
000046FC 0000 0000                  	dc.l Demo_EndSLZ
00004700 0000 0000                  	dc.l Demo_EndSBZ1
00004704 0000 0000                  	dc.l Demo_EndSBZ2
00004708 0000 0000                  	dc.l Demo_EndGHZ2
00004708 0000 0000                  	dc.l Demo_EndGHZ2
0000470C                            
0000470C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000471C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000472C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000473C                            		even
0000473C                            
0000473C                            ; ---------------------------------------------------------------------------
0000473C                            ; Collision index loading subroutine
0000473C                            ; ---------------------------------------------------------------------------
0000473C                            
0000473C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000473C                            
0000473C                            
0000473C                            ColIndexLoad:				; XREF: Level
0000473C 7000                       		moveq	#0,d0
0000473E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004742 E548                       		lsl.w	#2,d0
00004744 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000474A 4E75                       		rts	
0000474C                            ; End of function ColIndexLoad
0000474C                            
0000474C                            ; ===========================================================================
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ; Collision index pointers
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ColPointers:
0000474C                            	include "_inc\Collision index pointers.asm"
0000474C                            ; ---------------------------------------------------------------------------
0000474C                            ; Collision index pointers
0000474C                            ; ---------------------------------------------------------------------------
0000474C 0000 0000                  	dc.l Col_GHZ
00004750 0000 0000                  	dc.l Col_LZ
00004754 0000 0000                  	dc.l Col_MZ
00004758 0000 0000                  	dc.l Col_SLZ
0000475C 0000 0000                  	dc.l Col_SYZ
00004760 0000 0000                  	dc.l Col_SBZ
00004764 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004768 0000 0000                  	dc.l Col_BHZ
00004768 0000 0000                  	dc.l Col_BHZ
0000476C                            
0000476C                            ; ---------------------------------------------------------------------------
0000476C                            ; Oscillating number subroutine
0000476C                            ; ---------------------------------------------------------------------------
0000476C                            
0000476C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000476C                            
0000476C                            
0000476C                            OscillateNumInit:			; XREF: Level
0000476C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004770 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004776 7220                       		moveq	#$20,d1
00004778                            
00004778                            Osc_Loop:
00004778 32DA                       		move.w	(a2)+,(a1)+
0000477A 51C9 FFFC                  		dbf	d1,Osc_Loop
0000477E 4E75                       		rts	
00004780                            ; End of function OscillateNumInit
00004780                            
00004780                            ; ===========================================================================
00004780 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004784 0000 0080                  		dc.w 0,	$80
00004788 0000 0080                  		dc.w 0,	$80
0000478C 0000 0080                  		dc.w 0,	$80
00004790 0000 0080                  		dc.w 0,	$80
00004794 0000 0080                  		dc.w 0,	$80
00004798 0000 0080                  		dc.w 0,	$80
0000479C 0000 0080                  		dc.w 0,	$80
000047A0 0000 0080                  		dc.w 0,	$80
000047A4 0000 50F0                  		dc.w 0,	$50F0
000047A8 011E 2080                  		dc.w $11E, $2080
000047AC 00B4 3080                  		dc.w $B4, $3080
000047B0 010E 5080                  		dc.w $10E, $5080
000047B4 01C2 7080                  		dc.w $1C2, $7080
000047B8 0276 0080                  		dc.w $276, $80
000047BC 0000 0080                  		dc.w 0,	$80
000047C0 0000                       		dc.w 0
000047C2                            		even
000047C2                            
000047C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047C2                            
000047C2                            
000047C2                            OscillateNumDo:				; XREF: Level
000047C2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000047C8 6400                       		bcc.s	locret_41C4
000047CA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000047CE 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000047D4 3619                       		move.w	(a1)+,d3
000047D6 720F                       		moveq	#$F,d1
000047D8                            
000047D8                            loc_4184:
000047D8 341A                       		move.w	(a2)+,d2
000047DA 381A                       		move.w	(a2)+,d4
000047DC 0303                       		btst	d1,d3
000047DE 6600                       		bne.s	loc_41A4
000047E0 3029 0002                  		move.w	2(a1),d0
000047E4 D042                       		add.w	d2,d0
000047E6 3340 0002                  		move.w	d0,2(a1)
000047EA D151                       		add.w	d0,0(a1)
000047EC B811                       		cmp.b	0(a1),d4
000047EE 6200                       		bhi.s	loc_41BA
000047F0 03C3                       		bset	d1,d3
000047F2 6000                       		bra.s	loc_41BA
000047F4                            ; ===========================================================================
000047F4                            
000047F4                            loc_41A4:				; XREF: OscillateNumDo
000047F4 3029 0002                  		move.w	2(a1),d0
000047F8 9042                       		sub.w	d2,d0
000047FA 3340 0002                  		move.w	d0,2(a1)
000047FE D151                       		add.w	d0,0(a1)
00004800 B811                       		cmp.b	0(a1),d4
00004802 6300                       		bls.s	loc_41BA
00004804 0383                       		bclr	d1,d3
00004806                            
00004806                            loc_41BA:
00004806 5849                       		addq.w	#4,a1
00004808 51C9 FFCE                  		dbf	d1,loc_4184
0000480C 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004810                            
00004810                            locret_41C4:
00004810 4E75                       		rts	
00004812                            ; End of function OscillateNumDo
00004812                            
00004812                            ; ===========================================================================
00004812 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004816 0002 0018                  		dc.w 2,	$18
0000481A 0002 0020                  		dc.w 2,	$20
0000481E 0002 0030                  		dc.w 2,	$30
00004822 0004 0020                  		dc.w 4,	$20
00004826 0008 0008                  		dc.w 8,	8
0000482A 0008 0040                  		dc.w 8,	$40
0000482E 0004 0040                  		dc.w 4,	$40
00004832 0002 0050                  		dc.w 2,	$50
00004836 0002 0050                  		dc.w 2,	$50
0000483A 0002 0020                  		dc.w 2,	$20
0000483E 0003 0030                  		dc.w 3,	$30
00004842 0005 0050                  		dc.w 5,	$50
00004846 0007 0070                  		dc.w 7,	$70
0000484A 0002 0010                  		dc.w 2,	$10
0000484E 0002 0010                  		dc.w 2,	$10
00004852                            		even
00004852                            
00004852                            ; ---------------------------------------------------------------------------
00004852                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004852                            ; ---------------------------------------------------------------------------
00004852                            
00004852                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004852                            
00004852                            
00004852                            ChangeRingFrame:			; XREF: Level
00004852 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004856 6A00                       		bpl.s	loc_421C
00004858 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000485E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004862 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004868                            
00004868                            loc_421C:
00004868 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000486C 6A00                       		bpl.s	loc_4232
0000486E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004874 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004878 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000487E                            
0000487E                            loc_4232:
0000487E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004882 6A00                       		bpl.s	loc_4250
00004884 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000488A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000488E 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004894 6500                       		bcs.s	loc_4250
00004896 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000489C                            
0000489C                            loc_4250:
0000489C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
000048A0 6700                       		beq.s	locret_4272
000048A2 7000                       		moveq	#0,d0
000048A4 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000048A8 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000048AC 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000048B0 EF58                       		rol.w	#7,d0
000048B2 0240 0003                  		andi.w	#3,d0
000048B6 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000048BA 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000048BE                            
000048BE                            locret_4272:
000048BE 4E75                       		rts	
000048C0                            ; End of function ChangeRingFrame
000048C0                            
000048C0                            ; ---------------------------------------------------------------------------
000048C0                            ; End-of-act signpost pattern loading subroutine
000048C0                            ; ---------------------------------------------------------------------------
000048C0                            
000048C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048C0                            
000048C0                            
000048C0                            SignpostArtLoad:			; XREF: Level
000048C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000048C4 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000048C8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000048CE 6700                       		beq.s	Signpost_Exit	; if yes, branch
000048D0 3038 F700                  		move.w	($FFFFF700).w,d0
000048D4 3238 F72A                  		move.w	($FFFFF72A).w,d1
000048D8 0441 0100                  		subi.w	#$100,d1
000048DC B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000048DE 6D00                       		blt.s	Signpost_Exit	; if not, branch
000048E0 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000048E4 6700                       		beq.s	Signpost_Exit
000048E6 B278 F728                  		cmp.w	($FFFFF728).w,d1
000048EA 6700                       		beq.s	Signpost_Exit
000048EC 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000048F0 7012                       		moveq	#$12,d0
000048F2 6000 CEBC                  		bra.w	LoadPLC2	; load signpost	patterns
000048F6                            ; ===========================================================================
000048F6                            
000048F6                            Signpost_Exit:
000048F6 4E75                       		rts	
000048F8                            ; End of function SignpostArtLoad
000048F8                            
000048F8                            ; ===========================================================================
000048F8                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004978                            Demo_MZ:	incbin	demodata\i_mz.bin
00004AA8                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004B28                            Demo_SS:	incbin	demodata\i_ss.bin
00004C28                            ; ===========================================================================
00004C28                            
00004C28                            ; ---------------------------------------------------------------------------
00004C28                            ; Special Stage
00004C28                            ; ---------------------------------------------------------------------------
00004C28                            
00004C28                            SpecialStage:				; XREF: GameModeArray
00004C28 303C 00CA                  		move.w	#$CA,d0
00004C2C 6100 C96C                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004C30 6100 D514                  		bsr.w	Pal_MakeFlash
00004C34 46FC 2700                  		move	#$2700,sr
00004C38 4DF9 00C0 0004             		lea	($C00004).l,a6
00004C3E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004C42 3CBC 8004                  		move.w	#$8004,(a6)
00004C46 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004C4C 3CBC 9011                  		move.w	#$9011,(a6)
00004C50 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C54 0200 00BF                  		andi.b	#$BF,d0
00004C58 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C5E 6100 C862                  		bsr.w	ClearScreen
00004C62 46FC 2300                  		move	#$2300,sr
00004C66 4BF9 00C0 0004             		lea	($C00004).l,a5
00004C6C 3ABC 8F01                  		move.w	#$8F01,(a5)
00004C70 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004C76 3ABC 9780                  		move.w	#$9780,(a5)
00004C7A 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004C80 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004C88                            
00004C88                            loc_463C:
00004C88 3215                       		move.w	(a5),d1
00004C8A 0801 0001                  		btst	#1,d1
00004C8E 66F8                       		bne.s	loc_463C
00004C90 3ABC 8F02                  		move.w	#$8F02,(a5)
00004C94 6100 0000                  		bsr.w	SS_BGLoad
00004C98 7014                       		moveq	#$14,d0
00004C9A 6100 CC4E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004C9E 43F8 D000                  		lea	($FFFFD000).w,a1
00004CA2 7000                       		moveq	#0,d0
00004CA4 323C 07FF                  		move.w	#$7FF,d1
00004CA8                            
00004CA8                            SS_ClrObjRam:
00004CA8 22C0                       		move.l	d0,(a1)+
00004CAA 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004CAE                            
00004CAE 43F8 F700                  		lea	($FFFFF700).w,a1
00004CB2 7000                       		moveq	#0,d0
00004CB4 323C 003F                  		move.w	#$3F,d1
00004CB8                            
00004CB8                            SS_ClrRam:
00004CB8 22C0                       		move.l	d0,(a1)+
00004CBA 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004CBE                            
00004CBE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004CC2 7000                       		moveq	#0,d0
00004CC4 323C 0027                  		move.w	#$27,d1
00004CC8                            
00004CC8                            SS_ClrRam2:
00004CC8 22C0                       		move.l	d0,(a1)+
00004CCA 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004CCE                            
00004CCE 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004CD2 7000                       		moveq	#0,d0
00004CD4 323C 007F                  		move.w	#$7F,d1
00004CD8                            
00004CD8                            SS_ClrNemRam:
00004CD8 22C0                       		move.l	d0,(a1)+
00004CDA 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004CDE                            
00004CDE 4238 F64E                  		clr.b	($FFFFF64E).w
00004CE2 4278 FE02                  		clr.w	($FFFFFE02).w
00004CE6 700A                       		moveq	#$A,d0
00004CE8 6100 D5DC                  		bsr.w	PalLoad1	; load special stage pallet
00004CEC 4EB9 0000 0000             		jsr	SS_Load
00004CF2 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004CFA 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004D02 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004D08 6100 0000                  		bsr.w	PalCycle_SS
00004D0C 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004D10 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
00004D14 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00004D1A 303C 0089                  		move.w	#$89,d0
00004D1E 6100 C874                  		bsr.w	PlaySound	; play special stage BG	music
00004D22 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004D28 43F9 0000 46CC             		lea	(Demo_Index).l,a1
00004D2E 7006                       		moveq	#6,d0
00004D30 E548                       		lsl.w	#2,d0
00004D32 2271 0000                  		movea.l	(a1,d0.w),a1
00004D36 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004D3C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004D40 4278 FE20                  		clr.w	($FFFFFE20).w
00004D44 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004D48 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004D4E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004D54                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004D54                            ;		beq.s	SS_NoDebug	; if not, branch
00004D54                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
00004D54                            ;		beq.s	SS_NoDebug	; if not, branch
00004D54                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004D54                            
00004D54                            SS_NoDebug:
00004D54 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004D58 0000 0040                  		ori.b	#$40,d0
00004D5C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004D62 6100 D336                  		bsr.w	Pal_MakeWhite
00004D66                            
00004D66                            ; ---------------------------------------------------------------------------
00004D66                            ; Main Special Stage loop
00004D66                            ; ---------------------------------------------------------------------------
00004D66                            
00004D66                            SS_MainLoop:
00004D66 6100 C83E                  		bsr.w	PauseGame
00004D6A 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004D70 6100 DF90                  		bsr.w	DelayProgram
00004D74 4A78 F784                          tst.w   ($FFFFF784).w
00004D78 6700                               beq.s   SS_NotReversed
00004D7A 5378 F784                          subi.w  #1,($FFFFF784).w
00004D7E                            
00004D7E                            SS_NotReversed:
00004D7E 6100 F89C                  		bsr.w	MoveSonicInDemo
00004D82 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004D88 4EB9 0000 0000             		jsr	ObjectsLoad
00004D8E 4EB9 0000 0000             		jsr	BuildSprites
00004D94 4EB9 0000 0000             		jsr	SS_ShowLayout
00004D9A 6100 0000                  		bsr.w	SS_BGAnimate
00004D9E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DA2 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004DA4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004DA8 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004DAC                            
00004DAC                            SS_ChkEnd:
00004DAC 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004DB2 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
00004DB6                            
00004DB6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004DBA 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004DBE 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004DC4 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004DCA 6500                       		bcs.s	SS_End		; if not, branch
00004DCC 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004DD0                            
00004DD0                            SS_End:
00004DD0 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004DD6 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004DDC 4278 F794                  		clr.w	($FFFFF794).w
00004DE0                            
00004DE0                            SS_EndLoop:
00004DE0 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DE6 6100 DF1A                  		bsr.w	DelayProgram
00004DEA 6100 F830                  		bsr.w	MoveSonicInDemo
00004DEE 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004DF4 4EB9 0000 0000             		jsr	ObjectsLoad
00004DFA 4EB9 0000 0000             		jsr	BuildSprites
00004E00 4EB9 0000 0000             		jsr	SS_ShowLayout
00004E06 6100 0000                  		bsr.w	SS_BGAnimate
00004E0A 5378 F794                  		subq.w	#1,($FFFFF794).w
00004E0E 6A00                       		bpl.s	loc_47D4
00004E10 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004E16 6100 D34E                  		bsr.w	Pal_ToWhite
00004E1A                            
00004E1A                            loc_47D4:
00004E1A 4A78 F614                  		tst.w	($FFFFF614).w
00004E1E 66C0                       		bne.s	SS_EndLoop
00004E20                            
00004E20 46FC 2700                  		move	#$2700,sr
00004E24 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E2A 3CBC 8230                  		move.w	#$8230,(a6)
00004E2E 3CBC 8407                  		move.w	#$8407,(a6)
00004E32 3CBC 9001                  		move.w	#$9001,(a6)
00004E36 6100 C68A                  		bsr.w	ClearScreen
00004E3A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004E44 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004E4A 6100 C7F2                  		bsr.w	NemDec
00004E4E 4EB9 0000 0000             		jsr	Hud_Base
00004E54 46FC 2300                  		move	#$2300,sr
00004E58 7011                       		moveq	#$11,d0
00004E5A 6100 D486                  		bsr.w	PalLoad2	; load results screen pallet
00004E5E 7000                       		moveq	#0,d0
00004E60 6100 C94E                  		bsr.w	LoadPLC2
00004E64 701B                       		moveq	#$1B,d0
00004E66 6100 C916                  		bsr.w	LoadPLC		; load results screen patterns
00004E6A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004E70 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004E76 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004E7A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004E7E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004E82 303C 008E                  		move.w	#$8E,d0
00004E86 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004E8C 43F8 D000                  		lea	($FFFFD000).w,a1
00004E90 7000                       		moveq	#0,d0
00004E92 323C 07FF                  		move.w	#$7FF,d1
00004E96                            
00004E96                            SS_EndClrObjRam:
00004E96 22C0                       		move.l	d0,(a1)+
00004E98 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004E9C                            
00004E9C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004EA2                            
00004EA2                            SS_NormalExit:
00004EA2 6100 C702                  		bsr.w	PauseGame
00004EA6 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004EAC 6100 DE54                  		bsr.w	DelayProgram
00004EB0 4EB9 0000 0000             		jsr	ObjectsLoad
00004EB6 4EB9 0000 0000             		jsr	BuildSprites
00004EBC 6100 C92C                  		bsr.w	RunPLC_RAM
00004EC0 4A78 FE02                  		tst.w	($FFFFFE02).w
00004EC4 67DC                       		beq.s	SS_NormalExit
00004EC6 4AB8 F680                  		tst.l	($FFFFF680).w
00004ECA 66D6                       		bne.s	SS_NormalExit
00004ECC 303C 00CA                  		move.w	#$CA,d0
00004ED0 6100 C6C8                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004ED4 6100 D270                  		bsr.w	Pal_MakeFlash
00004ED8 4E75                       		rts	
00004EDA                            ; ===========================================================================
00004EDA                            
00004EDA                            SS_ToSegaScreen:
00004EDA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004EE0 4E75                       		rts
00004EE2                            
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            ; Special stage	background loading subroutine
00004EE2                            ; ---------------------------------------------------------------------------
00004EE2                            
00004EE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EE2                            
00004EE2                            
00004EE2                            SS_BGLoad:				; XREF: SpecialStage
00004EE2 43F9 00FF 0000             		lea	($FF0000).l,a1
00004EE8 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004EEE 303C 4051                  		move.w	#$4051,d0
00004EF2 6100 CA28                  		bsr.w	EniDec
00004EF6 263C 5000 0001             		move.l	#$50000001,d3
00004EFC 45F9 00FF 0080             		lea	($FF0080).l,a2
00004F02 7E06                       		moveq	#6,d7
00004F04                            
00004F04                            loc_48BE:
00004F04 2003                       		move.l	d3,d0
00004F06 7C03                       		moveq	#3,d6
00004F08 7800                       		moveq	#0,d4
00004F0A 0C47 0003                  		cmpi.w	#3,d7
00004F0E 6400                       		bcc.s	loc_48CC
00004F10 7801                       		moveq	#1,d4
00004F12                            
00004F12                            loc_48CC:
00004F12 7A07                       		moveq	#7,d5
00004F14                            
00004F14                            loc_48CE:
00004F14 224A                       		movea.l	a2,a1
00004F16 0A04 0001                  		eori.b	#1,d4
00004F1A 6600                       		bne.s	loc_48E2
00004F1C 0C47 0006                  		cmpi.w	#6,d7
00004F20 6600                       		bne.s	loc_48F2
00004F22 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F28                            
00004F28                            loc_48E2:
00004F28 48E7 F800                  		movem.l	d0-d4,-(sp)
00004F2C 7207                       		moveq	#7,d1
00004F2E 7407                       		moveq	#7,d2
00004F30 6100 C6EC                  		bsr.w	ShowVDPGraphics
00004F34 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004F38                            
00004F38                            loc_48F2:
00004F38 0680 0010 0000             		addi.l	#$100000,d0
00004F3E 51CD FFD4                  		dbf	d5,loc_48CE
00004F42 0680 0380 0000             		addi.l	#$3800000,d0
00004F48 0A04 0001                  		eori.b	#1,d4
00004F4C 51CE FFC4                  		dbf	d6,loc_48CC
00004F50 0683 1000 0000             		addi.l	#$10000000,d3
00004F56 6A00                       		bpl.s	loc_491C
00004F58 4843                       		swap	d3
00004F5A 0683 0000 C000             		addi.l	#$C000,d3
00004F60 4843                       		swap	d3
00004F62                            
00004F62                            loc_491C:
00004F62 D4FC 0080                  		adda.w	#$80,a2
00004F66 51CF FF9C                  		dbf	d7,loc_48BE
00004F6A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F70 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004F76 303C 4000                  		move.w	#$4000,d0
00004F7A 6100 C9A0                  		bsr.w	EniDec
00004F7E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F84 203C 4000 0003             		move.l	#$40000003,d0
00004F8A 723F                       		moveq	#$3F,d1
00004F8C 741F                       		moveq	#$1F,d2
00004F8E 6100 C68E                  		bsr.w	ShowVDPGraphics
00004F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00004F98 203C 5000 0003             		move.l	#$50000003,d0
00004F9E 723F                       		moveq	#$3F,d1
00004FA0 743F                       		moveq	#$3F,d2
00004FA2 6100 C67A                  		bsr.w	ShowVDPGraphics
00004FA6 4E75                       		rts	
00004FA8                            ; End of function SS_BGLoad
00004FA8                            
00004FA8                            ; ---------------------------------------------------------------------------
00004FA8                            ; Pallet cycling routine - special stage
00004FA8                            ; ---------------------------------------------------------------------------
00004FA8                            
00004FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FA8                            
00004FA8                            
00004FA8                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004FA8 4A78 F63A                  		tst.w	($FFFFF63A).w
00004FAC 6600                       		bne.s	locret_49E6
00004FAE 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004FB2 6A00                       		bpl.s	locret_49E6
00004FB4 4DF9 00C0 0004             		lea	($C00004).l,a6
00004FBA 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004FBE 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004FC2 0240 001F                  		andi.w	#$1F,d0
00004FC6 E548                       		lsl.w	#2,d0
00004FC8 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004FCE D0C0                       		adda.w	d0,a0
00004FD0 1018                       		move.b	(a0)+,d0
00004FD2 6A00                       		bpl.s	loc_4992
00004FD4 303C 01FF                  		move.w	#$1FF,d0
00004FD8                            
00004FD8                            loc_4992:
00004FD8 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004FDC 7000                       		moveq	#0,d0
00004FDE 1018                       		move.b	(a0)+,d0
00004FE0 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004FE4 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004FEA 43F1 0000                  		lea	(a1,d0.w),a1
00004FEE 303C 8200                  		move.w	#-$7E00,d0
00004FF2 1019                       		move.b	(a1)+,d0
00004FF4 3C80                       		move.w	d0,(a6)
00004FF6 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004FFA 303C 8400                  		move.w	#-$7C00,d0
00004FFE 1018                       		move.b	(a0)+,d0
00005000 3C80                       		move.w	d0,(a6)
00005002 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
0000500C 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00005014 7000                       		moveq	#0,d0
00005016 1018                       		move.b	(a0)+,d0
00005018 6B00                       		bmi.s	loc_49E8
0000501A 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00005020 D2C0                       		adda.w	d0,a1
00005022 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005026 24D9                       		move.l	(a1)+,(a2)+
00005028 24D9                       		move.l	(a1)+,(a2)+
0000502A 24D9                       		move.l	(a1)+,(a2)+
0000502C                            
0000502C                            locret_49E6:
0000502C 4E75                       		rts	
0000502E                            ; ===========================================================================
0000502E                            
0000502E                            loc_49E8:				; XREF: PalCycle_SS
0000502E 3238 F79E                  		move.w	($FFFFF79E).w,d1
00005032 0C40 008A                  		cmpi.w	#$8A,d0
00005036 6500                       		bcs.s	loc_49F4
00005038 5241                       		addq.w	#1,d1
0000503A                            
0000503A                            loc_49F4:
0000503A C2FC 002A                  		mulu.w	#$2A,d1
0000503E 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00005044 D2C1                       		adda.w	d1,a1
00005046 0240 007F                  		andi.w	#$7F,d0
0000504A 0880 0000                  		bclr	#0,d0
0000504E 6700                       		beq.s	loc_4A18
00005050 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00005054 24D1                       		move.l	(a1),(a2)+
00005056 24E9 0004                  		move.l	4(a1),(a2)+
0000505A 24E9 0008                  		move.l	8(a1),(a2)+
0000505E                            
0000505E                            loc_4A18:
0000505E D2FC 000C                  		adda.w	#$C,a1
00005062 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005066 0C40 000A                  		cmpi.w	#$A,d0
0000506A 6500                       		bcs.s	loc_4A2E
0000506C 0440 000A                  		subi.w	#$A,d0
00005070 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00005074                            
00005074                            loc_4A2E:
00005074 3200                       		move.w	d0,d1
00005076 D040                       		add.w	d0,d0
00005078 D041                       		add.w	d1,d0
0000507A D2C0                       		adda.w	d0,a1
0000507C 24D9                       		move.l	(a1)+,(a2)+
0000507E 34D9                       		move.w	(a1)+,(a2)+
00005080 4E75                       		rts	
00005082                            ; End of function PalCycle_SS
00005082                            
00005082                            ; ===========================================================================
00005082 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00005092                            					; XREF: PalCycle_SS
00005092 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
000050A2 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
000050B2 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000050C2 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000050D2 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000050E2 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000050F2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00005102                            		even
00005102 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00005110                            					; XREF: PalCycle_SS
00005110                            		even
00005110                            
00005110                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005158                            		even
00005158                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
0000522A                            		even
0000522A                            
0000522A                            ; ---------------------------------------------------------------------------
0000522A                            ; Subroutine to	make the special stage background animated
0000522A                            ; ---------------------------------------------------------------------------
0000522A                            
0000522A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000522A                            
0000522A                            
0000522A                            SS_BGAnimate:				; XREF: SpecialStage
0000522A 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
0000522E 6600                       		bne.s	loc_4BF6
00005230 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005236 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000523C                            
0000523C                            loc_4BF6:
0000523C 0C40 0008                  		cmpi.w	#8,d0
00005240 6400                       		bcc.s	loc_4C4E
00005242 0C40 0006                  		cmpi.w	#6,d0
00005246 6600                       		bne.s	loc_4C10
00005248 5278 F718                  		addq.w	#1,($FFFFF718).w
0000524C 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005250 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005256                            
00005256                            loc_4C10:
00005256 7000                       		moveq	#0,d0
00005258 3038 F708                  		move.w	($FFFFF708).w,d0
0000525C 4440                       		neg.w	d0
0000525E 4840                       		swap	d0
00005260 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005266 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000526A 7609                       		moveq	#9,d3
0000526C                            
0000526C                            loc_4C26:
0000526C 302B 0002                  		move.w	2(a3),d0
00005270 6100 DAC2                  		bsr.w	CalcSine
00005274 7400                       		moveq	#0,d2
00005276 1419                       		move.b	(a1)+,d2
00005278 C1C2                       		muls.w	d2,d0
0000527A E080                       		asr.l	#8,d0
0000527C 36C0                       		move.w	d0,(a3)+
0000527E 1419                       		move.b	(a1)+,d2
00005280 4882                       		ext.w	d2
00005282 D55B                       		add.w	d2,(a3)+
00005284 51CB FFE6                  		dbf	d3,loc_4C26
00005288 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000528C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005292 6000                       		bra.s	loc_4C7E
00005294                            ; ===========================================================================
00005294                            
00005294                            loc_4C4E:				; XREF: SS_BGAnimate
00005294 0C40 000C                  		cmpi.w	#$C,d0
00005298 6600                       		bne.s	loc_4C74
0000529A 5378 F718                  		subq.w	#1,($FFFFF718).w
0000529E 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052A2 243C 0001 8000             		move.l	#$18000,d2
000052A8 7206                       		moveq	#6,d1
000052AA                            
000052AA                            loc_4C64:
000052AA 2013                       		move.l	(a3),d0
000052AC 9082                       		sub.l	d2,d0
000052AE 26C0                       		move.l	d0,(a3)+
000052B0 0482 0000 2000             		subi.l	#$2000,d2
000052B6 51C9 FFF2                  		dbf	d1,loc_4C64
000052BA                            
000052BA                            loc_4C74:
000052BA 47F8 AB00                  		lea	($FFFFAB00).w,a3
000052BE 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000052C4                            
000052C4                            loc_4C7E:
000052C4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000052C8 3038 F718                  		move.w	($FFFFF718).w,d0
000052CC 4440                       		neg.w	d0
000052CE 4840                       		swap	d0
000052D0 7600                       		moveq	#0,d3
000052D2 161A                       		move.b	(a2)+,d3
000052D4 3438 F70C                  		move.w	($FFFFF70C).w,d2
000052D8 4442                       		neg.w	d2
000052DA 0242 00FF                  		andi.w	#$FF,d2
000052DE E54A                       		lsl.w	#2,d2
000052E0                            
000052E0                            loc_4C9A:
000052E0 301B                       		move.w	(a3)+,d0
000052E2 544B                       		addq.w	#2,a3
000052E4 7200                       		moveq	#0,d1
000052E6 121A                       		move.b	(a2)+,d1
000052E8 5341                       		subq.w	#1,d1
000052EA                            
000052EA                            loc_4CA4:
000052EA 2380 2000                  		move.l	d0,(a1,d2.w)
000052EE 5842                       		addq.w	#4,d2
000052F0 0242 03FC                  		andi.w	#$3FC,d2
000052F4 51C9 FFF4                  		dbf	d1,loc_4CA4
000052F8 51CB FFE6                  		dbf	d3,loc_4C9A
000052FC 4E75                       		rts	
000052FE                            ; End of function SS_BGAnimate
000052FE                            
000052FE                            ; ===========================================================================
000052FE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000530A                            		even
0000530A 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005312                            		even
00005312 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005326                            		even
00005326                            					; XREF: SS_BGAnimate
00005326                            ; ===========================================================================
00005326                            
00005326                            ; ---------------------------------------------------------------------------
00005326                            ; Continue screen
00005326                            ; ---------------------------------------------------------------------------
00005326                            
00005326                            ContinueScreen:				; XREF: GameModeArray
00005326 6100 CCF4                  		bsr.w	Pal_FadeFrom
0000532A 46FC 2700                  		move	#$2700,sr
0000532E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005332 0200 00BF                  		andi.b	#$BF,d0
00005336 33C0 00C0 0004             		move.w	d0,($C00004).l
0000533C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005342 3CBC 8004                  		move.w	#$8004,(a6)
00005346 3CBC 8700                  		move.w	#$8700,(a6)
0000534A 6100 C176                  		bsr.w	ClearScreen
0000534E 43F8 D000                  		lea	($FFFFD000).w,a1
00005352 7000                       		moveq	#0,d0
00005354 323C 07FF                  		move.w	#$7FF,d1
00005358                            
00005358                            Cont_ClrObjRam:
00005358 22C0                       		move.l	d0,(a1)+
0000535A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000535E                            
0000535E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005368 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000536E 6100 C2CE                  		bsr.w	NemDec
00005372 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000537C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005382 6100 C2BA                  		bsr.w	NemDec
00005386 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005390 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005396 6100 C2A6                  		bsr.w	NemDec
0000539A 720A                       		moveq	#10,d1
0000539C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000053A2 7012                       		moveq	#$12,d0
000053A4 6100 CF20                  		bsr.w	PalLoad1	; load continue	screen pallet
000053A8 103C 0090                  		move.b	#$90,d0
000053AC 6100 C1E6                  		bsr.w	PlaySound	; play continue	music
000053B0 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000053B6 42B8 F700                  		clr.l	($FFFFF700).w
000053BA 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000053C2 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000053C8 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000053CE 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000053D4 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000053DA 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000053E0 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000053E6 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000053EC 4EB9 0000 0000             		jsr	ObjectsLoad
000053F2 4EB9 0000 0000             		jsr	BuildSprites
000053F8 3038 F60C                  		move.w	($FFFFF60C).w,d0
000053FC 0000 0040                  		ori.b	#$40,d0
00005400 33C0 00C0 0004             		move.w	d0,($C00004).l
00005406 6100 CB6A                  		bsr.w	Pal_FadeTo
0000540A                            
0000540A                            ; ---------------------------------------------------------------------------
0000540A                            ; Continue screen main loop
0000540A                            ; ---------------------------------------------------------------------------
0000540A                            
0000540A                            Cont_MainLoop:
0000540A 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005410 6100 D8F0                  		bsr.w	DelayProgram
00005414 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000541A 6400                       		bcc.s	loc_4DF2
0000541C 46FC 2700                  		move	#$2700,sr
00005420 3238 F614                  		move.w	($FFFFF614).w,d1
00005424 82FC 003C                  		divu.w	#$3C,d1
00005428 0281 0000 000F             		andi.l	#$F,d1
0000542E 4EB9 0000 0000             		jsr	ContScrCounter
00005434 46FC 2300                  		move	#$2300,sr
00005438                            
00005438                            loc_4DF2:
00005438 4EB9 0000 0000             		jsr	ObjectsLoad
0000543E 4EB9 0000 0000             		jsr	BuildSprites
00005444 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
0000544A 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000544C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005452 64B6                       		bcc.s	Cont_MainLoop
00005454 4A78 F614                  		tst.w	($FFFFF614).w
00005458 6600 FFB0                  		bne.w	Cont_MainLoop
0000545C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005462 4E75                       		rts	
00005464                            ; ===========================================================================
00005464                            
00005464                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005464 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000546A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005470 7000                       		moveq	#0,d0
00005472 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005476 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000547A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000547E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005482 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005486 4E75                       		rts	
00005488                            ; ===========================================================================
00005488                            
00005488                            ; ---------------------------------------------------------------------------
00005488                            ; Object 80 - Continue screen elements
00005488                            ; ---------------------------------------------------------------------------
00005488                            
00005488                            Obj80:					; XREF: Obj_Index
00005488 7000                       		moveq	#0,d0
0000548A 1028 0024                  		move.b	$24(a0),d0
0000548E 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005492 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005496                            ; ===========================================================================
00005496 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005498 0000                       		dc.w Obj80_Display-Obj80_Index
0000549A 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000549C 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000549E                            ; ===========================================================================
0000549E                            
0000549E                            Obj80_Main:				; XREF: Obj80_Index
0000549E 5428 0024                  		addq.b	#2,$24(a0)
000054A2 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054AA 317C 8500 0002             		move.w	#$8500,2(a0)
000054B0 117C 0000 0001             		move.b	#0,1(a0)
000054B6 117C 003C 0019             		move.b	#$3C,$19(a0)
000054BC 317C 0120 0008             		move.w	#$120,8(a0)
000054C2 317C 00C0 000A             		move.w	#$C0,$A(a0)
000054C8 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000054CE                            
000054CE                            Obj80_Display:				; XREF: Obj80_Index
000054CE 4EF9 0000 0000             		jmp	DisplaySprite
000054D4                            ; ===========================================================================
000054D4                            Obj80_MiniSonicPos:
000054D4 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000054E6 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000054F2                            ; ===========================================================================
000054F2                            
000054F2                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000054F2 2248                       		movea.l	a0,a1
000054F4 45F9 0000 54D4             		lea	(Obj80_MiniSonicPos).l,a2
000054FA 7200                       		moveq	#0,d1
000054FC 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005500 5501                       		subq.b	#2,d1
00005502 6400                       		bcc.s	loc_4EC4
00005504 4EF9 0000 0000             		jmp	DeleteObject
0000550A                            ; ===========================================================================
0000550A                            
0000550A                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000550A 7601                       		moveq	#1,d3
0000550C 0C01 000E                  		cmpi.b	#$E,d1
00005510 6500                       		bcs.s	loc_4ED0
00005512 7600                       		moveq	#0,d3
00005514 720E                       		moveq	#$E,d1
00005516                            
00005516                            loc_4ED0:
00005516 1401                       		move.b	d1,d2
00005518 0202 0001                  		andi.b	#1,d2
0000551C                            
0000551C                            Obj80_MiniSonLoop:
0000551C 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005520 335A 0008                  		move.w	(a2)+,8(a1)
00005524 4A02                       		tst.b	d2
00005526 6700                       		beq.s	loc_4EEA
00005528 0469 000A 0008             		subi.w	#$A,8(a1)
0000552E                            
0000552E                            loc_4EEA:
0000552E 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005534 137C 0006 001A             		move.b	#6,$1A(a1)
0000553A 137C 0006 0024             		move.b	#6,$24(a1)
00005540 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005548 337C 8551 0002             		move.w	#$8551,2(a1)
0000554E 137C 0000 0001             		move.b	#0,1(a1)
00005554 43E9 0040                  		lea	$40(a1),a1
00005558 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000555C 43E9 FFC0                  		lea	-$40(a1),a1
00005560 1343 0028                  		move.b	d3,$28(a1)
00005564                            
00005564                            Obj80_ChkType:				; XREF: Obj80_Index
00005564 4A28 0028                  		tst.b	$28(a0)
00005568 6700                       		beq.s	loc_4F40
0000556A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005570 6500                       		bcs.s	loc_4F40
00005572 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005576 0200 0001                  		andi.b	#1,d0
0000557A 6600                       		bne.s	loc_4F40
0000557C 4A78 D010                  		tst.w	($FFFFD010).w
00005580 6600                       		bne.s	Obj80_Delete
00005582 4E75                       		rts	
00005584                            ; ===========================================================================
00005584                            
00005584                            loc_4F40:				; XREF: Obj80_ChkType
00005584 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005588 0200 000F                  		andi.b	#$F,d0
0000558C 6600                       		bne.s	Obj80_Display2
0000558E 0868 0000 001A             		bchg	#0,$1A(a0)
00005594                            
00005594                            Obj80_Display2:
00005594 4EF9 0000 0000             		jmp	DisplaySprite
0000559A                            ; ===========================================================================
0000559A                            
0000559A                            Obj80_Delete:				; XREF: Obj80_ChkType
0000559A 4EF9 0000 0000             		jmp	DeleteObject
000055A0                            ; ===========================================================================
000055A0                            
000055A0                            ; ---------------------------------------------------------------------------
000055A0                            ; Object 81 - Sonic on the continue screen
000055A0                            ; ---------------------------------------------------------------------------
000055A0                            
000055A0                            Obj81:					; XREF: Obj_Index
000055A0 7000                       		moveq	#0,d0
000055A2 1028 0024                  		move.b	$24(a0),d0
000055A6 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000055AA 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000055AE 4EF9 0000 0000             		jmp	DisplaySprite
000055B4                            ; ===========================================================================
000055B4 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000055B6 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000055B8 0000                       		dc.w Obj81_Animate-Obj81_Index
000055BA 0000                       		dc.w Obj81_Run-Obj81_Index
000055BC                            ; ===========================================================================
000055BC                            
000055BC                            Obj81_Main:				; XREF: Obj81_Index
000055BC 5428 0024                  		addq.b	#2,$24(a0)
000055C0 317C 00A0 0008             		move.w	#$A0,8(a0)
000055C6 317C 00C0 000C             		move.w	#$C0,$C(a0)
000055CC 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000055D4 317C 0780 0002             		move.w	#$780,2(a0)
000055DA 117C 0004 0001             		move.b	#4,1(a0)
000055E0 117C 0002 0018             		move.b	#2,$18(a0)
000055E6 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000055EC 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000055F2                            
000055F2                            Obj81_ChkLand:				; XREF: Obj81_Index
000055F2 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000055F8 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000055FA 5428 0024                  		addq.b	#2,$24(a0)
000055FE 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005602 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000560A 317C 8500 0002             		move.w	#$8500,2(a0)
00005610 117C 0000 001C             		move.b	#0,$1C(a0)
00005616 6000                       		bra.s	Obj81_Animate
00005618                            ; ===========================================================================
00005618                            
00005618                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005618 4EB9 0000 0000             		jsr	SpeedToPos
0000561E 4EB9 0000 0000             		jsr	Sonic_Animate
00005624 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000562A                            ; ===========================================================================
0000562A                            
0000562A                            Obj81_Animate:				; XREF: Obj81_Index
0000562A 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000562E 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005630 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005636 4EF9 0000 0000             		jmp	AnimateSprite
0000563C                            ; ===========================================================================
0000563C                            
0000563C                            Obj81_GetUp:				; XREF: Obj81_Animate
0000563C 5428 0024                  		addq.b	#2,$24(a0)
00005640 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005648 317C 0780 0002             		move.w	#$780,2(a0)
0000564E 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005654 4268 0014                  		clr.w	$14(a0)
00005658 5168 000C                  		subq.w	#8,$C(a0)
0000565C 103C 00E0                  		move.b	#$E0,d0
00005660 6100 BF38                  		bsr.w	PlaySound_Special ; fade out music
00005664                            
00005664                            Obj81_Run:				; XREF: Obj81_Index
00005664 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000566A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000566C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005672 6000                       		bra.s	Obj81_ShowRun
00005674                            ; ===========================================================================
00005674                            
00005674                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005674 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000567A                            
0000567A                            Obj81_ShowRun:				; XREF: Obj81_Run
0000567A 4EB9 0000 0000             		jsr	SpeedToPos
00005680 4EB9 0000 0000             		jsr	Sonic_Animate
00005686 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000568C                            ; ===========================================================================
0000568C                            Ani_obj81:
0000568C                            	include "_anim\obj81.asm"
0000568C                            ; ---------------------------------------------------------------------------
0000568C                            ; Animation script - Sonic on the continue screen
0000568C                            ; ---------------------------------------------------------------------------
0000568C 0000                       		dc.w byte_504A-Ani_obj81
0000568E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000569A 00                         		even
0000569A 00                         		even
0000569A                            
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            ; Sprite mappings - Continue screen
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            Map_obj80:
0000569A                            	include "_maps\obj80.asm"
0000569A                            ; ---------------------------------------------------------------------------
0000569A                            ; Sprite mappings - Continue screen
0000569A                            ; ---------------------------------------------------------------------------
0000569A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000569E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000056A2 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000056A6 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000056AA 0B                         byte_5066:	dc.b $B
000056AB F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000056B0 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000056B5 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000056BA F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000056BF F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000056C4 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000056C9 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000056CE F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000056D3 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000056D8 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000056DD 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000056E2 03                         byte_509E:	dc.b 3
000056E3 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000056E8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056ED F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000056F2 03                         byte_50AE:	dc.b 3
000056F3 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000056F8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000056FD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005702 03                         byte_50BE:	dc.b 3
00005703 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005708 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000570D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005712 02                         byte_50CE:	dc.b 2
00005713 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005718 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000571D 01                         byte_50D9:	dc.b 1
0000571E 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005723 01                         byte_50DF:	dc.b 1
00005724 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
0000572A 00                         		even
0000572A 00                         		even
0000572A                            
0000572A                            ; ===========================================================================
0000572A                            ; ---------------------------------------------------------------------------
0000572A                            ; Ending sequence in Green Hill	Zone
0000572A                            ; ---------------------------------------------------------------------------
0000572A                            
0000572A                            EndingSequence:				; XREF: GameModeArray
0000572A 103C 00E4                  		move.b	#$E4,d0
0000572E 6100 BE6A                  		bsr.w	PlaySound_Special ; stop music
00005732 6100 C8E8                  		bsr.w	Pal_FadeFrom
00005736 43F8 D000                  		lea	($FFFFD000).w,a1
0000573A 7000                       		moveq	#0,d0
0000573C 323C 07FF                  		move.w	#$7FF,d1
00005740                            
00005740                            End_ClrObjRam:
00005740 22C0                       		move.l	d0,(a1)+
00005742 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005746                            
00005746 43F8 F628                  		lea	($FFFFF628).w,a1
0000574A 7000                       		moveq	#0,d0
0000574C 323C 0015                  		move.w	#$15,d1
00005750                            
00005750                            End_ClrRam:
00005750 22C0                       		move.l	d0,(a1)+
00005752 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005756                            
00005756 43F8 F700                  		lea	($FFFFF700).w,a1
0000575A 7000                       		moveq	#0,d0
0000575C 323C 003F                  		move.w	#$3F,d1
00005760                            
00005760                            End_ClrRam2:
00005760 22C0                       		move.l	d0,(a1)+
00005762 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005766                            
00005766 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000576A 7000                       		moveq	#0,d0
0000576C 323C 0047                  		move.w	#$47,d1
00005770                            
00005770                            End_ClrRam3:
00005770 22C0                       		move.l	d0,(a1)+
00005772 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005776                            
00005776 46FC 2700                  		move	#$2700,sr
0000577A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000577E 0200 00BF                  		andi.b	#$BF,d0
00005782 33C0 00C0 0004             		move.w	d0,($C00004).l
00005788 6100 BD38                  		bsr.w	ClearScreen
0000578C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005792 3CBC 8B03                  		move.w	#$8B03,(a6)
00005796 3CBC 8230                  		move.w	#$8230,(a6)
0000579A 3CBC 8407                  		move.w	#$8407,(a6)
0000579E 3CBC 857C                  		move.w	#$857C,(a6)
000057A2 3CBC 9001                  		move.w	#$9001,(a6)
000057A6 3CBC 8004                  		move.w	#$8004,(a6)
000057AA 3CBC 8720                  		move.w	#$8720,(a6)
000057AE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000057B4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000057B8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000057BE 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000057C4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057CA 6700                       		beq.s	End_LoadData	; if yes, branch
000057CC 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000057D2                            
000057D2                            End_LoadData:
000057D2 701C                       		moveq	#$1C,d0
000057D4 6100 C114                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000057D8 4EB9 0000 0000             		jsr	Hud_Base
000057DE 6100 0000                  		bsr.w	LevelSizeLoad
000057E2 6100 0000                  		bsr.w	DeformBgLayer
000057E6 08F8 0002 F754             		bset	#2,($FFFFF754).w
000057EC 6100 0000                  		bsr.w	MainLoadBlockLoad
000057F0 6100 0000                  		bsr.w	LoadTilesFromStart
000057F4 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000057FC 46FC 2300                  		move	#$2300,sr
00005800 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005806 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000580A 6100 C28E                  		bsr.w	KosDec
0000580E 7003                       		moveq	#3,d0
00005810 6100 CAB4                  		bsr.w	PalLoad1	; load Sonic's pallet
00005814 303C 008B                  		move.w	#$8B,d0
00005818 6100 BD7A                  		bsr.w	PlaySound	; play ending sequence music
0000581C 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005822 6700                       		beq.s	End_LoadSonic	; if not, branch
00005824 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000582A                            
0000582A                            End_LoadSonic:
0000582A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005830 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005836 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000583C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005842 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005848 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000584E 4EB9 0000 0000             		jsr	ObjPosLoad
00005854 4EB9 0000 0000             		jsr	ObjectsLoad
0000585A 4EB9 0000 0000             		jsr	BuildSprites
00005860 7000                       		moveq	#0,d0
00005862 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005866 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000586A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000586E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005872 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005876 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000587A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000587E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005882 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005886 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000588A 6100 EEE0                  		bsr.w	OscillateNumInit
0000588E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005894 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000589A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
000058A0 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000058A6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058AC 6100 D454                  		bsr.w	DelayProgram
000058B0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000058B4 0000 0040                  		ori.b	#$40,d0
000058B8 33C0 00C0 0004             		move.w	d0,($C00004).l
000058BE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000058C4 6100 C6AC                  		bsr.w	Pal_FadeTo
000058C8                            
000058C8                            ; ---------------------------------------------------------------------------
000058C8                            ; Main ending sequence loop
000058C8                            ; ---------------------------------------------------------------------------
000058C8                            
000058C8                            End_MainLoop:
000058C8 6100 BCDC                  		bsr.w	PauseGame
000058CC 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000058D2 6100 D42E                  		bsr.w	DelayProgram
000058D6 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000058DA 6100 0000                  		bsr.w	End_MoveSonic
000058DE 4EB9 0000 0000             		jsr	ObjectsLoad
000058E4 6100 0000                  		bsr.w	DeformBgLayer
000058E8 4EB9 0000 0000             		jsr	BuildSprites
000058EE 4EB9 0000 0000             		jsr	ObjPosLoad
000058F4 6100 C244                  		bsr.w	PalCycle_Load
000058F8 6100 EEC8                  		bsr.w	OscillateNumDo
000058FC 6100 EF54                  		bsr.w	ChangeRingFrame
00005900 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005906 6700                       		beq.s	loc_52DA	; if yes, branch
00005908 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000590E 103C 0091                  		move.b	#$91,d0
00005912 6100 BC86                  		bsr.w	PlaySound_Special ; play credits music
00005916 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000591C 4E75                       		rts	
0000591E                            ; ===========================================================================
0000591E                            
0000591E                            loc_52DA:
0000591E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005922 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005926                            
00005926 4278 FE02                  		clr.w	($FFFFFE02).w
0000592A 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005930 4278 F794                  		clr.w	($FFFFF794).w
00005934                            
00005934                            End_AllEmlds:				; XREF: loc_5334
00005934 6100 BC70                  		bsr.w	PauseGame
00005938 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000593E 6100 D3C2                  		bsr.w	DelayProgram
00005942 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005946 6100 0000                  		bsr.w	End_MoveSonic
0000594A 4EB9 0000 0000             		jsr	ObjectsLoad
00005950 6100 0000                  		bsr.w	DeformBgLayer
00005954 4EB9 0000 0000             		jsr	BuildSprites
0000595A 4EB9 0000 0000             		jsr	ObjPosLoad
00005960 6100 EE60                  		bsr.w	OscillateNumDo
00005964 6100 EEEC                  		bsr.w	ChangeRingFrame
00005968 5378 F794                  		subq.w	#1,($FFFFF794).w
0000596C 6A00                       		bpl.s	loc_5334
0000596E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005974 6100 C7F0                  		bsr.w	Pal_ToWhite
00005978                            
00005978                            loc_5334:
00005978 4A78 FE02                  		tst.w	($FFFFFE02).w
0000597C 6700 FFB6                  		beq.w	End_AllEmlds
00005980 4278 FE02                  		clr.w	($FFFFFE02).w
00005984 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000598A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005990 4DF9 00C0 0000             		lea	($C00000).l,a6
00005996 47F8 F700                  		lea	($FFFFF700).w,a3
0000599A 49F8 A400                  		lea	($FFFFA400).w,a4
0000599E 343C 4000                  		move.w	#$4000,d2
000059A2 6100 0000                  		bsr.w	LoadTilesFromStart2
000059A6 7013                       		moveq	#$13,d0
000059A8 6100 C91C                  		bsr.w	PalLoad1	; load ending pallet
000059AC 6100 C6EC                  		bsr.w	Pal_MakeWhite
000059B0 6000 FF16                  		bra.w	End_MainLoop
000059B4                            
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            ; Subroutine controlling Sonic on the ending sequence
000059B4                            ; ---------------------------------------------------------------------------
000059B4                            
000059B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000059B4                            
000059B4                            
000059B4                            End_MoveSonic:				; XREF: End_MainLoop
000059B4 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000059B8 6600                       		bne.s	End_MoveSonic2
000059BA 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000059C0 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000059C2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059C6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000059CC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000059D2 4E75                       		rts	
000059D4                            ; ===========================================================================
000059D4                            
000059D4                            End_MoveSonic2:				; XREF: End_MoveSonic
000059D4 5500                       		subq.b	#2,d0
000059D6 6600                       		bne.s	End_MoveSonic3
000059D8 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000059DE 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000059E0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000059E4 7000                       		moveq	#0,d0
000059E6 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000059EA 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000059EE 31C0 D014                  		move.w	d0,($FFFFD014).w
000059F2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000059F8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000059FE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005A04 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005A0A 4E75                       		rts	
00005A0C                            ; ===========================================================================
00005A0C                            
00005A0C                            End_MoveSonic3:				; XREF: End_MoveSonic
00005A0C 5500                       		subq.b	#2,d0
00005A0E 6600                       		bne.s	End_MoveSonExit
00005A10 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005A14 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005A1A 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005A20 4278 D024                  		clr.w	($FFFFD024).w
00005A24                            
00005A24                            End_MoveSonExit:
00005A24 4E75                       		rts	
00005A26                            ; End of function End_MoveSonic
00005A26                            
00005A26                            ; ===========================================================================
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            ; Object 87 - Sonic on ending sequence
00005A26                            ; ---------------------------------------------------------------------------
00005A26                            
00005A26                            Obj87:					; XREF: Obj_Index
00005A26 7000                       		moveq	#0,d0
00005A28 1028 0025                  		move.b	$25(a0),d0
00005A2C 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005A30 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005A34 4EF9 0000 0000             		jmp	DisplaySprite
00005A3A                            ; ===========================================================================
00005A3A 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005A3E 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005A42 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005A46 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005A4A 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005A4E                            ; ===========================================================================
00005A4E                            
00005A4E                            Obj87_Main:				; XREF: Obj87_Index
00005A4E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A54 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005A56 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005A5C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005A62 4E75                       		rts	
00005A64                            ; ===========================================================================
00005A64                            
00005A64                            Obj87_Main2:				; XREF: Obj87_Main
00005A64 5428 0025                  		addq.b	#2,$25(a0)
00005A68 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A70 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A76 117C 0004 0001             		move.b	#4,1(a0)
00005A7C 4228 0022                  		clr.b	$22(a0)
00005A80 117C 0002 0018             		move.b	#2,$18(a0)
00005A86 117C 0000 001A             		move.b	#0,$1A(a0)
00005A8C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005A92                            
00005A92                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005A92 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A96 6600                       		bne.s	Obj87_Wait
00005A98 5428 0025                  		addq.b	#2,$25(a0)
00005A9C 317C 0001 001C             		move.w	#1,$1C(a0)
00005AA2 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005AA8                            
00005AA8                            Obj87_Wait:
00005AA8 4E75                       		rts	
00005AAA                            ; ===========================================================================
00005AAA                            
00005AAA                            Obj87_LookUp:				; XREF: Obj87_Index
00005AAA 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005AB2 6600                       		bne.s	locret_5480
00005AB4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005ABA 317C 005A 0030             		move.w	#$5A,$30(a0)
00005AC0 5428 0025                  		addq.b	#2,$25(a0)
00005AC4                            
00005AC4                            locret_5480:
00005AC4 4E75                       		rts	
00005AC6                            ; ===========================================================================
00005AC6                            
00005AC6                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005AC6 5368 0030                  		subq.w	#1,$30(a0)
00005ACA 6600                       		bne.s	Obj87_Wait2
00005ACC 43F8 D400                  		lea	($FFFFD400).w,a1
00005AD0 323C 00FF                  		move.w	#$FF,d1
00005AD4                            
00005AD4                            Obj87_ClrLoop:
00005AD4 4299                       		clr.l	(a1)+
00005AD6 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005ADA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005AE0 5428 0025                  		addq.b	#2,$25(a0)
00005AE4 117C 0001 001C             		move.b	#1,$1C(a0)
00005AEA 317C 003C 0030             		move.w	#$3C,$30(a0)
00005AF0                            
00005AF0                            Obj87_Wait2:
00005AF0 4E75                       		rts	
00005AF2                            ; ===========================================================================
00005AF2                            
00005AF2                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005AF2 5368 0030                  		subq.w	#1,$30(a0)
00005AF6 6600                       		bne.s	Obj87_Wait3
00005AF8 5428 0025                  		addq.b	#2,$25(a0)
00005AFC 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005B02 117C 0002 001C             		move.b	#2,$1C(a0)
00005B08 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B0E                            
00005B0E                            Obj87_Wait3:
00005B0E 4E75                       		rts	
00005B10                            ; ===========================================================================
00005B10                            
00005B10                            Obj87_Animate:				; XREF: Obj87_Index
00005B10 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005B16 4EF9 0000 0000             		jmp	AnimateSprite
00005B1C                            ; ===========================================================================
00005B1C                            
00005B1C                            Obj87_Leap:				; XREF: Obj87_Index
00005B1C 5368 0030                  		subq.w	#1,$30(a0)
00005B20 6600                       		bne.s	Obj87_Wait4
00005B22 5428 0025                  		addq.b	#2,$25(a0)
00005B26 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005B2E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005B34 117C 0004 0001             		move.b	#4,1(a0)
00005B3A 4228 0022                  		clr.b	$22(a0)
00005B3E 117C 0002 0018             		move.b	#2,$18(a0)
00005B44 117C 0005 001A             		move.b	#5,$1A(a0)
00005B4A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005B50 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005B56 60B8                       		bra.s	Obj87_Animate
00005B58                            ; ===========================================================================
00005B58                            
00005B58                            Obj87_Wait4:				; XREF: Obj87_Leap
00005B58 4E75                       		rts	
00005B5A                            ; ===========================================================================
00005B5A                            Ani_obj87:
00005B5A                            	include "_anim\obj87.asm"
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A                            ; Animation script - Sonic on the ending sequence
00005B5A                            ; ---------------------------------------------------------------------------
00005B5A 0000                       		dc.w byte_551C-Ani_obj87
00005B5C 0000                       		dc.w byte_552A-Ani_obj87
00005B5E 0000                       		dc.w byte_5534-Ani_obj87
00005B60 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005B6E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005B78 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005B80                            		even
00005B80                            		even
00005B80                            
00005B80                            ; ===========================================================================
00005B80                            ; ---------------------------------------------------------------------------
00005B80                            ; Object 88 - chaos emeralds on	the ending sequence
00005B80                            ; ---------------------------------------------------------------------------
00005B80                            
00005B80                            Obj88:					; XREF: Obj_Index
00005B80 7000                       		moveq	#0,d0
00005B82 1028 0024                  		move.b	$24(a0),d0
00005B86 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005B8A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005B8E 4EF9 0000 0000             		jmp	DisplaySprite
00005B94                            ; ===========================================================================
00005B94 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005B96 0000                       		dc.w Obj88_Move-Obj88_Index
00005B98                            ; ===========================================================================
00005B98                            
00005B98                            Obj88_Main:				; XREF: Obj88_Index
00005B98 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005B9E 6700                       		beq.s	Obj88_Main2
00005BA0 588F                       		addq.l	#4,sp
00005BA2 4E75                       		rts	
00005BA4                            ; ===========================================================================
00005BA4                            
00005BA4                            Obj88_Main2:				; XREF: Obj88_Main
00005BA4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005BAA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005BB0 2248                       		movea.l	a0,a1
00005BB2 7600                       		moveq	#0,d3
00005BB4 7401                       		moveq	#1,d2
00005BB6 7205                       		moveq	#5,d1
00005BB8                            
00005BB8                            Obj88_MainLoop:
00005BB8 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005BBC 5429 0024                  		addq.b	#2,$24(a1)
00005BC0 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005BC8 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005BCE 137C 0004 0001             		move.b	#4,1(a1)
00005BD4 137C 0001 0018             		move.b	#1,$18(a1)
00005BDA 3368 0008 0038             		move.w	8(a0),$38(a1)
00005BE0 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005BE6 1342 001C                  		move.b	d2,$1C(a1)
00005BEA 1342 001A                  		move.b	d2,$1A(a1)
00005BEE 5202                       		addq.b	#1,d2
00005BF0 1343 0026                  		move.b	d3,$26(a1)
00005BF4 0603 002A                  		addi.b	#$2A,d3
00005BF8 43E9 0040                  		lea	$40(a1),a1
00005BFC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005C00                            
00005C00                            Obj88_Move:				; XREF: Obj88_Index
00005C00 3028 003E                  		move.w	$3E(a0),d0
00005C04 D168 0026                  		add.w	d0,$26(a0)
00005C08 1028 0026                  		move.b	$26(a0),d0
00005C0C 4EB9 0000 2D34             		jsr	(CalcSine).l
00005C12 7800                       		moveq	#0,d4
00005C14 1828 003C                  		move.b	$3C(a0),d4
00005C18 C3C4                       		muls.w	d4,d1
00005C1A E081                       		asr.l	#8,d1
00005C1C C1C4                       		muls.w	d4,d0
00005C1E E080                       		asr.l	#8,d0
00005C20 D268 0038                  		add.w	$38(a0),d1
00005C24 D068 003A                  		add.w	$3A(a0),d0
00005C28 3141 0008                  		move.w	d1,8(a0)
00005C2C 3140 000C                  		move.w	d0,$C(a0)
00005C30 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005C36 6700                       		beq.s	loc_55FA
00005C38 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005C3E                            
00005C3E                            loc_55FA:
00005C3E 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005C44 6700                       		beq.s	loc_5608
00005C46 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005C4C                            
00005C4C                            loc_5608:
00005C4C 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005C52 6700                       		beq.s	locret_5614
00005C54 5368 003A                  		subq.w	#1,$3A(a0)
00005C58                            
00005C58                            locret_5614:
00005C58 4E75                       		rts	
00005C5A                            ; ===========================================================================
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            
00005C5A                            Obj89:					; XREF: Obj_Index
00005C5A 7000                       		moveq	#0,d0
00005C5C 1028 0024                  		move.b	$24(a0),d0
00005C60 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005C64 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005C68                            ; ===========================================================================
00005C68 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005C6A 0000                       		dc.w Obj89_Move-Obj89_Index
00005C6C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005C6E                            ; ===========================================================================
00005C6E                            
00005C6E                            Obj89_Main:				; XREF: Obj89_Index
00005C6E 5428 0024                  		addq.b	#2,$24(a0)
00005C72 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005C78 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005C7E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005C86 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005C8C 117C 0000 0001             		move.b	#0,1(a0)
00005C92 117C 0000 0018             		move.b	#0,$18(a0)
00005C98                            
00005C98                            Obj89_Move:				; XREF: Obj89_Index
00005C98 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005C9E 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005CA0 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005CA6 4EB9 0000 0000             		jsr	DisplaySprite
00005CAC                            ; ===========================================================================
00005CAC                            
00005CAC                            Obj89_Delay:				; XREF: Obj89_Move
00005CAC 5428 0024                  		addq.b	#2,$24(a0)
00005CB0 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005CB6                            
00005CB6                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005CB6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005CBA 6A00                       		bpl.s	Obj89_Display
00005CBC 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005CC2                            
00005CC2                            Obj89_Display:
00005CC2 4EB9 0000 0000             		jsr	DisplaySprite
00005CC8                            ; ===========================================================================
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Sprite mappings - Sonic on the ending	sequence
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            Map_obj87:
00005CC8                            	include "_maps\obj87.asm"
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8                            ; Sprite mappings - Sonic on the ending	sequence
00005CC8                            ; ---------------------------------------------------------------------------
00005CC8 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005CCC 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005CD0 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005CD4 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005CD8 02                         byte_5690:	dc.b 2
00005CD9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005CDE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CE3 03                         byte_569B:	dc.b 3
00005CE4 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005CE9 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005CEE 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005CF3 02                         byte_56AB:	dc.b 2
00005CF4 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005CF9 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005CFE 02                         byte_56B6:	dc.b 2
00005CFF EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005D04 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005D09 02                         byte_56C1:	dc.b 2
00005D0A EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005D0F FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005D14 03                         byte_56CC:	dc.b 3
00005D15 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005D1A EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005D1F 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005D24 07                         byte_56DC:	dc.b 7
00005D25 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005D2A BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005D2F BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005D34 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005D39 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005D3E E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005D43 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005D48 18                         byte_5700:	dc.b $18
00005D49 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005D4E 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005D53 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005D58 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005D5D A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005D62 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005D67 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005D6C A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005D71 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005D76 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005D7B A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005D80 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005D85 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005D8A B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005D8F B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005D94 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005D99 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005D9E D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005DA3 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005DA8 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005DAD D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005DB2 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005DB7 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005DBC F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005DC2 00                         		even
00005DC2 00                         		even
00005DC2                            
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            Map_obj88:
00005DC2                            	include "_maps\obj88.asm"
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2                            ; Sprite mappings - chaos emeralds on the ending sequence
00005DC2                            ; ---------------------------------------------------------------------------
00005DC2 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005DC6 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005DCA 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005DCE 0000                       		dc.w byte_57AC-Map_obj88
00005DD0 01                         byte_5788:	dc.b 1
00005DD1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005DD6 01                         byte_578E:	dc.b 1
00005DD7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005DDC 01                         byte_5794:	dc.b 1
00005DDD F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005DE2 01                         byte_579A:	dc.b 1
00005DE3 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005DE8 01                         byte_57A0:	dc.b 1
00005DE9 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005DEE 01                         byte_57A6:	dc.b 1
00005DEF F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005DF4 01                         byte_57AC:	dc.b 1
00005DF5 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005DFA                            		even
00005DFA                            		even
00005DFA                            
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            Map_obj89:
00005DFA                            	include "_maps\obj89.asm"
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005DFA                            ; ---------------------------------------------------------------------------
00005DFA 0000                       		dc.w byte_57B4-Map_obj89
00005DFC 03                         byte_57B4:	dc.b 3
00005DFD F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005E02 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005E07 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005E0C                            		even
00005E0C                            		even
00005E0C                            
00005E0C                            ; ===========================================================================
00005E0C                            ; ---------------------------------------------------------------------------
00005E0C                            ; Credits ending sequence
00005E0C                            ; ---------------------------------------------------------------------------
00005E0C                            
00005E0C                            Credits:				; XREF: GameModeArray
00005E0C 6100 B9CE                  		bsr.w	ClearPLC
00005E10 6100 C20A                  		bsr.w	Pal_FadeFrom
00005E14 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E1A 3CBC 8004                  		move.w	#$8004,(a6)
00005E1E 3CBC 8230                  		move.w	#$8230,(a6)
00005E22 3CBC 8407                  		move.w	#$8407,(a6)
00005E26 3CBC 9001                  		move.w	#$9001,(a6)
00005E2A 3CBC 9200                  		move.w	#$9200,(a6)
00005E2E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E32 3CBC 8720                  		move.w	#$8720,(a6)
00005E36 4238 F64E                  		clr.b	($FFFFF64E).w
00005E3A 6100 B686                  		bsr.w	ClearScreen
00005E3E 43F8 D000                  		lea	($FFFFD000).w,a1
00005E42 7000                       		moveq	#0,d0
00005E44 323C 07FF                  		move.w	#$7FF,d1
00005E48                            
00005E48                            Cred_ClrObjRam:
00005E48 22C0                       		move.l	d0,(a1)+
00005E4A 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005E4E                            
00005E4E 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005E58 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005E5E 6100 B7DE                  		bsr.w	NemDec
00005E62 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E66 7000                       		moveq	#0,d0
00005E68 323C 001F                  		move.w	#$1F,d1
00005E6C                            
00005E6C                            Cred_ClrPallet:
00005E6C 22C0                       		move.l	d0,(a1)+
00005E6E 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005E72                            
00005E72 7003                       		moveq	#3,d0
00005E74 6100 C450                  		bsr.w	PalLoad1	; load Sonic's pallet
00005E78 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005E7E 4EB9 0000 0000             		jsr	ObjectsLoad
00005E84 4EB9 0000 0000             		jsr	BuildSprites
00005E8A 6100 0000                  		bsr.w	EndingDemoLoad
00005E8E 7000                       		moveq	#0,d0
00005E90 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005E94 E948                       		lsl.w	#4,d0
00005E96 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005E9C 45F2 0000                  		lea	(a2,d0.w),a2
00005EA0 7000                       		moveq	#0,d0
00005EA2 1012                       		move.b	(a2),d0
00005EA4 6700                       		beq.s	loc_5862
00005EA6 6100 B8D6                  		bsr.w	LoadPLC		; load level patterns
00005EAA                            
00005EAA                            loc_5862:
00005EAA 7001                       		moveq	#1,d0
00005EAC 6100 B8D0                  		bsr.w	LoadPLC		; load standard	level patterns
00005EB0 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005EB6 6100 C0BA                  		bsr.w	Pal_FadeTo
00005EBA                            
00005EBA                            Cred_WaitLoop:
00005EBA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EC0 6100 CE40                  		bsr.w	DelayProgram
00005EC4 6100 B924                  		bsr.w	RunPLC_RAM
00005EC8 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005ECC 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005ECE 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005ED2 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005ED4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005EDA 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005EDE 4E75                       		rts	
00005EE0                            
00005EE0                            ; ---------------------------------------------------------------------------
00005EE0                            ; Ending sequence demo loading subroutine
00005EE0                            ; ---------------------------------------------------------------------------
00005EE0                            
00005EE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EE0                            
00005EE0                            
00005EE0                            EndingDemoLoad:				; XREF: Credits
00005EE0 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005EE4 0240 000F                  		andi.w	#$F,d0
00005EE8 D040                       		add.w	d0,d0
00005EEA 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005EEE 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005EF2 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005EF6 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005EFC 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005EFE 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005F04 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005F0A 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005F10 7000                       		moveq	#0,d0
00005F12 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005F16 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005F1A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005F1E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005F22 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005F28 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005F2A 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005F30 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005F34 303C 0008                  		move.w	#8,d0
00005F38                            
00005F38                            EndDemo_LampLoad:
00005F38 24D9                       		move.l	(a1)+,(a2)+
00005F3A 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005F3E                            
00005F3E                            EndDemo_Exit:
00005F3E 4E75                       		rts	
00005F40                            ; End of function EndingDemoLoad
00005F40                            
00005F40                            ; ===========================================================================
00005F40                            ; ---------------------------------------------------------------------------
00005F40                            ; Levels used in the end sequence demos
00005F40                            ; ---------------------------------------------------------------------------
00005F40                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005F50                            
00005F50                            ; ---------------------------------------------------------------------------
00005F50                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005F50                            ; ---------------------------------------------------------------------------
00005F50                            EndDemo_LampVar:
00005F50 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005F52 0A00 062C 000D             		dc.w $A00, $62C, $D
00005F58 0000 0000                  		dc.l 0
00005F5C 0000                       		dc.b 0,	0
00005F5E 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005F72 0101                       		dc.b 1,	1
00005F74                            ; ===========================================================================
00005F74                            ; ---------------------------------------------------------------------------
00005F74                            ; "TRY AGAIN" and "END"	screens
00005F74                            ; ---------------------------------------------------------------------------
00005F74                            
00005F74                            TryAgainEnd:				; XREF: Credits
00005F74 6100 B866                  		bsr.w	ClearPLC
00005F78 6100 C0A2                  		bsr.w	Pal_FadeFrom
00005F7C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005F82 3CBC 8004                  		move.w	#$8004,(a6)
00005F86 3CBC 8230                  		move.w	#$8230,(a6)
00005F8A 3CBC 8407                  		move.w	#$8407,(a6)
00005F8E 3CBC 9001                  		move.w	#$9001,(a6)
00005F92 3CBC 9200                  		move.w	#$9200,(a6)
00005F96 3CBC 8B03                  		move.w	#$8B03,(a6)
00005F9A 3CBC 8720                  		move.w	#$8720,(a6)
00005F9E 4238 F64E                  		clr.b	($FFFFF64E).w
00005FA2 6100 B51E                  		bsr.w	ClearScreen
00005FA6 43F8 D000                  		lea	($FFFFD000).w,a1
00005FAA 7000                       		moveq	#0,d0
00005FAC 323C 07FF                  		move.w	#$7FF,d1
00005FB0                            
00005FB0                            TryAg_ClrObjRam:
00005FB0 22C0                       		move.l	d0,(a1)+
00005FB2 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005FB6                            
00005FB6 701D                       		moveq	#$1D,d0
00005FB8 6100 B930                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005FBC 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005FC0 7000                       		moveq	#0,d0
00005FC2 323C 001F                  		move.w	#$1F,d1
00005FC6                            
00005FC6                            TryAg_ClrPallet:
00005FC6 22C0                       		move.l	d0,(a1)+
00005FC8 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005FCC                            
00005FCC 7013                       		moveq	#$13,d0
00005FCE 6100 C2F6                  		bsr.w	PalLoad1	; load ending pallet
00005FD2 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005FD6 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005FDC 4EB9 0000 0000             		jsr	ObjectsLoad
00005FE2 4EB9 0000 0000             		jsr	BuildSprites
00005FE8 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005FEE 6100 BF82                  		bsr.w	Pal_FadeTo
00005FF2                            
00005FF2                            ; ---------------------------------------------------------------------------
00005FF2                            ; "TRY AGAIN" and "END"	screen main loop
00005FF2                            ; ---------------------------------------------------------------------------
00005FF2                            TryAg_MainLoop:
00005FF2 6100 B5B2                  		bsr.w	PauseGame
00005FF6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005FFC 6100 CD04                  		bsr.w	DelayProgram
00006000 4EB9 0000 0000             		jsr	ObjectsLoad
00006006 4EB9 0000 0000             		jsr	BuildSprites
0000600C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00006012 6600                       		bne.s	TryAg_Exit	; if yes, branch
00006014 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006018 6700                       		beq.s	TryAg_Exit	; if yes, branch
0000601A 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00006020 67D0                       		beq.s	TryAg_MainLoop
00006022                            
00006022                            TryAg_Exit:
00006022 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006028 4E75                       		rts	
0000602A                            
0000602A                            ; ===========================================================================
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
0000602A                            ; ---------------------------------------------------------------------------
0000602A                            
0000602A                            Obj8B:					; XREF: Obj_Index
0000602A 7000                       		moveq	#0,d0
0000602C 1028 0024                  		move.b	$24(a0),d0
00006030 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00006034 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006038 4EF9 0000 0000             		jmp	DisplaySprite
0000603E                            ; ===========================================================================
0000603E 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00006040 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00006042 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00006044 0000                       		dc.w loc_5A8E-Obj8B_Index
00006046                            ; ===========================================================================
00006046                            
00006046                            Obj8B_Main:				; XREF: Obj8B_Index
00006046 5428 0024                  		addq.b	#2,$24(a0)
0000604A 317C 0120 0008             		move.w	#$120,8(a0)
00006050 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006056 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
0000605E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006064 117C 0000 0001             		move.b	#0,1(a0)
0000606A 117C 0002 0018             		move.b	#2,$18(a0)
00006070 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006076 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000607C 6700                       		beq.s	Obj8B_Animate	; if yes, branch
0000607E 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00006084 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
0000608A 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00006090 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006096                            
00006096                            Obj8B_Animate:				; XREF: Obj8B_Index
00006096 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
0000609C 4EF9 0000 0000             		jmp	AnimateSprite
000060A2                            ; ===========================================================================
000060A2                            
000060A2                            Obj8B_Juggle:				; XREF: Obj8B_Index
000060A2 5428 0024                  		addq.b	#2,$24(a0)
000060A6 7002                       		moveq	#2,d0
000060A8 0828 0000 001C             		btst	#0,$1C(a0)
000060AE 6700                       		beq.s	loc_5A6A
000060B0 4440                       		neg.w	d0
000060B2                            
000060B2                            loc_5A6A:
000060B2 43F8 D800                  		lea	($FFFFD800).w,a1
000060B6 7205                       		moveq	#5,d1
000060B8                            
000060B8                            loc_5A70:
000060B8 1340 003E                  		move.b	d0,$3E(a1)
000060BC 3400                       		move.w	d0,d2
000060BE E742                       		asl.w	#3,d2
000060C0 D529 0026                  		add.b	d2,$26(a1)
000060C4 43E9 0040                  		lea	$40(a1),a1
000060C8 51C9 FFEE                  		dbf	d1,loc_5A70
000060CC 5228 001A                  		addq.b	#1,$1A(a0)
000060D0 317C 0070 0030             		move.w	#112,$30(a0)
000060D6                            
000060D6                            loc_5A8E:				; XREF: Obj8B_Index
000060D6 5368 0030                  		subq.w	#1,$30(a0)
000060DA 6A00                       		bpl.s	locret_5AA0
000060DC 0868 0000 001C             		bchg	#0,$1C(a0)
000060E2 117C 0002 0024             		move.b	#2,$24(a0)
000060E8                            
000060E8                            locret_5AA0:
000060E8 4E75                       		rts	
000060EA                            ; ===========================================================================
000060EA                            Ani_obj8B:
000060EA                            	include "_anim\obj8B.asm"
000060EA                            ; ---------------------------------------------------------------------------
000060EA                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000060EA                            ; ---------------------------------------------------------------------------
000060EA 0000                       		dc.w byte_5AA8-Ani_obj8B
000060EC 0000                       		dc.w byte_5AAC-Ani_obj8B
000060EE 0000                       		dc.w byte_5AB0-Ani_obj8B
000060F0 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000060F4 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000060F8 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
0000610A                            		even
0000610A                            		even
0000610A                            
0000610A                            ; ===========================================================================
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
0000610A                            ; ---------------------------------------------------------------------------
0000610A                            
0000610A                            Obj8C:					; XREF: Obj_Index
0000610A 7000                       		moveq	#0,d0
0000610C 1028 0024                  		move.b	$24(a0),d0
00006110 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00006114 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006118 4EF9 0000 0000             		jmp	DisplaySprite
0000611E                            ; ===========================================================================
0000611E 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006120 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006122                            ; ===========================================================================
00006122                            
00006122                            Obj8C_Main:				; XREF: Obj8C_Index
00006122 2248                       		movea.l	a0,a1
00006124 7400                       		moveq	#0,d2
00006126 7600                       		moveq	#0,d3
00006128 7205                       		moveq	#5,d1
0000612A 9238 FE57                  		sub.b	($FFFFFE57).w,d1
0000612E                            
0000612E                            Obj8C_MakeEms:				; XREF: loc_5B42
0000612E 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006132 5429 0024                  		addq.b	#2,$24(a1)
00006136 237C 0000 5DC2 0004        		move.l	#Map_obj88,4(a1)
0000613E 337C 03C5 0002             		move.w	#$3C5,2(a1)
00006144 137C 0000 0001             		move.b	#0,1(a1)
0000614A 137C 0001 0018             		move.b	#1,$18(a1)
00006150 337C 0104 0008             		move.w	#$104,8(a1)
00006156 337C 0120 0038             		move.w	#$120,$38(a1)
0000615C 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006162 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006168 137C 001C 003C             		move.b	#$1C,$3C(a1)
0000616E 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006172                            
00006172                            Obj8C_ChkEms:
00006172 7000                       		moveq	#0,d0
00006174 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006178 5340                       		subq.w	#1,d0
0000617A 6500                       		bcs.s	loc_5B42
0000617C                            
0000617C                            Obj8C_ChkEmLoop:
0000617C B433 0000                  		cmp.b	(a3,d0.w),d2
00006180 6600                       		bne.s	loc_5B3E
00006182 5202                       		addq.b	#1,d2
00006184 60EC                       		bra.s	Obj8C_ChkEms
00006186                            ; ===========================================================================
00006186                            
00006186                            loc_5B3E:
00006186 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
0000618A                            
0000618A                            loc_5B42:
0000618A 1342 001A                  		move.b	d2,$1A(a1)
0000618E 5229 001A                  		addq.b	#1,$1A(a1)
00006192 5202                       		addq.b	#1,d2
00006194 137C 0080 0026             		move.b	#$80,$26(a1)
0000619A 1343 001E                  		move.b	d3,$1E(a1)
0000619E 1343 001F                  		move.b	d3,$1F(a1)
000061A2 0643 000A                  		addi.w	#$A,d3
000061A6 43E9 0040                  		lea	$40(a1),a1
000061AA 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
000061AE                            
000061AE                            Obj8C_Move:				; XREF: Obj8C_Index
000061AE 4A68 003E                  		tst.w	$3E(a0)
000061B2 6700                       		beq.s	locret_5BBA
000061B4 4A28 001E                  		tst.b	$1E(a0)
000061B8 6700                       		beq.s	loc_5B78
000061BA 5328 001E                  		subq.b	#1,$1E(a0)
000061BE 6600                       		bne.s	loc_5B80
000061C0                            
000061C0                            loc_5B78:
000061C0 3028 003E                  		move.w	$3E(a0),d0
000061C4 D168 0026                  		add.w	d0,$26(a0)
000061C8                            
000061C8                            loc_5B80:
000061C8 1028 0026                  		move.b	$26(a0),d0
000061CC 6700                       		beq.s	loc_5B8C
000061CE 0C00 0080                  		cmpi.b	#$80,d0
000061D2 6600                       		bne.s	loc_5B96
000061D4                            
000061D4                            loc_5B8C:
000061D4 4268 003E                  		clr.w	$3E(a0)
000061D8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000061DE                            
000061DE                            loc_5B96:
000061DE 4EB9 0000 2D34             		jsr	(CalcSine).l
000061E4 7800                       		moveq	#0,d4
000061E6 1828 003C                  		move.b	$3C(a0),d4
000061EA C3C4                       		muls.w	d4,d1
000061EC E081                       		asr.l	#8,d1
000061EE C1C4                       		muls.w	d4,d0
000061F0 E080                       		asr.l	#8,d0
000061F2 D268 0038                  		add.w	$38(a0),d1
000061F6 D068 003A                  		add.w	$3A(a0),d0
000061FA 3141 0008                  		move.w	d1,8(a0)
000061FE 3140 000A                  		move.w	d0,$A(a0)
00006202                            
00006202                            locret_5BBA:
00006202 4E75                       		rts	
00006204                            ; ===========================================================================
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00006204                            ; ---------------------------------------------------------------------------
00006204                            Map_obj8B:
00006204                            	include "_maps\obj8B.asm"
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00006204                            ; ---------------------------------------------------------------------------
00006204 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00006208 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
0000620C 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00006210 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00006214 08                         byte_5BCC:	dc.b 8
00006215 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
0000621A F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
0000621F E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00006224 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006229 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000622E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006233 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006238 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000623D 08                         byte_5BF5:	dc.b 8
0000623E E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006243 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006248 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
0000624D F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006252 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006257 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
0000625C 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006261 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006266 08                         byte_5C1E:	dc.b 8
00006267 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
0000626C F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006271 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006276 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
0000627B 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006280 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006285 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000628A 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000628F 08                         byte_5C47:	dc.b 8
00006290 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006295 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000629A E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
0000629F F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
000062A4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000062A9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000062AE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000062B3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000062B8 0C                         byte_5C70:	dc.b $C
000062B9 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000062BE F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000062C3 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000062C8 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000062CD ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000062D2 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000062D7 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000062DC 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000062E1 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000062E6 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000062EB 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000062F0 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000062F5 0A                         byte_5CAD:	dc.b $A
000062F6 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000062FB DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006300 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006305 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000630A DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000630F F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006314 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006319 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000631E 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006323 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006328 0A                         byte_5CE0:	dc.b $A
00006329 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000632E E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006333 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006338 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000633D E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006342 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006347 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000634C 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006351 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006356 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
0000635B 0C                         byte_5D13:	dc.b $C
0000635C F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006361 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006366 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
0000636B 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006370 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006375 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
0000637A 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000637F 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006384 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006389 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000638E 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006393 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006398                            		even
00006398                            		even
00006398                            
00006398                            ; ---------------------------------------------------------------------------
00006398                            ; Ending sequence demos
00006398                            ; ---------------------------------------------------------------------------
00006398                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000063C6                            		even
000063C6                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006406                            		even
00006406                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006436                            		even
00006436                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006466                            		even
00006466                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006486                            		even
00006486                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000064A6                            		even
000064A6                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000064D6                            		even
000064D6                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006506                            		even
00006506                            
00006506                            ; ---------------------------------------------------------------------------
00006506                            ; Subroutine to	load level boundaries and start	locations
00006506                            ; ---------------------------------------------------------------------------
00006506                            
00006506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006506                            
00006506                            
00006506                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006506 7000                       		moveq	#0,d0
00006508 11C0 F740                  		move.b	d0,($FFFFF740).w
0000650C 11C0 F741                  		move.b	d0,($FFFFF741).w
00006510 11C0 F746                  		move.b	d0,($FFFFF746).w
00006514 11C0 F748                  		move.b	d0,($FFFFF748).w
00006518 11C0 F742                  		move.b	d0,($FFFFF742).w
0000651C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006520 ED08                       		lsl.b	#6,d0
00006522 E848                       		lsr.w	#4,d0
00006524 3200                       		move.w	d0,d1
00006526 D040                       		add.w	d0,d0
00006528 D041                       		add.w	d1,d0
0000652A 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000652E 3018                       		move.w	(a0)+,d0
00006530 31C0 F730                  		move.w	d0,($FFFFF730).w
00006534 2018                       		move.l	(a0)+,d0
00006536 21C0 F728                  		move.l	d0,($FFFFF728).w
0000653A 21C0 F720                  		move.l	d0,($FFFFF720).w
0000653E 2018                       		move.l	(a0)+,d0
00006540 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006544 21C0 F724                  		move.l	d0,($FFFFF724).w
00006548 3038 F728                  		move.w	($FFFFF728).w,d0
0000654C 0640 0240                  		addi.w	#$240,d0
00006550 31C0 F732                  		move.w	d0,($FFFFF732).w
00006554 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
0000655A 3018                       		move.w	(a0)+,d0
0000655C 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006560 6000 0000                  		bra.w	LevSz_ChkLamp
00006564                            ; ===========================================================================
00006564                            ; ---------------------------------------------------------------------------
00006564                            ; Level size array and ending start location array
00006564                            ; ---------------------------------------------------------------------------
00006564                            LevelSizeArray:        ; GHZ
00006564 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006570 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
0000657C 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006588 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006594                                    ; LZ
00006594 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
000065A0 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
000065AC 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
000065B8 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000065C4                                    ; MZ
000065C4 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000065D0 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000065DC 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000065E8 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000065F4                                    ; SLZ
000065F4 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006600 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
0000660C 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006618 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006624                                    ; SYZ
00006624 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006630 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
0000663C 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006648 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006654                                    ; SBZ
00006654 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006660 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
0000666C 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006678 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006684                                    ; Ending
00006684 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006690 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
0000669C 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
000066A8 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
000066B4                                    ; BHZ
000066B4 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
000066C0 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
000066CC 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
000066D8 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
000066E4                                    even
000066E4                            
000066E4                            ; ===========================================================================
000066E4                            
000066E4                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000066E4 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000066E8 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000066EA 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000066F0 3238 D008                  		move.w	($FFFFD008).w,d1
000066F4 3038 D00C                  		move.w	($FFFFD00C).w,d0
000066F8 6000 0000                  		bra.w	loc_60D0
000066FC                            ; ===========================================================================
000066FC                            
000066FC                            
000066FC                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000066FC 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006700 ED08                       		lsl.b	#6,d0
00006702 E848                       		lsr.w	#4,d0
00006704 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006708 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000670C 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006710 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006714 5340                       		subq.w	#1,d0
00006716 E548                       		lsl.w	#2,d0
00006718 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000671C 6000 0000                  		bra.w	LevSz_SonicPos
00006720                            
00006720                            EndingStLocArray:
00006720                            		incbin	misc\sloc_end.bin
00006740                            		even
00006740                            		
00006740                            ; ===========================================================================
00006740                            ; ---------------------------------------------------------------------------
00006740                            ; Sonic	start location array
00006740                            ; ---------------------------------------------------------------------------
00006740                            StartLocArray:	incbin	misc\sloc_lev.bin
000067C0                            		even
000067C0                            
000067C0                            LevSz_SonicPos:
000067C0 7200                       		moveq	#0,d1
000067C2 3219                       		move.w	(a1)+,d1
000067C4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000067C8 7000                       		moveq	#0,d0
000067CA 3011                       		move.w	(a1),d0
000067CC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000067D0                            
000067D0                            loc_60D0:				; XREF: LevSz_ChkLamp
000067D0 0441 00A0                  		subi.w	#$A0,d1
000067D4 6400                       		bcc.s	loc_60D8
000067D6 7200                       		moveq	#0,d1
000067D8                            
000067D8                            loc_60D8:
000067D8 3438 F72A                  		move.w	($FFFFF72A).w,d2
000067DC B242                       		cmp.w	d2,d1
000067DE 6500                       		bcs.s	loc_60E2
000067E0 3202                       		move.w	d2,d1
000067E2                            
000067E2                            loc_60E2:
000067E2 31C1 F700                  		move.w	d1,($FFFFF700).w
000067E6 0440 0060                  		subi.w	#$60,d0
000067EA 6400                       		bcc.s	loc_60EE
000067EC 7000                       		moveq	#0,d0
000067EE                            
000067EE                            loc_60EE:
000067EE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000067F2 6D00                       		blt.s	loc_60F8
000067F4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000067F8                            
000067F8                            loc_60F8:
000067F8 31C0 F704                  		move.w	d0,($FFFFF704).w
000067FC 6100 0000                  		bsr.w	BgScrollSpeed
00006800 7000                       		moveq	#0,d0
00006802 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006806 E508                       		lsl.b	#2,d0
00006808 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000680E 6000 0000                  		bra.w	LevSz_Unk
00006812                            
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Which	256x256	tiles contain loops or roll-tunnels
00006812                            ; ---------------------------------------------------------------------------
00006812                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006812                            ; loop,	loop, tunnel, tunnel
00006812                            ; ---------------------------------------------------------------------------
00006812                            LoopTileNums:	incbin	misc\loopnums.bin
00006832                            		even
00006832                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006832                            ; ITS GONJE HELP
00006832                            ; ===========================================================================
00006832                            
00006832                            LevSz_Unk:				; XREF: LevelSizeLoad
00006832 7000                       		moveq	#0,d0
00006834 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006838 E748                       		lsl.w	#3,d0
0000683A 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000683E 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006842 24D9                       		move.l	(a1)+,(a2)+
00006844 24D9                       		move.l	(a1)+,(a2)+
00006846 4E75                       		rts	
00006848                            ; End of function LevelSizeLoad
00006848                            
00006848                            ; ===========================================================================
00006848 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006850 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006858 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006860 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006868 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006870 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006878 0070 0100 0100 0100        		dc.l $700100, $1000100
00006880                            
00006880                            ; ---------------------------------------------------------------------------
00006880                            ; Subroutine to	set scroll speed of some backgrounds
00006880                            ; ---------------------------------------------------------------------------
00006880                            
00006880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006880                            
00006880                            
00006880                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006880 4A38 FE30                  		tst.b	($FFFFFE30).w
00006884 6600                       		bne.s	loc_6206
00006886 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000688A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000688E 31C1 F708                  		move.w	d1,($FFFFF708).w
00006892 31C1 F710                  		move.w	d1,($FFFFF710).w
00006896 31C1 F718                  		move.w	d1,($FFFFF718).w
0000689A                            
0000689A                            loc_6206:
0000689A 7400                       		moveq	#0,d2
0000689C 1438 FE10                  		move.b	($FFFFFE10).w,d2
000068A0 D442                       		add.w	d2,d2
000068A2 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000068A6 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000068AA                            ; End of function BgScrollSpeed
000068AA                            
000068AA                            ; ===========================================================================
000068AA 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000068AE 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000068B2 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000068B6 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
000068BA                            ; ===========================================================================
000068BA                            
000068BA                            BgScroll_GHZ:				; XREF: BgScroll_Index
000068BA 6000 0000                  		bra.w	Deform_GHZ
000068BE                            ; ===========================================================================
000068BE                            
000068BE                            BgScroll_LZ:				; XREF: BgScroll_Index
000068BE E280                       		asr.l	#1,d0
000068C0 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068C4 4E75                       		rts	
000068C6                            ; ===========================================================================
000068C6                            
000068C6                            BgScroll_MZ:				; XREF: BgScroll_Index
000068C6 4E75                       		rts	
000068C8                            ; ===========================================================================
000068C8                            
000068C8                            BgScroll_SLZ:				; XREF: BgScroll_Index
000068C8 E280                       		asr.l	#1,d0
000068CA 0640 00C0                  		addi.w	#$C0,d0
000068CE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068D2 4E75                       		rts	
000068D4                            ; ===========================================================================
000068D4                            
000068D4                            BgScroll_SYZ:				; XREF: BgScroll_Index
000068D4 E980                       		asl.l	#4,d0
000068D6 2400                       		move.l	d0,d2
000068D8 E380                       		asl.l	#1,d0
000068DA D082                       		add.l	d2,d0
000068DC E080                       		asr.l	#8,d0
000068DE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068E2 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E6 4E75                       		rts	
000068E8                            ; ===========================================================================
000068E8                            
000068E8                            BgScroll_SBZ:				; XREF: BgScroll_Index
000068E8 E980                       		asl.l	#4,d0
000068EA E380                       		asl.l	#1,d0
000068EC E080                       		asr.l	#8,d0
000068EE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000068F2 4E75                       		rts	
000068F4                            ; ===========================================================================
000068F4                            
000068F4                            BgScroll_End:				; XREF: BgScroll_Index
000068F4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000068FA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006900 4E75                       		rts	
00006902                            ; ===========================================================================
00006902 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006908 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000690E 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006914 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000691A 4E75                       		rts
0000691C                            
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            ; Background layer deformation subroutines
0000691C                            ; ---------------------------------------------------------------------------
0000691C                            
0000691C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000691C                            
0000691C                            
0000691C                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000691C 4A38 F744                  		tst.b	($FFFFF744).w
00006920 6700                       		beq.s	loc_628E
00006922 4E75                       		rts	
00006924                            ; ===========================================================================
00006924                            
00006924                            loc_628E:
00006924 4278 F754                  		clr.w	($FFFFF754).w
00006928 4278 F756                  		clr.w	($FFFFF756).w
0000692C 4278 F758                  		clr.w	($FFFFF758).w
00006930 4278 F75A                  		clr.w	($FFFFF75A).w
00006934 6100 0000                  		bsr.w	ScrollHoriz
00006938 6100 0000                  		bsr.w	ScrollVertical
0000693C 6100 0000                  		bsr.w	DynScrResizeLoad
00006940 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006946 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
0000694C 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006952 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006958 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000695E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006964 7000                       		moveq	#0,d0
00006966 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000696A D040                       		add.w	d0,d0
0000696C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006970 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006974                            ; End of function DeformBgLayer
00006974                            
00006974                            ; ===========================================================================
00006974                            ; ---------------------------------------------------------------------------
00006974                            ; Offset index for background layer deformation	code
00006974                            ; ---------------------------------------------------------------------------
00006974 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006978 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000697C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006980 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
00006984                            ; ---------------------------------------------------------------------------
00006984                            ; Green	Hill Zone background layer deformation code
00006984                            ; ---------------------------------------------------------------------------
00006984                            
00006984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006984                            
00006984                            
00006984                            Deform_GHZ:				; XREF: Deform_Index
00006984 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006988 48C4                       		ext.l	d4
0000698A EB84                       		asl.l	#5,d4
0000698C 2204                       		move.l	d4,d1
0000698E E384                       		asl.l	#1,d4
00006990 D881                       		add.l	d1,d4
00006992 7A00                       		moveq	#0,d5
00006994 6100 0000                  		bsr.w	ScrollBlock1
00006998 6100 0000                  		bsr.w	ScrollBlock4
0000699C 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069A0 3038 F704                  		move.w	($FFFFF704).w,d0
000069A4 0240 07FF                  		andi.w	#$7FF,d0
000069A8 EA48                       		lsr.w	#5,d0
000069AA 4440                       		neg.w	d0
000069AC 0640 0026                  		addi.w	#$26,d0
000069B0 31C0 F714                  		move.w	d0,($FFFFF714).w
000069B4 3800                       		move.w	d0,d4
000069B6 6100 0000                  		bsr.w	ScrollBlock3
000069BA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069C0 323C 006F                  		move.w	#$6F,d1
000069C4 9244                       		sub.w	d4,d1
000069C6 3038 F700                  		move.w	($FFFFF700).w,d0
000069CA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000069D0 6600                       		bne.s	loc_633C
000069D2 7000                       		moveq	#0,d0
000069D4                            
000069D4                            loc_633C:
000069D4 4440                       		neg.w	d0
000069D6 4840                       		swap	d0
000069D8 3038 F708                  		move.w	($FFFFF708).w,d0
000069DC 4440                       		neg.w	d0
000069DE                            
000069DE                            loc_6346:
000069DE 22C0                       		move.l	d0,(a1)+
000069E0 51C9 FFFC                  		dbf	d1,loc_6346
000069E4 323C 0027                  		move.w	#$27,d1
000069E8 3038 F710                  		move.w	($FFFFF710).w,d0
000069EC 4440                       		neg.w	d0
000069EE                            
000069EE                            loc_6356:
000069EE 22C0                       		move.l	d0,(a1)+
000069F0 51C9 FFFC                  		dbf	d1,loc_6356
000069F4 3038 F710                  		move.w	($FFFFF710).w,d0
000069F8 0640 0000                  		addi.w	#0,d0
000069FC 3438 F700                  		move.w	($FFFFF700).w,d2
00006A00 0642 FE00                  		addi.w	#-$200,d2
00006A04 9440                       		sub.w	d0,d2
00006A06 48C2                       		ext.l	d2
00006A08 E182                       		asl.l	#8,d2
00006A0A 85FC 0068                  		divs.w	#$68,d2
00006A0E 48C2                       		ext.l	d2
00006A10 E182                       		asl.l	#8,d2
00006A12 7600                       		moveq	#0,d3
00006A14 3600                       		move.w	d0,d3
00006A16 323C 0047                  		move.w	#$47,d1
00006A1A D244                       		add.w	d4,d1
00006A1C                            
00006A1C                            loc_6384:
00006A1C 3003                       		move.w	d3,d0
00006A1E 4440                       		neg.w	d0
00006A20 22C0                       		move.l	d0,(a1)+
00006A22 4843                       		swap	d3
00006A24 D682                       		add.l	d2,d3
00006A26 4843                       		swap	d3
00006A28 51C9 FFF2                  		dbf	d1,loc_6384
00006A2C 4E75                       		rts	
00006A2E                            ; End of function Deform_GHZ
00006A2E                            
00006A2E                            ; ---------------------------------------------------------------------------
00006A2E                            ; Labyrinth Zone background layer deformation code
00006A2E                            ; ---------------------------------------------------------------------------
00006A2E                            
00006A2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A2E                            
00006A2E                            
00006A2E                            Deform_LZ:				; XREF: Deform_Index
00006A2E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A32 48C4                       		ext.l	d4
00006A34 EF84                       		asl.l	#7,d4
00006A36 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A3A 48C5                       		ext.l	d5
00006A3C EF85                       		asl.l	#7,d5
00006A3E 6100 0000                  		bsr.w	ScrollBlock1
00006A42 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A48 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A4C 323C 00DF                  		move.w	#$DF,d1
00006A50 3038 F700                  		move.w	($FFFFF700).w,d0
00006A54 4440                       		neg.w	d0
00006A56 4840                       		swap	d0
00006A58 3038 F708                  		move.w	($FFFFF708).w,d0
00006A5C 4440                       		neg.w	d0
00006A5E                            
00006A5E                            loc_63C6:
00006A5E 22C0                       		move.l	d0,(a1)+
00006A60 51C9 FFFC                  		dbf	d1,loc_63C6
00006A64 3038 F646                  		move.w	($FFFFF646).w,d0
00006A68 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A6C 4E75                       		rts	
00006A6E                            ; End of function Deform_LZ
00006A6E                            
00006A6E                            ; ---------------------------------------------------------------------------
00006A6E                            ; Marble Zone background layer deformation code
00006A6E                            ; ---------------------------------------------------------------------------
00006A6E                            
00006A6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A6E                            
00006A6E                            
00006A6E                            Deform_MZ:				; XREF: Deform_Index
00006A6E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A72 48C4                       		ext.l	d4
00006A74 ED84                       		asl.l	#6,d4
00006A76 2204                       		move.l	d4,d1
00006A78 E384                       		asl.l	#1,d4
00006A7A D881                       		add.l	d1,d4
00006A7C 7A00                       		moveq	#0,d5
00006A7E 6100 0000                  		bsr.w	ScrollBlock1
00006A82 303C 0200                  		move.w	#$200,d0
00006A86 3238 F704                  		move.w	($FFFFF704).w,d1
00006A8A 0441 01C8                  		subi.w	#$1C8,d1
00006A8E 6500                       		bcs.s	loc_6402
00006A90 3401                       		move.w	d1,d2
00006A92 D241                       		add.w	d1,d1
00006A94 D242                       		add.w	d2,d1
00006A96 E441                       		asr.w	#2,d1
00006A98 D041                       		add.w	d1,d0
00006A9A                            
00006A9A                            loc_6402:
00006A9A 31C0 F714                  		move.w	d0,($FFFFF714).w
00006A9E 6100 0000                  		bsr.w	ScrollBlock3
00006AA2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006AA8 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AAC 323C 00DF                  		move.w	#$DF,d1
00006AB0 3038 F700                  		move.w	($FFFFF700).w,d0
00006AB4 4440                       		neg.w	d0
00006AB6 4840                       		swap	d0
00006AB8 3038 F708                  		move.w	($FFFFF708).w,d0
00006ABC 4440                       		neg.w	d0
00006ABE                            
00006ABE                            loc_6426:
00006ABE 22C0                       		move.l	d0,(a1)+
00006AC0 51C9 FFFC                  		dbf	d1,loc_6426
00006AC4 4E75                       		rts	
00006AC6                            ; End of function Deform_MZ
00006AC6                            
00006AC6                            ; ---------------------------------------------------------------------------
00006AC6                            ; Star Light Zone background layer deformation code
00006AC6                            ; ---------------------------------------------------------------------------
00006AC6                            
00006AC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AC6                            
00006AC6                            
00006AC6                            Deform_SLZ:				; XREF: Deform_Index
00006AC6 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006ACA 48C4                       		ext.l	d4
00006ACC EB84                       		asl.l	#5,d4
00006ACE 2204                       		move.l	d4,d1
00006AD0 E384                       		asl.l	#1,d4
00006AD2 D881                       		add.l	d1,d4
00006AD4 7A00                       		moveq	#0,d5
00006AD6 6100 0000                  		bsr.w	ScrollBlock1
00006ADA 6100 0000                  		bsr.w	ScrollBlock3
00006ADE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006AE2                            	;	move.w	($FFFFF704).w,d0
00006AE2                            	;	andi.w	#$7FF,d0
00006AE2 EA48                       		lsr.w	#5,d0
00006AE4 4440                       		neg.w	d0
00006AE6 0640 0026                  		addi.w	#$26,d0
00006AEA 31C0 F714                  		move.w	d0,($FFFFF714).w
00006AEE 3800                       		move.w	d0,d4
00006AF0                            	;	bsr.w	ScrollBlock3
00006AF0 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006AF6 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006AFA                            
00006AFA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AFE 4440                       		neg.w	d0			; negate (positive to negative)
00006B00 4840                       		swap	d0			; send to the left side of d0
00006B02 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B06 45F8 A800                  		lea	($FFFFA800).w,a2
00006B0A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B10 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B16 3038 A800                  		move.w	($FFFFA800).w,d0
00006B1A 4440                       		neg.w	d0			; negate (positive to negative)
00006B1C E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B1E 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B22                            slz_DeformLoop_1:
00006B22 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B24 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006B28                            
00006B28 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B2C 4440                       		neg.w	d0			; negate (positive to negative)
00006B2E 4840                       		swap	d0			; send to the left side of d0
00006B30 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B34 45F8 A800                  		lea	($FFFFA800).w,a2
00006B38 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B3E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B44 3038 A800                  		move.w	($FFFFA800).w,d0
00006B48 4440                       		neg.w	d0			; negate (positive to negative)
00006B4A E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B4C 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B50                            slz_DeformLoop_2:
00006B50 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B52 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006B56                            
00006B56 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B5A 4440                       		neg.w	d0			; negate (positive to negative)
00006B5C 4840                       		swap	d0			; send to the left side of d0
00006B5E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B62 45F8 A800                  		lea	($FFFFA800).w,a2
00006B66 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B6C 069A 0000 C000             		addi.l	#$C000,(a2)+
00006B72 3038 A800                  		move.w	($FFFFA800).w,d0
00006B76 4440                       		neg.w	d0			; negate (positive to negative)
00006B78 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B7A 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B7E                            slz_DeformLoop_3:
00006B7E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B80 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006B84                            
00006B84 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B88 4440                       		neg.w	d0			; negate (positive to negative)
00006B8A 4840                       		swap	d0			; send to the left side of d0
00006B8C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B90 45F8 A800                  		lea	($FFFFA800).w,a2
00006B94 069A 0000 5000             		addi.l	#$5000,(a2)+
00006B9A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BA0 3038 A800                  		move.w	($FFFFA800).w,d0
00006BA4 4440                       		neg.w	d0			; negate (positive to negative)
00006BA6 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006BA8 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BAC                            slz_DeformLoop_4:
00006BAC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BAE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006BB2                            
00006BB2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BB6 4440                       		neg.w	d0			; negate (positive to negative)
00006BB8 4840                       		swap	d0			; send to the left side of d0
00006BBA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BBE 45F8 A800                  		lea	($FFFFA800).w,a2
00006BC2 069A 0000 5000             		addi.l	#$5000,(a2)+
00006BC8 069A 0000 C000             		addi.l	#$C000,(a2)+
00006BCE 3038 A800                  		move.w	($FFFFA800).w,d0
00006BD2 4440                       		neg.w	d0			; negate (positive to negative)
00006BD4 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006BD6 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BDA                            slz_DeformLoop_5:
00006BDA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BDC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006BE0                            
00006BE0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BE4 4440                       		neg.w	d0			; negate (positive to negative)
00006BE6 4840                       		swap	d0			; send to the left side of d0
00006BE8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006BEC 4440                       		neg.w	d0			; negate (positive to negative)
00006BEE EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006BF0 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006BF4                            slz_DeformLoop_6:
00006BF4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006BF6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006BFA                            
00006BFA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006BFE 4440                       		neg.w	d0			; negate (positive to negative)
00006C00 4840                       		swap	d0			; send to the left side of d0
00006C02 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C06 4440                       		neg.w	d0			; negate (positive to negative)
00006C08 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006C0A 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C0E                            slz_DeformLoop_7:
00006C0E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C10 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006C14                            
00006C14 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C18 4440                       		neg.w	d0			; negate (positive to negative)
00006C1A 4840                       		swap	d0			; send to the left side of d0
00006C1C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C20 4440                       		neg.w	d0			; negate (positive to negative)
00006C22 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006C24 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C28                            slz_DeformLoop_8:
00006C28 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C2A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006C2E                            
00006C2E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C32 4440                       		neg.w	d0			; negate (positive to negative)
00006C34 4840                       		swap	d0			; send to the left side of d0
00006C36 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C3A 4440                       		neg.w	d0			; negate (positive to negative)
00006C3C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006C3E 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C42                            slz_DeformLoop_9:
00006C42 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C44 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006C48                            
00006C48 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C4C 4440                       		neg.w	d0			; negate (positive to negative)
00006C4E 4840                       		swap	d0			; send to the left side of d0
00006C50 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C54 4440                       		neg.w	d0			; negate (positive to negative)
00006C56 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006C58 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C5C                            slz_DeformLoop_10:
00006C5C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C5E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006C62                            
00006C62 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C66 4440                       		neg.w	d0			; negate (positive to negative)
00006C68 4840                       		swap	d0			; send to the left side of d0
00006C6A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C6E 4440                       		neg.w	d0			; negate (positive to negative)
00006C70 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006C72 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C76                            slz_DeformLoop_11:
00006C76 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C78 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006C7C                            
00006C7C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C80 4440                       		neg.w	d0			; negate (positive to negative)
00006C82 4840                       		swap	d0			; send to the left side of d0
00006C84 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006C88 4440                       		neg.w	d0			; negate (positive to negative)
00006C8A E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006C8C 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006C90                            slz_DeformLoop_12:
00006C90 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006C92 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006C96                            
00006C96 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006C9A 4440                       		neg.w	d0			; negate (positive to negative)
00006C9C 4840                       		swap	d0			; send to the left side of d0
00006C9E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006CA2 4440                       		neg.w	d0			; negate (positive to negative)
00006CA4 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006CA6 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006CAA                            slz_DeformLoop_13:
00006CAA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006CAC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006CB0 4E75                       		rts	
00006CB2                            ; End of function Deform_SLZ
00006CB2 4E75                       		rts	
00006CB4                            ; End of function Deform_SLZ_2
00006CB4                            
00006CB4                            ; ---------------------------------------------------------------------------
00006CB4                            ; Spring Yard Zone background layer deformation	code
00006CB4                            ; ---------------------------------------------------------------------------
00006CB4                            
00006CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CB4                            
00006CB4                            
00006CB4                            Deform_SYZ:				; XREF: Deform_Index
00006CB4 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CB8 48C4                       		ext.l	d4
00006CBA ED84                       		asl.l	#6,d4
00006CBC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CC0 48C5                       		ext.l	d5
00006CC2 E985                       		asl.l	#4,d5
00006CC4 2205                       		move.l	d5,d1
00006CC6 E385                       		asl.l	#1,d5
00006CC8 DA81                       		add.l	d1,d5
00006CCA 6100 0000                  		bsr.w	ScrollBlock1
00006CCE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006CD4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006CD8 323C 00DF                  		move.w	#$DF,d1
00006CDC 3038 F700                  		move.w	($FFFFF700).w,d0
00006CE0 4440                       		neg.w	d0
00006CE2 4840                       		swap	d0
00006CE4 3038 F708                  		move.w	($FFFFF708).w,d0
00006CE8 4440                       		neg.w	d0
00006CEA                            
00006CEA                            loc_653C:
00006CEA 22C0                       		move.l	d0,(a1)+
00006CEC 51C9 FFFC                  		dbf	d1,loc_653C
00006CF0 4E75                       		rts	
00006CF2                            ; End of function Deform_SYZ
00006CF2                            
00006CF2                            ; ---------------------------------------------------------------------------
00006CF2                            ; Scrap	Brain Zone background layer deformation	code
00006CF2                            ; ---------------------------------------------------------------------------
00006CF2                            
00006CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CF2                            
00006CF2                            
00006CF2                            Deform_SBZ:				; XREF: Deform_Index
00006CF2 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006CF6 48C4                       		ext.l	d4
00006CF8 ED84                       		asl.l	#6,d4
00006CFA 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006CFE 48C5                       		ext.l	d5
00006D00 E985                       		asl.l	#4,d5
00006D02 E385                       		asl.l	#1,d5
00006D04 6100 0000                  		bsr.w	ScrollBlock1
00006D08 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D0E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D12 323C 00DF                  		move.w	#$DF,d1
00006D16 3038 F700                  		move.w	($FFFFF700).w,d0
00006D1A 4440                       		neg.w	d0
00006D1C 4840                       		swap	d0
00006D1E 3038 F708                  		move.w	($FFFFF708).w,d0
00006D22 4440                       		neg.w	d0
00006D24                            
00006D24                            loc_6576:
00006D24 22C0                       		move.l	d0,(a1)+
00006D26 51C9 FFFC                  		dbf	d1,loc_6576
00006D2A 4E75                       		rts	
00006D2C                            ; End of function Deform_SBZ
00006D2C                            ; ---------------------------------------------------------------------------
00006D2C                            ; Makoto Zone background layer deformation code
00006D2C                            ; ---------------------------------------------------------------------------
00006D2C                            
00006D2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D2C                            
00006D2C                            
00006D2C                            Deform_BHZ:				; XREF: Deform_Index
00006D2C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006D30 48C4                       		ext.l	d4
00006D32 E984                       		asl.l	#4,d4
00006D34 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006D38 48C5                       		ext.l	d5
00006D3A E985                       		asl.l	#4,d5
00006D3C 7A00                       		moveq	#0,d5	; reset bg position in title screen
00006D3E 6100 0000                  		bsr.w	ScrollBlock1
00006D42 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006D48 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006D4C 323C 00DF                  		move.w	#$DF,d1
00006D50 3038 F700                  		move.w	($FFFFF700).w,d0
00006D54 4440                       		neg.w	d0
00006D56 4840                       		swap	d0
00006D58 3038 F708                  		move.w	($FFFFF708).w,d0
00006D5C 4440                       		neg.w	d0
00006D5E                            
00006D5E                            loc_63COCK6:
00006D5E 22C0                       		move.l	d0,(a1)+
00006D60 51C9 FFFC                  		dbf	d1,loc_63COCK6
00006D64 3038 F646                  		move.w	($FFFFF646).w,d0
00006D68 9078 F704                  		sub.w	($FFFFF704).w,d0
00006D6C 4E75                       		rts	
00006D6E                            ; End of function Deform_BHZ
00006D6E                            ; ---------------------------------------------------------------------------
00006D6E                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006D6E                            ; ---------------------------------------------------------------------------
00006D6E                            
00006D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D6E                            
00006D6E                            
00006D6E                            ScrollHoriz:				; XREF: DeformBgLayer
00006D6E 3838 F700                  		move.w	($FFFFF700).w,d4
00006D72 6100                       		bsr.s	ScrollHoriz2
00006D74 3038 F700                  		move.w	($FFFFF700).w,d0
00006D78 0240 0010                  		andi.w	#$10,d0
00006D7C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006D80 B300                       		eor.b	d1,d0
00006D82 6600                       		bne.s	locret_65B0
00006D84 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006D8A 3038 F700                  		move.w	($FFFFF700).w,d0
00006D8E 9044                       		sub.w	d4,d0
00006D90 6A00                       		bpl.s	loc_65AA
00006D92 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006D98 4E75                       		rts	
00006D9A                            ; ===========================================================================
00006D9A                            
00006D9A                            loc_65AA:
00006D9A 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006DA0                            
00006DA0                            locret_65B0:
00006DA0 4E75                       		rts	
00006DA2                            ; End of function ScrollHoriz
00006DA2                            
00006DA2                            
00006DA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DA2                            
00006DA2                            
00006DA2                            ScrollHoriz2:				; XREF: ScrollHoriz
00006DA2 3038 D008                  		move.w	($FFFFD008).w,d0
00006DA6 9078 F700                  		sub.w	($FFFFF700).w,d0
00006DAA 0440 0090                  		subi.w	#$90,d0
00006DAE 6500                       		bcs.s	loc_65F6
00006DB0 0440 0010                  		subi.w	#$10,d0
00006DB4 6400                       		bcc.s	loc_65CC
00006DB6 4278 F73A                  		clr.w	($FFFFF73A).w
00006DBA 4E75                       		rts	
00006DBC                            ; ===========================================================================
00006DBC                            
00006DBC                            loc_65CC:
00006DBC 0C40 0010                  		cmpi.w	#$10,d0
00006DC0 6500                       		bcs.s	loc_65D6
00006DC2 303C 0010                  		move.w	#$10,d0
00006DC6                            
00006DC6                            loc_65D6:
00006DC6 D078 F700                  		add.w	($FFFFF700).w,d0
00006DCA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006DCE 6D00                       		blt.s	loc_65E4
00006DD0 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006DD4                            
00006DD4                            loc_65E4:
00006DD4 3200                       		move.w	d0,d1
00006DD6 9278 F700                  		sub.w	($FFFFF700).w,d1
00006DDA E141                       		asl.w	#8,d1
00006DDC 31C0 F700                  		move.w	d0,($FFFFF700).w
00006DE0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006DE4 4E75                       		rts	
00006DE6                            ; ===========================================================================
00006DE6                            
00006DE6                            loc_65F6:				; XREF: ScrollHoriz2
00006DE6 D078 F700                  		add.w	($FFFFF700).w,d0
00006DEA B078 F728                  		cmp.w	($FFFFF728).w,d0
00006DEE 6EE4                       		bgt.s	loc_65E4
00006DF0 3038 F728                  		move.w	($FFFFF728).w,d0
00006DF4 60DE                       		bra.s	loc_65E4
00006DF6                            ; End of function ScrollHoriz2
00006DF6                            
00006DF6                            ; ===========================================================================
00006DF6 4A40                       		tst.w	d0
00006DF8 6A00                       		bpl.s	loc_6610
00006DFA 303C FFFE                  		move.w	#-2,d0
00006DFE 60E6                       		bra.s	loc_65F6
00006E00                            ; ===========================================================================
00006E00                            
00006E00                            loc_6610:
00006E00 303C 0002                  		move.w	#2,d0
00006E04 60B6                       		bra.s	loc_65CC
00006E06                            
00006E06                            ; ---------------------------------------------------------------------------
00006E06                            ; Subroutine to	scroll the level vertically as Sonic moves
00006E06                            ; ---------------------------------------------------------------------------
00006E06                            
00006E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E06                            
00006E06                            
00006E06                            ScrollVertical:				; XREF: DeformBgLayer
00006E06 7200                       		moveq	#0,d1
00006E08 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006E0C 9078 F704                  		sub.w	($FFFFF704).w,d0
00006E10 0838 0002 D022             		btst	#2,($FFFFD022).w
00006E16 6700                       		beq.s	loc_662A
00006E18 5B40                       		subq.w	#5,d0
00006E1A                            
00006E1A                            loc_662A:
00006E1A 0838 0001 D022             		btst	#1,($FFFFD022).w
00006E20 6700                       		beq.s	loc_664A
00006E22 0640 0020                  		addi.w	#$20,d0
00006E26 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006E2A 6500                       		bcs.s	loc_6696
00006E2C 0440 0040                  		subi.w	#$40,d0
00006E30 6400                       		bcc.s	loc_6696
00006E32 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E36 6600                       		bne.s	loc_66A8
00006E38 6000                       		bra.s	loc_6656
00006E3A                            ; ===========================================================================
00006E3A                            
00006E3A                            loc_664A:
00006E3A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006E3E 6600                       		bne.s	loc_665C
00006E40 4A38 F75C                  		tst.b	($FFFFF75C).w
00006E44 6600                       		bne.s	loc_66A8
00006E46                            
00006E46                            loc_6656:
00006E46 4278 F73C                  		clr.w	($FFFFF73C).w
00006E4A 4E75                       		rts	
00006E4C                            ; ===========================================================================
00006E4C                            
00006E4C                            loc_665C:
00006E4C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006E52 6600                       		bne.s	loc_6684
00006E54 3238 D014                  		move.w	($FFFFD014).w,d1
00006E58 6A00                       		bpl.s	loc_666C
00006E5A 4441                       		neg.w	d1
00006E5C                            
00006E5C                            loc_666C:
00006E5C 0C41 0800                  		cmpi.w	#$800,d1
00006E60 6400                       		bcc.s	loc_6696
00006E62 323C 0600                  		move.w	#$600,d1
00006E66 0C40 0006                  		cmpi.w	#6,d0
00006E6A 6E00                       		bgt.s	loc_66F6
00006E6C 0C40 FFFA                  		cmpi.w	#-6,d0
00006E70 6D00                       		blt.s	loc_66C0
00006E72 6000                       		bra.s	loc_66AE
00006E74                            ; ===========================================================================
00006E74                            
00006E74                            loc_6684:
00006E74 323C 0200                  		move.w	#$200,d1
00006E78 0C40 0002                  		cmpi.w	#2,d0
00006E7C 6E00                       		bgt.s	loc_66F6
00006E7E 0C40 FFFE                  		cmpi.w	#-2,d0
00006E82 6D00                       		blt.s	loc_66C0
00006E84 6000                       		bra.s	loc_66AE
00006E86                            ; ===========================================================================
00006E86                            
00006E86                            loc_6696:
00006E86 323C 1000                  		move.w	#$1000,d1
00006E8A 0C40 0010                  		cmpi.w	#$10,d0
00006E8E 6E00                       		bgt.s	loc_66F6
00006E90 0C40 FFF0                  		cmpi.w	#-$10,d0
00006E94 6D00                       		blt.s	loc_66C0
00006E96 6000                       		bra.s	loc_66AE
00006E98                            ; ===========================================================================
00006E98                            
00006E98                            loc_66A8:
00006E98 7000                       		moveq	#0,d0
00006E9A 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006E9E                            
00006E9E                            loc_66AE:
00006E9E 7200                       		moveq	#0,d1
00006EA0 3200                       		move.w	d0,d1
00006EA2 D278 F704                  		add.w	($FFFFF704).w,d1
00006EA6 4A40                       		tst.w	d0
00006EA8 6A00 0000                  		bpl.w	loc_6700
00006EAC 6000 0000                  		bra.w	loc_66CC
00006EB0                            ; ===========================================================================
00006EB0                            
00006EB0                            loc_66C0:
00006EB0 4441                       		neg.w	d1
00006EB2 48C1                       		ext.l	d1
00006EB4 E181                       		asl.l	#8,d1
00006EB6 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EBA 4841                       		swap	d1
00006EBC                            
00006EBC                            loc_66CC:
00006EBC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006EC0 6E00                       		bgt.s	loc_6724
00006EC2 0C41 FF00                  		cmpi.w	#-$100,d1
00006EC6 6E00                       		bgt.s	loc_66F0
00006EC8 0241 07FF                  		andi.w	#$7FF,d1
00006ECC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006ED2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006ED8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006EDE 6000                       		bra.s	loc_6724
00006EE0                            ; ===========================================================================
00006EE0                            
00006EE0                            loc_66F0:
00006EE0 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006EE4 6000                       		bra.s	loc_6724
00006EE6                            ; ===========================================================================
00006EE6                            
00006EE6                            loc_66F6:
00006EE6 48C1                       		ext.l	d1
00006EE8 E181                       		asl.l	#8,d1
00006EEA D2B8 F704                  		add.l	($FFFFF704).w,d1
00006EEE 4841                       		swap	d1
00006EF0                            
00006EF0                            loc_6700:
00006EF0 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006EF4 6D00                       		blt.s	loc_6724
00006EF6 0441 0800                  		subi.w	#$800,d1
00006EFA 6500                       		bcs.s	loc_6720
00006EFC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006F02 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006F08 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006F0E 6000                       		bra.s	loc_6724
00006F10                            ; ===========================================================================
00006F10                            
00006F10                            loc_6720:
00006F10 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006F14                            
00006F14                            loc_6724:
00006F14 3838 F704                  		move.w	($FFFFF704).w,d4
00006F18 4841                       		swap	d1
00006F1A 2601                       		move.l	d1,d3
00006F1C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006F20 E09B                       		ror.l	#8,d3
00006F22 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006F26 21C1 F704                  		move.l	d1,($FFFFF704).w
00006F2A 3038 F704                  		move.w	($FFFFF704).w,d0
00006F2E 0240 0010                  		andi.w	#$10,d0
00006F32 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006F36 B300                       		eor.b	d1,d0
00006F38 6600                       		bne.s	locret_6766
00006F3A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006F40 3038 F704                  		move.w	($FFFFF704).w,d0
00006F44 9044                       		sub.w	d4,d0
00006F46 6A00                       		bpl.s	loc_6760
00006F48 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006F4E 4E75                       		rts	
00006F50                            ; ===========================================================================
00006F50                            
00006F50                            loc_6760:
00006F50 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006F56                            
00006F56                            locret_6766:
00006F56 4E75                       		rts	
00006F58                            ; End of function ScrollVertical
00006F58                            
00006F58                            
00006F58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F58                            
00006F58                            
00006F58                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006F58 2438 F708                  		move.l	($FFFFF708).w,d2
00006F5C 2002                       		move.l	d2,d0
00006F5E D084                       		add.l	d4,d0
00006F60 21C0 F708                  		move.l	d0,($FFFFF708).w
00006F64 2200                       		move.l	d0,d1
00006F66 4841                       		swap	d1
00006F68 0241 0010                  		andi.w	#$10,d1
00006F6C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006F70 B701                       		eor.b	d3,d1
00006F72 6600                       		bne.s	loc_679C
00006F74 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006F7A 9082                       		sub.l	d2,d0
00006F7C 6A00                       		bpl.s	loc_6796
00006F7E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006F84 6000                       		bra.s	loc_679C
00006F86                            ; ===========================================================================
00006F86                            
00006F86                            loc_6796:
00006F86 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006F8C                            
00006F8C                            loc_679C:
00006F8C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006F90 2003                       		move.l	d3,d0
00006F92 D085                       		add.l	d5,d0
00006F94 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006F98 2200                       		move.l	d0,d1
00006F9A 4841                       		swap	d1
00006F9C 0241 0010                  		andi.w	#$10,d1
00006FA0 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FA4 B501                       		eor.b	d2,d1
00006FA6 6600                       		bne.s	locret_67D0
00006FA8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FAE 9083                       		sub.l	d3,d0
00006FB0 6A00                       		bpl.s	loc_67CA
00006FB2 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FB8 4E75                       		rts	
00006FBA                            ; ===========================================================================
00006FBA                            
00006FBA                            loc_67CA:
00006FBA 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006FC0                            
00006FC0                            locret_67D0:
00006FC0 4E75                       		rts	
00006FC2                            ; End of function ScrollBlock1
00006FC2                            
00006FC2                            
00006FC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FC2                            
00006FC2                            
00006FC2                            ScrollBlock2:				; XREF: Deform_SLZ
00006FC2 2438 F708                  		move.l	($FFFFF708).w,d2
00006FC6 2002                       		move.l	d2,d0
00006FC8 D084                       		add.l	d4,d0
00006FCA 21C0 F708                  		move.l	d0,($FFFFF708).w
00006FCE 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006FD2 2003                       		move.l	d3,d0
00006FD4 D085                       		add.l	d5,d0
00006FD6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006FDA 2200                       		move.l	d0,d1
00006FDC 4841                       		swap	d1
00006FDE 0241 0010                  		andi.w	#$10,d1
00006FE2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006FE6 B501                       		eor.b	d2,d1
00006FE8 6600                       		bne.s	locret_6812
00006FEA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006FF0 9083                       		sub.l	d3,d0
00006FF2 6A00                       		bpl.s	loc_680C
00006FF4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006FFA 4E75                       		rts	
00006FFC                            ; ===========================================================================
00006FFC                            
00006FFC                            loc_680C:
00006FFC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007002                            
00007002                            locret_6812:
00007002 4E75                       		rts	
00007004                            ; End of function ScrollBlock2
00007004                            
00007004                            
00007004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007004                            
00007004                            
00007004                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00007004 3638 F70C                  		move.w	($FFFFF70C).w,d3
00007008 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000700C 3200                       		move.w	d0,d1
0000700E 0241 0010                  		andi.w	#$10,d1
00007012 1438 F74D                  		move.b	($FFFFF74D).w,d2
00007016 B501                       		eor.b	d2,d1
00007018 6600                       		bne.s	locret_6842
0000701A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007020 9043                       		sub.w	d3,d0
00007022 6A00                       		bpl.s	loc_683C
00007024 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000702A 4E75                       		rts	
0000702C                            ; ===========================================================================
0000702C                            
0000702C                            loc_683C:
0000702C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007032                            
00007032                            locret_6842:
00007032 4E75                       		rts	
00007034                            ; End of function ScrollBlock3
00007034                            
00007034                            
00007034                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007034                            
00007034                            
00007034                            ScrollBlock4:				; XREF: Deform_GHZ
00007034 3438 F710                  		move.w	($FFFFF710).w,d2
00007038 3638 F714                  		move.w	($FFFFF714).w,d3
0000703C 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007040 48C0                       		ext.l	d0
00007042 EF80                       		asl.l	#7,d0
00007044 D1B8 F710                  		add.l	d0,($FFFFF710).w
00007048 3038 F710                  		move.w	($FFFFF710).w,d0
0000704C 0240 0010                  		andi.w	#$10,d0
00007050 1238 F74E                  		move.b	($FFFFF74E).w,d1
00007054 B300                       		eor.b	d1,d0
00007056 6600                       		bne.s	locret_6884
00007058 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000705E 3038 F710                  		move.w	($FFFFF710).w,d0
00007062 9042                       		sub.w	d2,d0
00007064 6A00                       		bpl.s	loc_687E
00007066 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000706C 6000                       		bra.s	locret_6884
0000706E                            ; ===========================================================================
0000706E                            
0000706E                            loc_687E:
0000706E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00007074                            
00007074                            locret_6884:
00007074 4E75                       		rts	
00007076                            ; End of function ScrollBlock4
00007076                            
00007076                            
00007076                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007076                            
00007076                            
00007076                            sub_6886:				; XREF: loc_C44
00007076 4BF9 00C0 0004             		lea	($C00004).l,a5
0000707C 4DF9 00C0 0000             		lea	($C00000).l,a6
00007082 45F8 F756                  		lea	($FFFFF756).w,a2
00007086 47F8 F708                  		lea	($FFFFF708).w,a3
0000708A 49F8 A440                  		lea	($FFFFA440).w,a4
0000708E 343C 6000                  		move.w	#$6000,d2
00007092 6100 0000                  		bsr.w	sub_6954
00007096 45F8 F758                  		lea	($FFFFF758).w,a2
0000709A 47F8 F710                  		lea	($FFFFF710).w,a3
0000709E 6000 0000                  		bra.w	sub_69F4
000070A2                            ; End of function sub_6886
000070A2                            
000070A2                            ; ---------------------------------------------------------------------------
000070A2                            ; Subroutine to	display	correct	tiles as you move
000070A2                            ; ---------------------------------------------------------------------------
000070A2                            
000070A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070A2                            
000070A2                            
000070A2                            LoadTilesAsYouMove:			; XREF: Demo_Time
000070A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000070A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000070AE 45F8 FF32                  		lea	($FFFFFF32).w,a2
000070B2 47F8 FF18                  		lea	($FFFFFF18).w,a3
000070B6 49F8 A440                  		lea	($FFFFA440).w,a4
000070BA 343C 6000                  		move.w	#$6000,d2
000070BE 6100 0000                  		bsr.w	sub_6954
000070C2 45F8 FF34                  		lea	($FFFFFF34).w,a2
000070C6 47F8 FF20                  		lea	($FFFFFF20).w,a3
000070CA 6100 0000                  		bsr.w	sub_69F4
000070CE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000070D2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000070D6 49F8 A400                  		lea	($FFFFA400).w,a4
000070DA 343C 4000                  		move.w	#$4000,d2
000070DE 4A12                       		tst.b	(a2)
000070E0 6700                       		beq.s	locret_6952
000070E2 0892 0000                  		bclr	#0,(a2)
000070E6 6700                       		beq.s	loc_6908
000070E8 78F0                       		moveq	#-$10,d4
000070EA 7AF0                       		moveq	#-$10,d5
000070EC 6100 0000                  		bsr.w	sub_6C20
000070F0 78F0                       		moveq	#-$10,d4
000070F2 7AF0                       		moveq	#-$10,d5
000070F4 6100 0000                  		bsr.w	sub_6AD8
000070F8                            
000070F8                            loc_6908:
000070F8 0892 0001                  		bclr	#1,(a2)
000070FC 6700                       		beq.s	loc_6922
000070FE 383C 00E0                  		move.w	#$E0,d4
00007102 7AF0                       		moveq	#-$10,d5
00007104 6100 0000                  		bsr.w	sub_6C20
00007108 383C 00E0                  		move.w	#$E0,d4
0000710C 7AF0                       		moveq	#-$10,d5
0000710E 6100 0000                  		bsr.w	sub_6AD8
00007112                            
00007112                            loc_6922:
00007112 0892 0002                  		bclr	#2,(a2)
00007116 6700                       		beq.s	loc_6938
00007118 78F0                       		moveq	#-$10,d4
0000711A 7AF0                       		moveq	#-$10,d5
0000711C 6100 0000                  		bsr.w	sub_6C20
00007120 78F0                       		moveq	#-$10,d4
00007122 7AF0                       		moveq	#-$10,d5
00007124 6100 0000                  		bsr.w	sub_6B04
00007128                            
00007128                            loc_6938:
00007128 0892 0003                  		bclr	#3,(a2)
0000712C 6700                       		beq.s	locret_6952
0000712E 78F0                       		moveq	#-$10,d4
00007130 3A3C 0140                  		move.w	#$140,d5
00007134 6100 0000                  		bsr.w	sub_6C20
00007138 78F0                       		moveq	#-$10,d4
0000713A 3A3C 0140                  		move.w	#$140,d5
0000713E 6100 0000                  		bsr.w	sub_6B04
00007142                            
00007142                            locret_6952:
00007142 4E75                       		rts	
00007144                            ; End of function LoadTilesAsYouMove
00007144                            
00007144                            
00007144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007144                            
00007144                            
00007144                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00007144 4A12                       		tst.b	(a2)
00007146 6700 0000                  		beq.w	locret_69F2
0000714A 0892 0000                  		bclr	#0,(a2)
0000714E 6700                       		beq.s	loc_6972
00007150 78F0                       		moveq	#-$10,d4
00007152 7AF0                       		moveq	#-$10,d5
00007154 6100 0000                  		bsr.w	sub_6C20
00007158 78F0                       		moveq	#-$10,d4
0000715A 7AF0                       		moveq	#-$10,d5
0000715C 7C1F                       		moveq	#$1F,d6
0000715E 6100 0000                  		bsr.w	sub_6ADA
00007162                            
00007162                            loc_6972:
00007162 0892 0001                  		bclr	#1,(a2)
00007166 6700                       		beq.s	loc_698E
00007168 383C 00E0                  		move.w	#$E0,d4
0000716C 7AF0                       		moveq	#-$10,d5
0000716E 6100 0000                  		bsr.w	sub_6C20
00007172 383C 00E0                  		move.w	#$E0,d4
00007176 7AF0                       		moveq	#-$10,d5
00007178 7C1F                       		moveq	#$1F,d6
0000717A 6100 0000                  		bsr.w	sub_6ADA
0000717E                            
0000717E                            loc_698E:
0000717E 0892 0002                  		bclr	#2,(a2)
00007182 6700                       		beq.s	loc_69BE
00007184 78F0                       		moveq	#-$10,d4
00007186 7AF0                       		moveq	#-$10,d5
00007188 6100 0000                  		bsr.w	sub_6C20
0000718C 78F0                       		moveq	#-$10,d4
0000718E 7AF0                       		moveq	#-$10,d5
00007190 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007194 322B 0004                  		move.w	4(a3),d1
00007198 0241 FFF0                  		andi.w	#-$10,d1
0000719C 9C41                       		sub.w	d1,d6
0000719E 6D00                       		blt.s	loc_69BE
000071A0 E84E                       		lsr.w	#4,d6
000071A2 0C46 000F                  		cmpi.w	#$F,d6
000071A6 6500                       		bcs.s	loc_69BA
000071A8 7C0F                       		moveq	#$F,d6
000071AA                            
000071AA                            loc_69BA:
000071AA 6100 0000                  		bsr.w	sub_6B06
000071AE                            
000071AE                            loc_69BE:
000071AE 0892 0003                  		bclr	#3,(a2)
000071B2 6700                       		beq.s	locret_69F2
000071B4 78F0                       		moveq	#-$10,d4
000071B6 3A3C 0140                  		move.w	#$140,d5
000071BA 6100 0000                  		bsr.w	sub_6C20
000071BE 78F0                       		moveq	#-$10,d4
000071C0 3A3C 0140                  		move.w	#$140,d5
000071C4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000071C8 322B 0004                  		move.w	4(a3),d1
000071CC 0241 FFF0                  		andi.w	#-$10,d1
000071D0 9C41                       		sub.w	d1,d6
000071D2 6D00                       		blt.s	locret_69F2
000071D4 E84E                       		lsr.w	#4,d6
000071D6 0C46 000F                  		cmpi.w	#$F,d6
000071DA 6500                       		bcs.s	loc_69EE
000071DC 7C0F                       		moveq	#$F,d6
000071DE                            
000071DE                            loc_69EE:
000071DE 6100 0000                  		bsr.w	sub_6B06
000071E2                            
000071E2                            locret_69F2:
000071E2 4E75                       		rts	
000071E4                            ; End of function sub_6954
000071E4                            
000071E4                            
000071E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071E4                            
000071E4                            
000071E4                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000071E4 4A12                       		tst.b	(a2)
000071E6 6700 0000                  		beq.w	locret_6A80
000071EA 0892 0002                  		bclr	#2,(a2)
000071EE 6700                       		beq.s	loc_6A3E
000071F0 0C53 0010                  		cmpi.w	#$10,(a3)
000071F4 6500                       		bcs.s	loc_6A3E
000071F6 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000071FA 322B 0004                  		move.w	4(a3),d1
000071FE 0241 FFF0                  		andi.w	#-$10,d1
00007202 9841                       		sub.w	d1,d4
00007204 3F04                       		move.w	d4,-(sp)
00007206 7AF0                       		moveq	#-$10,d5
00007208 6100 0000                  		bsr.w	sub_6C20
0000720C 381F                       		move.w	(sp)+,d4
0000720E 7AF0                       		moveq	#-$10,d5
00007210 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007214 322B 0004                  		move.w	4(a3),d1
00007218 0241 FFF0                  		andi.w	#-$10,d1
0000721C 9C41                       		sub.w	d1,d6
0000721E 6D00                       		blt.s	loc_6A3E
00007220 E84E                       		lsr.w	#4,d6
00007222 0446 000E                  		subi.w	#$E,d6
00007226 6400                       		bcc.s	loc_6A3E
00007228 4446                       		neg.w	d6
0000722A 6100 0000                  		bsr.w	sub_6B06
0000722E                            
0000722E                            loc_6A3E:
0000722E 0892 0003                  		bclr	#3,(a2)
00007232 6700                       		beq.s	locret_6A80
00007234 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007238 322B 0004                  		move.w	4(a3),d1
0000723C 0241 FFF0                  		andi.w	#-$10,d1
00007240 9841                       		sub.w	d1,d4
00007242 3F04                       		move.w	d4,-(sp)
00007244 3A3C 0140                  		move.w	#$140,d5
00007248 6100 0000                  		bsr.w	sub_6C20
0000724C 381F                       		move.w	(sp)+,d4
0000724E 3A3C 0140                  		move.w	#$140,d5
00007252 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007256 322B 0004                  		move.w	4(a3),d1
0000725A 0241 FFF0                  		andi.w	#-$10,d1
0000725E 9C41                       		sub.w	d1,d6
00007260 6D00                       		blt.s	locret_6A80
00007262 E84E                       		lsr.w	#4,d6
00007264 0446 000E                  		subi.w	#$E,d6
00007268 6400                       		bcc.s	locret_6A80
0000726A 4446                       		neg.w	d6
0000726C 6100 0000                  		bsr.w	sub_6B06
00007270                            
00007270                            locret_6A80:
00007270 4E75                       		rts	
00007272                            ; End of function sub_69F4
00007272                            
00007272                            ; ===========================================================================
00007272 4A12                       		tst.b	(a2)
00007274 6700                       		beq.s	locret_6AD6
00007276 0892 0002                  		bclr	#2,(a2)
0000727A 6700                       		beq.s	loc_6AAC
0000727C 383C 00D0                  		move.w	#$D0,d4
00007280 322B 0004                  		move.w	4(a3),d1
00007284 0241 FFF0                  		andi.w	#-$10,d1
00007288 9841                       		sub.w	d1,d4
0000728A 3F04                       		move.w	d4,-(sp)
0000728C 7AF0                       		moveq	#-$10,d5
0000728E 6100 0000                  		bsr.w	sub_6C3C
00007292 381F                       		move.w	(sp)+,d4
00007294 7AF0                       		moveq	#-$10,d5
00007296 7C02                       		moveq	#2,d6
00007298 6100 0000                  		bsr.w	sub_6B06
0000729C                            
0000729C                            loc_6AAC:
0000729C 0892 0003                  		bclr	#3,(a2)
000072A0 6700                       		beq.s	locret_6AD6
000072A2 383C 00D0                  		move.w	#$D0,d4
000072A6 322B 0004                  		move.w	4(a3),d1
000072AA 0241 FFF0                  		andi.w	#-$10,d1
000072AE 9841                       		sub.w	d1,d4
000072B0 3F04                       		move.w	d4,-(sp)
000072B2 3A3C 0140                  		move.w	#$140,d5
000072B6 6100 0000                  		bsr.w	sub_6C3C
000072BA 381F                       		move.w	(sp)+,d4
000072BC 3A3C 0140                  		move.w	#$140,d5
000072C0 7C02                       		moveq	#2,d6
000072C2 6100 0000                  		bsr.w	sub_6B06
000072C6                            
000072C6                            locret_6AD6:
000072C6 4E75                       		rts	
000072C8                            
000072C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C8                            
000072C8                            
000072C8                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000072C8 7C15                       		moveq	#$15,d6
000072CA                            ; End of function sub_6AD8
000072CA                            
000072CA                            
000072CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072CA                            
000072CA                            
000072CA                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000072CA 2E3C 0080 0000             		move.l	#$800000,d7
000072D0 2200                       		move.l	d0,d1
000072D2                            
000072D2                            loc_6AE2:
000072D2 48E7 0C00                  		movem.l	d4-d5,-(sp)
000072D6 6100 0000                  		bsr.w	sub_6BD6
000072DA 2001                       		move.l	d1,d0
000072DC 6100 0000                  		bsr.w	sub_6B32
000072E0 5801                       		addq.b	#4,d1
000072E2 0201 007F                  		andi.b	#$7F,d1
000072E6 4CDF 0030                  		movem.l	(sp)+,d4-d5
000072EA 0645 0010                  		addi.w	#$10,d5
000072EE 51CE FFE2                  		dbf	d6,loc_6AE2
000072F2 4E75                       		rts	
000072F4                            ; End of function sub_6ADA
000072F4                            
000072F4                            
000072F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F4                            
000072F4                            
000072F4                            sub_6B04:				; XREF: LoadTilesAsYouMove
000072F4 7C0F                       		moveq	#$F,d6
000072F6                            ; End of function sub_6B04
000072F6                            
000072F6                            
000072F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072F6                            
000072F6                            
000072F6                            sub_6B06:				; XREF: sub_6954
000072F6 2E3C 0080 0000             		move.l	#$800000,d7
000072FC 2200                       		move.l	d0,d1
000072FE                            
000072FE                            loc_6B0E:
000072FE 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007302 6100 0000                  		bsr.w	sub_6BD6
00007306 2001                       		move.l	d1,d0
00007308 6100 0000                  		bsr.w	sub_6B32
0000730C 0641 0100                  		addi.w	#$100,d1
00007310 0241 0FFF                  		andi.w	#$FFF,d1
00007314 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007318 0644 0010                  		addi.w	#$10,d4
0000731C 51CE FFE0                  		dbf	d6,loc_6B0E
00007320 4E75                       		rts	
00007322                            ; End of function sub_6B06
00007322                            
00007322                            
00007322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007322                            
00007322                            
00007322                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007322 8042                       		or.w	d2,d0
00007324 4840                       		swap	d0
00007326 0810 0004                  		btst	#4,(a0)
0000732A 6600                       		bne.s	loc_6B6E
0000732C 0810 0003                  		btst	#3,(a0)
00007330 6600                       		bne.s	loc_6B4E
00007332 2A80                       		move.l	d0,(a5)
00007334 2C99                       		move.l	(a1)+,(a6)
00007336 D087                       		add.l	d7,d0
00007338 2A80                       		move.l	d0,(a5)
0000733A 2C99                       		move.l	(a1)+,(a6)
0000733C 4E75                       		rts	
0000733E                            ; ===========================================================================
0000733E                            
0000733E                            loc_6B4E:
0000733E 2A80                       		move.l	d0,(a5)
00007340 2819                       		move.l	(a1)+,d4
00007342 0A84 0800 0800             		eori.l	#$8000800,d4
00007348 4844                       		swap	d4
0000734A 2C84                       		move.l	d4,(a6)
0000734C D087                       		add.l	d7,d0
0000734E 2A80                       		move.l	d0,(a5)
00007350 2819                       		move.l	(a1)+,d4
00007352 0A84 0800 0800             		eori.l	#$8000800,d4
00007358 4844                       		swap	d4
0000735A 2C84                       		move.l	d4,(a6)
0000735C 4E75                       		rts	
0000735E                            ; ===========================================================================
0000735E                            
0000735E                            loc_6B6E:
0000735E 0810 0003                  		btst	#3,(a0)
00007362 6600                       		bne.s	loc_6B90
00007364 2A80                       		move.l	d0,(a5)
00007366 2A19                       		move.l	(a1)+,d5
00007368 2819                       		move.l	(a1)+,d4
0000736A 0A84 1000 1000             		eori.l	#$10001000,d4
00007370 2C84                       		move.l	d4,(a6)
00007372 D087                       		add.l	d7,d0
00007374 2A80                       		move.l	d0,(a5)
00007376 0A85 1000 1000             		eori.l	#$10001000,d5
0000737C 2C85                       		move.l	d5,(a6)
0000737E 4E75                       		rts	
00007380                            ; ===========================================================================
00007380                            
00007380                            loc_6B90:
00007380 2A80                       		move.l	d0,(a5)
00007382 2A19                       		move.l	(a1)+,d5
00007384 2819                       		move.l	(a1)+,d4
00007386 0A84 1800 1800             		eori.l	#$18001800,d4
0000738C 4844                       		swap	d4
0000738E 2C84                       		move.l	d4,(a6)
00007390 D087                       		add.l	d7,d0
00007392 2A80                       		move.l	d0,(a5)
00007394 0A85 1800 1800             		eori.l	#$18001800,d5
0000739A 4845                       		swap	d5
0000739C 2C85                       		move.l	d5,(a6)
0000739E 4E75                       		rts	
000073A0                            ; End of function sub_6B32
000073A0                            
000073A0                            ; ===========================================================================
000073A0 4E75                       		rts	
000073A2                            ; ===========================================================================
000073A2 2A80                       		move.l	d0,(a5)
000073A4 3A3C 2000                  		move.w	#$2000,d5
000073A8 3819                       		move.w	(a1)+,d4
000073AA D845                       		add.w	d5,d4
000073AC 3C84                       		move.w	d4,(a6)
000073AE 3819                       		move.w	(a1)+,d4
000073B0 D845                       		add.w	d5,d4
000073B2 3C84                       		move.w	d4,(a6)
000073B4 D087                       		add.l	d7,d0
000073B6 2A80                       		move.l	d0,(a5)
000073B8 3819                       		move.w	(a1)+,d4
000073BA D845                       		add.w	d5,d4
000073BC 3C84                       		move.w	d4,(a6)
000073BE 3819                       		move.w	(a1)+,d4
000073C0 D845                       		add.w	d5,d4
000073C2 3C84                       		move.w	d4,(a6)
000073C4 4E75                       		rts	
000073C6                            
000073C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073C6                            
000073C6                            
000073C6                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000073C6 43F8 B000                  		lea	($FFFFB000).w,a1
000073CA D86B 0004                  		add.w	4(a3),d4
000073CE DA53                       		add.w	(a3),d5
000073D0 3604                       		move.w	d4,d3
000073D2 E24B                       		lsr.w	#1,d3
000073D4 0243 0380                  		andi.w	#$380,d3
000073D8 E64D                       		lsr.w	#3,d5
000073DA 3005                       		move.w	d5,d0
000073DC EA48                       		lsr.w	#5,d0
000073DE 0240 007F                  		andi.w	#$7F,d0
000073E2 D043                       		add.w	d3,d0
000073E4 76FF                       		moveq	#-1,d3
000073E6 1634 0000                  		move.b	(a4,d0.w),d3
000073EA 6700                       		beq.s	locret_6C1E
000073EC 5303                       		subq.b	#1,d3
000073EE 0243 007F                  		andi.w	#$7F,d3
000073F2 EE5B                       		ror.w	#7,d3
000073F4 D844                       		add.w	d4,d4
000073F6 0244 01E0                  		andi.w	#$1E0,d4
000073FA 0245 001E                  		andi.w	#$1E,d5
000073FE D644                       		add.w	d4,d3
00007400 D645                       		add.w	d5,d3
00007402 2043                       		movea.l	d3,a0
00007404 3610                       		move.w	(a0),d3
00007406 0243 03FF                  		andi.w	#$3FF,d3
0000740A E74B                       		lsl.w	#3,d3
0000740C D2C3                       		adda.w	d3,a1
0000740E                            
0000740E                            locret_6C1E:
0000740E 4E75                       		rts	
00007410                            ; End of function sub_6BD6
00007410                            
00007410                            
00007410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007410                            
00007410                            
00007410                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007410 D86B 0004                  		add.w	4(a3),d4
00007414 DA53                       		add.w	(a3),d5
00007416 0244 00F0                  		andi.w	#$F0,d4
0000741A 0245 01F0                  		andi.w	#$1F0,d5
0000741E E94C                       		lsl.w	#4,d4
00007420 E44D                       		lsr.w	#2,d5
00007422 D845                       		add.w	d5,d4
00007424 7003                       		moveq	#3,d0
00007426 4840                       		swap	d0
00007428 3004                       		move.w	d4,d0
0000742A 4E75                       		rts	
0000742C                            ; End of function sub_6C20
0000742C                            
0000742C                            
0000742C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000742C                            ; not used
0000742C                            
0000742C                            
0000742C                            sub_6C3C:
0000742C D86B 0004                  		add.w	4(a3),d4
00007430 DA53                       		add.w	(a3),d5
00007432 0244 00F0                  		andi.w	#$F0,d4
00007436 0245 01F0                  		andi.w	#$1F0,d5
0000743A E94C                       		lsl.w	#4,d4
0000743C E44D                       		lsr.w	#2,d5
0000743E D845                       		add.w	d5,d4
00007440 7002                       		moveq	#2,d0
00007442 4840                       		swap	d0
00007444 3004                       		move.w	d4,d0
00007446 4E75                       		rts	
00007448                            ; End of function sub_6C3C
00007448                            
00007448                            ; ---------------------------------------------------------------------------
00007448                            ; Subroutine to	load tiles as soon as the level	appears
00007448                            ; ---------------------------------------------------------------------------
00007448                            
00007448                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007448                            
00007448                            
00007448                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007448 4BF9 00C0 0004             		lea	($C00004).l,a5
0000744E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007454 47F8 F700                  		lea	($FFFFF700).w,a3
00007458 49F8 A400                  		lea	($FFFFA400).w,a4
0000745C 343C 4000                  		move.w	#$4000,d2
00007460 6100                       		bsr.s	LoadTilesFromStart2
00007462 47F8 F708                  		lea	($FFFFF708).w,a3
00007466 49F8 A440                  		lea	($FFFFA440).w,a4
0000746A 343C 6000                  		move.w	#$6000,d2
0000746E                            ; End of function LoadTilesFromStart
0000746E                            
0000746E                            
0000746E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000746E                            
0000746E                            
0000746E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000746E 78F0                       		moveq	#-$10,d4
00007470 7C0F                       		moveq	#$F,d6
00007472                            
00007472                            loc_6C82:
00007472 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007476 7A00                       		moveq	#0,d5
00007478 3204                       		move.w	d4,d1
0000747A 6100 FF94                  		bsr.w	sub_6C20
0000747E 3801                       		move.w	d1,d4
00007480 7A00                       		moveq	#0,d5
00007482 7C1F                       		moveq	#$1F,d6
00007484 6100 FE44                  		bsr.w	sub_6ADA
00007488 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000748C 0644 0010                  		addi.w	#$10,d4
00007490 51CE FFE0                  		dbf	d6,loc_6C82
00007494 4E75                       		rts	
00007496                            ; End of function LoadTilesFromStart2
00007496                            
00007496                            ; ---------------------------------------------------------------------------
00007496                            ; Main Load Block loading subroutine
00007496                            ; ---------------------------------------------------------------------------
00007496                            
00007496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007496                            
00007496                            
00007496                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007496 7000                       		moveq	#0,d0
00007498 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000749C E948                       		lsl.w	#4,d0
0000749E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000074A4 45F2 0000                  		lea	(a2,d0.w),a2
000074A8 2F0A                       		move.l	a2,-(sp)
000074AA 588A                       		addq.l	#4,a2
000074AC 205A                       		movea.l	(a2)+,a0
000074AE 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000074B2 303C 0000                  		move.w	#0,d0
000074B6 6100 A464                  		bsr.w	EniDec
000074BA 205A                       		movea.l	(a2)+,a0
000074BC 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000074C2 6100 A5D6                  		bsr.w	KosDec
000074C6 6100 0000                  		bsr.w	LevelLayoutLoad
000074CA 301A                       		move.w	(a2)+,d0
000074CC 3012                       		move.w	(a2),d0
000074CE 0240 00FF                  		andi.w	#$FF,d0
000074D2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000074D8 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000074DA 700C                       		moveq	#$C,d0		; use SB3 pallet
000074DC                            
000074DC                            MLB_ChkSBZPal:
000074DC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000074E2 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000074E4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000074EA 6600                       		bne.s	MLB_NormalPal	; if not, branch
000074EC                            
000074EC                            MLB_UsePal0E:
000074EC 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000074EE                            
000074EE                            MLB_NormalPal:
000074EE 6100 ADD6                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000074F2 245F                       		movea.l	(sp)+,a2
000074F4 584A                       		addq.w	#4,a2
000074F6 7000                       		moveq	#0,d0
000074F8 1012                       		move.b	(a2),d0
000074FA 6700                       		beq.s	locret_6D10
000074FC 6100 A280                  		bsr.w	LoadPLC		; load pattern load cues
00007500                            
00007500                            locret_6D10:
00007500 4E75                       		rts	
00007502                            ; End of function MainLoadBlockLoad
00007502                            
00007502                            ; ---------------------------------------------------------------------------
00007502                            ; Level	layout loading subroutine
00007502                            ; ---------------------------------------------------------------------------
00007502                            
00007502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007502                            
00007502                            
00007502                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007502 47F8 A400                  		lea	($FFFFA400).w,a3
00007506 323C 01FF                  		move.w	#$1FF,d1
0000750A 7000                       		moveq	#0,d0
0000750C                            
0000750C                            LevLoad_ClrRam:
0000750C 26C0                       		move.l	d0,(a3)+
0000750E 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007512                            
00007512 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007516 7200                       		moveq	#0,d1
00007518 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000751C 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007520 7202                       		moveq	#2,d1
00007522                            ; End of function LevelLayoutLoad
00007522                            
00007522                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007522                            
00007522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007522                            
00007522                            
00007522                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007522 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007526 ED08                       		lsl.b	#6,d0
00007528 EA48                       		lsr.w	#5,d0
0000752A 3400                       		move.w	d0,d2
0000752C D040                       		add.w	d0,d0
0000752E D042                       		add.w	d2,d0
00007530 D041                       		add.w	d1,d0
00007532 43F9 0000 0000             		lea	(Level_Index).l,a1
00007538 3031 0000                  		move.w	(a1,d0.w),d0
0000753C 43F1 0000                  		lea	(a1,d0.w),a1
00007540 7200                       		moveq	#0,d1
00007542 3401                       		move.w	d1,d2
00007544 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007546 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007548                            
00007548                            LevLoad_NumRows:
00007548 3001                       		move.w	d1,d0
0000754A 204B                       		movea.l	a3,a0
0000754C                            
0000754C                            LevLoad_Row:
0000754C 10D9                       		move.b	(a1)+,(a0)+
0000754E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007552 47EB 0080                  		lea	$80(a3),a3	; do next row
00007556 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000755A 4E75                       		rts	
0000755C                            ; End of function LevelLayoutLoad2
0000755C                            
0000755C                            ; ---------------------------------------------------------------------------
0000755C                            ; Dynamic screen resize	loading	subroutine
0000755C                            ; ---------------------------------------------------------------------------
0000755C                            
0000755C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000755C                            
0000755C                            
0000755C                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000755C 7000                       		moveq	#0,d0
0000755E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007562 D040                       		add.w	d0,d0
00007564 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007568 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000756C 7202                       		moveq	#2,d1
0000756E 3038 F726                  		move.w	($FFFFF726).w,d0
00007572 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007576 6700                       		beq.s	locret_6DAA
00007578 6400                       		bcc.s	loc_6DAC
0000757A 4441                       		neg.w	d1
0000757C 3038 F704                  		move.w	($FFFFF704).w,d0
00007580 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007584 6300                       		bls.s	loc_6DA0
00007586 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000758A 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007590                            
00007590                            loc_6DA0:
00007590 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007594 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000759A                            
0000759A                            locret_6DAA:
0000759A 4E75                       		rts	
0000759C                            ; ===========================================================================
0000759C                            
0000759C                            loc_6DAC:				; XREF: DynScrResizeLoad
0000759C 3038 F704                  		move.w	($FFFFF704).w,d0
000075A0 5040                       		addq.w	#8,d0
000075A2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000075A6 6500                       		bcs.s	loc_6DC4
000075A8 0838 0001 D022             		btst	#1,($FFFFD022).w
000075AE 6700                       		beq.s	loc_6DC4
000075B0 D241                       		add.w	d1,d1
000075B2 D241                       		add.w	d1,d1
000075B4                            
000075B4                            loc_6DC4:
000075B4 D378 F72E                  		add.w	d1,($FFFFF72E).w
000075B8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000075BE 4E75                       		rts	
000075C0                            ; End of function DynScrResizeLoad
000075C0                            
000075C0                            ; ===========================================================================
000075C0                            ; ---------------------------------------------------------------------------
000075C0                            ; Offset index for dynamic screen resizing
000075C0                            ; ---------------------------------------------------------------------------
000075C0 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000075C4 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000075C8 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000075CC 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
000075D0                            ; ===========================================================================
000075D0                            ; ---------------------------------------------------------------------------
000075D0                            ; Green	Hill Zone dynamic screen resizing
000075D0                            ; ---------------------------------------------------------------------------
000075D0                            
000075D0                            Resize_GHZ:				; XREF: Resize_Index
000075D0 7000                       		moveq	#0,d0
000075D2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075D6 D040                       		add.w	d0,d0
000075D8 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000075DC 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000075E0                            ; ===========================================================================
000075E0 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000075E2 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000075E4 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000075E6                            ; ===========================================================================
000075E6                            
000075E6                            Resize_GHZ1:
000075E6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000075EC 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000075F2 6500                       		bcs.s	locret_6E08	; if not, branch
000075F4 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000075FA                            
000075FA                            locret_6E08:
000075FA 4E75                       		rts	
000075FC                            ; ===========================================================================
000075FC                            
000075FC                            Resize_GHZ2:
000075FC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007602 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007608 6500                       		bcs.s	locret_6E3A
0000760A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007610 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007616 6500                       		bcs.s	locret_6E3A
00007618 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000761E 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007624 6500                       		bcs.s	locret_6E3A
00007626 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
0000762C 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007632 6500                       		bcs.s	locret_6E3A
00007634 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
0000763A                            		
0000763A                            locret_6E3A:
0000763A 4E75                       		rts	
0000763C                            ; ===========================================================================
0000763C                            
0000763C                            Resize_GHZ3:
0000763C 7000                       		moveq	#0,d0
0000763E 1038 F742                  		move.b	($FFFFF742).w,d0
00007642 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007646 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000764A                            ; ===========================================================================
0000764A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000764C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000764E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007650                            ; ===========================================================================
00007650                            
00007650                            Resize_GHZ3main:
00007650 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007656 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000765C 6500                       		bcs.s	locret_6E96
0000765E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007664 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000766A 6500                       		bcs.s	locret_6E96
0000766C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007672 6500                       		bcs.s	loc_6E98
00007674 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000767A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007680 6400                       		bcc.s	loc_6E8E
00007682 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007688 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000768E                            
0000768E                            loc_6E8E:
0000768E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007694 6400                       		bcc.s	loc_6E98
00007696                            
00007696                            locret_6E96:
00007696 4E75                       		rts	
00007698                            ; ===========================================================================
00007698                            
00007698                            loc_6E98:
00007698 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000769E 5438 F742                  		addq.b	#2,($FFFFF742).w
000076A2 4E75                       		rts	
000076A4                            ; ===========================================================================
000076A4                            
000076A4                            Resize_GHZ3boss:
000076A4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000076AA 6400                       		bcc.s	loc_6EB0
000076AC 5538 F742                  		subq.b	#2,($FFFFF742).w
000076B0                            
000076B0                            loc_6EB0:
000076B0 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000076B6 6500                       		bcs.s	locret_6EE8
000076B8 6100 0000                  		bsr.w	SingleObjLoad
000076BC 6600                       		bne.s	loc_6ED0
000076BE 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000076C2 337C 2A60 0008             		move.w	#$2A60,8(a1)
000076C8 337C 0280 000C             		move.w	#$280,$C(a1)
000076CE                            
000076CE                            loc_6ED0:
000076CE 303C 008C                  		move.w	#$8C,d0
000076D2 6100 9EC0                  		bsr.w	PlaySound	; play boss music
000076D6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076DC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E0 7011                       		moveq	#$11,d0
000076E2 6000 A09A                  		bra.w	LoadPLC		; load boss patterns
000076E6                            ; ===========================================================================
000076E6                            
000076E6                            locret_6EE8:
000076E6 4E75                       		rts	
000076E8                            ; ===========================================================================
000076E8                            
000076E8                            Resize_GHZ3end:
000076E8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076EE 4E75                       		rts	
000076F0                            ; ===========================================================================
000076F0                            ; ---------------------------------------------------------------------------
000076F0                            ; Labyrinth Zone dynamic screen	resizing
000076F0                            ; ---------------------------------------------------------------------------
000076F0                            
000076F0                            Resize_LZ:				; XREF: Resize_Index
000076F0 7000                       		moveq	#0,d0
000076F2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076F6 D040                       		add.w	d0,d0
000076F8 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000076FC 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007700                            ; ===========================================================================
00007700 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007702 0000                       		dc.w Resize_LZ12-Resize_LZx
00007704 0000                       		dc.w Resize_LZ3-Resize_LZx
00007706 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007708                            ; ===========================================================================
00007708                            
00007708                            Resize_LZ12:
00007708 4E75                       		rts	
0000770A                            ; ===========================================================================
0000770A                            
0000770A                            Resize_LZ3:
0000770A 7000                       		moveq	#0,d0
0000770C 1038 F742                  		move.b	($FFFFF742).w,d0
00007710 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007714 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007718                            ; ===========================================================================
00007718                            off_6E4A2:	
00007718 0000                       		dc.w Resize_LZ3boss-off_6E4A2
0000771A 0000                       		dc.w Resize_LZ3end-off_6E4A2
0000771C                            ; ===========================================================================
0000771C                            Resize_LZ3boss:
0000771C 4A38 F742                  		tst.b	($FFFFF742).w
00007720 6600                       		bne.s	locret_6F62
00007722 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007728 6500                       		bcs.s	locret_6F62
0000772A 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007730 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007736                            
00007736 6100 0000                  		bsr.w	SingleObjLoad
0000773A 6600                       		bne.s	loc_6F4A
0000773C 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007740 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007746 337C 06E0 000C             		move.w	#$6E0,$C(a1)
0000774C                            loc_6F4A:
0000774C 303C 008C                  		move.w	#$8C,d0
00007750 6100 9E42                  		bsr.w	PlaySound	; play boss music
00007754 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000775A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000775E 7022                       		moveq	#$22,d0
00007760 6000 A01C                  		bra.w	LoadPLC		; load boss patterns
00007764                            ; ===========================================================================
00007764                            
00007764                            locret_6F62:
00007764 4E75                       		rts	
00007766                            ; ===========================================================================
00007766                            
00007766                            Resize_LZ3end:
00007766 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000776C 4E75                       		rts	
0000776E                            ; ===========================================================================
0000776E                            
0000776E                            Resize_SBZ3:
0000776E 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007774 6500                       		bcs.s	locret_6F8C
00007776 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
0000777C 6400                       		bcc.s	locret_6F8C	; if not, branch
0000777E 4238 FE30                  		clr.b	($FFFFFE30).w
00007782 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007788 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
0000778E 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007794                            
00007794                            locret_6F8C:
00007794 4E75                       		rts	
00007796                            ; ===========================================================================
00007796                            ; ---------------------------------------------------------------------------
00007796                            ; Marble Zone dynamic screen resizing
00007796                            ; ---------------------------------------------------------------------------
00007796                            
00007796                            Resize_MZ:				; XREF: Resize_Index
00007796 7000                       		moveq	#0,d0
00007798 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000779C D040                       		add.w	d0,d0
0000779E 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000077A2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000077A6                            ; ===========================================================================
000077A6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000077A8 0000                       		dc.w Resize_MZ2-Resize_MZx
000077AA 0000                       		dc.w Resize_MZ3-Resize_MZx
000077AC                            ; ===========================================================================
000077AC                            
000077AC                            Resize_MZ1:
000077AC 7000                       		moveq	#0,d0
000077AE 1038 F742                  		move.b	($FFFFF742).w,d0
000077B2 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000077B6 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000077BA                            ; ===========================================================================
000077BA 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000077BC 0000                       		dc.w loc_6FEA-off_6FB2
000077BE 0000                       		dc.w loc_702E-off_6FB2
000077C0 0000                       		dc.w loc_7050-off_6FB2
000077C2                            ; ===========================================================================
000077C2                            
000077C2                            loc_6FBA:
000077C2 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000077C8 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000077CE 6500                       		bcs.s	locret_6FE8
000077D0 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000077D6 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000077DC 6500                       		bcs.s	locret_6FE8
000077DE 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000077E4 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077EA 6500                       		bcs.s	locret_6FE8
000077EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F0                            
000077F0                            locret_6FE8:
000077F0 4E75                       		rts	
000077F2                            ; ===========================================================================
000077F2                            
000077F2                            loc_6FEA:
000077F2 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000077F8 6400                       		bcc.s	loc_6FF8
000077FA 5538 F742                  		subq.b	#2,($FFFFF742).w
000077FE 4E75                       		rts	
00007800                            ; ===========================================================================
00007800                            
00007800                            loc_6FF8:
00007800 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007806 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000780C 6400                       		bcc.s	locret_702C
0000780E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007814 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000781A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007820 6400                       		bcc.s	locret_702C
00007822 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007828 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000782E 6500                       		bcs.s	locret_702C
00007830 5438 F742                  		addq.b	#2,($FFFFF742).w
00007834                            
00007834                            locret_702C:
00007834 4E75                       		rts	
00007836                            ; ===========================================================================
00007836                            
00007836                            loc_702E:
00007836 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000783C 6400                       		bcc.s	loc_703C
0000783E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007842 4E75                       		rts	
00007844                            ; ===========================================================================
00007844                            
00007844                            loc_703C:
00007844 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000784A 6500                       		bcs.s	locret_704E
0000784C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007852 5438 F742                  		addq.b	#2,($FFFFF742).w
00007856                            
00007856                            locret_704E:
00007856 4E75                       		rts	
00007858                            ; ===========================================================================
00007858                            
00007858                            loc_7050:
00007858 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
0000785E 6500                       		bcs.s	locret_7072
00007860 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007866 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000786C 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007872 6500                       		bcs.s	locret_7072
00007874 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000787A                            
0000787A                            locret_7072:
0000787A 4E75                       		rts	
0000787C                            ; ===========================================================================
0000787C                            
0000787C                            Resize_MZ2:
0000787C 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007882 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007888 6500                       		bcs.s	locret_7088
0000788A 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007890                            
00007890                            locret_7088:
00007890 4E75                       		rts	
00007892                            ; ===========================================================================
00007892                            
00007892                            Resize_MZ3:
00007892 7000                       		moveq	#0,d0
00007894 1038 F742                  		move.b	($FFFFF742).w,d0
00007898 303B 0000                  		move.w	off_7098(pc,d0.w),d0
0000789C 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000078A0                            ; ===========================================================================
000078A0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000078A2 0000                       		dc.w Resize_MZ3end-off_7098
000078A4                            ; ===========================================================================
000078A4                            
000078A4                            Resize_MZ3boss:
000078A4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000078AA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000078B0 6500                       		bcs.s	locret_70E8
000078B2 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000078B8 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000078BE 6500                       		bcs.s	locret_70E8
000078C0 6100 0000                  		bsr.w	SingleObjLoad
000078C4 6600                       		bne.s	loc_70D0
000078C6 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000078CA 337C 19F0 0008             		move.w	#$19F0,8(a1)
000078D0 337C 022C 000C             		move.w	#$22C,$C(a1)
000078D6                            
000078D6                            loc_70D0:
000078D6 303C 008C                  		move.w	#$8C,d0
000078DA 6100 9CB8                  		bsr.w	PlaySound	; play boss music
000078DE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000078E8 7011                       		moveq	#$11,d0
000078EA 6000 9E92                  		bra.w	LoadPLC		; load boss patterns
000078EE                            ; ===========================================================================
000078EE                            
000078EE                            locret_70E8:
000078EE 4E75                       		rts	
000078F0                            ; ===========================================================================
000078F0                            
000078F0                            Resize_MZ3end:
000078F0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078F6 4E75                       		rts	
000078F8                            ; ===========================================================================
000078F8                            ; ---------------------------------------------------------------------------
000078F8                            ; Star Light Zone dynamic screen resizing
000078F8                            ; ---------------------------------------------------------------------------
000078F8                            
000078F8                            Resize_SLZ:				; XREF: Resize_Index
000078F8 7000                       		moveq	#0,d0
000078FA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000078FE D040                       		add.w	d0,d0
00007900 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007904 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007908                            ; ===========================================================================
00007908 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000790A 0000                       		dc.w Resize_SLZ2-Resize_SLZx
0000790C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000790E                            ; ===========================================================================
0000790E                            
0000790E                            Resize_SLZ1:
0000790E 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007914 4E75                       		rts	
00007916                            
00007916                            Resize_SLZ2:
00007916 4E75                       		rts	
00007918                            ; ===========================================================================
00007918                            
00007918                            Resize_SLZ3:
00007918 7000                       		moveq	#0,d0
0000791A 1038 F742                  		move.b	($FFFFF742).w,d0
0000791E 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007922 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007926                            ; ===========================================================================
00007926 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007928 0000                       		dc.w Resize_SLZ3boss-off_7118
0000792A 0000                       		dc.w Resize_SLZ3end-off_7118
0000792C                            ; ===========================================================================
0000792C                            
0000792C                            Resize_SLZ3main:
0000792C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007932 6500                       		bcs.s	locret_7130
00007934 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000793A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000793E                            
0000793E                            locret_7130:
0000793E 4E75                       		rts	
00007940                            ; ===========================================================================
00007940                            
00007940                            Resize_SLZ3boss:
00007940 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007946 6500                       		bcs.s	locret_715C
00007948 6100 0000                  		bsr.w	SingleObjLoad
0000794C 6600                       		bne.s	loc_7144
0000794E 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007952                            
00007952                            loc_7144:
00007952 303C 008C                  		move.w	#$8C,d0
00007956 6100 9C3C                  		bsr.w	PlaySound	; play boss music
0000795A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007960 5438 F742                  		addq.b	#2,($FFFFF742).w
00007964 7011                       		moveq	#$11,d0
00007966 6000 9E16                  		bra.w	LoadPLC		; load boss patterns
0000796A                            ; ===========================================================================
0000796A                            
0000796A                            locret_715C:
0000796A 4E75                       		rts	
0000796C                            ; ===========================================================================
0000796C                            
0000796C                            Resize_SLZ3end:
0000796C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007972 4E75                       		rts
00007974 4E75                       		rts
00007976                            ; ===========================================================================
00007976                            ; ---------------------------------------------------------------------------
00007976                            ; Spring Yard Zone dynamic screen resizing
00007976                            ; ---------------------------------------------------------------------------
00007976                            
00007976                            Resize_SYZ:				; XREF: Resize_Index
00007976 7000                       		moveq	#0,d0
00007978 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000797C D040                       		add.w	d0,d0
0000797E 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007982 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007986                            ; ===========================================================================
00007986 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007988 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000798A 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000798C                            ; ===========================================================================
0000798C                            
0000798C                            Resize_SYZ1:
0000798C 4E75                       		rts	
0000798E                            ; ===========================================================================
0000798E                            
0000798E                            Resize_SYZ2:
0000798E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007994 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000799A 6500                       		bcs.s	locret_71A2
0000799C 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000079A2 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000079A8 6500                       		bcs.s	locret_71A2
000079AA 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000079B0                            
000079B0                            locret_71A2:
000079B0 4E75                       		rts	
000079B2                            ; ===========================================================================
000079B2                            
000079B2                            Resize_SYZ3:
000079B2 7000                       		moveq	#0,d0
000079B4 1038 F742                  		move.b	($FFFFF742).w,d0
000079B8 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000079BC 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000079C0                            ; ===========================================================================
000079C0 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000079C2 0000                       		dc.w Resize_SYZ3boss-off_71B2
000079C4 0000                       		dc.w Resize_SYZ3end-off_71B2
000079C6                            ; ===========================================================================
000079C6                            
000079C6                            Resize_SYZ3main:
000079C6 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000079CC 6500                       		bcs.s	locret_71CE
000079CE 6100 0000                  		bsr.w	SingleObjLoad
000079D2 6600                       		bne.s	locret_71CE
000079D4 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000079D8 5438 F742                  		addq.b	#2,($FFFFF742).w
000079DC                            
000079DC                            locret_71CE:
000079DC 4E75                       		rts	
000079DE                            ; ===========================================================================
000079DE                            
000079DE                            Resize_SYZ3boss:
000079DE 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000079E4 6500                       		bcs.s	locret_7200
000079E6 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000079EC 6100 0000                  		bsr.w	SingleObjLoad
000079F0 6600                       		bne.s	loc_71EC
000079F2 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000079F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000079FA                            
000079FA                            loc_71EC:
000079FA 303C 008C                  		move.w	#$8C,d0
000079FE 6100 9B94                  		bsr.w	PlaySound	; play boss music
00007A02 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007A08 7011                       		moveq	#$11,d0
00007A0A 6000 9D72                  		bra.w	LoadPLC		; load boss patterns
00007A0E                            ; ===========================================================================
00007A0E                            
00007A0E                            locret_7200:
00007A0E 4E75                       		rts	
00007A10                            ; ===========================================================================
00007A10                            
00007A10                            Resize_SYZ3end:
00007A10 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007A16 4E75                       		rts	
00007A18                            ; ===========================================================================
00007A18                            ; ---------------------------------------------------------------------------
00007A18                            ; Scrap	Brain Zone dynamic screen resizing
00007A18                            ; ---------------------------------------------------------------------------
00007A18                            
00007A18                            Resize_SBZ:				; XREF: Resize_Index
00007A18 7000                       		moveq	#0,d0
00007A1A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007A1E D040                       		add.w	d0,d0
00007A20 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007A24 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007A28                            ; ===========================================================================
00007A28 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007A2A 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007A2C 0000                       		dc.w Resize_FZ-Resize_SBZx
00007A2E                            ; ===========================================================================
00007A2E                            
00007A2E                            Resize_SBZ1:
00007A2E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007A34 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007A3A 6500                       		bcs.s	locret_7242
00007A3C 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007A42 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007A48 6500                       		bcs.s	locret_7242
00007A4A 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007A50                            
00007A50                            locret_7242:
00007A50 4E75                       		rts	
00007A52                            ; ===========================================================================
00007A52                            
00007A52                            Resize_SBZ2:
00007A52 7000                       		moveq	#0,d0
00007A54 1038 F742                  		move.b	($FFFFF742).w,d0
00007A58 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007A5C 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007A60                            ; ===========================================================================
00007A60 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007A62 0000                       		dc.w Resize_SBZ2boss-off_7252
00007A64 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007A66 0000                       		dc.w Resize_SBZ2end-off_7252
00007A68                            ; ===========================================================================
00007A68                            
00007A68                            Resize_SBZ2main:
00007A68 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007A6E 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007A74 6500                       		bcs.s	locret_727A
00007A76 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007A7C 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007A82 6500                       		bcs.s	locret_727A
00007A84 5438 F742                  		addq.b	#2,($FFFFF742).w
00007A88                            
00007A88                            locret_727A:
00007A88 4E75                       		rts	
00007A8A                            ; ===========================================================================
00007A8A                            
00007A8A                            Resize_SBZ2boss:
00007A8A 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007A90 6500                       		bcs.s	locret_7298
00007A92 6100 0000                  		bsr.w	SingleObjLoad
00007A96 6600                       		bne.s	locret_7298
00007A98 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007A9C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AA0 701E                       		moveq	#$1E,d0
00007AA2 6000 9CDA                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007AA6                            ; ===========================================================================
00007AA6                            
00007AA6                            locret_7298:
00007AA6 4E75                       		rts	
00007AA8                            ; ===========================================================================
00007AA8                            
00007AA8                            Resize_SBZ2boss2:
00007AA8 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007AAE 6500                       		bcs.s	loc_72B6
00007AB0 6100 0000                  		bsr.w	SingleObjLoad
00007AB4 6600                       		bne.s	loc_72B0
00007AB6 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007ABA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007ABE                            
00007ABE                            loc_72B0:
00007ABE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007AC4                            
00007AC4                            loc_72B6:
00007AC4 6000                       		bra.s	loc_72C2
00007AC6                            ; ===========================================================================
00007AC6                            
00007AC6                            Resize_SBZ2end:
00007AC6 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007ACC 6500                       		bcs.s	loc_72C2
00007ACE 4E75                       		rts	
00007AD0                            ; ===========================================================================
00007AD0                            
00007AD0                            loc_72C2:
00007AD0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007AD6 4E75                       		rts	
00007AD8                            ; ===========================================================================
00007AD8                            
00007AD8                            Resize_FZ:
00007AD8 7000                       		moveq	#0,d0
00007ADA 1038 F742                  		move.b	($FFFFF742).w,d0
00007ADE 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007AE2 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007AE6                            ; ===========================================================================
00007AE6 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007AEA 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007AEE 0000                       		dc.w Resize_FZend2-off_72D8
00007AF0                            ; ===========================================================================
00007AF0                            
00007AF0                            Resize_FZmain:
00007AF0 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
00007AF6 6500                       		bcs.s	loc_72F4
00007AF8 5438 F742                  		addq.b	#2,($FFFFF742).w
00007AFC 701F                       		moveq	#$1F,d0
00007AFE 6100 9C7E                  		bsr.w	LoadPLC		; load FZ boss patterns
00007B02                            
00007B02                            loc_72F4:
00007B02 60CC                       		bra.s	loc_72C2
00007B04                            ; ===========================================================================
00007B04                            
00007B04                            Resize_FZboss:
00007B04 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007B0A 6500                       		bcs.s	loc_7312
00007B0C 6100 0000                  		bsr.w	SingleObjLoad
00007B10 6600                       		bne.s	loc_7312
00007B12 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007B16 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B1A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007B20                            
00007B20                            loc_7312:
00007B20 60AE                       		bra.s	loc_72C2
00007B22                            ; ===========================================================================
00007B22                            
00007B22                            Resize_FZend:
00007B22 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007B28 6500                       		bcs.s	loc_7320
00007B2A 5438 F742                  		addq.b	#2,($FFFFF742).w
00007B2E                            
00007B2E                            loc_7320:
00007B2E 60A0                       		bra.s	loc_72C2
00007B30                            ; ===========================================================================
00007B30                            
00007B30                            locret_7322:
00007B30 4E75                       		rts	
00007B32                            ; ===========================================================================
00007B32                            
00007B32                            Resize_FZend2:
00007B32 609C                       		bra.s	loc_72C2
00007B34                            ; ===========================================================================
00007B34                            ; ---------------------------------------------------------------------------
00007B34                            ; Ending sequence dynamic screen resizing (empty)
00007B34                            ; ---------------------------------------------------------------------------
00007B34                            
00007B34                            Resize_Ending:				; XREF: Resize_Index
00007B34 4E75                       		rts	
00007B36                            ; ===========================================================================
00007B36                            ; ---------------------------------------------------------------------------
00007B36                            ; Object 11 - GHZ bridge
00007B36                            ; ---------------------------------------------------------------------------
00007B36                            
00007B36                            Obj11:					; XREF: Obj_Index
00007B36 7000                       		moveq	#0,d0
00007B38 1028 0024                  		move.b	$24(a0),d0
00007B3C 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007B40 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007B44                            ; ===========================================================================
00007B44 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007B48 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007B4C 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007B50                            ; ===========================================================================
00007B50                            
00007B50                            Obj11_Main:				; XREF: Obj11_Index
00007B50 5428 0024                  		addq.b	#2,$24(a0)
00007B54 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007B5C 317C 438E 0002             		move.w	#$438E,2(a0)
00007B62 117C 0004 0001             		move.b	#4,1(a0)
00007B68 117C 0003 0018             		move.b	#3,$18(a0)
00007B6E 117C 0080 0019             		move.b	#$80,$19(a0)
00007B74 3428 000C                  		move.w	$C(a0),d2
00007B78 3628 0008                  		move.w	8(a0),d3
00007B7C 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007B7E 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007B82 7200                       		moveq	#0,d1
00007B84 1212                       		move.b	(a2),d1		; copy a2 to d1
00007B86 14FC 0000                  		move.b	#0,(a2)+
00007B8A 3001                       		move.w	d1,d0
00007B8C E248                       		lsr.w	#1,d0
00007B8E E948                       		lsl.w	#4,d0
00007B90 9640                       		sub.w	d0,d3
00007B92 5501                       		subq.b	#2,d1
00007B94 6500                       		bcs.s	Obj11_Action
00007B96                            
00007B96                            Obj11_MakeBdg:
00007B96 6100 0000                  		bsr.w	SingleObjLoad
00007B9A 6600                       		bne.s	Obj11_Action
00007B9C 5228 0028                  		addq.b	#1,$28(a0)
00007BA0 B668 0008                  		cmp.w	8(a0),d3
00007BA4 6600                       		bne.s	loc_73B8
00007BA6 0643 0010                  		addi.w	#$10,d3
00007BAA 3142 000C                  		move.w	d2,$C(a0)
00007BAE 3142 003C                  		move.w	d2,$3C(a0)
00007BB2 3A08                       		move.w	a0,d5
00007BB4 0445 D000                  		subi.w	#-$3000,d5
00007BB8 EC4D                       		lsr.w	#6,d5
00007BBA 0245 007F                  		andi.w	#$7F,d5
00007BBE 14C5                       		move.b	d5,(a2)+
00007BC0 5228 0028                  		addq.b	#1,$28(a0)
00007BC4                            
00007BC4                            loc_73B8:				; XREF: ROM:00007398j
00007BC4 3A09                       		move.w	a1,d5
00007BC6 0445 D000                  		subi.w	#-$3000,d5
00007BCA EC4D                       		lsr.w	#6,d5
00007BCC 0245 007F                  		andi.w	#$7F,d5
00007BD0 14C5                       		move.b	d5,(a2)+
00007BD2 137C 000A 0024             		move.b	#$A,$24(a1)
00007BD8 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007BDA 3342 000C                  		move.w	d2,$C(a1)
00007BDE 3342 003C                  		move.w	d2,$3C(a1)
00007BE2 3343 0008                  		move.w	d3,8(a1)
00007BE6 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007BEE 337C 438E 0002             		move.w	#$438E,2(a1)
00007BF4 137C 0004 0001             		move.b	#4,1(a1)
00007BFA 137C 0003 0018             		move.b	#3,$18(a1)
00007C00 137C 0008 0019             		move.b	#8,$19(a1)
00007C06 0643 0010                  		addi.w	#$10,d3
00007C0A 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007C0E                            
00007C0E                            Obj11_Action:				; XREF: Obj11_Index
00007C0E 6100                       		bsr.s	Obj11_Solid
00007C10 4A28 003E                  		tst.b	$3E(a0)
00007C14 6700                       		beq.s	Obj11_Display
00007C16 5928 003E                  		subq.b	#4,$3E(a0)
00007C1A 6100 0000                  		bsr.w	Obj11_Bend
00007C1E                            
00007C1E                            Obj11_Display:
00007C1E 6100 0000                  		bsr.w	DisplaySprite
00007C22 6000 0000                  		bra.w	Obj11_ChkDel
00007C26                            
00007C26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C26                            
00007C26                            
00007C26                            Obj11_Solid:				; XREF: Obj11_Action
00007C26 7200                       		moveq	#0,d1
00007C28 1228 0028                  		move.b	$28(a0),d1
00007C2C E749                       		lsl.w	#3,d1
00007C2E 3401                       		move.w	d1,d2
00007C30 5041                       		addq.w	#8,d1
00007C32 D442                       		add.w	d2,d2
00007C34 43F8 D000                  		lea	($FFFFD000).w,a1
00007C38 4A69 0012                  		tst.w	$12(a1)
00007C3C 6B00 0000                  		bmi.w	locret_751E
00007C40 3029 0008                  		move.w	8(a1),d0
00007C44 9068 0008                  		sub.w	8(a0),d0
00007C48 D041                       		add.w	d1,d0
00007C4A 6B00 0000                  		bmi.w	locret_751E
00007C4E B042                       		cmp.w	d2,d0
00007C50 6400 0000                  		bcc.w	locret_751E
00007C54 6000                       		bra.s	Platform2
00007C56                            ; End of function Obj11_Solid
00007C56                            
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            ; Platform subroutine
00007C56                            ; ---------------------------------------------------------------------------
00007C56                            
00007C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C56                            
00007C56                            
00007C56                            PlatformObject:
00007C56 43F8 D000                  		lea	($FFFFD000).w,a1
00007C5A 4A69 0012                  		tst.w	$12(a1)
00007C5E 6B00 0000                  		bmi.w	locret_751E
00007C62 3029 0008                  		move.w	8(a1),d0
00007C66 9068 0008                  		sub.w	8(a0),d0
00007C6A D041                       		add.w	d1,d0
00007C6C 6B00 0000                  		bmi.w	locret_751E
00007C70 D241                       		add.w	d1,d1
00007C72 B041                       		cmp.w	d1,d0
00007C74 6400 0000                  		bcc.w	locret_751E
00007C78                            
00007C78                            Platform2:
00007C78 3028 000C                  		move.w	$C(a0),d0
00007C7C 5140                       		subq.w	#8,d0
00007C7E                            
00007C7E                            Platform3:
00007C7E 3429 000C                  		move.w	$C(a1),d2
00007C82 1229 0016                  		move.b	$16(a1),d1
00007C86 4881                       		ext.w	d1
00007C88 D242                       		add.w	d2,d1
00007C8A 5841                       		addq.w	#4,d1
00007C8C 9041                       		sub.w	d1,d0
00007C8E 6200 0000                  		bhi.w	locret_751E
00007C92 0C40 FFF0                  		cmpi.w	#-$10,d0
00007C96 6500 0000                  		bcs.w	locret_751E
00007C9A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C9E 6B00 0000                  		bmi.w	locret_751E
00007CA2 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007CA8 6400 0000                  		bcc.w	locret_751E
00007CAC D440                       		add.w	d0,d2
00007CAE 5642                       		addq.w	#3,d2
00007CB0 3342 000C                  		move.w	d2,$C(a1)
00007CB4 5428 0024                  		addq.b	#2,$24(a0)
00007CB8                            
00007CB8                            loc_74AE:
00007CB8 0829 0003 0022             		btst	#3,$22(a1)
00007CBE 6700                       		beq.s	loc_74DC
00007CC0 7000                       		moveq	#0,d0
00007CC2 1029 003D                  		move.b	$3D(a1),d0
00007CC6 ED48                       		lsl.w	#6,d0
00007CC8 0680 00FF D000             		addi.l	#$FFD000,d0
00007CCE 2440                       		movea.l	d0,a2
00007CD0 08AA 0003 0022             		bclr	#3,$22(a2)
00007CD6 422A 0025                  		clr.b	$25(a2)
00007CDA 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007CE0 6600                       		bne.s	loc_74DC
00007CE2 552A 0024                  		subq.b	#2,$24(a2)
00007CE6                            
00007CE6                            loc_74DC:
00007CE6 3008                       		move.w	a0,d0
00007CE8 0440 D000                  		subi.w	#-$3000,d0
00007CEC EC48                       		lsr.w	#6,d0
00007CEE 0240 007F                  		andi.w	#$7F,d0
00007CF2 1340 003D                  		move.b	d0,$3D(a1)
00007CF6 137C 0000 0026             		move.b	#0,$26(a1)
00007CFC 337C 0000 0012             		move.w	#0,$12(a1)
00007D02 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007D08 0829 0001 0022             		btst	#1,$22(a1)
00007D0E 6700                       		beq.s	loc_7512
00007D10 2F08                       		move.l	a0,-(sp)
00007D12 2049                       		movea.l	a1,a0
00007D14 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007D1A 205F                       		movea.l	(sp)+,a0
00007D1C                            
00007D1C                            loc_7512:
00007D1C 08E9 0003 0022             		bset	#3,$22(a1)
00007D22 08E8 0003 0022             		bset	#3,$22(a0)
00007D28                            
00007D28                            locret_751E:
00007D28 4E75                       		rts	
00007D2A                            ; End of function PlatformObject
00007D2A                            
00007D2A                            ; ---------------------------------------------------------------------------
00007D2A                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007D2A                            ; ---------------------------------------------------------------------------
00007D2A                            
00007D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D2A                            
00007D2A                            
00007D2A                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007D2A 43F8 D000                  		lea	($FFFFD000).w,a1
00007D2E 4A69 0012                  		tst.w	$12(a1)
00007D32 6B00 FFF4                  		bmi.w	locret_751E
00007D36 3029 0008                  		move.w	8(a1),d0
00007D3A 9068 0008                  		sub.w	8(a0),d0
00007D3E D041                       		add.w	d1,d0
00007D40 6BE6                       		bmi.s	locret_751E
00007D42 D241                       		add.w	d1,d1
00007D44 B041                       		cmp.w	d1,d0
00007D46 64E0                       		bcc.s	locret_751E
00007D48 0828 0000 0001             		btst	#0,1(a0)
00007D4E 6700                       		beq.s	loc_754A
00007D50 4640                       		not.w	d0
00007D52 D041                       		add.w	d1,d0
00007D54                            
00007D54                            loc_754A:
00007D54 E248                       		lsr.w	#1,d0
00007D56 7600                       		moveq	#0,d3
00007D58 1632 0000                  		move.b	(a2,d0.w),d3
00007D5C 3028 000C                  		move.w	$C(a0),d0
00007D60 9043                       		sub.w	d3,d0
00007D62 6000 FF1A                  		bra.w	Platform3
00007D66                            ; End of function SlopeObject
00007D66                            
00007D66                            
00007D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D66                            
00007D66                            
00007D66                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007D66 43F8 D000                  		lea	($FFFFD000).w,a1
00007D6A 4A69 0012                  		tst.w	$12(a1)
00007D6E 6B00 FFB8                  		bmi.w	locret_751E
00007D72 3029 0008                  		move.w	8(a1),d0
00007D76 9068 0008                  		sub.w	8(a0),d0
00007D7A D041                       		add.w	d1,d0
00007D7C 6B00 FFAA                  		bmi.w	locret_751E
00007D80 D241                       		add.w	d1,d1
00007D82 B041                       		cmp.w	d1,d0
00007D84 6400 FFA2                  		bcc.w	locret_751E
00007D88 3028 000C                  		move.w	$C(a0),d0
00007D8C 9043                       		sub.w	d3,d0
00007D8E 6000 FEEE                  		bra.w	Platform3
00007D92                            ; End of function Obj15_Solid
00007D92                            
00007D92                            ; ===========================================================================
00007D92                            
00007D92                            Obj11_Action2:				; XREF: Obj11_Index
00007D92 6100                       		bsr.s	Obj11_WalkOff
00007D94 6100 0000                  		bsr.w	DisplaySprite
00007D98 6000 0000                  		bra.w	Obj11_ChkDel
00007D9C                            
00007D9C                            ; ---------------------------------------------------------------------------
00007D9C                            ; Subroutine allowing Sonic to walk off a bridge
00007D9C                            ; ---------------------------------------------------------------------------
00007D9C                            
00007D9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D9C                            
00007D9C                            
00007D9C                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007D9C 7200                       		moveq	#0,d1
00007D9E 1228 0028                  		move.b	$28(a0),d1
00007DA2 E749                       		lsl.w	#3,d1
00007DA4 3401                       		move.w	d1,d2
00007DA6 5041                       		addq.w	#8,d1
00007DA8 6100                       		bsr.s	ExitPlatform2
00007DAA 6400                       		bcc.s	locret_75BE
00007DAC E848                       		lsr.w	#4,d0
00007DAE 1140 003F                  		move.b	d0,$3F(a0)
00007DB2 1028 003E                  		move.b	$3E(a0),d0
00007DB6 0C00 0040                  		cmpi.b	#$40,d0
00007DBA 6700                       		beq.s	loc_75B6
00007DBC 5828 003E                  		addq.b	#4,$3E(a0)
00007DC0                            
00007DC0                            loc_75B6:
00007DC0 6100 0000                  		bsr.w	Obj11_Bend
00007DC4 6100 0000                  		bsr.w	Obj11_MoveSonic
00007DC8                            
00007DC8                            locret_75BE:
00007DC8 4E75                       		rts	
00007DCA                            ; End of function Obj11_WalkOff
00007DCA                            
00007DCA                            ; ---------------------------------------------------------------------------
00007DCA                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007DCA                            ; ---------------------------------------------------------------------------
00007DCA                            
00007DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DCA                            
00007DCA                            
00007DCA                            ExitPlatform:
00007DCA 3401                       		move.w	d1,d2
00007DCC                            
00007DCC                            ExitPlatform2:
00007DCC D442                       		add.w	d2,d2
00007DCE 43F8 D000                  		lea	($FFFFD000).w,a1
00007DD2 0829 0001 0022             		btst	#1,$22(a1)
00007DD8 6600                       		bne.s	loc_75E0
00007DDA 3029 0008                  		move.w	8(a1),d0
00007DDE 9068 0008                  		sub.w	8(a0),d0
00007DE2 D041                       		add.w	d1,d0
00007DE4 6B00                       		bmi.s	loc_75E0
00007DE6 B042                       		cmp.w	d2,d0
00007DE8 6500                       		bcs.s	locret_75F2
00007DEA                            
00007DEA                            loc_75E0:
00007DEA 08A9 0003 0022             		bclr	#3,$22(a1)
00007DF0 117C 0002 0024             		move.b	#2,$24(a0)
00007DF6 08A8 0003 0022             		bclr	#3,$22(a0)
00007DFC                            
00007DFC                            locret_75F2:
00007DFC 4E75                       		rts	
00007DFE                            ; End of function ExitPlatform
00007DFE                            
00007DFE                            
00007DFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007DFE                            
00007DFE                            
00007DFE                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007DFE 7000                       		moveq	#0,d0
00007E00 1028 003F                  		move.b	$3F(a0),d0
00007E04 1030 0029                  		move.b	$29(a0,d0.w),d0
00007E08 ED48                       		lsl.w	#6,d0
00007E0A 0680 00FF D000             		addi.l	#$FFD000,d0
00007E10 2440                       		movea.l	d0,a2
00007E12 43F8 D000                  		lea	($FFFFD000).w,a1
00007E16 302A 000C                  		move.w	$C(a2),d0
00007E1A 5140                       		subq.w	#8,d0
00007E1C 7200                       		moveq	#0,d1
00007E1E 1229 0016                  		move.b	$16(a1),d1
00007E22 9041                       		sub.w	d1,d0
00007E24 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007E28 4E75                       		rts	
00007E2A                            ; End of function Obj11_MoveSonic
00007E2A                            
00007E2A                            
00007E2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E2A                            
00007E2A                            
00007E2A                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007E2A 1028 003E                  		move.b	$3E(a0),d0
00007E2E 6100 AF04                  		bsr.w	CalcSine
00007E32 3800                       		move.w	d0,d4
00007E34 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007E3A 7000                       		moveq	#0,d0
00007E3C 1028 0028                  		move.b	$28(a0),d0
00007E40 E948                       		lsl.w	#4,d0
00007E42 7600                       		moveq	#0,d3
00007E44 1628 003F                  		move.b	$3F(a0),d3
00007E48 3403                       		move.w	d3,d2
00007E4A D640                       		add.w	d0,d3
00007E4C 7A00                       		moveq	#0,d5
00007E4E 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007E54 1A35 3000                  		move.b	(a5,d3.w),d5
00007E58 0243 000F                  		andi.w	#$F,d3
00007E5C E94B                       		lsl.w	#4,d3
00007E5E 47F4 3000                  		lea	(a4,d3.w),a3
00007E62 45E8 0029                  		lea	$29(a0),a2
00007E66                            
00007E66                            loc_765C:
00007E66 7000                       		moveq	#0,d0
00007E68 101A                       		move.b	(a2)+,d0
00007E6A ED48                       		lsl.w	#6,d0
00007E6C 0680 00FF D000             		addi.l	#$FFD000,d0
00007E72 2240                       		movea.l	d0,a1
00007E74 7000                       		moveq	#0,d0
00007E76 101B                       		move.b	(a3)+,d0
00007E78 5240                       		addq.w	#1,d0
00007E7A C0C5                       		mulu.w	d5,d0
00007E7C C0C4                       		mulu.w	d4,d0
00007E7E 4840                       		swap	d0
00007E80 D069 003C                  		add.w	$3C(a1),d0
00007E84 3340 000C                  		move.w	d0,$C(a1)
00007E88 51CA FFDC                  		dbf	d2,loc_765C
00007E8C 7000                       		moveq	#0,d0
00007E8E 1028 0028                  		move.b	$28(a0),d0
00007E92 7600                       		moveq	#0,d3
00007E94 1628 003F                  		move.b	$3F(a0),d3
00007E98 5203                       		addq.b	#1,d3
00007E9A 9600                       		sub.b	d0,d3
00007E9C 4403                       		neg.b	d3
00007E9E 6B00                       		bmi.s	locret_76CA
00007EA0 3403                       		move.w	d3,d2
00007EA2 E94B                       		lsl.w	#4,d3
00007EA4 47F4 3000                  		lea	(a4,d3.w),a3
00007EA8 D6C2                       		adda.w	d2,a3
00007EAA 5342                       		subq.w	#1,d2
00007EAC 6500                       		bcs.s	locret_76CA
00007EAE                            
00007EAE                            loc_76A4:
00007EAE 7000                       		moveq	#0,d0
00007EB0 101A                       		move.b	(a2)+,d0
00007EB2 ED48                       		lsl.w	#6,d0
00007EB4 0680 00FF D000             		addi.l	#$FFD000,d0
00007EBA 2240                       		movea.l	d0,a1
00007EBC 7000                       		moveq	#0,d0
00007EBE 1023                       		move.b	-(a3),d0
00007EC0 5240                       		addq.w	#1,d0
00007EC2 C0C5                       		mulu.w	d5,d0
00007EC4 C0C4                       		mulu.w	d4,d0
00007EC6 4840                       		swap	d0
00007EC8 D069 003C                  		add.w	$3C(a1),d0
00007ECC 3340 000C                  		move.w	d0,$C(a1)
00007ED0 51CA FFDC                  		dbf	d2,loc_76A4
00007ED4                            
00007ED4                            locret_76CA:
00007ED4 4E75                       		rts	
00007ED6                            ; End of function Obj11_Bend
00007ED6                            
00007ED6                            ; ===========================================================================
00007ED6                            ; ---------------------------------------------------------------------------
00007ED6                            ; GHZ bridge-bending data
00007ED6                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007ED6                            ; ---------------------------------------------------------------------------
00007ED6                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007FE6                            		even
00007FE6                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000080E6                            		even
000080E6                            
000080E6                            ; ===========================================================================
000080E6                            
000080E6                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000080E6 3028 0008                  		move.w	8(a0),d0
000080EA 0240 FF80                  		andi.w	#$FF80,d0
000080EE 3238 F700                  		move.w	($FFFFF700).w,d1
000080F2 0441 0080                  		subi.w	#$80,d1
000080F6 0241 FF80                  		andi.w	#$FF80,d1
000080FA 9041                       		sub.w	d1,d0
000080FC 0C40 0280                  		cmpi.w	#$280,d0
00008100 6200 0000                  		bhi.w	Obj11_DelAll
00008104 4E75                       		rts	
00008106                            ; ===========================================================================
00008106                            
00008106                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00008106 7400                       		moveq	#0,d2
00008108 45E8 0028                  		lea	$28(a0),a2	; load bridge length
0000810C 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
0000810E 5302                       		subq.b	#1,d2		; subtract 1
00008110 6500                       		bcs.s	Obj11_Delete
00008112                            
00008112                            Obj11_DelLoop:
00008112 7000                       		moveq	#0,d0
00008114 101A                       		move.b	(a2)+,d0
00008116 ED48                       		lsl.w	#6,d0
00008118 0680 00FF D000             		addi.l	#$FFD000,d0
0000811E 2240                       		movea.l	d0,a1
00008120 B048                       		cmp.w	a0,d0
00008122 6700                       		beq.s	loc_791E
00008124 6100 0000                  		bsr.w	DeleteObject2
00008128                            
00008128                            loc_791E:
00008128 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000812C                            
0000812C                            Obj11_Delete:
0000812C 6100 0000                  		bsr.w	DeleteObject
00008130 4E75                       		rts	
00008132                            ; ===========================================================================
00008132                            
00008132                            Obj11_Delete2:				; XREF: Obj11_Index
00008132 6100 0000                  		bsr.w	DeleteObject
00008136 4E75                       		rts	
00008138                            ; ===========================================================================
00008138                            
00008138                            Obj11_Display2:				; XREF: Obj11_Index
00008138 6100 0000                  		bsr.w	DisplaySprite
0000813C 4E75                       		rts	
0000813E                            ; ===========================================================================
0000813E                            ; ---------------------------------------------------------------------------
0000813E                            ; Sprite mappings - GHZ	bridge
0000813E                            ; ---------------------------------------------------------------------------
0000813E                            Map_obj11:
0000813E                            	include "_maps\obj11.asm"
0000813E                            ; ---------------------------------------------------------------------------
0000813E                            ; Sprite mappings - GHZ	bridge
0000813E                            ; ---------------------------------------------------------------------------
0000813E 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008142 0000                       		dc.w byte_794B-Map_obj11
00008144 01                         byte_793A:	dc.b 1
00008145 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000814A 02                         byte_7940:	dc.b 2
0000814B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008150 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00008155 01                         byte_794B:	dc.b 1
00008156 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000815C 00                         		even
0000815C 00                         		even
0000815C                            
0000815C                            ; ===========================================================================
0000815C                            ; ---------------------------------------------------------------------------
0000815C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000815C                            ;	    - spiked ball on a chain (SBZ)
0000815C                            ; ---------------------------------------------------------------------------
0000815C                            
0000815C                            Obj15:					; XREF: Obj_Index
0000815C 7000                       		moveq	#0,d0
0000815E 1028 0024                  		move.b	$24(a0),d0
00008162 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00008166 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000816A                            ; ===========================================================================
0000816A 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000816E 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008172 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00008176 0000                       		dc.w Obj15_Action-Obj15_Index
00008178                            ; ===========================================================================
00008178                            
00008178                            Obj15_Main:				; XREF: Obj15_Index
00008178 5428 0024                  		addq.b	#2,$24(a0)
0000817C 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00008184 317C 4380 0002             		move.w	#$4380,2(a0)
0000818A 117C 0004 0001             		move.b	#4,1(a0)
00008190 117C 0003 0018             		move.b	#3,$18(a0)
00008196 117C 0018 0019             		move.b	#$18,$19(a0)
0000819C 117C 0008 0016             		move.b	#8,$16(a0)
000081A2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000081A8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000081AE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000081B4 6600                       		bne.s	Obj15_NotSLZ
000081B6 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000081BE 317C 43DC 0002             		move.w	#$43DC,2(a0)
000081C4 117C 0020 0019             		move.b	#$20,$19(a0)
000081CA 117C 0010 0016             		move.b	#$10,$16(a0)
000081D0 117C 0099 0020             		move.b	#$99,$20(a0)
000081D6                            
000081D6                            Obj15_NotSLZ:
000081D6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000081DC 6600                       		bne.s	Obj15_SetLength
000081DE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000081E6 317C 0391 0002             		move.w	#$391,2(a0)
000081EC 117C 0018 0019             		move.b	#$18,$19(a0)
000081F2 117C 0018 0016             		move.b	#$18,$16(a0)
000081F8 117C 0086 0020             		move.b	#$86,$20(a0)
000081FE 117C 000C 0024             		move.b	#$C,$24(a0)
00008204                            
00008204                            Obj15_SetLength:
00008204 1810                       		move.b	0(a0),d4
00008206 7200                       		moveq	#0,d1
00008208 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
0000820C 1212                       		move.b	(a2),d1		; move a2 to d1
0000820E 3F01                       		move.w	d1,-(sp)
00008210 0241 000F                  		andi.w	#$F,d1
00008214 14FC 0000                  		move.b	#0,(a2)+
00008218 3601                       		move.w	d1,d3
0000821A E94B                       		lsl.w	#4,d3
0000821C 5003                       		addq.b	#8,d3
0000821E 1143 003C                  		move.b	d3,$3C(a0)
00008222 5103                       		subq.b	#8,d3
00008224 4A28 001A                  		tst.b	$1A(a0)
00008228 6700                       		beq.s	Obj15_MakeChain
0000822A 5003                       		addq.b	#8,d3
0000822C 5341                       		subq.w	#1,d1
0000822E                            
0000822E                            Obj15_MakeChain:
0000822E 6100 0000                  		bsr.w	SingleObjLoad
00008232 6600                       		bne.s	loc_7A92
00008234 5228 0028                  		addq.b	#1,$28(a0)
00008238 3A09                       		move.w	a1,d5
0000823A 0445 D000                  		subi.w	#-$3000,d5
0000823E EC4D                       		lsr.w	#6,d5
00008240 0245 007F                  		andi.w	#$7F,d5
00008244 14C5                       		move.b	d5,(a2)+
00008246 137C 000A 0024             		move.b	#$A,$24(a1)
0000824C 1284                       		move.b	d4,0(a1)	; load swinging	object
0000824E 2368 0004 0004             		move.l	4(a0),4(a1)
00008254 3368 0002 0002             		move.w	2(a0),2(a1)
0000825A 08A9 0006 0002             		bclr	#6,2(a1)
00008260 137C 0004 0001             		move.b	#4,1(a1)
00008266 137C 0004 0018             		move.b	#4,$18(a1)
0000826C 137C 0008 0019             		move.b	#8,$19(a1)
00008272 137C 0001 001A             		move.b	#1,$1A(a1)
00008278 1343 003C                  		move.b	d3,$3C(a1)
0000827C 0403 0010                  		subi.b	#$10,d3
00008280 6400                       		bcc.s	loc_7A8E
00008282 137C 0002 001A             		move.b	#2,$1A(a1)
00008288 137C 0003 0018             		move.b	#3,$18(a1)
0000828E 08E9 0006 0002             		bset	#6,2(a1)
00008294                            
00008294                            loc_7A8E:
00008294 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00008298                            
00008298                            loc_7A92:
00008298 3A08                       		move.w	a0,d5
0000829A 0445 D000                  		subi.w	#-$3000,d5
0000829E EC4D                       		lsr.w	#6,d5
000082A0 0245 007F                  		andi.w	#$7F,d5
000082A4 14C5                       		move.b	d5,(a2)+
000082A6 317C 4080 0026             		move.w	#$4080,$26(a0)
000082AC 317C FE00 003E             		move.w	#-$200,$3E(a0)
000082B2 321F                       		move.w	(sp)+,d1
000082B4 0801 0004                  		btst	#4,d1		; is object type $8X ?
000082B8 6700                       		beq.s	loc_7AD4	; if not, branch
000082BA 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000082C2 317C 43AA 0002             		move.w	#$43AA,2(a0)
000082C8 117C 0001 001A             		move.b	#1,$1A(a0)
000082CE 117C 0002 0018             		move.b	#2,$18(a0)
000082D4 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000082DA                            
000082DA                            loc_7AD4:
000082DA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000082E0 6700                       		beq.s	Obj15_Action	; if yes, branch
000082E2                            
000082E2                            Obj15_SetSolid:				; XREF: Obj15_Index
000082E2 7200                       		moveq	#0,d1
000082E4 1228 0019                  		move.b	$19(a0),d1
000082E8 7600                       		moveq	#0,d3
000082EA 1628 0016                  		move.b	$16(a0),d3
000082EE 6100 FA76                  		bsr.w	Obj15_Solid
000082F2                            
000082F2                            Obj15_Action:				; XREF: Obj15_Index
000082F2 6100 0000                  		bsr.w	Obj15_Move
000082F6 6100 0000                  		bsr.w	DisplaySprite
000082FA 6000 0000                  		bra.w	Obj15_ChkDel
000082FE                            ; ===========================================================================
000082FE                            
000082FE                            Obj15_Action2:				; XREF: Obj15_Index
000082FE 7200                       		moveq	#0,d1
00008300 1228 0019                  		move.b	$19(a0),d1
00008304 6100 FAC4                  		bsr.w	ExitPlatform
00008308 3F28 0008                  		move.w	8(a0),-(sp)
0000830C 6100 0000                  		bsr.w	Obj15_Move
00008310 341F                       		move.w	(sp)+,d2
00008312 7600                       		moveq	#0,d3
00008314 1628 0016                  		move.b	$16(a0),d3
00008318 5203                       		addq.b	#1,d3
0000831A 6100 0000                  		bsr.w	MvSonicOnPtfm
0000831E 6100 0000                  		bsr.w	DisplaySprite
00008322 6000 0000                  		bra.w	Obj15_ChkDel
00008326                            
00008326 4E75                       		rts
00008328                            
00008328                            ; ---------------------------------------------------------------------------
00008328                            ; Subroutine to	change Sonic's position with a platform
00008328                            ; ---------------------------------------------------------------------------
00008328                            
00008328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008328                            
00008328                            
00008328                            MvSonicOnPtfm:
00008328 43F8 D000                  		lea	($FFFFD000).w,a1
0000832C 3028 000C                  		move.w	$C(a0),d0
00008330 9043                       		sub.w	d3,d0
00008332 6000                       		bra.s	MvSonic2
00008334                            ; End of function MvSonicOnPtfm
00008334                            
00008334                            ; ---------------------------------------------------------------------------
00008334                            ; Subroutine to	change Sonic's position with a platform
00008334                            ; ---------------------------------------------------------------------------
00008334                            
00008334                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008334                            
00008334                            
00008334                            MvSonicOnPtfm2:
00008334 43F8 D000                  		lea	($FFFFD000).w,a1
00008338 3028 000C                  		move.w	$C(a0),d0
0000833C 0440 0009                  		subi.w	#9,d0
00008340                            
00008340                            MvSonic2:
00008340 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008344 6B00                       		bmi.s	locret_7B62
00008346 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000834C 6400                       		bcc.s	locret_7B62
0000834E 4A78 FE08                  		tst.w	($FFFFFE08).w
00008352 6600                       		bne.s	locret_7B62
00008354 7200                       		moveq	#0,d1
00008356 1229 0016                  		move.b	$16(a1),d1
0000835A 9041                       		sub.w	d1,d0
0000835C 3340 000C                  		move.w	d0,$C(a1)
00008360 9468 0008                  		sub.w	8(a0),d2
00008364 9569 0008                  		sub.w	d2,8(a1)
00008368                            
00008368                            locret_7B62:
00008368 4E75                       		rts	
0000836A                            ; End of function MvSonicOnPtfm2
0000836A                            
0000836A                            
0000836A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000836A                            
0000836A                            
0000836A                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000836A 1038 FE78                  		move.b	($FFFFFE78).w,d0
0000836E 323C 0080                  		move.w	#$80,d1
00008372 0828 0000 0022             		btst	#0,$22(a0)
00008378 6700                       		beq.s	loc_7B78
0000837A 4440                       		neg.w	d0
0000837C D041                       		add.w	d1,d0
0000837E                            
0000837E                            loc_7B78:
0000837E 6000                       		bra.s	Obj15_Move2
00008380                            ; End of function Obj15_Move
00008380                            
00008380                            
00008380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008380                            
00008380                            
00008380                            Obj48_Move:				; XREF: Obj48_Display2
00008380 4A28 003D                  		tst.b	$3D(a0)
00008384 6600                       		bne.s	loc_7B9C
00008386 3028 003E                  		move.w	$3E(a0),d0
0000838A 5040                       		addq.w	#8,d0
0000838C 3140 003E                  		move.w	d0,$3E(a0)
00008390 D168 0026                  		add.w	d0,$26(a0)
00008394 0C40 0200                  		cmpi.w	#$200,d0
00008398 6600                       		bne.s	loc_7BB6
0000839A 117C 0001 003D             		move.b	#1,$3D(a0)
000083A0 6000                       		bra.s	loc_7BB6
000083A2                            ; ===========================================================================
000083A2                            
000083A2                            loc_7B9C:
000083A2 3028 003E                  		move.w	$3E(a0),d0
000083A6 5140                       		subq.w	#8,d0
000083A8 3140 003E                  		move.w	d0,$3E(a0)
000083AC D168 0026                  		add.w	d0,$26(a0)
000083B0 0C40 FE00                  		cmpi.w	#-$200,d0
000083B4 6600                       		bne.s	loc_7BB6
000083B6 117C 0000 003D             		move.b	#0,$3D(a0)
000083BC                            
000083BC                            loc_7BB6:
000083BC 1028 0026                  		move.b	$26(a0),d0
000083C0                            ; End of function Obj48_Move
000083C0                            
000083C0                            
000083C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083C0                            
000083C0                            
000083C0                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000083C0 6100 A972                  		bsr.w	CalcSine
000083C4 3428 0038                  		move.w	$38(a0),d2
000083C8 3628 003A                  		move.w	$3A(a0),d3
000083CC 45E8 0028                  		lea	$28(a0),a2
000083D0 7C00                       		moveq	#0,d6
000083D2 1C1A                       		move.b	(a2)+,d6
000083D4                            
000083D4                            loc_7BCE:
000083D4 7800                       		moveq	#0,d4
000083D6 181A                       		move.b	(a2)+,d4
000083D8 ED4C                       		lsl.w	#6,d4
000083DA 0684 00FF D000             		addi.l	#$FFD000,d4
000083E0 2244                       		movea.l	d4,a1
000083E2 7800                       		moveq	#0,d4
000083E4 1829 003C                  		move.b	$3C(a1),d4
000083E8 2A04                       		move.l	d4,d5
000083EA C9C0                       		muls.w	d0,d4
000083EC E084                       		asr.l	#8,d4
000083EE CBC1                       		muls.w	d1,d5
000083F0 E085                       		asr.l	#8,d5
000083F2 D842                       		add.w	d2,d4
000083F4 DA43                       		add.w	d3,d5
000083F6 3344 000C                  		move.w	d4,$C(a1)
000083FA 3345 0008                  		move.w	d5,8(a1)
000083FE 51CE FFD4                  		dbf	d6,loc_7BCE
00008402 4E75                       		rts	
00008404                            ; End of function Obj15_Move2
00008404                            
00008404                            ; ===========================================================================
00008404                            
00008404                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008404 3028 003A                  		move.w	$3A(a0),d0
00008408 0240 FF80                  		andi.w	#$FF80,d0
0000840C 3238 F700                  		move.w	($FFFFF700).w,d1
00008410 0441 0080                  		subi.w	#$80,d1
00008414 0241 FF80                  		andi.w	#$FF80,d1
00008418 9041                       		sub.w	d1,d0
0000841A 0C40 0280                  		cmpi.w	#$280,d0
0000841E 6200 0000                  		bhi.w	Obj15_DelAll
00008422 4E75                       		rts	
00008424                            ; ===========================================================================
00008424                            
00008424                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008424 7400                       		moveq	#0,d2
00008426 45E8 0028                  		lea	$28(a0),a2
0000842A 141A                       		move.b	(a2)+,d2
0000842C                            
0000842C                            Obj15_DelLoop:
0000842C 7000                       		moveq	#0,d0
0000842E 101A                       		move.b	(a2)+,d0
00008430 ED48                       		lsl.w	#6,d0
00008432 0680 00FF D000             		addi.l	#$FFD000,d0
00008438 2240                       		movea.l	d0,a1
0000843A 6100 0000                  		bsr.w	DeleteObject2
0000843E 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008442 4E75                       		rts	
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj15_Delete:				; XREF: Obj15_Index
00008444 6100 0000                  		bsr.w	DeleteObject
00008448 4E75                       		rts	
0000844A                            ; ===========================================================================
0000844A                            
0000844A                            Obj15_Display:				; XREF: Obj15_Index
0000844A 6000 0000                  		bra.w	DisplaySprite
0000844E                            ; ===========================================================================
0000844E                            ; ---------------------------------------------------------------------------
0000844E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000844E                            ; ---------------------------------------------------------------------------
0000844E                            Map_obj15:
0000844E                            	include "_maps\obj15ghz.asm"
0000844E                            ; ---------------------------------------------------------------------------
0000844E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
0000844E                            ; ---------------------------------------------------------------------------
0000844E 0000                       		dc.w byte_7C4E-Map_obj15
00008450 0000                       		dc.w byte_7C59-Map_obj15
00008452 0000                       		dc.w byte_7C5F-Map_obj15
00008454 02                         byte_7C4E:	dc.b 2
00008455 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000845A F809 0004 00               		dc.b $F8, 9, 0,	4, 0
0000845F 01                         byte_7C59:	dc.b 1
00008460 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008465 01                         byte_7C5F:	dc.b 1
00008466 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000846C 00                         		even
0000846C 00                         		even
0000846C                            
0000846C                            ; ---------------------------------------------------------------------------
0000846C                            ; Sprite mappings - SLZ	swinging platforms
0000846C                            ; ---------------------------------------------------------------------------
0000846C                            Map_obj15a:
0000846C                            	include "_maps\obj15slz.asm"
0000846C                            ; ---------------------------------------------------------------------------
0000846C                            ; Sprite mappings - SLZ	swinging platforms
0000846C                            ; ---------------------------------------------------------------------------
0000846C 0000                       		dc.w byte_7C6C-Map_obj15a
0000846E 0000                       		dc.w byte_7C95-Map_obj15a
00008470 0000                       		dc.w byte_7C9B-Map_obj15a
00008472 08                         byte_7C6C:	dc.b 8
00008473 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008478 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000847D F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008482 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008487 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
0000848C 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008491 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008496 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000849B 01                         byte_7C95:	dc.b 1
0000849C F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000084A1 01                         byte_7C9B:	dc.b 1
000084A2 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000084A8 00                         		even
000084A8 00                         		even
000084A8                            
000084A8                            ; ===========================================================================
000084A8                            ; ---------------------------------------------------------------------------
000084A8                            ; Object 17 - helix of spikes on a pole	(GHZ)
000084A8                            ; ---------------------------------------------------------------------------
000084A8                            
000084A8                            Obj17:					; XREF: Obj_Index
000084A8 7000                       		moveq	#0,d0
000084AA 1028 0024                  		move.b	$24(a0),d0
000084AE 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000084B2 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000084B6                            ; ===========================================================================
000084B6 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000084B8 0000                       		dc.w Obj17_Action-Obj17_Index
000084BA 0000                       		dc.w Obj17_Action-Obj17_Index
000084BC 0000                       		dc.w Obj17_Delete-Obj17_Index
000084BE 0000                       		dc.w Obj17_Display-Obj17_Index
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj17_Main:				; XREF: Obj17_Index
000084C0 5428 0024                  		addq.b	#2,$24(a0)
000084C4 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000084CC 317C 4398 0002             		move.w	#$4398,2(a0)
000084D2 117C 0007 0022             		move.b	#7,$22(a0)
000084D8 117C 0004 0001             		move.b	#4,1(a0)
000084DE 117C 0003 0018             		move.b	#3,$18(a0)
000084E4 117C 0008 0019             		move.b	#8,$19(a0)
000084EA 3428 000C                  		move.w	$C(a0),d2
000084EE 3628 0008                  		move.w	8(a0),d3
000084F2 1810                       		move.b	0(a0),d4
000084F4 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000084F8 7200                       		moveq	#0,d1
000084FA 1212                       		move.b	(a2),d1		; move a2 to d1
000084FC 14FC 0000                  		move.b	#0,(a2)+
00008500 3001                       		move.w	d1,d0
00008502 E248                       		lsr.w	#1,d0
00008504 E948                       		lsl.w	#4,d0
00008506 9640                       		sub.w	d0,d3
00008508 5501                       		subq.b	#2,d1
0000850A 6500                       		bcs.s	Obj17_Action
0000850C 7C00                       		moveq	#0,d6
0000850E                            
0000850E                            Obj17_MakeHelix:
0000850E 6100 0000                  		bsr.w	SingleObjLoad
00008512 6600                       		bne.s	Obj17_Action
00008514 5228 0028                  		addq.b	#1,$28(a0)
00008518 3A09                       		move.w	a1,d5
0000851A 0445 D000                  		subi.w	#$D000,d5
0000851E EC4D                       		lsr.w	#6,d5
00008520 0245 007F                  		andi.w	#$7F,d5
00008524 14C5                       		move.b	d5,(a2)+
00008526 137C 0008 0024             		move.b	#8,$24(a1)
0000852C 1284                       		move.b	d4,0(a1)
0000852E 3342 000C                  		move.w	d2,$C(a1)
00008532 3343 0008                  		move.w	d3,8(a1)
00008536 2368 0004 0004             		move.l	4(a0),4(a1)
0000853C 337C 4398 0002             		move.w	#$4398,2(a1)
00008542 137C 0004 0001             		move.b	#4,1(a1)
00008548 137C 0003 0018             		move.b	#3,$18(a1)
0000854E 137C 0008 0019             		move.b	#8,$19(a1)
00008554 1346 003E                  		move.b	d6,$3E(a1)
00008558 5206                       		addq.b	#1,d6
0000855A 0206 0007                  		andi.b	#7,d6
0000855E 0643 0010                  		addi.w	#$10,d3
00008562 B668 0008                  		cmp.w	8(a0),d3
00008566 6600                       		bne.s	loc_7D78
00008568 1146 003E                  		move.b	d6,$3E(a0)
0000856C 5206                       		addq.b	#1,d6
0000856E 0206 0007                  		andi.b	#7,d6
00008572 0643 0010                  		addi.w	#$10,d3
00008576 5228 0028                  		addq.b	#1,$28(a0)
0000857A                            
0000857A                            loc_7D78:
0000857A 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
0000857E                            
0000857E                            Obj17_Action:				; XREF: Obj17_Index
0000857E 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008582 6100 0000                  		bsr.w	DisplaySprite
00008586 6000 0000                  		bra.w	Obj17_ChkDel
0000858A                            
0000858A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000858A                            
0000858A                            
0000858A                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000858A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0000858E 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008594 D028 003E                  		add.b	$3E(a0),d0
00008598 0200 0007                  		andi.b	#7,d0
0000859C 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000085A0 6600                       		bne.s	locret_7DA6
000085A2 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000085A8                            
000085A8                            locret_7DA6:
000085A8 4E75                       		rts	
000085AA                            ; End of function Obj17_RotateSpikes
000085AA                            
000085AA                            ; ===========================================================================
000085AA                            
000085AA                            Obj17_ChkDel:				; XREF: Obj17_Action
000085AA 3028 0008                  		move.w	8(a0),d0
000085AE 0240 FF80                  		andi.w	#$FF80,d0
000085B2 3238 F700                  		move.w	($FFFFF700).w,d1
000085B6 0441 0080                  		subi.w	#$80,d1
000085BA 0241 FF80                  		andi.w	#$FF80,d1
000085BE 9041                       		sub.w	d1,d0
000085C0 0C40 0280                  		cmpi.w	#$280,d0
000085C4 6200 0000                  		bhi.w	Obj17_DelAll
000085C8 4E75                       		rts	
000085CA                            ; ===========================================================================
000085CA                            
000085CA                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000085CA 7400                       		moveq	#0,d2
000085CC 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000085D0 141A                       		move.b	(a2)+,d2	; move a2 to d2
000085D2 5502                       		subq.b	#2,d2
000085D4 6500                       		bcs.s	Obj17_Delete
000085D6                            
000085D6                            Obj17_DelLoop:
000085D6 7000                       		moveq	#0,d0
000085D8 101A                       		move.b	(a2)+,d0
000085DA ED48                       		lsl.w	#6,d0
000085DC 0680 00FF D000             		addi.l	#$FFD000,d0
000085E2 2240                       		movea.l	d0,a1
000085E4 6100 0000                  		bsr.w	DeleteObject2	; delete object
000085E8 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000085EC                            
000085EC                            Obj17_Delete:				; XREF: Obj17_Index
000085EC 6100 0000                  		bsr.w	DeleteObject
000085F0 4E75                       		rts	
000085F2                            ; ===========================================================================
000085F2                            
000085F2                            Obj17_Display:				; XREF: Obj17_Index
000085F2 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000085F6 6000 0000                  		bra.w	DisplaySprite
000085FA                            ; ===========================================================================
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            Map_obj17:
000085FA                            	include "_maps\obj17.asm"
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000085FA                            ; ---------------------------------------------------------------------------
000085FA 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000085FE 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008602 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008606 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000860A 01                         byte_7E08:	dc.b 1
0000860B F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008610 01                         byte_7E0E:	dc.b 1
00008611 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008616 01                         byte_7E14:	dc.b 1
00008617 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
0000861C 01                         byte_7E1A:	dc.b 1
0000861D FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008622 01                         byte_7E20:	dc.b 1
00008623 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008628 01                         byte_7E26:	dc.b 1
00008629 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
0000862E 01                         byte_7E2C:	dc.b 1
0000862F F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008634                            		even
00008634                            		even
00008634                            
00008634                            ; ===========================================================================
00008634                            ; ---------------------------------------------------------------------------
00008634                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008634                            ; ---------------------------------------------------------------------------
00008634                            
00008634                            Obj18:					; XREF: Obj_Index
00008634 7000                       		moveq	#0,d0
00008636 1028 0024                  		move.b	$24(a0),d0
0000863A 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
0000863E 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008642                            ; ===========================================================================
00008642 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008644 0000                       		dc.w Obj18_Solid-Obj18_Index
00008646 0000                       		dc.w Obj18_Action2-Obj18_Index
00008648 0000                       		dc.w Obj18_Delete-Obj18_Index
0000864A 0000                       		dc.w Obj18_Action-Obj18_Index
0000864C                            ; ===========================================================================
0000864C                            
0000864C                            Obj18_Main:				; XREF: Obj18_Index
0000864C 5428 0024                  		addq.b	#2,$24(a0)
00008650 317C 4000 0002             		move.w	#$4000,2(a0)
00008656 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
0000865E 117C 0020 0019             		move.b	#$20,$19(a0)
00008664 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000866A 6600                       		bne.s	Obj18_NotSYZ
0000866C 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008674 117C 0020 0019             		move.b	#$20,$19(a0)
0000867A                            
0000867A                            Obj18_NotSYZ:
0000867A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008680 6600                       		bne.s	Obj18_NotSLZ
00008682 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000868A 117C 0020 0019             		move.b	#$20,$19(a0)
00008690 317C 4000 0002             		move.w	#$4000,2(a0)
00008696 117C 0003 0028             		move.b	#3,$28(a0)
0000869C                            
0000869C                            Obj18_NotSLZ:
0000869C 117C 0004 0001             		move.b	#4,1(a0)
000086A2 117C 0004 0018             		move.b	#4,$18(a0)
000086A8 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000086AE 3168 000C 0034             		move.w	$C(a0),$34(a0)
000086B4 3168 0008 0032             		move.w	8(a0),$32(a0)
000086BA 317C 0080 0026             		move.w	#$80,$26(a0)
000086C0 7200                       		moveq	#0,d1
000086C2 1028 0028                  		move.b	$28(a0),d0
000086C6 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000086CA 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000086CC 5201                       		addq.b	#1,d1		; use frame #1
000086CE 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000086D4                            
000086D4                            Obj18_SetFrame:
000086D4 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000086D8                            
000086D8                            Obj18_Solid:				; XREF: Obj18_Index
000086D8 4A28 0038                  		tst.b	$38(a0)
000086DC 6700                       		beq.s	loc_7EE0
000086DE 5928 0038                  		subq.b	#4,$38(a0)
000086E2                            
000086E2                            loc_7EE0:
000086E2 7200                       		moveq	#0,d1
000086E4 1228 0019                  		move.b	$19(a0),d1
000086E8 6100 F56C                  		bsr.w	PlatformObject
000086EC                            
000086EC                            Obj18_Action:				; XREF: Obj18_Index
000086EC 6100 0000                  		bsr.w	Obj18_Move
000086F0 6100 0000                  		bsr.w	Obj18_Nudge
000086F4 6100 0000                  		bsr.w	DisplaySprite
000086F8 6000 0000                  		bra.w	Obj18_ChkDel
000086FC                            ; ===========================================================================
000086FC                            
000086FC                            Obj18_Action2:				; XREF: Obj18_Index
000086FC 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008702 6700                       		beq.s	loc_7F06
00008704 5828 0038                  		addq.b	#4,$38(a0)
00008708                            
00008708                            loc_7F06:
00008708 7200                       		moveq	#0,d1
0000870A 1228 0019                  		move.b	$19(a0),d1
0000870E 6100 F6BA                  		bsr.w	ExitPlatform
00008712 3F28 0008                  		move.w	8(a0),-(sp)
00008716 6100 0000                  		bsr.w	Obj18_Move
0000871A 6100 0000                  		bsr.w	Obj18_Nudge
0000871E 341F                       		move.w	(sp)+,d2
00008720 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008724 6100 0000                  		bsr.w	DisplaySprite
00008728 6000 0000                  		bra.w	Obj18_ChkDel
0000872C                            
0000872C 4E75                       		rts
0000872E                            
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            ; Subroutine to	move platform slightly when you	stand on it
0000872E                            ; ---------------------------------------------------------------------------
0000872E                            
0000872E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000872E                            
0000872E                            
0000872E                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000872E 1028 0038                  		move.b	$38(a0),d0
00008732 6100 A600                  		bsr.w	CalcSine
00008736 323C 0400                  		move.w	#$400,d1
0000873A C1C1                       		muls.w	d1,d0
0000873C 4840                       		swap	d0
0000873E D068 002C                  		add.w	$2C(a0),d0
00008742 3140 000C                  		move.w	d0,$C(a0)
00008746 4E75                       		rts	
00008748                            ; End of function Obj18_Nudge
00008748                            
00008748                            ; ---------------------------------------------------------------------------
00008748                            ; Subroutine to	move platforms
00008748                            ; ---------------------------------------------------------------------------
00008748                            
00008748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008748                            
00008748                            
00008748                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008748 7000                       		moveq	#0,d0
0000874A 1028 0028                  		move.b	$28(a0),d0
0000874E 0240 000F                  		andi.w	#$F,d0
00008752 D040                       		add.w	d0,d0
00008754 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008758 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
0000875C                            ; End of function Obj18_Move
0000875C                            
0000875C                            ; ===========================================================================
0000875C 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008760 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008764 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008768 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
0000876C 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008770 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008774 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008776                            ; ===========================================================================
00008776                            
00008776                            Obj18_Type00:
00008776 4E75                       		rts			; platform 00 doesn't move
00008778                            ; ===========================================================================
00008778                            
00008778                            Obj18_Type05:
00008778 3028 0032                  		move.w	$32(a0),d0
0000877C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008780 4401                       		neg.b	d1		; reverse platform-motion
00008782 0601 0040                  		addi.b	#$40,d1
00008786 6000                       		bra.s	Obj18_01_Move
00008788                            ; ===========================================================================
00008788                            
00008788                            Obj18_Type01:
00008788 3028 0032                  		move.w	$32(a0),d0
0000878C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008790 0401 0040                  		subi.b	#$40,d1
00008794                            
00008794                            Obj18_01_Move:
00008794 4881                       		ext.w	d1
00008796 D041                       		add.w	d1,d0
00008798 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
0000879C 6000 0000                  		bra.w	Obj18_ChgMotion
000087A0                            ; ===========================================================================
000087A0                            
000087A0                            Obj18_Type0C:
000087A0 3028 0034                  		move.w	$34(a0),d0
000087A4 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000087A8 4401                       		neg.b	d1		; reverse platform-motion
000087AA 0601 0030                  		addi.b	#$30,d1
000087AE 6000                       		bra.s	Obj18_02_Move
000087B0                            ; ===========================================================================
000087B0                            
000087B0                            Obj18_Type0B:
000087B0 3028 0034                  		move.w	$34(a0),d0
000087B4 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000087B8 0401 0030                  		subi.b	#$30,d1
000087BC 6000                       		bra.s	Obj18_02_Move
000087BE                            ; ===========================================================================
000087BE                            
000087BE                            Obj18_Type06:
000087BE 3028 0034                  		move.w	$34(a0),d0
000087C2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000087C6 4401                       		neg.b	d1		; reverse platform-motion
000087C8 0601 0040                  		addi.b	#$40,d1
000087CC 6000                       		bra.s	Obj18_02_Move
000087CE                            ; ===========================================================================
000087CE                            
000087CE                            Obj18_Type02:
000087CE 3028 0034                  		move.w	$34(a0),d0
000087D2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000087D6 0401 0040                  		subi.b	#$40,d1
000087DA                            
000087DA                            Obj18_02_Move:
000087DA 4881                       		ext.w	d1
000087DC D041                       		add.w	d1,d0
000087DE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000087E2 6000 0000                  		bra.w	Obj18_ChgMotion
000087E6                            ; ===========================================================================
000087E6                            
000087E6                            Obj18_Type03:
000087E6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000087EA 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000087EC 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000087F2 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000087F4 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000087FA                            
000087FA                            Obj18_03_NoMove:
000087FA 4E75                       		rts	
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            Obj18_03_Wait:
000087FC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008800 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008802 317C 0020 003A             		move.w	#32,$3A(a0)
00008808 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
0000880C 4E75                       		rts	
0000880E                            ; ===========================================================================
0000880E                            
0000880E                            Obj18_Type04:
0000880E 4A68 003A                  		tst.w	$3A(a0)
00008812 6700                       		beq.s	loc_8048
00008814 5368 003A                  		subq.w	#1,$3A(a0)
00008818 6600                       		bne.s	loc_8048
0000881A 0828 0003 0022             		btst	#3,$22(a0)
00008820 6700                       		beq.s	loc_8042
00008822 08E9 0001 0022             		bset	#1,$22(a1)
00008828 08A9 0003 0022             		bclr	#3,$22(a1)
0000882E 137C 0002 0024             		move.b	#2,$24(a1)
00008834 08A8 0003 0022             		bclr	#3,$22(a0)
0000883A 4228 0025                  		clr.b	$25(a0)
0000883E 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008844                            
00008844                            loc_8042:
00008844 117C 0008 0024             		move.b	#8,$24(a0)
0000884A                            
0000884A                            loc_8048:
0000884A 2628 002C                  		move.l	$2C(a0),d3
0000884E 3028 0012                  		move.w	$12(a0),d0
00008852 48C0                       		ext.l	d0
00008854 E180                       		asl.l	#8,d0
00008856 D680                       		add.l	d0,d3
00008858 2143 002C                  		move.l	d3,$2C(a0)
0000885C 0668 0038 0012             		addi.w	#$38,$12(a0)
00008862 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008866 0640 00E0                  		addi.w	#$E0,d0
0000886A B068 002C                  		cmp.w	$2C(a0),d0
0000886E 6400                       		bcc.s	locret_8074
00008870 117C 0006 0024             		move.b	#6,$24(a0)
00008876                            
00008876                            locret_8074:
00008876 4E75                       		rts	
00008878                            ; ===========================================================================
00008878                            
00008878                            Obj18_Type07:
00008878 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000887C 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000887E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008882 7000                       		moveq	#0,d0
00008884 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008888 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000888A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000888E 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008890 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008896                            
00008896                            Obj18_07_NoMove:
00008896 4E75                       		rts	
00008898                            ; ===========================================================================
00008898                            
00008898                            Obj18_07_Wait:
00008898 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000889C 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000889E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000088A2 4E75                       		rts	
000088A4                            ; ===========================================================================
000088A4                            
000088A4                            Obj18_Type08:
000088A4 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000088A8 3028 0034                  		move.w	$34(a0),d0
000088AC 0440 0200                  		subi.w	#$200,d0
000088B0 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000088B4 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000088B6 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000088BA                            
000088BA                            Obj18_08_NoStop:
000088BA 4E75                       		rts	
000088BC                            ; ===========================================================================
000088BC                            
000088BC                            Obj18_Type0A:
000088BC 3028 0034                  		move.w	$34(a0),d0
000088C0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000088C4 0401 0040                  		subi.b	#$40,d1
000088C8 4881                       		ext.w	d1
000088CA E241                       		asr.w	#1,d1
000088CC D041                       		add.w	d1,d0
000088CE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000088D2                            
000088D2                            Obj18_ChgMotion:
000088D2 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000088D8 4E75                       		rts	
000088DA                            ; ===========================================================================
000088DA                            
000088DA                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000088DA 3028 0032                  		move.w	$32(a0),d0
000088DE 0240 FF80                  		andi.w	#$FF80,d0
000088E2 3238 F700                  		move.w	($FFFFF700).w,d1
000088E6 0441 0080                  		subi.w	#$80,d1
000088EA 0241 FF80                  		andi.w	#$FF80,d1
000088EE 9041                       		sub.w	d1,d0
000088F0 0C40 0280                  		cmpi.w	#$280,d0
000088F4 6200                       		bhi.s	Obj18_Delete
000088F6 4E75                       		rts	
000088F8                            ; ===========================================================================
000088F8                            
000088F8                            Obj18_Delete:				; XREF: Obj18_Index
000088F8 6000 0000                  		bra.w	DeleteObject
000088FC                            ; ===========================================================================
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Sprite mappings - unused
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            Map_obj18x:
000088FC                            	include "_maps\obj18x.asm"
000088FC                            ; ---------------------------------------------------------------------------
000088FC                            ; Sprite mappings - unused
000088FC                            ; ---------------------------------------------------------------------------
000088FC 0000                       		dc.w byte_80FE-Map_obj18x
000088FE 0000                       		dc.w byte_8109-Map_obj18x
00008900 02                         byte_80FE:	dc.b 2
00008901 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008906 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000890B 0A                         byte_8109:	dc.b $A
0000890C F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008911 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008916 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000891B 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008920 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008925 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000892A 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000892F 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008934 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008939 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000893E                            		even
0000893E                            		even
0000893E                            
0000893E                            ; ---------------------------------------------------------------------------
0000893E                            ; Sprite mappings - GHZ	platforms
0000893E                            ; ---------------------------------------------------------------------------
0000893E                            Map_obj18:
0000893E                            	include "_maps\obj18ghz.asm"
0000893E                            ; ---------------------------------------------------------------------------
0000893E                            ; Sprite mappings - GHZ	platforms
0000893E                            ; ---------------------------------------------------------------------------
0000893E 0000                       		dc.w byte_8140-Map_obj18
00008940 0000                       		dc.w byte_8155-Map_obj18
00008942 04                         byte_8140:	dc.b 4
00008943 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008948 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000894D F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008952 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008957 0A                         byte_8155:	dc.b $A
00008958 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000895D 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008962 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008967 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000896C 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008971 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008976 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000897B 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008980 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008985 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000898A                            		even
0000898A                            		even
0000898A                            
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            ; Sprite mappings - SYZ	platforms
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            Map_obj18a:
0000898A                            	include "_maps\obj18syz.asm"
0000898A                            ; ---------------------------------------------------------------------------
0000898A                            ; Sprite mappings - SYZ	platforms
0000898A                            ; ---------------------------------------------------------------------------
0000898A 0000                       		dc.w byte_818A-Map_obj18a
0000898C 03                         byte_818A:	dc.b 3
0000898D F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008992 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008997 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000899C                            		even
0000899C                            		even
0000899C                            
0000899C                            ; ---------------------------------------------------------------------------
0000899C                            ; Sprite mappings - SLZ	platforms
0000899C                            ; ---------------------------------------------------------------------------
0000899C                            Map_obj18b:
0000899C                            	include "_maps\obj18slz.asm"
0000899C                            ; ---------------------------------------------------------------------------
0000899C                            ; Sprite mappings - SLZ	platforms
0000899C                            ; ---------------------------------------------------------------------------
0000899C 0000                       		dc.w byte_819C-Map_obj18b
0000899E 02                         byte_819C:	dc.b 2
0000899F F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000089A4 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000089AA 00                         		even
000089AA 00                         		even
000089AA                            
000089AA                            ; ===========================================================================
000089AA                            ; ---------------------------------------------------------------------------
000089AA                            ; Object 19 - Pearto bombs
000089AA                            ; ---------------------------------------------------------------------------
000089AA                            Obj19:					; XREF: Obj_Index
000089AA 7000                       		moveq	#0,d0
000089AC 1028 0024                  		move.b	$24(a0),d0
000089B0 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000089B4 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000089B8                            ; ---------------------------------------------------------------------------
000089B8                            
000089B8 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000089BE                            ; ---------------------------------------------------------------------------
000089BE                            
000089BE                            loc_7076:
000089BE 5428 0024                  		addq.b	#2,$24(a0)
000089C2 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000089CA 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000089D0 117C 0004 0001             		move.b	#4,1(a0)
000089D6 117C 0003 0019             		move.b	#3,$19(a0)
000089DC 117C 0087 0020             		move.b	#$87,$20(a0)
000089E2 117C 0008 0018             		move.b	#8,$18(a0)
000089E8 317C 0018 0030             		move.w	#$18,$30(a0)
000089EE                            
000089EE                            loc_70A6:
000089EE 0828 0007 0022             		btst	#7,$22(a0)
000089F4 6600                       		bne.s	loc_70C2
000089F6 4A68 0030                  		tst.w	$30(a0)
000089FA 6600                       		bne.s	loc_70D2
000089FC 4EB9 0000 0000             		jsr	ObjHitFloor
00008A02 4A41                       		tst.w	d1
00008A04 6A00                       		bpl.s	loc_70D6
00008A06 D368 000C                  		add.w	d1,$C(a0)
00008A0A                            
00008A0A                            loc_70C2:
00008A0A 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008A0E 117C 0000 0024             		move.b	#0,$24(a0)
00008A14                            ; ---------------------------------------------------------------------------
00008A14                            
00008A14                            loc_70D2:
00008A14 5368 0030                  		subq.w	#1,$30(a0)
00008A18                            
00008A18                            loc_70D6:
00008A18 6100 0000                  		bsr.w	ObjectFall
00008A1C 6100 0000                  		bsr.w	DisplaySprite
00008A20 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008A24 0640 00E0                  		addi.w	#$E0,d0
00008A28 B068 000C                  		cmp.w	$C(a0),d0
00008A2C 6500                       		bcs.s	loc_70EE
00008A2E 4E75                       		rts
00008A30                            ; ---------------------------------------------------------------------------
00008A30                            
00008A30                            loc_70EE:
00008A30 6100 0000                  		bsr.w	DeleteObject
00008A34 4E75                       		rts
00008A36                            		
00008A36                            Map_obj19:
00008A36                            	include "_maps\obj19.asm"
00008A36                            Map_02b4:
00008A36 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
00008A38 01                         Map_02b4_2: 	dc.b $1
00008A39 F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008A3E                            	even
00008A3E                            	even
00008A3E                            ; ===========================================================================
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            Map_obj48:
00008A3E                            	include "_maps\obj48.asm"
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008A3E                            ; ---------------------------------------------------------------------------
00008A3E 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008A42 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008A46 06                         byte_81B2:	dc.b 6
00008A47 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008A4C F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008A51 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008A56 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008A5B 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008A60 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00008A65 04                         byte_81D1:	dc.b 4
00008A66 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008A6B E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008A70 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
00008A75 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008A7A 04                         byte_81E6:	dc.b 4
00008A7B E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008A80 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00008A85 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008A8A 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008A8F 04                         byte_81FB:	dc.b 4
00008A90 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00008A95 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008A9A 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008A9F 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00008AA4                            		even
00008AA4                            		even
00008AA4                            
00008AA4                            ; ===========================================================================
00008AA4                            ; ---------------------------------------------------------------------------
00008AA4                            ; Object 1A - GHZ collapsing ledge
00008AA4                            ; ---------------------------------------------------------------------------
00008AA4                            
00008AA4                            Obj1A:					; XREF: Obj_Index
00008AA4 7000                       		moveq	#0,d0
00008AA6 1028 0024                  		move.b	$24(a0),d0
00008AAA 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008AAE 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008AB2                            ; ===========================================================================
00008AB2 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008AB6 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008ABA 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008ABE                            ; ===========================================================================
00008ABE                            
00008ABE                            Obj1A_Main:				; XREF: Obj1A_Index
00008ABE 5428 0024                  		addq.b	#2,$24(a0)
00008AC2 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008ACA 317C 4000 0002             		move.w	#$4000,2(a0)
00008AD0 0028 0004 0001             		ori.b	#4,1(a0)
00008AD6 117C 0004 0018             		move.b	#4,$18(a0)
00008ADC 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008AE2 117C 0064 0019             		move.b	#$64,$19(a0)
00008AE8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008AEE 117C 0038 0016             		move.b	#$38,$16(a0)
00008AF4 08E8 0004 0001             		bset	#4,1(a0)
00008AFA                            
00008AFA                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008AFA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008AFE 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008B00 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008B04 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008B08 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B0C                            
00008B0C                            Obj1A_Slope:
00008B0C 323C 0030                  		move.w	#$30,d1
00008B10 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B16 6100 F212                  		bsr.w	SlopeObject
00008B1A 6000 0000                  		bra.w	MarkObjGone
00008B1E                            ; ===========================================================================
00008B1E                            
00008B1E                            Obj1A_Touch:				; XREF: Obj1A_Index
00008B1E 4A28 0038                  		tst.b	$38(a0)
00008B22 6700 0000                  		beq.w	loc_847A
00008B26 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008B2C 5328 0038                  		subq.b	#1,$38(a0)
00008B30                            
00008B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B30                            
00008B30                            
00008B30                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008B30 323C 0030                  		move.w	#$30,d1
00008B34 6100 F294                  		bsr.w	ExitPlatform
00008B38 323C 0030                  		move.w	#$30,d1
00008B3C 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008B42 3428 0008                  		move.w	8(a0),d2
00008B46 6100 0000                  		bsr.w	SlopeObject2
00008B4A 6000 0000                  		bra.w	MarkObjGone
00008B4E                            ; End of function Obj1A_WalkOff
00008B4E                            
00008B4E                            ; ===========================================================================
00008B4E                            
00008B4E                            Obj1A_Display:				; XREF: Obj1A_Index
00008B4E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008B52 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008B54 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008B58 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008B5C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008B60 6000 0000                  		bra.w	DisplaySprite
00008B64                            ; ===========================================================================
00008B64                            
00008B64                            loc_82D0:				; XREF: Obj1A_Display
00008B64 5328 0038                  		subq.b	#1,$38(a0)
00008B68 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008B6C 43F8 D000                  		lea	($FFFFD000).w,a1
00008B70 0829 0003 0022             		btst	#3,$22(a1)
00008B76 6700                       		beq.s	loc_82FC
00008B78 4A28 0038                  		tst.b	$38(a0)
00008B7C 6600                       		bne.s	locret_8308
00008B7E 08A9 0003 0022             		bclr	#3,$22(a1)
00008B84 08A9 0005 0022             		bclr	#5,$22(a1)
00008B8A 137C 0001 001D             		move.b	#1,$1D(a1)
00008B90                            
00008B90                            loc_82FC:
00008B90 117C 0000 003A             		move.b	#0,$3A(a0)
00008B96 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008B9C                            
00008B9C                            locret_8308:
00008B9C 4E75                       		rts	
00008B9E                            ; ===========================================================================
00008B9E                            
00008B9E                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008B9E 6100 0000                  		bsr.w	ObjectFall
00008BA2 6100 0000                  		bsr.w	DisplaySprite
00008BA6 4A28 0001                  		tst.b	1(a0)
00008BAA 6A00                       		bpl.s	Obj1A_Delete
00008BAC 4E75                       		rts	
00008BAE                            ; ===========================================================================
00008BAE                            
00008BAE                            Obj1A_Delete:				; XREF: Obj1A_Index
00008BAE 6100 0000                  		bsr.w	DeleteObject
00008BB2 4E75                       		rts	
00008BB4                            ; ===========================================================================
00008BB4                            ; ---------------------------------------------------------------------------
00008BB4                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008BB4                            ; ---------------------------------------------------------------------------
00008BB4                            
00008BB4                            Obj53:					; XREF: Obj_Index
00008BB4 7000                       		moveq	#0,d0
00008BB6 1028 0024                  		move.b	$24(a0),d0
00008BBA 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008BBE 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008BC2                            ; ===========================================================================
00008BC2 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008BC6 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008BCA 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008BCE                            ; ===========================================================================
00008BCE                            
00008BCE                            Obj53_Main:				; XREF: Obj53_Index
00008BCE 5428 0024                  		addq.b	#2,$24(a0)
00008BD2 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008BDA 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008BE0 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008BE6 6600                       		bne.s	Obj53_NotSLZ
00008BE8 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008BEE 5428 001A                  		addq.b	#2,$1A(a0)
00008BF2                            
00008BF2                            Obj53_NotSLZ:
00008BF2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008BF8 6600                       		bne.s	Obj53_NotSBZ
00008BFA 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008C00                            
00008C00                            Obj53_NotSBZ:
00008C00 0028 0004 0001             		ori.b	#4,1(a0)
00008C06 117C 0004 0018             		move.b	#4,$18(a0)
00008C0C 117C 0007 0038             		move.b	#7,$38(a0)
00008C12 117C 0044 0019             		move.b	#$44,$19(a0)
00008C18                            
00008C18                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008C18 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C1C 6700                       		beq.s	Obj53_Solid	; if not, branch
00008C1E 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C22 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008C26 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C2A                            
00008C2A                            Obj53_Solid:
00008C2A 323C 0020                  		move.w	#$20,d1
00008C2E 6100 F026                  		bsr.w	PlatformObject
00008C32 4A28 0028                  		tst.b	$28(a0)
00008C36 6A00                       		bpl.s	Obj53_MarkAsGone
00008C38 0829 0003 0022             		btst	#3,$22(a1)
00008C3E 6700                       		beq.s	Obj53_MarkAsGone
00008C40 08A8 0000 0001             		bclr	#0,1(a0)
00008C46 3029 0008                  		move.w	8(a1),d0
00008C4A 9068 0008                  		sub.w	8(a0),d0
00008C4E 6400                       		bcc.s	Obj53_MarkAsGone
00008C50 08E8 0000 0001             		bset	#0,1(a0)
00008C56                            
00008C56                            Obj53_MarkAsGone:
00008C56 6000 0000                  		bra.w	MarkObjGone
00008C5A                            ; ===========================================================================
00008C5A                            
00008C5A                            Obj53_Touch:				; XREF: Obj53_Index
00008C5A 4A28 0038                  		tst.b	$38(a0)
00008C5E 6700 0000                  		beq.w	loc_8458
00008C62 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008C68 5328 0038                  		subq.b	#1,$38(a0)
00008C6C                            
00008C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C6C                            
00008C6C                            
00008C6C                            Obj53_WalkOff:				; XREF: Obj53_Index
00008C6C 323C 0020                  		move.w	#$20,d1
00008C70 6100 F158                  		bsr.w	ExitPlatform
00008C74 3428 0008                  		move.w	8(a0),d2
00008C78 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008C7C 6000 0000                  		bra.w	MarkObjGone
00008C80                            ; End of function Obj53_WalkOff
00008C80                            
00008C80                            ; ===========================================================================
00008C80                            
00008C80                            Obj53_Display:				; XREF: Obj53_Index
00008C80 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008C84 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008C86 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008C8A 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008C8E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008C92 6000 0000                  		bra.w	DisplaySprite
00008C96                            ; ===========================================================================
00008C96                            
00008C96                            loc_8402:
00008C96 5328 0038                  		subq.b	#1,$38(a0)
00008C9A 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008C9E 43F8 D000                  		lea	($FFFFD000).w,a1
00008CA2 0829 0003 0022             		btst	#3,$22(a1)
00008CA8 6700                       		beq.s	loc_842E
00008CAA 4A28 0038                  		tst.b	$38(a0)
00008CAE 6600                       		bne.s	locret_843A
00008CB0 08A9 0003 0022             		bclr	#3,$22(a1)
00008CB6 08A9 0005 0022             		bclr	#5,$22(a1)
00008CBC 137C 0001 001D             		move.b	#1,$1D(a1)
00008CC2                            
00008CC2                            loc_842E:
00008CC2 117C 0000 003A             		move.b	#0,$3A(a0)
00008CC8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008CCE                            
00008CCE                            locret_843A:
00008CCE 4E75                       		rts	
00008CD0                            ; ===========================================================================
00008CD0                            
00008CD0                            Obj53_TimeZero:				; XREF: Obj53_Display
00008CD0 6100 0000                  		bsr.w	ObjectFall
00008CD4 6100 0000                  		bsr.w	DisplaySprite
00008CD8 4A28 0001                  		tst.b	1(a0)
00008CDC 6A00                       		bpl.s	Obj53_Delete
00008CDE 4E75                       		rts	
00008CE0                            ; ===========================================================================
00008CE0                            
00008CE0                            Obj53_Delete:				; XREF: Obj53_Index
00008CE0 6100 0000                  		bsr.w	DeleteObject
00008CE4 4E75                       		rts	
00008CE6                            ; ===========================================================================
00008CE6                            
00008CE6                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008CE6 117C 0000 003A             		move.b	#0,$3A(a0)
00008CEC                            
00008CEC                            loc_8458:				; XREF: Obj53_Touch
00008CEC 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008CF2 0828 0000 0028             		btst	#0,$28(a0)
00008CF8 6700                       		beq.s	loc_846C
00008CFA 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008D00                            
00008D00                            loc_846C:
00008D00 7207                       		moveq	#7,d1
00008D02 5228 001A                  		addq.b	#1,$1A(a0)
00008D06 6000                       		bra.s	loc_8486
00008D08                            ; ===========================================================================
00008D08                            
00008D08                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008D08 117C 0000 003A             		move.b	#0,$3A(a0)
00008D0E                            
00008D0E                            loc_847A:				; XREF: Obj1A_Touch
00008D0E 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008D14 7218                       		moveq	#$18,d1
00008D16 5428 001A                  		addq.b	#2,$1A(a0)
00008D1A                            
00008D1A                            loc_8486:				; XREF: Obj53_Collapse
00008D1A 7000                       		moveq	#0,d0
00008D1C 1028 001A                  		move.b	$1A(a0),d0
00008D20 D040                       		add.w	d0,d0
00008D22 2668 0004                  		movea.l	4(a0),a3
00008D26 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008D2A 524B                       		addq.w	#1,a3
00008D2C 08E8 0005 0001             		bset	#5,1(a0)
00008D32 1810                       		move.b	0(a0),d4
00008D34 1A28 0001                  		move.b	1(a0),d5
00008D38 2248                       		movea.l	a0,a1
00008D3A 6000                       		bra.s	loc_84B2
00008D3C                            ; ===========================================================================
00008D3C                            
00008D3C                            loc_84AA:
00008D3C 6100 0000                  		bsr.w	SingleObjLoad
00008D40 6600                       		bne.s	loc_84F2
00008D42 5A4B                       		addq.w	#5,a3
00008D44                            
00008D44                            loc_84B2:
00008D44 137C 0006 0024             		move.b	#6,$24(a1)
00008D4A 1284                       		move.b	d4,0(a1)
00008D4C 234B 0004                  		move.l	a3,4(a1)
00008D50 1345 0001                  		move.b	d5,1(a1)
00008D54 3368 0008 0008             		move.w	8(a0),8(a1)
00008D5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D60 3368 0002 0002             		move.w	2(a0),2(a1)
00008D66 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008D6C 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008D72 135C 0038                  		move.b	(a4)+,$38(a1)
00008D76 B3C8                       		cmpa.l	a0,a1
00008D78 6400                       		bcc.s	loc_84EE
00008D7A 6100 0000                  		bsr.w	DisplaySprite2
00008D7E                            
00008D7E                            loc_84EE:
00008D7E 51C9 FFBC                  		dbf	d1,loc_84AA
00008D82                            
00008D82                            loc_84F2:
00008D82 6100 0000                  		bsr.w	DisplaySprite
00008D86 303C 00B9                  		move.w	#$B9,d0
00008D8A 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008D90                            ; ===========================================================================
00008D90                            ; ---------------------------------------------------------------------------
00008D90                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008D90                            ; ---------------------------------------------------------------------------
00008D90 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008DA0 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008DAA 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008DB2 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008DBA                            
00008DBA                            ; ---------------------------------------------------------------------------
00008DBA                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008DBA                            ; ---------------------------------------------------------------------------
00008DBA                            
00008DBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DBA                            
00008DBA                            
00008DBA                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008DBA 43F8 D000                  		lea	($FFFFD000).w,a1
00008DBE 0829 0003 0022             		btst	#3,$22(a1)
00008DC4 6700                       		beq.s	locret_856E
00008DC6 3029 0008                  		move.w	8(a1),d0
00008DCA 9068 0008                  		sub.w	8(a0),d0
00008DCE D041                       		add.w	d1,d0
00008DD0 E248                       		lsr.w	#1,d0
00008DD2 0828 0000 0001             		btst	#0,1(a0)
00008DD8 6700                       		beq.s	loc_854E
00008DDA 4640                       		not.w	d0
00008DDC D041                       		add.w	d1,d0
00008DDE                            
00008DDE                            loc_854E:
00008DDE 7200                       		moveq	#0,d1
00008DE0 1232 0000                  		move.b	(a2,d0.w),d1
00008DE4 3028 000C                  		move.w	$C(a0),d0
00008DE8 9041                       		sub.w	d1,d0
00008DEA 7200                       		moveq	#0,d1
00008DEC 1229 0016                  		move.b	$16(a1),d1
00008DF0 9041                       		sub.w	d1,d0
00008DF2 3340 000C                  		move.w	d0,$C(a1)
00008DF6 9468 0008                  		sub.w	8(a0),d2
00008DFA 9569 0008                  		sub.w	d2,8(a1)
00008DFE                            
00008DFE                            locret_856E:
00008DFE 4E75                       		rts	
00008E00                            ; End of function SlopeObject2
00008E00                            
00008E00                            ; ===========================================================================
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            ; Collision data for GHZ collapsing ledge
00008E00                            ; ---------------------------------------------------------------------------
00008E00                            Obj1A_SlopeData:
00008E00                            		incbin	misc\ghzledge.bin
00008E30                            		even
00008E30                            
00008E30                            ; ---------------------------------------------------------------------------
00008E30                            ; Sprite mappings - GHZ	collapsing ledge
00008E30                            ; ---------------------------------------------------------------------------
00008E30                            Map_obj1A:
00008E30                            	include "_maps\obj1A.asm"
00008E30                            ; ---------------------------------------------------------------------------
00008E30                            ; Sprite mappings - GHZ	collapsing ledge
00008E30                            ; ---------------------------------------------------------------------------
00008E30 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008E34 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008E38 10                         byte_85A8:	dc.b $10
00008E39 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008E3E D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E43 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E48 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E4D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008E52 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008E57 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008E5C F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008E61 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008E66 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008E6B 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008E70 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008E75 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008E7A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008E7F 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008E84 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E89 10                         byte_85F9:	dc.b $10
00008E8A C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008E8F D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008E94 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008E99 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008E9E D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008EA3 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008EA8 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008EAD F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008EB2 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008EB7 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008EBC 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008EC1 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008EC6 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008ECB 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008ED0 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008ED5 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008EDA 19                         byte_864A:	dc.b $19
00008EDB C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008EE0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008EE5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008EEA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008EEF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008EF4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008EF9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008EFE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008F0D F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F12 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F17 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F1C F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F21 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008F26 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008F2B 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008F30 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008F35 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008F3A 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008F3F 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008F44 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008F49 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008F4E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008F53 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008F58 19                         byte_86C8:	dc.b $19
00008F59 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008F5E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008F63 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008F68 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008F6D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008F72 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008F77 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008F7C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008F81 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008F86 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008F8B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008F90 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008F95 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008F9A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008F9F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008FA4 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008FA9 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008FAE 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008FB3 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008FB8 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008FBD 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008FC2 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008FC7 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008FCC 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008FD1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008FD6                            		even
00008FD6                            		even
00008FD6                            
00008FD6                            ; ---------------------------------------------------------------------------
00008FD6                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008FD6                            ; ---------------------------------------------------------------------------
00008FD6                            Map_obj53:
00008FD6                            	include "_maps\obj53.asm"
00008FD6                            ; ---------------------------------------------------------------------------
00008FD6                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008FD6                            ; ---------------------------------------------------------------------------
00008FD6 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008FDA 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008FDE 04                         byte_874E:	dc.b 4
00008FDF F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008FE4 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008FE9 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008FEE 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008FF3 08                         byte_8763:	dc.b 8
00008FF4 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008FF9 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008FFE F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009003 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00009008 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000900D 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009012 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00009017 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000901C 04                         byte_878C:	dc.b 4
0000901D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009022 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00009027 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000902C 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009031 08                         byte_87A1:	dc.b 8
00009032 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00009037 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000903C F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009041 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00009046 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
0000904B 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009050 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00009055 0805 000C 10               		dc.b 8,	5, 0, $C, $10
0000905A                            		even
0000905A                            		even
0000905A                            
0000905A                            ; ===========================================================================
0000905A                            ; ---------------------------------------------------------------------------
0000905A                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
0000905A                            ; ---------------------------------------------------------------------------
0000905A                            
0000905A                            Obj1C:					; XREF: Obj_Index
0000905A 7000                       		moveq	#0,d0
0000905C 1028 0024                  		move.b	$24(a0),d0
00009060 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00009064 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00009068                            ; ===========================================================================
00009068 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
0000906A 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
0000906C                            ; ===========================================================================
0000906C                            
0000906C                            Obj1C_Main:				; XREF: Obj1C_Index
0000906C 5428 0024                  		addq.b	#2,$24(a0)
00009070 7000                       		moveq	#0,d0
00009072 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00009076 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
0000907A 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
0000907E 2159 0004                  		move.l	(a1)+,4(a0)
00009082 3159 0002                  		move.w	(a1)+,2(a0)
00009086 0028 0004 0001             		ori.b	#4,1(a0)
0000908C 1159 001A                  		move.b	(a1)+,$1A(a0)
00009090 1159 0019                  		move.b	(a1)+,$19(a0)
00009094 1159 0018                  		move.b	(a1)+,$18(a0)
00009098 1159 0020                  		move.b	(a1)+,$20(a0)
0000909C                            
0000909C                            Obj1C_ChkDel:				; XREF: Obj1C_Index
0000909C 3028 0008                  		move.w	8(a0),d0
000090A0 0240 FF80                  		andi.w	#$FF80,d0
000090A4 3238 F700                  		move.w	($FFFFF700).w,d1
000090A8 0441 0080                  		subi.w	#$80,d1
000090AC 0241 FF80                  		andi.w	#$FF80,d1
000090B0 9041                       		sub.w	d1,d0
000090B2 0C40 0280                  		cmpi.w	#$280,d0
000090B6 6200 0000                  		bhi.w	DeleteObject
000090BA 6000 0000                  		bra.w	DisplaySprite
000090BE                            ; ===========================================================================
000090BE                            ; ---------------------------------------------------------------------------
000090BE                            ; Variables for	object $1C are stored in an array
000090BE                            ; ---------------------------------------------------------------------------
000090BE 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000090C2 44D8                       		dc.w $44D8		; VRAM setting
000090C4 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000090C8 0000 0000                  		dc.l Map_obj1C
000090CC 44D8                       		dc.w $44D8
000090CE 0008 0200                  		dc.b 0,	8, 2, 0
000090D2 0000 0000                  		dc.l Map_obj1C
000090D6 44D8                       		dc.w $44D8
000090D8 0008 0200                  		dc.b 0,	8, 2, 0
000090DC 0000 813E                  		dc.l Map_obj11
000090E0 438E                       		dc.w $438E
000090E2 0110 0100                  		dc.b 1,	$10, 1,	0
000090E6                            ; ---------------------------------------------------------------------------
000090E6                            ; Sprite mappings - SLZ	lava thrower
000090E6                            ; ---------------------------------------------------------------------------
000090E6                            Map_obj1C:
000090E6                            	include "_maps\obj1C.asm"
000090E6                            ; ---------------------------------------------------------------------------
000090E6                            ; Sprite mappings - SLZ	lava thrower
000090E6                            ; ---------------------------------------------------------------------------
000090E6 0000                       		dc.w byte_8858-Map_obj1C
000090E8 01                         byte_8858:	dc.b 1
000090E9 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000090EE                            		even
000090EE                            		even
000090EE                            
000090EE                            ; ===========================================================================
000090EE                            ; ---------------------------------------------------------------------------
000090EE                            ; Object 1D - switch that activates when Sonic touches it
000090EE                            ; (this	is not used anywhere in	the game)
000090EE                            ; ---------------------------------------------------------------------------
000090EE                            
000090EE                            Obj1D:					; XREF: Obj_Index
000090EE 7000                       		moveq	#0,d0
000090F0 1028 0024                  		move.b	$24(a0),d0
000090F4 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000090F8 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000090FC                            ; ===========================================================================
000090FC 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000090FE 0000                       		dc.w Obj1D_Action-Obj1D_Index
00009100 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00009102                            ; ===========================================================================
00009102                            
00009102                            Obj1D_Main:				; XREF: Obj1D_Index
00009102 5428 0024                  		addq.b	#2,$24(a0)
00009106 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000910E 317C 4000 0002             		move.w	#$4000,2(a0)
00009114 117C 0004 0001             		move.b	#4,1(a0)
0000911A 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009120 117C 0010 0019             		move.b	#$10,$19(a0)
00009126 117C 0005 0018             		move.b	#5,$18(a0)
0000912C                            
0000912C                            Obj1D_Action:				; XREF: Obj1D_Index
0000912C 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009132 323C 0010                  		move.w	#$10,d1
00009136 6100 0000                  		bsr.w	Obj1D_ChkTouch
0000913A 6700                       		beq.s	Obj1D_ChkDel
0000913C 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009140 7001                       		moveq	#1,d0
00009142 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00009146                            
00009146                            Obj1D_ChkDel:
00009146 6100 0000                  		bsr.w	DisplaySprite
0000914A 3028 0008                  		move.w	8(a0),d0
0000914E 0240 FF80                  		andi.w	#$FF80,d0
00009152 3238 F700                  		move.w	($FFFFF700).w,d1
00009156 0441 0080                  		subi.w	#$80,d1
0000915A 0241 FF80                  		andi.w	#$FF80,d1
0000915E 9041                       		sub.w	d1,d0
00009160 0C40 0280                  		cmpi.w	#$280,d0
00009164 6200 0000                  		bhi.w	Obj1D_Delete
00009168 4E75                       		rts	
0000916A                            ; ===========================================================================
0000916A                            
0000916A                            Obj1D_Delete:				; XREF: Obj1D_Index
0000916A 6100 0000                  		bsr.w	DeleteObject
0000916E 4E75                       		rts	
00009170                            ; ---------------------------------------------------------------------------
00009170                            ; Subroutine to	check if Sonic touches the object
00009170                            ; ---------------------------------------------------------------------------
00009170                            
00009170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009170                            
00009170                            
00009170                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009170 43F8 D000                  		lea	($FFFFD000).w,a1
00009174 3029 0008                  		move.w	8(a1),d0
00009178 9068 0008                  		sub.w	8(a0),d0
0000917C D041                       		add.w	d1,d0
0000917E 6B00                       		bmi.s	loc_8918
00009180 D241                       		add.w	d1,d1
00009182 B041                       		cmp.w	d1,d0
00009184 6400                       		bcc.s	loc_8918
00009186 3429 000C                  		move.w	$C(a1),d2
0000918A 1229 0016                  		move.b	$16(a1),d1
0000918E 4881                       		ext.w	d1
00009190 D242                       		add.w	d2,d1
00009192 3028 000C                  		move.w	$C(a0),d0
00009196 0440 0010                  		subi.w	#$10,d0
0000919A 9041                       		sub.w	d1,d0
0000919C 6200                       		bhi.s	loc_8918
0000919E 0C40 FFF0                  		cmpi.w	#-$10,d0
000091A2 6500                       		bcs.s	loc_8918
000091A4 70FF                       		moveq	#-1,d0
000091A6 4E75                       		rts	
000091A8                            ; ===========================================================================
000091A8                            
000091A8                            loc_8918:
000091A8 7000                       		moveq	#0,d0
000091AA 4E75                       		rts	
000091AC                            ; End of function Obj1D_ChkTouch
000091AC                            
000091AC                            ; ===========================================================================
000091AC                            ; ---------------------------------------------------------------------------
000091AC                            ; Sprite mappings - object 1D
000091AC                            ; ---------------------------------------------------------------------------
000091AC                            Map_obj1D:
000091AC                            	include "_maps\obj1D.asm"
000091AC                            ; ---------------------------------------------------------------------------
000091AC                            ; Sprite mappings - object 1D
000091AC                            ; ---------------------------------------------------------------------------
000091AC 0000                       		dc.w byte_891E-Map_obj1D
000091AE 04                         byte_891E:	dc.b 4
000091AF E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000091B4 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000091B9 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000091BE 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000091C4 00                         		even
000091C4 00                         		even
000091C4                            
000091C4                            ; ===========================================================================
000091C4                            ; ---------------------------------------------------------------------------
000091C4                            ; Object 2A - doors (SBZ)
000091C4                            ; ---------------------------------------------------------------------------
000091C4                            
000091C4                            Obj2A:					; XREF: Obj_Index
000091C4 7000                       		moveq	#0,d0
000091C6 1028 0024                  		move.b	$24(a0),d0
000091CA 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000091CE 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000091D2                            ; ===========================================================================
000091D2 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000091D4 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000091D6                            ; ===========================================================================
000091D6                            
000091D6                            Obj2A_Main:				; XREF: Obj2A_Index
000091D6 5428 0024                  		addq.b	#2,$24(a0)
000091DA 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000091E2 317C 42E8 0002             		move.w	#$42E8,2(a0)
000091E8 0028 0004 0001             		ori.b	#4,1(a0)
000091EE 117C 0008 0019             		move.b	#8,$19(a0)
000091F4 117C 0004 0018             		move.b	#4,$18(a0)
000091FA                            
000091FA                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000091FA 323C 0040                  		move.w	#$40,d1
000091FE 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009202 3038 D008                  		move.w	($FFFFD008).w,d0
00009206 D041                       		add.w	d1,d0
00009208 B068 0008                  		cmp.w	8(a0),d0
0000920C 6500                       		bcs.s	Obj2A_Animate
0000920E 9041                       		sub.w	d1,d0
00009210 9041                       		sub.w	d1,d0
00009212 B068 0008                  		cmp.w	8(a0),d0
00009216 6400                       		bcc.s	Obj2A_Animate
00009218 D041                       		add.w	d1,d0
0000921A B068 0008                  		cmp.w	8(a0),d0
0000921E 6400                       		bcc.s	loc_899A
00009220 0828 0000 0022             		btst	#0,$22(a0)
00009226 6600                       		bne.s	Obj2A_Animate
00009228 6000                       		bra.s	Obj2A_Open
0000922A                            ; ===========================================================================
0000922A                            
0000922A                            loc_899A:				; XREF: Obj2A_OpenShut
0000922A 0828 0000 0022             		btst	#0,$22(a0)
00009230 6700                       		beq.s	Obj2A_Animate
00009232                            
00009232                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009232 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00009238                            
00009238                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00009238 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000923E 6100 0000                  		bsr.w	AnimateSprite
00009242 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00009246 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00009248 323C 0011                  		move.w	#$11,d1
0000924C 343C 0020                  		move.w	#$20,d2
00009250 3602                       		move.w	d2,d3
00009252 5243                       		addq.w	#1,d3
00009254 3828 0008                  		move.w	8(a0),d4
00009258 6100 0000                  		bsr.w	SolidObject
0000925C                            
0000925C                            Obj2A_MarkAsUsed:
0000925C 6000 0000                  		bra.w	MarkObjGone
00009260                            ; ===========================================================================
00009260                            Ani_obj2A:
00009260                            	include "_anim\obj2A.asm"
00009260                            ; ---------------------------------------------------------------------------
00009260                            ; Animation script - doors (SBZ)
00009260                            ; ---------------------------------------------------------------------------
00009260 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009262 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00009264 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009270 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
0000927C                            		even
0000927C                            		even
0000927C                            
0000927C                            ; ---------------------------------------------------------------------------
0000927C                            ; Sprite mappings - doors (SBZ)
0000927C                            ; ---------------------------------------------------------------------------
0000927C                            Map_obj2A:
0000927C                            	include "_maps\obj2A.asm"
0000927C                            ; ---------------------------------------------------------------------------
0000927C                            ; Sprite mappings - doors (SBZ)
0000927C                            ; ---------------------------------------------------------------------------
0000927C 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009280 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00009284 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00009288 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
0000928C 0000                       		dc.w byte_8A56-Map_obj2A
0000928E 02                         byte_89FE:	dc.b 2
0000928F E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009294 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009299 02                         byte_8A09:	dc.b 2
0000929A DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000929F 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000092A4 02                         byte_8A14:	dc.b 2
000092A5 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000092AA 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000092AF 02                         byte_8A1F:	dc.b 2
000092B0 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000092B5 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000092BA 02                         byte_8A2A:	dc.b 2
000092BB D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000092C0 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000092C5 02                         byte_8A35:	dc.b 2
000092C6 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000092CB 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000092D0 02                         byte_8A40:	dc.b 2
000092D1 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000092D6 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000092DB 02                         byte_8A4B:	dc.b 2
000092DC C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000092E1 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000092E6 02                         byte_8A56:	dc.b 2
000092E7 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000092EC 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000092F2 00                         		even
000092F2 00                         		even
000092F2                            
000092F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000092F2                            
000092F2                            
000092F2                            Obj44_SolidWall:			; XREF: Obj44_Solid
000092F2 6100 0000                  		bsr.w	Obj44_SolidWall2
000092F6 6700                       		beq.s	loc_8AA8
000092F8 6B00 0000                  		bmi.w	loc_8AC4
000092FC 4A40                       		tst.w	d0
000092FE 6700 0000                  		beq.w	loc_8A92
00009302 6B00                       		bmi.s	loc_8A7C
00009304 4A69 0010                  		tst.w	$10(a1)
00009308 6B00                       		bmi.s	loc_8A92
0000930A 6000                       		bra.s	loc_8A82
0000930C                            ; ===========================================================================
0000930C                            
0000930C                            loc_8A7C:
0000930C 4A69 0010                  		tst.w	$10(a1)
00009310 6A00                       		bpl.s	loc_8A92
00009312                            
00009312                            loc_8A82:
00009312 9169 0008                  		sub.w	d0,8(a1)
00009316 337C 0000 0014             		move.w	#0,$14(a1)
0000931C 337C 0000 0010             		move.w	#0,$10(a1)
00009322                            
00009322                            loc_8A92:
00009322 0829 0001 0022             		btst	#1,$22(a1)
00009328 6600                       		bne.s	loc_8AB6
0000932A 08E9 0005 0022             		bset	#5,$22(a1)
00009330 08E8 0005 0022             		bset	#5,$22(a0)
00009336 4E75                       		rts	
00009338                            ; ===========================================================================
00009338                            
00009338                            loc_8AA8:
00009338 0828 0005 0022             		btst	#5,$22(a0)
0000933E 6700                       		beq.s	locret_8AC2
00009340 337C 0001 001C             		move.w	#1,$1C(a1)
00009346                            
00009346                            loc_8AB6:
00009346 08A8 0005 0022             		bclr	#5,$22(a0)
0000934C 08A9 0005 0022             		bclr	#5,$22(a1)
00009352                            
00009352                            locret_8AC2:
00009352 4E75                       		rts	
00009354                            ; ===========================================================================
00009354                            
00009354                            loc_8AC4:
00009354 4A69 0012                  		tst.w	$12(a1)
00009358 6A00                       		bpl.s	locret_8AD8
0000935A 4A43                       		tst.w	d3
0000935C 6A00                       		bpl.s	locret_8AD8
0000935E 9769 000C                  		sub.w	d3,$C(a1)
00009362 337C 0000 0012             		move.w	#0,$12(a1)
00009368                            
00009368                            locret_8AD8:
00009368 4E75                       		rts	
0000936A                            ; End of function Obj44_SolidWall
0000936A                            
0000936A                            
0000936A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000936A                            
0000936A                            
0000936A                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
0000936A 43F8 D000                  		lea	($FFFFD000).w,a1
0000936E 3029 0008                  		move.w	8(a1),d0
00009372 9068 0008                  		sub.w	8(a0),d0
00009376 D041                       		add.w	d1,d0
00009378 6B00                       		bmi.s	loc_8B48
0000937A 3601                       		move.w	d1,d3
0000937C D643                       		add.w	d3,d3
0000937E B043                       		cmp.w	d3,d0
00009380 6200                       		bhi.s	loc_8B48
00009382 1629 0016                  		move.b	$16(a1),d3
00009386 4883                       		ext.w	d3
00009388 D443                       		add.w	d3,d2
0000938A 3629 000C                  		move.w	$C(a1),d3
0000938E 9668 000C                  		sub.w	$C(a0),d3
00009392 D642                       		add.w	d2,d3
00009394 6B00                       		bmi.s	loc_8B48
00009396 3802                       		move.w	d2,d4
00009398 D844                       		add.w	d4,d4
0000939A B644                       		cmp.w	d4,d3
0000939C 6400                       		bcc.s	loc_8B48
0000939E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000093A2 6B00                       		bmi.s	loc_8B48
000093A4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000093AA 6400                       		bcc.s	loc_8B48
000093AC 4A78 FE08                  		tst.w	($FFFFFE08).w
000093B0 6600                       		bne.s	loc_8B48
000093B2 3A00                       		move.w	d0,d5
000093B4 B240                       		cmp.w	d0,d1
000093B6 6400                       		bcc.s	loc_8B30
000093B8 D241                       		add.w	d1,d1
000093BA 9041                       		sub.w	d1,d0
000093BC 3A00                       		move.w	d0,d5
000093BE 4445                       		neg.w	d5
000093C0                            
000093C0                            loc_8B30:
000093C0 3203                       		move.w	d3,d1
000093C2 B443                       		cmp.w	d3,d2
000093C4 6400                       		bcc.s	loc_8B3C
000093C6 9644                       		sub.w	d4,d3
000093C8 3203                       		move.w	d3,d1
000093CA 4441                       		neg.w	d1
000093CC                            
000093CC                            loc_8B3C:
000093CC BA41                       		cmp.w	d1,d5
000093CE 6200                       		bhi.s	loc_8B44
000093D0 7801                       		moveq	#1,d4
000093D2 4E75                       		rts	
000093D4                            ; ===========================================================================
000093D4                            
000093D4                            loc_8B44:
000093D4 78FF                       		moveq	#-1,d4
000093D6 4E75                       		rts	
000093D8                            ; ===========================================================================
000093D8                            
000093D8                            loc_8B48:
000093D8 7800                       		moveq	#0,d4
000093DA 4E75                       		rts	
000093DC                            ; End of function Obj44_SolidWall2
000093DC                            
000093DC                            ; ===========================================================================
000093DC                            ; ---------------------------------------------------------------------------
000093DC                            ; Object 1E - Ball Hog enemy (SBZ)
000093DC                            ; ---------------------------------------------------------------------------
000093DC                            
000093DC                            Obj1E:					; XREF: Obj_Index
000093DC 7000                       		moveq	#0,d0
000093DE 1028 0024                  		move.b	$24(a0),d0
000093E2 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000093E6 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000093EA                            ; ===========================================================================
000093EA 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000093EC 0000                       		dc.w Obj1E_Action-Obj1E_Index
000093EE                            ; ===========================================================================
000093EE                            
000093EE                            Obj1E_Main:				; XREF: Obj1E_Index
000093EE 117C 0013 0016             		move.b	#$13,$16(a0)
000093F4 117C 0008 0017             		move.b	#8,$17(a0)
000093FA 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009402 317C 2302 0002             		move.w	#$2302,2(a0)
00009408 117C 0004 0001             		move.b	#4,1(a0)
0000940E 117C 0004 0018             		move.b	#4,$18(a0)
00009414 117C 0005 0020             		move.b	#5,$20(a0)
0000941A 117C 000C 0019             		move.b	#$C,$19(a0)
00009420 6100 0000                  		bsr.w	ObjectFall
00009424 4EB9 0000 0000             		jsr	ObjHitFloor
0000942A 4A41                       		tst.w	d1
0000942C 6A00                       		bpl.s	locret_8BAC
0000942E D368 000C                  		add.w	d1,$C(a0)
00009432 317C 0000 0012             		move.w	#0,$12(a0)
00009438 5428 0024                  		addq.b	#2,$24(a0)
0000943C                            
0000943C                            locret_8BAC:
0000943C 4E75                       		rts	
0000943E                            ; ===========================================================================
0000943E                            
0000943E                            Obj1E_Action:				; XREF: Obj1E_Index
0000943E 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009444 6100 0000                  		bsr.w	AnimateSprite
00009448 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
0000944E 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009450 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009454 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009456 6000                       		bra.s	Obj1E_MarkAsGone
00009458                            ; ===========================================================================
00009458                            
00009458                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009458 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000945C                            
0000945C                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000945C 6000 0000                  		bra.w	MarkObjGone
00009460                            ; ===========================================================================
00009460                            
00009460                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009460 117C 0001 0032             		move.b	#1,$32(a0)
00009466 6100 0000                  		bsr.w	SingleObjLoad
0000946A 6600                       		bne.s	loc_8C1A
0000946C 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009470 3368 0008 0008             		move.w	8(a0),8(a1)
00009476 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000947C 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009482 337C 0000 0012             		move.w	#0,$12(a1)
00009488 70FC                       		moveq	#-4,d0
0000948A 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009490 6700                       		beq.s	loc_8C0A	; if not, branch
00009492 4440                       		neg.w	d0
00009494 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009498                            
00009498                            loc_8C0A:
00009498 D169 0008                  		add.w	d0,8(a1)
0000949C 0669 000C 000C             		addi.w	#$C,$C(a1)
000094A2 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000094A8                            
000094A8                            loc_8C1A:
000094A8 60B2                       		bra.s	Obj1E_MarkAsGone
000094AA                            ; ===========================================================================
000094AA                            ; ---------------------------------------------------------------------------
000094AA                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000094AA                            ; ---------------------------------------------------------------------------
000094AA                            
000094AA                            Obj20:					; XREF: Obj_Index
000094AA 7000                       		moveq	#0,d0
000094AC 1028 0024                  		move.b	$24(a0),d0
000094B0 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000094B4 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000094B8                            ; ===========================================================================
000094B8 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000094BA 0000                       		dc.w Obj20_Bounce-Obj20_Index
000094BC                            ; ===========================================================================
000094BC                            
000094BC                            Obj20_Main:				; XREF: Obj20_Index
000094BC 5428 0024                  		addq.b	#2,$24(a0)
000094C0 117C 0007 0016             		move.b	#7,$16(a0)
000094C6 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000094CE 317C 2302 0002             		move.w	#$2302,2(a0)
000094D4 117C 0004 0001             		move.b	#4,1(a0)
000094DA 117C 0003 0018             		move.b	#3,$18(a0)
000094E0 117C 0087 0020             		move.b	#$87,$20(a0)
000094E6 117C 0008 0019             		move.b	#8,$19(a0)
000094EC 7000                       		moveq	#0,d0
000094EE 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094F2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000094F6 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000094FA 117C 0004 001A             		move.b	#4,$1A(a0)
00009500                            
00009500                            Obj20_Bounce:				; XREF: Obj20_Index
00009500 4EB9 0000 0000             		jsr	ObjectFall
00009506 4A68 0012                  		tst.w	$12(a0)
0000950A 6B00                       		bmi.s	Obj20_ChkExplode
0000950C 4EB9 0000 0000             		jsr	ObjHitFloor
00009512 4A41                       		tst.w	d1
00009514 6A00                       		bpl.s	Obj20_ChkExplode
00009516 D368 000C                  		add.w	d1,$C(a0)
0000951A 317C FD00 0012             		move.w	#-$300,$12(a0)
00009520 4A03                       		tst.b	d3
00009522 6700                       		beq.s	Obj20_ChkExplode
00009524 6B00                       		bmi.s	loc_8CA4
00009526 4A68 0010                  		tst.w	$10(a0)
0000952A 6A00                       		bpl.s	Obj20_ChkExplode
0000952C 4468 0010                  		neg.w	$10(a0)
00009530 6000                       		bra.s	Obj20_ChkExplode
00009532                            ; ===========================================================================
00009532                            
00009532                            loc_8CA4:				; XREF: Obj20_Bounce
00009532 4A68 0010                  		tst.w	$10(a0)
00009536 6B00                       		bmi.s	Obj20_ChkExplode
00009538 4468 0010                  		neg.w	$10(a0)
0000953C                            
0000953C                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000953C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009540 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009542 10BC 0024                  		move.b	#$24,0(a0)
00009546 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000954A 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009550 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009554                            ; ===========================================================================
00009554                            
00009554                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009554 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009558 6A00                       		bpl.s	Obj20_Display
0000955A 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009560 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009566                            
00009566                            Obj20_Display:
00009566 6100 0000                  		bsr.w	DisplaySprite
0000956A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000956E 0640 00E0                  		addi.w	#$E0,d0
00009572 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009576 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000957A 4E75                       		rts	
0000957C                            ; ===========================================================================
0000957C                            ; ---------------------------------------------------------------------------
0000957C                            ; Object 24 - explosion	from a destroyed monitor
0000957C                            ; ---------------------------------------------------------------------------
0000957C                            
0000957C                            Obj24:					; XREF: Obj_Index
0000957C 7000                       		moveq	#0,d0
0000957E 1028 0024                  		move.b	$24(a0),d0
00009582 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009586 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
0000958A                            ; ===========================================================================
0000958A 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
0000958C 0000                       		dc.w Obj24_Animate-Obj24_Index
0000958E                            ; ===========================================================================
0000958E                            
0000958E                            Obj24_Main:				; XREF: Obj24_Index
0000958E 5428 0024                  		addq.b	#2,$24(a0)
00009592 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
0000959A 317C 041C 0002             		move.w	#$41C,2(a0)
000095A0 117C 0004 0001             		move.b	#4,1(a0)
000095A6 117C 0001 0018             		move.b	#1,$18(a0)
000095AC 117C 0000 0020             		move.b	#0,$20(a0)
000095B2 117C 000C 0019             		move.b	#$C,$19(a0)
000095B8 117C 0009 001E             		move.b	#9,$1E(a0)
000095BE 117C 0000 001A             		move.b	#0,$1A(a0)
000095C4 303C 00A5                  		move.w	#$A5,d0
000095C8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play explosion sound
000095CE                            
000095CE                            Obj24_Animate:				; XREF: Obj24_Index
000095CE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000095D2 6A00                       		bpl.s	Obj24_Display
000095D4 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000095DA 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000095DE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000095E4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000095E8                            
000095E8                            Obj24_Display:
000095E8 6000 0000                  		bra.w	DisplaySprite
000095EC                            ; ===========================================================================
000095EC                            ; ---------------------------------------------------------------------------
000095EC                            ; Object 27 - explosion	from a destroyed enemy
000095EC                            ; ---------------------------------------------------------------------------
000095EC                            
000095EC                            Obj27:					; XREF: Obj_Index
000095EC 7000                       		moveq	#0,d0
000095EE 1028 0024                  		move.b	$24(a0),d0
000095F2 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000095F6 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000095FA                            ; ===========================================================================
000095FA 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000095FC 0000                       		dc.w Obj27_Main-Obj27_Index
000095FE 0000                       		dc.w Obj27_Animate-Obj27_Index
00009600                            ; ===========================================================================
00009600                            
00009600                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009600 5428 0024                  		addq.b	#2,$24(a0)
00009604 6100 0000                  		bsr.w	SingleObjLoad
00009608 6600                       		bne.s	Obj27_Main
0000960A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0000960E 3368 0008 0008             		move.w	8(a0),8(a1)
00009614 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000961A 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009620                            
00009620                            Obj27_Main:				; XREF: Obj27_Index
00009620 5428 0024                  		addq.b	#2,$24(a0)
00009624 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000962C 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009632 117C 0004 0001             		move.b	#4,1(a0)
00009638 117C 0001 0018             		move.b	#1,$18(a0)
0000963E 117C 0000 0020             		move.b	#0,$20(a0)
00009644 117C 000C 0019             		move.b	#$C,$19(a0)
0000964A                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000964A 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009650 117C 0000 001A             		move.b	#0,$1A(a0)
00009656 303C 00C1                  		move.w	#$C1,d0
0000965A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009660                            
00009660 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009666 1028 0028                  		move.b	$28(a0),d0
0000966A 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009670 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009676                            
00009676                            Obj27_Animate:				; XREF: Obj27_Index
00009676 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000967A 6A00                       		bpl.s	Obj27_Display
0000967C                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000967C 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009682 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009686 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
0000968C 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009690                            
00009690                            Obj27_Display:
00009690 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009696 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
0000969C 6000 0000                  		bra.w	DisplaySprite
000096A0                            ; ===========================================================================
000096A0                            ; ---------------------------------------------------------------------------
000096A0                            Obj27_ExplosionXYSpd:
000096A0                            		; dc.w	-$350, -$300	; Left
000096A0                            		; dc.w	-$200, -$450	; Near middle (left)
000096A0                            		; dc.w	0, -$500	; Middle
000096A0                            		; dc.w	$200, -$450	; Near middle (right)
000096A0                            		; dc.w	$350, -$300	; Right
000096A0                            
000096A0 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000096A4 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000096A8 0000 FA00                  		dc.w	0, -$600	; Middle
000096AC 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000096B0 0150 FC00                  		dc.w	$150, -$400	; Right
000096B4                            
000096B4 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000096CE                            ; ---------------------------------------------------------------------------
000096CE                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000096CE                            ; ---------------------------------------------------------------------------
000096CE                            
000096CE                            Obj3F:					; XREF: Obj_Index
000096CE 7000                       		moveq	#0,d0
000096D0 1028 0024                  		move.b	$24(a0),d0
000096D4 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000096D8 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000096DC                            ; ===========================================================================
000096DC 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000096DE FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000096E0                            ; ===========================================================================
000096E0                            
000096E0                            Obj3F_Main:				; XREF: Obj3F_Index
000096E0 5428 0024                  		addq.b	#2,$24(a0)
000096E4 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000096EC 317C 05A0 0002             		move.w	#$5A0,2(a0)
000096F2 117C 0004 0001             		move.b	#4,1(a0)
000096F8 117C 0001 0018             		move.b	#1,$18(a0)
000096FE 117C 0000 0020             		move.b	#0,$20(a0)
00009704 117C 000C 0019             		move.b	#$C,$19(a0)
0000970A 117C 0007 001E             		move.b	#7,$1E(a0)
00009710 117C 0000 001A             		move.b	#0,$1A(a0)
00009716 303C 00C4                  		move.w	#$C4,d0
0000971A 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009720                            ; ===========================================================================
00009720                            Ani_obj1E:
00009720                            	include "_anim\obj1E.asm"
00009720                            ; ---------------------------------------------------------------------------
00009720                            ; Animation script - doors (SBZ)
00009720                            ; ---------------------------------------------------------------------------
00009720 0000                       		dc.w byte_8E4A-Ani_obj1E
00009722 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000973A 00                         		even
0000973A 00                         		even
0000973A                            
0000973A                            ; ---------------------------------------------------------------------------
0000973A                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000973A                            ; ---------------------------------------------------------------------------
0000973A                            Map_obj1E:
0000973A                            	include "_maps\obj1E.asm"
0000973A                            Map_a7ad:
0000973A 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
0000973C 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
0000973E 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009740 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009742 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009744 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009746 02                         Map_a7ad_C: 	dc.b $2
00009747 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000974C FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009751 02                         Map_a7ad_17: 	dc.b $2
00009752 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009757 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
0000975C 02                         Map_a7ad_22: 	dc.b $2
0000975D F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009762 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009767 02                         Map_a7ad_2D: 	dc.b $2
00009768 E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
0000976D F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009772 02                         Map_a7ad_38: 	dc.b $2
00009773 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009778 E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
0000977D 02                         Map_a7ad_43: 	dc.b $2
0000977E F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009783 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009788                            	even
00009788                            	even
00009788                            
00009788                            ; ---------------------------------------------------------------------------
00009788                            ; Sprite mappings - explosion
00009788                            ; ---------------------------------------------------------------------------
00009788                            Map_obj24:
00009788                            	include "_maps\obj24.asm"
00009788                            ; ---------------------------------------------------------------------------
00009788                            ; Sprite mappings - explosion
00009788                            ; ---------------------------------------------------------------------------
00009788 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
0000978C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009790 01                         byte_8EAE:	dc.b 1
00009791 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009796 01                         byte_8EB4:	dc.b 1
00009797 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0000979C 01                         byte_8EBA:	dc.b 1
0000979D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000097A2 01                         byte_8EC0:	dc.b 1
000097A3 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000097A8                            		even
000097A8                            		even
000097A8                            
000097A8                            ; ---------------------------------------------------------------------------
000097A8                            ; Sprite mappings - explosion
000097A8                            ; ---------------------------------------------------------------------------
000097A8 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000097AC 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000097B0 0000                       		dc.w byte_8EF7-Map_obj27
000097B2 01                         byte_8ED0:	dc.b 1
000097B3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000097B8 01                         byte_8ED6:	dc.b 1
000097B9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000097BE 01                         byte_8EDC:	dc.b 1
000097BF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000097C4 04                         byte_8EE2:	dc.b 4
000097C5 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000097CA EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000097CF 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000097D4 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000097D9 04                         byte_8EF7:	dc.b 4
000097DA EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000097DF EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000097E4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000097E9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000097EE                            		even
000097EE                            ; ---------------------------------------------------------------------------
000097EE                            ; Sprite mappings - explosion from when	a boss is destroyed
000097EE                            ; ---------------------------------------------------------------------------
000097EE FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000097F0 0000                       		dc.w byte_8F16-Map_obj3F
000097F2 0000                       		dc.w byte_8F1C-Map_obj3F
000097F4 FFD6                       		dc.w byte_8EE2-Map_obj3F
000097F6 FFEB                       		dc.w byte_8EF7-Map_obj3F
000097F8 01                         byte_8F16:	dc.b 1
000097F9 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000097FE 01                         byte_8F1C:	dc.b 1
000097FF F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009804                            		even
00009804                            ; ===========================================================================
00009804                            ; ---------------------------------------------------------------------------
00009804                            ; Object 28 - animals
00009804                            ; ---------------------------------------------------------------------------
00009804                            
00009804                            Obj28:					; XREF: Obj_Index
00009804 7000                       		moveq	#0,d0
00009806 1028 0024                  		move.b	$24(a0),d0
0000980A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000980E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009812                            ; ===========================================================================
00009812 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009816 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000981A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000981E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009822 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009826 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000982A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000982E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009832 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009836 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000983A 0000                       		dc.w loc_92D6-Obj28_Index
0000983C                            
0000983C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
0000984C                            
0000984C FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009850 0000 0000                  		dc.l Map_obj28
00009854 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009858 0000 0000                  		dc.l Map_obj28a		; mappings address
0000985C FE80 FD00                  		dc.w $FE80, $FD00
00009860 0000 0000                  		dc.l Map_obj28
00009864 FEC0 FE80                  		dc.w $FEC0, $FE80
00009868 0000 0000                  		dc.l Map_obj28a
0000986C FE40 FD00                  		dc.w $FE40, $FD00
00009870 0000 0000                  		dc.l Map_obj28b
00009874 FD00 FC00                  		dc.w $FD00, $FC00
00009878 0000 0000                  		dc.l Map_obj28a
0000987C FD80 FC80                  		dc.w $FD80, $FC80
00009880 0000 0000                  		dc.l Map_obj28b
00009884                            
00009884 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009894 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000098A4 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000098B0                            
000098B0 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000098C4 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000098D8 0000 0000                  		dc.l Map_obj28b
000098DC                            
000098DC 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000098EE 0565 05B3                  		dc.w $565, $5B3
000098F2                            ; ===========================================================================
000098F2                            
000098F2                            Obj28_Ending:				; XREF: Obj28_Index
000098F2 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000098F6 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000098FA 7000                       		moveq	#0,d0
000098FC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009900 D040                       		add.w	d0,d0		; multiply d0 by 2
00009902 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009906 0440 0014                  		subi.w	#$14,d0
0000990A 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009910 D040                       		add.w	d0,d0
00009912 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009918 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000991C 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009922 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009928 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000992E 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009934 117C 000C 0016             		move.b	#$C,$16(a0)
0000993A 117C 0004 0001             		move.b	#4,1(a0)
00009940 08E8 0000 0001             		bset	#0,1(a0)
00009946 117C 0006 0018             		move.b	#6,$18(a0)
0000994C 117C 0008 0019             		move.b	#8,$19(a0)
00009952 117C 0007 001E             		move.b	#7,$1E(a0)
00009958 6000 0000                  		bra.w	DisplaySprite
0000995C                            ; ===========================================================================
0000995C                            
0000995C                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000995C 5428 0024                  		addq.b	#2,$24(a0)
00009960 6100 93AC                  		bsr.w	RandomNumber
00009964 0240 0001                  		andi.w	#1,d0
00009968 7200                       		moveq	#0,d1
0000996A 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000996E D241                       		add.w	d1,d1
00009970 D240                       		add.w	d0,d1
00009972 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
00009976 1031 1000                  		move.b	(a1,d1.w),d0
0000997A 1140 0030                  		move.b	d0,$30(a0)
0000997E E748                       		lsl.w	#3,d0
00009980 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009984 D2C0                       		adda.w	d0,a1
00009986 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000998A 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000998E 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009992 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009998 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000999E 6700                       		beq.s	loc_90C0	; if yes, branch
000099A0 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000099A6                            
000099A6                            loc_90C0:
000099A6 117C 000C 0016             		move.b	#$C,$16(a0)
000099AC 117C 0004 0001             		move.b	#4,1(a0)
000099B2 08E8 0000 0001             		bset	#0,1(a0)
000099B8 117C 0006 0018             		move.b	#6,$18(a0)
000099BE 117C 0008 0019             		move.b	#8,$19(a0)
000099C4 117C 0007 001E             		move.b	#7,$1E(a0)
000099CA 117C 0002 001A             		move.b	#2,$1A(a0)
000099D0 317C FC00 0012             		move.w	#-$400,$12(a0)
000099D6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000099DA 6600                       		bne.s	loc_911C
000099DC 6100 0000                  		bsr.w	SingleObjLoad
000099E0 6600                       		bne.s	Obj28_Display
000099E2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000099E6 3368 0008 0008             		move.w	8(a0),8(a1)
000099EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000099F2 3028 003E                  		move.w	$3E(a0),d0
000099F6 E248                       		lsr.w	#1,d0
000099F8 1340 001A                  		move.b	d0,$1A(a1)
000099FC                            
000099FC                            Obj28_Display:
000099FC 6000 0000                  		bra.w	DisplaySprite
00009A00                            ; ===========================================================================
00009A00                            
00009A00                            loc_911C:
00009A00 117C 0012 0024             		move.b	#$12,$24(a0)
00009A06 4268 0010                  		clr.w	$10(a0)
00009A0A 6000 0000                  		bra.w	DisplaySprite
00009A0E                            ; ===========================================================================
00009A0E                            
00009A0E                            loc_912A:				; XREF: Obj28_Index
00009A0E 4A28 0001                  		tst.b	1(a0)
00009A12 6A00 0000                  		bpl.w	DeleteObject
00009A16 6100 0000                  		bsr.w	ObjectFall
00009A1A 4A68 0012                  		tst.w	$12(a0)
00009A1E 6B00                       		bmi.s	loc_9180
00009A20 4EB9 0000 0000             		jsr	ObjHitFloor
00009A26 4A41                       		tst.w	d1
00009A28 6A00                       		bpl.s	loc_9180
00009A2A D368 000C                  		add.w	d1,$C(a0)
00009A2E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009A34 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A3A 117C 0001 001A             		move.b	#1,$1A(a0)
00009A40 1028 0030                  		move.b	$30(a0),d0
00009A44 D000                       		add.b	d0,d0
00009A46 5800                       		addq.b	#4,d0
00009A48 1140 0024                  		move.b	d0,$24(a0)
00009A4C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009A50 6700                       		beq.s	loc_9180
00009A52 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009A58 6700                       		beq.s	loc_9180
00009A5A 4468 0010                  		neg.w	$10(a0)
00009A5E 0868 0000 0001             		bchg	#0,1(a0)
00009A64                            
00009A64                            loc_9180:
00009A64 6000 0000                  		bra.w	DisplaySprite
00009A68                            ; ===========================================================================
00009A68                            
00009A68                            loc_9184:				; XREF: Obj28_Index
00009A68 6100 0000                  		bsr.w	ObjectFall
00009A6C 117C 0001 001A             		move.b	#1,$1A(a0)
00009A72 4A68 0012                  		tst.w	$12(a0)
00009A76 6B00                       		bmi.s	loc_91AE
00009A78 117C 0000 001A             		move.b	#0,$1A(a0)
00009A7E 4EB9 0000 0000             		jsr	ObjHitFloor
00009A84 4A41                       		tst.w	d1
00009A86 6A00                       		bpl.s	loc_91AE
00009A88 D368 000C                  		add.w	d1,$C(a0)
00009A8C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A92                            
00009A92                            loc_91AE:
00009A92 4A28 0028                  		tst.b	$28(a0)
00009A96 6600                       		bne.s	loc_9224
00009A98 4A28 0001                  		tst.b	1(a0)
00009A9C 6A00 0000                  		bpl.w	DeleteObject
00009AA0 6000 0000                  		bra.w	DisplaySprite
00009AA4                            ; ===========================================================================
00009AA4                            
00009AA4                            loc_91C0:				; XREF: Obj28_Index
00009AA4 6100 0000                  		bsr.w	SpeedToPos
00009AA8 0668 0018 0012             		addi.w	#$18,$12(a0)
00009AAE 4A68 0012                  		tst.w	$12(a0)
00009AB2 6B00                       		bmi.s	loc_91FC
00009AB4 4EB9 0000 0000             		jsr	ObjHitFloor
00009ABA 4A41                       		tst.w	d1
00009ABC 6A00                       		bpl.s	loc_91FC
00009ABE D368 000C                  		add.w	d1,$C(a0)
00009AC2 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AC8 4A28 0028                  		tst.b	$28(a0)
00009ACC 6700                       		beq.s	loc_91FC
00009ACE 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009AD4 6700                       		beq.s	loc_91FC
00009AD6 4468 0010                  		neg.w	$10(a0)
00009ADA 0868 0000 0001             		bchg	#0,1(a0)
00009AE0                            
00009AE0                            loc_91FC:
00009AE0 5328 001E                  		subq.b	#1,$1E(a0)
00009AE4 6A00                       		bpl.s	loc_9212
00009AE6 117C 0001 001E             		move.b	#1,$1E(a0)
00009AEC 5228 001A                  		addq.b	#1,$1A(a0)
00009AF0 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AF6                            
00009AF6                            loc_9212:
00009AF6 4A28 0028                  		tst.b	$28(a0)
00009AFA 6600                       		bne.s	loc_9224
00009AFC 4A28 0001                  		tst.b	1(a0)
00009B00 6A00 0000                  		bpl.w	DeleteObject
00009B04 6000 0000                  		bra.w	DisplaySprite
00009B08                            ; ===========================================================================
00009B08                            
00009B08                            loc_9224:				; XREF: Obj28_Index
00009B08 3028 0008                  		move.w	8(a0),d0
00009B0C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B10 6500                       		bcs.s	loc_923C
00009B12 0440 0180                  		subi.w	#$180,d0
00009B16 6A00                       		bpl.s	loc_923C
00009B18 4A28 0001                  		tst.b	1(a0)
00009B1C 6A00 0000                  		bpl.w	DeleteObject
00009B20                            
00009B20                            loc_923C:
00009B20 6000 0000                  		bra.w	DisplaySprite
00009B24                            ; ===========================================================================
00009B24                            
00009B24                            loc_9240:				; XREF: Obj28_Index
00009B24 4A28 0001                  		tst.b	1(a0)
00009B28 6A00 0000                  		bpl.w	DeleteObject
00009B2C 5368 0036                  		subq.w	#1,$36(a0)
00009B30 6600 0000                  		bne.w	loc_925C
00009B34 117C 0002 0024             		move.b	#2,$24(a0)
00009B3A 117C 0003 0018             		move.b	#3,$18(a0)
00009B40                            
00009B40                            loc_925C:
00009B40 6000 0000                  		bra.w	DisplaySprite
00009B44                            ; ===========================================================================
00009B44                            
00009B44                            loc_9260:				; XREF: Obj28_Index
00009B44 6100 0000                  		bsr.w	sub_9404
00009B48 6400                       		bcc.s	loc_927C
00009B4A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009B50 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B56 117C 000E 0024             		move.b	#$E,$24(a0)
00009B5C 6000 FF46                  		bra.w	loc_91C0
00009B60                            ; ===========================================================================
00009B60                            
00009B60                            loc_927C:
00009B60 6000 FFA6                  		bra.w	loc_9224
00009B64                            ; ===========================================================================
00009B64                            
00009B64                            loc_9280:				; XREF: Obj28_Index
00009B64 6100 0000                  		bsr.w	sub_9404
00009B68 6A00                       		bpl.s	loc_92B6
00009B6A 4268 0010                  		clr.w	$10(a0)
00009B6E 4268 0032                  		clr.w	$32(a0)
00009B72 6100 0000                  		bsr.w	SpeedToPos
00009B76 0668 0018 0012             		addi.w	#$18,$12(a0)
00009B7C 6100 0000                  		bsr.w	loc_93C4
00009B80 6100 0000                  		bsr.w	loc_93EC
00009B84 5328 001E                  		subq.b	#1,$1E(a0)
00009B88 6A00                       		bpl.s	loc_92B6
00009B8A 117C 0001 001E             		move.b	#1,$1E(a0)
00009B90 5228 001A                  		addq.b	#1,$1A(a0)
00009B94 0228 0001 001A             		andi.b	#1,$1A(a0)
00009B9A                            
00009B9A                            loc_92B6:
00009B9A 6000 FF6C                  		bra.w	loc_9224
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            loc_92BA:				; XREF: Obj28_Index
00009B9E 6100 0000                  		bsr.w	sub_9404
00009BA2 6A00                       		bpl.s	loc_9310
00009BA4 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009BAA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BB0 117C 0004 0024             		move.b	#4,$24(a0)
00009BB6 6000 FEB0                  		bra.w	loc_9184
00009BBA                            ; ===========================================================================
00009BBA                            
00009BBA                            loc_92D6:				; XREF: Obj28_Index
00009BBA 6100 0000                  		bsr.w	ObjectFall
00009BBE 117C 0001 001A             		move.b	#1,$1A(a0)
00009BC4 4A68 0012                  		tst.w	$12(a0)
00009BC8 6B00                       		bmi.s	loc_9310
00009BCA 117C 0000 001A             		move.b	#0,$1A(a0)
00009BD0 4EB9 0000 0000             		jsr	ObjHitFloor
00009BD6 4A41                       		tst.w	d1
00009BD8 6A00                       		bpl.s	loc_9310
00009BDA 4628 0029                  		not.b	$29(a0)
00009BDE 6600                       		bne.s	loc_9306
00009BE0 4468 0010                  		neg.w	$10(a0)
00009BE4 0868 0000 0001             		bchg	#0,1(a0)
00009BEA                            
00009BEA                            loc_9306:
00009BEA D368 000C                  		add.w	d1,$C(a0)
00009BEE 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009BF4                            
00009BF4                            loc_9310:
00009BF4 6000 FF12                  		bra.w	loc_9224
00009BF8                            ; ===========================================================================
00009BF8                            
00009BF8                            loc_9314:				; XREF: Obj28_Index
00009BF8 6100 0000                  		bsr.w	sub_9404
00009BFC 6A00                       		bpl.s	loc_932E
00009BFE 4268 0010                  		clr.w	$10(a0)
00009C02 4268 0032                  		clr.w	$32(a0)
00009C06 6100 0000                  		bsr.w	ObjectFall
00009C0A 6100 0000                  		bsr.w	loc_93C4
00009C0E 6100 0000                  		bsr.w	loc_93EC
00009C12                            
00009C12                            loc_932E:
00009C12 6000 FEF4                  		bra.w	loc_9224
00009C16                            ; ===========================================================================
00009C16                            
00009C16                            loc_9332:				; XREF: Obj28_Index
00009C16 6100 0000                  		bsr.w	sub_9404
00009C1A 6A00                       		bpl.s	loc_936C
00009C1C 6100 0000                  		bsr.w	ObjectFall
00009C20 117C 0001 001A             		move.b	#1,$1A(a0)
00009C26 4A68 0012                  		tst.w	$12(a0)
00009C2A 6B00                       		bmi.s	loc_936C
00009C2C 117C 0000 001A             		move.b	#0,$1A(a0)
00009C32 4EB9 0000 0000             		jsr	ObjHitFloor
00009C38 4A41                       		tst.w	d1
00009C3A 6A00                       		bpl.s	loc_936C
00009C3C 4468 0010                  		neg.w	$10(a0)
00009C40 0868 0000 0001             		bchg	#0,1(a0)
00009C46 D368 000C                  		add.w	d1,$C(a0)
00009C4A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C50                            
00009C50                            loc_936C:
00009C50 6000 FEB6                  		bra.w	loc_9224
00009C54                            ; ===========================================================================
00009C54                            
00009C54                            loc_9370:				; XREF: Obj28_Index
00009C54 6100 0000                  		bsr.w	sub_9404
00009C58 6A00                       		bpl.s	loc_93C0
00009C5A 6100 0000                  		bsr.w	SpeedToPos
00009C5E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009C64 4A68 0012                  		tst.w	$12(a0)
00009C68 6B00                       		bmi.s	loc_93AA
00009C6A 4EB9 0000 0000             		jsr	ObjHitFloor
00009C70 4A41                       		tst.w	d1
00009C72 6A00                       		bpl.s	loc_93AA
00009C74 4628 0029                  		not.b	$29(a0)
00009C78 6600                       		bne.s	loc_93A0
00009C7A 4468 0010                  		neg.w	$10(a0)
00009C7E 0868 0000 0001             		bchg	#0,1(a0)
00009C84                            
00009C84                            loc_93A0:
00009C84 D368 000C                  		add.w	d1,$C(a0)
00009C88 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009C8E                            
00009C8E                            loc_93AA:
00009C8E 5328 001E                  		subq.b	#1,$1E(a0)
00009C92 6A00                       		bpl.s	loc_93C0
00009C94 117C 0001 001E             		move.b	#1,$1E(a0)
00009C9A 5228 001A                  		addq.b	#1,$1A(a0)
00009C9E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009CA4                            
00009CA4                            loc_93C0:
00009CA4 6000 FE62                  		bra.w	loc_9224
00009CA8                            ; ===========================================================================
00009CA8                            
00009CA8                            loc_93C4:
00009CA8 117C 0001 001A             		move.b	#1,$1A(a0)
00009CAE 4A68 0012                  		tst.w	$12(a0)
00009CB2 6B00                       		bmi.s	locret_93EA
00009CB4 117C 0000 001A             		move.b	#0,$1A(a0)
00009CBA 4EB9 0000 0000             		jsr	ObjHitFloor
00009CC0 4A41                       		tst.w	d1
00009CC2 6A00                       		bpl.s	locret_93EA
00009CC4 D368 000C                  		add.w	d1,$C(a0)
00009CC8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009CCE                            
00009CCE                            locret_93EA:
00009CCE 4E75                       		rts	
00009CD0                            ; ===========================================================================
00009CD0                            
00009CD0                            loc_93EC:
00009CD0 08E8 0000 0001             		bset	#0,1(a0)
00009CD6 3028 0008                  		move.w	8(a0),d0
00009CDA 9078 D008                  		sub.w	($FFFFD008).w,d0
00009CDE 6400                       		bcc.s	locret_9402
00009CE0 08A8 0000 0001             		bclr	#0,1(a0)
00009CE6                            
00009CE6                            locret_9402:
00009CE6 4E75                       		rts	
00009CE8                            
00009CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009CE8                            
00009CE8                            
00009CE8                            sub_9404:
00009CE8 3038 D008                  		move.w	($FFFFD008).w,d0
00009CEC 9068 0008                  		sub.w	8(a0),d0
00009CF0 0440 00B8                  		subi.w	#$B8,d0
00009CF4 4E75                       		rts	
00009CF6                            ; End of function sub_9404
00009CF6                            
00009CF6                            ; ===========================================================================
00009CF6                            ; ---------------------------------------------------------------------------
00009CF6                            ; Object 29 - points that appear when you destroy something
00009CF6                            ; ---------------------------------------------------------------------------
00009CF6                            
00009CF6                            Obj29:					; XREF: Obj_Index
00009CF6 7000                       		moveq	#0,d0
00009CF8 1028 0024                  		move.b	$24(a0),d0
00009CFC 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009D00 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009D04 6000 0000                  		bra.w	DisplaySprite
00009D08                            ; ===========================================================================
00009D08 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009D0A 0000                       		dc.w Obj29_Slower-Obj29_Index
00009D0C                            ; ===========================================================================
00009D0C                            
00009D0C                            Obj29_Main:				; XREF: Obj29_Index
00009D0C 5428 0024                  		addq.b	#2,$24(a0)
00009D10 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009D18 317C 2797 0002             		move.w	#$2797,2(a0)
00009D1E 117C 0004 0001             		move.b	#4,1(a0)
00009D24 117C 0001 0018             		move.b	#1,$18(a0)
00009D2A 117C 0008 0019             		move.b	#8,$19(a0)
00009D30 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009D36                            
00009D36                            Obj29_Slower:				; XREF: Obj29_Index
00009D36 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009D3A 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009D3E 6100 0000                  		bsr.w	SpeedToPos
00009D42 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009D48 4E75                       		rts	
00009D4A                            ; ===========================================================================
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A                            ; Sprite mappings - animals
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A                            Map_obj28:
00009D4A                            	include "_maps\obj28.asm"
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A                            ; Sprite mappings - animals
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A 0000                       		dc.w byte_9472-Map_obj28
00009D4C 0000                       		dc.w byte_9478-Map_obj28
00009D4E 0000                       		dc.w byte_946C-Map_obj28
00009D50 01                         byte_946C:	dc.b 1
00009D51 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D56 01                         byte_9472:	dc.b 1
00009D57 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009D5C 01                         byte_9478:	dc.b 1
00009D5D F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009D62                            		even
00009D62                            		even
00009D62                            
00009D62                            Map_obj28a:
00009D62                            	include "_maps\obj28a.asm"
00009D62                            ; ---------------------------------------------------------------------------
00009D62                            ; Sprite mappings - animals
00009D62                            ; ---------------------------------------------------------------------------
00009D62 0000                       		dc.w byte_948A-Map_obj28a
00009D64 0000                       		dc.w byte_9490-Map_obj28a
00009D66 0000                       		dc.w byte_9484-Map_obj28a
00009D68 01                         byte_9484:	dc.b 1
00009D69 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D6E 01                         byte_948A:	dc.b 1
00009D6F FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009D74 01                         byte_9490:	dc.b 1
00009D75 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009D7A                            		even
00009D7A                            		even
00009D7A                            
00009D7A                            Map_obj28b:
00009D7A                            	include "_maps\obj28b.asm"
00009D7A                            ; ---------------------------------------------------------------------------
00009D7A                            ; Sprite mappings - animals
00009D7A                            ; ---------------------------------------------------------------------------
00009D7A 0000                       		dc.w byte_94A2-Map_obj28b
00009D7C 0000                       		dc.w byte_94A8-Map_obj28b
00009D7E 0000                       		dc.w byte_949C-Map_obj28b
00009D80 01                         byte_949C:	dc.b 1
00009D81 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009D86 01                         byte_94A2:	dc.b 1
00009D87 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009D8C 01                         byte_94A8:	dc.b 1
00009D8D FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009D92                            		even
00009D92                            		even
00009D92                            
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            ; Sprite mappings - points that	appear when you	destroy	something
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            Map_obj29:
00009D92                            	include "_maps\obj29.asm"
00009D92                            ; ---------------------------------------------------------------------------
00009D92                            ; Sprite mappings - points that	appear when you	destroy	something
00009D92                            ; ---------------------------------------------------------------------------
00009D92 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009D96 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009D9A 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009D9E 0000                       		dc.w byte_94E5-Map_obj29
00009DA0 01                         byte_94BC:	dc.b 1
00009DA1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009DA6 01                         byte_94C2:	dc.b 1
00009DA7 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009DAC 01                         byte_94C8:	dc.b 1
00009DAD FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009DB2 01                         byte_94CE:	dc.b 1
00009DB3 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009DB8 01                         byte_94D4:	dc.b 1
00009DB9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009DBE 02                         byte_94DA:	dc.b 2
00009DBF FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009DC4 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009DC9 02                         byte_94E5:	dc.b 2
00009DCA FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009DCF FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009DD4                            		even
00009DD4                            		even
00009DD4                            
00009DD4                            ; ===========================================================================
00009DD4                            ; ---------------------------------------------------------------------------
00009DD4                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009DD4                            ; ---------------------------------------------------------------------------
00009DD4                            
00009DD4                            Obj1F:					; XREF: Obj_Index
00009DD4 7000                       		moveq	#0,d0
00009DD6 1028 0024                  		move.b	$24(a0),d0
00009DDA 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009DDE 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009DE2                            ; ===========================================================================
00009DE2 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009DE4 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009DE6 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009DE8 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009DEA 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009DEC                            ; ===========================================================================
00009DEC                            
00009DEC                            Obj1F_Main:				; XREF: Obj1F_Index
00009DEC 117C 0010 0016             		move.b	#$10,$16(a0)
00009DF2 117C 0008 0017             		move.b	#8,$17(a0)
00009DF8 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009E00 317C 0400 0002             		move.w	#$400,2(a0)
00009E06 117C 0004 0001             		move.b	#4,1(a0)
00009E0C 117C 0003 0018             		move.b	#3,$18(a0)
00009E12 117C 0006 0020             		move.b	#6,$20(a0)
00009E18 117C 0015 0019             		move.b	#$15,$19(a0)
00009E1E 6100 0000                  		bsr.w	ObjectFall
00009E22 4EB9 0000 0000             		jsr	ObjHitFloor
00009E28 4A41                       		tst.w	d1
00009E2A 6A00                       		bpl.s	locret_955A
00009E2C D368 000C                  		add.w	d1,$C(a0)
00009E30 1143 0026                  		move.b	d3,$26(a0)
00009E34 317C 0000 0012             		move.w	#0,$12(a0)
00009E3A 5428 0024                  		addq.b	#2,$24(a0)
00009E3E                            
00009E3E                            locret_955A:
00009E3E 4E75                       		rts	
00009E40                            ; ===========================================================================
00009E40                            
00009E40                            Obj1F_Action:				; XREF: Obj1F_Index
00009E40 7000                       		moveq	#0,d0
00009E42 1028 0025                  		move.b	$25(a0),d0
00009E46 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009E4A 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009E4E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E54 6100 0000                  		bsr.w	AnimateSprite
00009E58 6000 0000                  		bra.w	MarkObjGone
00009E5C                            ; ===========================================================================
00009E5C 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009E5E 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009E60                            ; ===========================================================================
00009E60                            
00009E60                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009E60 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009E64 6A00                       		bpl.s	locret_95B6
00009E66 4A28 0001                  		tst.b	1(a0)
00009E6A 6A00                       		bpl.s	Obj1F_Move
00009E6C 0868 0001 0032             		bchg	#1,$32(a0)
00009E72 6600                       		bne.s	Obj1F_MakeFire
00009E74                            
00009E74                            Obj1F_Move:
00009E74 5428 0025                  		addq.b	#2,$25(a0)
00009E78 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009E7E 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009E84 6100 0000                  		bsr.w	Obj1F_SetAni
00009E88 5600                       		addq.b	#3,d0
00009E8A 1140 001C                  		move.b	d0,$1C(a0)
00009E8E 0868 0000 0022             		bchg	#0,$22(a0)
00009E94 6600                       		bne.s	locret_95B6
00009E96 4468 0010                  		neg.w	$10(a0)		; change direction
00009E9A                            
00009E9A                            locret_95B6:
00009E9A 4E75                       		rts	
00009E9C                            ; ===========================================================================
00009E9C                            
00009E9C                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009E9C 317C 003B 0030             		move.w	#$3B,$30(a0)
00009EA2 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009EA8 6100 0000                  		bsr.w	SingleObjLoad
00009EAC 6600                       		bne.s	Obj1F_MakeFire2
00009EAE 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009EB2 137C 0006 0024             		move.b	#6,$24(a1)
00009EB8 3368 0008 0008             		move.w	8(a0),8(a1)
00009EBE 0469 0010 0008             		subi.w	#$10,8(a1)
00009EC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009ECA 337C FF00 0010             		move.w	#-$100,$10(a1)
00009ED0                            
00009ED0                            Obj1F_MakeFire2:
00009ED0 6100 0000                  		bsr.w	SingleObjLoad
00009ED4 6600                       		bne.s	locret_9618
00009ED6 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009EDA 137C 0006 0024             		move.b	#6,$24(a1)
00009EE0 3368 0008 0008             		move.w	8(a0),8(a1)
00009EE6 0669 0010 0008             		addi.w	#$10,8(a1)
00009EEC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009EF2 337C 0100 0010             		move.w	#$100,$10(a1)
00009EF8                            
00009EF8                            locret_9618:
00009EF8 4E75                       		rts	
00009EFA                            ; ===========================================================================
00009EFA                            
00009EFA                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009EFA 5368 0030                  		subq.w	#1,$30(a0)
00009EFE 6B00                       		bmi.s	loc_966E
00009F00 6100 0000                  		bsr.w	SpeedToPos
00009F04 0868 0000 0032             		bchg	#0,$32(a0)
00009F0A 6600                       		bne.s	loc_9654
00009F0C 3628 0008                  		move.w	8(a0),d3
00009F10 0643 0010                  		addi.w	#$10,d3
00009F14 0828 0000 0022             		btst	#0,$22(a0)
00009F1A 6700                       		beq.s	loc_9640
00009F1C 0443 0020                  		subi.w	#$20,d3
00009F20                            
00009F20                            loc_9640:
00009F20 4EB9 0000 0000             		jsr	ObjHitFloor2
00009F26 0C41 FFF8                  		cmpi.w	#-8,d1
00009F2A 6D00                       		blt.s	loc_966E
00009F2C 0C41 000C                  		cmpi.w	#$C,d1
00009F30 6C00                       		bge.s	loc_966E
00009F32 4E75                       		rts	
00009F34                            ; ===========================================================================
00009F34                            
00009F34                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009F34 4EB9 0000 0000             		jsr	ObjHitFloor
00009F3A D368 000C                  		add.w	d1,$C(a0)
00009F3E 1143 0026                  		move.b	d3,$26(a0)
00009F42 6100 0000                  		bsr.w	Obj1F_SetAni
00009F46 5600                       		addq.b	#3,d0
00009F48 1140 001C                  		move.b	d0,$1C(a0)
00009F4C 4E75                       		rts	
00009F4E                            ; ===========================================================================
00009F4E                            
00009F4E                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009F4E 5528 0025                  		subq.b	#2,$25(a0)
00009F52 317C 003B 0030             		move.w	#59,$30(a0)
00009F58 317C 0000 0010             		move.w	#0,$10(a0)
00009F5E 6100 0000                  		bsr.w	Obj1F_SetAni
00009F62 1140 001C                  		move.b	d0,$1C(a0)
00009F66 4E75                       		rts	
00009F68                            ; ---------------------------------------------------------------------------
00009F68                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009F68                            ; ---------------------------------------------------------------------------
00009F68                            
00009F68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009F68                            
00009F68                            
00009F68                            Obj1F_SetAni:				; XREF: loc_966E
00009F68 7000                       		moveq	#0,d0
00009F6A 1628 0026                  		move.b	$26(a0),d3
00009F6E 6B00                       		bmi.s	loc_96A4
00009F70 0C03 0006                  		cmpi.b	#6,d3
00009F74 6500                       		bcs.s	locret_96A2
00009F76 7001                       		moveq	#1,d0
00009F78 0828 0000 0022             		btst	#0,$22(a0)
00009F7E 6600                       		bne.s	locret_96A2
00009F80 7002                       		moveq	#2,d0
00009F82                            
00009F82                            locret_96A2:
00009F82 4E75                       		rts	
00009F84                            ; ===========================================================================
00009F84                            
00009F84                            loc_96A4:				; XREF: Obj1F_SetAni
00009F84 0C03 00FA                  		cmpi.b	#-6,d3
00009F88 6200                       		bhi.s	locret_96B6
00009F8A 7002                       		moveq	#2,d0
00009F8C 0828 0000 0022             		btst	#0,$22(a0)
00009F92 6600                       		bne.s	locret_96B6
00009F94 7001                       		moveq	#1,d0
00009F96                            
00009F96                            locret_96B6:
00009F96 4E75                       		rts	
00009F98                            ; End of function Obj1F_SetAni
00009F98                            
00009F98                            ; ===========================================================================
00009F98                            
00009F98                            Obj1F_Delete:				; XREF: Obj1F_Index
00009F98 6100 0000                  		bsr.w	DeleteObject
00009F9C 4E75                       		rts	
00009F9E                            ; ===========================================================================
00009F9E                            ; ---------------------------------------------------------------------------
00009F9E                            ; Sub-object - missile that the	Crabmeat throws
00009F9E                            ; ---------------------------------------------------------------------------
00009F9E                            
00009F9E                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009F9E 5428 0024                  		addq.b	#2,$24(a0)
00009FA2 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009FAA 317C 0400 0002             		move.w	#$400,2(a0)
00009FB0 117C 0004 0001             		move.b	#4,1(a0)
00009FB6 117C 0003 0018             		move.b	#3,$18(a0)
00009FBC 117C 0087 0020             		move.b	#$87,$20(a0)
00009FC2 117C 0008 0019             		move.b	#8,$19(a0)
00009FC8 317C FC00 0012             		move.w	#-$400,$12(a0)
00009FCE 117C 0007 001C             		move.b	#7,$1C(a0)
00009FD4                            
00009FD4                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009FD4 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009FDA 6100 0000                  		bsr.w	AnimateSprite
00009FDE 6100 0000                  		bsr.w	ObjectFall
00009FE2 6100 0000                  		bsr.w	DisplaySprite
00009FE6 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009FEA 0640 00E0                  		addi.w	#$E0,d0
00009FEE B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009FF2 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009FF4 4E75                       		rts	
00009FF6                            ; ===========================================================================
00009FF6                            
00009FF6                            Obj1F_Delete2:
00009FF6 6000 0000                  		bra.w	DeleteObject
00009FFA                            ; ===========================================================================
00009FFA                            Ani_obj1F:
00009FFA                            	include "_anim\obj1F.asm"
00009FFA                            ; ---------------------------------------------------------------------------
00009FFA                            ; Animation script - Crabmeat enemy
00009FFA                            ; ---------------------------------------------------------------------------
00009FFA 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A000 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A006 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A00A 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A00E 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A012 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A016 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A01C 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A022 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A028 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A02C 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A030                            		even
0000A030                            		even
0000A030                            
0000A030                            ; ---------------------------------------------------------------------------
0000A030                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A030                            ; ---------------------------------------------------------------------------
0000A030                            Map_obj1F:
0000A030                            	include "_maps\obj1F.asm"
0000A030                            Map_1514:
0000A030 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A032 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A034 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A036 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A038 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A03A 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A03C 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A03E 03                         Map_1514_E: 	dc.b $3
0000A03F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A044 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A049 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A04E 03                         Map_1514_1E: 	dc.b $3
0000A04F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A054 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A059 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A05E 03                         Map_1514_2E: 	dc.b $3
0000A05F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A064 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A069 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A06E 03                         Map_1514_3E: 	dc.b $3
0000A06F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A074 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A079 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A07E 03                         Map_1514_4E: 	dc.b $3
0000A07F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A084 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A089 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A08E 01                         Map_1514_5E: 	dc.b $1
0000A08F F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A094 01                         Map_1514_64: 	dc.b $1
0000A095 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A09A                            	even
0000A09A                            	even
0000A09A                            
0000A09A                            ; ===========================================================================
0000A09A                            ; ---------------------------------------------------------------------------
0000A09A                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A09A                            ; ---------------------------------------------------------------------------
0000A09A                            
0000A09A                            Obj22:					; XREF: Obj_Index
0000A09A 7000                       		moveq	#0,d0
0000A09C 1028 0024                  		move.b	$24(a0),d0
0000A0A0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A0A4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A0A8                            ; ===========================================================================
0000A0A8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A0AA 0000                       		dc.w Obj22_Action-Obj22_Index
0000A0AC 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A0AE                            ; ===========================================================================
0000A0AE                            
0000A0AE                            Obj22_Main:				; XREF: Obj22_Index
0000A0AE 5428 0024                  		addq.b	#2,$24(a0)
0000A0B2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A0BA 317C 0444 0002             		move.w	#$444,2(a0)
0000A0C0 117C 0004 0001             		move.b	#4,1(a0)
0000A0C6 117C 0003 0018             		move.b	#3,$18(a0)
0000A0CC 117C 0008 0020             		move.b	#8,$20(a0)
0000A0D2 117C 0018 0019             		move.b	#$18,$19(a0)
0000A0D8                            
0000A0D8                            Obj22_Action:				; XREF: Obj22_Index
0000A0D8 7000                       		moveq	#0,d0
0000A0DA 1028 0025                  		move.b	$25(a0),d0
0000A0DE 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A0E2 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A0E6 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A0EC 6100 0000                  		bsr.w	AnimateSprite
0000A0F0 6000 0000                  		bra.w	MarkObjGone
0000A0F4                            ; ===========================================================================
0000A0F4 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A0F6 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A0F8                            ; ===========================================================================
0000A0F8                            
0000A0F8                            Obj22_Move:				; XREF: Obj22_Index2
0000A0F8 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A0FC 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A0FE 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A104 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A106 5428 0025                  		addq.b	#2,$25(a0)
0000A10A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A110 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A116 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A11C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A122 6600                       		bne.s	locret_986C	; if not, branch
0000A124 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A128                            
0000A128                            locret_986C:
0000A128 4E75                       		rts	
0000A12A                            ; ===========================================================================
0000A12A                            
0000A12A                            Obj22_Fire:				; XREF: Obj22_Move
0000A12A 6100 0000                  		bsr.w	SingleObjLoad
0000A12E 6600                       		bne.s	locret_98D0
0000A130 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A134 3368 0008 0008             		move.w	8(a0),8(a1)
0000A13A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A140 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A146 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A14C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A152 303C 0018                  		move.w	#$18,d0
0000A156 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A15C 6600                       		bne.s	loc_98AA	; if not, branch
0000A15E 4440                       		neg.w	d0
0000A160 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A164                            
0000A164                            loc_98AA:
0000A164 D169 0008                  		add.w	d0,8(a1)
0000A168 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A16E 337C 000E 0032             		move.w	#$E,$32(a1)
0000A174 2348 003C                  		move.l	a0,$3C(a1)
0000A178 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A17E 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A184 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A18A                            
0000A18A                            locret_98D0:
0000A18A 4E75                       		rts	
0000A18C                            ; ===========================================================================
0000A18C                            
0000A18C                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A18C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A190 6B00                       		bmi.s	Obj22_ChgDir
0000A192 6100 0000                  		bsr.w	SpeedToPos
0000A196 4A28 0034                  		tst.b	$34(a0)
0000A19A 6600                       		bne.s	locret_992A
0000A19C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A1A0 9068 0008                  		sub.w	8(a0),d0
0000A1A4 6A00                       		bpl.s	Obj22_SetNrSonic
0000A1A6 4440                       		neg.w	d0
0000A1A8                            
0000A1A8                            Obj22_SetNrSonic:
0000A1A8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A1AC 6400                       		bcc.s	locret_992A	; if not, branch
0000A1AE 4A28 0001                  		tst.b	1(a0)
0000A1B2 6A00                       		bpl.s	locret_992A
0000A1B4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A1BA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A1C0 6000                       		bra.s	Obj22_Stop
0000A1C2                            ; ===========================================================================
0000A1C2                            
0000A1C2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A1C2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A1C8 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A1CE 317C 003B 0032             		move.w	#59,$32(a0)
0000A1D4                            
0000A1D4                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A1D4 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A1D8 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A1DE 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A1E4                            
0000A1E4                            locret_992A:
0000A1E4 4E75                       		rts	
0000A1E6                            ; ===========================================================================
0000A1E6                            
0000A1E6                            Obj22_Delete:				; XREF: Obj22_Index
0000A1E6 6100 0000                  		bsr.w	DeleteObject
0000A1EA 4E75                       		rts	
0000A1EC                            ; ===========================================================================
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            ; Object 23 - missile that Buzz	Bomber throws
0000A1EC                            ; ---------------------------------------------------------------------------
0000A1EC                            
0000A1EC                            Obj23:					; XREF: Obj_Index
0000A1EC 7000                       		moveq	#0,d0
0000A1EE 1028 0024                  		move.b	$24(a0),d0
0000A1F2 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A1F6 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A1FA                            ; ===========================================================================
0000A1FA 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A1FC 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A1FE 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A200 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A202 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A204                            ; ===========================================================================
0000A204                            
0000A204                            Obj23_Main:				; XREF: Obj23_Index
0000A204 5368 0032                  		subq.w	#1,$32(a0)
0000A208 6A00                       		bpl.s	Obj23_ChkCancel
0000A20A 5428 0024                  		addq.b	#2,$24(a0)
0000A20E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A216 317C 2444 0002             		move.w	#$2444,2(a0)
0000A21C 117C 0004 0001             		move.b	#4,1(a0)
0000A222 117C 0003 0018             		move.b	#3,$18(a0)
0000A228 117C 0008 0019             		move.b	#8,$19(a0)
0000A22E 0228 0003 0022             		andi.b	#3,$22(a0)
0000A234 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A238 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A23A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A240 117C 0087 0020             		move.b	#$87,$20(a0)
0000A246 117C 0001 001C             		move.b	#1,$1C(a0)
0000A24C 6000                       		bra.s	Obj23_Animate2
0000A24E                            ; ===========================================================================
0000A24E                            
0000A24E                            Obj23_Animate:				; XREF: Obj23_Index
0000A24E 6100                       		bsr.s	Obj23_ChkCancel
0000A250 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A256 6100 0000                  		bsr.w	AnimateSprite
0000A25A 6000 0000                  		bra.w	DisplaySprite
0000A25E                            ; ---------------------------------------------------------------------------
0000A25E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A25E                            ; destroyed, and if it has, then cancel	the missile
0000A25E                            ; ---------------------------------------------------------------------------
0000A25E                            
0000A25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A25E                            
0000A25E                            
0000A25E                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A25E 2268 003C                  		movea.l	$3C(a0),a1
0000A262 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A266 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A268 4E75                       		rts	
0000A26A                            ; End of function Obj23_ChkCancel
0000A26A                            
0000A26A                            ; ===========================================================================
0000A26A                            
0000A26A                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A26A 0828 0007 0022             		btst	#7,$22(a0)
0000A270 6600                       		bne.s	Obj23_Explode
0000A272 117C 0087 0020             		move.b	#$87,$20(a0)
0000A278 117C 0001 001C             		move.b	#1,$1C(a0)
0000A27E 6100 0000                  		bsr.w	SpeedToPos
0000A282 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A288 6100 0000                  		bsr.w	AnimateSprite
0000A28C 6100 0000                  		bsr.w	DisplaySprite
0000A290 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A294 0640 00E0                  		addi.w	#$E0,d0
0000A298 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A29C 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A29E 4E75                       		rts	
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A2A0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A2A4 117C 0000 0024             		move.b	#0,$24(a0)
0000A2AA 6000 F2D0                  		bra.w	Obj24
0000A2AE                            ; ===========================================================================
0000A2AE                            
0000A2AE                            Obj23_Delete:				; XREF: Obj23_Index
0000A2AE 6100 0000                  		bsr.w	DeleteObject
0000A2B2 4E75                       		rts	
0000A2B4                            ; ===========================================================================
0000A2B4                            
0000A2B4                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A2B4 4A28 0001                  		tst.b	1(a0)
0000A2B8 6AF4                       		bpl.s	Obj23_Delete
0000A2BA 6100 0000                  		bsr.w	SpeedToPos
0000A2BE                            
0000A2BE                            Obj23_Animate2:				; XREF: Obj23_Main
0000A2BE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A2C4 6100 0000                  		bsr.w	AnimateSprite
0000A2C8 6100 0000                  		bsr.w	DisplaySprite
0000A2CC 4E75                       		rts	
0000A2CE                            ; ===========================================================================
0000A2CE                            Ani_obj22:
0000A2CE                            	include "_anim\obj22.asm"
0000A2CE                            ; ---------------------------------------------------------------------------
0000A2CE                            ; Animation script - Buzz Bomber enemy
0000A2CE                            ; ---------------------------------------------------------------------------
0000A2CE 0000                       		dc.w byte_9A1E-Ani_obj22
0000A2D0 0000                       		dc.w byte_9A22-Ani_obj22
0000A2D2 0000                       		dc.w byte_9A26-Ani_obj22
0000A2D4 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A2D8 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A2DC 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A2E0                            		even
0000A2E0                            		even
0000A2E0                            
0000A2E0                            Ani_obj23:
0000A2E0                            	include "_anim\obj23.asm"
0000A2E0                            ; ---------------------------------------------------------------------------
0000A2E0                            ; Animation script - missile that Buzz Bomber throws
0000A2E0                            ; ---------------------------------------------------------------------------
0000A2E0 0000                       		dc.w byte_9A2E-Ani_obj23
0000A2E2 0000                       		dc.w byte_9A32-Ani_obj23
0000A2E4 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A2E8 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A2EC                            		even
0000A2EC                            		even
0000A2EC                            
0000A2EC                            ; ---------------------------------------------------------------------------
0000A2EC                            ; Sprite mappings - Buzz Bomber	enemy
0000A2EC                            ; ---------------------------------------------------------------------------
0000A2EC                            Map_obj22:
0000A2EC                            	include "_maps\obj22.asm"
0000A2EC                            Map_e97a:
0000A2EC 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A2EE 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A2F0 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A2F2 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A2F4 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A2F6 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A2F8 06                         Map_e97a_C: 	dc.b $6
0000A2F9 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A2FE F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A303 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A308 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A30D F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A312 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A317 06                         Map_e97a_2B: 	dc.b $6
0000A318 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A31D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A322 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A327 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A32C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A331 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A336 07                         Map_e97a_4A: 	dc.b $7
0000A337 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A33C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A341 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A346 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A34B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A350 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A355 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A35A 07                         Map_e97a_6E: 	dc.b $7
0000A35B 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A360 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A365 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A36A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A36F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A374 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A379 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A37E 06                         Map_e97a_92: 	dc.b $6
0000A37F F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A384 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A389 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A38E 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A393 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A398 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A39D 04                         Map_e97a_B1: 	dc.b $4
0000A39E F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A3A3 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A3A8 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A3AD 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A3B2                            	even
0000A3B2                            	even
0000A3B2                            
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2                            ; Sprite mappings - missile that Buzz Bomber throws
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2                            Map_obj23:
0000A3B2                            	include "_maps\obj23.asm"
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2                            ; Sprite mappings - missile that Buzz Bomber throws
0000A3B2                            ; ---------------------------------------------------------------------------
0000A3B2 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A3B6 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A3BA 01                         byte_9B0E:	dc.b 1
0000A3BB F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A3C0 01                         byte_9B14:	dc.b 1
0000A3C1 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A3C6 01                         byte_9B1A:	dc.b 1
0000A3C7 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A3CC 01                         byte_9B20:	dc.b 1
0000A3CD F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A3D2                            		even
0000A3D2                            		even
0000A3D2                            
0000A3D2                            ; ===========================================================================
0000A3D2                            ; ---------------------------------------------------------------------------
0000A3D2                            ; Object 25 - rings
0000A3D2                            ; ---------------------------------------------------------------------------
0000A3D2                            
0000A3D2                            Obj25:					; XREF: Obj_Index
0000A3D2 7000                       		moveq	#0,d0
0000A3D4 1028 0024                  		move.b	$24(a0),d0
0000A3D8 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A3DC 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A3E0                            ; ===========================================================================
0000A3E0 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A3E2 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A3E4 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A3E6 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A3E8 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A3EA                            ; ---------------------------------------------------------------------------
0000A3EA                            ; Distances between rings (format: horizontal, vertical)
0000A3EA                            ; ---------------------------------------------------------------------------
0000A3EA 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A3EC 1800                       		dc.b $18, 0		; horizontal normal
0000A3EE 2000                       		dc.b $20, 0		; horizontal wide
0000A3F0 0010                       		dc.b 0,	$10		; vertical tight
0000A3F2 0018                       		dc.b 0,	$18		; vertical normal
0000A3F4 0020                       		dc.b 0,	$20		; vertical wide
0000A3F6 1010                       		dc.b $10, $10		; diagonal
0000A3F8 1818                       		dc.b $18, $18
0000A3FA 2020                       		dc.b $20, $20
0000A3FC F010                       		dc.b $F0, $10
0000A3FE E818                       		dc.b $E8, $18
0000A400 E020                       		dc.b $E0, $20
0000A402 1008                       		dc.b $10, 8
0000A404 1810                       		dc.b $18, $10
0000A406 F008                       		dc.b $F0, 8
0000A408 E810                       		dc.b $E8, $10
0000A40A                            ; ===========================================================================
0000A40A                            
0000A40A                            Obj25_Main:				; XREF: Obj25_Index
0000A40A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A40E 7000                       		moveq	#0,d0
0000A410 1028 0023                  		move.b	$23(a0),d0
0000A414 45F2 0002                  		lea	2(a2,d0.w),a2
0000A418 1812                       		move.b	(a2),d4
0000A41A 1228 0028                  		move.b	$28(a0),d1
0000A41E 1001                       		move.b	d1,d0
0000A420 0241 0007                  		andi.w	#7,d1
0000A424 0C41 0007                  		cmpi.w	#7,d1
0000A428 6600                       		bne.s	loc_9B80
0000A42A 7206                       		moveq	#6,d1
0000A42C                            
0000A42C                            loc_9B80:
0000A42C 4841                       		swap	d1
0000A42E 323C 0000                  		move.w	#0,d1
0000A432 E808                       		lsr.b	#4,d0
0000A434 D040                       		add.w	d0,d0
0000A436 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A43A 4885                       		ext.w	d5
0000A43C 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A440 4886                       		ext.w	d6
0000A442 2248                       		movea.l	a0,a1
0000A444 3428 0008                  		move.w	8(a0),d2
0000A448 3628 000C                  		move.w	$C(a0),d3
0000A44C E20C                       		lsr.b	#1,d4
0000A44E 6500                       		bcs.s	loc_9C02
0000A450 0892 0007                  		bclr	#7,(a2)
0000A454 6000                       		bra.s	loc_9BBA
0000A456                            ; ===========================================================================
0000A456                            
0000A456                            Obj25_MakeRings:
0000A456 4841                       		swap	d1
0000A458 E20C                       		lsr.b	#1,d4
0000A45A 6500                       		bcs.s	loc_9C02
0000A45C 0892 0007                  		bclr	#7,(a2)
0000A460 6100 0000                  		bsr.w	SingleObjLoad
0000A464 6600                       		bne.s	loc_9C0E
0000A466                            
0000A466                            loc_9BBA:				; XREF: Obj25_Main
0000A466 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A46A 5429 0024                  		addq.b	#2,$24(a1)
0000A46E 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A472 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A478 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A47C 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A484 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A48A 137C 0004 0001             		move.b	#4,1(a1)
0000A490 137C 0002 0018             		move.b	#2,$18(a1)
0000A496 137C 0047 0020             		move.b	#$47,$20(a1)
0000A49C 137C 0008 0019             		move.b	#8,$19(a1)
0000A4A2 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A4A8 1341 0034                  		move.b	d1,$34(a1)
0000A4AC                            
0000A4AC                            loc_9C02:
0000A4AC 5241                       		addq.w	#1,d1
0000A4AE D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A4B0 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A4B2 4841                       		swap	d1
0000A4B4 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A4B8                            
0000A4B8                            loc_9C0E:
0000A4B8 0812 0000                  		btst	#0,(a2)
0000A4BC 6600 0000                  		bne.w	DeleteObject
0000A4C0                            
0000A4C0                            Obj25_Animate:				; XREF: Obj25_Index
0000A4C0 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A4C6 6100 0000                  		bsr.w	DisplaySprite
0000A4CA 3028 0032                  		move.w	$32(a0),d0
0000A4CE 0240 FF80                  		andi.w	#$FF80,d0
0000A4D2 3238 F700                  		move.w	($FFFFF700).w,d1
0000A4D6 0441 0080                  		subi.w	#$80,d1
0000A4DA 0241 FF80                  		andi.w	#$FF80,d1
0000A4DE 9041                       		sub.w	d1,d0
0000A4E0 0C40 0280                  		cmpi.w	#$280,d0
0000A4E4 6200                       		bhi.s	Obj25_Delete
0000A4E6 4E75                       		rts	
0000A4E8                            ; ===========================================================================
0000A4E8                            
0000A4E8                            Obj25_Collect:				; XREF: Obj25_Index
0000A4E8 5428 0024                  		addq.b	#2,$24(a0)
0000A4EC 117C 0000 0020             		move.b	#0,$20(a0)
0000A4F2 117C 0001 0018             		move.b	#1,$18(a0)
0000A4F8 6100 0000                  		bsr.w	CollectRing
0000A4FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A500 7000                       		moveq	#0,d0
0000A502 1028 0023                  		move.b	$23(a0),d0
0000A506 1228 0034                  		move.b	$34(a0),d1
0000A50A 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A50E                            
0000A50E                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A50E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A514 6100 0000                  		bsr.w	AnimateSprite
0000A518 6000 0000                  		bra.w	DisplaySprite
0000A51C                            ; ===========================================================================
0000A51C                            
0000A51C                            Obj25_Delete:				; XREF: Obj25_Index
0000A51C 6000 0000                  		bra.w	DeleteObject
0000A520                            
0000A520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A520                            
0000A520                            
0000A520                            CollectRing:				; XREF: Obj25_Collect
0000A520 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A524 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A52A 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A52E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A534 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A536 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A53C 6700                       		beq.s	loc_9CA4
0000A53E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A544 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A546 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A54C 6600                       		bne.s	Obj25_PlaySnd
0000A54E                            
0000A54E                            loc_9CA4:
0000A54E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A552 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A556 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A55A                            
0000A55A                            Obj25_PlaySnd:
0000A55A 4EF9 0000 159A             		jmp	(PlaySound_Special).l
0000A560                            ; End of function CollectRing
0000A560                            
0000A560                            ; ===========================================================================
0000A560                            ; ---------------------------------------------------------------------------
0000A560                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A560                            ; ---------------------------------------------------------------------------
0000A560                            
0000A560                            Obj37:					; XREF: Obj_Index
0000A560 7000                       		moveq	#0,d0
0000A562 1028 0024                  		move.b	$24(a0),d0
0000A566 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A56A 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A56E                            ; ===========================================================================
0000A56E 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A570 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A572 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A574 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A576 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A578                            ; ===========================================================================
0000A578                            
0000A578                            Obj37_CountRings:			; XREF: Obj37_Index
0000A578 2248                       		movea.l	a0,a1
0000A57A 7A00                       		moveq	#0,d5
0000A57C 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A580 7020                       		moveq	#32,d0
0000A582 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A584 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A586 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A588                            
0000A588                            loc_9CDE:
0000A588 5345                       		subq.w	#1,d5
0000A58A 383C 0288                  		move.w	#$288,d4
0000A58E 6000                       		bra.s	Obj37_MakeRings
0000A590                            ; ===========================================================================
0000A590                            
0000A590                            Obj37_Loop:
0000A590 6100 0000                  		bsr.w	SingleObjLoad
0000A594 6600 0000                  		bne.w	Obj37_ResetCounter
0000A598                            
0000A598                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A598 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A59C 5429 0024                  		addq.b	#2,$24(a1)
0000A5A0 137C 0008 0016             		move.b	#8,$16(a1)
0000A5A6 137C 0008 0017             		move.b	#8,$17(a1)
0000A5AC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5B2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5B8 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A5C0 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A5C6 137C 0004 0001             		move.b	#4,1(a1)
0000A5CC 137C 0003 0018             		move.b	#3,$18(a1)
0000A5D2 137C 0047 0020             		move.b	#$47,$20(a1)
0000A5D8 137C 0008 0019             		move.b	#8,$19(a1)
0000A5DE 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A5E4 4A44                       		tst.w	d4
0000A5E6 6B00                       		bmi.s	loc_9D62
0000A5E8 3004                       		move.w	d4,d0
0000A5EA 6100 8748                  		bsr.w	CalcSine
0000A5EE 3404                       		move.w	d4,d2
0000A5F0 E04A                       		lsr.w	#8,d2
0000A5F2 E560                       		asl.w	d2,d0
0000A5F4 E561                       		asl.w	d2,d1
0000A5F6 3400                       		move.w	d0,d2
0000A5F8 3601                       		move.w	d1,d3
0000A5FA 0604 0010                  		addi.b	#$10,d4
0000A5FE 6400                       		bcc.s	loc_9D62
0000A600 0444 0080                  		subi.w	#$80,d4
0000A604 6400                       		bcc.s	loc_9D62
0000A606 383C 0288                  		move.w	#$288,d4
0000A60A                            
0000A60A                            loc_9D62:
0000A60A 3342 0010                  		move.w	d2,$10(a1)
0000A60E 3343 0012                  		move.w	d3,$12(a1)
0000A612 4442                       		neg.w	d2
0000A614 4444                       		neg.w	d4
0000A616 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A61A                            
0000A61A                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A61A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A620 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A626 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A62C 303C 00C6                  		move.w	#$C6,d0
0000A630 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A636                            
0000A636                            Obj37_Bounce:				; XREF: Obj37_Index
0000A636 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A63C 6100 0000                  		bsr.w	SpeedToPos
0000A640 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A646 6B00                       		bmi.s	Obj37_ChkDel
0000A648 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A64C D007                       		add.b	d7,d0
0000A64E 0200 0003                  		andi.b	#3,d0
0000A652 6600                       		bne.s	Obj37_ChkDel
0000A654 4EB9 0000 0000             		jsr	ObjHitFloor
0000A65A 4A41                       		tst.w	d1
0000A65C 6A00                       		bpl.s	Obj37_ChkDel
0000A65E D368 000C                  		add.w	d1,$C(a0)
0000A662 3028 0012                  		move.w	$12(a0),d0
0000A666 E440                       		asr.w	#2,d0
0000A668 9168 0012                  		sub.w	d0,$12(a0)
0000A66C 4468 0012                  		neg.w	$12(a0)
0000A670                            
0000A670                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A670 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A674 6700                       		beq.s	Obj37_Delete
0000A676 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A67A 0640 00E0                  		addi.w	#$E0,d0
0000A67E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A682 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A684 6000 0000                  		bra.w	DisplaySprite
0000A688                            ; ===========================================================================
0000A688                            
0000A688                            Obj37_Collect:				; XREF: Obj37_Index
0000A688 5428 0024                  		addq.b	#2,$24(a0)
0000A68C 117C 0000 0020             		move.b	#0,$20(a0)
0000A692 117C 0001 0018             		move.b	#1,$18(a0)
0000A698 6100 FE86                  		bsr.w	CollectRing
0000A69C                            
0000A69C                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A69C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A6A2 6100 0000                  		bsr.w	AnimateSprite
0000A6A6 6000 0000                  		bra.w	DisplaySprite
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            Obj37_Delete:				; XREF: Obj37_Index
0000A6AA 6000 0000                  		bra.w	DeleteObject
0000A6AE                            ; ===========================================================================
0000A6AE                            ; ---------------------------------------------------------------------------
0000A6AE                            ; Object 4B - giant ring for entry to special stage
0000A6AE                            ; ---------------------------------------------------------------------------
0000A6AE                            
0000A6AE                            Obj4B:					; XREF: Obj_Index
0000A6AE 7000                       		moveq	#0,d0
0000A6B0 1028 0024                  		move.b	$24(a0),d0
0000A6B4 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A6B8 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A6BC                            ; ===========================================================================
0000A6BC 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A6BE 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A6C0 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A6C2 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A6C4                            ; ===========================================================================
0000A6C4                            
0000A6C4                            Obj4B_Main:				; XREF: Obj4B_Index
0000A6C4 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A6CC 317C 2400 0002             		move.w	#$2400,2(a0)
0000A6D2 0028 0004 0001             		ori.b	#4,1(a0)
0000A6D8 117C 0040 0019             		move.b	#$40,$19(a0)
0000A6DE 4A28 0001                  		tst.b	1(a0)
0000A6E2 6A00                       		bpl.s	Obj4B_Animate
0000A6E4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A6EA 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A6EE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A6F4 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A6F6 4E75                       		rts	
0000A6F8                            ; ===========================================================================
0000A6F8                            
0000A6F8                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A6F8 5428 0024                  		addq.b	#2,$24(a0)
0000A6FC 117C 0002 0018             		move.b	#2,$18(a0)
0000A702 117C 0052 0020             		move.b	#$52,$20(a0)
0000A708 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A70E                            
0000A70E                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A70E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A714 3028 0008                  		move.w	8(a0),d0
0000A718 0240 FF80                  		andi.w	#$FF80,d0
0000A71C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A720 0441 0080                  		subi.w	#$80,d1
0000A724 0241 FF80                  		andi.w	#$FF80,d1
0000A728 9041                       		sub.w	d1,d0
0000A72A 0C40 0280                  		cmpi.w	#$280,d0
0000A72E 6200 0000                  		bhi.w	DeleteObject
0000A732 6000 0000                  		bra.w	DisplaySprite
0000A736                            ; ===========================================================================
0000A736                            
0000A736                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A736 5528 0024                  		subq.b	#2,$24(a0)
0000A73A 117C 0000 0020             		move.b	#0,$20(a0)
0000A740 6100 0000                  		bsr.w	SingleObjLoad
0000A744 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A748 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A74C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A752 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A758 2348 003C                  		move.l	a0,$3C(a1)
0000A75C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A760 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A764 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A766 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A76C                            
0000A76C                            Obj4B_PlaySnd:
0000A76C 303C 00C3                  		move.w	#$C3,d0
0000A770 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A776 6096                       		bra.s	Obj4B_Animate
0000A778                            ; ===========================================================================
0000A778                            
0000A778                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A778 6000 0000                  		bra.w	DeleteObject
0000A77C                            ; ===========================================================================
0000A77C                            ; ---------------------------------------------------------------------------
0000A77C                            ; Object 7C - flash effect when	you collect the	giant ring
0000A77C                            ; ---------------------------------------------------------------------------
0000A77C                            
0000A77C                            Obj7C:					; XREF: Obj_Index
0000A77C 7000                       		moveq	#0,d0
0000A77E 1028 0024                  		move.b	$24(a0),d0
0000A782 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A786 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A78A                            ; ===========================================================================
0000A78A 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A78C 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A78E 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A790                            ; ===========================================================================
0000A790                            
0000A790                            Obj7C_Main:				; XREF: Obj7C_Index
0000A790 5428 0024                  		addq.b	#2,$24(a0)
0000A794 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A79C 317C 2462 0002             		move.w	#$2462,2(a0)
0000A7A2 0028 0004 0001             		ori.b	#4,1(a0)
0000A7A8 117C 0000 0018             		move.b	#0,$18(a0)
0000A7AE 117C 0020 0019             		move.b	#$20,$19(a0)
0000A7B4 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A7BA                            
0000A7BA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A7BA 6100                       		bsr.s	Obj7C_Collect
0000A7BC 3028 0008                  		move.w	8(a0),d0
0000A7C0 0240 FF80                  		andi.w	#$FF80,d0
0000A7C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A7C8 0441 0080                  		subi.w	#$80,d1
0000A7CC 0241 FF80                  		andi.w	#$FF80,d1
0000A7D0 9041                       		sub.w	d1,d0
0000A7D2 0C40 0280                  		cmpi.w	#$280,d0
0000A7D6 6200 0000                  		bhi.w	DeleteObject
0000A7DA 6000 0000                  		bra.w	DisplaySprite
0000A7DE                            
0000A7DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7DE                            
0000A7DE                            
0000A7DE                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A7DE 5328 001E                  		subq.b	#1,$1E(a0)
0000A7E2 6A00                       		bpl.s	locret_9F76
0000A7E4 117C 0001 001E             		move.b	#1,$1E(a0)
0000A7EA 5228 001A                  		addq.b	#1,$1A(a0)
0000A7EE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A7F4 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A7F6 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A7FC 6600                       		bne.s	locret_9F76	; if not, branch
0000A7FE 2268 003C                  		movea.l	$3C(a0),a1
0000A802 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A808 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A80E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A814 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A818 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A81C                            
0000A81C                            locret_9F76:
0000A81C 4E75                       		rts	
0000A81E                            ; ===========================================================================
0000A81E                            
0000A81E                            Obj7C_End:				; XREF: Obj7C_Collect
0000A81E 5428 0024                  		addq.b	#2,$24(a0)
0000A822 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A828 588F                       		addq.l	#4,sp
0000A82A 4E75                       		rts	
0000A82C                            ; End of function Obj7C_Collect
0000A82C                            
0000A82C                            ; ===========================================================================
0000A82C                            
0000A82C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A82C 6000 0000                  		bra.w	DeleteObject
0000A830                            ; ===========================================================================
0000A830                            Ani_obj25:
0000A830                            	include "_anim\obj25.asm"
0000A830                            ; ---------------------------------------------------------------------------
0000A830                            ; Animation script - ring
0000A830                            ; ---------------------------------------------------------------------------
0000A830 0000                       		dc.w byte_9F8C-Ani_obj25
0000A832 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A838                            		even
0000A838                            		even
0000A838                            
0000A838                            ; ---------------------------------------------------------------------------
0000A838                            ; Sprite mappings - rings
0000A838                            ; ---------------------------------------------------------------------------
0000A838                            Map_obj25:
0000A838                            	include "_maps\obj25.asm"
0000A838                            ; ---------------------------------------------------------------------------
0000A838                            ; Sprite mappings - rings
0000A838                            ; ---------------------------------------------------------------------------
0000A838 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A83C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A840 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A844 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A848 01                         byte_9FA2:	dc.b 1
0000A849 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A84E 01                         byte_9FA8:	dc.b 1
0000A84F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A854 01                         byte_9FAE:	dc.b 1
0000A855 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A85A 01                         byte_9FB4:	dc.b 1
0000A85B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A860 01                         byte_9FBA:	dc.b 1
0000A861 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A866 01                         byte_9FC0:	dc.b 1
0000A867 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A86C 01                         byte_9FC6:	dc.b 1
0000A86D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A872 01                         byte_9FCC:	dc.b 1
0000A873 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A878                            		even
0000A878                            		even
0000A878                            
0000A878                            ; ---------------------------------------------------------------------------
0000A878                            ; Sprite mappings - giant ring
0000A878                            ; ---------------------------------------------------------------------------
0000A878                            Map_obj4B:
0000A878                            	include "_maps\obj4B.asm"
0000A878                            ; ---------------------------------------------------------------------------
0000A878                            ; Sprite mappings - giant ring
0000A878                            ; ---------------------------------------------------------------------------
0000A878 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A87C 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A880 0A                         byte_9FDA:	dc.b $A
0000A881 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A886 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A88B E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A890 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A895 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A89A F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A89F 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A8A4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A8A9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A8AE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A8B3 08                         byte_A00D:	dc.b 8
0000A8B4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A8B9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A8BE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A8C3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A8C8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A8CD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A8D2 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A8D7 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A8DC 04                         byte_A036:	dc.b 4
0000A8DD E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A8E2 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A8E7 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A8EC 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A8F1 08                         byte_A04B:	dc.b 8
0000A8F2 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A8F7 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A8FC E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A901 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A906 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A90B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A910 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A915 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A91A                            		even
0000A91A                            		even
0000A91A                            
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A                            Map_obj7C:
0000A91A                            	include "_maps\obj7C.asm"
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A91A                            ; ---------------------------------------------------------------------------
0000A91A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A91E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A922 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A926 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A92A 02                         byte_A084:	dc.b 2
0000A92B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A930 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A935 04                         byte_A08F:	dc.b 4
0000A936 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A93B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A940 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A945 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A94A 04                         byte_A0A4:	dc.b 4
0000A94B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A950 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A955 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A95A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A95F 04                         byte_A0B9:	dc.b 4
0000A960 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A965 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A96A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A96F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A974 04                         byte_A0CE:	dc.b 4
0000A975 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A97A E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A97F 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A984 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A989 04                         byte_A0E3:	dc.b 4
0000A98A E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A98F E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A994 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A999 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A99E 02                         byte_A0F8:	dc.b 2
0000A99F E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A9A4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A9A9 04                         byte_A103:	dc.b 4
0000A9AA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A9AF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A9B4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A9B9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A9BE                            		even
0000A9BE                            		even
0000A9BE                            
0000A9BE                            ; ===========================================================================
0000A9BE                            ; ---------------------------------------------------------------------------
0000A9BE                            ; Object 26 - monitors
0000A9BE                            ; ---------------------------------------------------------------------------
0000A9BE                            
0000A9BE                            Obj26:					; XREF: Obj_Index
0000A9BE 7000                       		moveq	#0,d0
0000A9C0 1028 0024                  		move.b	$24(a0),d0
0000A9C4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A9C8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A9CC                            ; ===========================================================================
0000A9CC 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A9CE 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A9D0 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A9D2 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A9D4 0000                       		dc.w Obj26_Display-Obj26_Index
0000A9D6                            ; ===========================================================================
0000A9D6                            
0000A9D6                            Obj26_Main:				; XREF: Obj26_Index
0000A9D6 5428 0024                  		addq.b	#2,$24(a0)
0000A9DA 117C 000E 0016             		move.b	#$E,$16(a0)
0000A9E0 117C 000E 0017             		move.b	#$E,$17(a0)
0000A9E6 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A9EE 317C 0680 0002             		move.w	#$680,2(a0)
0000A9F4 117C 0004 0001             		move.b	#4,1(a0)
0000A9FA 117C 0003 0018             		move.b	#3,$18(a0)
0000AA00 117C 000F 0019             		move.b	#$F,$19(a0)
0000AA06 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AA0A 7000                       		moveq	#0,d0
0000AA0C 1028 0023                  		move.b	$23(a0),d0
0000AA10 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000AA16 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000AA1C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000AA1E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000AA24 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000AA2A 4E75                       		rts	
0000AA2C                            ; ===========================================================================
0000AA2C                            
0000AA2C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000AA2C 117C 0046 0020             		move.b	#$46,$20(a0)
0000AA32 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000AA38                            
0000AA38                            Obj26_Solid:				; XREF: Obj26_Index
0000AA38 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000AA3C 6700                       		beq.s	loc_A1EC	; if not, branch
0000AA3E 5500                       		subq.b	#2,d0
0000AA40 6600                       		bne.s	Obj26_Fall
0000AA42 7200                       		moveq	#0,d1
0000AA44 1228 0019                  		move.b	$19(a0),d1
0000AA48 0641 000B                  		addi.w	#$B,d1
0000AA4C 6100 D37C                  		bsr.w	ExitPlatform
0000AA50 0829 0003 0022             		btst	#3,$22(a1)
0000AA56 6600 0000                  		bne.w	loc_A1BC
0000AA5A 4228 0025                  		clr.b	$25(a0)
0000AA5E 6000 0000                  		bra.w	Obj26_Animate
0000AA62                            ; ===========================================================================
0000AA62                            
0000AA62                            loc_A1BC:				; XREF: Obj26_Solid
0000AA62 363C 0010                  		move.w	#$10,d3
0000AA66 3428 0008                  		move.w	8(a0),d2
0000AA6A 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000AA6E 6000 0000                  		bra.w	Obj26_Animate
0000AA72                            ; ===========================================================================
0000AA72                            
0000AA72                            Obj26_Fall:				; XREF: Obj26_Solid
0000AA72 6100 0000                  		bsr.w	ObjectFall
0000AA76 4EB9 0000 0000             		jsr	ObjHitFloor
0000AA7C 4A41                       		tst.w	d1
0000AA7E 6A00 0000                  		bpl.w	Obj26_Animate
0000AA82 D368 000C                  		add.w	d1,$C(a0)
0000AA86 4268 0012                  		clr.w	$12(a0)
0000AA8A 4228 0025                  		clr.b	$25(a0)
0000AA8E 6000 0000                  		bra.w	Obj26_Animate
0000AA92                            ; ===========================================================================
0000AA92                            
0000AA92                            loc_A1EC:				; XREF: Obj26_Solid
0000AA92 323C 001A                  		move.w	#$1A,d1
0000AA96 343C 000F                  		move.w	#$F,d2
0000AA9A 6100 0000                  		bsr.w	Obj26_SolidSides
0000AA9E 6700 0000                  		beq.w	loc_A25C
0000AAA2 4A69 0012                  		tst.w	$12(a1)
0000AAA6 6B00                       		bmi.s	loc_A20A
0000AAA8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000AAAE 6700                       		beq.s	loc_A25C	; if yes, branch
0000AAB0                            
0000AAB0                            loc_A20A:
0000AAB0 4A41                       		tst.w	d1
0000AAB2 6A00                       		bpl.s	loc_A220
0000AAB4 9769 000C                  		sub.w	d3,$C(a1)
0000AAB8 6100 D1FE                  		bsr.w	loc_74AE
0000AABC 117C 0002 0025             		move.b	#2,$25(a0)
0000AAC2 6000 0000                  		bra.w	Obj26_Animate
0000AAC6                            ; ===========================================================================
0000AAC6                            
0000AAC6                            loc_A220:
0000AAC6 4A40                       		tst.w	d0
0000AAC8 6700 0000                  		beq.w	loc_A246
0000AACC 6B00                       		bmi.s	loc_A230
0000AACE 4A69 0010                  		tst.w	$10(a1)
0000AAD2 6B00                       		bmi.s	loc_A246
0000AAD4 6000                       		bra.s	loc_A236
0000AAD6                            ; ===========================================================================
0000AAD6                            
0000AAD6                            loc_A230:
0000AAD6 4A69 0010                  		tst.w	$10(a1)
0000AADA 6A00                       		bpl.s	loc_A246
0000AADC                            
0000AADC                            loc_A236:
0000AADC 9169 0008                  		sub.w	d0,8(a1)
0000AAE0 337C 0000 0014             		move.w	#0,$14(a1)
0000AAE6 337C 0000 0010             		move.w	#0,$10(a1)
0000AAEC                            
0000AAEC                            loc_A246:
0000AAEC 0829 0001 0022             		btst	#1,$22(a1)
0000AAF2 6600                       		bne.s	loc_A26A
0000AAF4 08E9 0005 0022             		bset	#5,$22(a1)
0000AAFA 08E8 0005 0022             		bset	#5,$22(a0)
0000AB00 6000                       		bra.s	Obj26_Animate
0000AB02                            ; ===========================================================================
0000AB02                            
0000AB02                            loc_A25C:
0000AB02 0828 0005 0022             		btst	#5,$22(a0)
0000AB08 6700                       		beq.s	Obj26_Animate
0000AB0A 337C 0001 001C             		move.w	#1,$1C(a1)
0000AB10                            
0000AB10                            loc_A26A:
0000AB10 08A8 0005 0022             		bclr	#5,$22(a0)
0000AB16 08A9 0005 0022             		bclr	#5,$22(a1)
0000AB1C                            
0000AB1C                            Obj26_Animate:				; XREF: Obj26_Index
0000AB1C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000AB22 6100 0000                  		bsr.w	AnimateSprite
0000AB26                            
0000AB26                            Obj26_Display:				; XREF: Obj26_Index
0000AB26 6100 0000                  		bsr.w	DisplaySprite
0000AB2A 3028 0008                  		move.w	8(a0),d0
0000AB2E 0240 FF80                  		andi.w	#$FF80,d0
0000AB32 3238 F700                  		move.w	($FFFFF700).w,d1
0000AB36 0441 0080                  		subi.w	#$80,d1
0000AB3A 0241 FF80                  		andi.w	#$FF80,d1
0000AB3E 9041                       		sub.w	d1,d0
0000AB40 0C40 0280                  		cmpi.w	#$280,d0
0000AB44 6200 0000                  		bhi.w	DeleteObject
0000AB48 4E75                       		rts	
0000AB4A                            ; ===========================================================================
0000AB4A                            
0000AB4A                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000AB4A 5428 0024                  		addq.b	#2,$24(a0)
0000AB4E 117C 0000 0020             		move.b	#0,$20(a0)
0000AB54 6100 0000                  		bsr.w	SingleObjLoad
0000AB58 6600                       		bne.s	Obj26_Explode
0000AB5A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000AB5E 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB64 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB6A 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000AB70 7400                       		moveq	#0,d2	; GMZ
0000AB72 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000AB74                            
0000AB74                            Obj26_Explode:
0000AB74 6100 0000                  		bsr.w	SingleObjLoad
0000AB78 6600                       		bne.s	Obj26_SetBroken
0000AB7A 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000AB7E 5429 0024                  		addq.b	#2,$24(a1)
0000AB82 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000AB86 3368 0008 0008             		move.w	8(a0),8(a1)
0000AB8C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AB92                            
0000AB92                            Obj26_NextExplosion:
0000AB92 5802                       		addq.b	#4,d2
0000AB94 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000AB98                            
0000AB98                            Obj26_SetBroken:
0000AB98 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB9C 7000                       		moveq	#0,d0
0000AB9E 1028 0023                  		move.b	$23(a0),d0
0000ABA2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000ABA8 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000ABAE 6000 0000                  		bra.w	DisplaySprite
0000ABB2                            ; ===========================================================================
0000ABB2                            ; ---------------------------------------------------------------------------
0000ABB2                            ; Object 2E - contents of monitors
0000ABB2                            ; ---------------------------------------------------------------------------
0000ABB2                            
0000ABB2                            Obj2E:					; XREF: Obj_Index
0000ABB2 7000                       		moveq	#0,d0
0000ABB4 1028 0024                  		move.b	$24(a0),d0
0000ABB8 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000ABBC 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000ABC0 6000 0000                  		bra.w	DisplaySprite
0000ABC4                            ; ===========================================================================
0000ABC4 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000ABC6 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000ABC8 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000ABCA                            ; ===========================================================================
0000ABCA                            
0000ABCA                            Obj2E_Main:				; XREF: Obj2E_Index
0000ABCA 5428 0024                  		addq.b	#2,$24(a0)
0000ABCE 317C 0680 0002             		move.w	#$680,2(a0)
0000ABD4 117C 0024 0001             		move.b	#$24,1(a0)
0000ABDA 117C 0003 0018             		move.b	#3,$18(a0)
0000ABE0 117C 0008 0019             		move.b	#8,$19(a0)
0000ABE6 317C FD00 0012             		move.w	#-$300,$12(a0)
0000ABEC 7000                       		moveq	#0,d0
0000ABEE 1028 001C                  		move.b	$1C(a0),d0
0000ABF2 5400                       		addq.b	#2,d0
0000ABF4 1140 001A                  		move.b	d0,$1A(a0)
0000ABF8 227C 0000 0000             		movea.l	#Map_obj26,a1
0000ABFE D000                       		add.b	d0,d0
0000AC00 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AC04 5249                       		addq.w	#1,a1
0000AC06 2149 0004                  		move.l	a1,4(a0)
0000AC0A                            
0000AC0A                            Obj2E_Move:				; XREF: Obj2E_Index
0000AC0A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AC0E 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AC12 6100 0000                  		bsr.w	SpeedToPos
0000AC16 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AC1C 4E75                       		rts	
0000AC1E                            ; ===========================================================================
0000AC1E                            
0000AC1E                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AC1E 5428 0024                  		addq.b	#2,$24(a0)
0000AC22 317C 001D 001E             		move.w	#29,$1E(a0)
0000AC28 1028 001C                  		move.b	$1C(a0),d0
0000AC2C 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AC30 6600                       		bne.s	Obj2E_ChkSonic
0000AC32 4E75                       		rts			; Eggman monitor does nothing
0000AC34                            ; ===========================================================================
0000AC34                            
0000AC34                            Obj2E_ChkSonic:
0000AC34 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AC38 6600                       		bne.s	Obj2E_ChkShoes
0000AC3A                            
0000AC3A                            ExtraLife:
0000AC3A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AC3E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AC42 303C 0088                  		move.w	#$88,d0
0000AC46 4EF9 0000 1594             		jmp	(PlaySound).l	; play extra life music
0000AC4C                            ; ===========================================================================
0000AC4C                            
0000AC4C                            Obj2E_ChkShoes:
0000AC4C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AC50 6600                       		bne.s	Obj2E_ChkShield
0000AC52 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AC58 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AC5E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AC64 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AC6A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AC70 303C 00E2                  		move.w	#$E2,d0
0000AC74 4EF9 0000 1594             		jmp	(PlaySound).l	; Speed	up the music
0000AC7A                            ; ===========================================================================
0000AC7A                            
0000AC7A                            Obj2E_ChkShield:
0000AC7A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AC7E 6600                       		bne.s	Obj2E_ChkInvinc
0000AC80 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AC86 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AC8C 303C 00AF                  		move.w	#$AF,d0
0000AC90 4EF9 0000 1594             		jmp	(PlaySound).l	; play shield sound
0000AC96                            ; ===========================================================================
0000AC96                            
0000AC96                            Obj2E_ChkInvinc:
0000AC96 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AC9A 6600                       		bne.s	Obj2E_ChkRings
0000AC9C 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000ACA2 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000ACA8 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000ACAE 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000ACB4 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000ACBA 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000ACC0 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000ACC6 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000ACCC 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000ACD2 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000ACD8 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000ACDC 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000ACDE 303C 0087                  		move.w	#$87,d0
0000ACE2 4EF9 0000 1594             		jmp	(PlaySound).l	; play invincibility music
0000ACE8                            ; ===========================================================================
0000ACE8                            
0000ACE8                            Obj2E_NoMusic:
0000ACE8 4E75                       		rts	
0000ACEA                            ; ===========================================================================
0000ACEA                            
0000ACEA                            Obj2E_ChkRings:
0000ACEA 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000ACEE 6600                       		bne.s	Obj2E_ChkS
0000ACF0 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000ACF6 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000ACFC 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AD02 6500                       		bcs.s	Obj2E_RingSound
0000AD04 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AD0A 6700 FF2E                  		beq.w	ExtraLife
0000AD0E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AD14 6500                       		bcs.s	Obj2E_RingSound
0000AD16 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AD1C 6700 FF1C                  		beq.w	ExtraLife
0000AD20                            
0000AD20                            Obj2E_RingSound:
0000AD20 303C 00B5                  		move.w	#$B5,d0
0000AD24 4EF9 0000 1594             		jmp	(PlaySound).l	; play ring sound
0000AD2A                            ; ===========================================================================
0000AD2A                            
0000AD2A                            Obj2E_ChkS:
0000AD2A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AD2E 6600                       		bne.s	Obj2E_ChkEnd
0000AD30                            		; nop	
0000AD30 7201                       		moveq	#1,d1
0000AD32 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AD36                            
0000AD36                            Obj2E_ChkEnd:
0000AD36 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AD38                            ; ===========================================================================
0000AD38                            
0000AD38                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AD38 5368 001E                  		subq.w	#1,$1E(a0)
0000AD3C 6B00 0000                  		bmi.w	DeleteObject
0000AD40 4E75                       		rts	
0000AD42                            ; ---------------------------------------------------------------------------
0000AD42                            ; Subroutine to	make the sides of a monitor solid
0000AD42                            ; ---------------------------------------------------------------------------
0000AD42                            
0000AD42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AD42                            
0000AD42                            
0000AD42                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AD42 43F8 D000                  		lea	($FFFFD000).w,a1
0000AD46 3029 0008                  		move.w	8(a1),d0
0000AD4A 9068 0008                  		sub.w	8(a0),d0
0000AD4E D041                       		add.w	d1,d0
0000AD50 6B00                       		bmi.s	loc_A4E6
0000AD52 3601                       		move.w	d1,d3
0000AD54 D643                       		add.w	d3,d3
0000AD56 B043                       		cmp.w	d3,d0
0000AD58 6200                       		bhi.s	loc_A4E6
0000AD5A 1629 0016                  		move.b	$16(a1),d3
0000AD5E 4883                       		ext.w	d3
0000AD60 D443                       		add.w	d3,d2
0000AD62 3629 000C                  		move.w	$C(a1),d3
0000AD66 9668 000C                  		sub.w	$C(a0),d3
0000AD6A D642                       		add.w	d2,d3
0000AD6C 6B00                       		bmi.s	loc_A4E6
0000AD6E D442                       		add.w	d2,d2
0000AD70 B642                       		cmp.w	d2,d3
0000AD72 6400                       		bcc.s	loc_A4E6
0000AD74 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AD78 6B00                       		bmi.s	loc_A4E6
0000AD7A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AD80 6400                       		bcc.s	loc_A4E6
0000AD82 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AD86 6600                       		bne.s	loc_A4E6
0000AD88 B240                       		cmp.w	d0,d1
0000AD8A 6400                       		bcc.s	loc_A4DC
0000AD8C D241                       		add.w	d1,d1
0000AD8E 9041                       		sub.w	d1,d0
0000AD90                            
0000AD90                            loc_A4DC:
0000AD90 0C43 0010                  		cmpi.w	#$10,d3
0000AD94 6500                       		bcs.s	loc_A4EA
0000AD96                            
0000AD96                            loc_A4E2:
0000AD96 7201                       		moveq	#1,d1
0000AD98 4E75                       		rts	
0000AD9A                            ; ===========================================================================
0000AD9A                            
0000AD9A                            loc_A4E6:
0000AD9A 7200                       		moveq	#0,d1
0000AD9C 4E75                       		rts	
0000AD9E                            ; ===========================================================================
0000AD9E                            
0000AD9E                            loc_A4EA:
0000AD9E 7200                       		moveq	#0,d1
0000ADA0 1228 0019                  		move.b	$19(a0),d1
0000ADA4 5841                       		addq.w	#4,d1
0000ADA6 3401                       		move.w	d1,d2
0000ADA8 D442                       		add.w	d2,d2
0000ADAA D269 0008                  		add.w	8(a1),d1
0000ADAE 9268 0008                  		sub.w	8(a0),d1
0000ADB2 6BE2                       		bmi.s	loc_A4E2
0000ADB4 B242                       		cmp.w	d2,d1
0000ADB6 64DE                       		bcc.s	loc_A4E2
0000ADB8 72FF                       		moveq	#-1,d1
0000ADBA 4E75                       		rts	
0000ADBC                            ; End of function Obj26_SolidSides
0000ADBC                            
0000ADBC                            ; ===========================================================================
0000ADBC                            Ani_obj26:
0000ADBC                            	include "_anim\obj26.asm"
0000ADBC                            ; ---------------------------------------------------------------------------
0000ADBC                            ; Animation script - monitors
0000ADBC                            ; ---------------------------------------------------------------------------
0000ADBC 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ADC2 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ADC8 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ADCE 0000                       		dc.w byte_A582-Ani_obj26
0000ADD0 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ADD6 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ADE2 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ADEE 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ADFA 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AE06 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AE12 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AE1E 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AE2A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AE36 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AE3E                            		even
0000AE3E                            		even
0000AE3E                            
0000AE3E                            ; ---------------------------------------------------------------------------
0000AE3E                            ; Sprite mappings - monitors
0000AE3E                            ; ---------------------------------------------------------------------------
0000AE3E                            Map_obj26:
0000AE3E                            	include "_maps\obj26.asm"
0000AE3E                            ; ================================================================================
0000AE3E                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AE3E                            ; ================================================================================
0000AE3E                            
0000AE3E                            DATAY1U343IF3L:
0000AE3E 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AE42 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AE46 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AE4A 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AE4E 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AE52 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AE56 05                         DATAY1U343IF3L_0: dc.b $5
0000AE57 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE5C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE61 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE66 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE6B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE70 06                         DATAY1U343IF3L_1: dc.b $6
0000AE71 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AE76 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE7B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE80 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE85 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AE8A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AE8F 05                         DATAY1U343IF3L_2: dc.b $5
0000AE90 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AE95 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AE9A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AE9F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEA4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEA9 05                         DATAY1U343IF3L_3: dc.b $5
0000AEAA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEAF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEB4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEB9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEBE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEC3 06                         DATAY1U343IF3L_4: dc.b $6
0000AEC4 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AEC9 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AECE 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AED3 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AED8 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEDD 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AEE2 06                         DATAY1U343IF3L_5: dc.b $6
0000AEE3 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AEE8 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AEED 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AEF2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AEF7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AEFC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF01 06                         DATAY1U343IF3L_6: dc.b $6
0000AF02 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AF07 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF0C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF11 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF16 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF1B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF20 06                         DATAY1U343IF3L_7: dc.b $6
0000AF21 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AF26 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF2B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF30 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF35 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF3A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF3F 06                         DATAY1U343IF3L_8: dc.b $6
0000AF40 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AF45 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF4A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF4F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF54 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF59 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF5E 06                         DATAY1U343IF3L_9: dc.b $6
0000AF5F F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AF64 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF69 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF6E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF73 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF78 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF7D 05                         DATAY1U343IF3L_A: dc.b $5
0000AF7E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AF83 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AF88 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AF8D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AF92 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AF97 01                         DATAY1U343IF3L_B: dc.b $1
0000AF98 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AF9E 00                         	even
0000AF9E 00                         	even
0000AF9E                            
0000AF9E                            ; ===========================================================================
0000AF9E                            ; ---------------------------------------------------------------------------
0000AF9E                            ; Object 0E - Sonic on the title screen
0000AF9E                            ; ---------------------------------------------------------------------------
0000AF9E                            
0000AF9E                            Obj0E:					; XREF: Obj_Index
0000AF9E 7000                       		moveq	#0,d0
0000AFA0 1028 0024                  		move.b	$24(a0),d0
0000AFA4 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AFA8 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AFAC                            ; ===========================================================================
0000AFAC 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AFAE 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AFB0 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AFB2 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AFB4                            ; ===========================================================================
0000AFB4                            
0000AFB4                            Obj0E_Main:				; XREF: Obj0E_Index
0000AFB4 5428 0024                  		addq.b	#2,$24(a0)
0000AFB8 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AFBE 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AFC4 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AFCC 317C 2300 0002             		move.w	#$2300,2(a0)
0000AFD2 117C 0001 0018             		move.b	#1,$18(a0)
0000AFD8 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AFDE 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AFE4 6100 0000                  		bsr.w	AnimateSprite
0000AFE8                            
0000AFE8                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AFE8 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AFEC 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AFEE 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AFF2 6000 0000                  		bra.w	DisplaySprite
0000AFF6                            ; ===========================================================================
0000AFF6                            
0000AFF6                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AFF6 4E75                       		rts	
0000AFF8                            ; ===========================================================================
0000AFF8                            
0000AFF8                            Obj0E_Move:				; XREF: Obj0E_Index
0000AFF8 5168 000A                  		subq.w	#8,$A(a0)
0000AFFC 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B002 6600                       		bne.s	Obj0E_Display
0000B004 5428 0024                  		addq.b	#2,$24(a0)
0000B008                            
0000B008                            Obj0E_Display:
0000B008 6000 0000                  		bra.w	DisplaySprite
0000B00C                            ; ===========================================================================
0000B00C 4E75                       		rts	
0000B00E                            ; ===========================================================================
0000B00E                            
0000B00E                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B00E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B014 6100 0000                  		bsr.w	AnimateSprite
0000B018 6000 0000                  		bra.w	DisplaySprite
0000B01C                            ; ===========================================================================
0000B01C 4E75                       		rts	
0000B01E                            ; ===========================================================================
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B01E                            ; ---------------------------------------------------------------------------
0000B01E                            
0000B01E                            Obj0F:					; XREF: Obj_Index
0000B01E 7000                       		moveq	#0,d0
0000B020 1028 0024                  		move.b	$24(a0),d0
0000B024 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B028 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B02C 6000 0000                  		bra.w	DisplaySprite
0000B030                            ; ===========================================================================
0000B030 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B032 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B034 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B036                            ; ===========================================================================
0000B036                            
0000B036                            Obj0F_Main:				; XREF: Obj0F_Index
0000B036 5428 0024                  		addq.b	#2,$24(a0)
0000B03A 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B040 317C 0130 000A             		move.w	#$130,$A(a0)
0000B046 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B04E 317C 0200 0002             		move.w	#$200,2(a0)
0000B054 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B05A 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B05C 5428 0024                  		addq.b	#2,$24(a0)
0000B060 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B066 6600                       		bne.s	locret_A6F8	; if not, branch
0000B068 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B06E 317C 0170 0008             		move.w	#$170,8(a0)
0000B074 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B07A                            
0000B07A                            locret_A6F8:				; XREF: Obj0F_Index
0000B07A 4E75                       		rts	
0000B07C                            ; ===========================================================================
0000B07C                            
0000B07C                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B07C 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B082 6000 0000                  		bra.w	AnimateSprite
0000B086                            ; ===========================================================================
0000B086                            Ani_obj0E:
0000B086                            	include "_anim\obj0E.asm"
0000B086                            ; ---------------------------------------------------------------------------
0000B086                            ; Animation script - Sonic on the title screen
0000B086                            ; ---------------------------------------------------------------------------
0000B086 0000                       		dc.w byte_A706-Ani_obj0E
0000B088 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B094                            		even
0000B094                            		even
0000B094                            
0000B094                            Ani_obj0F:
0000B094                            	include "_anim\obj0F.asm"
0000B094                            ; ---------------------------------------------------------------------------
0000B094                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B094                            ; ---------------------------------------------------------------------------
0000B094 0000                       		dc.w byte_A714-Ani_obj0F
0000B096 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B09A                            		even
0000B09A                            		even
0000B09A                            
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            ; Subroutine to	animate	a sprite using an animation script
0000B09A                            ; ---------------------------------------------------------------------------
0000B09A                            
0000B09A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B09A                            
0000B09A                            
0000B09A                            AnimateSprite:
0000B09A 7000                       		moveq	#0,d0
0000B09C 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B0A0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B0A4 6700                       		beq.s	Anim_Run	; if not, branch
0000B0A6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B0AA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B0B0 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B0B6                            
0000B0B6                            Anim_Run:
0000B0B6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B0BA 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B0BC D040                       		add.w	d0,d0
0000B0BE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B0C2 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B0C6 7200                       		moveq	#0,d1
0000B0C8 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B0CC 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B0D0 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B0D2                            
0000B0D2                            Anim_Next:
0000B0D2 1200                       		move.b	d0,d1
0000B0D4 0200 001F                  		andi.b	#$1F,d0
0000B0D8 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B0DC 1028 0022                  		move.b	$22(a0),d0
0000B0E0 E719                       		rol.b	#3,d1
0000B0E2 B101                       		eor.b	d0,d1
0000B0E4 0201 0003                  		andi.b	#3,d1
0000B0E8 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B0EE 8328 0001                  		or.b	d1,1(a0)
0000B0F2 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B0F6                            
0000B0F6                            Anim_Wait:
0000B0F6 4E75                       		rts	
0000B0F8                            ; ===========================================================================
0000B0F8                            
0000B0F8                            Anim_End_FF:
0000B0F8 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B0FA 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B0FC 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B102 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B106 60CA                       		bra.s	Anim_Next
0000B108                            ; ===========================================================================
0000B108                            
0000B108                            Anim_End_FE:
0000B108 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B10A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B10C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B110 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B114 9200                       		sub.b	d0,d1
0000B116 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B11A 60B6                       		bra.s	Anim_Next
0000B11C                            ; ===========================================================================
0000B11C                            
0000B11C                            Anim_End_FD:
0000B11C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B11E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B120 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B126                            
0000B126                            Anim_End_FC:
0000B126 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B128 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B12A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B12E                            
0000B12E                            Anim_End_FB:
0000B12E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B130 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B132 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B138 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B13C                            
0000B13C                            Anim_End_FA:
0000B13C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B13E 6600                       		bne.s	Anim_End	; if not, branch
0000B140 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B144                            
0000B144                            Anim_End:
0000B144 4E75                       		rts	
0000B146                            ; End of function AnimateSprite
0000B146                            
0000B146                            ; ===========================================================================
0000B146                            ; ---------------------------------------------------------------------------
0000B146                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B146                            ; ---------------------------------------------------------------------------
0000B146                            Map_obj0F:
0000B146                            	include "_maps\obj0F.asm"
0000B146                            ; ---------------------------------------------------------------------------
0000B146                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B146                            ; ---------------------------------------------------------------------------
0000B146 0000                       		dc.w byte_A7CD-Map_obj0F
0000B148 0000                       		dc.w byte_A7CC-Map_obj0F
0000B14A 0000                       		dc.w byte_A7EB-Map_obj0F
0000B14C 0000                       		dc.w byte_A882-Map_obj0F
0000B14E 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B14F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B154 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B159 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B15E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B163 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B168 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B16D 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B16E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B173 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B178 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B17D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B182 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B187 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B18C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B191 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B196 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B19B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B1A0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1A5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1AA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1AF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1B4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1B9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1BE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1C3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1C8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1CD D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B1D2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1D7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1DC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1E1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1E6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1EB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1F0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1F5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1FA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B1FF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B204 01                         byte_A882:	dc.b 1			; "TM"
0000B205 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B20A                            		even
0000B20A                            		even
0000B20A                            
0000B20A                            ; ---------------------------------------------------------------------------
0000B20A                            ; Sprite mappings - Sonic on the title screen
0000B20A                            ; ---------------------------------------------------------------------------
0000B20A                            Map_obj0E:
0000B20A                            	include "_maps\obj0E.asm"
0000B20A                            ; ================================================================================
0000B20A                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B20A                            ; ================================================================================
0000B20A                            
0000B20A                            DATAGKI0HYDQBXP:
0000B20A 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B20E 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B212 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B216 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B21A 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B21B 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B220 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B225 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B22A 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B22F 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B234 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B239 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B23E 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B243 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B244 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B249 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B24E 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B253 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B258 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B25D 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B262 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B267 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B26C 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B271 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B276 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B27B 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B27C F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B281 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B286 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B28B 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B290 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B295 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B29A 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B29F 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B2A4 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B2A9 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B2AE 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B2B3 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B2B4 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B2B9 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B2BE FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B2C3 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B2C8 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B2CD 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B2D2 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B2D7 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B2DC 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B2E1 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B2E6 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B2E7 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B2EC F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B2F1 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B2F6 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B2FB 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B300 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B305 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B30A 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B30F 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B314 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B319 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B31E 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B323 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B328 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B32D 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B332 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B337 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B338 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B33D EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B342 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B347 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B34C EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B351 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B356 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B35B EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B360 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B365 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B36A 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B36F 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B370 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B375 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B37A 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B37F EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B384 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B389 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B38E EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B393 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B398 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B39D EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B3A2 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B3A7 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B3AC EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B3B1 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B3B6 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B3BB 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B3BC EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B3C1 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B3C6 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B3CB EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B3D0 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B3D5 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B3DA EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B3DF 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B3E4 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B3E9 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B3EE 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B3F3 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B3F8 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B3FD 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B402 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B408 00                         	even
0000B408 00                         	even
0000B408                            
0000B408                            ; ===========================================================================
0000B408                            ; ---------------------------------------------------------------------------
0000B408                            ; Object 2B - Chopper enemy (GHZ)
0000B408                            ; ---------------------------------------------------------------------------
0000B408                            
0000B408                            Obj2B:					; XREF: Obj_Index
0000B408 7000                       		moveq	#0,d0
0000B40A 1028 0024                  		move.b	$24(a0),d0
0000B40E 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B412 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B416 6000 0000                  		bra.w	MarkObjGone
0000B41A                            ; ===========================================================================
0000B41A 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B41C 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B41E                            ; ===========================================================================
0000B41E                            
0000B41E                            Obj2B_Main:				; XREF: Obj2B_Index
0000B41E 5428 0024                  		addq.b	#2,$24(a0)
0000B422 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B42A 317C 047B 0002             		move.w	#$47B,2(a0)
0000B430 117C 0004 0001             		move.b	#4,1(a0)
0000B436 117C 0004 0018             		move.b	#4,$18(a0)
0000B43C 117C 0009 0020             		move.b	#9,$20(a0)
0000B442 117C 0010 0019             		move.b	#$10,$19(a0)
0000B448 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B44E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B454                            
0000B454                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B454 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B45A 6100 FC3E                  		bsr.w	AnimateSprite
0000B45E 6100 0000                  		bsr.w	SpeedToPos
0000B462 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B468 3028 0030                  		move.w	$30(a0),d0
0000B46C B068 000C                  		cmp.w	$C(a0),d0
0000B470 6400                       		bcc.s	Obj2B_ChgAni
0000B472 3140 000C                  		move.w	d0,$C(a0)
0000B476 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B47C                            
0000B47C                            Obj2B_ChgAni:
0000B47C 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B482 0440 00C0                  		subi.w	#$C0,d0
0000B486 B068 000C                  		cmp.w	$C(a0),d0
0000B48A 6400                       		bcc.s	locret_ABB6
0000B48C 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B492 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B496 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B498 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B49E                            
0000B49E                            locret_ABB6:
0000B49E 4E75                       		rts	
0000B4A0                            ; ===========================================================================
0000B4A0                            Ani_obj2B:
0000B4A0                            	include "_anim\obj2B.asm"
0000B4A0                            ; ---------------------------------------------------------------------------
0000B4A0                            ; Animation script - Chopper enemy
0000B4A0                            ; ---------------------------------------------------------------------------
0000B4A0 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B4A2 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B4A4 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B4A6 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B4AA 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B4AE 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B4B2 00                         		even
0000B4B2 00                         		even
0000B4B2                            
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            ; Sprite mappings - Chopper enemy (GHZ)
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            Map_obj2B:
0000B4B2                            	include "_maps\obj2B.asm"
0000B4B2                            Map_1ff1:
0000B4B2 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B4B4 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B4B6 02                         Map_1ff1_4: 	dc.b $2
0000B4B7 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B4BC 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B4C1 02                         Map_1ff1_F: 	dc.b $2
0000B4C2 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B4C7 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B4CC                            	even
0000B4CC                            	even
0000B4CC                            
0000B4CC                            ; ===========================================================================
0000B4CC                            ; ---------------------------------------------------------------------------
0000B4CC                            ; Object 2C - Jaws enemy (LZ)
0000B4CC                            ; ---------------------------------------------------------------------------
0000B4CC                            
0000B4CC                            Obj2C:					; XREF: Obj_Index
0000B4CC 7000                       		moveq	#0,d0
0000B4CE 1028 0024                  		move.b	$24(a0),d0
0000B4D2 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B4D6 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B4DA                            ; ===========================================================================
0000B4DA 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B4DC 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B4DE                            ; ===========================================================================
0000B4DE                            
0000B4DE                            Obj2C_Main:				; XREF: Obj2C_Index
0000B4DE 5428 0024                  		addq.b	#2,$24(a0)
0000B4E2 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B4EA 317C 2486 0002             		move.w	#$2486,2(a0)
0000B4F0 0028 0004 0001             		ori.b	#4,1(a0)
0000B4F6 117C 000A 0020             		move.b	#$A,$20(a0)
0000B4FC 117C 0004 0018             		move.b	#4,$18(a0)
0000B502 117C 0010 0019             		move.b	#$10,$19(a0)
0000B508 7000                       		moveq	#0,d0
0000B50A 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B50E ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B510 5340                       		subq.w	#1,d0
0000B512 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B516 3140 0032                  		move.w	d0,$32(a0)
0000B51A 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B520 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B526 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B528 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B52C                            
0000B52C                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B52C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B530 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B532 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B538 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B53C 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B542 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B548                            
0000B548                            Obj2C_Animate:
0000B548 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B54E 6100 FB4A                  		bsr.w	AnimateSprite
0000B552 6100 0000                  		bsr.w	SpeedToPos
0000B556 6000 0000                  		bra.w	MarkObjGone
0000B55A                            ; ===========================================================================
0000B55A                            Ani_obj2C:
0000B55A                            	include "_anim\obj2C.asm"
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A                            ; Animation script - Jaws enemy
0000B55A                            ; ---------------------------------------------------------------------------
0000B55A 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B55C 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B562                            		even
0000B562                            		even
0000B562                            
0000B562                            ; ---------------------------------------------------------------------------
0000B562                            ; Sprite mappings - Jaws enemy (LZ)
0000B562                            ; ---------------------------------------------------------------------------
0000B562                            Map_obj2C:
0000B562                            	include "_maps\obj2C.asm"
0000B562                            ; ---------------------------------------------------------------------------
0000B562                            ; Sprite mappings - Jaws enemy (LZ)
0000B562                            ; ---------------------------------------------------------------------------
0000B562 0000                       		dc.w byte_AC78-Map_obj2C
0000B564 0000                       		dc.w byte_AC83-Map_obj2C
0000B566 0000                       		dc.w byte_AC8E-Map_obj2C
0000B568 0000                       		dc.w byte_AC99-Map_obj2C
0000B56A 02                         byte_AC78:	dc.b 2
0000B56B F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B570 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B575 02                         byte_AC83:	dc.b 2
0000B576 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B57B F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B580 02                         byte_AC8E:	dc.b 2
0000B581 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B586 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B58B 02                         byte_AC99:	dc.b 2
0000B58C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B591 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B596                            		even
0000B596                            		even
0000B596                            
0000B596                            ; ===========================================================================
0000B596                            ; ---------------------------------------------------------------------------
0000B596                            ; Object 2D - Burrobot enemy (LZ)
0000B596                            ; ---------------------------------------------------------------------------
0000B596                            
0000B596                            Obj2D:					; XREF: Obj_Index
0000B596 7000                       		moveq	#0,d0
0000B598 1028 0024                  		move.b	$24(a0),d0
0000B59C 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B5A0 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B5A4                            ; ===========================================================================
0000B5A4 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B5A6 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B5A8                            ; ===========================================================================
0000B5A8                            
0000B5A8                            Obj2D_Main:				; XREF: Obj2D_Index
0000B5A8 5428 0024                  		addq.b	#2,$24(a0)
0000B5AC 117C 0013 0016             		move.b	#$13,$16(a0)
0000B5B2 117C 0008 0017             		move.b	#8,$17(a0)
0000B5B8 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B5C0 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B5C6 0028 0004 0001             		ori.b	#4,1(a0)
0000B5CC 117C 0004 0018             		move.b	#4,$18(a0)
0000B5D2 117C 0005 0020             		move.b	#5,$20(a0)
0000B5D8 117C 000C 0019             		move.b	#$C,$19(a0)
0000B5DE 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B5E2 117C 0002 001C             		move.b	#2,$1C(a0)
0000B5E8                            
0000B5E8                            Obj2D_Action:				; XREF: Obj2D_Index
0000B5E8 7000                       		moveq	#0,d0
0000B5EA 1028 0025                  		move.b	$25(a0),d0
0000B5EE 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B5F2 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B5F6 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B5FC 6100 FA9C                  		bsr.w	AnimateSprite
0000B600 6000 0000                  		bra.w	MarkObjGone
0000B604                            ; ===========================================================================
0000B604 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B606 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B608 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B60A 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B60C                            ; ===========================================================================
0000B60C                            
0000B60C                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B60C 5368 0030                  		subq.w	#1,$30(a0)
0000B610 6A00                       		bpl.s	locret_AD42
0000B612 5428 0025                  		addq.b	#2,$25(a0)
0000B616 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B61C 317C 0080 0010             		move.w	#$80,$10(a0)
0000B622 117C 0001 001C             		move.b	#1,$1C(a0)
0000B628 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B62E 6700                       		beq.s	locret_AD42
0000B630 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B634                            
0000B634                            locret_AD42:
0000B634 4E75                       		rts	
0000B636                            ; ===========================================================================
0000B636                            
0000B636                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B636 5368 0030                  		subq.w	#1,$30(a0)
0000B63A 6B00                       		bmi.s	loc_AD84
0000B63C 6100 0000                  		bsr.w	SpeedToPos
0000B640 0868 0000 0032             		bchg	#0,$32(a0)
0000B646 6600                       		bne.s	loc_AD78
0000B648 3628 0008                  		move.w	8(a0),d3
0000B64C 0643 000C                  		addi.w	#$C,d3
0000B650 0828 0000 0022             		btst	#0,$22(a0)
0000B656 6600                       		bne.s	loc_AD6A
0000B658 0443 0018                  		subi.w	#$18,d3
0000B65C                            
0000B65C                            loc_AD6A:
0000B65C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B662 0C41 000C                  		cmpi.w	#$C,d1
0000B666 6C00                       		bge.s	loc_AD84
0000B668 4E75                       		rts	
0000B66A                            ; ===========================================================================
0000B66A                            
0000B66A                            loc_AD78:				; XREF: Obj2D_Move
0000B66A 4EB9 0000 0000             		jsr	ObjHitFloor
0000B670 D368 000C                  		add.w	d1,$C(a0)
0000B674 4E75                       		rts	
0000B676                            ; ===========================================================================
0000B676                            
0000B676                            loc_AD84:				; XREF: Obj2D_Move
0000B676 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B67C 6700                       		beq.s	loc_ADA4
0000B67E 5528 0025                  		subq.b	#2,$25(a0)
0000B682 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B688 317C 0000 0010             		move.w	#0,$10(a0)
0000B68E 117C 0000 001C             		move.b	#0,$1C(a0)
0000B694 4E75                       		rts	
0000B696                            ; ===========================================================================
0000B696                            
0000B696                            loc_ADA4:
0000B696 5428 0025                  		addq.b	#2,$25(a0)
0000B69A 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B6A0 117C 0002 001C             		move.b	#2,$1C(a0)
0000B6A6 4E75                       		rts	
0000B6A8                            ; ===========================================================================
0000B6A8                            
0000B6A8                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B6A8 6100 0000                  		bsr.w	SpeedToPos
0000B6AC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B6B2 6B00                       		bmi.s	locret_ADF0
0000B6B4 117C 0003 001C             		move.b	#3,$1C(a0)
0000B6BA 4EB9 0000 0000             		jsr	ObjHitFloor
0000B6C0 4A41                       		tst.w	d1
0000B6C2 6A00                       		bpl.s	locret_ADF0
0000B6C4 D368 000C                  		add.w	d1,$C(a0)
0000B6C8 317C 0000 0012             		move.w	#0,$12(a0)
0000B6CE 117C 0001 001C             		move.b	#1,$1C(a0)
0000B6D4 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B6DA 5528 0025                  		subq.b	#2,$25(a0)
0000B6DE 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6E2                            
0000B6E2                            locret_ADF0:
0000B6E2 4E75                       		rts	
0000B6E4                            ; ===========================================================================
0000B6E4                            
0000B6E4                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B6E4 343C 0060                  		move.w	#$60,d2
0000B6E8 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B6EC 6400                       		bcc.s	locret_AE20
0000B6EE 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B6F2 9068 000C                  		sub.w	$C(a0),d0
0000B6F6 6400                       		bcc.s	locret_AE20
0000B6F8 0C40 FF80                  		cmpi.w	#-$80,d0
0000B6FC 6500                       		bcs.s	locret_AE20
0000B6FE 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B702 6600                       		bne.s	locret_AE20
0000B704 5528 0025                  		subq.b	#2,$25(a0)
0000B708 3141 0010                  		move.w	d1,$10(a0)
0000B70C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B712                            
0000B712                            locret_AE20:
0000B712 4E75                       		rts	
0000B714                            
0000B714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B714                            
0000B714                            
0000B714                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B714 323C 0080                  		move.w	#$80,d1
0000B718 08E8 0000 0022             		bset	#0,$22(a0)
0000B71E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B722 9068 0008                  		sub.w	8(a0),d0
0000B726 6400                       		bcc.s	loc_AE40
0000B728 4440                       		neg.w	d0
0000B72A 4441                       		neg.w	d1
0000B72C 08A8 0000 0022             		bclr	#0,$22(a0)
0000B732                            
0000B732                            loc_AE40:
0000B732 B042                       		cmp.w	d2,d0
0000B734 4E75                       		rts	
0000B736                            ; End of function Obj2D_ChkSonic2
0000B736                            
0000B736                            ; ===========================================================================
0000B736                            Ani_obj2D:
0000B736                            	include "_anim\obj2D.asm"
0000B736                            ; ---------------------------------------------------------------------------
0000B736                            ; Animation script - Burrobot enemy but craig
0000B736                            ; ---------------------------------------------------------------------------
0000B736 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B738 0000                       		dc.w byte_AE50-Ani_obj2D
0000B73A 0000                       		dc.w byte_AE54-Ani_obj2D
0000B73C 0000                       		dc.w byte_AE58-Ani_obj2D
0000B73E 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B741 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B745 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B753 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B756                            		even
0000B756                            		even
0000B756                            
0000B756                            ; ---------------------------------------------------------------------------
0000B756                            ; Sprite mappings - Burrobot enemy (LZ)
0000B756                            ; ---------------------------------------------------------------------------
0000B756                            Map_obj2D:
0000B756                            	include "_maps\obj2D.asm"
0000B756                            Map_e3a3:
0000B756 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B758 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B75A 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B75C 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B75E 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B760 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B762 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B764 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B766 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B768 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B76A 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B76C 02                         Map_e3a3_16: 	dc.b $2
0000B76D EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B772 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B777 02                         Map_e3a3_21: 	dc.b $2
0000B778 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B77D 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B782 02                         Map_e3a3_2C: 	dc.b $2
0000B783 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B788 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B78D 02                         Map_e3a3_37: 	dc.b $2
0000B78E EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B793 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B798 02                         Map_e3a3_42: 	dc.b $2
0000B799 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B79E FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B7A3 02                         Map_e3a3_4D: 	dc.b $2
0000B7A4 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B7A9 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B7AE 02                         Map_e3a3_58: 	dc.b $2
0000B7AF EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B7B4 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B7B9 02                         Map_e3a3_63: 	dc.b $2
0000B7BA EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B7BF FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B7C4 02                         Map_e3a3_6E: 	dc.b $2
0000B7C5 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B7CA FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B7CF 02                         Map_e3a3_79: 	dc.b $2
0000B7D0 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B7D5 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B7DA 02                         Map_e3a3_84: 	dc.b $2
0000B7DB EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B7E0 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B7E6 00                         	even
0000B7E6 00                         	even
0000B7E6                            
0000B7E6                            ; ===========================================================================
0000B7E6                            ; ---------------------------------------------------------------------------
0000B7E6                            ; Object 2F - large moving platforms (MZ)
0000B7E6                            ; ---------------------------------------------------------------------------
0000B7E6                            
0000B7E6                            Obj2F:					; XREF: Obj_Index
0000B7E6 7000                       		moveq	#0,d0
0000B7E8 1028 0024                  		move.b	$24(a0),d0
0000B7EC 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B7F0 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B7F4                            ; ===========================================================================
0000B7F4 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B7F6 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B7F8                            
0000B7F8 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B7FA 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B7FC 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B7FE 0140                       		dc.b 1,	$40
0000B800 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B802 0220                       		dc.b 2,	$20
0000B804                            ; ===========================================================================
0000B804                            
0000B804                            Obj2F_Main:				; XREF: Obj2F_Index
0000B804 5428 0024                  		addq.b	#2,$24(a0)
0000B808 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B810 317C C000 0002             		move.w	#$C000,2(a0)
0000B816 117C 0004 0001             		move.b	#4,1(a0)
0000B81C 117C 0005 0018             		move.b	#5,$18(a0)
0000B822 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B828 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B82E 7000                       		moveq	#0,d0
0000B830 1028 0028                  		move.b	$28(a0),d0
0000B834 E448                       		lsr.w	#2,d0
0000B836 0240 001C                  		andi.w	#$1C,d0
0000B83A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B83E 3019                       		move.w	(a1)+,d0
0000B840 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B844 214A 0030                  		move.l	a2,$30(a0)
0000B848 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B84C 1151 0019                  		move.b	(a1),$19(a0)
0000B850 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B856 117C 0040 0016             		move.b	#$40,$16(a0)
0000B85C 08E8 0004 0001             		bset	#4,1(a0)
0000B862                            
0000B862                            Obj2F_Action:				; XREF: Obj2F_Index
0000B862 6100 0000                  		bsr.w	Obj2F_Types
0000B866 4A28 0025                  		tst.b	$25(a0)
0000B86A 6700                       		beq.s	Obj2F_Solid
0000B86C 7200                       		moveq	#0,d1
0000B86E 1228 0019                  		move.b	$19(a0),d1
0000B872 0641 000B                  		addi.w	#$B,d1
0000B876 6100 C552                  		bsr.w	ExitPlatform
0000B87A 0829 0003 0022             		btst	#3,$22(a1)
0000B880 6600 0000                  		bne.w	Obj2F_Slope
0000B884 4228 0025                  		clr.b	$25(a0)
0000B888 6000                       		bra.s	Obj2F_Display
0000B88A                            ; ===========================================================================
0000B88A                            
0000B88A                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B88A 7200                       		moveq	#0,d1
0000B88C 1228 0019                  		move.b	$19(a0),d1
0000B890 0641 000B                  		addi.w	#$B,d1
0000B894 2468 0030                  		movea.l	$30(a0),a2
0000B898 3428 0008                  		move.w	8(a0),d2
0000B89C 6100 D51C                  		bsr.w	SlopeObject2
0000B8A0 6000                       		bra.s	Obj2F_Display
0000B8A2                            ; ===========================================================================
0000B8A2                            
0000B8A2                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B8A2 7200                       		moveq	#0,d1
0000B8A4 1228 0019                  		move.b	$19(a0),d1
0000B8A8 0641 000B                  		addi.w	#$B,d1
0000B8AC 343C 0020                  		move.w	#$20,d2
0000B8B0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B8B6 6600                       		bne.s	loc_AF8E
0000B8B8 343C 0030                  		move.w	#$30,d2
0000B8BC                            
0000B8BC                            loc_AF8E:
0000B8BC 2468 0030                  		movea.l	$30(a0),a2
0000B8C0 6100 0000                  		bsr.w	SolidObject2F
0000B8C4                            
0000B8C4                            Obj2F_Display:				; XREF: Obj2F_Action
0000B8C4 6100 0000                  		bsr.w	DisplaySprite
0000B8C8 6000 0000                  		bra.w	Obj2F_ChkDel
0000B8CC                            
0000B8CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B8CC                            
0000B8CC                            
0000B8CC                            Obj2F_Types:				; XREF: Obj2F_Action
0000B8CC 7000                       		moveq	#0,d0
0000B8CE 1028 0028                  		move.b	$28(a0),d0
0000B8D2 0240 0007                  		andi.w	#7,d0
0000B8D6 D040                       		add.w	d0,d0
0000B8D8 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B8DC 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B8E0                            ; End of function Obj2F_Types
0000B8E0                            
0000B8E0                            ; ===========================================================================
0000B8E0 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B8E2 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B8E4 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B8E6 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B8E8 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B8EA 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B8EC                            ; ===========================================================================
0000B8EC                            
0000B8EC                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B8EC 4E75                       		rts			; type 00 platform doesn't move
0000B8EE                            ; ===========================================================================
0000B8EE                            
0000B8EE                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B8EE 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B8F2 323C 0020                  		move.w	#$20,d1
0000B8F6 6000                       		bra.s	Obj2F_Move
0000B8F8                            ; ===========================================================================
0000B8F8                            
0000B8F8                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B8F8 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B8FC 323C 0030                  		move.w	#$30,d1
0000B900 6000                       		bra.s	Obj2F_Move
0000B902                            ; ===========================================================================
0000B902                            
0000B902                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B902 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B906 323C 0040                  		move.w	#$40,d1
0000B90A 6000                       		bra.s	Obj2F_Move
0000B90C                            ; ===========================================================================
0000B90C                            
0000B90C                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B90C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B910 323C 0060                  		move.w	#$60,d1
0000B914                            
0000B914                            Obj2F_Move:
0000B914 0828 0003 0028             		btst	#3,$28(a0)
0000B91A 6700                       		beq.s	loc_AFF2
0000B91C 4440                       		neg.w	d0
0000B91E D041                       		add.w	d1,d0
0000B920                            
0000B920                            loc_AFF2:
0000B920 3228 002C                  		move.w	$2C(a0),d1
0000B924 9240                       		sub.w	d0,d1
0000B926 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B92A 4E75                       		rts	
0000B92C                            ; ===========================================================================
0000B92C                            
0000B92C                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B92C 1028 0034                  		move.b	$34(a0),d0
0000B930 4A28 0025                  		tst.b	$25(a0)
0000B934 6600                       		bne.s	loc_B010
0000B936 5500                       		subq.b	#2,d0
0000B938 6400                       		bcc.s	loc_B01C
0000B93A 7000                       		moveq	#0,d0
0000B93C 6000                       		bra.s	loc_B01C
0000B93E                            ; ===========================================================================
0000B93E                            
0000B93E                            loc_B010:
0000B93E 5800                       		addq.b	#4,d0
0000B940 0C00 0040                  		cmpi.b	#$40,d0
0000B944 6500                       		bcs.s	loc_B01C
0000B946 103C 0040                  		move.b	#$40,d0
0000B94A                            
0000B94A                            loc_B01C:
0000B94A 1140 0034                  		move.b	d0,$34(a0)
0000B94E 4EB9 0000 2D34             		jsr	(CalcSine).l
0000B954 E848                       		lsr.w	#4,d0
0000B956 3200                       		move.w	d0,d1
0000B958 D068 002C                  		add.w	$2C(a0),d0
0000B95C 3140 000C                  		move.w	d0,$C(a0)
0000B960 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B966 6600                       		bne.s	loc_B07A
0000B968 4A28 0035                  		tst.b	$35(a0)
0000B96C 6600                       		bne.s	loc_B07A
0000B96E 117C 0001 0035             		move.b	#1,$35(a0)
0000B974 6100 0000                  		bsr.w	SingleObjLoad2
0000B978 6600                       		bne.s	loc_B07A
0000B97A 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B97E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B984 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B98A 5069 002C                  		addq.w	#8,$2C(a1)
0000B98E 5769 002C                  		subq.w	#3,$2C(a1)
0000B992 0469 0040 0008             		subi.w	#$40,8(a1)
0000B998 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B99E 2348 0038                  		move.l	a0,$38(a1)
0000B9A2 2448                       		movea.l	a0,a2
0000B9A4 6100                       		bsr.s	sub_B09C
0000B9A6                            
0000B9A6                            loc_B07A:
0000B9A6 7400                       		moveq	#0,d2
0000B9A8 45E8 0036                  		lea	$36(a0),a2
0000B9AC 141A                       		move.b	(a2)+,d2
0000B9AE 5302                       		subq.b	#1,d2
0000B9B0 6500                       		bcs.s	locret_B09A
0000B9B2                            
0000B9B2                            loc_B086:
0000B9B2 7000                       		moveq	#0,d0
0000B9B4 101A                       		move.b	(a2)+,d0
0000B9B6 ED48                       		lsl.w	#6,d0
0000B9B8 0640 D000                  		addi.w	#-$3000,d0
0000B9BC 3240                       		movea.w	d0,a1
0000B9BE 3341 003C                  		move.w	d1,$3C(a1)
0000B9C2 51CA FFEE                  		dbf	d2,loc_B086
0000B9C6                            
0000B9C6                            locret_B09A:
0000B9C6 4E75                       		rts	
0000B9C8                            
0000B9C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9C8                            
0000B9C8                            
0000B9C8                            sub_B09C:
0000B9C8 45EA 0036                  		lea	$36(a2),a2
0000B9CC 7000                       		moveq	#0,d0
0000B9CE 1012                       		move.b	(a2),d0
0000B9D0 5212                       		addq.b	#1,(a2)
0000B9D2 45F2 0001                  		lea	1(a2,d0.w),a2
0000B9D6 3009                       		move.w	a1,d0
0000B9D8 0440 D000                  		subi.w	#-$3000,d0
0000B9DC EC48                       		lsr.w	#6,d0
0000B9DE 0240 007F                  		andi.w	#$7F,d0
0000B9E2 1480                       		move.b	d0,(a2)
0000B9E4 4E75                       		rts	
0000B9E6                            ; End of function sub_B09C
0000B9E6                            
0000B9E6                            ; ===========================================================================
0000B9E6                            
0000B9E6                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B9E6 4A28 0035                  		tst.b	$35(a0)
0000B9EA 6700                       		beq.s	loc_B0C6
0000B9EC 4A28 0001                  		tst.b	1(a0)
0000B9F0 6A00                       		bpl.s	Obj2F_DelFlames
0000B9F2                            
0000B9F2                            loc_B0C6:
0000B9F2 3028 002A                  		move.w	$2A(a0),d0
0000B9F6 0240 FF80                  		andi.w	#$FF80,d0
0000B9FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000B9FE 0441 0080                  		subi.w	#$80,d1
0000BA02 0241 FF80                  		andi.w	#$FF80,d1
0000BA06 9041                       		sub.w	d1,d0
0000BA08 0C40 0280                  		cmpi.w	#$280,d0
0000BA0C 6200 0000                  		bhi.w	DeleteObject
0000BA10 4E75                       		rts	
0000BA12                            ; ===========================================================================
0000BA12                            
0000BA12                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000BA12 7400                       		moveq	#0,d2
0000BA14                            
0000BA14                            loc_B0E8:
0000BA14 45E8 0036                  		lea	$36(a0),a2
0000BA18 1412                       		move.b	(a2),d2
0000BA1A 421A                       		clr.b	(a2)+
0000BA1C 5302                       		subq.b	#1,d2
0000BA1E 6500                       		bcs.s	locret_B116
0000BA20                            
0000BA20                            loc_B0F4:
0000BA20 7000                       		moveq	#0,d0
0000BA22 1012                       		move.b	(a2),d0
0000BA24 421A                       		clr.b	(a2)+
0000BA26 ED48                       		lsl.w	#6,d0
0000BA28 0640 D000                  		addi.w	#-$3000,d0
0000BA2C 3240                       		movea.w	d0,a1
0000BA2E 6100 0000                  		bsr.w	DeleteObject2
0000BA32 51CA FFEC                  		dbf	d2,loc_B0F4
0000BA36 117C 0000 0035             		move.b	#0,$35(a0)
0000BA3C 117C 0000 0034             		move.b	#0,$34(a0)
0000BA42                            
0000BA42                            locret_B116:
0000BA42 4E75                       		rts	
0000BA44                            ; ===========================================================================
0000BA44                            ; ---------------------------------------------------------------------------
0000BA44                            ; Collision data for large moving platforms (MZ)
0000BA44                            ; ---------------------------------------------------------------------------
0000BA44                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000BA90                            		even
0000BA90                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000BABC                            		even
0000BABC                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000BB08                            		even
0000BB08                            ; ===========================================================================
0000BB08                            ; ---------------------------------------------------------------------------
0000BB08                            ; Object 35 - fireball that sits on the	floor (MZ)
0000BB08                            ; (appears when	you walk on sinking platforms)
0000BB08                            ; ---------------------------------------------------------------------------
0000BB08                            
0000BB08                            Obj35:					; XREF: Obj_Index
0000BB08 7000                       		moveq	#0,d0
0000BB0A 1028 0024                  		move.b	$24(a0),d0
0000BB0E 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000BB12 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000BB16                            ; ===========================================================================
0000BB16 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000BB18 0000                       		dc.w loc_B238-Obj35_Index
0000BB1A 0000                       		dc.w Obj35_Move-Obj35_Index
0000BB1C                            ; ===========================================================================
0000BB1C                            
0000BB1C                            Obj35_Main:				; XREF: Obj35_Index
0000BB1C 5428 0024                  		addq.b	#2,$24(a0)
0000BB20 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000BB28 317C 0345 0002             		move.w	#$345,2(a0)
0000BB2E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BB34 117C 0004 0001             		move.b	#4,1(a0)
0000BB3A 117C 0001 0018             		move.b	#1,$18(a0)
0000BB40 117C 008B 0020             		move.b	#$8B,$20(a0)
0000BB46 117C 0008 0019             		move.b	#8,$19(a0)
0000BB4C 303C 00C8                  		move.w	#$C8,d0
0000BB50 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000BB56 4A28 0028                  		tst.b	$28(a0)
0000BB5A 6700                       		beq.s	loc_B238
0000BB5C 5428 0024                  		addq.b	#2,$24(a0)
0000BB60 6000 0000                  		bra.w	Obj35_Move
0000BB64                            ; ===========================================================================
0000BB64                            
0000BB64                            loc_B238:				; XREF: Obj35_Index
0000BB64 2268 0030                  		movea.l	$30(a0),a1
0000BB68 3228 0008                  		move.w	8(a0),d1
0000BB6C 9268 002A                  		sub.w	$2A(a0),d1
0000BB70 0641 000C                  		addi.w	#$C,d1
0000BB74 3001                       		move.w	d1,d0
0000BB76 E248                       		lsr.w	#1,d0
0000BB78 1031 0000                  		move.b	(a1,d0.w),d0
0000BB7C 4440                       		neg.w	d0
0000BB7E D068 002C                  		add.w	$2C(a0),d0
0000BB82 3400                       		move.w	d0,d2
0000BB84 D068 003C                  		add.w	$3C(a0),d0
0000BB88 3140 000C                  		move.w	d0,$C(a0)
0000BB8C 0C41 0084                  		cmpi.w	#$84,d1
0000BB90 6400                       		bcc.s	loc_B2B0
0000BB92 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000BB9A 0C41 0080                  		cmpi.w	#$80,d1
0000BB9E 6400                       		bcc.s	loc_B2B0
0000BBA0 2028 0008                  		move.l	8(a0),d0
0000BBA4 0680 0008 0000             		addi.l	#$80000,d0
0000BBAA 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000BBB0 6600                       		bne.s	loc_B2B0
0000BBB2 6100 0000                  		bsr.w	SingleObjLoad2
0000BBB6 6600                       		bne.s	loc_B2B0
0000BBB8 12BC 0035                  		move.b	#$35,0(a1)
0000BBBC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBC2 3342 002C                  		move.w	d2,$2C(a1)
0000BBC6 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BBCC 137C 0001 0028             		move.b	#1,$28(a1)
0000BBD2 2468 0038                  		movea.l	$38(a0),a2
0000BBD6 6100 FDF0                  		bsr.w	sub_B09C
0000BBDA                            
0000BBDA                            loc_B2B0:
0000BBDA 6000                       		bra.s	Obj35_Animate
0000BBDC                            ; ===========================================================================
0000BBDC                            
0000BBDC                            Obj35_Move:				; XREF: Obj35_Index
0000BBDC 3028 002C                  		move.w	$2C(a0),d0
0000BBE0 D068 003C                  		add.w	$3C(a0),d0
0000BBE4 3140 000C                  		move.w	d0,$C(a0)
0000BBE8                            
0000BBE8                            Obj35_Animate:				; XREF: loc_B238
0000BBE8 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BBEE 6100 F4AA                  		bsr.w	AnimateSprite
0000BBF2 6000 0000                  		bra.w	DisplaySprite
0000BBF6                            ; ===========================================================================
0000BBF6                            Ani_obj35:
0000BBF6                            	include "_anim\obj35.asm"
0000BBF6                            ; ---------------------------------------------------------------------------
0000BBF6                            ; Animation script - fireball that sits on the	floor (MZ)
0000BBF6                            ; ---------------------------------------------------------------------------
0000BBF6 0000                       		dc.w byte_B2CE-Ani_obj35
0000BBF8 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BBFE                            		even
0000BBFE                            		even
0000BBFE                            
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE                            ; Sprite mappings - large moving platforms (MZ)
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE                            Map_obj2F:
0000BBFE                            	include "_maps\obj2F.asm"
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE                            ; Sprite mappings - large moving platforms (MZ)
0000BBFE                            ; ---------------------------------------------------------------------------
0000BBFE 0000                       		dc.w byte_B2DA-Map_obj2F
0000BC00 0000                       		dc.w byte_B31C-Map_obj2F
0000BC02 0000                       		dc.w byte_B34F-Map_obj2F
0000BC04 0D                         byte_B2DA:	dc.b $D
0000BC05 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BC0A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BC0F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC14 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BC19 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BC1E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC23 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BC28 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BC2D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BC32 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC37 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BC3C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BC41 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BC46 0A                         byte_B31C:	dc.b $A
0000BC47 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BC4C F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BC51 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BC56 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BC5B E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BC60 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC65 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BC6A E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BC6F C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BC74 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BC79 06                         byte_B34F:	dc.b 6
0000BC7A D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BC7F F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BC84 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BC89 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BC8E F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BC93 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BC98                            		even
0000BC98                            		even
0000BC98                            
0000BC98                            ; ---------------------------------------------------------------------------
0000BC98                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BC98                            ; ---------------------------------------------------------------------------
0000BC98                            Map_obj14:
0000BC98                            	include "_maps\obj14.asm"
0000BC98                            ; --------------------------------------------------------------------------------
0000BC98                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BC98                            ; --------------------------------------------------------------------------------
0000BC98                            
0000BC98                            SME_C6wT7:	
0000BC98 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BC9C 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BCA0 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BCA4 01                         SME_C6wT7_C:	dc.b 1	
0000BCA5 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BCAA 01                         SME_C6wT7_12:	dc.b 1	
0000BCAB E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BCB0 02                         SME_C6wT7_18:	dc.b 2	
0000BCB1 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BCB6 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BCBB 01                         SME_C6wT7_23:	dc.b 1	
0000BCBC F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BCC1 01                         SME_C6wT7_29:	dc.b 1	
0000BCC2 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BCC7 01                         SME_C6wT7_2F:	dc.b 1	
0000BCC8 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BCCE 00                         		even
0000BCCE 00                         		even
0000BCCE                            
0000BCCE                            ; ===========================================================================
0000BCCE                            ; ---------------------------------------------------------------------------
0000BCCE                            ; Object 30 - large green glassy blocks	(MZ)
0000BCCE                            ; ---------------------------------------------------------------------------
0000BCCE                            
0000BCCE                            Obj30:					; XREF: Obj_Index
0000BCCE 7000                       		moveq	#0,d0
0000BCD0 1028 0024                  		move.b	$24(a0),d0
0000BCD4 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BCD8 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BCDC 3028 0008                  		move.w	8(a0),d0
0000BCE0 0240 FF80                  		andi.w	#$FF80,d0
0000BCE4 3238 F700                  		move.w	($FFFFF700).w,d1
0000BCE8 0441 0080                  		subi.w	#$80,d1
0000BCEC 0241 FF80                  		andi.w	#$FF80,d1
0000BCF0 9041                       		sub.w	d1,d0
0000BCF2 0C40 0280                  		cmpi.w	#$280,d0
0000BCF6 6200 0000                  		bhi.w	Obj30_Delete
0000BCFA 6000 0000                  		bra.w	DisplaySprite
0000BCFE                            ; ===========================================================================
0000BCFE                            
0000BCFE                            Obj30_Delete:
0000BCFE 6000 0000                  		bra.w	DeleteObject
0000BD02                            ; ===========================================================================
0000BD02 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BD04 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BD06 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BD08 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BD0A 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BD0C                            
0000BD0C 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BD0F 0400 01                    		dc.b 4,	0, 1
0000BD12 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BD15 0800 01                    		dc.b 8,	0, 1
0000BD18                            ; ===========================================================================
0000BD18                            
0000BD18                            Obj30_Main:				; XREF: Obj30_Index
0000BD18 45F9 0000 BD0C             		lea	(Obj30_Vars1).l,a2
0000BD1E 7201                       		moveq	#1,d1
0000BD20 117C 0048 0016             		move.b	#$48,$16(a0)
0000BD26 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BD2C 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BD2E 45F9 0000 BD12             		lea	(Obj30_Vars2).l,a2
0000BD34 7201                       		moveq	#1,d1
0000BD36 117C 0038 0016             		move.b	#$38,$16(a0)
0000BD3C                            
0000BD3C                            loc_B40C:
0000BD3C 2248                       		movea.l	a0,a1
0000BD3E 6000                       		bra.s	Obj30_Load	; load main object
0000BD40                            ; ===========================================================================
0000BD40                            
0000BD40                            Obj30_Loop:
0000BD40 6100 0000                  		bsr.w	SingleObjLoad2
0000BD44 6600                       		bne.s	loc_B480
0000BD46                            
0000BD46                            Obj30_Load:				; XREF: Obj30_Main
0000BD46 135A 0024                  		move.b	(a2)+,$24(a1)
0000BD4A 12BC 0030                  		move.b	#$30,0(a1)
0000BD4E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BD54 101A                       		move.b	(a2)+,d0
0000BD56 4880                       		ext.w	d0
0000BD58 D068 000C                  		add.w	$C(a0),d0
0000BD5C 3340 000C                  		move.w	d0,$C(a1)
0000BD60 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BD68 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BD6E 137C 0004 0001             		move.b	#4,1(a1)
0000BD74 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BD7A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BD80 137C 0020 0019             		move.b	#$20,$19(a1)
0000BD86 137C 0004 0018             		move.b	#4,$18(a1)
0000BD8C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BD90 2348 003C                  		move.l	a0,$3C(a1)
0000BD94 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BD98                            
0000BD98 137C 0010 0019             		move.b	#$10,$19(a1)
0000BD9E 137C 0003 0018             		move.b	#3,$18(a1)
0000BDA4 5029 0028                  		addq.b	#8,$28(a1)
0000BDA8 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BDAE                            
0000BDAE                            loc_B480:
0000BDAE 317C 0090 0032             		move.w	#$90,$32(a0)
0000BDB4 08E8 0004 0001             		bset	#4,1(a0)
0000BDBA                            
0000BDBA                            Obj30_Block012:				; XREF: Obj30_Index
0000BDBA 6100 0000                  		bsr.w	Obj30_Types
0000BDBE 323C 002B                  		move.w	#$2B,d1
0000BDC2 343C 0048                  		move.w	#$48,d2
0000BDC6 363C 0049                  		move.w	#$49,d3
0000BDCA 3828 0008                  		move.w	8(a0),d4
0000BDCE 6000 0000                  		bra.w	SolidObject
0000BDD2                            ; ===========================================================================
0000BDD2                            
0000BDD2                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BDD2 2268 003C                  		movea.l	$3C(a0),a1
0000BDD6 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BDDC 6000 0000                  		bra.w	Obj30_Types
0000BDE0                            ; ===========================================================================
0000BDE0                            
0000BDE0                            Obj30_Block34:				; XREF: Obj30_Index
0000BDE0 6100 0000                  		bsr.w	Obj30_Types
0000BDE4 323C 002B                  		move.w	#$2B,d1
0000BDE8 343C 0038                  		move.w	#$38,d2
0000BDEC 363C 0039                  		move.w	#$39,d3
0000BDF0 3828 0008                  		move.w	8(a0),d4
0000BDF4 6000 0000                  		bra.w	SolidObject
0000BDF8                            ; ===========================================================================
0000BDF8                            
0000BDF8                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BDF8 2268 003C                  		movea.l	$3C(a0),a1
0000BDFC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BE02 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BE08 6000 0002                  		bra.w	*+4
0000BE0C                            
0000BE0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE0C                            
0000BE0C                            
0000BE0C                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BE0C 7000                       		moveq	#0,d0
0000BE0E 1028 0028                  		move.b	$28(a0),d0
0000BE12 0240 0007                  		andi.w	#7,d0
0000BE16 D040                       		add.w	d0,d0
0000BE18 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BE1C 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BE20                            ; End of function Obj30_Types
0000BE20                            
0000BE20                            ; ===========================================================================
0000BE20 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BE22 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BE24 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BE26 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BE28 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BE2A                            ; ===========================================================================
0000BE2A                            
0000BE2A                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BE2A 4E75                       		rts	
0000BE2C                            ; ===========================================================================
0000BE2C                            
0000BE2C                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BE2C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE30 323C 0040                  		move.w	#$40,d1
0000BE34 6000                       		bra.s	loc_B514
0000BE36                            ; ===========================================================================
0000BE36                            
0000BE36                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BE36 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE3A 323C 0040                  		move.w	#$40,d1
0000BE3E 4440                       		neg.w	d0
0000BE40 D041                       		add.w	d1,d0
0000BE42                            
0000BE42                            loc_B514:				; XREF: Obj30_Type01
0000BE42 0828 0003 0028             		btst	#3,$28(a0)
0000BE48 6700                       		beq.s	loc_B526
0000BE4A 4440                       		neg.w	d0
0000BE4C D041                       		add.w	d1,d0
0000BE4E E208                       		lsr.b	#1,d0
0000BE50 0640 0020                  		addi.w	#$20,d0
0000BE54                            
0000BE54                            loc_B526:
0000BE54 6000 0000                  		bra.w	loc_B5EE
0000BE58                            ; ===========================================================================
0000BE58                            
0000BE58                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BE58 0828 0003 0028             		btst	#3,$28(a0)
0000BE5E 6700                       		beq.s	loc_B53E
0000BE60 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BE64 0440 0010                  		subi.w	#$10,d0
0000BE68 6000 0000                  		bra.w	loc_B5EE
0000BE6C                            ; ===========================================================================
0000BE6C                            
0000BE6C                            loc_B53E:
0000BE6C 0828 0003 0022             		btst	#3,$22(a0)
0000BE72 6600                       		bne.s	loc_B54E
0000BE74 08A8 0000 0034             		bclr	#0,$34(a0)
0000BE7A 6000                       		bra.s	loc_B582
0000BE7C                            ; ===========================================================================
0000BE7C                            
0000BE7C                            loc_B54E:
0000BE7C 4A28 0034                  		tst.b	$34(a0)
0000BE80 6600                       		bne.s	loc_B582
0000BE82 117C 0001 0034             		move.b	#1,$34(a0)
0000BE88 08E8 0000 0035             		bset	#0,$35(a0)
0000BE8E 6700                       		beq.s	loc_B582
0000BE90 08E8 0007 0034             		bset	#7,$34(a0)
0000BE96 317C 0010 0036             		move.w	#$10,$36(a0)
0000BE9C 117C 000A 0038             		move.b	#$A,$38(a0)
0000BEA2 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BEA8 6600                       		bne.s	loc_B582
0000BEAA 317C 0040 0036             		move.w	#$40,$36(a0)
0000BEB0                            
0000BEB0                            loc_B582:
0000BEB0 4A28 0034                  		tst.b	$34(a0)
0000BEB4 6A00                       		bpl.s	loc_B5AA
0000BEB6 4A28 0038                  		tst.b	$38(a0)
0000BEBA 6700                       		beq.s	loc_B594
0000BEBC 5328 0038                  		subq.b	#1,$38(a0)
0000BEC0 6600                       		bne.s	loc_B5AA
0000BEC2                            
0000BEC2                            loc_B594:
0000BEC2 4A68 0032                  		tst.w	$32(a0)
0000BEC6 6700                       		beq.s	loc_B5A4
0000BEC8 5368 0032                  		subq.w	#1,$32(a0)
0000BECC 5368 0036                  		subq.w	#1,$36(a0)
0000BED0 6600                       		bne.s	loc_B5AA
0000BED2                            
0000BED2                            loc_B5A4:
0000BED2 08A8 0007 0034             		bclr	#7,$34(a0)
0000BED8                            
0000BED8                            loc_B5AA:
0000BED8 3028 0032                  		move.w	$32(a0),d0
0000BEDC 6000                       		bra.s	loc_B5EE
0000BEDE                            ; ===========================================================================
0000BEDE                            
0000BEDE                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BEDE 0828 0003 0028             		btst	#3,$28(a0)
0000BEE4 6700                       		beq.s	Obj30_ChkSwitch
0000BEE6 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BEEA 0440 0010                  		subi.w	#$10,d0
0000BEEE 6000                       		bra.s	loc_B5EE
0000BEF0                            ; ===========================================================================
0000BEF0                            
0000BEF0                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BEF0 4A28 0034                  		tst.b	$34(a0)
0000BEF4 6600                       		bne.s	loc_B5E0
0000BEF6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BEFA 7000                       		moveq	#0,d0
0000BEFC 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BF00 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BF02 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BF06 6700                       		beq.s	loc_B5EA	; if not, branch
0000BF08 117C 0001 0034             		move.b	#1,$34(a0)
0000BF0E                            
0000BF0E                            loc_B5E0:
0000BF0E 4A68 0032                  		tst.w	$32(a0)
0000BF12 6700                       		beq.s	loc_B5EA
0000BF14 5568 0032                  		subq.w	#2,$32(a0)
0000BF18                            
0000BF18                            loc_B5EA:
0000BF18 3028 0032                  		move.w	$32(a0),d0
0000BF1C                            
0000BF1C                            loc_B5EE:
0000BF1C 3228 0030                  		move.w	$30(a0),d1
0000BF20 9240                       		sub.w	d0,d1
0000BF22 3141 000C                  		move.w	d1,$C(a0)
0000BF26 4E75                       		rts	
0000BF28                            ; ===========================================================================
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            Map_obj30:
0000BF28                            	include "_maps\obj30.asm"
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BF28                            ; ---------------------------------------------------------------------------
0000BF28 0000                       		dc.w byte_B600-Map_obj30
0000BF2A 0000                       		dc.w byte_B63D-Map_obj30
0000BF2C 0000                       		dc.w byte_B648-Map_obj30
0000BF2E 0C                         byte_B600:	dc.b $C
0000BF2F B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BF34 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BF39 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BF3E C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BF43 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BF48 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BF4D 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BF52 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BF57 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BF5C 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BF61 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BF66 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BF6B 02                         byte_B63D:	dc.b 2
0000BF6C 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BF71 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BF76 0A                         byte_B648:	dc.b $A
0000BF77 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BF7C C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BF81 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BF86 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BF8B F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BF90 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BF95 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BF9A 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BF9F 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BFA4 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BFAA 00                         		even
0000BFAA 00                         		even
0000BFAA                            
0000BFAA                            ; ===========================================================================
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BFAA                            ; ---------------------------------------------------------------------------
0000BFAA                            
0000BFAA                            Obj31:					; XREF: Obj_Index
0000BFAA 7000                       		moveq	#0,d0
0000BFAC 1028 0024                  		move.b	$24(a0),d0
0000BFB0 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BFB4 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BFB8                            ; ===========================================================================
0000BFB8 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BFBA 0000                       		dc.w loc_B798-Obj31_Index
0000BFBC 0000                       		dc.w loc_B7FE-Obj31_Index
0000BFBE 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BFC0 0000                       		dc.w loc_B7E2-Obj31_Index
0000BFC2                            
0000BFC2 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BFC4 0100                       		dc.b 1,	0
0000BFC6                            
0000BFC6 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BFC9 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BFCC 08CC 03                    		dc.b 8,	$CC, 3
0000BFCF 06F0 02                    		dc.b 6,	$F0, 2
0000BFD2                            
0000BFD2 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BFD6 5000 7800                  		dc.w $5000, $7800
0000BFDA 3800 5800                  		dc.w $3800, $5800
0000BFDE B800                       		dc.w $B800
0000BFE0                            ; ===========================================================================
0000BFE0                            
0000BFE0                            Obj31_Main:				; XREF: Obj31_Index
0000BFE0 7000                       		moveq	#0,d0
0000BFE2 1028 0028                  		move.b	$28(a0),d0
0000BFE6 6A00                       		bpl.s	loc_B6CE
0000BFE8 0240 007F                  		andi.w	#$7F,d0
0000BFEC D040                       		add.w	d0,d0
0000BFEE 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BFF2 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BFF6 101A                       		move.b	(a2)+,d0
0000BFF8 1140 0028                  		move.b	d0,$28(a0)
0000BFFC                            
0000BFFC                            loc_B6CE:
0000BFFC 0200 000F                  		andi.b	#$F,d0
0000C000 D040                       		add.w	d0,d0
0000C002 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C006 4A40                       		tst.w	d0
0000C008 6600                       		bne.s	loc_B6E0
0000C00A 3142 0032                  		move.w	d2,$32(a0)
0000C00E                            
0000C00E                            loc_B6E0:
0000C00E 45F9 0000 BFC6             		lea	(Obj31_Var).l,a2
0000C014 2248                       		movea.l	a0,a1
0000C016 7203                       		moveq	#3,d1
0000C018 6000                       		bra.s	Obj31_MakeStomper
0000C01A                            ; ===========================================================================
0000C01A                            
0000C01A                            Obj31_Loop:
0000C01A 6100 0000                  		bsr.w	SingleObjLoad2
0000C01E 6600 0000                  		bne.w	Obj31_SetSize
0000C022                            
0000C022                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C022 135A 0024                  		move.b	(a2)+,$24(a1)
0000C026 12BC 0031                  		move.b	#$31,0(a1)
0000C02A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C030 101A                       		move.b	(a2)+,d0
0000C032 4880                       		ext.w	d0
0000C034 D068 000C                  		add.w	$C(a0),d0
0000C038 3340 000C                  		move.w	d0,$C(a1)
0000C03C 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C044 337C 0300 0002             		move.w	#$300,2(a1)
0000C04A 137C 0004 0001             		move.b	#4,1(a1)
0000C050 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C056 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C05C 137C 0010 0019             		move.b	#$10,$19(a1)
0000C062 3342 0034                  		move.w	d2,$34(a1)
0000C066 137C 0004 0018             		move.b	#4,$18(a1)
0000C06C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C070 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C076 6600                       		bne.s	loc_B76A
0000C078 5341                       		subq.w	#1,d1
0000C07A 1028 0028                  		move.b	$28(a0),d0
0000C07E 0240 00F0                  		andi.w	#$F0,d0
0000C082 0C40 0020                  		cmpi.w	#$20,d0
0000C086 679A                       		beq.s	Obj31_MakeStomper
0000C088 137C 0038 0019             		move.b	#$38,$19(a1)
0000C08E 137C 0090 0020             		move.b	#$90,$20(a1)
0000C094 5241                       		addq.w	#1,d1
0000C096                            
0000C096                            loc_B76A:
0000C096 2348 003C                  		move.l	a0,$3C(a1)
0000C09A 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C09E                            
0000C09E 137C 0003 0018             		move.b	#3,$18(a1)
0000C0A4                            
0000C0A4                            Obj31_SetSize:
0000C0A4 7000                       		moveq	#0,d0
0000C0A6 1028 0028                  		move.b	$28(a0),d0
0000C0AA E648                       		lsr.w	#3,d0
0000C0AC 0200 000E                  		andi.b	#$E,d0
0000C0B0 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C0B4 115A 0019                  		move.b	(a2)+,$19(a0)
0000C0B8 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C0BC 6000                       		bra.s	loc_B798
0000C0BE                            ; ===========================================================================
0000C0BE 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C0C0 3009                       		dc.b $30, 9
0000C0C2 100A                       		dc.b $10, $A
0000C0C4                            ; ===========================================================================
0000C0C4                            
0000C0C4                            loc_B798:				; XREF: Obj31_Index
0000C0C4 6100 0000                  		bsr.w	Obj31_Types
0000C0C8 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C0CE 7200                       		moveq	#0,d1
0000C0D0 1228 0019                  		move.b	$19(a0),d1
0000C0D4 0641 000B                  		addi.w	#$B,d1
0000C0D8 343C 000C                  		move.w	#$C,d2
0000C0DC 363C 000D                  		move.w	#$D,d3
0000C0E0 3828 0008                  		move.w	8(a0),d4
0000C0E4 6100 0000                  		bsr.w	SolidObject
0000C0E8 0828 0003 0022             		btst	#3,$22(a0)
0000C0EE 6700                       		beq.s	Obj31_Display
0000C0F0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C0F6 6400                       		bcc.s	Obj31_Display
0000C0F8 2448                       		movea.l	a0,a2
0000C0FA 41F8 D000                  		lea	($FFFFD000).w,a0
0000C0FE 4EB9 0000 0000             		jsr	KillSonic
0000C104 204A                       		movea.l	a2,a0
0000C106                            
0000C106                            Obj31_Display:
0000C106 6100 0000                  		bsr.w	DisplaySprite
0000C10A 6000 0000                  		bra.w	Obj31_ChkDel
0000C10E                            ; ===========================================================================
0000C10E                            
0000C10E                            loc_B7E2:				; XREF: Obj31_Index
0000C10E 117C 0080 0016             		move.b	#$80,$16(a0)
0000C114 08E8 0004 0001             		bset	#4,1(a0)
0000C11A 2268 003C                  		movea.l	$3C(a0),a1
0000C11E 1029 0032                  		move.b	$32(a1),d0
0000C122 EA08                       		lsr.b	#5,d0
0000C124 5600                       		addq.b	#3,d0
0000C126 1140 001A                  		move.b	d0,$1A(a0)
0000C12A                            
0000C12A                            loc_B7FE:				; XREF: Obj31_Index
0000C12A 2268 003C                  		movea.l	$3C(a0),a1
0000C12E 7000                       		moveq	#0,d0
0000C130 1029 0032                  		move.b	$32(a1),d0
0000C134 D068 0030                  		add.w	$30(a0),d0
0000C138 3140 000C                  		move.w	d0,$C(a0)
0000C13C                            
0000C13C                            Obj31_Display2:				; XREF: Obj31_Index
0000C13C 6100 0000                  		bsr.w	DisplaySprite
0000C140                            
0000C140                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C140 3028 0008                  		move.w	8(a0),d0
0000C144 0240 FF80                  		andi.w	#$FF80,d0
0000C148 3238 F700                  		move.w	($FFFFF700).w,d1
0000C14C 0441 0080                  		subi.w	#$80,d1
0000C150 0241 FF80                  		andi.w	#$FF80,d1
0000C154 9041                       		sub.w	d1,d0
0000C156 0C40 0280                  		cmpi.w	#$280,d0
0000C15A 6200 0000                  		bhi.w	DeleteObject
0000C15E 4E75                       		rts	
0000C160                            ; ===========================================================================
0000C160                            
0000C160                            Obj31_Types:				; XREF: loc_B798
0000C160 1028 0028                  		move.b	$28(a0),d0
0000C164 0240 000F                  		andi.w	#$F,d0
0000C168 D040                       		add.w	d0,d0
0000C16A 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C16E 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C172                            ; ===========================================================================
0000C172 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C174 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C176 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C178 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C17A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C17C 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C17E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C180                            ; ===========================================================================
0000C180                            
0000C180                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C180 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C184 7000                       		moveq	#0,d0
0000C186 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C18A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C18E 6700                       		beq.s	loc_B8A8	; if not, branch
0000C190 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C194 6A00                       		bpl.s	loc_B872
0000C196 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C19C 6700                       		beq.s	loc_B8A0
0000C19E                            
0000C19E                            loc_B872:
0000C19E 4A68 0032                  		tst.w	$32(a0)
0000C1A2 6700                       		beq.s	loc_B8A0
0000C1A4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C1A8 0200 000F                  		andi.b	#$F,d0
0000C1AC 6600                       		bne.s	loc_B892
0000C1AE 4A28 0001                  		tst.b	1(a0)
0000C1B2 6A00                       		bpl.s	loc_B892
0000C1B4 303C 00C7                  		move.w	#$C7,d0
0000C1B8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C1BE                            
0000C1BE                            loc_B892:
0000C1BE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C1C4 6400                       		bcc.s	Obj31_Restart
0000C1C6 317C 0000 0032             		move.w	#0,$32(a0)
0000C1CC                            
0000C1CC                            loc_B8A0:
0000C1CC 317C 0000 0012             		move.w	#0,$12(a0)
0000C1D2 6000                       		bra.s	Obj31_Restart
0000C1D4                            ; ===========================================================================
0000C1D4                            
0000C1D4                            loc_B8A8:				; XREF: Obj31_Type00
0000C1D4 3228 0034                  		move.w	$34(a0),d1
0000C1D8 B268 0032                  		cmp.w	$32(a0),d1
0000C1DC 6700                       		beq.s	Obj31_Restart
0000C1DE 3028 0012                  		move.w	$12(a0),d0
0000C1E2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C1E8 D168 0032                  		add.w	d0,$32(a0)
0000C1EC B268 0032                  		cmp.w	$32(a0),d1
0000C1F0 6200                       		bhi.s	Obj31_Restart
0000C1F2 3141 0032                  		move.w	d1,$32(a0)
0000C1F6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C1FC 4A28 0001                  		tst.b	1(a0)
0000C200 6A00                       		bpl.s	Obj31_Restart
0000C202 303C 00BD                  		move.w	#$BD,d0
0000C206 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C20C                            
0000C20C                            Obj31_Restart:
0000C20C 7000                       		moveq	#0,d0
0000C20E 1028 0032                  		move.b	$32(a0),d0
0000C212 D068 0030                  		add.w	$30(a0),d0
0000C216 3140 000C                  		move.w	d0,$C(a0)
0000C21A 4E75                       		rts	
0000C21C                            ; ===========================================================================
0000C21C                            
0000C21C                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C21C 4A68 0036                  		tst.w	$36(a0)
0000C220 6700                       		beq.s	loc_B938
0000C222 4A68 0038                  		tst.w	$38(a0)
0000C226 6700                       		beq.s	loc_B902
0000C228 5368 0038                  		subq.w	#1,$38(a0)
0000C22C 6000                       		bra.s	loc_B97C
0000C22E                            ; ===========================================================================
0000C22E                            
0000C22E                            loc_B902:
0000C22E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C232 0200 000F                  		andi.b	#$F,d0
0000C236 6600                       		bne.s	loc_B91C
0000C238 4A28 0001                  		tst.b	1(a0)
0000C23C 6A00                       		bpl.s	loc_B91C
0000C23E 303C 00C7                  		move.w	#$C7,d0
0000C242 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C248                            
0000C248                            loc_B91C:
0000C248 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C24E 6400                       		bcc.s	loc_B97C
0000C250 317C 0000 0032             		move.w	#0,$32(a0)
0000C256 317C 0000 0012             		move.w	#0,$12(a0)
0000C25C 317C 0000 0036             		move.w	#0,$36(a0)
0000C262 6000                       		bra.s	loc_B97C
0000C264                            ; ===========================================================================
0000C264                            
0000C264                            loc_B938:				; XREF: Obj31_Type01
0000C264 3228 0034                  		move.w	$34(a0),d1
0000C268 B268 0032                  		cmp.w	$32(a0),d1
0000C26C 6700                       		beq.s	loc_B97C
0000C26E 3028 0012                  		move.w	$12(a0),d0
0000C272 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C278 D168 0032                  		add.w	d0,$32(a0)
0000C27C B268 0032                  		cmp.w	$32(a0),d1
0000C280 6200                       		bhi.s	loc_B97C
0000C282 3141 0032                  		move.w	d1,$32(a0)
0000C286 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C28C 317C 0001 0036             		move.w	#1,$36(a0)
0000C292 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C298 4A28 0001                  		tst.b	1(a0)
0000C29C 6A00                       		bpl.s	loc_B97C
0000C29E 303C 00BD                  		move.w	#$BD,d0
0000C2A2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C2A8                            
0000C2A8                            loc_B97C:
0000C2A8 6000 FF62                  		bra.w	Obj31_Restart
0000C2AC                            ; ===========================================================================
0000C2AC                            
0000C2AC                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C2AC 3038 D008                  		move.w	($FFFFD008).w,d0
0000C2B0 9068 0008                  		sub.w	8(a0),d0
0000C2B4 6400                       		bcc.s	loc_B98C
0000C2B6 4440                       		neg.w	d0
0000C2B8                            
0000C2B8                            loc_B98C:
0000C2B8 0C40 0090                  		cmpi.w	#$90,d0
0000C2BC 6400                       		bcc.s	loc_B996
0000C2BE 5228 0028                  		addq.b	#1,$28(a0)
0000C2C2                            
0000C2C2                            loc_B996:
0000C2C2 6000 FF48                  		bra.w	Obj31_Restart
0000C2C6                            ; ===========================================================================
0000C2C6                            ; ---------------------------------------------------------------------------
0000C2C6                            ; Object 45 - spiked metal block from beta version (MZ)
0000C2C6                            ; ---------------------------------------------------------------------------
0000C2C6                            
0000C2C6                            Obj45:					; XREF: Obj_Index
0000C2C6 7000                       		moveq	#0,d0
0000C2C8 1028 0024                  		move.b	$24(a0),d0
0000C2CC 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C2D0 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C2D4                            ; ===========================================================================
0000C2D4 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C2D6 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C2D8 0000                       		dc.w loc_BA8E-Obj45_Index
0000C2DA 0000                       		dc.w Obj45_Display-Obj45_Index
0000C2DC 0000                       		dc.w loc_BA7A-Obj45_Index
0000C2DE                            
0000C2DE 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C2E1 04E4 01                    		dc.b	4, $E4,	  1
0000C2E4 0834 03                    		dc.b	8, $34,	  3
0000C2E7 0628 02                    		dc.b	6, $28,	  2
0000C2EA                            
0000C2EA 3800                       word_B9BE:	dc.w $3800
0000C2EC A000                       		dc.w -$6000
0000C2EE 5000                       		dc.w $5000
0000C2F0                            ; ===========================================================================
0000C2F0                            
0000C2F0                            Obj45_Main:				; XREF: Obj45_Index
0000C2F0 7000                       		moveq	#0,d0
0000C2F2 1028 0028                  		move.b	$28(a0),d0
0000C2F6 D040                       		add.w	d0,d0
0000C2F8 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C2FC 45F9 0000 C2DE             		lea	(Obj45_Var).l,a2
0000C302 2248                       		movea.l	a0,a1
0000C304 7203                       		moveq	#3,d1
0000C306 6000                       		bra.s	Obj45_Load
0000C308                            ; ===========================================================================
0000C308                            
0000C308                            Obj45_Loop:
0000C308 6100 0000                  		bsr.w	SingleObjLoad2
0000C30C 6600                       		bne.s	loc_BA52
0000C30E                            
0000C30E                            Obj45_Load:				; XREF: Obj45_Main
0000C30E 135A 0024                  		move.b	(a2)+,$24(a1)
0000C312 12BC 0045                  		move.b	#$45,0(a1)
0000C316 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C31C 101A                       		move.b	(a2)+,d0
0000C31E 4880                       		ext.w	d0
0000C320 D068 0008                  		add.w	8(a0),d0
0000C324 3340 0008                  		move.w	d0,8(a1)
0000C328 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C330 337C 0300 0002             		move.w	#$300,2(a1)
0000C336 137C 0004 0001             		move.b	#4,1(a1)
0000C33C 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C342 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C348 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C34E 137C 0020 0019             		move.b	#$20,$19(a1)
0000C354 3342 0034                  		move.w	d2,$34(a1)
0000C358 137C 0004 0018             		move.b	#4,$18(a1)
0000C35E 0C12 0001                  		cmpi.b	#1,(a2)
0000C362 6600                       		bne.s	loc_BA40
0000C364 137C 0091 0020             		move.b	#$91,$20(a1)
0000C36A                            
0000C36A                            loc_BA40:
0000C36A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C36E 2348 003C                  		move.l	a0,$3C(a1)
0000C372 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C376                            
0000C376 137C 0003 0018             		move.b	#3,$18(a1)
0000C37C                            
0000C37C                            loc_BA52:
0000C37C 117C 0010 0019             		move.b	#$10,$19(a0)
0000C382                            
0000C382                            Obj45_Solid:				; XREF: Obj45_Index
0000C382 3F28 0008                  		move.w	8(a0),-(sp)
0000C386 6100 0000                  		bsr.w	Obj45_Move
0000C38A 323C 0017                  		move.w	#$17,d1
0000C38E 343C 0020                  		move.w	#$20,d2
0000C392 363C 0020                  		move.w	#$20,d3
0000C396 381F                       		move.w	(sp)+,d4
0000C398 6100 0000                  		bsr.w	SolidObject
0000C39C 6100 0000                  		bsr.w	DisplaySprite
0000C3A0 6000 0000                  		bra.w	Obj45_ChkDel
0000C3A4                            ; ===========================================================================
0000C3A4                            
0000C3A4                            loc_BA7A:				; XREF: Obj45_Index
0000C3A4 2268 003C                  		movea.l	$3C(a0),a1
0000C3A8 1029 0032                  		move.b	$32(a1),d0
0000C3AC 0600 0010                  		addi.b	#$10,d0
0000C3B0 EA08                       		lsr.b	#5,d0
0000C3B2 5600                       		addq.b	#3,d0
0000C3B4 1140 001A                  		move.b	d0,$1A(a0)
0000C3B8                            
0000C3B8                            loc_BA8E:				; XREF: Obj45_Index
0000C3B8 2268 003C                  		movea.l	$3C(a0),a1
0000C3BC 7000                       		moveq	#0,d0
0000C3BE 1029 0032                  		move.b	$32(a1),d0
0000C3C2 4440                       		neg.w	d0
0000C3C4 D068 0030                  		add.w	$30(a0),d0
0000C3C8 3140 0008                  		move.w	d0,8(a0)
0000C3CC                            
0000C3CC                            Obj45_Display:				; XREF: Obj45_Index
0000C3CC 6100 0000                  		bsr.w	DisplaySprite
0000C3D0                            
0000C3D0                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C3D0 3028 003A                  		move.w	$3A(a0),d0
0000C3D4 0240 FF80                  		andi.w	#$FF80,d0
0000C3D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3DC 0441 0080                  		subi.w	#$80,d1
0000C3E0 0241 FF80                  		andi.w	#$FF80,d1
0000C3E4 9041                       		sub.w	d1,d0
0000C3E6 0C40 0280                  		cmpi.w	#$280,d0
0000C3EA 6200 0000                  		bhi.w	DeleteObject
0000C3EE 4E75                       		rts	
0000C3F0                            
0000C3F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C3F0                            
0000C3F0                            
0000C3F0                            Obj45_Move:				; XREF: Obj45_Solid
0000C3F0 7000                       		moveq	#0,d0
0000C3F2 1028 0028                  		move.b	$28(a0),d0
0000C3F6 D040                       		add.w	d0,d0
0000C3F8 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C3FC 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C400                            ; End of function Obj45_Move
0000C400                            
0000C400                            ; ===========================================================================
0000C400 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C402 0000                       		dc.w loc_BADA-off_BAD6
0000C404                            ; ===========================================================================
0000C404                            
0000C404                            loc_BADA:				; XREF: off_BAD6
0000C404 4A68 0036                  		tst.w	$36(a0)
0000C408 6700                       		beq.s	loc_BB08
0000C40A 4A68 0038                  		tst.w	$38(a0)
0000C40E 6700                       		beq.s	loc_BAEC
0000C410 5368 0038                  		subq.w	#1,$38(a0)
0000C414 6000                       		bra.s	loc_BB3C
0000C416                            ; ===========================================================================
0000C416                            
0000C416                            loc_BAEC:
0000C416 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C41C 6400                       		bcc.s	loc_BB3C
0000C41E 317C 0000 0032             		move.w	#0,$32(a0)
0000C424 317C 0000 0010             		move.w	#0,$10(a0)
0000C42A 317C 0000 0036             		move.w	#0,$36(a0)
0000C430 6000                       		bra.s	loc_BB3C
0000C432                            ; ===========================================================================
0000C432                            
0000C432                            loc_BB08:				; XREF: loc_BADA
0000C432 3228 0034                  		move.w	$34(a0),d1
0000C436 B268 0032                  		cmp.w	$32(a0),d1
0000C43A 6700                       		beq.s	loc_BB3C
0000C43C 3028 0010                  		move.w	$10(a0),d0
0000C440 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C446 D168 0032                  		add.w	d0,$32(a0)
0000C44A B268 0032                  		cmp.w	$32(a0),d1
0000C44E 6200                       		bhi.s	loc_BB3C
0000C450 3141 0032                  		move.w	d1,$32(a0)
0000C454 317C 0000 0010             		move.w	#0,$10(a0)
0000C45A 317C 0001 0036             		move.w	#1,$36(a0)
0000C460 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C466                            
0000C466                            loc_BB3C:
0000C466 7000                       		moveq	#0,d0
0000C468 1028 0032                  		move.b	$32(a0),d0
0000C46C 4440                       		neg.w	d0
0000C46E D068 0030                  		add.w	$30(a0),d0
0000C472 3140 0008                  		move.w	d0,8(a0)
0000C476 4E75                       		rts	
0000C478                            ; ===========================================================================
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            Map_obj31:
0000C478                            	include "_maps\obj31.asm"
0000C478                            ; ---------------------------------------------------------------------------
0000C478                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C478                            ; ---------------------------------------------------------------------------
0000C478 0000                       		dc.w byte_BB64-Map_obj31
0000C47A 0000                       		dc.w byte_BB7E-Map_obj31
0000C47C 0000                       		dc.w byte_BB98-Map_obj31
0000C47E 0000                       		dc.w byte_BB9E-Map_obj31
0000C480 0000                       		dc.w byte_BBA9-Map_obj31
0000C482 0000                       		dc.w byte_BBBE-Map_obj31
0000C484 0000                       		dc.w byte_BBDD-Map_obj31
0000C486 0000                       		dc.w byte_BC06-Map_obj31
0000C488 0000                       		dc.w byte_BC06-Map_obj31
0000C48A 0000                       		dc.w byte_BC39-Map_obj31
0000C48C 0000                       		dc.w byte_BC53-Map_obj31
0000C48E 05                         byte_BB64:	dc.b 5
0000C48F F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C494 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C499 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C49E F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C4A3 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C4A8 05                         byte_BB7E:	dc.b 5
0000C4A9 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C4AE F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C4B3 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C4B8 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C4BD F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C4C2 01                         byte_BB98:	dc.b 1
0000C4C3 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C4C8 02                         byte_BB9E:	dc.b 2
0000C4C9 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4CE 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4D3 04                         byte_BBA9:	dc.b 4
0000C4D4 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4D9 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4DE 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C4E3 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C4E8 06                         byte_BBBE:	dc.b 6
0000C4E9 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C4EE D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C4F3 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C4F8 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C4FD 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C502 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C507 08                         byte_BBDD:	dc.b 8
0000C508 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C50D B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C512 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C517 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C51C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C521 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C526 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C52B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C530 0A                         byte_BC06:	dc.b $A
0000C531 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C536 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C53B A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C540 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C545 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C54A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C54F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C554 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C559 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C55E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C563 05                         byte_BC39:	dc.b 5
0000C564 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C569 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C56E F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C573 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C578 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C57D 01                         byte_BC53:	dc.b 1
0000C57E EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C584 00                         		even
0000C584 00                         		even
0000C584                            
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            Map_obj45:
0000C584                            	include "_maps\obj45.asm"
0000C584                            ; ---------------------------------------------------------------------------
0000C584                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C584                            ; ---------------------------------------------------------------------------
0000C584 0000                       		dc.w byte_BC6C-Map_obj45
0000C586 0000                       		dc.w byte_BC7C-Map_obj45
0000C588 0000                       		dc.w byte_BC8C-Map_obj45
0000C58A 0000                       		dc.w byte_BC92-Map_obj45
0000C58C 0000                       		dc.w byte_BC9D-Map_obj45
0000C58E 0000                       		dc.w byte_BCB2-Map_obj45
0000C590 0000                       		dc.w byte_BCD1-Map_obj45
0000C592 0000                       		dc.w byte_BCFA-Map_obj45
0000C594 0000                       		dc.w byte_BCFA-Map_obj45
0000C596 03                         byte_BC6C:	dc.b 3
0000C597 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C59C 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C5A1 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C5A6 03                         byte_BC7C:	dc.b 3
0000C5A7 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C5AC FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C5B1 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C5B6 01                         byte_BC8C:	dc.b 1
0000C5B7 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C5BC 02                         byte_BC92:	dc.b 2
0000C5BD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5C2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5C7 04                         byte_BC9D:	dc.b 4
0000C5C8 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5CD F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5D2 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5D7 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5DC 06                         byte_BCB2:	dc.b 6
0000C5DD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C5E2 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C5E7 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C5EC F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C5F1 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C5F6 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C5FB 08                         byte_BCD1:	dc.b 8
0000C5FC F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C601 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C606 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C60B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C610 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C615 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C61A F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C61F F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C624 08                         byte_BCFA:	dc.b 8
0000C625 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C62A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C62F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C634 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C639 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C63E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C643 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C648 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C64D F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C652 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C658 00                         		even
0000C658 00                         		even
0000C658                            
0000C658                            ; ===========================================================================
0000C658                            ; ---------------------------------------------------------------------------
0000C658                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C658                            ; ---------------------------------------------------------------------------
0000C658                            
0000C658                            Obj32:					; XREF: Obj_Index
0000C658 7000                       		moveq	#0,d0
0000C65A 1028 0024                  		move.b	$24(a0),d0
0000C65E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C662 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C666                            ; ===========================================================================
0000C666 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C668 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C66A                            ; ===========================================================================
0000C66A                            
0000C66A                            Obj32_Main:				; XREF: Obj32_Index
0000C66A 5428 0024                  		addq.b	#2,$24(a0)
0000C66E 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C676 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C67C 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C682 6700                       		beq.s	loc_BD60
0000C684 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C68A                            
0000C68A                            loc_BD60:
0000C68A 117C 0004 0001             		move.b	#4,1(a0)
0000C690 117C 0010 0019             		move.b	#$10,$19(a0)
0000C696 117C 0004 0018             		move.b	#4,$18(a0)
0000C69C 5668 000C                  		addq.w	#3,$C(a0)
0000C6A0                            
0000C6A0                            Obj32_Pressed:				; XREF: Obj32_Index
0000C6A0 4A28 0001                  		tst.b	1(a0)
0000C6A4 6A00                       		bpl.s	Obj32_Display
0000C6A6 323C 001B                  		move.w	#$1B,d1
0000C6AA 343C 0005                  		move.w	#5,d2
0000C6AE 363C 0005                  		move.w	#5,d3
0000C6B2 3828 0008                  		move.w	8(a0),d4
0000C6B6 6100 0000                  		bsr.w	SolidObject
0000C6BA 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C6C0 1028 0028                  		move.b	$28(a0),d0
0000C6C4 0240 000F                  		andi.w	#$F,d0
0000C6C8 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C6CC 47F3 0000                  		lea	(a3,d0.w),a3
0000C6D0 7600                       		moveq	#0,d3
0000C6D2 0828 0006 0028             		btst	#6,$28(a0)
0000C6D8 6700                       		beq.s	loc_BDB2
0000C6DA 7607                       		moveq	#7,d3
0000C6DC                            
0000C6DC                            loc_BDB2:
0000C6DC 4A28 0028                  		tst.b	$28(a0)
0000C6E0 6A00                       		bpl.s	loc_BDBE
0000C6E2 6100 0000                  		bsr.w	Obj32_MZBlock
0000C6E6 6600                       		bne.s	loc_BDC8
0000C6E8                            
0000C6E8                            loc_BDBE:
0000C6E8 4A28 0025                  		tst.b	$25(a0)
0000C6EC 6600                       		bne.s	loc_BDC8
0000C6EE 0793                       		bclr	d3,(a3)
0000C6F0 6000                       		bra.s	loc_BDDE
0000C6F2                            ; ===========================================================================
0000C6F2                            
0000C6F2                            loc_BDC8:
0000C6F2 4A13                       		tst.b	(a3)
0000C6F4 6600                       		bne.s	loc_BDD6
0000C6F6 303C 00CD                  		move.w	#$CD,d0
0000C6FA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play switch sound
0000C700                            
0000C700                            loc_BDD6:
0000C700 07D3                       		bset	d3,(a3)
0000C702 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C708                            
0000C708                            loc_BDDE:
0000C708 0828 0005 0028             		btst	#5,$28(a0)
0000C70E 6700                       		beq.s	Obj32_Display
0000C710 5328 001E                  		subq.b	#1,$1E(a0)
0000C714 6A00                       		bpl.s	Obj32_Display
0000C716 117C 0007 001E             		move.b	#7,$1E(a0)
0000C71C 0868 0001 001A             		bchg	#1,$1A(a0)
0000C722                            
0000C722                            Obj32_Display:
0000C722 6100 0000                  		bsr.w	DisplaySprite
0000C726 3028 0008                  		move.w	8(a0),d0
0000C72A 0240 FF80                  		andi.w	#$FF80,d0
0000C72E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C732 0441 0080                  		subi.w	#$80,d1
0000C736 0241 FF80                  		andi.w	#$FF80,d1
0000C73A 9041                       		sub.w	d1,d0
0000C73C 0C40 0280                  		cmpi.w	#$280,d0
0000C740 6200 0000                  		bhi.w	Obj32_Delete
0000C744 4E75                       		rts	
0000C746                            ; ===========================================================================
0000C746                            
0000C746                            Obj32_Delete:
0000C746 6100 0000                  		bsr.w	DeleteObject
0000C74A 4E75                       		rts	
0000C74C                            
0000C74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C74C                            
0000C74C                            
0000C74C                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C74C 3F03                       		move.w	d3,-(sp)
0000C74E 3428 0008                  		move.w	8(a0),d2
0000C752 3628 000C                  		move.w	$C(a0),d3
0000C756 0442 0010                  		subi.w	#$10,d2
0000C75A 5143                       		subq.w	#8,d3
0000C75C 383C 0020                  		move.w	#$20,d4
0000C760 3A3C 0010                  		move.w	#$10,d5
0000C764 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C768 3C3C 005F                  		move.w	#$5F,d6
0000C76C                            
0000C76C                            Obj32_MZLoop:
0000C76C 4A29 0001                  		tst.b	1(a1)
0000C770 6A00                       		bpl.s	loc_BE4E
0000C772 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C776 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C778                            
0000C778                            loc_BE4E:
0000C778 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C77C 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C780                            
0000C780 361F                       		move.w	(sp)+,d3
0000C782 7000                       		moveq	#0,d0
0000C784                            
0000C784                            locret_BE5A:
0000C784 4E75                       		rts	
0000C786                            ; ===========================================================================
0000C786 1010                       Obj32_MZData:	dc.b $10, $10
0000C788                            ; ===========================================================================
0000C788                            
0000C788                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C788 7001                       		moveq	#1,d0
0000C78A 0240 003F                  		andi.w	#$3F,d0
0000C78E D040                       		add.w	d0,d0
0000C790 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C794 121A                       		move.b	(a2)+,d1
0000C796 4881                       		ext.w	d1
0000C798 3029 0008                  		move.w	8(a1),d0
0000C79C 9041                       		sub.w	d1,d0
0000C79E 9042                       		sub.w	d2,d0
0000C7A0 6400                       		bcc.s	loc_BE80
0000C7A2 D241                       		add.w	d1,d1
0000C7A4 D041                       		add.w	d1,d0
0000C7A6 6500                       		bcs.s	loc_BE84
0000C7A8 60CE                       		bra.s	loc_BE4E
0000C7AA                            ; ===========================================================================
0000C7AA                            
0000C7AA                            loc_BE80:
0000C7AA B044                       		cmp.w	d4,d0
0000C7AC 62CA                       		bhi.s	loc_BE4E
0000C7AE                            
0000C7AE                            loc_BE84:
0000C7AE 121A                       		move.b	(a2)+,d1
0000C7B0 4881                       		ext.w	d1
0000C7B2 3029 000C                  		move.w	$C(a1),d0
0000C7B6 9041                       		sub.w	d1,d0
0000C7B8 9043                       		sub.w	d3,d0
0000C7BA 6400                       		bcc.s	loc_BE9A
0000C7BC D241                       		add.w	d1,d1
0000C7BE D041                       		add.w	d1,d0
0000C7C0 6500                       		bcs.s	loc_BE9E
0000C7C2 60B4                       		bra.s	loc_BE4E
0000C7C4                            ; ===========================================================================
0000C7C4                            
0000C7C4                            loc_BE9A:
0000C7C4 B045                       		cmp.w	d5,d0
0000C7C6 62B0                       		bhi.s	loc_BE4E
0000C7C8                            
0000C7C8                            loc_BE9E:
0000C7C8 361F                       		move.w	(sp)+,d3
0000C7CA 7001                       		moveq	#1,d0
0000C7CC 4E75                       		rts	
0000C7CE                            ; End of function Obj32_MZBlock
0000C7CE                            
0000C7CE                            ; ===========================================================================
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            Map_obj32:
0000C7CE                            	include "_maps\obj32.asm"
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C7CE                            ; ---------------------------------------------------------------------------
0000C7CE 0000                       		dc.w byte_BEAC-Map_obj32
0000C7D0 0000                       		dc.w byte_BEB7-Map_obj32
0000C7D2 0000                       		dc.w byte_BEC2-Map_obj32
0000C7D4 0000                       		dc.w byte_BEB7-Map_obj32
0000C7D6 02                         byte_BEAC:	dc.b 2
0000C7D7 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C7DC F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C7E1 02                         byte_BEB7:	dc.b 2
0000C7E2 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C7E7 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C7EC 02                         byte_BEC2:	dc.b 2
0000C7ED F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C7F2 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C7F7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C7FC                            		even
0000C7FC                            		even
0000C7FC                            
0000C7FC                            ; ===========================================================================
0000C7FC                            ; ---------------------------------------------------------------------------
0000C7FC                            ; Object 33 - pushable blocks (MZ, LZ)
0000C7FC                            ; ---------------------------------------------------------------------------
0000C7FC                            
0000C7FC                            Obj33:					; XREF: Obj_Index
0000C7FC 7000                       		moveq	#0,d0
0000C7FE 1028 0024                  		move.b	$24(a0),d0
0000C802 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C806 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C80A                            ; ===========================================================================
0000C80A 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C80C 0000                       		dc.w loc_BF6E-Obj33_Index
0000C80E 0000                       		dc.w loc_C02C-Obj33_Index
0000C810                            
0000C810 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C812 4001                       		dc.b $40, 1
0000C814                            ; ===========================================================================
0000C814                            
0000C814                            Obj33_Main:				; XREF: Obj33_Index
0000C814 5428 0024                  		addq.b	#2,$24(a0)
0000C818 117C 000F 0016             		move.b	#$F,$16(a0)
0000C81E 117C 000F 0017             		move.b	#$F,$17(a0)
0000C824 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C82C 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C832 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C838 6600                       		bne.s	loc_BF16
0000C83A 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C840                            
0000C840                            loc_BF16:
0000C840 117C 0004 0001             		move.b	#4,1(a0)
0000C846 117C 0003 0018             		move.b	#3,$18(a0)
0000C84C 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C852 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C858 7000                       		moveq	#0,d0
0000C85A 1028 0028                  		move.b	$28(a0),d0
0000C85E D040                       		add.w	d0,d0
0000C860 0240 000E                  		andi.w	#$E,d0
0000C864 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C868 115A 0019                  		move.b	(a2)+,$19(a0)
0000C86C 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C870 4A28 0028                  		tst.b	$28(a0)
0000C874 6700                       		beq.s	Obj33_ChkGone
0000C876 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C87C                            
0000C87C                            Obj33_ChkGone:
0000C87C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C880 7000                       		moveq	#0,d0
0000C882 1028 0023                  		move.b	$23(a0),d0
0000C886 6700                       		beq.s	loc_BF6E
0000C888 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C88E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C894 6600 0000                  		bne.w	DeleteObject
0000C898                            
0000C898                            loc_BF6E:				; XREF: Obj33_Index
0000C898 4A28 0032                  		tst.b	$32(a0)
0000C89C 6600 0000                  		bne.w	loc_C046
0000C8A0 7200                       		moveq	#0,d1
0000C8A2 1228 0019                  		move.b	$19(a0),d1
0000C8A6 0641 000B                  		addi.w	#$B,d1
0000C8AA 343C 0010                  		move.w	#$10,d2
0000C8AE 363C 0011                  		move.w	#$11,d3
0000C8B2 3828 0008                  		move.w	8(a0),d4
0000C8B6 6100 0000                  		bsr.w	loc_C186
0000C8BA 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C8C0 6600                       		bne.s	loc_BFC6	; if not, branch
0000C8C2 08A8 0007 0028             		bclr	#7,$28(a0)
0000C8C8 3028 0008                  		move.w	8(a0),d0
0000C8CC 0C40 0A20                  		cmpi.w	#$A20,d0
0000C8D0 6500                       		bcs.s	loc_BFC6
0000C8D2 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C8D6 6400                       		bcc.s	loc_BFC6
0000C8D8 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C8DC 0440 001C                  		subi.w	#$1C,d0
0000C8E0 3140 000C                  		move.w	d0,$C(a0)
0000C8E4 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C8EA 08E8 0007 0028             		bset	#7,$28(a0)
0000C8F0                            
0000C8F0                            loc_BFC6:
0000C8F0 3028 0008                  		move.w	8(a0),d0
0000C8F4 0240 FF80                  		andi.w	#$FF80,d0
0000C8F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000C8FC 0441 0080                  		subi.w	#$80,d1
0000C900 0241 FF80                  		andi.w	#$FF80,d1
0000C904 9041                       		sub.w	d1,d0
0000C906 0C40 0280                  		cmpi.w	#$280,d0
0000C90A 6200                       		bhi.s	loc_BFE6
0000C90C 6000 0000                  		bra.w	DisplaySprite
0000C910                            ; ===========================================================================
0000C910                            
0000C910                            loc_BFE6:
0000C910 3028 0034                  		move.w	$34(a0),d0
0000C914 0240 FF80                  		andi.w	#$FF80,d0
0000C918 3238 F700                  		move.w	($FFFFF700).w,d1
0000C91C 0441 0080                  		subi.w	#$80,d1
0000C920 0241 FF80                  		andi.w	#$FF80,d1
0000C924 9041                       		sub.w	d1,d0
0000C926 0C40 0280                  		cmpi.w	#$280,d0
0000C92A 6200                       		bhi.s	loc_C016
0000C92C 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C932 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C938 117C 0004 0024             		move.b	#4,$24(a0)
0000C93E 6000                       		bra.s	loc_C02C
0000C940                            ; ===========================================================================
0000C940                            
0000C940                            loc_C016:
0000C940 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C944 7000                       		moveq	#0,d0
0000C946 1028 0023                  		move.b	$23(a0),d0
0000C94A 6700                       		beq.s	loc_C028
0000C94C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C952                            
0000C952                            loc_C028:
0000C952 6000 0000                  		bra.w	DeleteObject
0000C956                            ; ===========================================================================
0000C956                            
0000C956                            loc_C02C:				; XREF: Obj33_Index
0000C956 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C95A 6700                       		beq.s	locret_C044
0000C95C 117C 0002 0024             		move.b	#2,$24(a0)
0000C962 4228 0032                  		clr.b	$32(a0)
0000C966 4268 0010                  		clr.w	$10(a0)
0000C96A 4268 0012                  		clr.w	$12(a0)
0000C96E                            
0000C96E                            locret_C044:
0000C96E 4E75                       		rts	
0000C970                            ; ===========================================================================
0000C970                            
0000C970                            loc_C046:				; XREF: loc_BF6E
0000C970 3F28 0008                  		move.w	8(a0),-(sp)
0000C974 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C97A 6400                       		bcc.s	loc_C056
0000C97C 6100 0000                  		bsr.w	SpeedToPos
0000C980                            
0000C980                            loc_C056:
0000C980 0828 0001 0022             		btst	#1,$22(a0)
0000C986 6700                       		beq.s	loc_C0A0
0000C988 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C98E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C994 4A41                       		tst.w	d1
0000C996 6A00 0000                  		bpl.w	loc_C09E
0000C99A D368 000C                  		add.w	d1,$C(a0)
0000C99E 4268 0012                  		clr.w	$12(a0)
0000C9A2 08A8 0001 0022             		bclr	#1,$22(a0)
0000C9A8 3011                       		move.w	(a1),d0
0000C9AA 0240 03FF                  		andi.w	#$3FF,d0
0000C9AE 0C40 016A                  		cmpi.w	#$16A,d0
0000C9B2 6500                       		bcs.s	loc_C09E
0000C9B4 3028 0030                  		move.w	$30(a0),d0
0000C9B8 E640                       		asr.w	#3,d0
0000C9BA 3140 0010                  		move.w	d0,$10(a0)
0000C9BE 117C 0001 0032             		move.b	#1,$32(a0)
0000C9C4 4268 000E                  		clr.w	$E(a0)
0000C9C8                            
0000C9C8                            loc_C09E:
0000C9C8 6000                       		bra.s	loc_C0E6
0000C9CA                            ; ===========================================================================
0000C9CA                            
0000C9CA                            loc_C0A0:
0000C9CA 4A68 0010                  		tst.w	$10(a0)
0000C9CE 6700 0000                  		beq.w	loc_C0D6
0000C9D2 6B00                       		bmi.s	loc_C0BC
0000C9D4 7600                       		moveq	#0,d3
0000C9D6 1628 0019                  		move.b	$19(a0),d3
0000C9DA 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9E0 4A41                       		tst.w	d1		; has block touched a wall?
0000C9E2 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9E4 6000                       		bra.s	loc_C0E6
0000C9E6                            ; ===========================================================================
0000C9E6                            
0000C9E6                            loc_C0BC:
0000C9E6 7600                       		moveq	#0,d3
0000C9E8 1628 0019                  		move.b	$19(a0),d3
0000C9EC 4643                       		not.w	d3
0000C9EE 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9F4 4A41                       		tst.w	d1		; has block touched a wall?
0000C9F6 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C9F8 6000                       		bra.s	loc_C0E6
0000C9FA                            ; ===========================================================================
0000C9FA                            
0000C9FA                            Obj33_StopPush:
0000C9FA 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C9FE 6000                       		bra.s	loc_C0E6
0000CA00                            ; ===========================================================================
0000CA00                            
0000CA00                            loc_C0D6:
0000CA00 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000CA08 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000CA0E 6400                       		bcc.s	loc_C104
0000CA10                            
0000CA10                            loc_C0E6:
0000CA10 7200                       		moveq	#0,d1
0000CA12 1228 0019                  		move.b	$19(a0),d1
0000CA16 0641 000B                  		addi.w	#$B,d1
0000CA1A 343C 0010                  		move.w	#$10,d2
0000CA1E 363C 0011                  		move.w	#$11,d3
0000CA22 381F                       		move.w	(sp)+,d4
0000CA24 6100 0000                  		bsr.w	loc_C186
0000CA28 6100                       		bsr.s	Obj33_ChkLava
0000CA2A 6000 FEC4                  		bra.w	loc_BFC6
0000CA2E                            ; ===========================================================================
0000CA2E                            
0000CA2E                            loc_C104:
0000CA2E 381F                       		move.w	(sp)+,d4
0000CA30 43F8 D000                  		lea	($FFFFD000).w,a1
0000CA34 08A9 0003 0022             		bclr	#3,$22(a1)
0000CA3A 08A8 0003 0022             		bclr	#3,$22(a0)
0000CA40 6000 FECE                  		bra.w	loc_BFE6
0000CA44                            ; ===========================================================================
0000CA44                            
0000CA44                            Obj33_ChkLava:
0000CA44 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000CA4A 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000CA4C 343C FFE0                  		move.w	#-$20,d2
0000CA50 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000CA56 6700                       		beq.s	Obj33_LoadLava
0000CA58 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000CA5E 6700                       		beq.s	Obj33_LoadLava
0000CA60 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000CA66 6700                       		beq.s	Obj33_LoadLava
0000CA68 4E75                       		rts	
0000CA6A                            ; ===========================================================================
0000CA6A                            
0000CA6A                            Obj33_ChkLava2:
0000CA6A 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000CA70 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000CA72 343C 0020                  		move.w	#$20,d2
0000CA76 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000CA7C 6700                       		beq.s	Obj33_LoadLava
0000CA7E 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000CA84 6700                       		beq.s	Obj33_LoadLava
0000CA86                            
0000CA86                            Obj33_NoLava:
0000CA86 4E75                       		rts	
0000CA88                            ; ===========================================================================
0000CA88                            
0000CA88                            Obj33_LoadLava:
0000CA88 6100 0000                  		bsr.w	SingleObjLoad
0000CA8C 6600                       		bne.s	locret_C184
0000CA8E 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000CA92 3368 0008 0008             		move.w	8(a0),8(a1)
0000CA98 D569 0008                  		add.w	d2,8(a1)
0000CA9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CAA2 0669 0010 000C             		addi.w	#$10,$C(a1)
0000CAA8 2348 003C                  		move.l	a0,$3C(a1)
0000CAAC                            
0000CAAC                            locret_C184:
0000CAAC 4E75                       		rts	
0000CAAE                            ; ===========================================================================
0000CAAE                            
0000CAAE                            loc_C186:				; XREF: loc_BF6E
0000CAAE 1028 0025                  		move.b	$25(a0),d0
0000CAB2 6700 0000                  		beq.w	loc_C218
0000CAB6 5500                       		subq.b	#2,d0
0000CAB8 6600                       		bne.s	loc_C1AA
0000CABA 6100 B30E                  		bsr.w	ExitPlatform
0000CABE 0829 0003 0022             		btst	#3,$22(a1)
0000CAC4 6600                       		bne.s	loc_C1A4
0000CAC6 4228 0025                  		clr.b	$25(a0)
0000CACA 4E75                       		rts	
0000CACC                            ; ===========================================================================
0000CACC                            
0000CACC                            loc_C1A4:
0000CACC 3404                       		move.w	d4,d2
0000CACE 6000 B858                  		bra.w	MvSonicOnPtfm
0000CAD2                            ; ===========================================================================
0000CAD2                            
0000CAD2                            loc_C1AA:
0000CAD2 5500                       		subq.b	#2,d0
0000CAD4 6600                       		bne.s	loc_C1F2
0000CAD6 6100 0000                  		bsr.w	SpeedToPos
0000CADA 0668 0018 0012             		addi.w	#$18,$12(a0)
0000CAE0 4EB9 0000 0000             		jsr	ObjHitFloor
0000CAE6 4A41                       		tst.w	d1
0000CAE8 6A00 0000                  		bpl.w	locret_C1F0
0000CAEC D368 000C                  		add.w	d1,$C(a0)
0000CAF0 4268 0012                  		clr.w	$12(a0)
0000CAF4 4228 0025                  		clr.b	$25(a0)
0000CAF8 3011                       		move.w	(a1),d0
0000CAFA 0240 03FF                  		andi.w	#$3FF,d0
0000CAFE 0C40 016A                  		cmpi.w	#$16A,d0
0000CB02 6500                       		bcs.s	locret_C1F0
0000CB04 3028 0030                  		move.w	$30(a0),d0
0000CB08 E640                       		asr.w	#3,d0
0000CB0A 3140 0010                  		move.w	d0,$10(a0)
0000CB0E 117C 0001 0032             		move.b	#1,$32(a0)
0000CB14 4268 000E                  		clr.w	$E(a0)
0000CB18                            
0000CB18                            locret_C1F0:
0000CB18 4E75                       		rts	
0000CB1A                            ; ===========================================================================
0000CB1A                            
0000CB1A                            loc_C1F2:
0000CB1A 6100 0000                  		bsr.w	SpeedToPos
0000CB1E 3028 0008                  		move.w	8(a0),d0
0000CB22 0240 000C                  		andi.w	#$C,d0
0000CB26 6600 0000                  		bne.w	locret_C2E4
0000CB2A 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000CB30 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000CB36 4268 0010                  		clr.w	$10(a0)
0000CB3A 5528 0025                  		subq.b	#2,$25(a0)
0000CB3E 4E75                       		rts	
0000CB40                            ; ===========================================================================
0000CB40                            
0000CB40                            loc_C218:
0000CB40 6100 0000                  		bsr.w	loc_FAC8
0000CB44 4A44                       		tst.w	d4
0000CB46 6700 0000                  		beq.w	locret_C2E4
0000CB4A 6B00 0000                  		bmi.w	locret_C2E4
0000CB4E 4A28 0032                  		tst.b	$32(a0)
0000CB52 6700                       		beq.s	loc_C230
0000CB54 6000 0000                  		bra.w	locret_C2E4
0000CB58                            ; ===========================================================================
0000CB58                            
0000CB58                            loc_C230:
0000CB58 4A40                       		tst.w	d0
0000CB5A 6700 0000                  		beq.w	locret_C2E4
0000CB5E 6B00                       		bmi.s	loc_C268
0000CB60 0829 0000 0022             		btst	#0,$22(a1)
0000CB66 6600 0000                  		bne.w	locret_C2E4
0000CB6A 3F00                       		move.w	d0,-(sp)
0000CB6C 7600                       		moveq	#0,d3
0000CB6E 1628 0019                  		move.b	$19(a0),d3
0000CB72 4EB9 0000 0000             		jsr	ObjHitWallRight
0000CB78 301F                       		move.w	(sp)+,d0
0000CB7A 4A41                       		tst.w	d1
0000CB7C 6B00 0000                  		bmi.w	locret_C2E4
0000CB80 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000CB88 7001                       		moveq	#1,d0
0000CB8A 323C 0040                  		move.w	#$40,d1
0000CB8E 6000                       		bra.s	loc_C294
0000CB90                            ; ===========================================================================
0000CB90                            
0000CB90                            loc_C268:
0000CB90 0829 0000 0022             		btst	#0,$22(a1)
0000CB96 6700                       		beq.s	locret_C2E4
0000CB98 3F00                       		move.w	d0,-(sp)
0000CB9A 7600                       		moveq	#0,d3
0000CB9C 1628 0019                  		move.b	$19(a0),d3
0000CBA0 4643                       		not.w	d3
0000CBA2 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000CBA8 301F                       		move.w	(sp)+,d0
0000CBAA 4A41                       		tst.w	d1
0000CBAC 6B00                       		bmi.s	locret_C2E4
0000CBAE 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000CBB6 70FF                       		moveq	#-1,d0
0000CBB8 323C FFC0                  		move.w	#-$40,d1
0000CBBC                            
0000CBBC                            loc_C294:
0000CBBC 43F8 D000                  		lea	($FFFFD000).w,a1
0000CBC0 D169 0008                  		add.w	d0,8(a1)
0000CBC4 3341 0014                  		move.w	d1,$14(a1)
0000CBC8 337C 0000 0010             		move.w	#0,$10(a1)
0000CBCE 3F00                       		move.w	d0,-(sp)
0000CBD0 303C 00A7                  		move.w	#$A7,d0
0000CBD4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CBDA 301F                       		move.w	(sp)+,d0
0000CBDC 4A28 0028                  		tst.b	$28(a0)
0000CBE0 6B00                       		bmi.s	locret_C2E4
0000CBE2 3F00                       		move.w	d0,-(sp)
0000CBE4 4EB9 0000 0000             		jsr	ObjHitFloor
0000CBEA 301F                       		move.w	(sp)+,d0
0000CBEC 0C41 0004                  		cmpi.w	#4,d1
0000CBF0 6F00                       		ble.s	loc_C2E0
0000CBF2 317C 0400 0010             		move.w	#$400,$10(a0)
0000CBF8 4A40                       		tst.w	d0
0000CBFA 6A00                       		bpl.s	loc_C2D8
0000CBFC 4468 0010                  		neg.w	$10(a0)
0000CC00                            
0000CC00                            loc_C2D8:
0000CC00 117C 0006 0025             		move.b	#6,$25(a0)
0000CC06 6000                       		bra.s	locret_C2E4
0000CC08                            ; ===========================================================================
0000CC08                            
0000CC08                            loc_C2E0:
0000CC08 D368 000C                  		add.w	d1,$C(a0)
0000CC0C                            
0000CC0C                            locret_C2E4:
0000CC0C 4E75                       		rts	
0000CC0E                            ; ===========================================================================
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            Map_obj33:
0000CC0E                            	include "_maps\obj33.asm"
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E 0000                       		dc.w byte_C2EA-Map_obj33
0000CC10 0000                       		dc.w byte_C2F0-Map_obj33
0000CC12 01                         byte_C2EA:	dc.b 1
0000CC13 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CC18 04                         byte_C2F0:	dc.b 4
0000CC19 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CC1E F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CC23 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CC28 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CC2E 00                         		even
0000CC2E 00                         		even
0000CC2E                            
0000CC2E                            ; ===========================================================================
0000CC2E                            ; ---------------------------------------------------------------------------
0000CC2E                            ; Object 34 - zone title cards
0000CC2E                            ; ---------------------------------------------------------------------------
0000CC2E                            Obj34:					; XREF: Obj_Index
0000CC2E 7000                       		moveq	#0,d0
0000CC30 1028 0024                  		move.b	$24(a0),d0
0000CC34 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CC38 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CC3C                            ; ===========================================================================
0000CC3C 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CC3E 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CC40 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC42 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CC44                            ; ===========================================================================
0000CC44                            
0000CC44                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CC44 2248                       		movea.l	a0,a1
0000CC46 7000                       		moveq	#0,d0
0000CC48 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CC4C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CC52 6600                       		bne.s	Obj34_CheckFZ
0000CC54 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CC56                            
0000CC56                            Obj34_CheckFZ:
0000CC56 3400                       		move.w	d0,d2
0000CC58 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CC5E 6600                       		bne.s	Obj34_LoadConfig
0000CC60 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CC62 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CC64                            
0000CC64                            Obj34_LoadConfig:
0000CC64 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CC6A E948                       		lsl.w	#4,d0
0000CC6C D6C0                       		adda.w	d0,a3
0000CC6E 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CC74 7203                       		moveq	#3,d1
0000CC76                            
0000CC76                            Obj34_Loop:
0000CC76 12BC 0034                  		move.b	#$34,0(a1)
0000CC7A 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CC7E 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CC82 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CC86 335A 000A                  		move.w	(a2)+,$A(a1)
0000CC8A 135A 0024                  		move.b	(a2)+,$24(a1)
0000CC8E 101A                       		move.b	(a2)+,d0
0000CC90 6600                       		bne.s	Obj34_ActNumber
0000CC92 1002                       		move.b	d2,d0
0000CC94                            
0000CC94                            Obj34_ActNumber:
0000CC94 0C00 0007                  		cmpi.b	#7,d0
0000CC98 6600                       		bne.s	Obj34_MakeSprite
0000CC9A D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CC9E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CCA4 6600                       		bne.s	Obj34_MakeSprite
0000CCA6 5300                       		subq.b	#1,d0
0000CCA8                            
0000CCA8                            Obj34_MakeSprite:
0000CCA8 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CCAC 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CCB4 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCBA 137C 0078 0019             		move.b	#$78,$19(a1)
0000CCC0 137C 0000 0001             		move.b	#0,1(a1)
0000CCC6 137C 0000 0018             		move.b	#0,$18(a1)
0000CCCC 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CCD2 43E9 0040                  		lea	$40(a1),a1	; next object
0000CCD6 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CCDA                            
0000CCDA                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CCDA 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCDC 3028 0030                  		move.w	$30(a0),d0
0000CCE0 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CCE4 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CCE6 6C00                       		bge.s	Obj34_Move
0000CCE8 4441                       		neg.w	d1
0000CCEA                            
0000CCEA                            Obj34_Move:
0000CCEA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CCEE                            
0000CCEE                            loc_C3C8:
0000CCEE 3028 0008                  		move.w	8(a0),d0
0000CCF2 6B00                       		bmi.s	locret_C3D8
0000CCF4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCF8 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CCFA 6000 0000                  		bra.w	DisplaySprite
0000CCFE                            ; ===========================================================================
0000CCFE                            
0000CCFE                            locret_C3D8:
0000CCFE 4E75                       		rts	
0000CD00                            ; ===========================================================================
0000CD00                            
0000CD00                            Obj34_Wait:				; XREF: Obj34_Index
0000CD00 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CD04 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CD06 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CD0A 6000 0000                  		bra.w	DisplaySprite
0000CD0E                            ; ===========================================================================
0000CD0E                            
0000CD0E                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CD0E 4A28 0001                  		tst.b	1(a0)
0000CD12 6A00                       		bpl.s	Obj34_ChangeArt
0000CD14 7220                       		moveq	#$20,d1
0000CD16 3028 0032                  		move.w	$32(a0),d0
0000CD1A B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CD1E 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CD20 6C00                       		bge.s	Obj34_Move2
0000CD22 4441                       		neg.w	d1
0000CD24                            
0000CD24                            Obj34_Move2:
0000CD24 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD28 3028 0008                  		move.w	8(a0),d0
0000CD2C 6B00                       		bmi.s	locret_C412
0000CD2E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD32 6400                       		bcc.s	locret_C412	; if yes, branch
0000CD34 6000 0000                  		bra.w	DisplaySprite
0000CD38                            ; ===========================================================================
0000CD38                            
0000CD38                            locret_C412:
0000CD38 4E75                       		rts	
0000CD3A                            ; ===========================================================================
0000CD3A                            
0000CD3A                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CD3A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CD40 6600                       		bne.s	Obj34_Delete
0000CD42 7002                       		moveq	#2,d0
0000CD44 4EB9 0000 177E             		jsr	(LoadPLC).l	; load explosion patterns
0000CD4A 7000                       		moveq	#0,d0
0000CD4C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CD50 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000CD54 4EB9 0000 177E             		jsr	(LoadPLC).l	; load animal patterns
0000CD5A                            
0000CD5A                            Obj34_Delete:
0000CD5A 6000 0000                  		bra.w	DeleteObject
0000CD5E                            
0000CD5E                            ; ===========================================================================
0000CD5E                            Obj34_AnimalPLC:
0000CD5E 15                         		dc.b $15	; "GHZ"
0000CD5F 16                         		dc.b $16
0000CD60 17                         		dc.b $17
0000CD61 18                         		dc.b $18
0000CD62 19                         		dc.b $19
0000CD63 1A                         		dc.b $1A	; "SBZ"
0000CD64 15                         		dc.b $15	; Ending (placeholder?
0000CD65 1A                         		dc.b $1A	; MAKOTO
0000CD66                            	even
0000CD66 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CD68 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CD6A 00E4                       		dc.w $E4
0000CD6C 0206                       		dc.b 2,	6
0000CD6E 00EA                       		dc.w $EA
0000CD70 0207                       		dc.b 2,	7
0000CD72 00E0                       		dc.w $E0
0000CD74 020A                       		dc.b 2,	$A
0000CD76                            ; ---------------------------------------------------------------------------
0000CD76                            ; Title	card configuration data
0000CD76                            ; Format:
0000CD76                            ; 4 bytes per item (YYYY XXXX)
0000CD76                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CD76                            ; ---------------------------------------------------------------------------
0000CD76 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CD86 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CD96 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CDA6 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CDB6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CDC6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CDD6 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CDE6 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CDF6 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CE06                            ; ===========================================================================
0000CE06                            ; ---------------------------------------------------------------------------
0000CE06                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CE06                            ; ---------------------------------------------------------------------------
0000CE06                            
0000CE06                            Obj39:					; XREF: Obj_Index
0000CE06 7000                       		moveq	#0,d0
0000CE08 1028 0024                  		move.b	$24(a0),d0
0000CE0C 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CE10 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CE14                            ; ===========================================================================
0000CE14 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CE16 0000                       		dc.w loc_C50C-Obj39_Index
0000CE18 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CE1A                            ; ===========================================================================
0000CE1A                            
0000CE1A                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CE1A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CE1E 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CE20 4E75                       		rts	
0000CE22                            ; ===========================================================================
0000CE22                            
0000CE22                            Obj39_Main:
0000CE22 5428 0024                  		addq.b	#2,$24(a0)
0000CE26 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CE2C 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CE32 6700                       		beq.s	loc_C4EC	; if not, branch
0000CE34 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CE3A                            
0000CE3A                            loc_C4EC:
0000CE3A 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CE40 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CE48 317C 855E 0002             		move.w	#$855E,2(a0)
0000CE4E 117C 0000 0001             		move.b	#0,1(a0)
0000CE54 117C 0000 0018             		move.b	#0,$18(a0)
0000CE5A                            
0000CE5A                            loc_C50C:				; XREF: Obj39_Index
0000CE5A 7210                       		moveq	#$10,d1		; set horizontal speed
0000CE5C 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CE62 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CE64 6500                       		bcs.s	Obj39_Move
0000CE66 4441                       		neg.w	d1
0000CE68                            
0000CE68                            Obj39_Move:
0000CE68 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE6C 6000 0000                  		bra.w	DisplaySprite
0000CE70                            ; ===========================================================================
0000CE70                            
0000CE70                            Obj39_SetWait:				; XREF: Obj39_Main
0000CE70 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CE76 5428 0024                  		addq.b	#2,$24(a0)
0000CE7A 4E75                       		rts	
0000CE7C                            ; ===========================================================================
0000CE7C                            
0000CE7C                            Obj39_Wait:				; XREF: Obj39_Index
0000CE7C 1038 F605                  		move.b	($FFFFF605).w,d0
0000CE80 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CE84 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CE86 0828 0000 001A             		btst	#0,$1A(a0)
0000CE8C 6600                       		bne.s	Obj39_Display
0000CE8E 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CE92 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CE94 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CE98 6000 0000                  		bra.w	DisplaySprite
0000CE9C                            ; ===========================================================================
0000CE9C                            
0000CE9C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CE9C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CEA0 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CEA2 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CEA8 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CEAC 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CEAE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CEB4 6000                       		bra.s	Obj39_Display
0000CEB6                            ; ===========================================================================
0000CEB6                            
0000CEB6                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CEB6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CEBC                            
0000CEBC                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CEBC 6000 0000                  		bra.w	DisplaySprite
0000CEC0                            ; ===========================================================================
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CEC0                            ; ---------------------------------------------------------------------------
0000CEC0                            
0000CEC0                            Obj3A:					; XREF: Obj_Index
0000CEC0 7000                       		moveq	#0,d0
0000CEC2 1028 0024                  		move.b	$24(a0),d0
0000CEC6 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CECA 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CECE                            ; ===========================================================================
0000CECE 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CED0 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CED2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CED4 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CED6 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CED8 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CEDA 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CEDC 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CEDE 0000                       		dc.w loc_C766-Obj3A_Index
0000CEE0                            ; ===========================================================================
0000CEE0                            
0000CEE0                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CEE0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CEE4 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CEE6 4E75                       		rts	
0000CEE8                            ; ===========================================================================
0000CEE8                            
0000CEE8                            Obj3A_Main:
0000CEE8 2248                       		movea.l	a0,a1
0000CEEA 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CEF0 7206                       		moveq	#6,d1
0000CEF2                            
0000CEF2                            Obj3A_Loop:
0000CEF2 12BC 003A                  		move.b	#$3A,0(a1)
0000CEF6 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CEFA 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CEFE 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF02 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF06 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF0A 101A                       		move.b	(a2)+,d0
0000CF0C 0C00 0006                  		cmpi.b	#6,d0
0000CF10 6600                       		bne.s	loc_C5CA
0000CF12 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CF16                            
0000CF16                            loc_C5CA:
0000CF16 1340 001A                  		move.b	d0,$1A(a1)
0000CF1A 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CF22 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF28 137C 0000 0001             		move.b	#0,1(a1)
0000CF2E 43E9 0040                  		lea	$40(a1),a1
0000CF32 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CF36                            
0000CF36                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CF36 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF38 3028 0030                  		move.w	$30(a0),d0
0000CF3C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF40 6700                       		beq.s	loc_C61A	; if yes, branch
0000CF42 6C00                       		bge.s	Obj3A_Move
0000CF44 4441                       		neg.w	d1
0000CF46                            
0000CF46                            Obj3A_Move:
0000CF46 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF4A                            
0000CF4A                            loc_C5FE:				; XREF: loc_C61A
0000CF4A 3028 0008                  		move.w	8(a0),d0
0000CF4E 6B00                       		bmi.s	locret_C60E
0000CF50 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF54 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CF56 6000 0000                  		bra.w	DisplaySprite
0000CF5A                            ; ===========================================================================
0000CF5A                            
0000CF5A                            locret_C60E:
0000CF5A 4E75                       		rts	
0000CF5C                            ; ===========================================================================
0000CF5C                            
0000CF5C                            loc_C610:				; XREF: loc_C61A
0000CF5C 117C 000E 0024             		move.b	#$E,$24(a0)
0000CF62 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CF66                            ; ===========================================================================
0000CF66                            
0000CF66                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CF66 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CF6C 67EE                       		beq.s	loc_C610
0000CF6E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CF74 66D4                       		bne.s	loc_C5FE
0000CF76 5428 0024                  		addq.b	#2,$24(a0)
0000CF7A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF80                            
0000CF80                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CF80 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF84 6600                       		bne.s	Obj3A_Display
0000CF86 5428 0024                  		addq.b	#2,$24(a0)
0000CF8A                            
0000CF8A                            Obj3A_Display:
0000CF8A 6000 0000                  		bra.w	DisplaySprite
0000CF8E                            ; ===========================================================================
0000CF8E                            
0000CF8E                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CF8E 6100 0000                  		bsr.w	DisplaySprite
0000CF92 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CF98 7000                       		moveq	#0,d0
0000CF9A 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CF9E 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CFA0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CFA4 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CFAA                            
0000CFAA                            Obj3A_RingBonus:
0000CFAA 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CFAE 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CFB0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CFB4 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFBA                            
0000CFBA                            Obj3A_ChkBonus:
0000CFBA 4A40                       		tst.w	d0		; is there any bonus?
0000CFBC 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CFBE 303C 00C5                  		move.w	#$C5,d0
0000CFC2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CFC8 5428 0024                  		addq.b	#2,$24(a0)
0000CFCC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CFD2 6600                       		bne.s	Obj3A_SetDelay
0000CFD4 5828 0024                  		addq.b	#4,$24(a0)
0000CFD8                            
0000CFD8                            Obj3A_SetDelay:
0000CFD8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFDE                            
0000CFDE                            locret_C692:
0000CFDE 4E75                       		rts	
0000CFE0                            ; ===========================================================================
0000CFE0                            
0000CFE0                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CFE0 4EB9 0000 0000             		jsr	AddPoints
0000CFE6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFEA 0200 0003                  		andi.b	#3,d0
0000CFEE 66EE                       		bne.s	locret_C692
0000CFF0 303C 00CD                  		move.w	#$CD,d0
0000CFF4 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFFA                            ; ===========================================================================
0000CFFA                            
0000CFFA                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CFFA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CFFE 0240 0007                  		andi.w	#7,d0
0000D002 E748                       		lsl.w	#3,d0
0000D004 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D008 0241 0003                  		andi.w	#3,d1
0000D00C D241                       		add.w	d1,d1
0000D00E D041                       		add.w	d1,d0
0000D010 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D014 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D018 4A40                       		tst.w	d0
0000D01A 6600                       		bne.s	Obj3A_ChkSS
0000D01C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D022 6000                       		bra.s	Obj3A_Display2
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D024 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D028 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D02C 6700                       		beq.s	loc_C6EA	; if not, branch
0000D02E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D034 6000                       		bra.s	Obj3A_Display2
0000D036                            ; ===========================================================================
0000D036                            
0000D036                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D036 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D03C                            
0000D03C                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D03C 6000 0000                  		bra.w	DisplaySprite
0000D040                            ; ===========================================================================
0000D040                            ; ---------------------------------------------------------------------------
0000D040                            ; Level	order array
0000D040                            ; ---------------------------------------------------------------------------
0000D040                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D080                            		even
0000D080                            ; ===========================================================================
0000D080                            
0000D080                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D080 7220                       		moveq	#$20,d1		; set horizontal speed
0000D082 3028 0032                  		move.w	$32(a0),d0
0000D086 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D08A 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D08C 6C00                       		bge.s	Obj3A_Move2
0000D08E 4441                       		neg.w	d1
0000D090                            
0000D090                            Obj3A_Move2:
0000D090 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D094 3028 0008                  		move.w	8(a0),d0
0000D098 6B00                       		bmi.s	locret_C748
0000D09A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D09E 6400                       		bcc.s	locret_C748	; if yes, branch
0000D0A0 6000 0000                  		bra.w	DisplaySprite
0000D0A4                            ; ===========================================================================
0000D0A4                            
0000D0A4                            locret_C748:
0000D0A4 4E75                       		rts	
0000D0A6                            ; ===========================================================================
0000D0A6                            
0000D0A6                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D0A6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D0AC 6600 0000                  		bne.w	DeleteObject
0000D0B0 5428 0024                  		addq.b	#2,$24(a0)
0000D0B4 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D0B8 303C 008D                  		move.w	#$8D,d0
0000D0BC 4EF9 0000 1594             		jmp	(PlaySound).l	; play FZ music
0000D0C2                            ; ===========================================================================
0000D0C2                            
0000D0C2                            loc_C766:				; XREF: Obj3A_Index
0000D0C2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D0C6 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D0CC 6700 0000                  		beq.w	DeleteObject
0000D0D0 4E75                       		rts	
0000D0D2                            ; ===========================================================================
0000D0D2 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D0D8 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D0DA FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D0E0 0201                       		dc.b 2,	1
0000D0E2 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D0E8 0206                       		dc.b 2,	6
0000D0EA 0520 0120 00EC             		dc.w $520, $120, $EC
0000D0F0 0202                       		dc.b 2,	2
0000D0F2 0540 0120 00FC             		dc.w $540, $120, $FC
0000D0F8 0203                       		dc.b 2,	3
0000D0FA 0560 0120 010C             		dc.w $560, $120, $10C
0000D100 0204                       		dc.b 2,	4
0000D102 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D108 0205                       		dc.b 2,	5
0000D10A                            ; ===========================================================================
0000D10A                            ; ---------------------------------------------------------------------------
0000D10A                            ; Object 7E - special stage results screen
0000D10A                            ; ---------------------------------------------------------------------------
0000D10A                            
0000D10A                            Obj7E:					; XREF: Obj_Index
0000D10A 7000                       		moveq	#0,d0
0000D10C 1028 0024                  		move.b	$24(a0),d0
0000D110 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D114 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D118                            ; ===========================================================================
0000D118 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D11A 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D11C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D11E 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D120 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D122 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D124 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D126 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D128 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D12A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D12C 0000                       		dc.w loc_C91A-Obj7E_Index
0000D12E                            ; ===========================================================================
0000D12E                            
0000D12E                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D12E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D132 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D134 4E75                       		rts	
0000D136                            ; ===========================================================================
0000D136                            
0000D136                            Obj7E_Main:
0000D136 2248                       		movea.l	a0,a1
0000D138 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D13E 7203                       		moveq	#3,d1
0000D140 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D146 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D148 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D14A                            
0000D14A                            Obj7E_Loop:
0000D14A 12BC 007E                  		move.b	#$7E,0(a1)
0000D14E 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D152 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D156 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D15A 135A 0024                  		move.b	(a2)+,$24(a1)
0000D15E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D162 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D16A 337C 8580 0002             		move.w	#$8580,2(a1)
0000D170 137C 0000 0001             		move.b	#0,1(a1)
0000D176 43E9 0040                  		lea	$40(a1),a1
0000D17A 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D17E                            
0000D17E 7007                       		moveq	#7,d0
0000D180 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D184 6700                       		beq.s	loc_C842
0000D186 7000                       		moveq	#0,d0
0000D188 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D18C 6600                       		bne.s	loc_C842	; if not, branch
0000D18E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D190 317C 0018 0008             		move.w	#$18,8(a0)
0000D196 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D19C                            
0000D19C                            loc_C842:
0000D19C 1140 001A                  		move.b	d0,$1A(a0)
0000D1A0                            
0000D1A0                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D1A0 7210                       		moveq	#$10,d1		; set horizontal speed
0000D1A2 3028 0030                  		move.w	$30(a0),d0
0000D1A6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D1AA 6700                       		beq.s	loc_C86C	; if yes, branch
0000D1AC 6C00                       		bge.s	Obj7E_Move
0000D1AE 4441                       		neg.w	d1
0000D1B0                            
0000D1B0                            Obj7E_Move:
0000D1B0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D1B4                            
0000D1B4                            loc_C85A:				; XREF: loc_C86C
0000D1B4 3028 0008                  		move.w	8(a0),d0
0000D1B8 6B00                       		bmi.s	locret_C86A
0000D1BA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D1BE 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D1C0 6000 0000                  		bra.w	DisplaySprite
0000D1C4                            ; ===========================================================================
0000D1C4                            
0000D1C4                            locret_C86A:
0000D1C4 4E75                       		rts	
0000D1C6                            ; ===========================================================================
0000D1C6                            
0000D1C6                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D1C6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D1CC 66E6                       		bne.s	loc_C85A
0000D1CE 5428 0024                  		addq.b	#2,$24(a0)
0000D1D2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D1D8 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D1DE                            
0000D1DE                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D1DE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D1E2 6600                       		bne.s	Obj7E_Display
0000D1E4 5428 0024                  		addq.b	#2,$24(a0)
0000D1E8                            
0000D1E8                            Obj7E_Display:
0000D1E8 6000 0000                  		bra.w	DisplaySprite
0000D1EC                            ; ===========================================================================
0000D1EC                            
0000D1EC                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D1EC 6100 0000                  		bsr.w	DisplaySprite
0000D1F0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D1F6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D1FA 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D1FC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D202 700A                       		moveq	#10,d0		; add 10 to score
0000D204 4EB9 0000 0000             		jsr	AddPoints
0000D20A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D20E 0200 0003                  		andi.b	#3,d0
0000D212 6600                       		bne.s	locret_C8EA
0000D214 303C 00CD                  		move.w	#$CD,d0
0000D218 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D21E                            ; ===========================================================================
0000D21E                            
0000D21E                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D21E 303C 00C5                  		move.w	#$C5,d0
0000D222 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D228 5428 0024                  		addq.b	#2,$24(a0)
0000D22C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D232 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D238 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D23A 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D240 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D244                            
0000D244                            locret_C8EA:
0000D244 4E75                       		rts	
0000D246                            ; ===========================================================================
0000D246                            
0000D246                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D246 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D24C 6000 0000                  		bra.w	DisplaySprite
0000D250                            ; ===========================================================================
0000D250                            
0000D250                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D250 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D256 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D25C 303C 00BF                  		move.w	#$BF,d0
0000D260 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play continues music
0000D266 5428 0024                  		addq.b	#2,$24(a0)
0000D26A 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D270 6000 0000                  		bra.w	DisplaySprite
0000D274                            ; ===========================================================================
0000D274                            
0000D274                            loc_C91A:				; XREF: Obj7E_Index
0000D274 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D278 0200 000F                  		andi.b	#$F,d0
0000D27C 6600                       		bne.s	Obj7E_Display2
0000D27E 0868 0000 001A             		bchg	#0,$1A(a0)
0000D284                            
0000D284                            Obj7E_Display2:
0000D284 6000 0000                  		bra.w	DisplaySprite
0000D288                            ; ===========================================================================
0000D288 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D28E 0200                       		dc.b 2,	0		; rountine number, frame number
0000D290 0320 0120 0118             		dc.w $320, $120, $118
0000D296 0201                       		dc.b 2,	1
0000D298 0360 0120 0128             		dc.w $360, $120, $128
0000D29E 0202                       		dc.b 2,	2
0000D2A0 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D2A6 0203                       		dc.b 2,	3
0000D2A8 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D2AE 0206                       		dc.b 2,	6
0000D2B0                            ; ===========================================================================
0000D2B0                            ; ---------------------------------------------------------------------------
0000D2B0                            ; Object 7F - chaos emeralds from the special stage results screen
0000D2B0                            ; ---------------------------------------------------------------------------
0000D2B0                            
0000D2B0                            Obj7F:					; XREF: Obj_Index
0000D2B0 7000                       		moveq	#0,d0
0000D2B2 1028 0024                  		move.b	$24(a0),d0
0000D2B6 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D2BA 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D2BE                            ; ===========================================================================
0000D2BE 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D2C0 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D2C2                            
0000D2C2                            ; ---------------------------------------------------------------------------
0000D2C2                            ; X-axis positions for chaos emeralds
0000D2C2                            ; ---------------------------------------------------------------------------
0000D2C2 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D2CE                            ; ===========================================================================
0000D2CE                            
0000D2CE                            Obj7F_Main:				; XREF: Obj7F_Index
0000D2CE 2248                       		movea.l	a0,a1
0000D2D0 45F9 0000 D2C2             		lea	(Obj7F_PosData).l,a2
0000D2D6 7400                       		moveq	#0,d2
0000D2D8 7200                       		moveq	#0,d1
0000D2DA 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D2DE 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D2E0 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D2E4                            
0000D2E4                            Obj7F_Loop:
0000D2E4 12BC 007F                  		move.b	#$7F,0(a1)
0000D2E8 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D2EC 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D2F2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D2F6 1633 2000                  		move.b	(a3,d2.w),d3
0000D2FA 1343 001A                  		move.b	d3,$1A(a1)
0000D2FE 1343 001C                  		move.b	d3,$1C(a1)
0000D302 5202                       		addq.b	#1,d2
0000D304 5429 0024                  		addq.b	#2,$24(a1)
0000D308 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D310 337C 8541 0002             		move.w	#$8541,2(a1)
0000D316 137C 0000 0001             		move.b	#0,1(a1)
0000D31C 43E9 0040                  		lea	$40(a1),a1	; next object
0000D320 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D324                            
0000D324                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D324 1028 001A                  		move.b	$1A(a0),d0
0000D328 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D32E 0C00 0006                  		cmpi.b	#6,d0
0000D332 6600                       		bne.s	Obj7F_Display
0000D334 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D33A                            
0000D33A                            Obj7F_Display:
0000D33A 6000 0000                  		bra.w	DisplaySprite
0000D33E                            ; ===========================================================================
0000D33E                            ; ---------------------------------------------------------------------------
0000D33E                            ; Sprite mappings - zone title cards
0000D33E                            ; ---------------------------------------------------------------------------
0000D33E                            Map_obj34:
0000D33E                                    include "_maps\obj34.asm"
0000D33E                            Map_c5df:
0000D33E 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000D340 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000D342 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000D344 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000D346 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000D348 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000D34A 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000D34C 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000D34E 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000D350 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000D352 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000D354 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000D356 0C                         Map_c5df_18: 	dc.b $C
0000D357 F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000D35C F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000D361 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000D366 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000D36B F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000D370 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000D375 F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000D37A F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000D37F F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000D384 F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000D389 F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000D38E F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000D393 16                         Map_c5df_55: 	dc.b $16
0000D394 F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000D399 F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000D39E F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000D3A3 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000D3A8 F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000D3AD F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000D3B2 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D3B7 F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000D3BC F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000D3C1 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000D3C6 F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000D3CB F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000D3D0 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000D3D5 F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000D3DA F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000D3DF F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000D3E4 F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000D3E9 F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000D3EE F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000D3F3 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000D3F8 F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000D3FD F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000D402 05                         Map_c5df_C4: 	dc.b $5
0000D403 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000D408 F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000D40D F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000D412 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000D417 F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000D41C 11                         Map_c5df_DE: 	dc.b $11
0000D41D F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000D422 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000D427 F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000D42C F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000D431 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000D436 F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000D43B F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000D440 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000D445 F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000D44A F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000D44F F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000D454 F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000D459 F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000D45E F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000D463 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000D468 F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000D46D F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000D472 15                         Map_c5df_134: 	dc.b $15
0000D473 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000D478 F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000D47D F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000D482 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D487 F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000D48C F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000D491 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000D496 F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000D49B F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000D4A0 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000D4A5 F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000D4AA F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000D4AF F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000D4B4 F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000D4B9 F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000D4BE F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000D4C3 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000D4C8 F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000D4CD F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000D4D2 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000D4D7 F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000D4DC 07                         Map_c5df_19E: 	dc.b $7
0000D4DD F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000D4E2 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000D4E7 F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000D4EC F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000D4F1 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000D4F6 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000D4FB F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D500 04                         Map_c5df_1C2: 	dc.b $4
0000D501 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000D506 F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000D50B F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000D510 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000D515 02                         Map_c5df_1D7: 	dc.b $2
0000D516 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D51B F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000D520 02                         Map_c5df_1E2: 	dc.b $2
0000D521 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D526 F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000D52B 02                         Map_c5df_1ED: 	dc.b $2
0000D52C 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000D531 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000D536 0D                         Map_c5df_1F8: 	dc.b $D
0000D537 E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000D53C E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000D541 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000D546 F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000D54B 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000D550 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000D555 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000D55A FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000D55F EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000D564 F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000D569 FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000D56E 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000D573 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000D578 05                         Map_c5df_23A: 	dc.b $5
0000D579 F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000D57E F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000D583 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000D588 F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000D58D F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000D592                            	even
0000D592                            	even
0000D592                            ; ---------------------------------------------------------------------------
0000D592                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D592                            ; ---------------------------------------------------------------------------
0000D592                            Map_obj39:
0000D592                            	include "_maps\obj39.asm"
0000D592                            ; ---------------------------------------------------------------------------
0000D592                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D592                            ; ---------------------------------------------------------------------------
0000D592 0000                       		dc.w byte_CBAC-Map_obj39
0000D594 0000                       		dc.w byte_CBB7-Map_obj39
0000D596 0000                       		dc.w byte_CBC2-Map_obj39
0000D598 0000                       		dc.w byte_CBCD-Map_obj39
0000D59A 02                         byte_CBAC:	dc.b 2
0000D59B F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D5A0 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D5A5 02                         byte_CBB7:	dc.b 2
0000D5A6 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D5AB F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D5B0 02                         byte_CBC2:	dc.b 2
0000D5B1 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D5B6 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D5BB 02                         byte_CBCD:	dc.b 2
0000D5BC F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D5C1 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D5C6                            		even
0000D5C6                            		even
0000D5C6                            
0000D5C6                            ; ---------------------------------------------------------------------------
0000D5C6                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D5C6                            ; ---------------------------------------------------------------------------
0000D5C6 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D5C8 0000                       		dc.w byte_CC13-Map_obj3A
0000D5CA 0000                       		dc.w byte_CC32-Map_obj3A
0000D5CC 0000                       		dc.w byte_CC51-Map_obj3A
0000D5CE 0000                       		dc.w byte_CC75-Map_obj3A
0000D5D0                            		;dc.w byte_CB47-Map_obj3A
0000D5D0                            		;dc.w byte_CB26-Map_obj3A
0000D5D0                            		;dc.w byte_CB31-Map_obj3A
0000D5D0                            		;dc.w byte_CB3C-Map_obj3A
0000D5D0 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D5D1 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D5D6 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D5DB F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D5E0 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D5E5 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D5EA F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D5EF F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D5F4 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D5F9 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D5FE F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D603 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D608 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D60D F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D612 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D617 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D61C 06                         byte_CC13:	dc.b 6			; PASSED
0000D61D F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D622 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D627 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D62C F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D631 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D636 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D63B 06                         byte_CC32:	dc.b 6			; SCORE
0000D63C F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D641 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D646 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D64B F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D650 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D655 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D65A 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D65B F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D660 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D665 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D66A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D66F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D674 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D679 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D67E 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D67F F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D684 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D689 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D68E F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D693 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D698 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D69D F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D6A2                            		even
0000D6A2                            ; ---------------------------------------------------------------------------
0000D6A2                            ; Sprite mappings - special stage results screen
0000D6A2                            ; ---------------------------------------------------------------------------
0000D6A2 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D6A4 0000                       		dc.w byte_CCEE-Map_obj7E
0000D6A6 0000                       		dc.w byte_CD0D-Map_obj7E
0000D6A8                            		;dc.w byte_CB47-Map_obj7E
0000D6A8 0000                       		dc.w byte_CD31-Map_obj7E
0000D6AA 0000                       		dc.w byte_CD46-Map_obj7E
0000D6AC 0000                       		dc.w byte_CD5B-Map_obj7E
0000D6AE 0000                       		dc.w byte_CD6B-Map_obj7E
0000D6B0 0000                       		dc.w byte_CDA8-Map_obj7E
0000D6B2 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D6B3 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D6B8 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D6BD F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D6C2 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D6C7 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D6CC F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D6D1 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D6D6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D6DB F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D6E0 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D6E5 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D6EA F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D6EF F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D6F4 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D6F5 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D6FA F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D6FF F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D704 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D709 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D70E FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D713 07                         byte_CD0D:	dc.b 7
0000D714 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D719 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D71E F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D723 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D728 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D72D F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D732 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D737 04                         byte_CD31:	dc.b 4
0000D738 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D73D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D742 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D747 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D74C 04                         byte_CD46:	dc.b 4
0000D74D F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D752 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D757 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D75C F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D761 03                         byte_CD5B:	dc.b 3
0000D762 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D767 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D76C F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D771 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D772 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D777 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D77C F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D781 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D786 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D78B F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D790 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D795 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D79A F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D79F F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D7A4 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D7A9 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D7AE 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D7AF F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D7B4 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D7B9 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D7BE F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D7C3 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D7C8 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D7CD F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D7D2 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D7D7 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D7DC F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D7E1 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D7E6 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D7EB F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D7F0 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D7F5 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D7FA                            		even
0000D7FA                            ; ---------------------------------------------------------------------------
0000D7FA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7FA                            ; ---------------------------------------------------------------------------
0000D7FA                            Map_obj7F:
0000D7FA                            	include "_maps\obj7F.asm"
0000D7FA                            ; ---------------------------------------------------------------------------
0000D7FA                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D7FA                            ; ---------------------------------------------------------------------------
0000D7FA 0000                       		dc.w byte_CE02-Map_obj7F
0000D7FC 0000                       		dc.w byte_CE08-Map_obj7F
0000D7FE 0000                       		dc.w byte_CE0E-Map_obj7F
0000D800 0000                       		dc.w byte_CE14-Map_obj7F
0000D802 0000                       		dc.w byte_CE1A-Map_obj7F
0000D804 0000                       		dc.w byte_CE20-Map_obj7F
0000D806 0000                       		dc.w byte_CE26-Map_obj7F
0000D808 01                         byte_CE02:	dc.b 1
0000D809 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D80E 01                         byte_CE08:	dc.b 1
0000D80F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D814 01                         byte_CE0E:	dc.b 1
0000D815 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D81A 01                         byte_CE14:	dc.b 1
0000D81B F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D820 01                         byte_CE1A:	dc.b 1
0000D821 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D826 01                         byte_CE20:	dc.b 1
0000D827 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D82C 00                         byte_CE26:	dc.b 0			; Blank frame
0000D82E 00                         		even
0000D82E 00                         		even
0000D82E                            
0000D82E                            ; ===========================================================================
0000D82E                            ; ---------------------------------------------------------------------------
0000D82E                            ; Object 36 - spikes
0000D82E                            ; ---------------------------------------------------------------------------
0000D82E                            
0000D82E                            Obj36:					; XREF: Obj_Index
0000D82E 7000                       		moveq	#0,d0
0000D830 1028 0024                  		move.b	$24(a0),d0
0000D834 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D838 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D83C                            ; ===========================================================================
0000D83C 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D83E 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D840                            
0000D840 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D842 0110                       		dc.b 1,	$10
0000D844 0204                       		dc.b 2,	4
0000D846 031C                       		dc.b 3,	$1C
0000D848 0440                       		dc.b 4,	$40
0000D84A 0510                       		dc.b 5,	$10
0000D84C                            ; ===========================================================================
0000D84C                            
0000D84C                            Obj36_Main:				; XREF: Obj36_Index
0000D84C 5428 0024                  		addq.b	#2,$24(a0)
0000D850 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D858 317C 051B 0002             		move.w	#$51B,2(a0)
0000D85E 0028 0004 0001             		ori.b	#4,1(a0)
0000D864 117C 0004 0018             		move.b	#4,$18(a0)
0000D86A 1028 0028                  		move.b	$28(a0),d0
0000D86E 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D874 0240 00F0                  		andi.w	#$F0,d0
0000D878 43F9 0000 D840             		lea	(Obj36_Var).l,a1
0000D87E E648                       		lsr.w	#3,d0
0000D880 D2C0                       		adda.w	d0,a1
0000D882 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D886 1159 0019                  		move.b	(a1)+,$19(a0)
0000D88A 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D890 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D896                            
0000D896                            Obj36_Solid:				; XREF: Obj36_Index
0000D896 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D89A 343C 0004                  		move.w	#4,d2
0000D89E 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D8A4 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D8A6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D8AC 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D8AE 343C 0014                  		move.w	#$14,d2
0000D8B2                            
0000D8B2                            ; Spikes types $1x and $5x face	sideways
0000D8B2                            
0000D8B2                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D8B2 323C 001B                  		move.w	#$1B,d1
0000D8B6 3602                       		move.w	d2,d3
0000D8B8 5243                       		addq.w	#1,d3
0000D8BA 3828 0008                  		move.w	8(a0),d4
0000D8BE 6100 0000                  		bsr.w	SolidObject
0000D8C2 0828 0003 0022             		btst	#3,$22(a0)
0000D8C8 6600                       		bne.s	Obj36_Display
0000D8CA 0C44 0001                  		cmpi.w	#1,d4
0000D8CE 6700                       		beq.s	Obj36_Hurt
0000D8D0 6000                       		bra.s	Obj36_Display
0000D8D2                            ; ===========================================================================
0000D8D2                            
0000D8D2                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D8D2                            
0000D8D2                            Obj36_Upright:				; XREF: Obj36_Solid
0000D8D2 7200                       		moveq	#0,d1
0000D8D4 1228 0019                  		move.b	$19(a0),d1
0000D8D8 0641 000B                  		addi.w	#$B,d1
0000D8DC 343C 0010                  		move.w	#$10,d2
0000D8E0 363C 0011                  		move.w	#$11,d3
0000D8E4 3828 0008                  		move.w	8(a0),d4
0000D8E8 6100 0000                  		bsr.w	SolidObject
0000D8EC 0828 0003 0022             		btst	#3,$22(a0)
0000D8F2 6600                       		bne.s	Obj36_Hurt
0000D8F4 4A44                       		tst.w	d4
0000D8F6 6A00                       		bpl.s	Obj36_Display
0000D8F8                            
0000D8F8                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D8F8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D8FC 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D8FE 2F08                       		move.l	a0,-(sp)
0000D900 2448                       		movea.l	a0,a2
0000D902 41F8 D000                  		lea	($FFFFD000).w,a0
0000D906 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D90C 6400                       		bcc.s	loc_CF20
0000D90E 2628 000C                  		move.l	$C(a0),d3
0000D912 3028 0012                  		move.w	$12(a0),d0
0000D916 48C0                       		ext.l	d0
0000D918 E180                       		asl.l	#8,d0
0000D91A 9680                       		sub.l	d0,d3
0000D91C 2143 000C                  		move.l	d3,$C(a0)
0000D920 4EB9 0000 0000             		jsr	HurtSonic
0000D926                            
0000D926                            loc_CF20:
0000D926 205F                       		movea.l	(sp)+,a0
0000D928                            
0000D928                            Obj36_Display:
0000D928 6100 0000                  		bsr.w	DisplaySprite
0000D92C 3028 0030                  		move.w	$30(a0),d0
0000D930 0240 FF80                  		andi.w	#$FF80,d0
0000D934 3238 F700                  		move.w	($FFFFF700).w,d1
0000D938 0441 0080                  		subi.w	#$80,d1
0000D93C 0241 FF80                  		andi.w	#$FF80,d1
0000D940 9041                       		sub.w	d1,d0
0000D942 0C40 0280                  		cmpi.w	#$280,d0
0000D946 6200 0000                  		bhi.w	DeleteObject
0000D94A 4E75                       		rts	
0000D94C                            ; ===========================================================================
0000D94C                            
0000D94C                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D94C 7000                       		moveq	#0,d0
0000D94E 1028 0028                  		move.b	$28(a0),d0
0000D952 D040                       		add.w	d0,d0
0000D954 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D958 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D95C                            ; ===========================================================================
0000D95C 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D95E 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D960 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D962                            ; ===========================================================================
0000D962                            
0000D962                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D962 4E75                       		rts			; don't move the object
0000D964                            ; ===========================================================================
0000D964                            
0000D964                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D964 6100 0000                  		bsr.w	Obj36_Wait
0000D968 7000                       		moveq	#0,d0
0000D96A 1028 0034                  		move.b	$34(a0),d0
0000D96E D068 0032                  		add.w	$32(a0),d0
0000D972 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D976 4E75                       		rts	
0000D978                            ; ===========================================================================
0000D978                            
0000D978                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D978 6100 0000                  		bsr.w	Obj36_Wait
0000D97C 7000                       		moveq	#0,d0
0000D97E 1028 0034                  		move.b	$34(a0),d0
0000D982 D068 0030                  		add.w	$30(a0),d0
0000D986 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D98A 4E75                       		rts	
0000D98C                            ; ===========================================================================
0000D98C                            
0000D98C                            Obj36_Wait:
0000D98C 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D990 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D992 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D996 6600                       		bne.s	locret_CFE6
0000D998 4A28 0001                  		tst.b	1(a0)
0000D99C 6A00                       		bpl.s	locret_CFE6
0000D99E 303C 00B6                  		move.w	#$B6,d0
0000D9A2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D9A8 6000                       		bra.s	locret_CFE6
0000D9AA                            ; ===========================================================================
0000D9AA                            
0000D9AA                            loc_CFA4:
0000D9AA 4A68 0036                  		tst.w	$36(a0)
0000D9AE 6700                       		beq.s	loc_CFC6
0000D9B0 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D9B6 6400                       		bcc.s	locret_CFE6
0000D9B8 317C 0000 0034             		move.w	#0,$34(a0)
0000D9BE 317C 0000 0036             		move.w	#0,$36(a0)
0000D9C4 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9CA 6000                       		bra.s	locret_CFE6
0000D9CC                            ; ===========================================================================
0000D9CC                            
0000D9CC                            loc_CFC6:
0000D9CC 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D9D2 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D9D8 6500                       		bcs.s	locret_CFE6
0000D9DA 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D9E0 317C 0001 0036             		move.w	#1,$36(a0)
0000D9E6 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D9EC                            
0000D9EC                            locret_CFE6:
0000D9EC 4E75                       		rts	
0000D9EE                            ; ===========================================================================
0000D9EE                            ; ---------------------------------------------------------------------------
0000D9EE                            ; Sprite mappings - spikes
0000D9EE                            ; ---------------------------------------------------------------------------
0000D9EE                            Map_obj36:
0000D9EE                            	include "_maps\obj36.asm"
0000D9EE                            Map_obj36_inner:
0000D9EE 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D9F0 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D9F2 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D9F4 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D9F6 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D9F8 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D9FA 03                         Map_obj36_inner_C: 	dc.b $3
0000D9FB F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000DA00 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA05 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000DA0A 03                         Map_obj36_inner_1C: 	dc.b $3
0000DA0B EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000DA10 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA15 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000DA1A 01                         Map_obj36_inner_2C: 	dc.b $1
0000DA1B F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA20 03                         Map_obj36_inner_32: 	dc.b $3
0000DA21 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000DA26 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000DA2B F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000DA30 06                         Map_obj36_inner_42: 	dc.b $6
0000DA31 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000DA36 F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000DA3B F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000DA40 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000DA45 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000DA4A F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000DA4F 01                         Map_obj36_inner_61: 	dc.b $1
0000DA50 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000DA56 00                         	even
0000DA56 00                         	even
0000DA56                            
0000DA56                            ; ===========================================================================
0000DA56                            ; ---------------------------------------------------------------------------
0000DA56                            ; Object 3B - purple rock (GHZ)
0000DA56                            ; ---------------------------------------------------------------------------
0000DA56                            
0000DA56                            Obj3B:					; XREF: Obj_Index
0000DA56 7000                       		moveq	#0,d0
0000DA58 1028 0024                  		move.b	$24(a0),d0
0000DA5C 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000DA60 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000DA64                            ; ===========================================================================
0000DA64 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000DA66 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000DA68                            ; ===========================================================================
0000DA68                            
0000DA68                            Obj3B_Main:				; XREF: Obj3B_Index
0000DA68 5428 0024                  		addq.b	#2,$24(a0)
0000DA6C 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000DA74 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000DA7A 117C 0004 0001             		move.b	#4,1(a0)
0000DA80 117C 0013 0019             		move.b	#$13,$19(a0)
0000DA86 117C 0004 0018             		move.b	#4,$18(a0)
0000DA8C                            
0000DA8C                            Obj3B_Solid:				; XREF: Obj3B_Index
0000DA8C 323C 001B                  		move.w	#$1B,d1
0000DA90 343C 0010                  		move.w	#$10,d2
0000DA94 363C 0010                  		move.w	#$10,d3
0000DA98 3828 0008                  		move.w	8(a0),d4
0000DA9C 6100 0000                  		bsr.w	SolidObject
0000DAA0 6100 0000                  		bsr.w	DisplaySprite
0000DAA4 3028 0008                  		move.w	8(a0),d0
0000DAA8 0240 FF80                  		andi.w	#$FF80,d0
0000DAAC 3238 F700                  		move.w	($FFFFF700).w,d1
0000DAB0 0441 0080                  		subi.w	#$80,d1
0000DAB4 0241 FF80                  		andi.w	#$FF80,d1
0000DAB8 9041                       		sub.w	d1,d0
0000DABA 0C40 0280                  		cmpi.w	#$280,d0
0000DABE 6200 0000                  		bhi.w	DeleteObject
0000DAC2 4E75                       		rts	
0000DAC4                            ; ===========================================================================
0000DAC4                            ; ---------------------------------------------------------------------------
0000DAC4                            ; Object 49 - waterfall	sound effect (GHZ)
0000DAC4                            ; ---------------------------------------------------------------------------
0000DAC4                            
0000DAC4                            Obj49:					; XREF: Obj_Index
0000DAC4 7000                       		moveq	#0,d0
0000DAC6 1028 0024                  		move.b	$24(a0),d0
0000DACA 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000DACE 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000DAD2                            ; ===========================================================================
0000DAD2 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000DAD4 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000DAD6                            ; ===========================================================================
0000DAD6                            
0000DAD6                            Obj49_Main:				; XREF: Obj49_Index
0000DAD6 5428 0024                  		addq.b	#2,$24(a0)
0000DADA 117C 0004 0001             		move.b	#4,1(a0)
0000DAE0                            
0000DAE0                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000DAE0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000DAE4 0200 003F                  		andi.b	#$3F,d0
0000DAE8 6600                       		bne.s	Obj49_ChkDel
0000DAEA 303C 00D0                  		move.w	#$D0,d0
0000DAEE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000DAF4                            
0000DAF4                            Obj49_ChkDel:
0000DAF4 3028 0008                  		move.w	8(a0),d0
0000DAF8 0240 FF80                  		andi.w	#$FF80,d0
0000DAFC 3238 F700                  		move.w	($FFFFF700).w,d1
0000DB00 0441 0080                  		subi.w	#$80,d1
0000DB04 0241 FF80                  		andi.w	#$FF80,d1
0000DB08 9041                       		sub.w	d1,d0
0000DB0A 0C40 0280                  		cmpi.w	#$280,d0
0000DB0E 6200 0000                  		bhi.w	DeleteObject
0000DB12 4E75                       		rts	
0000DB14                            ; ===========================================================================
0000DB14                            ; ---------------------------------------------------------------------------
0000DB14                            ; Sprite mappings - purple rock	(GHZ)
0000DB14                            ; ---------------------------------------------------------------------------
0000DB14                            Map_obj3B:
0000DB14                            	include "_maps\obj3B.asm"
0000DB14                            ; ---------------------------------------------------------------------------
0000DB14                            ; Sprite mappings - purple rock	(GHZ)
0000DB14                            ; ---------------------------------------------------------------------------
0000DB14 0000                       		dc.w byte_D110-Map_obj3B
0000DB16 02                         byte_D110:	dc.b 2
0000DB17 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000DB1C F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000DB22 00                         		even
0000DB22 00                         		even
0000DB22                            
0000DB22                            ; ===========================================================================
0000DB22                            ; ---------------------------------------------------------------------------
0000DB22                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000DB22                            ; ---------------------------------------------------------------------------
0000DB22                            
0000DB22                            Obj3C:					; XREF: Obj_Index
0000DB22 7000                       		moveq	#0,d0
0000DB24 1028 0024                  		move.b	$24(a0),d0
0000DB28 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000DB2C 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000DB30 6000 0000                  		bra.w	MarkObjGone
0000DB34                            ; ===========================================================================
0000DB34 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000DB36 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000DB38 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000DB3A                            ; ===========================================================================
0000DB3A                            
0000DB3A                            Obj3C_Main:				; XREF: Obj3C_Index
0000DB3A 5428 0024                  		addq.b	#2,$24(a0)
0000DB3E 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000DB46 317C 450F 0002             		move.w	#$450F,2(a0)
0000DB4C 117C 0004 0001             		move.b	#4,1(a0)
0000DB52 117C 0010 0019             		move.b	#$10,$19(a0)
0000DB58 117C 0004 0018             		move.b	#4,$18(a0)
0000DB5E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000DB64                            
0000DB64                            Obj3C_Solid:				; XREF: Obj3C_Index
0000DB64 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000DB6A 323C 001B                  		move.w	#$1B,d1
0000DB6E 343C 0020                  		move.w	#$20,d2
0000DB72 363C 0020                  		move.w	#$20,d3
0000DB76 3828 0008                  		move.w	8(a0),d4
0000DB7A 6100 0000                  		bsr.w	SolidObject
0000DB7E 0828 0005 0022             		btst	#5,$22(a0)
0000DB84 6600                       		bne.s	Obj3C_ChkRoll
0000DB86                            
0000DB86                            locret_D180:
0000DB86 4E75                       		rts	
0000DB88                            ; ===========================================================================
0000DB88                            
0000DB88                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000DB88 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000DB8E 66F6                       		bne.s	locret_D180	; if not, branch
0000DB90 3028 0030                  		move.w	$30(a0),d0
0000DB94 6A00                       		bpl.s	Obj3C_ChkSpeed
0000DB96 4440                       		neg.w	d0
0000DB98                            
0000DB98                            Obj3C_ChkSpeed:
0000DB98 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000DB9C 65E8                       		bcs.s	locret_D180	; if not, branch
0000DB9E 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000DBA4 5869 0008                  		addq.w	#4,8(a1)
0000DBA8 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000DBAE 3028 0008                  		move.w	8(a0),d0
0000DBB2 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000DBB6 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000DBB8 5169 0008                  		subq.w	#8,8(a1)
0000DBBC 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000DBC2                            
0000DBC2                            Obj3C_Smash:
0000DBC2 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DBC8 08A8 0005 0022             		bclr	#5,$22(a0)
0000DBCE 08A9 0005 0022             		bclr	#5,$22(a1)
0000DBD4 7207                       		moveq	#7,d1		; load 8 fragments
0000DBD6 343C 0070                  		move.w	#$70,d2
0000DBDA 6100                       		bsr.s	SmashObject
0000DBDC                            
0000DBDC                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000DBDC 6100 0000                  		bsr.w	SpeedToPos
0000DBE0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000DBE6 6100 0000                  		bsr.w	DisplaySprite
0000DBEA 4A28 0001                  		tst.b	1(a0)
0000DBEE 6A00 0000                  		bpl.w	DeleteObject
0000DBF2 4E75                       		rts	
0000DBF4                            
0000DBF4                            ; ---------------------------------------------------------------------------
0000DBF4                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DBF4                            ; ---------------------------------------------------------------------------
0000DBF4                            
0000DBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBF4                            
0000DBF4                            
0000DBF4                            SmashObject:				; XREF: Obj3C_Smash
0000DBF4 7000                       		moveq	#0,d0
0000DBF6 1028 001A                  		move.b	$1A(a0),d0
0000DBFA D040                       		add.w	d0,d0
0000DBFC 2668 0004                  		movea.l	4(a0),a3
0000DC00 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DC04 524B                       		addq.w	#1,a3
0000DC06 08E8 0005 0001             		bset	#5,1(a0)
0000DC0C 1810                       		move.b	0(a0),d4
0000DC0E 1A28 0001                  		move.b	1(a0),d5
0000DC12 2248                       		movea.l	a0,a1
0000DC14 6000                       		bra.s	Smash_LoadFrag
0000DC16                            ; ===========================================================================
0000DC16                            
0000DC16                            Smash_Loop:
0000DC16 6100 0000                  		bsr.w	SingleObjLoad
0000DC1A 6600                       		bne.s	Smash_PlaySnd
0000DC1C 5A4B                       		addq.w	#5,a3
0000DC1E                            
0000DC1E                            Smash_LoadFrag:				; XREF: SmashObject
0000DC1E 137C 0004 0024             		move.b	#4,$24(a1)
0000DC24 1284                       		move.b	d4,0(a1)
0000DC26 234B 0004                  		move.l	a3,4(a1)
0000DC2A 1345 0001                  		move.b	d5,1(a1)
0000DC2E 3368 0008 0008             		move.w	8(a0),8(a1)
0000DC34 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DC3A 3368 0002 0002             		move.w	2(a0),2(a1)
0000DC40 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DC46 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DC4C 335C 0010                  		move.w	(a4)+,$10(a1)
0000DC50 335C 0012                  		move.w	(a4)+,$12(a1)
0000DC54 B3C8                       		cmpa.l	a0,a1
0000DC56 6400                       		bcc.s	loc_D268
0000DC58 2F08                       		move.l	a0,-(sp)
0000DC5A 2049                       		movea.l	a1,a0
0000DC5C 6100 0000                  		bsr.w	SpeedToPos
0000DC60 D568 0012                  		add.w	d2,$12(a0)
0000DC64 205F                       		movea.l	(sp)+,a0
0000DC66 6100 0000                  		bsr.w	DisplaySprite2
0000DC6A                            
0000DC6A                            loc_D268:
0000DC6A 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DC6E                            
0000DC6E                            Smash_PlaySnd:
0000DC6E 303C 00CB                  		move.w	#$CB,d0
0000DC72 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DC78                            ; End of function SmashObject
0000DC78                            
0000DC78                            ; ===========================================================================
0000DC78                            ; Smashed block	fragment speeds
0000DC78                            ;
0000DC78 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DC7C 0600 FF00                  		dc.w $600, $FF00
0000DC80 0600 0100                  		dc.w $600, $100
0000DC84 0400 0500                  		dc.w $400, $500
0000DC88 0600 FA00                  		dc.w $600, $FA00
0000DC8C 0800 FE00                  		dc.w $800, $FE00
0000DC90 0800 0200                  		dc.w $800, $200
0000DC94 0600 0600                  		dc.w $600, $600
0000DC98                            
0000DC98 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DC9C F800 FE00                  		dc.w $F800, $FE00
0000DCA0 F800 0200                  		dc.w $F800, $200
0000DCA4 FA00 0600                  		dc.w $FA00, $600
0000DCA8 FC00 FB00                  		dc.w $FC00, $FB00
0000DCAC FA00 FF00                  		dc.w $FA00, $FF00
0000DCB0 FA00 0100                  		dc.w $FA00, $100
0000DCB4 FC00 0500                  		dc.w $FC00, $500
0000DCB8                            ; ---------------------------------------------------------------------------
0000DCB8                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DCB8                            ; ---------------------------------------------------------------------------
0000DCB8                            Map_obj3C:
0000DCB8                            	include "_maps\obj3C.asm"
0000DCB8                            ; ---------------------------------------------------------------------------
0000DCB8                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DCB8                            ; ---------------------------------------------------------------------------
0000DCB8 0000                       		dc.w byte_D2BC-Map_obj3C
0000DCBA 0000                       		dc.w byte_D2E5-Map_obj3C
0000DCBC 0000                       		dc.w byte_D30E-Map_obj3C
0000DCBE 08                         byte_D2BC:	dc.b 8
0000DCBF E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DCC4 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DCC9 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DCCE 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DCD3 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DCD8 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DCDD 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DCE2 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DCE7 08                         byte_D2E5:	dc.b 8
0000DCE8 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DCED F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DCF2 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DCF7 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DCFC E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DD01 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DD06 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DD0B 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DD10 08                         byte_D30E:	dc.b 8
0000DD11 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DD16 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DD1B 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DD20 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DD25 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DD2A F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DD2F 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DD34 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DD3A 00                         		even
0000DD3A 00                         		even
0000DD3A                            
0000DD3A                            ; ---------------------------------------------------------------------------
0000DD3A                            ; Object code loading subroutine
0000DD3A                            ; ---------------------------------------------------------------------------
0000DD3A                            
0000DD3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD3A                            
0000DD3A                            
0000DD3A                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DD3A 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DD3E 7E7F                       		moveq	#$7F,d7
0000DD40 7000                       		moveq	#0,d0
0000DD42 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DD48 6400                       		bcc.s	loc_D362
0000DD4A                            
0000DD4A                            loc_D348:
0000DD4A 1010                       		move.b	(a0),d0		; load object number from RAM
0000DD4C 6700                       		beq.s	loc_D358
0000DD4E D040                       		add.w	d0,d0
0000DD50 D040                       		add.w	d0,d0
0000DD52 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DD56 4E91                       		jsr	(a1)		; run the object's code
0000DD58 7000                       		moveq	#0,d0
0000DD5A                            
0000DD5A                            loc_D358:
0000DD5A 41E8 0040                  		lea	$40(a0),a0	; next object
0000DD5E 51CF FFEA                  		dbf	d7,loc_D348
0000DD62 4E75                       		rts	
0000DD64                            ; ===========================================================================
0000DD64                            
0000DD64                            loc_D362:
0000DD64 7E1F                       		moveq	#$1F,d7
0000DD66 61E2                       		bsr.s	loc_D348
0000DD68 7E5F                       		moveq	#$5F,d7
0000DD6A                            
0000DD6A                            loc_D368:
0000DD6A 7000                       		moveq	#0,d0
0000DD6C 1010                       		move.b	(a0),d0
0000DD6E 6700                       		beq.s	loc_D378
0000DD70 4A28 0001                  		tst.b	1(a0)
0000DD74 6A00                       		bpl.s	loc_D378
0000DD76 6100 0000                  		bsr.w	DisplaySprite
0000DD7A                            
0000DD7A                            loc_D378:
0000DD7A 41E8 0040                  		lea	$40(a0),a0
0000DD7E                            
0000DD7E                            loc_D37C:
0000DD7E 51CF FFEA                  		dbf	d7,loc_D368
0000DD82 4E75                       		rts	
0000DD84                            ; End of function ObjectsLoad
0000DD84                            
0000DD84                            ; ===========================================================================
0000DD84                            ; ---------------------------------------------------------------------------
0000DD84                            ; Object pointers
0000DD84                            ; ---------------------------------------------------------------------------
0000DD84                            Obj_Index:
0000DD84                            	include "_inc\Object pointers.asm"
0000DD84                            ; ---------------------------------------------------------------------------
0000DD84                            ; Object pointers
0000DD84                            ; ---------------------------------------------------------------------------
0000DD84 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DD94 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DDA4 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DDB4 0000 0000 0000 AF9E 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DDC4 0000 7B36 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DDD4 0000 815C 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DDE4 0000 89AA 0000 8AA4 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DDF4 0000 90EE 0000 93DC 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DE04 0000 0000 0000 A09A 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DE14 0000 A3D2 0000 A9BE 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DE24 0000 9CF6 0000 91C4 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DE34 0000 B596 0000 ABB2 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DE44 0000 BFAA 0000 C658 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DE54 0000 BB08 0000 D82E 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DE64 0000 CE06 0000 CEC0 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DE74 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DE84 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DE94 0000 C2C6 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DEA4 0000 DAC4 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DEB4 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DEC4 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DED4 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DEE4 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DEF4 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DF04 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DF14 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DF24 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DF34 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DF44 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DF54 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DF64 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DF74 0000 0000 0000 D10A 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DF84 0000 55A0 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DF94 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DFA4 0000 5C5A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DFA4 0000 5C5A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DFB4                            
0000DFB4                            ; ---------------------------------------------------------------------------
0000DFB4                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DFB4                            ; ---------------------------------------------------------------------------
0000DFB4                            
0000DFB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFB4                            
0000DFB4                            
0000DFB4                            ObjectFall:
0000DFB4 2428 0008                  		move.l	8(a0),d2
0000DFB8 2628 000C                  		move.l	$C(a0),d3
0000DFBC 3028 0010                  		move.w	$10(a0),d0
0000DFC0 48C0                       		ext.l	d0
0000DFC2 E180                       		asl.l	#8,d0
0000DFC4 D480                       		add.l	d0,d2
0000DFC6 3028 0012                  		move.w	$12(a0),d0
0000DFCA 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DFD0 48C0                       		ext.l	d0
0000DFD2 E180                       		asl.l	#8,d0
0000DFD4 D680                       		add.l	d0,d3
0000DFD6 2142 0008                  		move.l	d2,8(a0)
0000DFDA 2143 000C                  		move.l	d3,$C(a0)
0000DFDE 4E75                       		rts	
0000DFE0                            ; End of function ObjectFall
0000DFE0                            
0000DFE0                            ; ---------------------------------------------------------------------------
0000DFE0                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DFE0                            ; ---------------------------------------------------------------------------
0000DFE0                            
0000DFE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFE0                            
0000DFE0                            
0000DFE0                            ObjectFallNoJump:
0000DFE0 2428 0008                  		move.l	8(a0),d2
0000DFE4 2628 000C                  		move.l	$C(a0),d3
0000DFE8 3028 0010                  		move.w	$10(a0),d0
0000DFEC 48C0                       		ext.l	d0
0000DFEE E180                       		asl.l	#8,d0
0000DFF0 D480                       		add.l	d0,d2
0000DFF2                            ;		cmpi.b	#1,obID(a0)
0000DFF2                            ;		beq.s	ObjectFallSonic
0000DFF2 3028 000C                  		move.w	$C(a0),d0
0000DFF6 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DFFA                            ;		ext.l	d0
0000DFFA                            ;		asl.l	#8,d0
0000DFFA                            ;		add.l	d0,d3
0000DFFA 2142 0008                  		move.l	d2,$8(a0)
0000DFFE                            ;		move.l	d3,obY(a0)
0000DFFE 4E75                       		rts	
0000E000                            
0000E000                            ; End of function ObjectFall
0000E000                            
0000E000                            JumpFallSonic:
0000E000 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E006                                    
0000E006 E180                               asl.l    #8,d0                ; Apply X speed
0000E008 D1A8 0008                          add.l    d0,$8(a0)
0000E00C                                    
0000E00C 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E010 4A41                               tst.w    d1                ; Are we falling?
0000E012 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E014 4440                               neg.w    d0                ; Make Y movement go up
0000E016                                    
0000E016                            .SetYSpeed:
0000E016 48C0                               ext.l    d0                ; Apply Y speed
0000E018 E180                               asl.l    #8,d0
0000E01A D1A8 000C                          add.l    d0,$C(a0)
0000E01E 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E024 4E75                               rts
0000E026                            
0000E026                            ; ---------------------------------------------------------------------------
0000E026                            ; Subroutine translating object	speed to update	object position
0000E026                            ; ---------------------------------------------------------------------------
0000E026                            
0000E026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E026                            
0000E026                            
0000E026                            SpeedToPos:
0000E026 2428 0008                  		move.l	8(a0),d2
0000E02A 2628 000C                  		move.l	$C(a0),d3
0000E02E 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E032 48C0                       		ext.l	d0
0000E034 E180                       		asl.l	#8,d0		; multiply speed by $100
0000E036 D480                       		add.l	d0,d2		; add to x-axis	position
0000E038 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E03C 48C0                       		ext.l	d0
0000E03E E180                       		asl.l	#8,d0		; multiply by $100
0000E040 D680                       		add.l	d0,d3		; add to y-axis	position
0000E042 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E046 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E04A 4E75                       		rts	
0000E04C                            ; End of function SpeedToPos
0000E04C                            
0000E04C                            ; ---------------------------------------------------------------------------
0000E04C                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E04C                            ; ---------------------------------------------------------------------------
0000E04C                            
0000E04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E04C                            
0000E04C                            
0000E04C                            DisplaySprite:
0000E04C 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E050 3028 0018                  		move.w	$18(a0),d0
0000E054 E248                       		lsr.w	#1,d0
0000E056 0240 0380                  		andi.w	#$380,d0
0000E05A D2C0                       		adda.w	d0,a1
0000E05C 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E060 6400                       		bcc.s	locret_D620
0000E062 5451                       		addq.w	#2,(a1)
0000E064 D2D1                       		adda.w	(a1),a1
0000E066 3288                       		move.w	a0,(a1)
0000E068                            
0000E068                            locret_D620:
0000E068 4E75                       		rts	
0000E06A                            ; End of function DisplaySprite
0000E06A                            
0000E06A                            ; ---------------------------------------------------------------------------
0000E06A                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E06A                            ; ---------------------------------------------------------------------------
0000E06A                            
0000E06A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E06A                            
0000E06A                            
0000E06A                            DisplaySprite2:
0000E06A 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E06E 3029 0018                  		move.w	$18(a1),d0
0000E072 E248                       		lsr.w	#1,d0
0000E074 0240 0380                  		andi.w	#$380,d0
0000E078 D4C0                       		adda.w	d0,a2
0000E07A 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E07E 6400                       		bcc.s	locret_D63E
0000E080 5452                       		addq.w	#2,(a2)
0000E082 D4D2                       		adda.w	(a2),a2
0000E084 3489                       		move.w	a1,(a2)
0000E086                            
0000E086                            locret_D63E:
0000E086 4E75                       		rts	
0000E088                            ; End of function DisplaySprite2
0000E088                            
0000E088                            ; ---------------------------------------------------------------------------
0000E088                            ; Subroutine to	delete an object
0000E088                            ; ---------------------------------------------------------------------------
0000E088                            
0000E088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E088                            
0000E088                            
0000E088                            DeleteObject:
0000E088 2248                       		movea.l	a0,a1
0000E08A                            
0000E08A                            DeleteObject2:
0000E08A 7200                       		moveq	#0,d1
0000E08C 700F                       		moveq	#$F,d0
0000E08E                            
0000E08E                            loc_D646:
0000E08E 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E090 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E094 4E75                       		rts	
0000E096                            ; End of function DeleteObject
0000E096                            
0000E096                            ; ===========================================================================
0000E096 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E09A 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E09E 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E0A2 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E0A6                            ; ---------------------------------------------------------------------------
0000E0A6                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E0A6                            ; ---------------------------------------------------------------------------
0000E0A6                            
0000E0A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0A6                            
0000E0A6                            
0000E0A6                            BuildSprites:				; XREF: TitleScreen; et al
0000E0A6 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E0AA 7A00                       		moveq	#0,d5
0000E0AC 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E0B0 7E07                       		moveq	#7,d7
0000E0B2                            
0000E0B2                            loc_D66A:
0000E0B2 4A54                       		tst.w	(a4)
0000E0B4 6700 0000                  		beq.w	loc_D72E
0000E0B8 7C02                       		moveq	#2,d6
0000E0BA                            
0000E0BA                            loc_D672:
0000E0BA 3074 6000                  		movea.w	(a4,d6.w),a0
0000E0BE 4A10                       		tst.b	(a0)
0000E0C0 6700 0000                  		beq.w	loc_D726
0000E0C4 08A8 0007 0001             		bclr	#7,1(a0)
0000E0CA 1028 0001                  		move.b	1(a0),d0
0000E0CE 1800                       		move.b	d0,d4
0000E0D0 0240 000C                  		andi.w	#$C,d0
0000E0D4 6700                       		beq.s	loc_D6DE
0000E0D6 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E0DA 7000                       		moveq	#0,d0
0000E0DC 1028 0019                  		move.b	$19(a0),d0
0000E0E0 3628 0008                  		move.w	8(a0),d3
0000E0E4 9651                       		sub.w	(a1),d3
0000E0E6 3203                       		move.w	d3,d1
0000E0E8 D240                       		add.w	d0,d1
0000E0EA 6B00 0000                  		bmi.w	loc_D726
0000E0EE 3203                       		move.w	d3,d1
0000E0F0 9240                       		sub.w	d0,d1
0000E0F2 0C41 0140                  		cmpi.w	#$140,d1
0000E0F6 6C00                       		bge.s	loc_D726
0000E0F8 0643 0080                  		addi.w	#$80,d3
0000E0FC 0804 0004                  		btst	#4,d4
0000E100 6700                       		beq.s	loc_D6E8
0000E102 7000                       		moveq	#0,d0
0000E104 1028 0016                  		move.b	$16(a0),d0
0000E108 3428 000C                  		move.w	$C(a0),d2
0000E10C 9469 0004                  		sub.w	4(a1),d2
0000E110 3202                       		move.w	d2,d1
0000E112 D240                       		add.w	d0,d1
0000E114 6B00                       		bmi.s	loc_D726
0000E116 3202                       		move.w	d2,d1
0000E118 9240                       		sub.w	d0,d1
0000E11A 0C41 00E0                  		cmpi.w	#$E0,d1
0000E11E 6C00                       		bge.s	loc_D726
0000E120 0642 0080                  		addi.w	#$80,d2
0000E124 6000                       		bra.s	loc_D700
0000E126                            ; ===========================================================================
0000E126                            
0000E126                            loc_D6DE:
0000E126 3428 000A                  		move.w	$A(a0),d2
0000E12A 3628 0008                  		move.w	8(a0),d3
0000E12E 6000                       		bra.s	loc_D700
0000E130                            ; ===========================================================================
0000E130                            
0000E130                            loc_D6E8:
0000E130 3428 000C                  		move.w	$C(a0),d2
0000E134 9469 0004                  		sub.w	4(a1),d2
0000E138 0642 0080                  		addi.w	#$80,d2
0000E13C 0C42 0060                  		cmpi.w	#$60,d2
0000E140 6500                       		bcs.s	loc_D726
0000E142 0C42 0180                  		cmpi.w	#$180,d2
0000E146 6400                       		bcc.s	loc_D726
0000E148                            
0000E148                            loc_D700:
0000E148 2268 0004                  		movea.l	4(a0),a1
0000E14C 7200                       		moveq	#0,d1
0000E14E 0804 0005                  		btst	#5,d4
0000E152 6600                       		bne.s	loc_D71C
0000E154 1228 001A                  		move.b	$1A(a0),d1
0000E158 D201                       		add.b	d1,d1
0000E15A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E15E 1219                       		move.b	(a1)+,d1
0000E160 5301                       		subq.b	#1,d1
0000E162 6B00                       		bmi.s	loc_D720
0000E164                            
0000E164                            loc_D71C:
0000E164 6100 0000                  		bsr.w	sub_D750
0000E168                            
0000E168                            loc_D720:
0000E168 08E8 0007 0001             		bset	#7,1(a0)
0000E16E                            
0000E16E                            loc_D726:
0000E16E 5446                       		addq.w	#2,d6
0000E170 5554                       		subq.w	#2,(a4)
0000E172 6600 FF46                  		bne.w	loc_D672
0000E176                            
0000E176                            loc_D72E:
0000E176 49EC 0080                  		lea	$80(a4),a4
0000E17A 51CF FF36                  		dbf	d7,loc_D66A
0000E17E 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E182 0C05 0050                  		cmpi.b	#$50,d5
0000E186 6700                       		beq.s	loc_D748
0000E188 24BC 0000 0000             		move.l	#0,(a2)
0000E18E 4E75                       		rts	
0000E190                            ; ===========================================================================
0000E190                            
0000E190                            loc_D748:
0000E190 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E196 4E75                       		rts	
0000E198                            ; End of function BuildSprites
0000E198                            
0000E198                            
0000E198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E198                            
0000E198                            
0000E198                            sub_D750:				; XREF: BuildSprites
0000E198 3668 0002                  		movea.w	2(a0),a3
0000E19C 0804 0000                  		btst	#0,d4
0000E1A0 6600                       		bne.s	loc_D796
0000E1A2 0804 0001                  		btst	#1,d4
0000E1A6 6600 0000                  		bne.w	loc_D7E4
0000E1AA                            ; End of function sub_D750
0000E1AA                            
0000E1AA                            
0000E1AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E1AA                            
0000E1AA                            
0000E1AA                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E1AA 0C05 0050                  		cmpi.b	#$50,d5
0000E1AE 6700                       		beq.s	locret_D794
0000E1B0 1019                       		move.b	(a1)+,d0
0000E1B2 4880                       		ext.w	d0
0000E1B4 D042                       		add.w	d2,d0
0000E1B6 34C0                       		move.w	d0,(a2)+
0000E1B8 14D9                       		move.b	(a1)+,(a2)+
0000E1BA 5205                       		addq.b	#1,d5
0000E1BC 14C5                       		move.b	d5,(a2)+
0000E1BE 1019                       		move.b	(a1)+,d0
0000E1C0 E148                       		lsl.w	#8,d0
0000E1C2 1019                       		move.b	(a1)+,d0
0000E1C4 D04B                       		add.w	a3,d0
0000E1C6 34C0                       		move.w	d0,(a2)+
0000E1C8 1019                       		move.b	(a1)+,d0
0000E1CA 4880                       		ext.w	d0
0000E1CC D043                       		add.w	d3,d0
0000E1CE 0240 01FF                  		andi.w	#$1FF,d0
0000E1D2 6600                       		bne.s	loc_D78E
0000E1D4 5240                       		addq.w	#1,d0
0000E1D6                            
0000E1D6                            loc_D78E:
0000E1D6 34C0                       		move.w	d0,(a2)+
0000E1D8 51C9 FFD0                  		dbf	d1,sub_D762
0000E1DC                            
0000E1DC                            locret_D794:
0000E1DC 4E75                       		rts	
0000E1DE                            ; End of function sub_D762
0000E1DE                            
0000E1DE                            ; ===========================================================================
0000E1DE                            
0000E1DE                            loc_D796:
0000E1DE 0804 0001                  		btst	#1,d4
0000E1E2 6600 0000                  		bne.w	loc_D82A
0000E1E6                            
0000E1E6                            loc_D79E:
0000E1E6 0C05 0050                  		cmpi.b	#$50,d5
0000E1EA 6700                       		beq.s	locret_D7E2
0000E1EC 1019                       		move.b	(a1)+,d0
0000E1EE 4880                       		ext.w	d0
0000E1F0 D042                       		add.w	d2,d0
0000E1F2 34C0                       		move.w	d0,(a2)+
0000E1F4 1819                       		move.b	(a1)+,d4
0000E1F6 14C4                       		move.b	d4,(a2)+
0000E1F8 5205                       		addq.b	#1,d5
0000E1FA 14C5                       		move.b	d5,(a2)+
0000E1FC 1019                       		move.b	(a1)+,d0
0000E1FE E148                       		lsl.w	#8,d0
0000E200 1019                       		move.b	(a1)+,d0
0000E202 D04B                       		add.w	a3,d0
0000E204 0A40 0800                  		eori.w	#$800,d0
0000E208 34C0                       		move.w	d0,(a2)+
0000E20A 1019                       		move.b	(a1)+,d0
0000E20C 4880                       		ext.w	d0
0000E20E 4440                       		neg.w	d0
0000E210 D804                       		add.b	d4,d4
0000E212 0244 0018                  		andi.w	#$18,d4
0000E216 5044                       		addq.w	#8,d4
0000E218 9044                       		sub.w	d4,d0
0000E21A D043                       		add.w	d3,d0
0000E21C 0240 01FF                  		andi.w	#$1FF,d0
0000E220 6600                       		bne.s	loc_D7DC
0000E222 5240                       		addq.w	#1,d0
0000E224                            
0000E224                            loc_D7DC:
0000E224 34C0                       		move.w	d0,(a2)+
0000E226 51C9 FFBE                  		dbf	d1,loc_D79E
0000E22A                            
0000E22A                            locret_D7E2:
0000E22A 4E75                       		rts	
0000E22C                            ; ===========================================================================
0000E22C                            
0000E22C                            loc_D7E4:				; XREF: sub_D750
0000E22C 0C05 0050                  		cmpi.b	#$50,d5
0000E230 6700                       		beq.s	locret_D828
0000E232 1019                       		move.b	(a1)+,d0
0000E234 1811                       		move.b	(a1),d4
0000E236 4880                       		ext.w	d0
0000E238 4440                       		neg.w	d0
0000E23A E70C                       		lsl.b	#3,d4
0000E23C 0244 0018                  		andi.w	#$18,d4
0000E240 5044                       		addq.w	#8,d4
0000E242 9044                       		sub.w	d4,d0
0000E244 D042                       		add.w	d2,d0
0000E246 34C0                       		move.w	d0,(a2)+
0000E248 14D9                       		move.b	(a1)+,(a2)+
0000E24A 5205                       		addq.b	#1,d5
0000E24C 14C5                       		move.b	d5,(a2)+
0000E24E 1019                       		move.b	(a1)+,d0
0000E250 E148                       		lsl.w	#8,d0
0000E252 1019                       		move.b	(a1)+,d0
0000E254 D04B                       		add.w	a3,d0
0000E256 0A40 1000                  		eori.w	#$1000,d0
0000E25A 34C0                       		move.w	d0,(a2)+
0000E25C 1019                       		move.b	(a1)+,d0
0000E25E 4880                       		ext.w	d0
0000E260 D043                       		add.w	d3,d0
0000E262 0240 01FF                  		andi.w	#$1FF,d0
0000E266 6600                       		bne.s	loc_D822
0000E268 5240                       		addq.w	#1,d0
0000E26A                            
0000E26A                            loc_D822:
0000E26A 34C0                       		move.w	d0,(a2)+
0000E26C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E270                            
0000E270                            locret_D828:
0000E270 4E75                       		rts	
0000E272                            ; ===========================================================================
0000E272                            
0000E272                            loc_D82A:
0000E272 0C05 0050                  		cmpi.b	#$50,d5
0000E276 6700                       		beq.s	locret_D87C
0000E278 1019                       		move.b	(a1)+,d0
0000E27A 1811                       		move.b	(a1),d4
0000E27C 4880                       		ext.w	d0
0000E27E 4440                       		neg.w	d0
0000E280 E70C                       		lsl.b	#3,d4
0000E282 0244 0018                  		andi.w	#$18,d4
0000E286 5044                       		addq.w	#8,d4
0000E288 9044                       		sub.w	d4,d0
0000E28A D042                       		add.w	d2,d0
0000E28C 34C0                       		move.w	d0,(a2)+
0000E28E 1819                       		move.b	(a1)+,d4
0000E290 14C4                       		move.b	d4,(a2)+
0000E292 5205                       		addq.b	#1,d5
0000E294 14C5                       		move.b	d5,(a2)+
0000E296 1019                       		move.b	(a1)+,d0
0000E298 E148                       		lsl.w	#8,d0
0000E29A 1019                       		move.b	(a1)+,d0
0000E29C D04B                       		add.w	a3,d0
0000E29E 0A40 1800                  		eori.w	#$1800,d0
0000E2A2 34C0                       		move.w	d0,(a2)+
0000E2A4 1019                       		move.b	(a1)+,d0
0000E2A6 4880                       		ext.w	d0
0000E2A8 4440                       		neg.w	d0
0000E2AA D804                       		add.b	d4,d4
0000E2AC 0244 0018                  		andi.w	#$18,d4
0000E2B0 5044                       		addq.w	#8,d4
0000E2B2 9044                       		sub.w	d4,d0
0000E2B4 D043                       		add.w	d3,d0
0000E2B6 0240 01FF                  		andi.w	#$1FF,d0
0000E2BA 6600                       		bne.s	loc_D876
0000E2BC 5240                       		addq.w	#1,d0
0000E2BE                            
0000E2BE                            loc_D876:
0000E2BE 34C0                       		move.w	d0,(a2)+
0000E2C0 51C9 FFB0                  		dbf	d1,loc_D82A
0000E2C4                            
0000E2C4                            locret_D87C:
0000E2C4 4E75                       		rts	
0000E2C6                            ; ---------------------------------------------------------------------------
0000E2C6                            ; Subroutine to	check if an object is on the screen
0000E2C6                            ; ---------------------------------------------------------------------------
0000E2C6                            
0000E2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2C6                            
0000E2C6                            
0000E2C6                            ChkObjOnScreen:
0000E2C6 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E2CA 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E2CE 6B00                       		bmi.s	NotOnScreen
0000E2D0 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E2D4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E2D6                            
0000E2D6 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E2DA 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E2DE 6B00                       		bmi.s	NotOnScreen
0000E2E0 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E2E4 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E2E6                            
0000E2E6 7000                       		moveq	#0,d0		; set flag to 0
0000E2E8 4E75                       		rts	
0000E2EA                            ; ===========================================================================
0000E2EA                            
0000E2EA                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E2EA 7001                       		moveq	#1,d0		; set flag to 1
0000E2EC 4E75                       		rts	
0000E2EE                            ; End of function ChkObjOnScreen
0000E2EE                            
0000E2EE                            
0000E2EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2EE                            
0000E2EE                            
0000E2EE                            ChkObjOnScreen2:
0000E2EE 7200                       		moveq	#0,d1
0000E2F0 1228 0019                  		move.b	$19(a0),d1
0000E2F4 3028 0008                  		move.w	8(a0),d0
0000E2F8 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E2FC D041                       		add.w	d1,d0
0000E2FE 6B00                       		bmi.s	NotOnScreen2
0000E300 D241                       		add.w	d1,d1
0000E302 9041                       		sub.w	d1,d0
0000E304 0C40 0140                  		cmpi.w	#320,d0
0000E308 6C00                       		bge.s	NotOnScreen2
0000E30A                            
0000E30A 3228 000C                  		move.w	$C(a0),d1
0000E30E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E312 6B00                       		bmi.s	NotOnScreen2
0000E314 0C41 00E0                  		cmpi.w	#224,d1
0000E318 6C00                       		bge.s	NotOnScreen2
0000E31A                            
0000E31A 7000                       		moveq	#0,d0
0000E31C 4E75                       		rts	
0000E31E                            ; ===========================================================================
0000E31E                            
0000E31E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E31E 7001                       		moveq	#1,d0
0000E320 4E75                       		rts	
0000E322                            ; End of function ChkObjOnScreen2
0000E322                            
0000E322                            ; ---------------------------------------------------------------------------
0000E322                            ; Subroutine to	load a level's objects
0000E322                            ; ---------------------------------------------------------------------------
0000E322                            
0000E322                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E322                            
0000E322                            
0000E322                            ObjPosLoad:				; XREF: Level; et al
0000E322 7000                       		moveq	#0,d0
0000E324 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E328 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E32C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E330                            ; End of function ObjPosLoad
0000E330                            
0000E330                            ; ===========================================================================
0000E330 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E332 0000                       		dc.w OPL_Next-OPL_Index
0000E334                            ; ===========================================================================
0000E334                            
0000E334                            OPL_Main:				; XREF: OPL_Index
0000E334 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E338 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E33C ED08                       		lsl.b	#6,d0
0000E33E E848                       		lsr.w	#4,d0
0000E340 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E346 2248                       		movea.l	a0,a1
0000E348 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E34C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E350 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E354 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E358 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E35C 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E360 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E364 34FC 0101                  		move.w	#$101,(a2)+
0000E368 303C 005E                  		move.w	#$5E,d0
0000E36C                            
0000E36C                            OPL_ClrList:
0000E36C 429A                       		clr.l	(a2)+
0000E36E 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E372                            
0000E372 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E376 7400                       		moveq	#0,d2
0000E378 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E37C 0446 0080                  		subi.w	#$80,d6
0000E380 6400                       		bcc.s	loc_D93C
0000E382 7C00                       		moveq	#0,d6
0000E384                            
0000E384                            loc_D93C:
0000E384 0246 FF80                  		andi.w	#$FF80,d6
0000E388 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E38C                            
0000E38C                            loc_D944:
0000E38C BC50                       		cmp.w	(a0),d6
0000E38E 6300                       		bls.s	loc_D956
0000E390 4A28 0004                  		tst.b	4(a0)
0000E394 6A00                       		bpl.s	loc_D952
0000E396 1412                       		move.b	(a2),d2
0000E398 5212                       		addq.b	#1,(a2)
0000E39A                            
0000E39A                            loc_D952:
0000E39A 5C48                       		addq.w	#6,a0
0000E39C 60EE                       		bra.s	loc_D944
0000E39E                            ; ===========================================================================
0000E39E                            
0000E39E                            loc_D956:
0000E39E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E3A2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E3A6 0446 0080                  		subi.w	#$80,d6
0000E3AA 6500                       		bcs.s	loc_D976
0000E3AC                            
0000E3AC                            loc_D964:
0000E3AC BC50                       		cmp.w	(a0),d6
0000E3AE 6300                       		bls.s	loc_D976
0000E3B0 4A28 0004                  		tst.b	4(a0)
0000E3B4 6A00                       		bpl.s	loc_D972
0000E3B6 522A 0001                  		addq.b	#1,1(a2)
0000E3BA                            
0000E3BA                            loc_D972:
0000E3BA 5C48                       		addq.w	#6,a0
0000E3BC 60EE                       		bra.s	loc_D964
0000E3BE                            ; ===========================================================================
0000E3BE                            
0000E3BE                            loc_D976:
0000E3BE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E3C2 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E3C8                            
0000E3C8                            OPL_Next:				; XREF: OPL_Index
0000E3C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E3CC 7400                       		moveq	#0,d2
0000E3CE 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E3D2 0246 FF80                  		andi.w	#$FF80,d6
0000E3D6 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E3DA 6700 0000                  		beq.w	locret_DA3A
0000E3DE 6C00                       		bge.s	loc_D9F6
0000E3E0 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E3E4 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E3E8 0446 0080                  		subi.w	#$80,d6
0000E3EC 6500                       		bcs.s	loc_D9D2
0000E3EE                            
0000E3EE                            loc_D9A6:
0000E3EE BC68 FFFA                  		cmp.w	-6(a0),d6
0000E3F2 6C00                       		bge.s	loc_D9D2
0000E3F4 5D48                       		subq.w	#6,a0
0000E3F6 4A28 0004                  		tst.b	4(a0)
0000E3FA 6A00                       		bpl.s	loc_D9BC
0000E3FC 532A 0001                  		subq.b	#1,1(a2)
0000E400 142A 0001                  		move.b	1(a2),d2
0000E404                            
0000E404                            loc_D9BC:
0000E404 6100 0000                  		bsr.w	loc_DA3C
0000E408 6600                       		bne.s	loc_D9C6
0000E40A 5D48                       		subq.w	#6,a0
0000E40C 60E0                       		bra.s	loc_D9A6
0000E40E                            ; ===========================================================================
0000E40E                            
0000E40E                            loc_D9C6:
0000E40E 4A28 0004                  		tst.b	4(a0)
0000E412 6A00                       		bpl.s	loc_D9D0
0000E414 522A 0001                  		addq.b	#1,1(a2)
0000E418                            
0000E418                            loc_D9D0:
0000E418 5C48                       		addq.w	#6,a0
0000E41A                            
0000E41A                            loc_D9D2:
0000E41A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E41E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E422 0646 0300                  		addi.w	#$300,d6
0000E426                            
0000E426                            loc_D9DE:
0000E426 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E42A 6E00                       		bgt.s	loc_D9F0
0000E42C 4A28 FFFE                  		tst.b	-2(a0)
0000E430 6A00                       		bpl.s	loc_D9EC
0000E432 5312                       		subq.b	#1,(a2)
0000E434                            
0000E434                            loc_D9EC:
0000E434 5D48                       		subq.w	#6,a0
0000E436 60EE                       		bra.s	loc_D9DE
0000E438                            ; ===========================================================================
0000E438                            
0000E438                            loc_D9F0:
0000E438 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E43C 4E75                       		rts	
0000E43E                            ; ===========================================================================
0000E43E                            
0000E43E                            loc_D9F6:
0000E43E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E442 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E446 0646 0280                  		addi.w	#$280,d6
0000E44A                            
0000E44A                            loc_DA02:
0000E44A BC50                       		cmp.w	(a0),d6
0000E44C 6300                       		bls.s	loc_DA16
0000E44E 4A28 0004                  		tst.b	4(a0)
0000E452 6A00                       		bpl.s	loc_DA10
0000E454 1412                       		move.b	(a2),d2
0000E456 5212                       		addq.b	#1,(a2)
0000E458                            
0000E458                            loc_DA10:
0000E458 6100 0000                  		bsr.w	loc_DA3C
0000E45C 67EC                       		beq.s	loc_DA02
0000E45E                            
0000E45E                            loc_DA16:
0000E45E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E462 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E466 0446 0300                  		subi.w	#$300,d6
0000E46A 6500                       		bcs.s	loc_DA36
0000E46C                            
0000E46C                            loc_DA24:
0000E46C BC50                       		cmp.w	(a0),d6
0000E46E 6300                       		bls.s	loc_DA36
0000E470 4A28 0004                  		tst.b	4(a0)
0000E474 6A00                       		bpl.s	loc_DA32
0000E476 522A 0001                  		addq.b	#1,1(a2)
0000E47A                            
0000E47A                            loc_DA32:
0000E47A 5C48                       		addq.w	#6,a0
0000E47C 60EE                       		bra.s	loc_DA24
0000E47E                            ; ===========================================================================
0000E47E                            
0000E47E                            loc_DA36:
0000E47E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E482                            
0000E482                            locret_DA3A:
0000E482 4E75                       		rts	
0000E484                            ; ===========================================================================
0000E484                            
0000E484                            loc_DA3C:
0000E484 4A28 0004                  		tst.b	4(a0)
0000E488 6A00                       		bpl.s	OPL_MakeItem
0000E48A 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E490 6700                       		beq.s	OPL_MakeItem
0000E492 5C48                       		addq.w	#6,a0
0000E494 7000                       		moveq	#0,d0
0000E496 4E75                       		rts	
0000E498                            ; ===========================================================================
0000E498                            
0000E498                            OPL_MakeItem:
0000E498 6100 0000                  		bsr.w	SingleObjLoad
0000E49C 6600                       		bne.s	locret_DA8A
0000E49E 3358 0008                  		move.w	(a0)+,8(a1)
0000E4A2 3018                       		move.w	(a0)+,d0
0000E4A4 3200                       		move.w	d0,d1
0000E4A6 0240 0FFF                  		andi.w	#$FFF,d0
0000E4AA 3340 000C                  		move.w	d0,$C(a1)
0000E4AE E559                       		rol.w	#2,d1
0000E4B0 0201 0003                  		andi.b	#3,d1
0000E4B4 1341 0001                  		move.b	d1,1(a1)
0000E4B8 1341 0022                  		move.b	d1,$22(a1)
0000E4BC 1018                       		move.b	(a0)+,d0
0000E4BE 6A00                       		bpl.s	loc_DA80
0000E4C0 0200 007F                  		andi.b	#$7F,d0
0000E4C4 1342 0023                  		move.b	d2,$23(a1)
0000E4C8                            
0000E4C8                            loc_DA80:
0000E4C8 1280                       		move.b	d0,0(a1)
0000E4CA 1358 0028                  		move.b	(a0)+,$28(a1)
0000E4CE 7000                       		moveq	#0,d0
0000E4D0                            
0000E4D0                            locret_DA8A:
0000E4D0 4E75                       		rts	
0000E4D2                            ; ---------------------------------------------------------------------------
0000E4D2                            ; Single object	loading	subroutine
0000E4D2                            ; ---------------------------------------------------------------------------
0000E4D2                            
0000E4D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4D2                            
0000E4D2                            
0000E4D2                            SingleObjLoad:
0000E4D2 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E4D6 303C 005F                  		move.w	#$5F,d0
0000E4DA                            
0000E4DA                            loc_DA94:
0000E4DA 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E4DC 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E4DE 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E4E2 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E4E6                            
0000E4E6                            locret_DAA0:
0000E4E6 4E75                       		rts	
0000E4E8                            ; End of function SingleObjLoad
0000E4E8                            
0000E4E8                            
0000E4E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E4E8                            
0000E4E8                            
0000E4E8                            SingleObjLoad2:
0000E4E8 2248                       		movea.l	a0,a1
0000E4EA 303C F000                  		move.w	#-$1000,d0
0000E4EE 9048                       		sub.w	a0,d0
0000E4F0 EC48                       		lsr.w	#6,d0
0000E4F2 5340                       		subq.w	#1,d0
0000E4F4 6500                       		bcs.s	locret_DABC
0000E4F6                            
0000E4F6                            loc_DAB0:
0000E4F6 4A11                       		tst.b	(a1)
0000E4F8 6700                       		beq.s	locret_DABC
0000E4FA 43E9 0040                  		lea	$40(a1),a1
0000E4FE 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E502                            
0000E502                            locret_DABC:
0000E502 4E75                       		rts	
0000E504                            ; End of function SingleObjLoad2
0000E504                            
0000E504                            ; ===========================================================================
0000E504                            ; ---------------------------------------------------------------------------
0000E504                            ; Object 41 - springs
0000E504                            ; ---------------------------------------------------------------------------
0000E504                            
0000E504                            Obj41:					; XREF: Obj_Index
0000E504 7000                       		moveq	#0,d0
0000E506 1028 0024                  		move.b	$24(a0),d0
0000E50A 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E50E 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E512 6100 FB38                  		bsr.w	DisplaySprite
0000E516 3028 0008                  		move.w	8(a0),d0
0000E51A 0240 FF80                  		andi.w	#$FF80,d0
0000E51E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E522 0441 0080                  		subi.w	#$80,d1
0000E526 0241 FF80                  		andi.w	#$FF80,d1
0000E52A 9041                       		sub.w	d1,d0
0000E52C 0C40 0280                  		cmpi.w	#$280,d0
0000E530 6200 FB56                  		bhi.w	DeleteObject
0000E534 4E75                       		rts	
0000E536                            ; ===========================================================================
0000E536 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E538 0000                       		dc.w Obj41_Up-Obj41_Index
0000E53A 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E53C 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E53E 0000                       		dc.w Obj41_LR-Obj41_Index
0000E540 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E542 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E544 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E546 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E548 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E54A                            
0000E54A F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E54C F600                       		dc.w -$A00		; power	of yellow spring
0000E54E                            ; ===========================================================================
0000E54E                            
0000E54E                            Obj41_Main:				; XREF: Obj41_Index
0000E54E 5428 0024                  		addq.b	#2,$24(a0)
0000E552 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E55A 317C 0523 0002             		move.w	#$523,2(a0)
0000E560 0028 0004 0001             		ori.b	#4,1(a0)
0000E566 117C 0010 0019             		move.b	#$10,$19(a0)
0000E56C 117C 0004 0018             		move.b	#4,$18(a0)
0000E572 1028 0028                  		move.b	$28(a0),d0
0000E576 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E57A 6700                       		beq.s	loc_DB54	; if not, branch
0000E57C 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E582 117C 0001 001C             		move.b	#1,$1C(a0)
0000E588 117C 0003 001A             		move.b	#3,$1A(a0)
0000E58E 317C 0533 0002             		move.w	#$533,2(a0)
0000E594 117C 0008 0019             		move.b	#8,$19(a0)
0000E59A                            
0000E59A                            loc_DB54:
0000E59A 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E59E 6700                       		beq.s	loc_DB66	; if not, branch
0000E5A0 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E5A6 08E8 0001 0022             		bset	#1,$22(a0)
0000E5AC                            
0000E5AC                            loc_DB66:
0000E5AC 0800 0001                  		btst	#1,d0
0000E5B0 6700                       		beq.s	loc_DB72
0000E5B2 08E8 0005 0002             		bset	#5,2(a0)
0000E5B8                            
0000E5B8                            loc_DB72:
0000E5B8 0240 000F                  		andi.w	#$F,d0
0000E5BC 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E5C2 4E75                       		rts	
0000E5C4                            ; ===========================================================================
0000E5C4                            
0000E5C4                            Obj41_Up:				; XREF: Obj41_Index
0000E5C4 323C 001B                  		move.w	#$1B,d1
0000E5C8 343C 0008                  		move.w	#8,d2
0000E5CC 363C 0010                  		move.w	#$10,d3
0000E5D0 3828 0008                  		move.w	8(a0),d4
0000E5D4 6100 0000                  		bsr.w	SolidObject
0000E5D8 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E5DC 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E5DE 4E75                       		rts	
0000E5E0                            ; ===========================================================================
0000E5E0                            
0000E5E0                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E5E0 5428 0024                  		addq.b	#2,$24(a0)
0000E5E4 5069 000C                  		addq.w	#8,$C(a1)
0000E5E8 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E5EE 08E9 0001 0022             		bset	#1,$22(a1)
0000E5F4 08A9 0003 0022             		bclr	#3,$22(a1)
0000E5FA 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E600 137C 0002 0024             		move.b	#2,$24(a1)
0000E606 08A8 0003 0022             		bclr	#3,$22(a0)
0000E60C 4228 0025                  		clr.b	$25(a0)
0000E610 303C 00CC                  		move.w	#$CC,d0
0000E614 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E61A                            
0000E61A                            Obj41_AniUp:				; XREF: Obj41_Index
0000E61A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E620 6000 CA78                  		bra.w	AnimateSprite
0000E624                            ; ===========================================================================
0000E624                            
0000E624                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E624 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E62A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E62E 4E75                       		rts	
0000E630                            ; ===========================================================================
0000E630                            
0000E630                            Obj41_LR:				; XREF: Obj41_Index
0000E630 323C 0013                  		move.w	#$13,d1
0000E634 343C 000E                  		move.w	#$E,d2
0000E638 363C 000F                  		move.w	#$F,d3
0000E63C 3828 0008                  		move.w	8(a0),d4
0000E640 6100 0000                  		bsr.w	SolidObject
0000E644 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E64A 6600                       		bne.s	loc_DC0C
0000E64C 117C 0008 0024             		move.b	#8,$24(a0)
0000E652                            
0000E652                            loc_DC0C:
0000E652 0828 0005 0022             		btst	#5,$22(a0)
0000E658 6600                       		bne.s	Obj41_BounceLR
0000E65A 4E75                       		rts	
0000E65C                            ; ===========================================================================
0000E65C                            
0000E65C                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E65C 5428 0024                  		addq.b	#2,$24(a0)
0000E660 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E666 5069 0008                  		addq.w	#8,8(a1)
0000E66A 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E670 6600                       		bne.s	loc_DC36	; if yes, branch
0000E672 0469 0010 0008             		subi.w	#$10,8(a1)
0000E678 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E67C                            
0000E67C                            loc_DC36:
0000E67C 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E682 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E688 0869 0000 0022             		bchg	#0,$22(a1)
0000E68E 0829 0002 0022             		btst	#2,$22(a1)
0000E694 6600                       		bne.s	loc_DC56
0000E696 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E69C                            
0000E69C                            loc_DC56:
0000E69C 08A8 0005 0022             		bclr	#5,$22(a0)
0000E6A2 08A9 0005 0022             		bclr	#5,$22(a1)
0000E6A8 303C 00CC                  		move.w	#$CC,d0
0000E6AC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E6B2                            
0000E6B2                            Obj41_AniLR:				; XREF: Obj41_Index
0000E6B2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E6B8 6000 C9E0                  		bra.w	AnimateSprite
0000E6BC                            ; ===========================================================================
0000E6BC                            
0000E6BC                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E6BC 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E6C2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E6C6 4E75                       		rts	
0000E6C8                            ; ===========================================================================
0000E6C8                            
0000E6C8                            Obj41_Dwn:				; XREF: Obj41_Index
0000E6C8 323C 001B                  		move.w	#$1B,d1
0000E6CC 343C 0008                  		move.w	#8,d2
0000E6D0 363C 0010                  		move.w	#$10,d3
0000E6D4 3828 0008                  		move.w	8(a0),d4
0000E6D8 6100 0000                  		bsr.w	SolidObject
0000E6DC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E6E2 6600                       		bne.s	loc_DCA4
0000E6E4 117C 000E 0024             		move.b	#$E,$24(a0)
0000E6EA                            
0000E6EA                            loc_DCA4:
0000E6EA 4A28 0025                  		tst.b	$25(a0)
0000E6EE 6600                       		bne.s	locret_DCAE
0000E6F0 4A44                       		tst.w	d4
0000E6F2 6B00                       		bmi.s	Obj41_BounceDwn
0000E6F4                            
0000E6F4                            locret_DCAE:
0000E6F4 4E75                       		rts	
0000E6F6                            ; ===========================================================================
0000E6F6                            
0000E6F6                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E6F6 5428 0024                  		addq.b	#2,$24(a0)
0000E6FA 5169 000C                  		subq.w	#8,$C(a1)
0000E6FE 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E704 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E708 08E9 0001 0022             		bset	#1,$22(a1)
0000E70E 08A9 0003 0022             		bclr	#3,$22(a1)
0000E714 137C 0002 0024             		move.b	#2,$24(a1)
0000E71A 08A8 0003 0022             		bclr	#3,$22(a0)
0000E720 4228 0025                  		clr.b	$25(a0)
0000E724 303C 00CC                  		move.w	#$CC,d0
0000E728 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0000E72E                            
0000E72E                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E72E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E734 6000 C964                  		bra.w	AnimateSprite
0000E738                            ; ===========================================================================
0000E738                            
0000E738                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E738 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E73E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E742 4E75                       		rts	
0000E744                            ; ===========================================================================
0000E744                            Ani_obj41:
0000E744                            	include "_anim\obj41.asm"
0000E744                            ; ---------------------------------------------------------------------------
0000E744                            ; Animation script - springs
0000E744                            ; ---------------------------------------------------------------------------
0000E744 0000                       		dc.w byte_DD02-Ani_obj41
0000E746 0000                       		dc.w byte_DD0E-Ani_obj41
0000E748 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E754 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E760                            		even
0000E760                            		even
0000E760                            
0000E760                            ; ---------------------------------------------------------------------------
0000E760                            ; Sprite mappings - springs
0000E760                            ; ---------------------------------------------------------------------------
0000E760                            Map_obj41:
0000E760                            	include "_maps\obj41.asm"
0000E760                            ; ---------------------------------------------------------------------------
0000E760                            ; Sprite mappings - springs
0000E760                            ; ---------------------------------------------------------------------------
0000E760 0000                       		dc.w byte_DD26-Map_obj41
0000E762 0000                       		dc.w byte_DD31-Map_obj41
0000E764 0000                       		dc.w byte_DD37-Map_obj41
0000E766 0000                       		dc.w byte_DD47-Map_obj41
0000E768 0000                       		dc.w byte_DD4D-Map_obj41
0000E76A 0000                       		dc.w byte_DD53-Map_obj41
0000E76C 02                         byte_DD26:	dc.b 2
0000E76D F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E772 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E777 01                         byte_DD31:	dc.b 1
0000E778 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E77D 03                         byte_DD37:	dc.b 3
0000E77E E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E783 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E788 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E78D 01                         byte_DD47:	dc.b 1
0000E78E F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E793 01                         byte_DD4D:	dc.b 1
0000E794 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E799 04                         byte_DD53:	dc.b 4
0000E79A F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E79F F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E7A4 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E7A9 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E7AE                            		even
0000E7AE                            		even
0000E7AE                            
0000E7AE                            ; ===========================================================================
0000E7AE                            ; ---------------------------------------------------------------------------
0000E7AE                            ; Object 42 - Newtron enemy (GHZ)
0000E7AE                            ; ---------------------------------------------------------------------------
0000E7AE                            
0000E7AE                            Obj42:					; XREF: Obj_Index
0000E7AE 7000                       		moveq	#0,d0
0000E7B0 1028 0024                  		move.b	$24(a0),d0
0000E7B4 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E7B8 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E7BC                            ; ===========================================================================
0000E7BC 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E7BE 0000                       		dc.w Obj42_Action-Obj42_Index
0000E7C0 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E7C2                            ; ===========================================================================
0000E7C2                            
0000E7C2                            Obj42_Main:				; XREF: Obj42_Index
0000E7C2 5428 0024                  		addq.b	#2,$24(a0)
0000E7C6 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E7CE 317C 049B 0002             		move.w	#$49B,2(a0)
0000E7D4 117C 0004 0001             		move.b	#4,1(a0)
0000E7DA 117C 0004 0018             		move.b	#4,$18(a0)
0000E7E0 117C 0014 0019             		move.b	#$14,$19(a0)
0000E7E6 117C 0010 0016             		move.b	#$10,$16(a0)
0000E7EC 117C 0008 0017             		move.b	#8,$17(a0)
0000E7F2                            
0000E7F2                            Obj42_Action:				; XREF: Obj42_Index
0000E7F2 7000                       		moveq	#0,d0
0000E7F4 1028 0025                  		move.b	$25(a0),d0
0000E7F8 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E7FC 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E800 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E806 6100 C892                  		bsr.w	AnimateSprite
0000E80A 6000 0000                  		bra.w	MarkObjGone
0000E80E                            ; ===========================================================================
0000E80E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E810 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E812 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E814 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E816 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E818                            ; ===========================================================================
0000E818                            
0000E818                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E818 08E8 0000 0022             		bset	#0,$22(a0)
0000E81E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E822 9068 0008                  		sub.w	8(a0),d0
0000E826 6400                       		bcc.s	loc_DDEA
0000E828 4440                       		neg.w	d0
0000E82A 08A8 0000 0022             		bclr	#0,$22(a0)
0000E830                            
0000E830                            loc_DDEA:
0000E830 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E834 6400                       		bcc.s	locret_DE12	; if not, branch
0000E836 5428 0025                  		addq.b	#2,$25(a0)
0000E83A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E840 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E844 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E846 317C 249B 0002             		move.w	#$249B,2(a0)
0000E84C 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E852 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E858                            
0000E858                            locret_DE12:
0000E858 4E75                       		rts	
0000E85A                            ; ===========================================================================
0000E85A                            
0000E85A                            Obj42_Type00:				; XREF: Obj42_Index2
0000E85A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E860 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E862 08E8 0000 0022             		bset	#0,$22(a0)
0000E868 3038 D008                  		move.w	($FFFFD008).w,d0
0000E86C 9068 0008                  		sub.w	8(a0),d0
0000E870 6400                       		bcc.s	locret_DE32
0000E872 08A8 0000 0022             		bclr	#0,$22(a0)
0000E878                            
0000E878                            locret_DE32:
0000E878 4E75                       		rts	
0000E87A                            ; ===========================================================================
0000E87A                            
0000E87A                            Obj42_Fall:				; XREF: Obj42_Type00
0000E87A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E880 6600                       		bne.s	loc_DE42
0000E882 117C 000C 0020             		move.b	#$C,$20(a0)
0000E888                            
0000E888                            loc_DE42:
0000E888 6100 F72A                  		bsr.w	ObjectFall
0000E88C 6100 0000                  		bsr.w	ObjHitFloor
0000E890 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E892 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E894 D368 000C                  		add.w	d1,$C(a0)
0000E898 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E89E 5428 0025                  		addq.b	#2,$25(a0)
0000E8A2 117C 0002 001C             		move.b	#2,$1C(a0)
0000E8A8 0828 0005 0002             		btst	#5,2(a0)
0000E8AE 6700                       		beq.s	Obj42_Move
0000E8B0 5228 001C                  		addq.b	#1,$1C(a0)
0000E8B4                            
0000E8B4                            Obj42_Move:
0000E8B4 117C 000D 0020             		move.b	#$D,$20(a0)
0000E8BA 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E8C0 0828 0000 0022             		btst	#0,$22(a0)
0000E8C6 6600                       		bne.s	locret_DE86
0000E8C8 4468 0010                  		neg.w	$10(a0)
0000E8CC                            
0000E8CC                            locret_DE86:
0000E8CC 4E75                       		rts	
0000E8CE                            ; ===========================================================================
0000E8CE                            
0000E8CE                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E8CE 6100 F756                  		bsr.w	SpeedToPos
0000E8D2 6100 0000                  		bsr.w	ObjHitFloor
0000E8D6 0C41 FFF8                  		cmpi.w	#-8,d1
0000E8DA 6D00                       		blt.s	loc_DEA2
0000E8DC 0C41 000C                  		cmpi.w	#$C,d1
0000E8E0 6C00                       		bge.s	loc_DEA2
0000E8E2 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E8E6 4E75                       		rts	
0000E8E8                            ; ===========================================================================
0000E8E8                            
0000E8E8                            loc_DEA2:
0000E8E8 5428 0025                  		addq.b	#2,$25(a0)
0000E8EC 4E75                       		rts	
0000E8EE                            ; ===========================================================================
0000E8EE                            
0000E8EE                            Obj42_Speed:				; XREF: Obj42_Index2
0000E8EE 6100 F736                  		bsr.w	SpeedToPos
0000E8F2 4E75                       		rts	
0000E8F4                            ; ===========================================================================
0000E8F4                            
0000E8F4                            Obj42_Type01:				; XREF: Obj42_Index2
0000E8F4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E8FA 6600                       		bne.s	Obj42_FireMissile
0000E8FC 117C 000C 0020             		move.b	#$C,$20(a0)
0000E902                            
0000E902                            Obj42_FireMissile:
0000E902 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E908 6600                       		bne.s	locret_DF14
0000E90A 4A28 0032                  		tst.b	$32(a0)
0000E90E 6600                       		bne.s	locret_DF14
0000E910 117C 0001 0032             		move.b	#1,$32(a0)
0000E916 6100 FBBA                  		bsr.w	SingleObjLoad
0000E91A 6600                       		bne.s	locret_DF14
0000E91C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E920 3368 0008 0008             		move.w	8(a0),8(a1)
0000E926 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E92C 5169 000C                  		subq.w	#8,$C(a1)
0000E930 337C 0200 0010             		move.w	#$200,$10(a1)
0000E936 303C 0014                  		move.w	#$14,d0
0000E93A 0828 0000 0022             		btst	#0,$22(a0)
0000E940 6600                       		bne.s	loc_DF04
0000E942 4440                       		neg.w	d0
0000E944 4469 0010                  		neg.w	$10(a1)
0000E948                            
0000E948                            loc_DF04:
0000E948 D169 0008                  		add.w	d0,8(a1)
0000E94C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E952 137C 0001 0028             		move.b	#1,$28(a1)
0000E958                            
0000E958                            locret_DF14:
0000E958 4E75                       		rts	
0000E95A                            ; ===========================================================================
0000E95A                            
0000E95A                            Obj42_Delete:				; XREF: Obj42_Index
0000E95A 6000 F72C                  		bra.w	DeleteObject
0000E95E                            ; ===========================================================================
0000E95E                            Ani_obj42:
0000E95E                            	include "_anim\obj42.asm"
0000E95E                            ; ---------------------------------------------------------------------------
0000E95E                            ; Animation script - Newtron enemy
0000E95E                            ; ---------------------------------------------------------------------------
0000E95E 0000                       		dc.w byte_DF24-Ani_obj42
0000E960 0000                       		dc.w byte_DF28-Ani_obj42
0000E962 0000                       		dc.w byte_DF30-Ani_obj42
0000E964 0000                       		dc.w byte_DF34-Ani_obj42
0000E966 0000                       		dc.w byte_DF38-Ani_obj42
0000E968 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E96C 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E974 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E978 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E97C 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E986                            		even
0000E986                            		even
0000E986                            
0000E986                            ; ---------------------------------------------------------------------------
0000E986                            ; Sprite mappings - Newtron enemy (GHZ)
0000E986                            ; ---------------------------------------------------------------------------
0000E986                            Map_obj42:
0000E986                            	include "_maps\obj42.asm"
0000E986                            ; ---------------------------------------------------------------------------
0000E986                            ; Sprite mappings - Newtron enemy (GHZ)
0000E986                            ; ---------------------------------------------------------------------------
0000E986 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E98A 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E98E 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E992 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E996 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E99A 0000                       		dc.w byte_DFF8-Map_obj42
0000E99C 03                         byte_DF58:	dc.b 3
0000E99D EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E9A2 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E9A7 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E9AC 03                         byte_DF68:	dc.b 3
0000E9AD EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E9B2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9B7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E9BC 03                         byte_DF78:	dc.b 3
0000E9BD EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E9C2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9C7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E9CC 04                         byte_DF88:	dc.b 4
0000E9CD EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E9D2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E9D7 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E9DC 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E9E1 03                         byte_DF9D:	dc.b 3
0000E9E2 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E9E7 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E9EC 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E9F1 02                         byte_DFAD:	dc.b 2
0000E9F2 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E9F7 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E9FC 03                         byte_DFB8:	dc.b 3
0000E9FD F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA02 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA07 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000EA0C 03                         byte_DFC8:	dc.b 3
0000EA0D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA12 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA17 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000EA1C 03                         byte_DFD8:	dc.b 3
0000EA1D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA22 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA27 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000EA2C 03                         byte_DFE8:	dc.b 3
0000EA2D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000EA32 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000EA37 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000EA3C 00                         byte_DFF8:	dc.b 0
0000EA3E 00                         		even
0000EA3E 00                         		even
0000EA3E                            
0000EA3E                            ; ===========================================================================
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            ; Object 43 - Roller enemy (SYZ)
0000EA3E                            ; ---------------------------------------------------------------------------
0000EA3E                            
0000EA3E                            Obj43:					; XREF: Obj_Index
0000EA3E 7000                       		moveq	#0,d0
0000EA40 1028 0024                  		move.b	$24(a0),d0
0000EA44 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000EA48 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000EA4C                            ; ===========================================================================
0000EA4C 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000EA4E 0000                       		dc.w Obj43_Action-Obj43_Index
0000EA50                            ; ===========================================================================
0000EA50                            
0000EA50                            Obj43_Main:				; XREF: Obj43_Index
0000EA50 117C 000E 0016             		move.b	#$E,$16(a0)
0000EA56 117C 0008 0017             		move.b	#8,$17(a0)
0000EA5C 6100 F556                  		bsr.w	ObjectFall
0000EA60 6100 0000                  		bsr.w	ObjHitFloor
0000EA64 4A41                       		tst.w	d1
0000EA66 6A00                       		bpl.s	locret_E052
0000EA68 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000EA6C 317C 0000 0012             		move.w	#0,$12(a0)
0000EA72 5428 0024                  		addq.b	#2,$24(a0)
0000EA76 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000EA7E 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000EA84 117C 0004 0001             		move.b	#4,1(a0)
0000EA8A 117C 0004 0018             		move.b	#4,$18(a0)
0000EA90 117C 0010 0019             		move.b	#$10,$19(a0)
0000EA96                            
0000EA96                            locret_E052:
0000EA96 4E75                       		rts	
0000EA98                            ; ===========================================================================
0000EA98                            
0000EA98                            Obj43_Action:				; XREF: Obj43_Index
0000EA98 7000                       		moveq	#0,d0
0000EA9A 1028 0025                  		move.b	$25(a0),d0
0000EA9E 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000EAA2 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000EAA6 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000EAAC 6100 C5EC                  		bsr.w	AnimateSprite
0000EAB0 3028 0008                  		move.w	8(a0),d0
0000EAB4 0240 FF80                  		andi.w	#$FF80,d0
0000EAB8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EABC 0441 0080                  		subi.w	#$80,d1
0000EAC0 0241 FF80                  		andi.w	#$FF80,d1
0000EAC4 9041                       		sub.w	d1,d0
0000EAC6 0C40 0280                  		cmpi.w	#$280,d0
0000EACA 6E00 0000                  		bgt.w	Obj43_ChkGone
0000EACE 6000 F57C                  		bra.w	DisplaySprite
0000EAD2                            ; ===========================================================================
0000EAD2                            
0000EAD2                            Obj43_ChkGone:				; XREF: Obj43_Action
0000EAD2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EAD6 7000                       		moveq	#0,d0
0000EAD8 1028 0023                  		move.b	$23(a0),d0
0000EADC 6700                       		beq.s	Obj43_Delete
0000EADE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EAE4                            
0000EAE4                            Obj43_Delete:
0000EAE4 6000 F5A2                  		bra.w	DeleteObject
0000EAE8                            ; ===========================================================================
0000EAE8 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000EAEA 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000EAEC 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000EAEE 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000EAF0                            ; ===========================================================================
0000EAF0                            
0000EAF0                            Obj43_RollChk:				; XREF: Obj43_Index2
0000EAF0 3038 D008                  		move.w	($FFFFD008).w,d0
0000EAF4 0440 0100                  		subi.w	#$100,d0
0000EAF8 6500                       		bcs.s	loc_E0D2
0000EAFA 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000EAFE 6500                       		bcs.s	loc_E0D2
0000EB00 5828 0025                  		addq.b	#4,$25(a0)
0000EB04 117C 0002 001C             		move.b	#2,$1C(a0)
0000EB0A 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000EB10 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000EB16                            
0000EB16                            loc_E0D2:
0000EB16 588F                       		addq.l	#4,sp
0000EB18 4E75                       		rts	
0000EB1A                            ; ===========================================================================
0000EB1A                            
0000EB1A                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000EB1A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000EB20 6700                       		beq.s	loc_E0F8
0000EB22 5368 0030                  		subq.w	#1,$30(a0)
0000EB26 6A00                       		bpl.s	locret_E0F6
0000EB28 117C 0001 001C             		move.b	#1,$1C(a0)
0000EB2E 317C 0700 0010             		move.w	#$700,$10(a0)
0000EB34 117C 008E 0020             		move.b	#$8E,$20(a0)
0000EB3A                            
0000EB3A                            locret_E0F6:
0000EB3A 4E75                       		rts	
0000EB3C                            ; ===========================================================================
0000EB3C                            
0000EB3C                            loc_E0F8:
0000EB3C 5428 0025                  		addq.b	#2,$25(a0)
0000EB40 4E75                       		rts	
0000EB42                            ; ===========================================================================
0000EB42                            
0000EB42                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000EB42 6100 0000                  		bsr.w	Obj43_Stop
0000EB46 6100 F4DE                  		bsr.w	SpeedToPos
0000EB4A 6100 0000                  		bsr.w	ObjHitFloor
0000EB4E 0C41 FFF8                  		cmpi.w	#-8,d1
0000EB52 6D00                       		blt.s	Obj43_Jump
0000EB54 0C41 000C                  		cmpi.w	#$C,d1
0000EB58 6C00                       		bge.s	Obj43_Jump
0000EB5A D368 000C                  		add.w	d1,$C(a0)
0000EB5E 4E75                       		rts	
0000EB60                            ; ===========================================================================
0000EB60                            
0000EB60                            Obj43_Jump:
0000EB60 5428 0025                  		addq.b	#2,$25(a0)
0000EB64 08E8 0000 0032             		bset	#0,$32(a0)
0000EB6A 6700                       		beq.s	locret_E12E
0000EB6C 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000EB72                            
0000EB72                            locret_E12E:
0000EB72 4E75                       		rts	
0000EB74                            ; ===========================================================================
0000EB74                            
0000EB74                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000EB74 6100 F43E                  		bsr.w	ObjectFall
0000EB78 4A68 0012                  		tst.w	$12(a0)
0000EB7C 6B00                       		bmi.s	locret_E150
0000EB7E 6100 0000                  		bsr.w	ObjHitFloor
0000EB82 4A41                       		tst.w	d1
0000EB84 6A00                       		bpl.s	locret_E150
0000EB86 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000EB8A 5528 0025                  		subq.b	#2,$25(a0)
0000EB8E 317C 0000 0012             		move.w	#0,$12(a0)
0000EB94                            
0000EB94                            locret_E150:
0000EB94 4E75                       		rts	
0000EB96                            
0000EB96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EB96                            
0000EB96                            
0000EB96                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000EB96 4A28 0032                  		tst.b	$32(a0)
0000EB9A 6B00                       		bmi.s	locret_E188
0000EB9C 3038 D008                  		move.w	($FFFFD008).w,d0
0000EBA0 0440 0030                  		subi.w	#$30,d0
0000EBA4 9068 0008                  		sub.w	8(a0),d0
0000EBA8 6400                       		bcc.s	locret_E188
0000EBAA 117C 0000 001C             		move.b	#0,$1C(a0)
0000EBB0 117C 000E 0020             		move.b	#$E,$20(a0)
0000EBB6 4268 0010                  		clr.w	$10(a0)
0000EBBA 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000EBC0 117C 0002 0025             		move.b	#2,$25(a0)
0000EBC6 08E8 0007 0032             		bset	#7,$32(a0)
0000EBCC                            
0000EBCC                            locret_E188:
0000EBCC 4E75                       		rts	
0000EBCE                            ; End of function Obj43_Stop
0000EBCE                            
0000EBCE                            ; ===========================================================================
0000EBCE                            Ani_obj43:
0000EBCE                            	include "_anim\obj43.asm"
0000EBCE                            ; ---------------------------------------------------------------------------
0000EBCE                            ; Animation script - Roller enemy
0000EBCE                            ; ---------------------------------------------------------------------------
0000EBCE 0000                       		dc.w byte_E190-Ani_obj43
0000EBD0 0000                       		dc.w byte_E196-Ani_obj43
0000EBD2 0000                       		dc.w byte_E19C-Ani_obj43
0000EBD4 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000EBDA 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000EBE0 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000EBE6 00                         		even
0000EBE6 00                         		even
0000EBE6                            
0000EBE6                            ; ---------------------------------------------------------------------------
0000EBE6                            ; Sprite mappings - Roller enemy (SYZ)
0000EBE6                            ; ---------------------------------------------------------------------------
0000EBE6                            Map_obj43:
0000EBE6                            	include "_maps\obj43.asm"
0000EBE6                            Map_61da:
0000EBE6 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000EBE8 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000EBEA 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EBEC 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EBEE 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EBF0 02                         Map_61da_A: 	dc.b $2
0000EBF1 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EBF6 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EBFB 02                         Map_61da_15: 	dc.b $2
0000EBFC E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EC01 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EC06 01                         Map_61da_20: 	dc.b $1
0000EC07 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EC0C 01                         Map_61da_26: 	dc.b $1
0000EC0D F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EC12 01                         Map_61da_2C: 	dc.b $1
0000EC13 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EC18                            	even
0000EC18                            	even
0000EC18                            
0000EC18                            ; ===========================================================================
0000EC18                            ; ---------------------------------------------------------------------------
0000EC18                            ; Object 44 - walls (GHZ)
0000EC18                            ; ---------------------------------------------------------------------------
0000EC18                            
0000EC18                            Obj44:					; XREF: Obj_Index
0000EC18 7000                       		moveq	#0,d0
0000EC1A 1028 0024                  		move.b	$24(a0),d0
0000EC1E 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EC22 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EC26                            ; ===========================================================================
0000EC26 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EC28 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EC2A 0000                       		dc.w Obj44_Display-Obj44_Index
0000EC2C                            ; ===========================================================================
0000EC2C                            
0000EC2C                            Obj44_Main:				; XREF: Obj44_Index
0000EC2C 5428 0024                  		addq.b	#2,$24(a0)
0000EC30 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EC38 317C 434C 0002             		move.w	#$434C,2(a0)
0000EC3E 0028 0004 0001             		ori.b	#4,1(a0)
0000EC44 117C 0008 0019             		move.b	#8,$19(a0)
0000EC4A 117C 0006 0018             		move.b	#6,$18(a0)
0000EC50 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EC56 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EC5C 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EC5E 5428 0024                  		addq.b	#2,$24(a0)
0000EC62 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EC64                            ; ===========================================================================
0000EC64                            
0000EC64                            Obj44_Solid:				; XREF: Obj44_Index
0000EC64 323C 0013                  		move.w	#$13,d1
0000EC68 343C 0028                  		move.w	#$28,d2
0000EC6C 6100 A684                  		bsr.w	Obj44_SolidWall
0000EC70                            
0000EC70                            Obj44_Display:				; XREF: Obj44_Index
0000EC70 6100 F3DA                  		bsr.w	DisplaySprite
0000EC74 3028 0008                  		move.w	8(a0),d0
0000EC78 0240 FF80                  		andi.w	#$FF80,d0
0000EC7C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC80 0441 0080                  		subi.w	#$80,d1
0000EC84 0241 FF80                  		andi.w	#$FF80,d1
0000EC88 9041                       		sub.w	d1,d0
0000EC8A 0C40 0280                  		cmpi.w	#$280,d0
0000EC8E 6200 F3F8                  		bhi.w	DeleteObject
0000EC92 4E75                       		rts	
0000EC94                            ; ===========================================================================
0000EC94                            ; ---------------------------------------------------------------------------
0000EC94                            ; Sprite mappings - walls (GHZ)
0000EC94                            ; ---------------------------------------------------------------------------
0000EC94                            Map_obj44:
0000EC94                            	include "_maps\obj44.asm"
0000EC94                            ; ---------------------------------------------------------------------------
0000EC94                            ; Sprite mappings - walls (GHZ)
0000EC94                            ; ---------------------------------------------------------------------------
0000EC94 0000                       		dc.w byte_E256-Map_obj44
0000EC96 0000                       		dc.w byte_E26B-Map_obj44
0000EC98 0000                       		dc.w byte_E280-Map_obj44
0000EC9A 04                         byte_E256:	dc.b 4
0000EC9B E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000ECA0 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ECA5 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ECAA 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ECAF 04                         byte_E26B:	dc.b 4
0000ECB0 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000ECB5 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000ECBA 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000ECBF 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000ECC4 04                         byte_E280:	dc.b 4
0000ECC5 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000ECCA F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000ECCF 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000ECD4 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000ECDA 00                         		even
0000ECDA 00                         		even
0000ECDA                            
0000ECDA                            ; ===========================================================================
0000ECDA                            ; ---------------------------------------------------------------------------
0000ECDA                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000ECDA                            ; ---------------------------------------------------------------------------
0000ECDA                            
0000ECDA                            Obj13:					; XREF: Obj_Index
0000ECDA 7000                       		moveq	#0,d0
0000ECDC 1028 0024                  		move.b	$24(a0),d0
0000ECE0 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000ECE4 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000ECE8 6000 0000                  		bra.w	Obj14_ChkDel
0000ECEC                            ; ===========================================================================
0000ECEC 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000ECEE 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000ECF0                            ; ---------------------------------------------------------------------------
0000ECF0                            ;
0000ECF0                            ; Lava ball production rates
0000ECF0                            ;
0000ECF0 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000ECF6                            ; ===========================================================================
0000ECF6                            
0000ECF6                            Obj13_Main:				; XREF: Obj13_Index
0000ECF6 5428 0024                  		addq.b	#2,$24(a0)
0000ECFA 1028 0028                  		move.b	$28(a0),d0
0000ECFE E848                       		lsr.w	#4,d0
0000ED00 0240 000F                  		andi.w	#$F,d0
0000ED04 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000ED0A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000ED10 0228 000F 0028             		andi.b	#$F,$28(a0)
0000ED16                            
0000ED16                            Obj13_MakeLava:				; XREF: Obj13_Index
0000ED16 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000ED1A 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000ED1C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000ED22 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000ED26 6600                       		bne.s	locret_E302
0000ED28 6100 F7A8                  		bsr.w	SingleObjLoad
0000ED2C 6600                       		bne.s	locret_E302
0000ED2E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000ED32 3368 0008 0008             		move.w	8(a0),8(a1)
0000ED38 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ED3E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000ED44                            
0000ED44                            locret_E302:
0000ED44 4E75                       		rts	
0000ED46                            ; ===========================================================================
0000ED46                            ; ---------------------------------------------------------------------------
0000ED46                            ; Object 14 - lava balls (MZ, SLZ)
0000ED46                            ; ---------------------------------------------------------------------------
0000ED46                            
0000ED46                            Obj14:					; XREF: Obj_Index
0000ED46 7000                       		moveq	#0,d0
0000ED48 1028 0024                  		move.b	$24(a0),d0
0000ED4C 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000ED50 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000ED54 6000 F2F6                  		bra.w	DisplaySprite
0000ED58                            ; ===========================================================================
0000ED58 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000ED5A 0000                       		dc.w Obj14_Action-Obj14_Index
0000ED5C 0000                       		dc.w Obj14_Delete-Obj14_Index
0000ED5E                            
0000ED5E FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000ED68 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000ED70                            ; ===========================================================================
0000ED70                            
0000ED70                            Obj14_Main:				; XREF: Obj14_Index
0000ED70 5428 0024                  		addq.b	#2,$24(a0)
0000ED74 117C 0008 0016             		move.b	#8,$16(a0)
0000ED7A 117C 0008 0017             		move.b	#8,$17(a0)
0000ED80 217C 0000 BC98 0004        		move.l	#Map_obj14,4(a0)
0000ED88 317C 0345 0002             		move.w	#$345,2(a0)
0000ED8E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000ED94 6600                       		bne.s	loc_E35A
0000ED96 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000ED9C                            
0000ED9C                            loc_E35A:
0000ED9C 117C 0004 0001             		move.b	#4,1(a0)
0000EDA2 117C 0003 0018             		move.b	#3,$18(a0)
0000EDA8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EDAE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EDB4 4A28 0029                  		tst.b	$29(a0)
0000EDB8 6700                       		beq.s	Obj14_SetSpeed
0000EDBA 5428 0018                  		addq.b	#2,$18(a0)
0000EDBE                            
0000EDBE                            Obj14_SetSpeed:
0000EDBE 7000                       		moveq	#0,d0
0000EDC0 1028 0028                  		move.b	$28(a0),d0
0000EDC4 D040                       		add.w	d0,d0
0000EDC6 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EDCC 117C 0008 0019             		move.b	#8,$19(a0)
0000EDD2 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EDD8 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EDDA 117C 0010 0019             		move.b	#$10,$19(a0)
0000EDE0 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EDE6 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EDEC 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EDF2                            
0000EDF2                            Obj14_PlaySnd:
0000EDF2 303C 00AE                  		move.w	#$AE,d0
0000EDF6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EDFC                            
0000EDFC                            Obj14_Action:				; XREF: Obj14_Index
0000EDFC 7000                       		moveq	#0,d0
0000EDFE 1028 0028                  		move.b	$28(a0),d0
0000EE02 D040                       		add.w	d0,d0
0000EE04 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EE08 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EE0C 6100 F218                  		bsr.w	SpeedToPos
0000EE10 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EE16 6100 C282                  		bsr.w	AnimateSprite
0000EE1A                            
0000EE1A                            Obj14_ChkDel:				; XREF: Obj13
0000EE1A 3028 0008                  		move.w	8(a0),d0
0000EE1E 0240 FF80                  		andi.w	#$FF80,d0
0000EE22 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE26 0441 0080                  		subi.w	#$80,d1
0000EE2A 0241 FF80                  		andi.w	#$FF80,d1
0000EE2E 9041                       		sub.w	d1,d0
0000EE30 0C40 0280                  		cmpi.w	#$280,d0
0000EE34 6200 F252                  		bhi.w	DeleteObject
0000EE38 4E75                       		rts	
0000EE3A                            ; ===========================================================================
0000EE3A 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EE3E 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EE42 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EE46 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EE4A 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EE4C                            ; ===========================================================================
0000EE4C                            ; lavaball types 00-03 fly up and fall back down
0000EE4C                            
0000EE4C                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EE4C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EE52 3028 0030                  		move.w	$30(a0),d0
0000EE56 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EE5A 6400                       		bcc.s	loc_E41E	; if not, branch
0000EE5C 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EE60                            
0000EE60                            loc_E41E:
0000EE60 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE66 4A68 0012                  		tst.w	$12(a0)
0000EE6A 6A00                       		bpl.s	locret_E430
0000EE6C 08E8 0001 0022             		bset	#1,$22(a0)
0000EE72                            
0000EE72                            locret_E430:
0000EE72 4E75                       		rts	
0000EE74                            ; ===========================================================================
0000EE74                            ; lavaball type	04 flies up until it hits the ceiling
0000EE74                            
0000EE74                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EE74 08E8 0001 0022             		bset	#1,$22(a0)
0000EE7A 6100 0000                  		bsr.w	ObjHitCeiling
0000EE7E 4A41                       		tst.w	d1
0000EE80 6A00                       		bpl.s	locret_E452
0000EE82 117C 0008 0028             		move.b	#8,$28(a0)
0000EE88 117C 0001 001C             		move.b	#1,$1C(a0)
0000EE8E 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EE94                            
0000EE94                            locret_E452:
0000EE94 4E75                       		rts	
0000EE96                            ; ===========================================================================
0000EE96                            ; lavaball type	05 falls down until it hits the	floor
0000EE96                            
0000EE96                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EE96 08A8 0001 0022             		bclr	#1,$22(a0)
0000EE9C 6100 0000                  		bsr.w	ObjHitFloor
0000EEA0 4A41                       		tst.w	d1
0000EEA2 6A00                       		bpl.s	locret_E474
0000EEA4 117C 0008 0028             		move.b	#8,$28(a0)
0000EEAA 117C 0001 001C             		move.b	#1,$1C(a0)
0000EEB0 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EEB6                            
0000EEB6                            locret_E474:
0000EEB6 4E75                       		rts	
0000EEB8                            ; ===========================================================================
0000EEB8                            ; lavaball types 06-07 move sideways
0000EEB8                            
0000EEB8                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EEB8 08E8 0000 0022             		bset	#0,$22(a0)
0000EEBE 76F8                       		moveq	#-8,d3
0000EEC0 6100 0000                  		bsr.w	ObjHitWallLeft
0000EEC4 4A41                       		tst.w	d1
0000EEC6 6A00                       		bpl.s	locret_E498
0000EEC8 117C 0008 0028             		move.b	#8,$28(a0)
0000EECE 117C 0003 001C             		move.b	#3,$1C(a0)
0000EED4 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEDA                            
0000EEDA                            locret_E498:
0000EEDA 4E75                       		rts	
0000EEDC                            ; ===========================================================================
0000EEDC                            
0000EEDC                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EEDC 08A8 0000 0022             		bclr	#0,$22(a0)
0000EEE2 7608                       		moveq	#8,d3
0000EEE4 6100 0000                  		bsr.w	ObjHitWallRight
0000EEE8 4A41                       		tst.w	d1
0000EEEA 6A00                       		bpl.s	locret_E4BC
0000EEEC 117C 0008 0028             		move.b	#8,$28(a0)
0000EEF2 117C 0003 001C             		move.b	#3,$1C(a0)
0000EEF8 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EEFE                            
0000EEFE                            locret_E4BC:
0000EEFE 4E75                       		rts	
0000EF00                            ; ===========================================================================
0000EF00                            
0000EF00                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EF00 4E75                       		rts	
0000EF02                            ; ===========================================================================
0000EF02                            
0000EF02                            Obj14_Delete:				; XREF: Obj14_Index
0000EF02 6000 F184                  		bra.w	DeleteObject
0000EF06                            ; ===========================================================================
0000EF06                            Ani_obj14:
0000EF06                            	include "_anim\obj14.asm"
0000EF06                            ; ---------------------------------------------------------------------------
0000EF06                            ; Animation script - lava balls
0000EF06                            ; ---------------------------------------------------------------------------
0000EF06 0000                       		dc.w byte_E4CC-Ani_obj14
0000EF08 0000                       		dc.w byte_E4D2-Ani_obj14
0000EF0A 0000                       		dc.w byte_E4D6-Ani_obj14
0000EF0C 0000                       		dc.w byte_E4DC-Ani_obj14
0000EF0E 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EF14 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EF18 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EF1E 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EF22                            		even
0000EF22                            		even
0000EF22                            
0000EF22                            ; ===========================================================================
0000EF22                            ; ---------------------------------------------------------------------------
0000EF22                            ; Object 6D - flame thrower (SBZ)
0000EF22                            ; ---------------------------------------------------------------------------
0000EF22                            
0000EF22                            Obj6D:					; XREF: Obj_Index
0000EF22 7000                       		moveq	#0,d0
0000EF24 1028 0024                  		move.b	$24(a0),d0
0000EF28 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EF2C 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EF30                            ; ===========================================================================
0000EF30 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EF32 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EF34                            ; ===========================================================================
0000EF34                            
0000EF34                            Obj6D_Main:				; XREF: Obj6D_Index
0000EF34 5428 0024                  		addq.b	#2,$24(a0)
0000EF38 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EF40 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EF46 0028 0004 0001             		ori.b	#4,1(a0)
0000EF4C 117C 0001 0018             		move.b	#1,$18(a0)
0000EF52 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EF58 117C 000C 0019             		move.b	#$C,$19(a0)
0000EF5E 1028 0028                  		move.b	$28(a0),d0
0000EF62 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EF66 D040                       		add.w	d0,d0		; multiply by 2
0000EF68 3140 0030                  		move.w	d0,$30(a0)
0000EF6C 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EF70 1028 0028                  		move.b	$28(a0),d0
0000EF74 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EF78 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EF7A 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EF7E 117C 000A 0036             		move.b	#$A,$36(a0)
0000EF84 0828 0001 0022             		btst	#1,$22(a0)
0000EF8A 6700                       		beq.s	Obj6D_Action
0000EF8C 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF92 117C 0015 0036             		move.b	#$15,$36(a0)
0000EF98                            
0000EF98                            Obj6D_Action:				; XREF: Obj6D_Index
0000EF98 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EF9C 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EF9E 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EFA4 0868 0000 001C             		bchg	#0,$1C(a0)
0000EFAA 6700                       		beq.s	loc_E57A
0000EFAC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EFB2 303C 00B3                  		move.w	#$B3,d0
0000EFB6 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000EFBC                            
0000EFBC                            loc_E57A:
0000EFBC 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EFC2 6100 C0D6                  		bsr.w	AnimateSprite
0000EFC6 117C 0000 0020             		move.b	#0,$20(a0)
0000EFCC 1028 0036                  		move.b	$36(a0),d0
0000EFD0 B028 001A                  		cmp.b	$1A(a0),d0
0000EFD4 6600                       		bne.s	Obj6D_ChkDel
0000EFD6 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EFDC                            
0000EFDC                            Obj6D_ChkDel:
0000EFDC 3028 0008                  		move.w	8(a0),d0
0000EFE0 0240 FF80                  		andi.w	#$FF80,d0
0000EFE4 3238 F700                  		move.w	($FFFFF700).w,d1
0000EFE8 0441 0080                  		subi.w	#$80,d1
0000EFEC 0241 FF80                  		andi.w	#$FF80,d1
0000EFF0 9041                       		sub.w	d1,d0
0000EFF2 0C40 0280                  		cmpi.w	#$280,d0
0000EFF6 6200 F090                  		bhi.w	DeleteObject
0000EFFA 6000 F050                  		bra.w	DisplaySprite
0000EFFE                            ; ===========================================================================
0000EFFE                            Ani_obj6D:
0000EFFE                            	include "_anim\obj6D.asm"
0000EFFE                            ; ---------------------------------------------------------------------------
0000EFFE                            ; Animation script - flamethrower (SBZ)
0000EFFE                            ; ---------------------------------------------------------------------------
0000EFFE 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F000 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F002 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F004 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F006 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F014 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F01E 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F02C 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F036                            		even
0000F036                            		even
0000F036                            
0000F036                            ; ---------------------------------------------------------------------------
0000F036                            ; Sprite mappings - flame thrower (SBZ)
0000F036                            ; ---------------------------------------------------------------------------
0000F036                            Map_obj6D:
0000F036                            	include "_maps\obj6D.asm"
0000F036                            ; ---------------------------------------------------------------------------
0000F036                            ; Sprite mappings - flame thrower (SBZ)
0000F036                            ; ---------------------------------------------------------------------------
0000F036 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F03A 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F03E 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F042 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F046 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F04A 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F04E 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F052 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F056 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F05A 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F05E 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F062 01                         byte_E620:	dc.b 1
0000F063 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F068 02                         byte_E626:	dc.b 2
0000F069 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F06E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F073 02                         byte_E631:	dc.b 2
0000F074 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F079 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F07E 03                         byte_E63C:	dc.b 3
0000F07F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F084 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F089 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F08E 03                         byte_E64C:	dc.b 3
0000F08F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F094 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F099 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F09E 04                         byte_E65C:	dc.b 4
0000F09F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0A4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F0A9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0AE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0B3 04                         byte_E671:	dc.b 4
0000F0B4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F0B9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0BE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0C3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0C8 05                         byte_E686:	dc.b 5
0000F0C9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F0CE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F0D3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F0D8 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F0DD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0E2 05                         byte_E6A0:	dc.b 5
0000F0E3 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F0E8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F0ED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F0F2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F0F7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F0FC 06                         byte_E6BA:	dc.b 6
0000F0FD E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F102 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F107 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F10C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F111 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F116 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F11B 06                         byte_E6D9:	dc.b 6
0000F11C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F121 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F126 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F12B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F130 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F135 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F13A 01                         byte_E6F8:	dc.b 1
0000F13B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F140 02                         byte_E6FE:	dc.b 2
0000F141 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F146 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F14B 02                         byte_E709:	dc.b 2
0000F14C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F151 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F156 03                         byte_E714:	dc.b 3
0000F157 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F15C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F161 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F166 03                         byte_E724:	dc.b 3
0000F167 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F16C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F171 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F176 04                         byte_E734:	dc.b 4
0000F177 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F17C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F181 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F186 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F18B 04                         byte_E749:	dc.b 4
0000F18C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F191 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F196 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F19B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1A0 05                         byte_E75E:	dc.b 5
0000F1A1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F1A6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1AB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F1B0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1B5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1BA 05                         byte_E778:	dc.b 5
0000F1BB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1C0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F1C5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F1CA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1CF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F1D4 06                         byte_E792:	dc.b 6
0000F1D5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F1DA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F1DF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F1E4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F1E9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F1EE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F1F3 06                         byte_E7B1:	dc.b 6
0000F1F4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F1F9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F1FE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F203 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F208 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F20D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F212                            		even
0000F212                            		even
0000F212                            
0000F212                            ; ===========================================================================
0000F212                            ; ---------------------------------------------------------------------------
0000F212                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F212                            ; ---------------------------------------------------------------------------
0000F212                            
0000F212                            Obj46:					; XREF: Obj_Index
0000F212 7000                       		moveq	#0,d0
0000F214 1028 0024                  		move.b	$24(a0),d0
0000F218 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F21C 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F220                            ; ===========================================================================
0000F220 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F222 0000                       		dc.w Obj46_Action-Obj46_Index
0000F224                            ; ===========================================================================
0000F224                            
0000F224                            Obj46_Main:				; XREF: Obj46_Index
0000F224 5428 0024                  		addq.b	#2,$24(a0)
0000F228 117C 000F 0016             		move.b	#$F,$16(a0)
0000F22E 117C 000F 0017             		move.b	#$F,$17(a0)
0000F234 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F23C 317C 4000 0002             		move.w	#$4000,2(a0)
0000F242 117C 0004 0001             		move.b	#4,1(a0)
0000F248 117C 0003 0018             		move.b	#3,$18(a0)
0000F24E 117C 0010 0019             		move.b	#$10,$19(a0)
0000F254 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F25A 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F260                            
0000F260                            Obj46_Action:				; XREF: Obj46_Index
0000F260 4A28 0001                  		tst.b	1(a0)
0000F264 6A00                       		bpl.s	Obj46_ChkDel
0000F266 7000                       		moveq	#0,d0
0000F268 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F26C 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F270 D040                       		add.w	d0,d0
0000F272 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F276 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F27A 323C 001B                  		move.w	#$1B,d1
0000F27E 343C 0010                  		move.w	#$10,d2
0000F282 363C 0011                  		move.w	#$11,d3
0000F286 3828 0008                  		move.w	8(a0),d4
0000F28A 6100 0000                  		bsr.w	SolidObject
0000F28E                            
0000F28E                            Obj46_ChkDel:
0000F28E 6100 EDBC                  		bsr.w	DisplaySprite
0000F292 3028 0008                  		move.w	8(a0),d0
0000F296 0240 FF80                  		andi.w	#$FF80,d0
0000F29A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F29E 0441 0080                  		subi.w	#$80,d1
0000F2A2 0241 FF80                  		andi.w	#$FF80,d1
0000F2A6 9041                       		sub.w	d1,d0
0000F2A8 0C40 0280                  		cmpi.w	#$280,d0
0000F2AC 6200 EDDA                  		bhi.w	DeleteObject
0000F2B0 4E75                       		rts	
0000F2B2                            ; ===========================================================================
0000F2B2 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F2B4 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F2B6 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F2B8 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F2BA 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F2BC                            ; ===========================================================================
0000F2BC                            
0000F2BC                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F2BC 4E75                       		rts	
0000F2BE                            ; ===========================================================================
0000F2BE                            
0000F2BE                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F2BE 3038 D008                  		move.w	($FFFFD008).w,d0
0000F2C2 9068 0008                  		sub.w	8(a0),d0
0000F2C6 6400                       		bcc.s	loc_E888
0000F2C8 4440                       		neg.w	d0
0000F2CA                            
0000F2CA                            loc_E888:
0000F2CA 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F2CE 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F2D0 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F2D6                            
0000F2D6                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F2D6 7000                       		moveq	#0,d0
0000F2D8 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F2DC 0828 0003 0028             		btst	#3,$28(a0)
0000F2E2 6700                       		beq.s	loc_E8A8
0000F2E4 4440                       		neg.w	d0
0000F2E6 0640 0010                  		addi.w	#$10,d0
0000F2EA                            
0000F2EA                            loc_E8A8:
0000F2EA 3228 0030                  		move.w	$30(a0),d1
0000F2EE 9240                       		sub.w	d0,d1
0000F2F0 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F2F4 4E75                       		rts	
0000F2F6                            ; ===========================================================================
0000F2F6                            
0000F2F6                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F2F6 6100 ED2E                  		bsr.w	SpeedToPos
0000F2FA 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F300 6100 0000                  		bsr.w	ObjHitFloor
0000F304 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F306 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F30A D368 000C                  		add.w	d1,$C(a0)
0000F30E 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F312 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F318 117C 0004 0028             		move.b	#4,$28(a0)
0000F31E 3011                       		move.w	(a1),d0
0000F320 0240 03FF                  		andi.w	#$3FF,d0
0000F324 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F328 6400                       		bcc.s	locret_E8EE
0000F32A 117C 0000 0028             		move.b	#0,$28(a0)
0000F330                            
0000F330                            locret_E8EE:
0000F330 4E75                       		rts	
0000F332                            ; ===========================================================================
0000F332                            
0000F332                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F332 7000                       		moveq	#0,d0
0000F334 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F338 E648                       		lsr.w	#3,d0
0000F33A 3228 0030                  		move.w	$30(a0),d1
0000F33E 9240                       		sub.w	d0,d1
0000F340 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F344 4E75                       		rts	
0000F346                            ; ===========================================================================
0000F346                            ; ---------------------------------------------------------------------------
0000F346                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F346                            ; ---------------------------------------------------------------------------
0000F346                            Map_obj46:
0000F346                            	include "_maps\obj46.asm"
0000F346                            ; ---------------------------------------------------------------------------
0000F346                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F346                            ; ---------------------------------------------------------------------------
0000F346 0000                       		dc.w byte_E906-Map_obj46
0000F348 01                         byte_E906:	dc.b 1
0000F349 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F34E                            		even
0000F34E                            		even
0000F34E                            
0000F34E                            ; ===========================================================================
0000F34E                            ; ---------------------------------------------------------------------------
0000F34E                            ; Object 12 - lamp (SYZ)
0000F34E                            ; ---------------------------------------------------------------------------
0000F34E                            
0000F34E                            Obj12:					; XREF: Obj_Index
0000F34E 7000                       		moveq	#0,d0
0000F350 1028 0024                  		move.b	$24(a0),d0
0000F354 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F358 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F35C                            ; ===========================================================================
0000F35C 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F35E 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F360                            ; ===========================================================================
0000F360                            
0000F360                            Obj12_Main:				; XREF: Obj12_Index
0000F360 5428 0024                  		addq.b	#2,$24(a0)
0000F364 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F36C 317C 0000 0002             		move.w	#0,2(a0)
0000F372 117C 0004 0001             		move.b	#4,1(a0)
0000F378 117C 0010 0019             		move.b	#$10,$19(a0)
0000F37E 117C 0006 0018             		move.b	#6,$18(a0)
0000F384                            
0000F384                            Obj12_Animate:				; XREF: Obj12_Index
0000F384 5328 001E                  		subq.b	#1,$1E(a0)
0000F388 6A00                       		bpl.s	Obj12_ChkDel
0000F38A 117C 0007 001E             		move.b	#7,$1E(a0)
0000F390 5228 001A                  		addq.b	#1,$1A(a0)
0000F394 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F39A 6500                       		bcs.s	Obj12_ChkDel
0000F39C 117C 0000 001A             		move.b	#0,$1A(a0)
0000F3A2                            
0000F3A2                            Obj12_ChkDel:
0000F3A2 3028 0008                  		move.w	8(a0),d0
0000F3A6 0240 FF80                  		andi.w	#$FF80,d0
0000F3AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3AE 0441 0080                  		subi.w	#$80,d1
0000F3B2 0241 FF80                  		andi.w	#$FF80,d1
0000F3B6 9041                       		sub.w	d1,d0
0000F3B8 0C40 0280                  		cmpi.w	#$280,d0
0000F3BC 6200 ECCA                  		bhi.w	DeleteObject
0000F3C0 6000 EC8A                  		bra.w	DisplaySprite
0000F3C4                            ; ===========================================================================
0000F3C4                            ; ---------------------------------------------------------------------------
0000F3C4                            ; Sprite mappings - lamp (SYZ)
0000F3C4                            ; ---------------------------------------------------------------------------
0000F3C4                            Map_obj12:
0000F3C4                            	include "_maps\obj12.asm"
0000F3C4                            ; ---------------------------------------------------------------------------
0000F3C4                            ; Sprite mappings - lamp (SYZ)
0000F3C4                            ; ---------------------------------------------------------------------------
0000F3C4 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F3C8 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F3CC 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F3D0 02                         byte_E98E:	dc.b 2
0000F3D1 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F3D6 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F3DB 02                         byte_E999:	dc.b 2
0000F3DC F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F3E1 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F3E6 02                         byte_E9A4:	dc.b 2
0000F3E7 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F3EC 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F3F1 02                         byte_E9AF:	dc.b 2
0000F3F2 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F3F7 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F3FC 02                         byte_E9BA:	dc.b 2
0000F3FD F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F402 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F407 02                         byte_E9C5:	dc.b 2
0000F408 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F40D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F412                            		even
0000F412                            		even
0000F412                            
0000F412                            ; ===========================================================================
0000F412                            ; ---------------------------------------------------------------------------
0000F412                            ; Object 47 - pinball bumper (SYZ)
0000F412                            ; ---------------------------------------------------------------------------
0000F412                            
0000F412                            Obj47:					; XREF: Obj_Index
0000F412 7000                       		moveq	#0,d0
0000F414 1028 0024                  		move.b	$24(a0),d0
0000F418 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F41C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F420                            ; ===========================================================================
0000F420 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F422 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F424                            ; ===========================================================================
0000F424                            
0000F424                            Obj47_Main:				; XREF: Obj47_Index
0000F424 5428 0024                  		addq.b	#2,$24(a0)
0000F428 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F430 317C 0380 0002             		move.w	#$380,2(a0)
0000F436 117C 0004 0001             		move.b	#4,1(a0)
0000F43C 117C 0010 0019             		move.b	#$10,$19(a0)
0000F442 117C 0001 0018             		move.b	#1,$18(a0)
0000F448 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F44E                            
0000F44E                            Obj47_Hit:				; XREF: Obj47_Index
0000F44E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F452 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F456 4228 0021                  		clr.b	$21(a0)
0000F45A 43F8 D000                  		lea	($FFFFD000).w,a1
0000F45E 3228 0008                  		move.w	8(a0),d1
0000F462 3428 000C                  		move.w	$C(a0),d2
0000F466 9269 0008                  		sub.w	8(a1),d1
0000F46A 9469 000C                  		sub.w	$C(a1),d2
0000F46E 4EB9 0000 3002             		jsr	(CalcAngle).l
0000F474 4EB9 0000 2D34             		jsr	(CalcSine).l
0000F47A C3FC F900                  		muls.w	#-$700,d1
0000F47E E081                       		asr.l	#8,d1
0000F480 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F484 C1FC F900                  		muls.w	#-$700,d0
0000F488 E080                       		asr.l	#8,d0
0000F48A 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F48E 08E9 0001 0022             		bset	#1,$22(a1)
0000F494 08A9 0004 0022             		bclr	#4,$22(a1)
0000F49A 08A9 0005 0022             		bclr	#5,$22(a1)
0000F4A0 4229 003C                  		clr.b	$3C(a1)
0000F4A4 117C 0001 001C             		move.b	#1,$1C(a0)
0000F4AA 303C 00B4                  		move.w	#$B4,d0
0000F4AE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F4B4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F4B8 7000                       		moveq	#0,d0
0000F4BA 1028 0023                  		move.b	$23(a0),d0
0000F4BE 6700                       		beq.s	Obj47_Score
0000F4C0 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F4C6 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F4C8 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F4CC                            
0000F4CC                            Obj47_Score:
0000F4CC 7001                       		moveq	#1,d0
0000F4CE 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F4D4 6100 EFFC                  		bsr.w	SingleObjLoad
0000F4D8 6600                       		bne.s	Obj47_Display
0000F4DA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F4DE 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4E4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4EA 137C 0004 001A             		move.b	#4,$1A(a1)
0000F4F0                            
0000F4F0                            Obj47_Display:
0000F4F0 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F4F6 6100 BBA2                  		bsr.w	AnimateSprite
0000F4FA 3028 0008                  		move.w	8(a0),d0
0000F4FE 0240 FF80                  		andi.w	#$FF80,d0
0000F502 3238 F700                  		move.w	($FFFFF700).w,d1
0000F506 0441 0080                  		subi.w	#$80,d1
0000F50A 0241 FF80                  		andi.w	#$FF80,d1
0000F50E 9041                       		sub.w	d1,d0
0000F510 0C40 0280                  		cmpi.w	#$280,d0
0000F514 6200                       		bhi.s	Obj47_ChkHit
0000F516 6000 EB34                  		bra.w	DisplaySprite
0000F51A                            ; ===========================================================================
0000F51A                            
0000F51A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F51A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F51E 7000                       		moveq	#0,d0
0000F520 1028 0023                  		move.b	$23(a0),d0
0000F524 6700                       		beq.s	Obj47_Delete
0000F526 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F52C                            
0000F52C                            Obj47_Delete:
0000F52C 6000 EB5A                  		bra.w	DeleteObject
0000F530                            ; ===========================================================================
0000F530                            Ani_obj47:
0000F530                            	include "_anim\obj47.asm"
0000F530                            ; ---------------------------------------------------------------------------
0000F530                            ; Animation script - flamethrower (SBZ)
0000F530                            ; ---------------------------------------------------------------------------
0000F530 0000                       		dc.w byte_EAF4-Ani_obj47
0000F532 0000                       		dc.w byte_EAF8-Ani_obj47
0000F534 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F538 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F540                            		even
0000F540                            		even
0000F540                            
0000F540                            ; ---------------------------------------------------------------------------
0000F540                            ; Sprite mappings - pinball bumper (SYZ)
0000F540                            ; ---------------------------------------------------------------------------
0000F540                            Map_obj47:
0000F540                            	include "_maps\obj47.asm"
0000F540                            ; ---------------------------------------------------------------------------
0000F540                            ; Sprite mappings - pinball bumper (SYZ)
0000F540                            ; ---------------------------------------------------------------------------
0000F540 0000                       		dc.w byte_EB06-Map_obj47
0000F542 0000                       		dc.w byte_EB11-Map_obj47
0000F544 0000                       		dc.w byte_EB1C-Map_obj47
0000F546 02                         byte_EB06:	dc.b 2
0000F547 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F54C F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F551 02                         byte_EB11:	dc.b 2
0000F552 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F557 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F55C 02                         byte_EB1C:	dc.b 2
0000F55D F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F562 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F568 00                         		even
0000F568 00                         		even
0000F568                            
0000F568                            ; ===========================================================================
0000F568                            ; ---------------------------------------------------------------------------
0000F568                            ; Object 0D - signpost at the end of a level
0000F568                            ; ---------------------------------------------------------------------------
0000F568                            
0000F568                            Obj0D:					; XREF: Obj_Index
0000F568 7000                       		moveq	#0,d0
0000F56A 1028 0024                  		move.b	$24(a0),d0
0000F56E 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F572 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F576 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F57C 6100 BB1C                  		bsr.w	AnimateSprite
0000F580 6100 EACA                  		bsr.w	DisplaySprite
0000F584 3028 0008                  		move.w	8(a0),d0
0000F588 0240 FF80                  		andi.w	#$FF80,d0
0000F58C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F590 0441 0080                  		subi.w	#$80,d1
0000F594 0241 FF80                  		andi.w	#$FF80,d1
0000F598 9041                       		sub.w	d1,d0
0000F59A 0C40 0280                  		cmpi.w	#$280,d0
0000F59E 6200 EAE8                  		bhi.w	DeleteObject
0000F5A2 4E75                       		rts	
0000F5A4                            ; ===========================================================================
0000F5A4 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F5A6 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F5A8 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F5AA 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F5AC 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F5AE                            ; ===========================================================================
0000F5AE                            
0000F5AE                            Obj0D_Main:				; XREF: Obj0D_Index
0000F5AE 5428 0024                  		addq.b	#2,$24(a0)
0000F5B2 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F5BA 317C 0680 0002             		move.w	#$680,2(a0)
0000F5C0 117C 0004 0001             		move.b	#4,1(a0)
0000F5C6 117C 0018 0019             		move.b	#$18,$19(a0)
0000F5CC 117C 0004 0018             		move.b	#4,$18(a0)
0000F5D2                            
0000F5D2                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F5D2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F5D6 9068 0008                  		sub.w	8(a0),d0
0000F5DA 6500                       		bcs.s	locret_EBBA
0000F5DC 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F5E0 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F5E2 303C 00CF                  		move.w	#$CF,d0
0000F5E6 4EB9 0000 1594             		jsr	(PlaySound).l	; play signpost	sound
0000F5EC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F5F0 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F5F6 5428 0024                  		addq.b	#2,$24(a0)
0000F5FA                            
0000F5FA                            locret_EBBA:
0000F5FA 4E75                       		rts	
0000F5FC                            ; ===========================================================================
0000F5FC                            
0000F5FC                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F5FC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F600 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F602 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F608 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F60C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F612 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F614 5428 0024                  		addq.b	#2,$24(a0)
0000F618                            
0000F618                            Obj0D_Sparkle:
0000F618 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F61C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F61E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F624 7000                       		moveq	#0,d0
0000F626 1028 0034                  		move.b	$34(a0),d0
0000F62A 5428 0034                  		addq.b	#2,$34(a0)
0000F62E 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F634 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F638 6100 EE98                  		bsr.w	SingleObjLoad
0000F63C 6600                       		bne.s	locret_EC42
0000F63E 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F642 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F648 101A                       		move.b	(a2)+,d0
0000F64A 4880                       		ext.w	d0
0000F64C D068 0008                  		add.w	8(a0),d0
0000F650 3340 0008                  		move.w	d0,8(a1)
0000F654 101A                       		move.b	(a2)+,d0
0000F656 4880                       		ext.w	d0
0000F658 D068 000C                  		add.w	$C(a0),d0
0000F65C 3340 000C                  		move.w	d0,$C(a1)
0000F660 237C 0000 A838 0004        		move.l	#Map_obj25,4(a1)
0000F668 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F66E 137C 0004 0001             		move.b	#4,1(a1)
0000F674 137C 0002 0018             		move.b	#2,$18(a1)
0000F67A 137C 0008 0019             		move.b	#8,$19(a1)
0000F680                            
0000F680                            locret_EC42:
0000F680 4E75                       		rts	
0000F682                            ; ===========================================================================
0000F682 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F684 0808                       		dc.b	8,   8
0000F686 F000                       		dc.b -$10,   0
0000F688 18F8                       		dc.b  $18,  -8
0000F68A 00F8                       		dc.b	0,  -8
0000F68C 1000                       		dc.b  $10,   0
0000F68E E808                       		dc.b -$18,   8
0000F690 1810                       		dc.b  $18, $10
0000F692                            ; ===========================================================================
0000F692                            
0000F692                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F692 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F696 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F69A 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F6A0 6600                       		bne.s	loc_EC70
0000F6A2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F6A8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F6AE 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F6B0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F6B6 6000                       		bra.s	loc_EC70
0000F6B8                            
0000F6B8                            Obj0D_MoveLeft:
0000F6B8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F6BE                            
0000F6BE                            loc_EC70:
0000F6BE 4A38 D000                  		tst.b	($FFFFD000).w
0000F6C2 6700                       		beq.s	loc_EC86
0000F6C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6C8 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F6CC 0641 0128                  		addi.w	#$128,d1
0000F6D0 B041                       		cmp.w	d1,d0
0000F6D2 6500                       		bcs.s	locret_ECEE
0000F6D4                            
0000F6D4                            loc_EC86:
0000F6D4 5428 0024                  		addq.b	#2,$24(a0)
0000F6D8                            
0000F6D8                            ; ---------------------------------------------------------------------------
0000F6D8                            ; Subroutine to	set up bonuses at the end of an	act
0000F6D8                            ; ---------------------------------------------------------------------------
0000F6D8                            
0000F6D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F6D8                            
0000F6D8                            
0000F6D8                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F6D8 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F6DC 6600                       		bne.s	locret_ECEE
0000F6DE 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F6E4 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F6E8 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F6EC 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F6F2 7010                       		moveq	#$10,d0
0000F6F4 4EB9 0000 17B0             		jsr	(LoadPLC2).l	; load title card patterns
0000F6FA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F700 7000                       		moveq	#0,d0
0000F702 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F706 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F70A 7200                       		moveq	#0,d1
0000F70C 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F710 D041                       		add.w	d1,d0		; add up your time
0000F712 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F716 7214                       		moveq	#$14,d1
0000F718 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F71A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F71C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F71E                            
0000F71E                            loc_ECD0:
0000F71E D040                       		add.w	d0,d0
0000F720 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F726 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F72A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F72E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F732 303C 008E                  		move.w	#$8E,d0
0000F736 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F73C                            
0000F73C                            locret_ECEE:
0000F73C 4E75                       		rts	
0000F73E                            ; End of function GotThroughAct
0000F73E                            
0000F73E                            ; ===========================================================================
0000F73E 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F752 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F768                            ; ===========================================================================
0000F768                            
0000F768                            locret_ED1A:				; XREF: Obj0D_Index
0000F768 4E75                       		rts	
0000F76A                            ; ===========================================================================
0000F76A                            Ani_obj0D:
0000F76A                            	include "_anim\obj0D.asm"
0000F76A                            ; ---------------------------------------------------------------------------
0000F76A                            ; Animation script - signpost
0000F76A                            ; ---------------------------------------------------------------------------
0000F76A 0000                       		dc.w byte_ED24-Ani_obj0D
0000F76C 0000                       		dc.w byte_ED28-Ani_obj0D
0000F76E 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F770 0000                       		dc.w byte_ED34-Ani_obj0D
0000F772 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F776 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F77C 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F782 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F786 00                         		even
0000F786 00                         		even
0000F786                            
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Sprite mappings - signpost
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            Map_obj0D:
0000F786                            	include "_maps\obj0D.asm"
0000F786                            ; ---------------------------------------------------------------------------
0000F786                            ; Sprite mappings - signpost
0000F786                            ; ---------------------------------------------------------------------------
0000F786 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F78A 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F78E 0000                       		dc.w byte_ED73-Map_obj0D
0000F790 03                         byte_ED42:	dc.b 3
0000F791 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F796 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F79B 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7A0 02                         byte_ED52:	dc.b 2
0000F7A1 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F7A6 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7AB 02                         byte_ED5D:	dc.b 2
0000F7AC F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F7B1 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F7B6 02                         byte_ED68:	dc.b 2
0000F7B7 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F7BC 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F7C1 03                         byte_ED73:	dc.b 3
0000F7C2 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F7C7 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F7CC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F7D2 00                         		even
0000F7D2 00                         		even
0000F7D2                            
0000F7D2                            ; ===========================================================================
0000F7D2                            ; ---------------------------------------------------------------------------
0000F7D2                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F7D2                            ; ---------------------------------------------------------------------------
0000F7D2                            
0000F7D2                            Obj4C:					; XREF: Obj_Index
0000F7D2 7000                       		moveq	#0,d0
0000F7D4 1028 0024                  		move.b	$24(a0),d0
0000F7D8 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F7DC 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F7E0 6000 0000                  		bra.w	Obj4D_ChkDel
0000F7E4                            ; ===========================================================================
0000F7E4 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F7E6 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F7E8 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F7EA 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F7EC 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F7EE 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F7F0                            ; ===========================================================================
0000F7F0                            
0000F7F0                            Obj4C_Main:				; XREF: Obj4C_Index
0000F7F0 5428 0024                  		addq.b	#2,$24(a0)
0000F7F4 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F7FC 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F802 117C 0004 0001             		move.b	#4,1(a0)
0000F808 117C 0001 0018             		move.b	#1,$18(a0)
0000F80E 117C 0038 0019             		move.b	#$38,$19(a0)
0000F814 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F81A                            
0000F81A                            loc_EDCC:				; XREF: Obj4C_Index
0000F81A 5368 0032                  		subq.w	#1,$32(a0)
0000F81E 6A00                       		bpl.s	locret_EDF0
0000F820 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F826 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F82A 3228 000C                  		move.w	$C(a0),d1
0000F82E B041                       		cmp.w	d1,d0
0000F830 6400                       		bcc.s	locret_EDF0
0000F832 0441 0170                  		subi.w	#$170,d1
0000F836 B041                       		cmp.w	d1,d0
0000F838 6500                       		bcs.s	locret_EDF0
0000F83A 5428 0024                  		addq.b	#2,$24(a0)
0000F83E                            
0000F83E                            locret_EDF0:
0000F83E 4E75                       		rts	
0000F840                            ; ===========================================================================
0000F840                            
0000F840                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F840 5428 0024                  		addq.b	#2,$24(a0)
0000F844 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F848 6600                       		bne.s	loc_EE18
0000F84A 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F84E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F854 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F85A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F860 2348 003C                  		move.l	a0,$3C(a1)
0000F864                            
0000F864                            loc_EE18:
0000F864 117C 0001 001C             		move.b	#1,$1C(a0)
0000F86A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F86E 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F870 117C 0004 001C             		move.b	#4,$1C(a0)
0000F876 6000                       		bra.s	Obj4C_Display
0000F878                            ; ===========================================================================
0000F878                            
0000F878                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F878 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F87C 08E9 0001 0022             		bset	#1,$22(a1)
0000F882 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F888 6000                       		bra.s	Obj4C_Display
0000F88A                            ; ===========================================================================
0000F88A                            
0000F88A                            loc_EE3E:				; XREF: Obj4C_Index
0000F88A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F88E 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F890 5428 0024                  		addq.b	#2,$24(a0)
0000F894 4E75                       		rts	
0000F896                            ; ===========================================================================
0000F896                            
0000F896                            Obj4C_Display:				; XREF: Obj4C_Index
0000F896 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F89C 6100 B7FC                  		bsr.w	AnimateSprite
0000F8A0 6100 E7AA                  		bsr.w	DisplaySprite
0000F8A4 4E75                       		rts	
0000F8A6                            ; ===========================================================================
0000F8A6                            
0000F8A6                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F8A6 117C 0000 001C             		move.b	#0,$1C(a0)
0000F8AC 117C 0002 0024             		move.b	#2,$24(a0)
0000F8B2 4A28 0028                  		tst.b	$28(a0)
0000F8B6 6700 E7D0                  		beq.w	DeleteObject
0000F8BA 4E75                       		rts	
0000F8BC                            ; ===========================================================================
0000F8BC                            ; ---------------------------------------------------------------------------
0000F8BC                            ; Object 4D - lava geyser / lavafall (MZ)
0000F8BC                            ; ---------------------------------------------------------------------------
0000F8BC                            
0000F8BC                            Obj4D:					; XREF: Obj_Index
0000F8BC 7000                       		moveq	#0,d0
0000F8BE 1028 0024                  		move.b	$24(a0),d0
0000F8C2 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F8C6 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F8CA 6000 E780                  		bra.w	DisplaySprite
0000F8CE                            ; ===========================================================================
0000F8CE 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F8D0 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F8D2 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F8D4 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F8D6                            
0000F8D6 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F8DA                            ; ===========================================================================
0000F8DA                            
0000F8DA                            Obj4D_Main:				; XREF: Obj4D_Index
0000F8DA 5428 0024                  		addq.b	#2,$24(a0)
0000F8DE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F8E4 4A28 0028                  		tst.b	$28(a0)
0000F8E8 6700                       		beq.s	loc_EEA4
0000F8EA 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F8F0                            
0000F8F0                            loc_EEA4:
0000F8F0 7000                       		moveq	#0,d0
0000F8F2 1028 0028                  		move.b	$28(a0),d0
0000F8F6 D040                       		add.w	d0,d0
0000F8F8 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F8FE 2248                       		movea.l	a0,a1
0000F900 7201                       		moveq	#1,d1
0000F902 6100                       		bsr.s	Obj4D_MakeLava
0000F904 6000                       		bra.s	loc_EF10
0000F906                            ; ===========================================================================
0000F906                            
0000F906                            Obj4D_Loop:
0000F906 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F90A 6600                       		bne.s	loc_EF0A
0000F90C                            
0000F90C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F90C 12BC 004D                  		move.b	#$4D,0(a1)
0000F910 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F918 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F91E 137C 0004 0001             		move.b	#4,1(a1)
0000F924 137C 0020 0019             		move.b	#$20,$19(a1)
0000F92A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F930 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F936 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F93C 137C 0001 0018             		move.b	#1,$18(a1)
0000F942 137C 0005 001C             		move.b	#5,$1C(a1)
0000F948 4A28 0028                  		tst.b	$28(a0)
0000F94C 6700                       		beq.s	loc_EF0A
0000F94E 137C 0002 001C             		move.b	#2,$1C(a1)
0000F954                            
0000F954                            loc_EF0A:
0000F954 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F958 4E75                       		rts	
0000F95A                            ; ===========================================================================
0000F95A                            
0000F95A                            loc_EF10:				; XREF: Obj4D_Main
0000F95A 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F960 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F966 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F96C 137C 0093 0020             		move.b	#$93,$20(a1)
0000F972 137C 0080 0016             		move.b	#$80,$16(a1)
0000F978 08E9 0004 0001             		bset	#4,1(a1)
0000F97E 5829 0024                  		addq.b	#4,$24(a1)
0000F982 2348 003C                  		move.l	a0,$3C(a1)
0000F986 4A28 0028                  		tst.b	$28(a0)
0000F98A 6700                       		beq.s	Obj4D_PlaySnd
0000F98C 7200                       		moveq	#0,d1
0000F98E 6100 FF76                  		bsr.w	Obj4D_Loop
0000F992 5429 0024                  		addq.b	#2,$24(a1)
0000F996 08E9 0004 0002             		bset	#4,2(a1)
0000F99C 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F9A2 137C 0000 0018             		move.b	#0,$18(a1)
0000F9A8 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F9AE 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F9B4 117C 0000 0028             		move.b	#0,$28(a0)
0000F9BA                            
0000F9BA                            Obj4D_PlaySnd:
0000F9BA 303C 00C8                  		move.w	#$C8,d0
0000F9BE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flame sound
0000F9C4                            
0000F9C4                            Obj4D_Action:				; XREF: Obj4D_Index
0000F9C4 7000                       		moveq	#0,d0
0000F9C6 1028 0028                  		move.b	$28(a0),d0
0000F9CA D040                       		add.w	d0,d0
0000F9CC 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F9D0 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F9D4 6100 E650                  		bsr.w	SpeedToPos
0000F9D8 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F9DE 6100 B6BA                  		bsr.w	AnimateSprite
0000F9E2                            
0000F9E2                            Obj4D_ChkDel:				; XREF: Obj4C
0000F9E2 3028 0008                  		move.w	8(a0),d0
0000F9E6 0240 FF80                  		andi.w	#$FF80,d0
0000F9EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9EE 0441 0080                  		subi.w	#$80,d1
0000F9F2 0241 FF80                  		andi.w	#$FF80,d1
0000F9F6 9041                       		sub.w	d1,d0
0000F9F8 0C40 0280                  		cmpi.w	#$280,d0
0000F9FC 6200 E68A                  		bhi.w	DeleteObject
0000FA00 4E75                       		rts	
0000FA02                            ; ===========================================================================
0000FA02 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000FA04 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000FA06                            ; ===========================================================================
0000FA06                            
0000FA06                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000FA06 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FA0C 3028 0030                  		move.w	$30(a0),d0
0000FA10 B068 000C                  		cmp.w	$C(a0),d0
0000FA14 6400                       		bcc.s	locret_EFDA
0000FA16 5828 0024                  		addq.b	#4,$24(a0)
0000FA1A 2268 003C                  		movea.l	$3C(a0),a1
0000FA1E 137C 0003 001C             		move.b	#3,$1C(a1)
0000FA24                            
0000FA24                            locret_EFDA:
0000FA24 4E75                       		rts	
0000FA26                            ; ===========================================================================
0000FA26                            
0000FA26                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000FA26 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000FA2C 3028 0030                  		move.w	$30(a0),d0
0000FA30 B068 000C                  		cmp.w	$C(a0),d0
0000FA34 6400                       		bcc.s	locret_EFFA
0000FA36 5828 0024                  		addq.b	#4,$24(a0)
0000FA3A 2268 003C                  		movea.l	$3C(a0),a1
0000FA3E 137C 0001 001C             		move.b	#1,$1C(a1)
0000FA44                            
0000FA44                            locret_EFFA:
0000FA44 4E75                       		rts	
0000FA46                            ; ===========================================================================
0000FA46                            
0000FA46                            loc_EFFC:				; XREF: Obj4D_Index
0000FA46 2268 003C                  		movea.l	$3C(a0),a1
0000FA4A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000FA50 6700 0000                  		beq.w	Obj4D_Delete
0000FA54 3029 000C                  		move.w	$C(a1),d0
0000FA58 0640 0060                  		addi.w	#$60,d0
0000FA5C 3140 000C                  		move.w	d0,$C(a0)
0000FA60 9068 0030                  		sub.w	$30(a0),d0
0000FA64 4440                       		neg.w	d0
0000FA66 7208                       		moveq	#8,d1
0000FA68 0C40 0040                  		cmpi.w	#$40,d0
0000FA6C 6C00                       		bge.s	loc_F026
0000FA6E 720B                       		moveq	#$B,d1
0000FA70                            
0000FA70                            loc_F026:
0000FA70 0C40 0080                  		cmpi.w	#$80,d0
0000FA74 6F00                       		ble.s	loc_F02E
0000FA76 720E                       		moveq	#$E,d1
0000FA78                            
0000FA78                            loc_F02E:
0000FA78 5328 001E                  		subq.b	#1,$1E(a0)
0000FA7C 6A00                       		bpl.s	loc_F04C
0000FA7E 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA84 5228 001B                  		addq.b	#1,$1B(a0)
0000FA88 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000FA8E 6500                       		bcs.s	loc_F04C
0000FA90 117C 0000 001B             		move.b	#0,$1B(a0)
0000FA96                            
0000FA96                            loc_F04C:
0000FA96 1028 001B                  		move.b	$1B(a0),d0
0000FA9A D001                       		add.b	d1,d0
0000FA9C 1140 001A                  		move.b	d0,$1A(a0)
0000FAA0 6000 FF40                  		bra.w	Obj4D_ChkDel
0000FAA4                            ; ===========================================================================
0000FAA4                            
0000FAA4                            Obj4D_Delete:				; XREF: Obj4D_Index
0000FAA4 6000 E5E2                  		bra.w	DeleteObject
0000FAA8                            ; ===========================================================================
0000FAA8                            ; ---------------------------------------------------------------------------
0000FAA8                            ; Object 4E - advancing	wall of	lava (MZ)
0000FAA8                            ; ---------------------------------------------------------------------------
0000FAA8                            
0000FAA8                            Obj4E:					; XREF: Obj_Index
0000FAA8 7000                       		moveq	#0,d0
0000FAAA 1028 0024                  		move.b	$24(a0),d0
0000FAAE 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000FAB2 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000FAB6                            ; ===========================================================================
0000FAB6 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000FAB8 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000FABA 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000FABC 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000FABE 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000FAC0                            ; ===========================================================================
0000FAC0                            
0000FAC0                            Obj4E_Main:				; XREF: Obj4E_Index
0000FAC0 5828 0024                  		addq.b	#4,$24(a0)
0000FAC4 2248                       		movea.l	a0,a1
0000FAC6 7201                       		moveq	#1,d1
0000FAC8 6000                       		bra.s	Obj4E_Main2
0000FACA                            ; ===========================================================================
0000FACA                            
0000FACA                            Obj4E_Loop:
0000FACA 6100 EA1C                  		bsr.w	SingleObjLoad2
0000FACE 6600                       		bne.s	loc_F0C8
0000FAD0                            
0000FAD0                            Obj4E_Main2:				; XREF: Obj4E_Main
0000FAD0 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000FAD4 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000FADC 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000FAE2 137C 0004 0001             		move.b	#4,1(a1)
0000FAE8 137C 0050 0019             		move.b	#$50,$19(a1)
0000FAEE 3368 0008 0008             		move.w	8(a0),8(a1)
0000FAF4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FAFA 137C 0001 0018             		move.b	#1,$18(a1)
0000FB00 137C 0000 001C             		move.b	#0,$1C(a1)
0000FB06 137C 0094 0020             		move.b	#$94,$20(a1)
0000FB0C 2348 003C                  		move.l	a0,$3C(a1)
0000FB10                            
0000FB10                            loc_F0C8:
0000FB10 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000FB14                            
0000FB14 5C29 0024                  		addq.b	#6,$24(a1)
0000FB18 137C 0004 001A             		move.b	#4,$1A(a1)
0000FB1E                            
0000FB1E                            Obj4E_Action:				; XREF: Obj4E_Index
0000FB1E 3038 D008                  		move.w	($FFFFD008).w,d0
0000FB22 9068 0008                  		sub.w	8(a0),d0
0000FB26 6400                       		bcc.s	Obj4E_ChkSonic
0000FB28 4440                       		neg.w	d0
0000FB2A                            
0000FB2A                            Obj4E_ChkSonic:
0000FB2A 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000FB2E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FB30 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FB34 9068 000C                  		sub.w	$C(a0),d0
0000FB38 6400                       		bcc.s	loc_F0F4
0000FB3A 4440                       		neg.w	d0
0000FB3C                            
0000FB3C                            loc_F0F4:
0000FB3C 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000FB40 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000FB42 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000FB48 6000                       		bra.s	Obj4E_Solid
0000FB4A                            ; ===========================================================================
0000FB4A                            
0000FB4A                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000FB4A 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000FB4E 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000FB50 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000FB56 5528 0024                  		subq.b	#2,$24(a0)
0000FB5A                            
0000FB5A                            Obj4E_Solid:				; XREF: Obj4E_Index
0000FB5A 323C 002B                  		move.w	#$2B,d1
0000FB5E 343C 0018                  		move.w	#$18,d2
0000FB62 3602                       		move.w	d2,d3
0000FB64 5243                       		addq.w	#1,d3
0000FB66 3828 0008                  		move.w	8(a0),d4
0000FB6A 1028 0024                  		move.b	$24(a0),d0
0000FB6E 3F00                       		move.w	d0,-(sp)
0000FB70 6100 0000                  		bsr.w	SolidObject
0000FB74 301F                       		move.w	(sp)+,d0
0000FB76 1140 0024                  		move.b	d0,$24(a0)
0000FB7A 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000FB80 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000FB82 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000FB86 4228 0036                  		clr.b	$36(a0)
0000FB8A                            
0000FB8A                            Obj4E_Animate:
0000FB8A 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000FB90 6100 B508                  		bsr.w	AnimateSprite
0000FB94 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000FB9A 6400                       		bcc.s	Obj4E_ChkDel
0000FB9C 6100 E488                  		bsr.w	SpeedToPos
0000FBA0                            
0000FBA0                            Obj4E_ChkDel:
0000FBA0 6100 E4AA                  		bsr.w	DisplaySprite
0000FBA4 4A28 0036                  		tst.b	$36(a0)
0000FBA8 6600                       		bne.s	locret_F17E
0000FBAA 3028 0008                  		move.w	8(a0),d0
0000FBAE 0240 FF80                  		andi.w	#$FF80,d0
0000FBB2 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBB6 0441 0080                  		subi.w	#$80,d1
0000FBBA 0241 FF80                  		andi.w	#$FF80,d1
0000FBBE 9041                       		sub.w	d1,d0
0000FBC0 0C40 0280                  		cmpi.w	#$280,d0
0000FBC4 6200                       		bhi.s	Obj4E_ChkGone
0000FBC6                            
0000FBC6                            locret_F17E:
0000FBC6 4E75                       		rts	
0000FBC8                            ; ===========================================================================
0000FBC8                            
0000FBC8                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000FBC8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FBCC 7000                       		moveq	#0,d0
0000FBCE 1028 0023                  		move.b	$23(a0),d0
0000FBD2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FBD8 117C 0008 0024             		move.b	#8,$24(a0)
0000FBDE 4E75                       		rts	
0000FBE0                            ; ===========================================================================
0000FBE0                            
0000FBE0                            Obj4E_Move2:				; XREF: Obj4E_Index
0000FBE0 2268 003C                  		movea.l	$3C(a0),a1
0000FBE4 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000FBEA 6700                       		beq.s	Obj4E_Delete
0000FBEC 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FBF2 0468 0080 0008             		subi.w	#$80,8(a0)
0000FBF8 6000 E452                  		bra.w	DisplaySprite
0000FBFC                            ; ===========================================================================
0000FBFC                            
0000FBFC                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FBFC 6000 E48A                  		bra.w	DeleteObject
0000FC00                            ; ===========================================================================
0000FC00                            ; ---------------------------------------------------------------------------
0000FC00                            ; Object 54 - invisible	lava tag (MZ)
0000FC00                            ; ---------------------------------------------------------------------------
0000FC00                            
0000FC00                            Obj54:					; XREF: Obj_Index
0000FC00 7000                       		moveq	#0,d0
0000FC02 1028 0024                  		move.b	$24(a0),d0
0000FC06 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FC0A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FC0E                            ; ===========================================================================
0000FC0E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FC10 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FC12                            
0000FC12 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FC16                            ; ===========================================================================
0000FC16                            
0000FC16                            Obj54_Main:				; XREF: Obj54_Index
0000FC16 5428 0024                  		addq.b	#2,$24(a0)
0000FC1A 7000                       		moveq	#0,d0
0000FC1C 1028 0028                  		move.b	$28(a0),d0
0000FC20 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FC26 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FC2E 117C 0084 0001             		move.b	#$84,1(a0)
0000FC34                            
0000FC34                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FC34 3028 0008                  		move.w	8(a0),d0
0000FC38 0240 FF80                  		andi.w	#$FF80,d0
0000FC3C 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC40 0441 0080                  		subi.w	#$80,d1
0000FC44 0241 FF80                  		andi.w	#$FF80,d1
0000FC48 9041                       		sub.w	d1,d0
0000FC4A 6B00 E43C                  		bmi.w	DeleteObject
0000FC4E 0C40 0280                  		cmpi.w	#$280,d0
0000FC52 6200 E434                  		bhi.w	DeleteObject
0000FC56 4E75                       		rts	
0000FC58                            ; ===========================================================================
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58                            ; Sprite mappings - invisible lava tag (MZ)
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58                            Map_obj54:
0000FC58                            	include "_maps\obj54.asm"
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58                            ; Sprite mappings - invisible lava tag (MZ)
0000FC58                            ; ---------------------------------------------------------------------------
0000FC58 0000                       		dc.w byte_F212-Map_obj54
0000FC5A 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FC5C 00                         		even
0000FC5C 00                         		even
0000FC5C                            
0000FC5C                            Ani_obj4C:
0000FC5C                            	include "_anim\obj4C.asm"
0000FC5C                            ; ---------------------------------------------------------------------------
0000FC5C                            ; Animation script - geyser of lava (MZ)
0000FC5C                            ; ---------------------------------------------------------------------------
0000FC5C 0000                       		dc.w byte_F220-Ani_obj4C
0000FC5E 0000                       		dc.w byte_F22A-Ani_obj4C
0000FC60 0000                       		dc.w byte_F22E-Ani_obj4C
0000FC62 0000                       		dc.w byte_F232-Ani_obj4C
0000FC64 0000                       		dc.w byte_F23A-Ani_obj4C
0000FC66 0000                       		dc.w byte_F23E-Ani_obj4C
0000FC68 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FC72 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FC76 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FC7A 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FC82 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FC86 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FC8A                            		even
0000FC8A                            		even
0000FC8A                            
0000FC8A                            Ani_obj4E:
0000FC8A                            	include "_anim\obj4E.asm"
0000FC8A                            ; ---------------------------------------------------------------------------
0000FC8A                            ; Animation script - advancing wall of lava (MZ)
0000FC8A                            ; ---------------------------------------------------------------------------
0000FC8A 0000                       		dc.w byte_F244-Ani_obj4E
0000FC8C 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FC92                            		even
0000FC92                            		even
0000FC92                            
0000FC92                            ; ---------------------------------------------------------------------------
0000FC92                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC92                            ; ---------------------------------------------------------------------------
0000FC92                            Map_obj4C:
0000FC92                            	include "_maps\obj4C.asm"
0000FC92                            ; ---------------------------------------------------------------------------
0000FC92                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FC92                            ; ---------------------------------------------------------------------------
0000FC92 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FC96 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FC9A 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FC9E 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FCA2 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FCA6 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FCAA 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FCAE 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FCB2 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FCB6 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FCBA 02                         byte_F272:	dc.b 2
0000FCBB EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FCC0 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FCC5 02                         byte_F27D:	dc.b 2
0000FCC6 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FCCB EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FCD0 04                         byte_F288:	dc.b 4
0000FCD1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FCD6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FCDB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FCE0 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FCE5 04                         byte_F29D:	dc.b 4
0000FCE6 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FCEB F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FCF0 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FCF5 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FCFA 06                         byte_F2B2:	dc.b 6
0000FCFB EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FD00 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FD05 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FD0A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FD0F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FD14 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FD19 06                         byte_F2D1:	dc.b 6
0000FD1A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FD1F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FD24 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FD29 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FD2E E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FD33 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FD38 02                         byte_F2F0:	dc.b 2
0000FD39 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FD3E E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FD43 02                         byte_F2FB:	dc.b 2
0000FD44 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FD49 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FD4E 0A                         byte_F306:	dc.b $A
0000FD4F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FD54 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FD59 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FD5E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FD63 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FD68 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FD6D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FD72 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FD77 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FD7C 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FD81 0A                         byte_F339:	dc.b $A
0000FD82 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FD87 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FD8C B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FD91 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FD96 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FD9B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FDA0 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FDA5 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FDAA 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FDAF 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FDB4 0A                         byte_F36C:	dc.b $A
0000FDB5 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FDBA 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FDBF B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FDC4 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FDC9 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FDCE D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FDD3 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FDD8 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FDDD 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FDE2 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FDE7 06                         byte_F39F:	dc.b 6
0000FDE8 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FDED 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FDF2 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FDF7 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FDFC D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE01 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE06 06                         byte_F3BE:	dc.b 6
0000FE07 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE0C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FE11 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FE16 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FE1B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FE20 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FE25 06                         byte_F3DD:	dc.b 6
0000FE26 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FE2B 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FE30 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FE35 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FE3A D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FE3F D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FE44 10                         byte_F3FC:	dc.b $10
0000FE45 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FE4A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FE4F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FE54 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FE59 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FE5E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FE63 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FE68 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FE6D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FE72 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FE77 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FE7C 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FE81 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FE86 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FE8B 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FE90 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FE95 10                         byte_F44D:	dc.b $10
0000FE96 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FE9B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FEA0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FEA5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FEAA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FEAF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FEB4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FEB9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FEBE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FEC3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FEC8 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FECD 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FED2 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FED7 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FEDC 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FEE1 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FEE6 10                         byte_F49E:	dc.b $10
0000FEE7 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FEEC 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FEF1 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FEF6 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FEFB D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FF00 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FF05 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FF0A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FF0F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FF14 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FF19 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FF1E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FF23 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FF28 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FF2D 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FF32 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FF37 06                         byte_F4EF:	dc.b 6
0000FF38 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FF3D E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FF42 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FF47 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FF4C D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FF51 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FF56 06                         byte_F50E:	dc.b 6
0000FF57 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FF5C E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FF61 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FF66 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FF6B D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FF70 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FF75 00                         byte_F52D:	dc.b 0
0000FF76                            		even
0000FF76                            		even
0000FF76                            
0000FF76                            ; ---------------------------------------------------------------------------
0000FF76                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF76                            ; ---------------------------------------------------------------------------
0000FF76                            Map_obj4E:
0000FF76                            	include "_maps\obj4E.asm"
0000FF76                            ; ---------------------------------------------------------------------------
0000FF76                            ; Sprite mappings - advancing wall of lava (MZ)
0000FF76                            ; ---------------------------------------------------------------------------
0000FF76 0000                       		dc.w byte_F538-Map_obj4E
0000FF78 0000                       		dc.w byte_F566-Map_obj4E
0000FF7A 0000                       		dc.w byte_F594-Map_obj4E
0000FF7C 0000                       		dc.w byte_F5C2-Map_obj4E
0000FF7E 0000                       		dc.w byte_F5F0-Map_obj4E
0000FF80 09                         byte_F538:	dc.b 9
0000FF81 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FF86 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FF8B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FF90 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FF95 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FF9A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FF9F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFA4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFA9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFAE 09                         byte_F566:	dc.b 9
0000FFAF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FFB4 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FFB9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFBE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFC3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFC8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFCD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FFD2 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FFD7 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FFDC 09                         byte_F594:	dc.b 9
0000FFDD E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FFE2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FFE7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FFEC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FFF1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FFF6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FFFB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010000 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010005 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001000A 09                         byte_F5C2:	dc.b 9
0001000B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010010 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
00010015 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0001001A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001001F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010024 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010029 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001002E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010033 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010038 08                         byte_F5F0:	dc.b 8
00010039 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0001003E 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010043 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010048 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001004D E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010052 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010057 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001005C 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010062 00                         		even
00010062 00                         		even
00010062                            
00010062                            ; ===========================================================================
00010062                            ; ---------------------------------------------------------------------------
00010062                            ; Object 40 - Moto Bug enemy (GHZ)
00010062                            ; ---------------------------------------------------------------------------
00010062                            
00010062                            Obj40:					; XREF: Obj_Index
00010062 7000                       		moveq	#0,d0
00010064 1028 0024                  		move.b	$24(a0),d0
00010068 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0001006C 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010070                            ; ===========================================================================
00010070 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010072 0000                       		dc.w Obj40_Action-Obj40_Index
00010074 0000                       		dc.w Obj40_Animate-Obj40_Index
00010076 0000                       		dc.w Obj40_Delete-Obj40_Index
00010078                            ; ===========================================================================
00010078                            
00010078                            Obj40_Main:				; XREF: Obj40_Index
00010078 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010080 317C 04F0 0002             		move.w	#$4F0,2(a0)
00010086 117C 0004 0001             		move.b	#4,1(a0)
0001008C 117C 0004 0018             		move.b	#4,$18(a0)
00010092 117C 0014 0019             		move.b	#$14,$19(a0)
00010098 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0001009C 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0001009E 117C 000E 0016             		move.b	#$E,$16(a0)
000100A4 117C 0008 0017             		move.b	#8,$17(a0)
000100AA 117C 000C 0020             		move.b	#$C,$20(a0)
000100B0 6100 DF02                  		bsr.w	ObjectFall
000100B4 4EB9 0000 0000             		jsr	ObjHitFloor
000100BA 4A41                       		tst.w	d1
000100BC 6A00                       		bpl.s	locret_F68A
000100BE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000100C2 317C 0000 0012             		move.w	#0,$12(a0)
000100C8 5428 0024                  		addq.b	#2,$24(a0)
000100CC 0868 0000 0022             		bchg	#0,$22(a0)
000100D2                            
000100D2                            locret_F68A:
000100D2 4E75                       		rts	
000100D4                            ; ===========================================================================
000100D4                            
000100D4                            Obj40_SetSmoke:				; XREF: Obj40_Main
000100D4 5828 0024                  		addq.b	#4,$24(a0)
000100D8 6000 0000                  		bra.w	Obj40_Animate
000100DC                            ; ===========================================================================
000100DC                            
000100DC                            Obj40_Action:				; XREF: Obj40_Index
000100DC 7000                       		moveq	#0,d0
000100DE 1028 0025                  		move.b	$25(a0),d0
000100E2 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000100E6 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000100EA 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000100F0 6100 AFA8                  		bsr.w	AnimateSprite
000100F4                            
000100F4                            ; ---------------------------------------------------------------------------
000100F4                            ; Routine to mark an enemy/monitor/ring	as destroyed
000100F4                            ; ---------------------------------------------------------------------------
000100F4                            
000100F4                            MarkObjGone:
000100F4 3028 0008                  		move.w	8(a0),d0
000100F8 0240 FF80                  		andi.w	#$FF80,d0
000100FC 3238 F700                  		move.w	($FFFFF700).w,d1
00010100 0441 0080                  		subi.w	#$80,d1
00010104 0241 FF80                  		andi.w	#$FF80,d1
00010108 9041                       		sub.w	d1,d0
0001010A 0C40 0280                  		cmpi.w	#$280,d0
0001010E 6200 0000                  		bhi.w	Mark_ChkGone
00010112 6000 DF38                  		bra.w	DisplaySprite
00010116                            ; ===========================================================================
00010116                            
00010116                            Mark_ChkGone:
00010116 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001011A 7000                       		moveq	#0,d0
0001011C 1028 0023                  		move.b	$23(a0),d0
00010120 6700                       		beq.s	Mark_Delete
00010122 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010128                            
00010128                            Mark_Delete:
00010128 6000 DF5E                  		bra.w	DeleteObject
0001012C                            
0001012C                            ; ===========================================================================
0001012C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0001012E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010130                            ; ===========================================================================
00010130                            
00010130                            Obj40_Move:				; XREF: Obj40_Index2
00010130 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010134 6A00                       		bpl.s	locret_F70A	; if time remains, branch
00010136 5428 0025                  		addq.b	#2,$25(a0)
0001013A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010140 117C 0001 001C             		move.b	#1,$1C(a0)
00010146 0868 0000 0022             		bchg	#0,$22(a0)
0001014C 6600                       		bne.s	locret_F70A
0001014E 4468 0010                  		neg.w	$10(a0)		; change direction
00010152                            
00010152                            locret_F70A:
00010152 4E75                       		rts	
00010154                            ; ===========================================================================
00010154                            
00010154                            Obj40_FixToFloor:			; XREF: Obj40_Index2
00010154 6100 DED0                  		bsr.w	SpeedToPos
00010158 4EB9 0000 0000             		jsr	ObjHitFloor
0001015E 0C41 FFF8                  		cmpi.w	#-8,d1
00010162 6D00                       		blt.s	Obj40_Pause
00010164 0C41 000C                  		cmpi.w	#$C,d1
00010168 6C00                       		bge.s	Obj40_Pause
0001016A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001016E 5328 0033                  		subq.b	#1,$33(a0)
00010172 6A00                       		bpl.s	locret_F756
00010174 117C 000F 0033             		move.b	#$F,$33(a0)
0001017A 6100 E356                  		bsr.w	SingleObjLoad
0001017E 6600                       		bne.s	locret_F756
00010180 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
00010184 3368 0008 0008             		move.w	8(a0),8(a1)
0001018A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010190 1368 0022 0022             		move.b	$22(a0),$22(a1)
00010196 137C 0002 001C             		move.b	#2,$1C(a1)
0001019C                            
0001019C                            locret_F756:
0001019C 4E75                       		rts	
0001019E                            ; ===========================================================================
0001019E                            
0001019E                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0001019E 5528 0025                  		subq.b	#2,$25(a0)
000101A2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000101A8 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000101AE 117C 0000 001C             		move.b	#0,$1C(a0)
000101B4 4E75                       		rts	
000101B6                            ; ===========================================================================
000101B6                            
000101B6                            Obj40_Animate:				; XREF: Obj40_Index
000101B6 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000101BC 6100 AEDC                  		bsr.w	AnimateSprite
000101C0 6000 DE8A                  		bra.w	DisplaySprite
000101C4                            ; ===========================================================================
000101C4                            
000101C4                            Obj40_Delete:				; XREF: Obj40_Index
000101C4 6000 DEC2                  		bra.w	DeleteObject
000101C8                            ; ===========================================================================
000101C8                            Ani_obj40:
000101C8                            	include "_anim\obj40.asm"
000101C8                            ; ---------------------------------------------------------------------------
000101C8                            ; Animation script - Motobug enemy
000101C8                            ; ---------------------------------------------------------------------------
000101C8 0000                       		dc.w byte_F788-Ani_obj40
000101CA 0000                       		dc.w byte_F78C-Ani_obj40
000101CC 0000                       		dc.w byte_F792-Ani_obj40
000101CE 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000101D2 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000101D8 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000101E6                            		even
000101E6                            		even
000101E6                            
000101E6                            ; ---------------------------------------------------------------------------
000101E6                            ; Sprite mappings - Moto Bug enemy (GHZ)
000101E6                            ; ---------------------------------------------------------------------------
000101E6                            Map_obj40:
000101E6                            	include "_maps\obj40.asm"
000101E6                            Map_cedc:
000101E6 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
000101E8 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
000101EA 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
000101EC 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
000101EE 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
000101F0 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
000101F2 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000101F4 04                         Map_cedc_E: 	dc.b $4
000101F5 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000101FA 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
000101FF F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010204 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
00010209 04                         Map_cedc_23: 	dc.b $4
0001020A F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0001020F 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
00010214 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
00010219 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0001021E 05                         Map_cedc_38: 	dc.b $5
0001021F F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010224 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
00010229 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0001022E 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
00010233 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
00010238 01                         Map_cedc_52: 	dc.b $1
00010239 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0001023E 01                         Map_cedc_58: 	dc.b $1
0001023F FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
00010244 01                         Map_cedc_5E: 	dc.b $1
00010245 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0001024A 00                         Map_cedc_64: 	dc.b $0
0001024C 00                         	even
0001024C 00                         	even
0001024C                            
0001024C                            ; ===========================================================================
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            ; Object 4F - blank
0001024C                            ; ---------------------------------------------------------------------------
0001024C                            
0001024C                            Obj4F:					; XREF: Obj_Index
0001024C 4E75                       		rts	
0001024E                            
0001024E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001024E                            
0001024E                            
0001024E                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0001024E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010252 D047                       		add.w	d7,d0
00010254 0240 0003                  		andi.w	#3,d0
00010258 6600                       		bne.s	loc_F836
0001025A 7600                       		moveq	#0,d3
0001025C 1628 0019                  		move.b	$19(a0),d3
00010260 4A68 0010                  		tst.w	$10(a0)
00010264 6B00                       		bmi.s	loc_F82C
00010266 6100 0000                  		bsr.w	ObjHitWallRight
0001026A 4A41                       		tst.w	d1
0001026C 6A00                       		bpl.s	loc_F836
0001026E                            
0001026E                            loc_F828:
0001026E 7001                       		moveq	#1,d0
00010270 4E75                       		rts	
00010272                            ; ===========================================================================
00010272                            
00010272                            loc_F82C:
00010272 4643                       		not.w	d3
00010274 6100 0000                  		bsr.w	ObjHitWallLeft
00010278 4A41                       		tst.w	d1
0001027A 6BF2                       		bmi.s	loc_F828
0001027C                            
0001027C                            loc_F836:
0001027C 7000                       		moveq	#0,d0
0001027E 4E75                       		rts	
00010280                            ; End of function Obj50_ChkWall
00010280                            
00010280                            ; ===========================================================================
00010280                            ; ---------------------------------------------------------------------------
00010280                            ; Object 50 - Yadrin enemy (SYZ)
00010280                            ; ---------------------------------------------------------------------------
00010280                            
00010280                            Obj50:					; XREF: Obj_Index
00010280 7000                       		moveq	#0,d0
00010282 1028 0024                  		move.b	$24(a0),d0
00010286 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001028A 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0001028E                            ; ===========================================================================
0001028E 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010290 0000                       		dc.w Obj50_Action-Obj50_Index
00010292                            ; ===========================================================================
00010292                            
00010292                            Obj50_Main:				; XREF: Obj50_Index
00010292 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0001029A 317C 247B 0002             		move.w	#$247B,2(a0)
000102A0 117C 0004 0001             		move.b	#4,1(a0)
000102A6 117C 0004 0018             		move.b	#4,$18(a0)
000102AC 117C 0014 0019             		move.b	#$14,$19(a0)
000102B2 117C 0011 0016             		move.b	#$11,$16(a0)
000102B8 117C 0008 0017             		move.b	#8,$17(a0)
000102BE 117C 00CC 0020             		move.b	#$CC,$20(a0)
000102C4 6100 DCEE                  		bsr.w	ObjectFall
000102C8 6100 0000                  		bsr.w	ObjHitFloor
000102CC 4A41                       		tst.w	d1
000102CE 6A00                       		bpl.s	locret_F89E
000102D0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000102D4 317C 0000 0012             		move.w	#0,$12(a0)
000102DA 5428 0024                  		addq.b	#2,$24(a0)
000102DE 0868 0000 0022             		bchg	#0,$22(a0)
000102E4                            
000102E4                            locret_F89E:
000102E4 4E75                       		rts	
000102E6                            ; ===========================================================================
000102E6                            
000102E6                            Obj50_Action:				; XREF: Obj50_Index
000102E6 7000                       		moveq	#0,d0
000102E8 1028 0025                  		move.b	$25(a0),d0
000102EC 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000102F0 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000102F4 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000102FA 6100 AD9E                  		bsr.w	AnimateSprite
000102FE 6000 FDF4                  		bra.w	MarkObjGone
00010302                            ; ===========================================================================
00010302 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010304 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
00010306                            ; ===========================================================================
00010306                            
00010306                            Obj50_Move:				; XREF: Obj50_Index2
00010306 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001030A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0001030C 5428 0025                  		addq.b	#2,$25(a0)
00010310 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010316 117C 0001 001C             		move.b	#1,$1C(a0)
0001031C 0868 0000 0022             		bchg	#0,$22(a0)
00010322 6600                       		bne.s	locret_F8E2
00010324 4468 0010                  		neg.w	$10(a0)		; change direction
00010328                            
00010328                            locret_F8E2:
00010328 4E75                       		rts	
0001032A                            ; ===========================================================================
0001032A                            
0001032A                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0001032A 6100 DCFA                  		bsr.w	SpeedToPos
0001032E 6100 0000                  		bsr.w	ObjHitFloor
00010332 0C41 FFF8                  		cmpi.w	#-8,d1
00010336 6D00                       		blt.s	Obj50_Pause
00010338 0C41 000C                  		cmpi.w	#$C,d1
0001033C 6C00                       		bge.s	Obj50_Pause
0001033E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010342 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010346 6600                       		bne.s	Obj50_Pause
00010348 4E75                       		rts	
0001034A                            ; ===========================================================================
0001034A                            
0001034A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001034A 5528 0025                  		subq.b	#2,$25(a0)
0001034E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010354 317C 0000 0010             		move.w	#0,$10(a0)
0001035A 117C 0000 001C             		move.b	#0,$1C(a0)
00010360 4E75                       		rts	
00010362                            ; ===========================================================================
00010362                            Ani_obj50:
00010362                            	include "_anim\obj50.asm"
00010362                            ; ---------------------------------------------------------------------------
00010362                            ; Animation script - Yadrin enemy
00010362                            ; ---------------------------------------------------------------------------
00010362 0000                       		dc.w byte_F920-Ani_obj50
00010364 0000                       		dc.w byte_F924-Ani_obj50
00010366 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001036A 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010374                            		even
00010374                            		even
00010374                            
00010374                            ; ---------------------------------------------------------------------------
00010374                            ; Sprite mappings - Yadrin enemy (SYZ)
00010374                            ; ---------------------------------------------------------------------------
00010374                            Map_obj50:
00010374                            	include "_maps\obj50.asm"
00010374                            Map_ff24:
00010374 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010376 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010378 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
0001037A 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
0001037C 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
0001037E 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010380 05                         Map_ff24_C: 	dc.b $5
00010381 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010386 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001038B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010390 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010395 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001039A 05                         Map_ff24_26: 	dc.b $5
0001039B F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000103A0 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000103A5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103AA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103AF 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000103B4 05                         Map_ff24_40: 	dc.b $5
000103B5 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000103BA 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000103BF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103C4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103C9 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000103CE 05                         Map_ff24_5A: 	dc.b $5
000103CF F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000103D4 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000103D9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103DE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103E3 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000103E8 05                         Map_ff24_74: 	dc.b $5
000103E9 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000103EE FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000103F3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000103F8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000103FD 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010402 05                         Map_ff24_8E: 	dc.b $5
00010403 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010408 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
0001040D EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010412 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010417 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001041C                            	even
0001041C                            	even
0001041C                            
0001041C                            ; ---------------------------------------------------------------------------
0001041C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0001041C                            ;
0001041C                            ; variables:
0001041C                            ; d1 = width
0001041C                            ; d2 = height /	2 (when	jumping)
0001041C                            ; d3 = height /	2 (when	walking)
0001041C                            ; d4 = x-axis position
0001041C                            ; ---------------------------------------------------------------------------
0001041C                            
0001041C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001041C                            
0001041C                            
0001041C                            SolidObject:
0001041C 4A28 0025                  		tst.b	$25(a0)
00010420 6700 0000                  		beq.w	loc_FAC8
00010424 3401                       		move.w	d1,d2
00010426 D442                       		add.w	d2,d2
00010428 43F8 D000                  		lea	($FFFFD000).w,a1
0001042C 0829 0001 0022             		btst	#1,$22(a1)
00010432 6600                       		bne.s	loc_F9FE
00010434 3029 0008                  		move.w	8(a1),d0
00010438 9068 0008                  		sub.w	8(a0),d0
0001043C D041                       		add.w	d1,d0
0001043E 6B00                       		bmi.s	loc_F9FE
00010440 B042                       		cmp.w	d2,d0
00010442 6500                       		bcs.s	loc_FA12
00010444                            
00010444                            loc_F9FE:
00010444 08A9 0003 0022             		bclr	#3,$22(a1)
0001044A 08A8 0003 0022             		bclr	#3,$22(a0)
00010450 4228 0025                  		clr.b	$25(a0)
00010454 7800                       		moveq	#0,d4
00010456 4E75                       		rts	
00010458                            ; ===========================================================================
00010458                            
00010458                            loc_FA12:
00010458 3404                       		move.w	d4,d2
0001045A 4EB9 0000 8328             		jsr	MvSonicOnPtfm 
00010460 7800                       		moveq	#0,d4
00010462 4E75                       		rts	
00010464                            ; ===========================================================================
00010464                            
00010464                            SolidObject71:				; XREF: Obj71_Solid
00010464 4A28 0025                  		tst.b	$25(a0)
00010468 6700 0000                  		beq.w	loc_FAD0
0001046C 3401                       		move.w	d1,d2
0001046E D442                       		add.w	d2,d2
00010470 43F8 D000                  		lea	($FFFFD000).w,a1
00010474 0829 0001 0022             		btst	#1,$22(a1)
0001047A 6600                       		bne.s	loc_FA44
0001047C 3029 0008                  		move.w	8(a1),d0
00010480 9068 0008                  		sub.w	8(a0),d0
00010484 D041                       		add.w	d1,d0
00010486 6B00                       		bmi.s	loc_FA44
00010488 B042                       		cmp.w	d2,d0
0001048A 6500                       		bcs.s	loc_FA58
0001048C                            
0001048C                            loc_FA44:
0001048C 08A9 0003 0022             		bclr	#3,$22(a1)
00010492 08A8 0003 0022             		bclr	#3,$22(a0)
00010498 4228 0025                  		clr.b	$25(a0)
0001049C 7800                       		moveq	#0,d4
0001049E 4E75                       		rts	
000104A0                            ; ===========================================================================
000104A0                            
000104A0                            loc_FA58:
000104A0 3404                       		move.w	d4,d2
000104A2                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000104A2 7800                       		moveq	#0,d4
000104A4 4E75                       		rts	
000104A6                            ; ===========================================================================
000104A6                            
000104A6                            SolidObject2F:				; XREF: Obj2F_Solid
000104A6 43F8 D000                  		lea	($FFFFD000).w,a1
000104AA 4A28 0001                  		tst.b	1(a0)
000104AE 6A00 0000                  		bpl.w	loc_FB92
000104B2 3029 0008                  		move.w	8(a1),d0
000104B6 9068 0008                  		sub.w	8(a0),d0
000104BA D041                       		add.w	d1,d0
000104BC 6B00 0000                  		bmi.w	loc_FB92
000104C0 3601                       		move.w	d1,d3
000104C2 D643                       		add.w	d3,d3
000104C4 B043                       		cmp.w	d3,d0
000104C6 6200 0000                  		bhi.w	loc_FB92
000104CA 3A00                       		move.w	d0,d5
000104CC 0828 0000 0001             		btst	#0,1(a0)
000104D2 6700                       		beq.s	loc_FA94
000104D4 4645                       		not.w	d5
000104D6 DA43                       		add.w	d3,d5
000104D8                            
000104D8                            loc_FA94:
000104D8 E24D                       		lsr.w	#1,d5
000104DA 7600                       		moveq	#0,d3
000104DC 1632 5000                  		move.b	(a2,d5.w),d3
000104E0 9612                       		sub.b	(a2),d3
000104E2 3A28 000C                  		move.w	$C(a0),d5
000104E6 9A43                       		sub.w	d3,d5
000104E8 1629 0016                  		move.b	$16(a1),d3
000104EC 4883                       		ext.w	d3
000104EE D443                       		add.w	d3,d2
000104F0 3629 000C                  		move.w	$C(a1),d3
000104F4 9645                       		sub.w	d5,d3
000104F6 5843                       		addq.w	#4,d3
000104F8 D642                       		add.w	d2,d3
000104FA 6B00 0000                  		bmi.w	loc_FB92
000104FE 3802                       		move.w	d2,d4
00010500 D844                       		add.w	d4,d4
00010502 B644                       		cmp.w	d4,d3
00010504 6400 0000                  		bcc.w	loc_FB92
00010508 6000 0000                  		bra.w	loc_FB0E
0001050C                            ; ===========================================================================
0001050C                            
0001050C                            loc_FAC8:
0001050C 4A28 0001                  		tst.b	1(a0)
00010510 6A00 0000                  		bpl.w	loc_FB92
00010514                            
00010514                            loc_FAD0:
00010514 43F8 D000                  		lea	($FFFFD000).w,a1
00010518 3029 0008                  		move.w	8(a1),d0
0001051C 9068 0008                  		sub.w	8(a0),d0
00010520 D041                       		add.w	d1,d0
00010522 6B00 0000                  		bmi.w	loc_FB92
00010526 3601                       		move.w	d1,d3
00010528 D643                       		add.w	d3,d3
0001052A B043                       		cmp.w	d3,d0
0001052C 6200 0000                  		bhi.w	loc_FB92
00010530 1629 0016                  		move.b	$16(a1),d3
00010534 4883                       		ext.w	d3
00010536 D443                       		add.w	d3,d2
00010538 3629 000C                  		move.w	$C(a1),d3
0001053C 9668 000C                  		sub.w	$C(a0),d3
00010540 5843                       		addq.w	#4,d3
00010542 D642                       		add.w	d2,d3
00010544 6B00 0000                  		bmi.w	loc_FB92
00010548 3802                       		move.w	d2,d4
0001054A D844                       		add.w	d4,d4
0001054C B644                       		cmp.w	d4,d3
0001054E 6400 0000                  		bcc.w	loc_FB92
00010552                            
00010552                            loc_FB0E:
00010552 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010556 6B00 0000                  		bmi.w	loc_FB92
0001055A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010560 6400 0000                  		bcc.w	loc_FB92
00010564 4A78 FE08                  		tst.w	($FFFFFE08).w
00010568 6600 0000                  		bne.w	loc_FBAC
0001056C 3A00                       		move.w	d0,d5
0001056E B240                       		cmp.w	d0,d1
00010570 6400                       		bcc.s	loc_FB36
00010572 D241                       		add.w	d1,d1
00010574 9041                       		sub.w	d1,d0
00010576 3A00                       		move.w	d0,d5
00010578 4445                       		neg.w	d5
0001057A                            
0001057A                            loc_FB36:
0001057A 3203                       		move.w	d3,d1
0001057C B443                       		cmp.w	d3,d2
0001057E 6400                       		bcc.s	loc_FB44
00010580 5943                       		subq.w	#4,d3
00010582 9644                       		sub.w	d4,d3
00010584 3203                       		move.w	d3,d1
00010586 4441                       		neg.w	d1
00010588                            
00010588                            loc_FB44:
00010588 BA41                       		cmp.w	d1,d5
0001058A 6200 0000                  		bhi.w	loc_FBB0
0001058E 0C41 0004                  		cmpi.w	#4,d1
00010592 6300                       		bls.s	loc_FB8C
00010594 4A40                       		tst.w	d0
00010596 6700                       		beq.s	loc_FB70
00010598 6B00                       		bmi.s	loc_FB5E
0001059A 4A69 0010                  		tst.w	$10(a1)
0001059E 6B00                       		bmi.s	loc_FB70
000105A0 6000                       		bra.s	loc_FB64
000105A2                            ; ===========================================================================
000105A2                            
000105A2                            loc_FB5E:
000105A2 4A69 0010                  		tst.w	$10(a1)
000105A6 6A00                       		bpl.s	loc_FB70
000105A8                            
000105A8                            loc_FB64:
000105A8 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000105AE 337C 0000 0010             		move.w	#0,$10(a1)
000105B4                            
000105B4                            loc_FB70:
000105B4 9169 0008                  		sub.w	d0,8(a1)
000105B8 0829 0001 0022             		btst	#1,$22(a1)
000105BE 6600                       		bne.s	loc_FB8C
000105C0 08E9 0005 0022             		bset	#5,$22(a1)
000105C6 08E8 0005 0022             		bset	#5,$22(a0)
000105CC 7801                       		moveq	#1,d4
000105CE 4E75                       		rts	
000105D0                            ; ===========================================================================
000105D0                            
000105D0                            loc_FB8C:
000105D0 6100                       		bsr.s	loc_FBA0
000105D2 7801                       		moveq	#1,d4
000105D4 4E75                       		rts	
000105D6                            ; ===========================================================================
000105D6                            
000105D6                            loc_FB92:
000105D6 0828 0005 0022             		btst	#5,$22(a0)
000105DC 6700                       		beq.s	loc_FBAC
000105DE 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000105E4                            
000105E4                            loc_FBA0:
000105E4 08A8 0005 0022             		bclr	#5,$22(a0)
000105EA 08A9 0005 0022             		bclr	#5,$22(a1)
000105F0                            
000105F0                            loc_FBAC:
000105F0 7800                       		moveq	#0,d4
000105F2 4E75                       		rts	
000105F4                            ; ===========================================================================
000105F4                            
000105F4                            loc_FBB0:
000105F4 4A43                       		tst.w	d3
000105F6 6B00                       		bmi.s	loc_FBBC
000105F8 0C43 0010                  		cmpi.w	#$10,d3
000105FC 6500                       		bcs.s	loc_FBEE
000105FE 60D6                       		bra.s	loc_FB92
00010600                            ; ===========================================================================
00010600                            
00010600                            loc_FBBC:
00010600 4A69 0012                  		tst.w	$12(a1)
00010604 6700                       		beq.s	loc_FBD6
00010606 6A00                       		bpl.s	loc_FBD2
00010608 4A43                       		tst.w	d3
0001060A 6A00                       		bpl.s	loc_FBD2
0001060C 9769 000C                  		sub.w	d3,$C(a1)
00010610 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010616                            
00010616                            loc_FBD2:
00010616 78FF                       		moveq	#-1,d4
00010618 4E75                       		rts	
0001061A                            ; ===========================================================================
0001061A                            
0001061A                            loc_FBD6:
0001061A 0829 0001 0022             		btst	#1,$22(a1)
00010620 66F4                       		bne.s	loc_FBD2
00010622 2F08                       		move.l	a0,-(sp)
00010624 2049                       		movea.l	a1,a0
00010626 4EB9 0000 0000             		jsr	KillSonic
0001062C 205F                       		movea.l	(sp)+,a0
0001062E 78FF                       		moveq	#-1,d4
00010630 4E75                       		rts	
00010632                            ; ===========================================================================
00010632                            
00010632                            loc_FBEE:
00010632 5943                       		subq.w	#4,d3
00010634 7200                       		moveq	#0,d1
00010636 1228 0019                  		move.b	$19(a0),d1
0001063A 3401                       		move.w	d1,d2
0001063C D442                       		add.w	d2,d2
0001063E D269 0008                  		add.w	8(a1),d1
00010642 9268 0008                  		sub.w	8(a0),d1
00010646 6B00                       		bmi.s	loc_FC28
00010648 B242                       		cmp.w	d2,d1
0001064A 6400                       		bcc.s	loc_FC28
0001064C 4A69 0012                  		tst.w	$12(a1)
00010650 6B00                       		bmi.s	loc_FC28
00010652 9769 000C                  		sub.w	d3,$C(a1)
00010656 5369 000C                  		subq.w	#1,$C(a1)
0001065A 6100                       		bsr.s	sub_FC2C
0001065C 117C 0002 0025             		move.b	#2,$25(a0)
00010662 08E8 0003 0022             		bset	#3,$22(a0)
00010668 78FF                       		moveq	#-1,d4
0001066A 4E75                       		rts	
0001066C                            ; ===========================================================================
0001066C                            
0001066C                            loc_FC28:
0001066C 7800                       		moveq	#0,d4
0001066E 4E75                       		rts	
00010670                            ; End of function SolidObject
00010670                            
00010670                            
00010670                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010670                            
00010670                            
00010670                            sub_FC2C:				; XREF: SolidObject
00010670 0829 0003 0022             		btst	#3,$22(a1)
00010676 6700                       		beq.s	loc_FC4E
00010678 7000                       		moveq	#0,d0
0001067A 1029 003D                  		move.b	$3D(a1),d0
0001067E ED48                       		lsl.w	#6,d0
00010680 0680 00FF D000             		addi.l	#$FFD000,d0
00010686 2440                       		movea.l	d0,a2
00010688 08AA 0003 0022             		bclr	#3,$22(a2)
0001068E 422A 0025                  		clr.b	$25(a2)
00010692                            
00010692                            loc_FC4E:
00010692 3008                       		move.w	a0,d0
00010694 0440 D000                  		subi.w	#-$3000,d0
00010698 EC48                       		lsr.w	#6,d0
0001069A 0240 007F                  		andi.w	#$7F,d0
0001069E 1340 003D                  		move.b	d0,$3D(a1)
000106A2 137C 0000 0026             		move.b	#0,$26(a1)
000106A8 337C 0000 0012             		move.w	#0,$12(a1)
000106AE 3369 0010 0014             		move.w	$10(a1),$14(a1)
000106B4 0829 0001 0022             		btst	#1,$22(a1)
000106BA 6700                       		beq.s	loc_FC84
000106BC 2F08                       		move.l	a0,-(sp)
000106BE 2049                       		movea.l	a1,a0
000106C0 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000106C6 205F                       		movea.l	(sp)+,a0
000106C8                            
000106C8                            loc_FC84:
000106C8 08E9 0003 0022             		bset	#3,$22(a1)
000106CE 08E8 0003 0022             		bset	#3,$22(a0)
000106D4 4E75                       		rts	
000106D6                            ; End of function sub_FC2C
000106D6                            
000106D6                            ; ===========================================================================
000106D6                            ; ---------------------------------------------------------------------------
000106D6                            ; Object 51 - smashable	green block (MZ)
000106D6                            ; ---------------------------------------------------------------------------
000106D6                            
000106D6                            Obj51:					; XREF: Obj_Index
000106D6 7000                       		moveq	#0,d0
000106D8 1028 0024                  		move.b	$24(a0),d0
000106DC 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000106E0 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000106E4 6000 FA0E                  		bra.w	MarkObjGone
000106E8                            ; ===========================================================================
000106E8 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000106EA 0000                       		dc.w Obj51_Solid-Obj51_Index
000106EC 0000                       		dc.w Obj51_Display-Obj51_Index
000106EE                            ; ===========================================================================
000106EE                            
000106EE                            Obj51_Main:				; XREF: Obj51_Index
000106EE 5428 0024                  		addq.b	#2,$24(a0)
000106F2 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000106FA 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010700 117C 0004 0001             		move.b	#4,1(a0)
00010706 117C 0010 0019             		move.b	#$10,$19(a0)
0001070C 117C 0004 0018             		move.b	#4,$18(a0)
00010712 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010718                            
00010718                            Obj51_Solid:				; XREF: Obj51_Index
00010718 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001071E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010724 323C 001B                  		move.w	#$1B,d1
00010728 343C 0010                  		move.w	#$10,d2
0001072C 363C 0011                  		move.w	#$11,d3
00010730 3828 0008                  		move.w	8(a0),d4
00010734 6100 FCE6                  		bsr.w	SolidObject
00010738 0828 0003 0022             		btst	#3,$22(a0)
0001073E 6600                       		bne.s	Obj51_Smash
00010740                            
00010740                            locret_FCFC:
00010740 4E75                       		rts	
00010742                            ; ===========================================================================
00010742                            
00010742                            Obj51_Smash:				; XREF: Obj51_Solid
00010742 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010748 66F6                       		bne.s	locret_FCFC	; if not, branch
0001074A 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010750 08E9 0002 0022             		bset	#2,$22(a1)
00010756 137C 000E 0016             		move.b	#$E,$16(a1)
0001075C 137C 0007 0017             		move.b	#7,$17(a1)
00010762 137C 0002 001C             		move.b	#2,$1C(a1)
00010768 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001076E 08E9 0001 0022             		bset	#1,$22(a1)
00010774 08A9 0003 0022             		bclr	#3,$22(a1)
0001077A 137C 0002 0024             		move.b	#2,$24(a1)
00010780 08A8 0003 0022             		bclr	#3,$22(a0)
00010786 4228 0025                  		clr.b	$25(a0)
0001078A 117C 0001 001A             		move.b	#1,$1A(a0)
00010790 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010796 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010798 343C 0038                  		move.w	#$38,d2
0001079C 6100 D456                  		bsr.w	SmashObject
000107A0 6100 DD30                  		bsr.w	SingleObjLoad
000107A4 6600                       		bne.s	Obj51_Display
000107A6 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000107AA 3368 0008 0008             		move.w	8(a0),8(a1)
000107B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000107B6 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000107BA 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000107BE 0C42 0006                  		cmpi.w	#6,d2
000107C2 6500                       		bcs.s	Obj51_Bonus
000107C4 7406                       		moveq	#6,d2
000107C6                            
000107C6                            Obj51_Bonus:
000107C6 7000                       		moveq	#0,d0
000107C8 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000107CC 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000107D2 6500                       		bcs.s	loc_FD98	; if not, branch
000107D4 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000107D8 740A                       		moveq	#10,d2
000107DA                            
000107DA                            loc_FD98:
000107DA 4EB9 0000 0000             		jsr	AddPoints
000107E0 E24A                       		lsr.w	#1,d2
000107E2 1342 001A                  		move.b	d2,$1A(a1)
000107E6                            
000107E6                            Obj51_Display:				; XREF: Obj51_Index
000107E6 6100 D83E                  		bsr.w	SpeedToPos
000107EA 0668 0038 0012             		addi.w	#$38,$12(a0)
000107F0 6100 D85A                  		bsr.w	DisplaySprite
000107F4 4A28 0001                  		tst.b	1(a0)
000107F8 6A00 D88E                  		bpl.w	DeleteObject
000107FC 4E75                       		rts	
000107FE                            ; ===========================================================================
000107FE FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010802 FF00 FF00                  		dc.w $FF00, $FF00
00010806 0200 FE00                  		dc.w $200, $FE00
0001080A 0100 FF00                  		dc.w $100, $FF00
0001080E                            
0001080E 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010816                            ; ---------------------------------------------------------------------------
00010816                            ; Sprite mappings - smashable green block (MZ)
00010816                            ; ---------------------------------------------------------------------------
00010816                            Map_obj51:
00010816                            	include "_maps\obj51.asm"
00010816                            ; ---------------------------------------------------------------------------
00010816                            ; Sprite mappings - smashable green block (MZ)
00010816                            ; ---------------------------------------------------------------------------
00010816 0000                       		dc.w byte_FDD8-Map_obj51
00010818 0000                       		dc.w byte_FDE3-Map_obj51
0001081A 02                         byte_FDD8:	dc.b 2
0001081B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010820 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010825 04                         byte_FDE3:	dc.b 4
00010826 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001082B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010830 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010835 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0001083A                            		even
0001083A                            		even
0001083A                            
0001083A                            ; ===========================================================================
0001083A                            ; ---------------------------------------------------------------------------
0001083A                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0001083A                            ; ---------------------------------------------------------------------------
0001083A                            
0001083A                            Obj52:					; XREF: Obj_Index
0001083A 7000                       		moveq	#0,d0
0001083C 1028 0024                  		move.b	$24(a0),d0
00010840 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010844 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010848                            ; ===========================================================================
00010848 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0001084A 0000                       		dc.w Obj52_Platform-Obj52_Index
0001084C 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001084E                            
0001084E 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010850 2001                       		dc.b $20, 1
00010852 2002                       		dc.b $20, 2
00010854 4003                       		dc.b $40, 3
00010856 3004                       		dc.b $30, 4
00010858                            ; ===========================================================================
00010858                            
00010858                            Obj52_Main:				; XREF: Obj52_Index
00010858 5428 0024                  		addq.b	#2,$24(a0)
0001085C 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010864 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001086A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010870 6600                       		bne.s	loc_FE44
00010872 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001087A 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010880 117C 0007 0016             		move.b	#7,$16(a0)
00010886                            
00010886                            loc_FE44:
00010886 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001088C 6600                       		bne.s	loc_FE60
0001088E 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010894 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0001089A 6700                       		beq.s	loc_FE60	; if yes, branch
0001089C 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000108A2                            
000108A2                            loc_FE60:
000108A2 117C 0004 0001             		move.b	#4,1(a0)
000108A8 7000                       		moveq	#0,d0
000108AA 1028 0028                  		move.b	$28(a0),d0
000108AE E648                       		lsr.w	#3,d0
000108B0 0240 001E                  		andi.w	#$1E,d0
000108B4 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000108B8 115A 0019                  		move.b	(a2)+,$19(a0)
000108BC 115A 001A                  		move.b	(a2)+,$1A(a0)
000108C0 117C 0004 0018             		move.b	#4,$18(a0)
000108C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000108CC 3168 000C 0032             		move.w	$C(a0),$32(a0)
000108D2 0228 000F 0028             		andi.b	#$F,$28(a0)
000108D8                            
000108D8                            Obj52_Platform:				; XREF: Obj52_Index
000108D8 6100 0000                  		bsr.w	Obj52_Move
000108DC 7200                       		moveq	#0,d1
000108DE 1228 0019                  		move.b	$19(a0),d1
000108E2 4EB9 0000 7C56             		jsr	(PlatformObject).l
000108E8 6000                       		bra.s	Obj52_ChkDel
000108EA                            ; ===========================================================================
000108EA                            
000108EA                            Obj52_StandOn:				; XREF: Obj52_Index
000108EA 7200                       		moveq	#0,d1
000108EC 1228 0019                  		move.b	$19(a0),d1
000108F0 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
000108F6 3F28 0008                  		move.w	8(a0),-(sp)
000108FA 6100 0000                  		bsr.w	Obj52_Move
000108FE 341F                       		move.w	(sp)+,d2
00010900 4EB9 0000 8334             		jsr	(MvSonicOnPtfm2).l
00010906                            
00010906                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010906 3028 0030                  		move.w	$30(a0),d0
0001090A 0240 FF80                  		andi.w	#$FF80,d0
0001090E 3238 F700                  		move.w	($FFFFF700).w,d1
00010912 0441 0080                  		subi.w	#$80,d1
00010916 0241 FF80                  		andi.w	#$FF80,d1
0001091A 9041                       		sub.w	d1,d0
0001091C 0C40 0280                  		cmpi.w	#$280,d0
00010920 6200 D766                  		bhi.w	DeleteObject
00010924 6000 D726                  		bra.w	DisplaySprite
00010928                            ; ===========================================================================
00010928                            
00010928                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010928 7000                       		moveq	#0,d0
0001092A 1028 0028                  		move.b	$28(a0),d0
0001092E 0240 000F                  		andi.w	#$F,d0
00010932 D040                       		add.w	d0,d0
00010934 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010938 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001093C                            ; ===========================================================================
0001093C 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010940 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010944 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010948 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001094C 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010950 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010952                            ; ===========================================================================
00010952                            
00010952                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010952 4E75                       		rts	
00010954                            ; ===========================================================================
00010954                            
00010954                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010954 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010958 323C 0060                  		move.w	#$60,d1
0001095C 0828 0000 0022             		btst	#0,$22(a0)
00010962 6700                       		beq.s	loc_FF26
00010964 4440                       		neg.w	d0
00010966 D041                       		add.w	d1,d0
00010968                            
00010968                            loc_FF26:
00010968 3228 0030                  		move.w	$30(a0),d1
0001096C 9240                       		sub.w	d0,d1
0001096E 3141 0008                  		move.w	d1,8(a0)
00010972 4E75                       		rts	
00010974                            ; ===========================================================================
00010974                            
00010974                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010974 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001097A 6600                       		bne.s	Obj52_02_Wait
0001097C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010980                            
00010980                            Obj52_02_Wait:
00010980 4E75                       		rts	
00010982                            ; ===========================================================================
00010982                            
00010982                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010982 7600                       		moveq	#0,d3
00010984 1628 0019                  		move.b	$19(a0),d3
00010988 6100 0000                  		bsr.w	ObjHitWallRight
0001098C 4A41                       		tst.w	d1		; has the platform hit a wall?
0001098E 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010990 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010994 3168 0008 0030             		move.w	8(a0),$30(a0)
0001099A 4E75                       		rts	
0001099C                            ; ===========================================================================
0001099C                            
0001099C                            Obj52_03_End:
0001099C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000109A0 4E75                       		rts	
000109A2                            ; ===========================================================================
000109A2                            
000109A2                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000109A2 7600                       		moveq	#0,d3
000109A4 1628 0019                  		move.b	$19(a0),d3
000109A8 6100 0000                  		bsr.w	ObjHitWallRight
000109AC 4A41                       		tst.w	d1		; has the platform hit a wall?
000109AE 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000109B0 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000109B4 3168 0008 0030             		move.w	8(a0),$30(a0)
000109BA 4E75                       		rts	
000109BC                            ; ===========================================================================
000109BC                            
000109BC                            Obj52_05_End:
000109BC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000109C0 4E75                       		rts	
000109C2                            ; ===========================================================================
000109C2                            
000109C2                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000109C2 6100 D662                  		bsr.w	SpeedToPos
000109C6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000109CC 6100 0000                  		bsr.w	ObjHitFloor
000109D0 4A41                       		tst.w	d1		; has platform hit the floor?
000109D2 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000109D6 D368 000C                  		add.w	d1,$C(a0)
000109DA 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000109DE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000109E2                            
000109E2                            locret_FFA0:
000109E2 4E75                       		rts	
000109E4                            ; ===========================================================================
000109E4                            
000109E4                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000109E4 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000109E8 6700                       		beq.s	Obj52_07_ChkDel
000109EA 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000109EE                            
000109EE                            Obj52_07_ChkDel:
000109EE 588F                       		addq.l	#4,sp
000109F0 3028 0030                  		move.w	$30(a0),d0
000109F4 0240 FF80                  		andi.w	#$FF80,d0
000109F8 3238 F700                  		move.w	($FFFFF700).w,d1
000109FC 0441 0080                  		subi.w	#$80,d1
00010A00 0241 FF80                  		andi.w	#$FF80,d1
00010A04 9041                       		sub.w	d1,d0
00010A06 0C40 0280                  		cmpi.w	#$280,d0
00010A0A 6200 D67C                  		bhi.w	DeleteObject
00010A0E 4E75                       		rts	
00010A10                            ; ===========================================================================
00010A10                            
00010A10                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010A10 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010A14 323C 0080                  		move.w	#$80,d1
00010A18 0828 0000 0022             		btst	#0,$22(a0)
00010A1E 6700                       		beq.s	loc_FFE2
00010A20 4440                       		neg.w	d0
00010A22 D041                       		add.w	d1,d0
00010A24                            
00010A24                            loc_FFE2:
00010A24 3228 0032                  		move.w	$32(a0),d1
00010A28 9240                       		sub.w	d0,d1
00010A2A 3141 000C                  		move.w	d1,$C(a0)
00010A2E 4E75                       		rts	
00010A30                            ; ===========================================================================
00010A30                            
00010A30                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010A30 7600                       		moveq	#0,d3
00010A32 1628 0019                  		move.b	$19(a0),d3
00010A36 D643                       		add.w	d3,d3
00010A38 7208                       		moveq	#8,d1
00010A3A 0828 0000 0022             		btst	#0,$22(a0)
00010A40 6700                       		beq.s	loc_10004
00010A42 4441                       		neg.w	d1
00010A44 4443                       		neg.w	d3
00010A46                            
00010A46                            loc_10004:
00010A46 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010A4A 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00010A4C 3028 0008                  		move.w	8(a0),d0
00010A50 9068 0030                  		sub.w	$30(a0),d0
00010A54 B043                       		cmp.w	d3,d0
00010A56 6700                       		beq.s	Obj52_0A_Wait
00010A58 D368 0008                  		add.w	d1,8(a0)	; move platform
00010A5C 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010A62 4E75                       		rts	
00010A64                            ; ===========================================================================
00010A64                            
00010A64                            Obj52_0A_Wait:
00010A64 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010A68 6600                       		bne.s	locret_1002E	; if time remains, branch
00010A6A 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010A70                            
00010A70                            locret_1002E:
00010A70 4E75                       		rts	
00010A72                            ; ===========================================================================
00010A72                            
00010A72                            Obj52_0A_Back:
00010A72 3028 0008                  		move.w	8(a0),d0
00010A76 9068 0030                  		sub.w	$30(a0),d0
00010A7A 6700                       		beq.s	Obj52_0A_Reset
00010A7C 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010A80 4E75                       		rts	
00010A82                            ; ===========================================================================
00010A82                            
00010A82                            Obj52_0A_Reset:
00010A82 4268 0036                  		clr.w	$36(a0)
00010A86 5328 0028                  		subq.b	#1,$28(a0)
00010A8A 4E75                       		rts	
00010A8C                            ; ===========================================================================
00010A8C                            ; ---------------------------------------------------------------------------
00010A8C                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A8C                            ; ---------------------------------------------------------------------------
00010A8C                            Map_obj52:
00010A8C                            	include "_maps\obj52mz.asm"
00010A8C                            ; ---------------------------------------------------------------------------
00010A8C                            ; Sprite mappings - moving blocks (MZ, SBZ)
00010A8C                            ; ---------------------------------------------------------------------------
00010A8C 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010A90 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010A94 0000                       		dc.w byte_1008F-Map_obj52
00010A96 01                         byte_10054:	dc.b 1
00010A97 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010A9C 02                         byte_1005A:	dc.b 2
00010A9D F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010AA2 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010AA7 04                         byte_10065:	dc.b 4
00010AA8 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010AAD 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010AB2 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010AB7 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010ABC 04                         byte_1007A:	dc.b 4
00010ABD F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010AC2 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010AC7 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010ACC F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010AD1 03                         byte_1008F:	dc.b 3
00010AD2 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010AD7 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010ADC F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010AE2 00                         		even
00010AE2 00                         		even
00010AE2                            
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2                            ; Sprite mappings - moving block (LZ)
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2                            Map_obj52a:
00010AE2                            	include "_maps\obj52lz.asm"
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2                            ; Sprite mappings - moving block (LZ)
00010AE2                            ; ---------------------------------------------------------------------------
00010AE2 0000                       		dc.w byte_100A2-Map_obj52a
00010AE4 01                         byte_100A2:	dc.b 1
00010AE5 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010AEA                            		even
00010AEA                            		even
00010AEA                            
00010AEA                            ; ===========================================================================
00010AEA                            ; ---------------------------------------------------------------------------
00010AEA                            ; Object 55 - Basaran enemy (MZ)
00010AEA                            ; ---------------------------------------------------------------------------
00010AEA                            
00010AEA                            Obj55:					; XREF: Obj_Index
00010AEA 7000                       		moveq	#0,d0
00010AEC 1028 0024                  		move.b	$24(a0),d0
00010AF0 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010AF4 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010AF8                            ; ===========================================================================
00010AF8 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010AFA 0000                       		dc.w Obj55_Action-Obj55_Index
00010AFC                            ; ===========================================================================
00010AFC                            
00010AFC                            Obj55_Main:				; XREF: Obj55_Index
00010AFC 5428 0024                  		addq.b	#2,$24(a0)
00010B00 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010B08 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010B0E 117C 0004 0001             		move.b	#4,1(a0)
00010B14 117C 000C 0016             		move.b	#$C,$16(a0)
00010B1A 117C 0002 0018             		move.b	#2,$18(a0)
00010B20 117C 000B 0020             		move.b	#$B,$20(a0)
00010B26 117C 0010 0019             		move.b	#$10,$19(a0)
00010B2C                            
00010B2C                            Obj55_Action:				; XREF: Obj55_Index
00010B2C 7000                       		moveq	#0,d0
00010B2E 1028 0025                  		move.b	$25(a0),d0
00010B32 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010B36 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010B3A 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010B40 6100 A558                  		bsr.w	AnimateSprite
00010B44 6000 F5AE                  		bra.w	MarkObjGone
00010B48                            ; ===========================================================================
00010B48 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010B4A 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00010B4C 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010B4E 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010B50                            ; ===========================================================================
00010B50                            
00010B50                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010B50 343C 0080                  		move.w	#$80,d2
00010B54 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B58 6400                       		bcc.s	Obj55_NoDrop
00010B5A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010B5E 3140 0036                  		move.w	d0,$36(a0)
00010B62 9068 000C                  		sub.w	$C(a0),d0
00010B66 6500                       		bcs.s	Obj55_NoDrop
00010B68 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00010B6C 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010B6E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010B72 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010B74 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010B78 D007                       		add.b	d7,d0
00010B7A 0200 0007                  		andi.b	#7,d0
00010B7E 6600                       		bne.s	Obj55_NoDrop
00010B80 117C 0001 001C             		move.b	#1,$1C(a0)
00010B86 5428 0025                  		addq.b	#2,$25(a0)
00010B8A                            
00010B8A                            Obj55_NoDrop:
00010B8A 4E75                       		rts	
00010B8C                            ; ===========================================================================
00010B8C                            
00010B8C                            Obj55_DropFly:				; XREF: Obj55_Index2
00010B8C 6100 D498                  		bsr.w	SpeedToPos
00010B90 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010B96 343C 0080                  		move.w	#$80,d2
00010B9A 6100 0000                  		bsr.w	Obj55_ChkSonic
00010B9E 3028 0036                  		move.w	$36(a0),d0
00010BA2 9068 000C                  		sub.w	$C(a0),d0
00010BA6 6500                       		bcs.s	Obj55_ChkDel
00010BA8 0C40 0010                  		cmpi.w	#$10,d0
00010BAC 6400                       		bcc.s	locret_10180
00010BAE 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010BB2 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010BB8 117C 0002 001C             		move.b	#2,$1C(a0)
00010BBE 5428 0025                  		addq.b	#2,$25(a0)
00010BC2                            
00010BC2                            locret_10180:
00010BC2 4E75                       		rts	
00010BC4                            ; ===========================================================================
00010BC4                            
00010BC4                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010BC4 4A28 0001                  		tst.b	1(a0)
00010BC8 6A00 D4BE                  		bpl.w	DeleteObject
00010BCC 4E75                       		rts	
00010BCE                            ; ===========================================================================
00010BCE                            
00010BCE                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010BCE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BD2 0200 000F                  		andi.b	#$F,d0
00010BD6 6600                       		bne.s	loc_101A0
00010BD8 303C 00C0                  		move.w	#$C0,d0
00010BDC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play flapping sound
00010BE2                            
00010BE2                            loc_101A0:
00010BE2 6100 D442                  		bsr.w	SpeedToPos
00010BE6 3038 D008                  		move.w	($FFFFD008).w,d0
00010BEA 9068 0008                  		sub.w	8(a0),d0
00010BEE 6400                       		bcc.s	loc_101B0
00010BF0 4440                       		neg.w	d0
00010BF2                            
00010BF2                            loc_101B0:
00010BF2 0C40 0080                  		cmpi.w	#$80,d0
00010BF6 6500                       		bcs.s	locret_101C6
00010BF8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010BFC D007                       		add.b	d7,d0
00010BFE 0200 0007                  		andi.b	#7,d0
00010C02 6600                       		bne.s	locret_101C6
00010C04 5428 0025                  		addq.b	#2,$25(a0)
00010C08                            
00010C08                            locret_101C6:
00010C08 4E75                       		rts	
00010C0A                            ; ===========================================================================
00010C0A                            
00010C0A                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010C0A 6100 D41A                  		bsr.w	SpeedToPos
00010C0E 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010C14 6100 0000                  		bsr.w	ObjHitCeiling
00010C18 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010C1A 6A00                       		bpl.s	locret_101F4	; if not, branch
00010C1C 9368 000C                  		sub.w	d1,$C(a0)
00010C20 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010C26 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010C2A 4268 0012                  		clr.w	$12(a0)
00010C2E 4228 001C                  		clr.b	$1C(a0)
00010C32 4228 0025                  		clr.b	$25(a0)
00010C36                            
00010C36                            locret_101F4:
00010C36 4E75                       		rts	
00010C38                            ; ===========================================================================
00010C38                            
00010C38                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010C38 323C 0100                  		move.w	#$100,d1
00010C3C 08E8 0000 0022             		bset	#0,$22(a0)
00010C42 3038 D008                  		move.w	($FFFFD008).w,d0
00010C46 9068 0008                  		sub.w	8(a0),d0
00010C4A 6400                       		bcc.s	loc_10214
00010C4C 4440                       		neg.w	d0
00010C4E 4441                       		neg.w	d1
00010C50 08A8 0000 0022             		bclr	#0,$22(a0)
00010C56                            
00010C56                            loc_10214:
00010C56 B042                       		cmp.w	d2,d0
00010C58 4E75                       		rts	
00010C5A                            ; ===========================================================================
00010C5A 6100 D3CA                  		bsr.w	SpeedToPos
00010C5E 6100 D3EC                  		bsr.w	DisplaySprite
00010C62 4A28 0001                  		tst.b	1(a0)
00010C66 6A00 D420                  		bpl.w	DeleteObject
00010C6A 4E75                       		rts	
00010C6C                            ; ===========================================================================
00010C6C                            Ani_obj55:
00010C6C                            	include "_anim\obj55.asm"
00010C6C                            ; ---------------------------------------------------------------------------
00010C6C                            ; Animation script - Basaran enemy
00010C6C                            ; ---------------------------------------------------------------------------
00010C6C 0000                       		dc.w byte_10230-Ani_obj55
00010C6E 0000                       		dc.w byte_10234-Ani_obj55
00010C70 0000                       		dc.w byte_10238-Ani_obj55
00010C72 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010C76 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010C7A 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010C80                            		even
00010C80                            		even
00010C80                            
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            ; Sprite mappings - Basaran enemy (MZ)
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            Map_obj55:
00010C80                            	include "_maps\obj55.asm"
00010C80                            ; ---------------------------------------------------------------------------
00010C80                            ; Sprite mappings - Basaran enemy (MZ)
00010C80                            ; ---------------------------------------------------------------------------
00010C80 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010C84 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010C88 01                         byte_10246:	dc.b 1
00010C89 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010C8E 03                         byte_1024C:	dc.b 3
00010C8F F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010C94 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010C99 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010C9E 04                         byte_1025C:	dc.b 4
00010C9F F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010CA4 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010CA9 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010CAE 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010CB3 04                         byte_10271:	dc.b 4
00010CB4 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010CB9 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010CBE 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010CC3 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010CC8                            		even
00010CC8                            		even
00010CC8                            
00010CC8                            ; ===========================================================================
00010CC8                            ; ---------------------------------------------------------------------------
00010CC8                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010CC8                            ; ---------------------------------------------------------------------------
00010CC8                            
00010CC8                            Obj56:					; XREF: Obj_Index
00010CC8 7000                       		moveq	#0,d0
00010CCA 1028 0024                  		move.b	$24(a0),d0
00010CCE 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010CD2 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010CD6                            ; ===========================================================================
00010CD6 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010CD8 0000                       		dc.w Obj56_Action-Obj56_Index
00010CDA                            
00010CDA 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010CDC 2020                       		dc.b  $20, $20
00010CDE 1020                       		dc.b  $10, $20
00010CE0 201A                       		dc.b  $20, $1A
00010CE2 1027                       		dc.b  $10, $27
00010CE4 1010                       		dc.b  $10, $10
00010CE6 0820                       		dc.b	8, $20
00010CE8 4010                       		dc.b  $40, $10
00010CEA                            ; ===========================================================================
00010CEA                            
00010CEA                            Obj56_Main:				; XREF: Obj56_Index
00010CEA 5428 0024                  		addq.b	#2,$24(a0)
00010CEE 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010CF6 317C 4000 0002             		move.w	#$4000,2(a0)
00010CFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D02 6600                       		bne.s	loc_102C8
00010D04 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010D0A                            
00010D0A                            loc_102C8:
00010D0A 117C 0004 0001             		move.b	#4,1(a0)
00010D10 117C 0003 0018             		move.b	#3,$18(a0)
00010D16 7000                       		moveq	#0,d0
00010D18 1028 0028                  		move.b	$28(a0),d0
00010D1C E648                       		lsr.w	#3,d0
00010D1E 0240 000E                  		andi.w	#$E,d0
00010D22 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010D26 115A 0019                  		move.b	(a2)+,$19(a0)
00010D2A 1152 0016                  		move.b	(a2),$16(a0)
00010D2E E248                       		lsr.w	#1,d0
00010D30 1140 001A                  		move.b	d0,$1A(a0)
00010D34 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D3A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D40 7000                       		moveq	#0,d0
00010D42 1012                       		move.b	(a2),d0
00010D44 D040                       		add.w	d0,d0
00010D46 3140 003A                  		move.w	d0,$3A(a0)
00010D4A 7000                       		moveq	#0,d0
00010D4C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D52 6700                       		beq.s	loc_10332
00010D54 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010D58 0240 000F                  		andi.w	#$F,d0
00010D5C 5140                       		subq.w	#8,d0
00010D5E 6500                       		bcs.s	loc_10332
00010D60 E548                       		lsl.w	#2,d0
00010D62 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010D66 45F2 0000                  		lea	(a2,d0.w),a2
00010D6A 4A52                       		tst.w	(a2)
00010D6C 6A00                       		bpl.s	loc_10332
00010D6E 0868 0000 0022             		bchg	#0,$22(a0)
00010D74                            
00010D74                            loc_10332:
00010D74 1028 0028                  		move.b	$28(a0),d0
00010D78 6A00                       		bpl.s	Obj56_Action
00010D7A 0200 000F                  		andi.b	#$F,d0
00010D7E 1140 003C                  		move.b	d0,$3C(a0)
00010D82 117C 0005 0028             		move.b	#5,$28(a0)
00010D88 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010D8E 6600                       		bne.s	Obj56_ChkGone
00010D90 117C 000C 0028             		move.b	#$C,$28(a0)
00010D96 317C 0080 003A             		move.w	#$80,$3A(a0)
00010D9C                            
00010D9C                            Obj56_ChkGone:
00010D9C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DA0 7000                       		moveq	#0,d0
00010DA2 1028 0023                  		move.b	$23(a0),d0
00010DA6 6700                       		beq.s	Obj56_Action
00010DA8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010DAE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010DB4 6700                       		beq.s	Obj56_Action
00010DB6 5228 0028                  		addq.b	#1,$28(a0)
00010DBA 4268 003A                  		clr.w	$3A(a0)
00010DBE                            
00010DBE                            Obj56_Action:				; XREF: Obj56_Index
00010DBE 3F28 0008                  		move.w	8(a0),-(sp)
00010DC2 7000                       		moveq	#0,d0
00010DC4 1028 0028                  		move.b	$28(a0),d0	; get object type
00010DC8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010DCC D040                       		add.w	d0,d0
00010DCE 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010DD2 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010DD6 381F                       		move.w	(sp)+,d4
00010DD8 4A28 0001                  		tst.b	1(a0)
00010DDC 6A00                       		bpl.s	Obj56_ChkDel
00010DDE 7200                       		moveq	#0,d1
00010DE0 1228 0019                  		move.b	$19(a0),d1
00010DE4 0641 000B                  		addi.w	#$B,d1
00010DE8 7400                       		moveq	#0,d2
00010DEA 1428 0016                  		move.b	$16(a0),d2
00010DEE 3602                       		move.w	d2,d3
00010DF0 5243                       		addq.w	#1,d3
00010DF2 6100 F628                  		bsr.w	SolidObject
00010DF6                            
00010DF6                            Obj56_ChkDel:
00010DF6 3028 0034                  		move.w	$34(a0),d0
00010DFA 0240 FF80                  		andi.w	#$FF80,d0
00010DFE 3238 F700                  		move.w	($FFFFF700).w,d1
00010E02 0441 0080                  		subi.w	#$80,d1
00010E06 0241 FF80                  		andi.w	#$FF80,d1
00010E0A 9041                       		sub.w	d1,d0
00010E0C 0C40 0280                  		cmpi.w	#$280,d0
00010E10 6200 D276                  		bhi.w	DeleteObject
00010E14 6000 D236                  		bra.w	DisplaySprite
00010E18                            ; ===========================================================================
00010E18 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010E1C 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010E20 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010E24 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010E28 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010E2C 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010E30 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010E34                            ; ===========================================================================
00010E34                            
00010E34                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010E34 4E75                       		rts	
00010E36                            ; ===========================================================================
00010E36                            
00010E36                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010E36 323C 0040                  		move.w	#$40,d1
00010E3A 7000                       		moveq	#0,d0
00010E3C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E40 6000                       		bra.s	Obj56_Move_LR
00010E42                            ; ===========================================================================
00010E42                            
00010E42                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010E42 323C 0080                  		move.w	#$80,d1
00010E46 7000                       		moveq	#0,d0
00010E48 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E4C                            
00010E4C                            Obj56_Move_LR:
00010E4C 0828 0000 0022             		btst	#0,$22(a0)
00010E52 6700                       		beq.s	loc_10416
00010E54 4440                       		neg.w	d0
00010E56 D041                       		add.w	d1,d0
00010E58                            
00010E58                            loc_10416:
00010E58 3228 0034                  		move.w	$34(a0),d1
00010E5C 9240                       		sub.w	d0,d1
00010E5E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010E62 4E75                       		rts	
00010E64                            ; ===========================================================================
00010E64                            
00010E64                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010E64 323C 0040                  		move.w	#$40,d1
00010E68 7000                       		moveq	#0,d0
00010E6A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010E6E 6000                       		bra.s	Obj56_Move_UD
00010E70                            ; ===========================================================================
00010E70                            
00010E70                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010E70 323C 0080                  		move.w	#$80,d1
00010E74 7000                       		moveq	#0,d0
00010E76 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010E7A                            
00010E7A                            Obj56_Move_UD:
00010E7A 0828 0000 0022             		btst	#0,$22(a0)
00010E80 6700                       		beq.s	loc_10444
00010E82 4440                       		neg.w	d0
00010E84 D041                       		add.w	d1,d0
00010E86                            
00010E86                            loc_10444:
00010E86 3228 0030                  		move.w	$30(a0),d1
00010E8A 9240                       		sub.w	d0,d1
00010E8C 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010E90 4E75                       		rts	
00010E92                            ; ===========================================================================
00010E92                            
00010E92                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010E92 4A28 0038                  		tst.b	$38(a0)
00010E96 6600                       		bne.s	loc_104A4
00010E98 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010E9E 6600                       		bne.s	loc_1047A	; if not, branch
00010EA0 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010EA6 6600                       		bne.s	loc_1047A
00010EA8 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010EAC 3038 D008                  		move.w	($FFFFD008).w,d0
00010EB0 B068 0008                  		cmp.w	8(a0),d0
00010EB4 6400                       		bcc.s	loc_1047A
00010EB6 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010EBC                            
00010EBC                            loc_1047A:
00010EBC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010EC0 7000                       		moveq	#0,d0
00010EC2 1028 003C                  		move.b	$3C(a0),d0
00010EC6 0832 0000 0000             		btst	#0,(a2,d0.w)
00010ECC 6700                       		beq.s	loc_104AE
00010ECE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010ED4 6600                       		bne.s	loc_1049E	; if not, branch
00010ED6 0C00 0003                  		cmpi.b	#3,d0
00010EDA 6600                       		bne.s	loc_1049E
00010EDC 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010EE0                            
00010EE0                            loc_1049E:
00010EE0 117C 0001 0038             		move.b	#1,$38(a0)
00010EE6                            
00010EE6                            loc_104A4:
00010EE6 4A68 003A                  		tst.w	$3A(a0)
00010EEA 6700                       		beq.s	loc_104C8
00010EEC 5568 003A                  		subq.w	#2,$3A(a0)
00010EF0                            
00010EF0                            loc_104AE:
00010EF0 3028 003A                  		move.w	$3A(a0),d0
00010EF4 0828 0000 0022             		btst	#0,$22(a0)
00010EFA 6700                       		beq.s	loc_104BC
00010EFC 4440                       		neg.w	d0
00010EFE                            
00010EFE                            loc_104BC:
00010EFE 3228 0030                  		move.w	$30(a0),d1
00010F02 D240                       		add.w	d0,d1
00010F04 3141 000C                  		move.w	d1,$C(a0)
00010F08 4E75                       		rts	
00010F0A                            ; ===========================================================================
00010F0A                            
00010F0A                            loc_104C8:
00010F0A 5228 0028                  		addq.b	#1,$28(a0)
00010F0E 4228 0038                  		clr.b	$38(a0)
00010F12 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F16 7000                       		moveq	#0,d0
00010F18 1028 0023                  		move.b	$23(a0),d0
00010F1C 67D2                       		beq.s	loc_104AE
00010F1E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010F24 60CA                       		bra.s	loc_104AE
00010F26                            ; ===========================================================================
00010F26                            
00010F26                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010F26 4A28 0038                  		tst.b	$38(a0)
00010F2A 6600                       		bne.s	loc_10500
00010F2C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010F30 7000                       		moveq	#0,d0
00010F32 1028 003C                  		move.b	$3C(a0),d0
00010F36 4A32 0000                  		tst.b	(a2,d0.w)
00010F3A 6A00                       		bpl.s	loc_10512
00010F3C 117C 0001 0038             		move.b	#1,$38(a0)
00010F42                            
00010F42                            loc_10500:
00010F42 7000                       		moveq	#0,d0
00010F44 1028 0016                  		move.b	$16(a0),d0
00010F48 D040                       		add.w	d0,d0
00010F4A B068 003A                  		cmp.w	$3A(a0),d0
00010F4E 6700                       		beq.s	loc_1052C
00010F50 5468 003A                  		addq.w	#2,$3A(a0)
00010F54                            
00010F54                            loc_10512:
00010F54 3028 003A                  		move.w	$3A(a0),d0
00010F58 0828 0000 0022             		btst	#0,$22(a0)
00010F5E 6700                       		beq.s	loc_10520
00010F60 4440                       		neg.w	d0
00010F62                            
00010F62                            loc_10520:
00010F62 3228 0030                  		move.w	$30(a0),d1
00010F66 D240                       		add.w	d0,d1
00010F68 3141 000C                  		move.w	d1,$C(a0)
00010F6C 4E75                       		rts	
00010F6E                            ; ===========================================================================
00010F6E                            
00010F6E                            loc_1052C:
00010F6E 5328 0028                  		subq.b	#1,$28(a0)
00010F72 4228 0038                  		clr.b	$38(a0)
00010F76 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010F7A 7000                       		moveq	#0,d0
00010F7C 1028 0023                  		move.b	$23(a0),d0
00010F80 67D2                       		beq.s	loc_10512
00010F82 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010F88 60CA                       		bra.s	loc_10512
00010F8A                            ; ===========================================================================
00010F8A                            
00010F8A                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010F8A 4A28 0038                  		tst.b	$38(a0)
00010F8E 6600                       		bne.s	loc_1055E
00010F90 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010F94 6700                       		beq.s	locret_10578
00010F96 117C 0001 0038             		move.b	#1,$38(a0)
00010F9C 4268 003A                  		clr.w	$3A(a0)
00010FA0                            
00010FA0                            loc_1055E:
00010FA0 5268 0008                  		addq.w	#1,8(a0)
00010FA4 3168 0008 0034             		move.w	8(a0),$34(a0)
00010FAA 5268 003A                  		addq.w	#1,$3A(a0)
00010FAE 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010FB4 6600                       		bne.s	locret_10578
00010FB6 4228 0028                  		clr.b	$28(a0)
00010FBA                            
00010FBA                            locret_10578:
00010FBA 4E75                       		rts	
00010FBC                            ; ===========================================================================
00010FBC                            
00010FBC                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010FBC 4A28 0038                  		tst.b	$38(a0)
00010FC0 6600                       		bne.s	loc_10598
00010FC2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010FC6 7000                       		moveq	#0,d0
00010FC8 1028 003C                  		move.b	$3C(a0),d0
00010FCC 0832 0000 0000             		btst	#0,(a2,d0.w)
00010FD2 6700                       		beq.s	loc_105A2
00010FD4 117C 0001 0038             		move.b	#1,$38(a0)
00010FDA                            
00010FDA                            loc_10598:
00010FDA 4A68 003A                  		tst.w	$3A(a0)
00010FDE 6700                       		beq.s	loc_105C0
00010FE0 5568 003A                  		subq.w	#2,$3A(a0)
00010FE4                            
00010FE4                            loc_105A2:
00010FE4 3028 003A                  		move.w	$3A(a0),d0
00010FE8 0828 0000 0022             		btst	#0,$22(a0)
00010FEE 6700                       		beq.s	loc_105B4
00010FF0 4440                       		neg.w	d0
00010FF2 0640 0080                  		addi.w	#$80,d0
00010FF6                            
00010FF6                            loc_105B4:
00010FF6 3228 0034                  		move.w	$34(a0),d1
00010FFA D240                       		add.w	d0,d1
00010FFC 3141 0008                  		move.w	d1,8(a0)
00011000 4E75                       		rts	
00011002                            ; ===========================================================================
00011002                            
00011002                            loc_105C0:
00011002 5228 0028                  		addq.b	#1,$28(a0)
00011006 4228 0038                  		clr.b	$38(a0)
0001100A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001100E 7000                       		moveq	#0,d0
00011010 1028 0023                  		move.b	$23(a0),d0
00011014 67CE                       		beq.s	loc_105A2
00011016 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001101C 60C6                       		bra.s	loc_105A2
0001101E                            ; ===========================================================================
0001101E                            
0001101E                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
0001101E 4A28 0038                  		tst.b	$38(a0)
00011022 6600                       		bne.s	loc_105F8
00011024 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011028 7000                       		moveq	#0,d0
0001102A 1028 003C                  		move.b	$3C(a0),d0
0001102E 4A32 0000                  		tst.b	(a2,d0.w)
00011032 6A00                       		bpl.s	loc_10606
00011034 117C 0001 0038             		move.b	#1,$38(a0)
0001103A                            
0001103A                            loc_105F8:
0001103A 303C 0080                  		move.w	#$80,d0
0001103E B068 003A                  		cmp.w	$3A(a0),d0
00011042 6700                       		beq.s	loc_10624
00011044 5468 003A                  		addq.w	#2,$3A(a0)
00011048                            
00011048                            loc_10606:
00011048 3028 003A                  		move.w	$3A(a0),d0
0001104C 0828 0000 0022             		btst	#0,$22(a0)
00011052 6700                       		beq.s	loc_10618
00011054 4440                       		neg.w	d0
00011056 0640 0080                  		addi.w	#$80,d0
0001105A                            
0001105A                            loc_10618:
0001105A 3228 0034                  		move.w	$34(a0),d1
0001105E D240                       		add.w	d0,d1
00011060 3141 0008                  		move.w	d1,8(a0)
00011064 4E75                       		rts	
00011066                            ; ===========================================================================
00011066                            
00011066                            loc_10624:
00011066 5328 0028                  		subq.b	#1,$28(a0)
0001106A 4228 0038                  		clr.b	$38(a0)
0001106E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011072 7000                       		moveq	#0,d0
00011074 1028 0023                  		move.b	$23(a0),d0
00011078 67CE                       		beq.s	loc_10606
0001107A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011080 60C6                       		bra.s	loc_10606
00011082                            ; ===========================================================================
00011082                            
00011082                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011082 323C 0010                  		move.w	#$10,d1
00011086 7000                       		moveq	#0,d0
00011088 1038 FE88                  		move.b	($FFFFFE88).w,d0
0001108C E248                       		lsr.w	#1,d0
0001108E 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011092 6000                       		bra.s	Obj56_Move_Sqr
00011094                            ; ===========================================================================
00011094                            
00011094                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00011094 323C 0030                  		move.w	#$30,d1
00011098 7000                       		moveq	#0,d0
0001109A 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
0001109E 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000110A2 6000                       		bra.s	Obj56_Move_Sqr
000110A4                            ; ===========================================================================
000110A4                            
000110A4                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000110A4 323C 0050                  		move.w	#$50,d1
000110A8 7000                       		moveq	#0,d0
000110AA 1038 FE90                  		move.b	($FFFFFE90).w,d0
000110AE 3638 FE92                  		move.w	($FFFFFE92).w,d3
000110B2 6000                       		bra.s	Obj56_Move_Sqr
000110B4                            ; ===========================================================================
000110B4                            
000110B4                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000110B4 323C 0070                  		move.w	#$70,d1
000110B8 7000                       		moveq	#0,d0
000110BA 1038 FE94                  		move.b	($FFFFFE94).w,d0
000110BE 3638 FE96                  		move.w	($FFFFFE96).w,d3
000110C2                            
000110C2                            Obj56_Move_Sqr:
000110C2 4A43                       		tst.w	d3
000110C4 6600                       		bne.s	loc_1068E
000110C6 5228 0022                  		addq.b	#1,$22(a0)
000110CA 0228 0003 0022             		andi.b	#3,$22(a0)
000110D0                            
000110D0                            loc_1068E:
000110D0 1428 0022                  		move.b	$22(a0),d2
000110D4 0202 0003                  		andi.b	#3,d2
000110D8 6600                       		bne.s	loc_106AE
000110DA 9041                       		sub.w	d1,d0
000110DC D068 0034                  		add.w	$34(a0),d0
000110E0 3140 0008                  		move.w	d0,8(a0)
000110E4 4441                       		neg.w	d1
000110E6 D268 0030                  		add.w	$30(a0),d1
000110EA 3141 000C                  		move.w	d1,$C(a0)
000110EE 4E75                       		rts	
000110F0                            ; ===========================================================================
000110F0                            
000110F0                            loc_106AE:
000110F0 5302                       		subq.b	#1,d2
000110F2 6600                       		bne.s	loc_106CC
000110F4 5341                       		subq.w	#1,d1
000110F6 9041                       		sub.w	d1,d0
000110F8 4440                       		neg.w	d0
000110FA D068 0030                  		add.w	$30(a0),d0
000110FE 3140 000C                  		move.w	d0,$C(a0)
00011102 5241                       		addq.w	#1,d1
00011104 D268 0034                  		add.w	$34(a0),d1
00011108 3141 0008                  		move.w	d1,8(a0)
0001110C 4E75                       		rts	
0001110E                            ; ===========================================================================
0001110E                            
0001110E                            loc_106CC:
0001110E 5302                       		subq.b	#1,d2
00011110 6600                       		bne.s	loc_106EA
00011112 5341                       		subq.w	#1,d1
00011114 9041                       		sub.w	d1,d0
00011116 4440                       		neg.w	d0
00011118 D068 0034                  		add.w	$34(a0),d0
0001111C 3140 0008                  		move.w	d0,8(a0)
00011120 5241                       		addq.w	#1,d1
00011122 D268 0030                  		add.w	$30(a0),d1
00011126 3141 000C                  		move.w	d1,$C(a0)
0001112A 4E75                       		rts	
0001112C                            ; ===========================================================================
0001112C                            
0001112C                            loc_106EA:
0001112C 9041                       		sub.w	d1,d0
0001112E D068 0030                  		add.w	$30(a0),d0
00011132 3140 000C                  		move.w	d0,$C(a0)
00011136 4441                       		neg.w	d1
00011138 D268 0034                  		add.w	$34(a0),d1
0001113C 3141 0008                  		move.w	d1,8(a0)
00011140 4E75                       		rts	
00011142                            ; ===========================================================================
00011142                            ; ---------------------------------------------------------------------------
00011142                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011142                            ; ---------------------------------------------------------------------------
00011142                            Map_obj56:
00011142                            	include "_maps\obj56.asm"
00011142                            ; ---------------------------------------------------------------------------
00011142                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011142                            ; ---------------------------------------------------------------------------
00011142 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00011146 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001114A 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
0001114E 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011152 01                         byte_10710:	dc.b 1
00011153 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00011158 04                         byte_10716:	dc.b 4
00011159 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
0001115E E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011163 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00011168 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001116D 02                         byte_1072B:	dc.b 2
0001116E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011173 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00011178 04                         byte_10736:	dc.b 4
00011179 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
0001117E E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011183 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00011188 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
0001118D 03                         byte_1074B:	dc.b 3
0001118E D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011193 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00011198 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
0001119D 01                         byte_1075B:	dc.b 1
0001119E F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000111A3 02                         byte_10761:	dc.b 2
000111A4 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000111A9 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000111AE 04                         byte_1076C:	dc.b 4
000111AF F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000111B4 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000111B9 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000111BE F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000111C4 00                         		even
000111C4 00                         		even
000111C4                            
000111C4                            ; ===========================================================================
000111C4                            ; ---------------------------------------------------------------------------
000111C4                            ; Object 57 - spiked balls (SYZ, LZ)
000111C4                            ; ---------------------------------------------------------------------------
000111C4                            
000111C4                            Obj57:					; XREF: Obj_Index
000111C4 7000                       		moveq	#0,d0
000111C6 1028 0024                  		move.b	$24(a0),d0
000111CA 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000111CE 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000111D2                            ; ===========================================================================
000111D2 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000111D4 0000                       		dc.w Obj57_Move-Obj57_Index
000111D6 0000                       		dc.w Obj57_Display-Obj57_Index
000111D8                            ; ===========================================================================
000111D8                            
000111D8                            Obj57_Main:				; XREF: Obj57_Index
000111D8 5428 0024                  		addq.b	#2,$24(a0)
000111DC 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000111E4 317C 03BA 0002             		move.w	#$3BA,2(a0)
000111EA 117C 0004 0001             		move.b	#4,1(a0)
000111F0 117C 0004 0018             		move.b	#4,$18(a0)
000111F6 117C 0008 0019             		move.b	#8,$19(a0)
000111FC 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011202 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011208 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001120E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011214 6600                       		bne.s	loc_107E8
00011216 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001121C 317C 0310 0002             		move.w	#$310,2(a0)
00011222 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001122A                            
0001122A                            loc_107E8:
0001122A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001122E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011232 4881                       		ext.w	d1
00011234 E741                       		asl.w	#3,d1		; multiply by 8
00011236 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001123A 1028 0022                  		move.b	$22(a0),d0
0001123E E418                       		ror.b	#2,d0
00011240 0200 00C0                  		andi.b	#-$40,d0
00011244 1140 0026                  		move.b	d0,$26(a0)
00011248 45E8 0029                  		lea	$29(a0),a2
0001124C 1228 0028                  		move.b	$28(a0),d1	; get object type
00011250 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011254 14FC 0000                  		move.b	#0,(a2)+
00011258 3601                       		move.w	d1,d3
0001125A E94B                       		lsl.w	#4,d3
0001125C 1143 003C                  		move.b	d3,$3C(a0)
00011260 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011262 6500                       		bcs.s	loc_10894
00011264 0828 0003 0028             		btst	#3,$28(a0)
0001126A 6700                       		beq.s	Obj57_MakeChain
0001126C 5341                       		subq.w	#1,d1
0001126E 6500                       		bcs.s	loc_10894
00011270                            
00011270                            Obj57_MakeChain:
00011270 6100 D260                  		bsr.w	SingleObjLoad
00011274 6600                       		bne.s	loc_10894
00011276 5228 0029                  		addq.b	#1,$29(a0)
0001127A 3A09                       		move.w	a1,d5
0001127C 0445 D000                  		subi.w	#-$3000,d5
00011280 EC4D                       		lsr.w	#6,d5
00011282 0245 007F                  		andi.w	#$7F,d5
00011286 14C5                       		move.b	d5,(a2)+
00011288 137C 0004 0024             		move.b	#4,$24(a1)
0001128E 1290                       		move.b	0(a0),0(a1)
00011290 2368 0004 0004             		move.l	4(a0),4(a1)
00011296 3368 0002 0002             		move.w	2(a0),2(a1)
0001129C 1368 0001 0001             		move.b	1(a0),1(a1)
000112A2 1368 0018 0018             		move.b	$18(a0),$18(a1)
000112A8 1368 0019 0019             		move.b	$19(a0),$19(a1)
000112AE 1368 0020 0020             		move.b	$20(a0),$20(a1)
000112B4 0403 0010                  		subi.b	#$10,d3
000112B8 1343 003C                  		move.b	d3,$3C(a1)
000112BC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000112C2 6600                       		bne.s	loc_10890
000112C4 4A03                       		tst.b	d3
000112C6 6600                       		bne.s	loc_10890
000112C8 137C 0002 001A             		move.b	#2,$1A(a1)
000112CE                            
000112CE                            loc_10890:
000112CE 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000112D2                            
000112D2                            loc_10894:
000112D2 3A08                       		move.w	a0,d5
000112D4 0445 D000                  		subi.w	#-$3000,d5
000112D8 EC4D                       		lsr.w	#6,d5
000112DA 0245 007F                  		andi.w	#$7F,d5
000112DE 14C5                       		move.b	d5,(a2)+
000112E0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000112E6 6600                       		bne.s	Obj57_Move
000112E8 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000112EE 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000112F4                            
000112F4                            Obj57_Move:				; XREF: Obj57_Index
000112F4 6100 0000                  		bsr.w	Obj57_MoveSub
000112F8 6000 0000                  		bra.w	Obj57_ChkDel
000112FC                            ; ===========================================================================
000112FC                            
000112FC                            Obj57_MoveSub:				; XREF: Obj57_Move
000112FC 3028 003E                  		move.w	$3E(a0),d0
00011300 D168 0026                  		add.w	d0,$26(a0)
00011304 1028 0026                  		move.b	$26(a0),d0
00011308 4EB9 0000 2D34             		jsr	(CalcSine).l
0001130E 3428 0038                  		move.w	$38(a0),d2
00011312 3628 003A                  		move.w	$3A(a0),d3
00011316 45E8 0029                  		lea	$29(a0),a2
0001131A 7C00                       		moveq	#0,d6
0001131C 1C1A                       		move.b	(a2)+,d6
0001131E                            
0001131E                            Obj57_MoveLoop:
0001131E 7800                       		moveq	#0,d4
00011320 181A                       		move.b	(a2)+,d4
00011322 ED4C                       		lsl.w	#6,d4
00011324 0684 00FF D000             		addi.l	#$FFD000,d4
0001132A 2244                       		movea.l	d4,a1
0001132C 7800                       		moveq	#0,d4
0001132E 1829 003C                  		move.b	$3C(a1),d4
00011332 2A04                       		move.l	d4,d5
00011334 C9C0                       		muls.w	d0,d4
00011336 E084                       		asr.l	#8,d4
00011338 CBC1                       		muls.w	d1,d5
0001133A E085                       		asr.l	#8,d5
0001133C D842                       		add.w	d2,d4
0001133E DA43                       		add.w	d3,d5
00011340 3344 000C                  		move.w	d4,$C(a1)
00011344 3345 0008                  		move.w	d5,8(a1)
00011348 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001134C 4E75                       		rts	
0001134E                            ; ===========================================================================
0001134E                            
0001134E                            Obj57_ChkDel:				; XREF: Obj57_Move
0001134E 3028 003A                  		move.w	$3A(a0),d0
00011352 0240 FF80                  		andi.w	#$FF80,d0
00011356 3238 F700                  		move.w	($FFFFF700).w,d1
0001135A 0441 0080                  		subi.w	#$80,d1
0001135E 0241 FF80                  		andi.w	#$FF80,d1
00011362 9041                       		sub.w	d1,d0
00011364 0C40 0280                  		cmpi.w	#$280,d0
00011368 6200 0000                  		bhi.w	Obj57_Delete
0001136C 6000 CCDE                  		bra.w	DisplaySprite
00011370                            ; ===========================================================================
00011370                            
00011370                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011370 7400                       		moveq	#0,d2
00011372 45E8 0029                  		lea	$29(a0),a2
00011376 141A                       		move.b	(a2)+,d2
00011378                            
00011378                            Obj57_DelLoop:
00011378 7000                       		moveq	#0,d0
0001137A 101A                       		move.b	(a2)+,d0
0001137C ED48                       		lsl.w	#6,d0
0001137E 0680 00FF D000             		addi.l	#$FFD000,d0
00011384 2240                       		movea.l	d0,a1
00011386 6100 CD02                  		bsr.w	DeleteObject2
0001138A 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001138E                            
0001138E 4E75                       		rts	
00011390                            ; ===========================================================================
00011390                            
00011390                            Obj57_Display:				; XREF: Obj57_Index
00011390 6000 CCBA                  		bra.w	DisplaySprite
00011394                            ; ===========================================================================
00011394                            ; ---------------------------------------------------------------------------
00011394                            ; Sprite mappings - chain of spiked balls (SYZ)
00011394                            ; ---------------------------------------------------------------------------
00011394                            Map_obj57:
00011394                            	include "_maps\obj57syz.asm"
00011394                            ; ---------------------------------------------------------------------------
00011394                            ; Sprite mappings - chain of spiked balls (SYZ)
00011394                            ; ---------------------------------------------------------------------------
00011394 0000                       		dc.w byte_10958-Map_obj57
00011396 01                         byte_10958:	dc.b 1
00011397 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001139C                            		even
0001139C                            		even
0001139C                            
0001139C                            ; ---------------------------------------------------------------------------
0001139C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001139C                            ; ---------------------------------------------------------------------------
0001139C                            Map_obj57a:
0001139C                            	include "_maps\obj57lz.asm"
0001139C                            ; ---------------------------------------------------------------------------
0001139C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001139C                            ; ---------------------------------------------------------------------------
0001139C 0000                       		dc.w byte_10964-Map_obj57a
0001139E 0000                       		dc.w byte_1096A-Map_obj57a
000113A0 0000                       		dc.w byte_10970-Map_obj57a
000113A2 01                         byte_10964:	dc.b 1
000113A3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000113A8 01                         byte_1096A:	dc.b 1
000113A9 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000113AE 01                         byte_10970:	dc.b 1
000113AF F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000113B4                            		even
000113B4                            		even
000113B4                            
000113B4                            ; ===========================================================================
000113B4                            ; ---------------------------------------------------------------------------
000113B4                            ; Object 58 - giant spiked balls (SYZ)
000113B4                            ; ---------------------------------------------------------------------------
000113B4                            
000113B4                            Obj58:					; XREF: Obj_Index
000113B4 7000                       		moveq	#0,d0
000113B6 1028 0024                  		move.b	$24(a0),d0
000113BA 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000113BE 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000113C2                            ; ===========================================================================
000113C2 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000113C4 0000                       		dc.w Obj58_Move-Obj58_Index
000113C6                            ; ===========================================================================
000113C6                            
000113C6                            Obj58_Main:				; XREF: Obj58_Index
000113C6 5428 0024                  		addq.b	#2,$24(a0)
000113CA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000113D2 317C 0396 0002             		move.w	#$396,2(a0)
000113D8 117C 0004 0001             		move.b	#4,1(a0)
000113DE 117C 0004 0018             		move.b	#4,$18(a0)
000113E4 117C 0018 0019             		move.b	#$18,$19(a0)
000113EA 3168 0008 003A             		move.w	8(a0),$3A(a0)
000113F0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000113F6 117C 0086 0020             		move.b	#$86,$20(a0)
000113FC 1228 0028                  		move.b	$28(a0),d1	; get object type
00011400 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011404 4881                       		ext.w	d1
00011406 E741                       		asl.w	#3,d1		; multiply by 8
00011408 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001140C 1028 0022                  		move.b	$22(a0),d0
00011410 E418                       		ror.b	#2,d0
00011412 0200 00C0                  		andi.b	#$C0,d0
00011416 1140 0026                  		move.b	d0,$26(a0)
0001141A 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011420                            
00011420                            Obj58_Move:				; XREF: Obj58_Index
00011420 7000                       		moveq	#0,d0
00011422 1028 0028                  		move.b	$28(a0),d0	; get object type
00011426 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001142A D040                       		add.w	d0,d0
0001142C 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011430 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011434 3028 003A                  		move.w	$3A(a0),d0
00011438 0240 FF80                  		andi.w	#$FF80,d0
0001143C 3238 F700                  		move.w	($FFFFF700).w,d1
00011440 0441 0080                  		subi.w	#$80,d1
00011444 0241 FF80                  		andi.w	#$FF80,d1
00011448 9041                       		sub.w	d1,d0
0001144A 0C40 0280                  		cmpi.w	#$280,d0
0001144E 6200 CC38                  		bhi.w	DeleteObject
00011452 6000 CBF8                  		bra.w	DisplaySprite
00011456                            ; ===========================================================================
00011456 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011458 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001145A 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001145C 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001145E                            ; ===========================================================================
0001145E                            
0001145E                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001145E 4E75                       		rts	
00011460                            ; ===========================================================================
00011460                            
00011460                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011460 323C 0060                  		move.w	#$60,d1
00011464 7000                       		moveq	#0,d0
00011466 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001146A 0828 0000 0022             		btst	#0,$22(a0)
00011470 6700                       		beq.s	loc_10A38
00011472 4440                       		neg.w	d0
00011474 D041                       		add.w	d1,d0
00011476                            
00011476                            loc_10A38:
00011476 3228 003A                  		move.w	$3A(a0),d1
0001147A 9240                       		sub.w	d0,d1
0001147C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011480 4E75                       		rts	
00011482                            ; ===========================================================================
00011482                            
00011482                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011482 323C 0060                  		move.w	#$60,d1
00011486 7000                       		moveq	#0,d0
00011488 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001148C 0828 0000 0022             		btst	#0,$22(a0)
00011492 6700                       		beq.s	loc_10A5C
00011494 4440                       		neg.w	d0
00011496 0640 0080                  		addi.w	#$80,d0
0001149A                            
0001149A                            loc_10A5C:
0001149A 3228 0038                  		move.w	$38(a0),d1
0001149E 9240                       		sub.w	d0,d1
000114A0 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000114A4 4E75                       		rts	
000114A6                            ; ===========================================================================
000114A6                            
000114A6                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000114A6 3028 003E                  		move.w	$3E(a0),d0
000114AA D168 0026                  		add.w	d0,$26(a0)
000114AE 1028 0026                  		move.b	$26(a0),d0
000114B2 4EB9 0000 2D34             		jsr	(CalcSine).l
000114B8 3428 0038                  		move.w	$38(a0),d2
000114BC 3628 003A                  		move.w	$3A(a0),d3
000114C0 7800                       		moveq	#0,d4
000114C2 1828 003C                  		move.b	$3C(a0),d4
000114C6 2A04                       		move.l	d4,d5
000114C8 C9C0                       		muls.w	d0,d4
000114CA E084                       		asr.l	#8,d4
000114CC CBC1                       		muls.w	d1,d5
000114CE E085                       		asr.l	#8,d5
000114D0 D842                       		add.w	d2,d4
000114D2 DA43                       		add.w	d3,d5
000114D4 3144 000C                  		move.w	d4,$C(a0)
000114D8 3145 0008                  		move.w	d5,8(a0)
000114DC 4E75                       		rts	
000114DE                            ; ===========================================================================
000114DE                            ; ---------------------------------------------------------------------------
000114DE                            ; Sprite mappings - SBZ	spiked ball on a chain
000114DE                            ; ---------------------------------------------------------------------------
000114DE                            Map_obj15b:
000114DE                            	include "_maps\obj15sbz.asm"
000114DE                            ; ---------------------------------------------------------------------------
000114DE                            ; Sprite mappings - spiked ball on a chain (SBZ)
000114DE                            ; ---------------------------------------------------------------------------
000114DE 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000114E2 0000                       		dc.w byte_10AC6-Map_obj15b
000114E4 05                         byte_10AA6:	dc.b 5
000114E5 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000114EA F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000114EF F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000114F4 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000114F9 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000114FE 01                         byte_10AC0:	dc.b 1
000114FF F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011504 02                         byte_10AC6:	dc.b 2
00011505 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001150A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011510 00                         		even
00011510 00                         		even
00011510                            
00011510                            ; ===========================================================================
00011510                            ; ---------------------------------------------------------------------------
00011510                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011510                            ; ---------------------------------------------------------------------------
00011510                            
00011510                            Obj59:					; XREF: Obj_Index
00011510 7000                       		moveq	#0,d0
00011512 1028 0024                  		move.b	$24(a0),d0
00011516 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001151A 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001151E 3028 0032                  		move.w	$32(a0),d0
00011522 0240 FF80                  		andi.w	#$FF80,d0
00011526 3238 F700                  		move.w	($FFFFF700).w,d1
0001152A 0441 0080                  		subi.w	#$80,d1
0001152E 0241 FF80                  		andi.w	#$FF80,d1
00011532 9041                       		sub.w	d1,d0
00011534 0C40 0280                  		cmpi.w	#$280,d0
00011538 6200 CB4E                  		bhi.w	DeleteObject
0001153C 6000 CB0E                  		bra.w	DisplaySprite
00011540                            ; ===========================================================================
00011540 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011542 0000                       		dc.w Obj59_Platform-Obj59_Index
00011544 0000                       		dc.w Obj59_Action-Obj59_Index
00011546 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011548                            
00011548 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
0001154A                            
0001154A 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001154C 2001                       		dc.b $20, 1
0001154E 3401                       		dc.b $34, 1
00011550 1003                       		dc.b $10, 3
00011552 2003                       		dc.b $20, 3
00011554 3403                       		dc.b $34, 3
00011556 1401                       		dc.b $14, 1
00011558 2401                       		dc.b $24, 1
0001155A 2C01                       		dc.b $2C, 1
0001155C 1403                       		dc.b $14, 3
0001155E 2403                       		dc.b $24, 3
00011560 2C03                       		dc.b $2C, 3
00011562 2005                       		dc.b $20, 5
00011564 2007                       		dc.b $20, 7
00011566 3009                       		dc.b $30, 9
00011568                            ; ===========================================================================
00011568                            
00011568                            Obj59_Main:				; XREF: Obj59_Index
00011568 5428 0024                  		addq.b	#2,$24(a0)
0001156C 7000                       		moveq	#0,d0
0001156E 1028 0028                  		move.b	$28(a0),d0
00011572 6A00                       		bpl.s	Obj59_Main2
00011574 5828 0024                  		addq.b	#4,$24(a0)
00011578 0240 007F                  		andi.w	#$7F,d0
0001157C C0FC 0006                  		mulu.w	#6,d0
00011580 3140 003C                  		move.w	d0,$3C(a0)
00011584 3140 003E                  		move.w	d0,$3E(a0)
00011588 588F                       		addq.l	#4,sp
0001158A 4E75                       		rts	
0001158C                            ; ===========================================================================
0001158C                            
0001158C                            Obj59_Main2:
0001158C E648                       		lsr.w	#3,d0
0001158E 0240 001E                  		andi.w	#$1E,d0
00011592 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011596 115A 0019                  		move.b	(a2)+,$19(a0)
0001159A 115A 001A                  		move.b	(a2)+,$1A(a0)
0001159E 7000                       		moveq	#0,d0
000115A0 1028 0028                  		move.b	$28(a0),d0
000115A4 D040                       		add.w	d0,d0
000115A6 0240 001E                  		andi.w	#$1E,d0
000115AA 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000115AE 101A                       		move.b	(a2)+,d0
000115B0 E548                       		lsl.w	#2,d0
000115B2 3140 003C                  		move.w	d0,$3C(a0)
000115B6 115A 0028                  		move.b	(a2)+,$28(a0)
000115BA 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000115C2 317C 4000 0002             		move.w	#$4000,2(a0)
000115C8 117C 0004 0001             		move.b	#4,1(a0)
000115CE 117C 0004 0018             		move.b	#4,$18(a0)
000115D4 3168 0008 0032             		move.w	8(a0),$32(a0)
000115DA 3168 000C 0030             		move.w	$C(a0),$30(a0)
000115E0                            
000115E0                            Obj59_Platform:				; XREF: Obj59_Index
000115E0 7200                       		moveq	#0,d1
000115E2 1228 0019                  		move.b	$19(a0),d1
000115E6 4EB9 0000 7C56             		jsr	(PlatformObject).l
000115EC 6000 0000                  		bra.w	Obj59_Types
000115F0                            ; ===========================================================================
000115F0                            
000115F0                            Obj59_Action:				; XREF: Obj59_Index
000115F0 7200                       		moveq	#0,d1
000115F2 1228 0019                  		move.b	$19(a0),d1
000115F6 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
000115FC 3F28 0008                  		move.w	8(a0),-(sp)
00011600 6100 0000                  		bsr.w	Obj59_Types
00011604 341F                       		move.w	(sp)+,d2
00011606 4A10                       		tst.b	0(a0)
00011608 6700                       		beq.s	locret_10BD4
0001160A 4EF9 0000 8334             		jmp	(MvSonicOnPtfm2).l
00011610                            ; ===========================================================================
00011610                            
00011610                            locret_10BD4:
00011610 4E75                       		rts	
00011612                            ; ===========================================================================
00011612                            
00011612                            Obj59_Types:
00011612 7000                       		moveq	#0,d0
00011614 1028 0028                  		move.b	$28(a0),d0
00011618 0240 000F                  		andi.w	#$F,d0
0001161C D040                       		add.w	d0,d0
0001161E 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011622 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011626                            ; ===========================================================================
00011626 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001162A 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001162E 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011632 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011636 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
0001163A                            ; ===========================================================================
0001163A                            
0001163A                            Obj59_Type00:				; XREF: Obj59_TypeIndex
0001163A 4E75                       		rts	
0001163C                            ; ===========================================================================
0001163C                            
0001163C                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001163C 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011642 6600                       		bne.s	locret_10C0C
00011644 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011648                            
00011648                            locret_10C0C:
00011648 4E75                       		rts	
0001164A                            ; ===========================================================================
0001164A                            
0001164A                            Obj59_Type02:				; XREF: Obj59_TypeIndex
0001164A 6100 0000                  		bsr.w	Obj59_Move
0001164E 3028 0034                  		move.w	$34(a0),d0
00011652 4440                       		neg.w	d0
00011654 D068 0030                  		add.w	$30(a0),d0
00011658 3140 000C                  		move.w	d0,$C(a0)
0001165C 4E75                       		rts	
0001165E                            ; ===========================================================================
0001165E                            
0001165E                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001165E 6100 0000                  		bsr.w	Obj59_Move
00011662 3028 0034                  		move.w	$34(a0),d0
00011666 D068 0030                  		add.w	$30(a0),d0
0001166A 3140 000C                  		move.w	d0,$C(a0)
0001166E 4E75                       		rts	
00011670                            ; ===========================================================================
00011670                            
00011670                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011670 6100 0000                  		bsr.w	Obj59_Move
00011674 3028 0034                  		move.w	$34(a0),d0
00011678 E240                       		asr.w	#1,d0
0001167A 4440                       		neg.w	d0
0001167C D068 0030                  		add.w	$30(a0),d0
00011680 3140 000C                  		move.w	d0,$C(a0)
00011684 3028 0034                  		move.w	$34(a0),d0
00011688 D068 0032                  		add.w	$32(a0),d0
0001168C 3140 0008                  		move.w	d0,8(a0)
00011690 4E75                       		rts	
00011692                            ; ===========================================================================
00011692                            
00011692                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011692 6100 0000                  		bsr.w	Obj59_Move
00011696 3028 0034                  		move.w	$34(a0),d0
0001169A E240                       		asr.w	#1,d0
0001169C D068 0030                  		add.w	$30(a0),d0
000116A0 3140 000C                  		move.w	d0,$C(a0)
000116A4 3028 0034                  		move.w	$34(a0),d0
000116A8 4440                       		neg.w	d0
000116AA D068 0032                  		add.w	$32(a0),d0
000116AE 3140 0008                  		move.w	d0,8(a0)
000116B2 4E75                       		rts	
000116B4                            ; ===========================================================================
000116B4                            
000116B4                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000116B4 6100 0000                  		bsr.w	Obj59_Move
000116B8 3028 0034                  		move.w	$34(a0),d0
000116BC 4440                       		neg.w	d0
000116BE D068 0030                  		add.w	$30(a0),d0
000116C2 3140 000C                  		move.w	d0,$C(a0)
000116C6 4A28 0028                  		tst.b	$28(a0)
000116CA 6700 0000                  		beq.w	loc_10C94
000116CE 4E75                       		rts	
000116D0                            ; ===========================================================================
000116D0                            
000116D0                            loc_10C94:
000116D0 0828 0003 0022             		btst	#3,$22(a0)
000116D6 6700                       		beq.s	Obj59_Delete
000116D8 08E9 0001 0022             		bset	#1,$22(a1)
000116DE 08A9 0003 0022             		bclr	#3,$22(a1)
000116E4 137C 0002 0024             		move.b	#2,$24(a1)
000116EA                            
000116EA                            Obj59_Delete:
000116EA 6000 C99C                  		bra.w	DeleteObject
000116EE                            
000116EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000116EE                            
000116EE                            
000116EE                            Obj59_Move:				; XREF: Obj59_Type02; et al
000116EE 3028 0038                  		move.w	$38(a0),d0
000116F2 4A28 003A                  		tst.b	$3A(a0)
000116F6 6600                       		bne.s	loc_10CC8
000116F8 0C40 0800                  		cmpi.w	#$800,d0
000116FC 6400                       		bcc.s	loc_10CD0
000116FE 0640 0010                  		addi.w	#$10,d0
00011702 6000                       		bra.s	loc_10CD0
00011704                            ; ===========================================================================
00011704                            
00011704                            loc_10CC8:
00011704 4A40                       		tst.w	d0
00011706 6700                       		beq.s	loc_10CD0
00011708 0440 0010                  		subi.w	#$10,d0
0001170C                            
0001170C                            loc_10CD0:
0001170C 3140 0038                  		move.w	d0,$38(a0)
00011710 48C0                       		ext.l	d0
00011712 E180                       		asl.l	#8,d0
00011714 D0A8 0034                  		add.l	$34(a0),d0
00011718 2140 0034                  		move.l	d0,$34(a0)
0001171C 4840                       		swap	d0
0001171E 3428 003C                  		move.w	$3C(a0),d2
00011722 B042                       		cmp.w	d2,d0
00011724 6300                       		bls.s	loc_10CF0
00011726 117C 0001 003A             		move.b	#1,$3A(a0)
0001172C                            
0001172C                            loc_10CF0:
0001172C D442                       		add.w	d2,d2
0001172E B042                       		cmp.w	d2,d0
00011730 6600                       		bne.s	locret_10CFA
00011732 4228 0028                  		clr.b	$28(a0)
00011736                            
00011736                            locret_10CFA:
00011736 4E75                       		rts	
00011738                            ; End of function Obj59_Move
00011738                            
00011738                            ; ===========================================================================
00011738                            
00011738                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011738 5368 003C                  		subq.w	#1,$3C(a0)
0001173C 6600                       		bne.s	Obj59_ChkDel
0001173E 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011744 6100 CD8C                  		bsr.w	SingleObjLoad
00011748 6600                       		bne.s	Obj59_ChkDel
0001174A 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001174E 3368 0008 0008             		move.w	8(a0),8(a1)
00011754 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001175A 137C 000E 0028             		move.b	#$E,$28(a1)
00011760                            
00011760                            Obj59_ChkDel:
00011760 588F                       		addq.l	#4,sp
00011762 3028 0008                  		move.w	8(a0),d0
00011766 0240 FF80                  		andi.w	#$FF80,d0
0001176A 3238 F700                  		move.w	($FFFFF700).w,d1
0001176E 0441 0080                  		subi.w	#$80,d1
00011772 0241 FF80                  		andi.w	#$FF80,d1
00011776 9041                       		sub.w	d1,d0
00011778 0C40 0280                  		cmpi.w	#$280,d0
0001177C 6200 C90A                  		bhi.w	DeleteObject
00011780 4E75                       		rts	
00011782                            ; ===========================================================================
00011782                            ; ---------------------------------------------------------------------------
00011782                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011782                            ; ---------------------------------------------------------------------------
00011782                            Map_obj59:
00011782                            	include "_maps\obj59.asm"
00011782                            ; ---------------------------------------------------------------------------
00011782                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011782                            ; ---------------------------------------------------------------------------
00011782 0000                       		dc.w byte_10D4A-Map_obj59
00011784 03                         byte_10D4A:	dc.b 3
00011785 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001178A F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001178F F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011794                            		even
00011794                            		even
00011794                            
00011794                            ; ===========================================================================
00011794                            ; ---------------------------------------------------------------------------
00011794                            ; Object 5A - platforms	moving in circles (SLZ)
00011794                            ; ---------------------------------------------------------------------------
00011794                            
00011794                            Obj5A:					; XREF: Obj_Index
00011794 7000                       		moveq	#0,d0
00011796 1028 0024                  		move.b	$24(a0),d0
0001179A 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001179E 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000117A2 3028 0032                  		move.w	$32(a0),d0
000117A6 0240 FF80                  		andi.w	#$FF80,d0
000117AA 3238 F700                  		move.w	($FFFFF700).w,d1
000117AE 0441 0080                  		subi.w	#$80,d1
000117B2 0241 FF80                  		andi.w	#$FF80,d1
000117B6 9041                       		sub.w	d1,d0
000117B8 0C40 0280                  		cmpi.w	#$280,d0
000117BC 6200 C8CA                  		bhi.w	DeleteObject
000117C0 6000 C88A                  		bra.w	DisplaySprite
000117C4                            ; ===========================================================================
000117C4 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000117C6 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000117C8 0000                       		dc.w Obj5A_Action-Obj5A_Index
000117CA                            ; ===========================================================================
000117CA                            
000117CA                            Obj5A_Main:				; XREF: Obj5A_Index
000117CA 5428 0024                  		addq.b	#2,$24(a0)
000117CE 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000117D6 317C 4000 0002             		move.w	#$4000,2(a0)
000117DC 117C 0004 0001             		move.b	#4,1(a0)
000117E2 117C 0004 0018             		move.b	#4,$18(a0)
000117E8 117C 0018 0019             		move.b	#$18,$19(a0)
000117EE 3168 0008 0032             		move.w	8(a0),$32(a0)
000117F4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000117FA                            
000117FA                            Obj5A_Platform:				; XREF: Obj5A_Index
000117FA 7200                       		moveq	#0,d1
000117FC 1228 0019                  		move.b	$19(a0),d1
00011800 4EB9 0000 7C56             		jsr	(PlatformObject).l
00011806 6000 0000                  		bra.w	Obj5A_Types
0001180A                            ; ===========================================================================
0001180A                            
0001180A                            Obj5A_Action:				; XREF: Obj5A_Index
0001180A 7200                       		moveq	#0,d1
0001180C 1228 0019                  		move.b	$19(a0),d1
00011810 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
00011816 3F28 0008                  		move.w	8(a0),-(sp)
0001181A 6100 0000                  		bsr.w	Obj5A_Types
0001181E 341F                       		move.w	(sp)+,d2
00011820 4EF9 0000 8334             		jmp	(MvSonicOnPtfm2).l
00011826                            ; ===========================================================================
00011826                            
00011826                            Obj5A_Types:
00011826 7000                       		moveq	#0,d0
00011828 1028 0028                  		move.b	$28(a0),d0
0001182C 0240 000C                  		andi.w	#$C,d0
00011830 E248                       		lsr.w	#1,d0
00011832 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011836 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
0001183A                            ; ===========================================================================
0001183A 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001183C 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001183E                            ; ===========================================================================
0001183E                            
0001183E                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001183E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011842 0401 0050                  		subi.b	#$50,d1
00011846 4881                       		ext.w	d1
00011848 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001184C 0402 0050                  		subi.b	#$50,d2
00011850 4882                       		ext.w	d2
00011852 0828 0000 0028             		btst	#0,$28(a0)
00011858 6700                       		beq.s	loc_10E24
0001185A 4441                       		neg.w	d1
0001185C 4442                       		neg.w	d2
0001185E                            
0001185E                            loc_10E24:
0001185E 0828 0001 0028             		btst	#1,$28(a0)
00011864 6700                       		beq.s	loc_10E30
00011866 4441                       		neg.w	d1
00011868 C342                       		exg	d1,d2
0001186A                            
0001186A                            loc_10E30:
0001186A D268 0032                  		add.w	$32(a0),d1
0001186E 3141 0008                  		move.w	d1,8(a0)
00011872 D468 0030                  		add.w	$30(a0),d2
00011876 3142 000C                  		move.w	d2,$C(a0)
0001187A 4E75                       		rts	
0001187C                            ; ===========================================================================
0001187C                            
0001187C                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001187C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011880 0401 0050                  		subi.b	#$50,d1
00011884 4881                       		ext.w	d1
00011886 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001188A 0402 0050                  		subi.b	#$50,d2
0001188E 4882                       		ext.w	d2
00011890 0828 0000 0028             		btst	#0,$28(a0)
00011896 6700                       		beq.s	loc_10E62
00011898 4441                       		neg.w	d1
0001189A 4442                       		neg.w	d2
0001189C                            
0001189C                            loc_10E62:
0001189C 0828 0001 0028             		btst	#1,$28(a0)
000118A2 6700                       		beq.s	loc_10E6E
000118A4 4441                       		neg.w	d1
000118A6 C342                       		exg	d1,d2
000118A8                            
000118A8                            loc_10E6E:
000118A8 4441                       		neg.w	d1
000118AA D268 0032                  		add.w	$32(a0),d1
000118AE 3141 0008                  		move.w	d1,8(a0)
000118B2 D468 0030                  		add.w	$30(a0),d2
000118B6 3142 000C                  		move.w	d2,$C(a0)
000118BA 4E75                       		rts	
000118BC                            ; ===========================================================================
000118BC                            ; ---------------------------------------------------------------------------
000118BC                            ; Sprite mappings - platforms that move	in circles (SLZ)
000118BC                            ; ---------------------------------------------------------------------------
000118BC                            Map_obj5A:
000118BC                            	include "_maps\obj5A.asm"
000118BC                            ; ---------------------------------------------------------------------------
000118BC                            ; Sprite mappings - platforms that move	in circles (SLZ)
000118BC                            ; ---------------------------------------------------------------------------
000118BC 0000                       		dc.w byte_10E84-Map_obj5A
000118BE 02                         byte_10E84:	dc.b 2
000118BF F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000118C4 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000118CA 00                         		even
000118CA 00                         		even
000118CA                            
000118CA                            ; ===========================================================================
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            ; Object 5B - blocks that form a staircase (SLZ)
000118CA                            ; ---------------------------------------------------------------------------
000118CA                            
000118CA                            Obj5B:					; XREF: Obj_Index
000118CA 7000                       		moveq	#0,d0
000118CC 1028 0024                  		move.b	$24(a0),d0
000118D0 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000118D4 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000118D8 3028 0030                  		move.w	$30(a0),d0
000118DC 0240 FF80                  		andi.w	#$FF80,d0
000118E0 3238 F700                  		move.w	($FFFFF700).w,d1
000118E4 0441 0080                  		subi.w	#$80,d1
000118E8 0241 FF80                  		andi.w	#$FF80,d1
000118EC 9041                       		sub.w	d1,d0
000118EE 0C40 0280                  		cmpi.w	#$280,d0
000118F2 6200 C794                  		bhi.w	DeleteObject
000118F6 6000 C754                  		bra.w	DisplaySprite
000118FA                            ; ===========================================================================
000118FA 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000118FC 0000                       		dc.w Obj5B_Move-Obj5B_Index
000118FE 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011900                            ; ===========================================================================
00011900                            
00011900                            Obj5B_Main:				; XREF: Obj5B_Index
00011900 5428 0024                  		addq.b	#2,$24(a0)
00011904 7638                       		moveq	#$38,d3
00011906 7801                       		moveq	#1,d4
00011908 0828 0000 0022             		btst	#0,$22(a0)
0001190E 6700                       		beq.s	loc_10EDA
00011910 763B                       		moveq	#$3B,d3
00011912 78FF                       		moveq	#-1,d4
00011914                            
00011914                            loc_10EDA:
00011914 3428 0008                  		move.w	8(a0),d2
00011918 2248                       		movea.l	a0,a1
0001191A 7203                       		moveq	#3,d1
0001191C 6000                       		bra.s	Obj5B_MakeBlocks
0001191E                            ; ===========================================================================
0001191E                            
0001191E                            Obj5B_Loop:
0001191E 6100 CBC8                  		bsr.w	SingleObjLoad2
00011922 6600 0000                  		bne.w	Obj5B_Move
00011926 137C 0004 0024             		move.b	#4,$24(a1)
0001192C                            
0001192C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001192C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011930 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011938 337C 4000 0002             		move.w	#$4000,2(a1)
0001193E 137C 0004 0001             		move.b	#4,1(a1)
00011944 137C 0003 0018             		move.b	#3,$18(a1)
0001194A 137C 0010 0019             		move.b	#$10,$19(a1)
00011950 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011956 3342 0008                  		move.w	d2,8(a1)
0001195A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011960 3368 0008 0030             		move.w	8(a0),$30(a1)
00011966 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001196C 0642 0020                  		addi.w	#$20,d2
00011970 1343 0037                  		move.b	d3,$37(a1)
00011974 2348 003C                  		move.l	a0,$3C(a1)
00011978 D604                       		add.b	d4,d3
0001197A 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001197E                            
0001197E                            Obj5B_Move:				; XREF: Obj5B_Index
0001197E 7000                       		moveq	#0,d0
00011980 1028 0028                  		move.b	$28(a0),d0
00011984 0240 0007                  		andi.w	#7,d0
00011988 D040                       		add.w	d0,d0
0001198A 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001198E 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011992                            
00011992                            Obj5B_Solid:				; XREF: Obj5B_Index
00011992 2468 003C                  		movea.l	$3C(a0),a2
00011996 7000                       		moveq	#0,d0
00011998 1028 0037                  		move.b	$37(a0),d0
0001199C 1032 0000                  		move.b	(a2,d0.w),d0
000119A0 D068 0032                  		add.w	$32(a0),d0
000119A4 3140 000C                  		move.w	d0,$C(a0)
000119A8 7200                       		moveq	#0,d1
000119AA 1228 0019                  		move.b	$19(a0),d1
000119AE 0641 000B                  		addi.w	#$B,d1
000119B2 343C 0010                  		move.w	#$10,d2
000119B6 363C 0011                  		move.w	#$11,d3
000119BA 3828 0008                  		move.w	8(a0),d4
000119BE 6100 EA5C                  		bsr.w	SolidObject
000119C2 4A04                       		tst.b	d4
000119C4 6A00                       		bpl.s	loc_10F92
000119C6 1544 0036                  		move.b	d4,$36(a2)
000119CA                            
000119CA                            loc_10F92:
000119CA 0828 0003 0022             		btst	#3,$22(a0)
000119D0 6700                       		beq.s	locret_10FA0
000119D2 157C 0001 0036             		move.b	#1,$36(a2)
000119D8                            
000119D8                            locret_10FA0:
000119D8 4E75                       		rts	
000119DA                            ; ===========================================================================
000119DA 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000119DC 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000119DE 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000119E0 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000119E2                            ; ===========================================================================
000119E2                            
000119E2                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000119E2 4A68 0034                  		tst.w	$34(a0)
000119E6 6600                       		bne.s	loc_10FC0
000119E8 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000119EE 6600                       		bne.s	locret_10FBE
000119F0 317C 001E 0034             		move.w	#$1E,$34(a0)
000119F6                            
000119F6                            locret_10FBE:
000119F6 4E75                       		rts	
000119F8                            ; ===========================================================================
000119F8                            
000119F8                            loc_10FC0:
000119F8 5368 0034                  		subq.w	#1,$34(a0)
000119FC 66F8                       		bne.s	locret_10FBE
000119FE 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011A02 4E75                       		rts	
00011A04                            ; ===========================================================================
00011A04                            
00011A04                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011A04 4A68 0034                  		tst.w	$34(a0)
00011A08 6600                       		bne.s	loc_10FE0
00011A0A 4A28 0036                  		tst.b	$36(a0)
00011A0E 6A00                       		bpl.s	locret_10FDE
00011A10 317C 003C 0034             		move.w	#$3C,$34(a0)
00011A16                            
00011A16                            locret_10FDE:
00011A16 4E75                       		rts	
00011A18                            ; ===========================================================================
00011A18                            
00011A18                            loc_10FE0:
00011A18 5368 0034                  		subq.w	#1,$34(a0)
00011A1C 6600                       		bne.s	loc_10FEC
00011A1E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011A22 4E75                       		rts	
00011A24                            ; ===========================================================================
00011A24                            
00011A24                            loc_10FEC:
00011A24 43E8 0038                  		lea	$38(a0),a1
00011A28 3028 0034                  		move.w	$34(a0),d0
00011A2C E408                       		lsr.b	#2,d0
00011A2E 0200 0001                  		andi.b	#1,d0
00011A32 12C0                       		move.b	d0,(a1)+
00011A34 0A00 0001                  		eori.b	#1,d0
00011A38 12C0                       		move.b	d0,(a1)+
00011A3A 0A00 0001                  		eori.b	#1,d0
00011A3E 12C0                       		move.b	d0,(a1)+
00011A40 0A00 0001                  		eori.b	#1,d0
00011A44 12C0                       		move.b	d0,(a1)+
00011A46 4E75                       		rts	
00011A48                            ; ===========================================================================
00011A48                            
00011A48                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011A48 43E8 0038                  		lea	$38(a0),a1
00011A4C 0C11 0080                  		cmpi.b	#$80,(a1)
00011A50 6700                       		beq.s	locret_11038
00011A52 5211                       		addq.b	#1,(a1)
00011A54 7200                       		moveq	#0,d1
00011A56 1219                       		move.b	(a1)+,d1
00011A58 4841                       		swap	d1
00011A5A E289                       		lsr.l	#1,d1
00011A5C 2401                       		move.l	d1,d2
00011A5E E289                       		lsr.l	#1,d1
00011A60 2601                       		move.l	d1,d3
00011A62 D682                       		add.l	d2,d3
00011A64 4841                       		swap	d1
00011A66 4842                       		swap	d2
00011A68 4843                       		swap	d3
00011A6A 12C3                       		move.b	d3,(a1)+
00011A6C 12C2                       		move.b	d2,(a1)+
00011A6E 12C1                       		move.b	d1,(a1)+
00011A70                            
00011A70                            locret_11038:
00011A70 4E75                       		rts	
00011A72 4E75                       		rts	
00011A74                            ; ===========================================================================
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            Map_obj5B:
00011A74                            	include "_maps\obj5B.asm"
00011A74                            ; ---------------------------------------------------------------------------
00011A74                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011A74                            ; ---------------------------------------------------------------------------
00011A74 0000                       		dc.w byte_1103E-Map_obj5B
00011A76 01                         byte_1103E:	dc.b 1
00011A77 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011A7C                            		even
00011A7C                            		even
00011A7C                            
00011A7C                            ; ===========================================================================
00011A7C                            ; ---------------------------------------------------------------------------
00011A7C                            ; Object 5C - metal girders in foreground (SLZ)
00011A7C                            ; ---------------------------------------------------------------------------
00011A7C                            
00011A7C                            Obj5C:					; XREF: Obj_Index
00011A7C 7000                       		moveq	#0,d0
00011A7E 1028 0024                  		move.b	$24(a0),d0
00011A82 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011A86 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011A8A                            ; ===========================================================================
00011A8A 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00011A8C 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011A8E                            ; ===========================================================================
00011A8E                            
00011A8E                            Obj5C_Main:				; XREF: Obj5C_Index
00011A8E 5428 0024                  		addq.b	#2,$24(a0)
00011A92 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00011A9A 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011AA0 117C 0010 0019             		move.b	#$10,$19(a0)
00011AA6                            
00011AA6                            Obj5C_Display:				; XREF: Obj5C_Index
00011AA6 2238 F700                  		move.l	($FFFFF700).w,d1
00011AAA D281                       		add.l	d1,d1
00011AAC 4841                       		swap	d1
00011AAE 4441                       		neg.w	d1
00011AB0 3141 0008                  		move.w	d1,8(a0)
00011AB4 2238 F704                  		move.l	($FFFFF704).w,d1
00011AB8 D281                       		add.l	d1,d1
00011ABA 4841                       		swap	d1
00011ABC 0241 003F                  		andi.w	#$3F,d1
00011AC0 4441                       		neg.w	d1
00011AC2 0641 0100                  		addi.w	#$100,d1
00011AC6 3141 000A                  		move.w	d1,$A(a0)
00011ACA 6000 C580                  		bra.w	DisplaySprite
00011ACE                            ; ===========================================================================
00011ACE                            ; ---------------------------------------------------------------------------
00011ACE                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011ACE                            ; ---------------------------------------------------------------------------
00011ACE                            Map_obj5C:
00011ACE                            	include "_maps\obj5C.asm"
00011ACE                            ; ---------------------------------------------------------------------------
00011ACE                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011ACE                            ; ---------------------------------------------------------------------------
00011ACE 0000                       		dc.w byte_11098-Map_obj5C
00011AD0 09                         byte_11098:	dc.b 9
00011AD1 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011AD6 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011ADB C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011AE0 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011AE5 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011AEA 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011AEF 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011AF4 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011AF9 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011AFE                            		even
00011AFE                            		even
00011AFE                            
00011AFE                            ; ===========================================================================
00011AFE                            ; ---------------------------------------------------------------------------
00011AFE                            ; Object 1B - water surface (LZ)
00011AFE                            ; ---------------------------------------------------------------------------
00011AFE                            
00011AFE                            Obj1B:					; XREF: Obj_Index
00011AFE 7000                       		moveq	#0,d0
00011B00 1028 0024                  		move.b	$24(a0),d0
00011B04 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011B08 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011B0C                            ; ===========================================================================
00011B0C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011B0E 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011B10                            ; ===========================================================================
00011B10                            
00011B10                            Obj1B_Main:				; XREF: Obj1B_Index
00011B10 5428 0024                  		addq.b	#2,$24(a0)
00011B14 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011B1C 317C C300 0002             		move.w	#$C300,2(a0)
00011B22 117C 0004 0001             		move.b	#4,1(a0)
00011B28 117C 0080 0019             		move.b	#$80,$19(a0)
00011B2E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011B34                            
00011B34                            Obj1B_Action:				; XREF: Obj1B_Index
00011B34 3238 F700                  		move.w	($FFFFF700).w,d1
00011B38 0241 FFE0                  		andi.w	#$FFE0,d1
00011B3C D268 0030                  		add.w	$30(a0),d1
00011B40 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011B46 6700                       		beq.s	loc_11114
00011B48 0641 0020                  		addi.w	#$20,d1
00011B4C                            
00011B4C                            loc_11114:
00011B4C 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011B50 3238 F646                  		move.w	($FFFFF646).w,d1
00011B54 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011B58 4A28 0032                  		tst.b	$32(a0)
00011B5C 6600                       		bne.s	Obj1B_Animate
00011B5E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011B64 6700                       		beq.s	loc_1114A	; if not, branch
00011B66 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011B6A 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011B70 6000                       		bra.s	Obj1B_Display
00011B72                            ; ===========================================================================
00011B72                            
00011B72                            Obj1B_Animate:				; XREF: loc_11114
00011B72 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011B76 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011B78 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011B7E 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011B82                            
00011B82                            loc_1114A:				; XREF: loc_11114
00011B82 5328 001E                  		subq.b	#1,$1E(a0)
00011B86 6A00                       		bpl.s	Obj1B_Display
00011B88 117C 0007 001E             		move.b	#7,$1E(a0)
00011B8E 5228 001A                  		addq.b	#1,$1A(a0)
00011B92 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011B98 6500                       		bcs.s	Obj1B_Display
00011B9A 117C 0000 001A             		move.b	#0,$1A(a0)
00011BA0                            
00011BA0                            Obj1B_Display:
00011BA0 6000 C4AA                  		bra.w	DisplaySprite
00011BA4                            ; ===========================================================================
00011BA4                            ; ---------------------------------------------------------------------------
00011BA4                            ; Sprite mappings - water surface (LZ)
00011BA4                            ; ---------------------------------------------------------------------------
00011BA4                            Map_obj1B:
00011BA4                            	include "_maps\obj1B.asm"
00011BA4                            ; ---------------------------------------------------------------------------
00011BA4                            ; Sprite mappings - water surface (LZ)
00011BA4                            ; ---------------------------------------------------------------------------
00011BA4 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011BA8 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011BAC 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011BB0 03                         byte_11178:	dc.b 3
00011BB1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011BB6 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011BBB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BC0 03                         byte_11188:	dc.b 3
00011BC1 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011BC6 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011BCB FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011BD0 03                         byte_11198:	dc.b 3
00011BD1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011BD6 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011BDB FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011BE0 06                         byte_111A8:	dc.b 6
00011BE1 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011BE6 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011BEB FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011BF0 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011BF5 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011BFA FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011BFF 06                         byte_111C7:	dc.b 6
00011C00 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011C05 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011C0A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011C0F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011C14 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011C19 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011C1E 06                         byte_111E6:	dc.b 6
00011C1F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011C24 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011C29 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011C2E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011C33 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011C38 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011C3E 00                         		even
00011C3E 00                         		even
00011C3E                            
00011C3E                            ; ===========================================================================
00011C3E                            ; ---------------------------------------------------------------------------
00011C3E                            ; Object 0B - pole that	breaks (LZ)
00011C3E                            ; ---------------------------------------------------------------------------
00011C3E                            
00011C3E                            Obj0B:					; XREF: Obj_Index
00011C3E 7000                       		moveq	#0,d0
00011C40 1028 0024                  		move.b	$24(a0),d0
00011C44 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011C48 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011C4C                            ; ===========================================================================
00011C4C 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011C4E 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011C50 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011C52                            ; ===========================================================================
00011C52                            
00011C52                            Obj0B_Main:				; XREF: Obj0B_Index
00011C52 5428 0024                  		addq.b	#2,$24(a0)
00011C56 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011C5E 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011C64 117C 0004 0001             		move.b	#4,1(a0)
00011C6A 117C 0008 0019             		move.b	#8,$19(a0)
00011C70 117C 0004 0018             		move.b	#4,$18(a0)
00011C76 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011C7C 7000                       		moveq	#0,d0
00011C7E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C82 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011C86 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011C8A                            
00011C8A                            Obj0B_Action:				; XREF: Obj0B_Index
00011C8A 4A28 0032                  		tst.b	$32(a0)
00011C8E 6700                       		beq.s	Obj0B_Grab
00011C90 4A68 0030                  		tst.w	$30(a0)
00011C94 6700                       		beq.s	Obj0B_MoveUp
00011C96 5368 0030                  		subq.w	#1,$30(a0)
00011C9A 6600                       		bne.s	Obj0B_MoveUp
00011C9C 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011CA2 6000                       		bra.s	Obj0B_Release
00011CA4                            ; ===========================================================================
00011CA4                            
00011CA4                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00011CA8 3028 000C                  		move.w	$C(a0),d0
00011CAC 0440 0018                  		subi.w	#$18,d0
00011CB0 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011CB6 6700                       		beq.s	Obj0B_MoveDown
00011CB8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011CBC B069 000C                  		cmp.w	$C(a1),d0
00011CC0 6500                       		bcs.s	Obj0B_MoveDown
00011CC2 3340 000C                  		move.w	d0,$C(a1)
00011CC6                            
00011CC6                            Obj0B_MoveDown:
00011CC6 0640 0024                  		addi.w	#$24,d0
00011CCA 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011CD0 6700                       		beq.s	Obj0B_LetGo
00011CD2 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011CD6 B069 000C                  		cmp.w	$C(a1),d0
00011CDA 6400                       		bcc.s	Obj0B_LetGo
00011CDC 3340 000C                  		move.w	d0,$C(a1)
00011CE0                            
00011CE0                            Obj0B_LetGo:
00011CE0 1038 F603                  		move.b	($FFFFF603).w,d0
00011CE4 0240 0070                  		andi.w	#$70,d0
00011CE8 6700                       		beq.s	Obj0B_Display
00011CEA                            
00011CEA                            Obj0B_Release:				; XREF: Obj0B_Action
00011CEA 4228 0020                  		clr.b	$20(a0)
00011CEE 5428 0024                  		addq.b	#2,$24(a0)
00011CF2 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011CF6 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011CFA 4228 0032                  		clr.b	$32(a0)
00011CFE 6000                       		bra.s	Obj0B_Display
00011D00                            ; ===========================================================================
00011D00                            
00011D00                            Obj0B_Grab:				; XREF: Obj0B_Action
00011D00 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011D04 6700                       		beq.s	Obj0B_Display	; if not, branch
00011D06 43F8 D000                  		lea	($FFFFD000).w,a1
00011D0A 3028 0008                  		move.w	8(a0),d0
00011D0E 0640 0014                  		addi.w	#$14,d0
00011D12 B069 0008                  		cmp.w	8(a1),d0
00011D16 6400                       		bcc.s	Obj0B_Display
00011D18 4228 0021                  		clr.b	$21(a0)
00011D1C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011D22 6400                       		bcc.s	Obj0B_Display
00011D24 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011D28 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011D2C 3028 0008                  		move.w	8(a0),d0
00011D30 0640 0014                  		addi.w	#$14,d0
00011D34 3340 0008                  		move.w	d0,8(a1)
00011D38 08A9 0000 0022             		bclr	#0,$22(a1)
00011D3E 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011D44 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011D4A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011D50 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011D56                            
00011D56                            Obj0B_Display:				; XREF: Obj0B_Index
00011D56 6000 E39C                  		bra.w	MarkObjGone
00011D5A                            ; ===========================================================================
00011D5A                            ; ---------------------------------------------------------------------------
00011D5A                            ; Sprite mappings - pole that breaks (LZ)
00011D5A                            ; ---------------------------------------------------------------------------
00011D5A                            Map_obj0B:
00011D5A                            	include "_maps\obj0B.asm"
00011D5A                            ; ---------------------------------------------------------------------------
00011D5A                            ; Sprite mappings - pole that breaks (LZ)
00011D5A                            ; ---------------------------------------------------------------------------
00011D5A 0000                       		dc.w byte_11326-Map_obj0B
00011D5C 0000                       		dc.w byte_11331-Map_obj0B
00011D5E 02                         byte_11326:	dc.b 2			; normal pole
00011D5F E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011D64 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011D69 04                         byte_11331:	dc.b 4			; broken pole
00011D6A E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011D6F F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011D74 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011D79 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011D7E                            		even
00011D7E                            		even
00011D7E                            
00011D7E                            ; ===========================================================================
00011D7E                            ; ---------------------------------------------------------------------------
00011D7E                            ; Object 0C - flapping door (LZ)
00011D7E                            ; ---------------------------------------------------------------------------
00011D7E                            
00011D7E                            Obj0C:					; XREF: Obj_Index
00011D7E 7000                       		moveq	#0,d0
00011D80 1028 0024                  		move.b	$24(a0),d0
00011D84 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011D88 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011D8C                            ; ===========================================================================
00011D8C 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011D8E 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011D90                            ; ===========================================================================
00011D90                            
00011D90                            Obj0C_Main:				; XREF: Obj0C_Index
00011D90 5428 0024                  		addq.b	#2,$24(a0)
00011D94 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011D9C 317C 4328 0002             		move.w	#$4328,2(a0)
00011DA2 0028 0004 0001             		ori.b	#4,1(a0)
00011DA8 117C 0028 0019             		move.b	#$28,$19(a0)
00011DAE 7000                       		moveq	#0,d0
00011DB0 1028 0028                  		move.b	$28(a0),d0	; get object type
00011DB4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011DB8 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011DBC                            
00011DBC                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011DBC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011DC0 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011DC2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011DC8 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011DCE 4A28 0001                  		tst.b	1(a0)
00011DD2 6A00                       		bpl.s	Obj0C_Solid
00011DD4 303C 00BB                  		move.w	#$BB,d0
00011DD8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play door sound
00011DDE                            
00011DDE                            Obj0C_Solid:
00011DDE 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011DE4 6100 92B4                  		bsr.w	AnimateSprite
00011DE8 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011DEC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011DF0 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011DF2 3038 D008                  		move.w	($FFFFD008).w,d0
00011DF6 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011DFA 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011DFC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011E02 323C 0013                  		move.w	#$13,d1
00011E06 343C 0020                  		move.w	#$20,d2
00011E0A 3602                       		move.w	d2,d3
00011E0C 5243                       		addq.w	#1,d3
00011E0E 3828 0008                  		move.w	8(a0),d4
00011E12 6100 E608                  		bsr.w	SolidObject	; make the door	solid
00011E16                            
00011E16                            Obj0C_Display:
00011E16 6000 E2DC                  		bra.w	MarkObjGone
00011E1A                            ; ===========================================================================
00011E1A                            Ani_obj0C:
00011E1A                            	include "_anim\obj0C.asm"
00011E1A                            ; ---------------------------------------------------------------------------
00011E1A                            ; Animation script - flapping door (LZ)
00011E1A                            ; ---------------------------------------------------------------------------
00011E1A 0000                       		dc.w byte_113E6-Ani_obj0C
00011E1C 0000                       		dc.w byte_113EC-Ani_obj0C
00011E1E 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011E24 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011E2A                            		even
00011E2A                            		even
00011E2A                            
00011E2A                            ; ---------------------------------------------------------------------------
00011E2A                            ; Sprite mappings - flapping door (LZ)
00011E2A                            ; ---------------------------------------------------------------------------
00011E2A                            Map_obj0C:
00011E2A                            	include "_maps\obj0C.asm"
00011E2A                            ; ---------------------------------------------------------------------------
00011E2A                            ; Sprite mappings - flapping door (LZ)
00011E2A                            ; ---------------------------------------------------------------------------
00011E2A 0000                       		dc.w byte_113F8-Map_obj0C
00011E2C 0000                       		dc.w byte_11403-Map_obj0C
00011E2E 0000                       		dc.w byte_1140E-Map_obj0C
00011E30 02                         byte_113F8:	dc.b 2
00011E31 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011E36 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011E3B 02                         byte_11403:	dc.b 2
00011E3C DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011E41 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011E46 02                         byte_1140E:	dc.b 2
00011E47 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011E4C 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011E52 00                         		even
00011E52 00                         		even
00011E52                            
00011E52                            ; ===========================================================================
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            ; Object 71 - invisible	solid blocks
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            
00011E52                            Obj71:					; XREF: Obj_Index
00011E52 7000                       		moveq	#0,d0
00011E54 1028 0024                  		move.b	$24(a0),d0
00011E58 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011E5C 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011E60                            ; ===========================================================================
00011E60 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011E62 0000                       		dc.w Obj71_Solid-Obj71_Index
00011E64                            ; ===========================================================================
00011E64                            
00011E64                            Obj71_Main:				; XREF: Obj71_Index
00011E64 5428 0024                  		addq.b	#2,$24(a0)
00011E68 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011E70 317C 8680 0002             		move.w	#$8680,2(a0)
00011E76 0028 0004 0001             		ori.b	#4,1(a0)
00011E7C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011E80 1200                       		move.b	d0,d1
00011E82 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011E86 0640 0010                  		addi.w	#$10,d0
00011E8A E248                       		lsr.w	#1,d0
00011E8C 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011E90 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011E94 5241                       		addq.w	#1,d1
00011E96 E749                       		lsl.w	#3,d1
00011E98 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011E9C                            
00011E9C                            Obj71_Solid:				; XREF: Obj71_Index
00011E9C 6100 C428                  		bsr.w	ChkObjOnScreen
00011EA0 6600                       		bne.s	Obj71_ChkDel
00011EA2 7200                       		moveq	#0,d1
00011EA4 1228 0019                  		move.b	$19(a0),d1
00011EA8 0641 000B                  		addi.w	#$B,d1
00011EAC 7400                       		moveq	#0,d2
00011EAE 1428 0016                  		move.b	$16(a0),d2
00011EB2 3602                       		move.w	d2,d3
00011EB4 5243                       		addq.w	#1,d3
00011EB6 3828 0008                  		move.w	8(a0),d4
00011EBA 6100 E5A8                  		bsr.w	SolidObject71
00011EBE                            
00011EBE                            Obj71_ChkDel:
00011EBE 3028 0008                  		move.w	8(a0),d0
00011EC2 0240 FF80                  		andi.w	#$FF80,d0
00011EC6 3238 F700                  		move.w	($FFFFF700).w,d1
00011ECA 0441 0080                  		subi.w	#$80,d1
00011ECE 0241 FF80                  		andi.w	#$FF80,d1
00011ED2 9041                       		sub.w	d1,d0
00011ED4 0C40 0280                  		cmpi.w	#$280,d0
00011ED8 6200                       		bhi.s	Obj71_Delete
00011EDA 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011EDE 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011EE0 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
00011EE4                            ; ===========================================================================
00011EE4                            
00011EE4                            Obj71_NoDisplay:
00011EE4 4E75                       		rts	
00011EE6                            ; ===========================================================================
00011EE6                            
00011EE6                            Obj71_Delete:
00011EE6 4EFA C1A0                  		jmp	DeleteObject
00011EEA                            ; ===========================================================================
00011EEA                            ; ---------------------------------------------------------------------------
00011EEA                            ; Sprite mappings - invisible solid blocks
00011EEA                            ; ---------------------------------------------------------------------------
00011EEA                            Map_obj71:
00011EEA                            	include "_maps\obj71.asm"
00011EEA                            ; ---------------------------------------------------------------------------
00011EEA                            ; Sprite mappings - invisible solid blocks
00011EEA                            ; ---------------------------------------------------------------------------
00011EEA 0000                       		dc.w byte_114BC-Map_obj71
00011EEC 0000                       		dc.w byte_114D1-Map_obj71
00011EEE 0000                       		dc.w byte_114E6-Map_obj71
00011EF0 04                         byte_114BC:	dc.b 4
00011EF1 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011EF6 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011EFB 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011F00 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011F05 04                         byte_114D1:	dc.b 4
00011F06 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011F0B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011F10 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011F15 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011F1A 04                         byte_114E6:	dc.b 4
00011F1B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011F20 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011F25 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011F2A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011F30 00                         		even
00011F30 00                         		even
00011F30                            
00011F30                            ; ===========================================================================
00011F30                            ; ---------------------------------------------------------------------------
00011F30                            ; Object 5D - fans (SLZ)
00011F30                            ; ---------------------------------------------------------------------------
00011F30                            
00011F30                            Obj5D:					; XREF: Obj_Index
00011F30 7000                       		moveq	#0,d0
00011F32 1028 0024                  		move.b	$24(a0),d0
00011F36 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011F3A 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011F3E                            ; ===========================================================================
00011F3E 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011F40 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011F42                            ; ===========================================================================
00011F42                            
00011F42                            Obj5D_Main:				; XREF: Obj5D_Index
00011F42 5428 0024                  		addq.b	#2,$24(a0)
00011F46 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011F4E 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011F54 0028 0004 0001             		ori.b	#4,1(a0)
00011F5A 117C 0010 0019             		move.b	#$10,$19(a0)
00011F60 117C 0004 0018             		move.b	#4,$18(a0)
00011F66                            
00011F66                            Obj5D_Delay:				; XREF: Obj5D_Index
00011F66 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011F6C 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011F6E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011F72 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011F74 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011F7A 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011F80 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011F82 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011F88                            
00011F88                            Obj5D_Blow:
00011F88 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011F8C 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011F90 43F8 D000                  		lea	($FFFFD000).w,a1
00011F94 3029 0008                  		move.w	8(a1),d0
00011F98 9068 0008                  		sub.w	8(a0),d0
00011F9C 0828 0000 0022             		btst	#0,$22(a0)
00011FA2 6600                       		bne.s	Obj5D_ChkSonic
00011FA4 4440                       		neg.w	d0
00011FA6                            
00011FA6                            Obj5D_ChkSonic:
00011FA6 0640 0050                  		addi.w	#$50,d0
00011FAA 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011FAE 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011FB0 3229 000C                  		move.w	$C(a1),d1
00011FB4 0641 0060                  		addi.w	#$60,d1
00011FB8 9268 000C                  		sub.w	$C(a0),d1
00011FBC 6500                       		bcs.s	Obj5D_Animate
00011FBE 0C41 0070                  		cmpi.w	#$70,d1
00011FC2 6400                       		bcc.s	Obj5D_Animate
00011FC4 0440 0050                  		subi.w	#$50,d0
00011FC8 6400                       		bcc.s	loc_1159A
00011FCA 4640                       		not.w	d0
00011FCC D040                       		add.w	d0,d0
00011FCE                            
00011FCE                            loc_1159A:
00011FCE 0640 0060                  		addi.w	#$60,d0
00011FD2 0828 0000 0022             		btst	#0,$22(a0)
00011FD8 6600                       		bne.s	loc_115A8
00011FDA 4440                       		neg.w	d0
00011FDC                            
00011FDC                            loc_115A8:
00011FDC 4400                       		neg.b	d0
00011FDE E840                       		asr.w	#4,d0
00011FE0 0828 0000 0028             		btst	#0,$28(a0)
00011FE6 6700                       		beq.s	Obj5D_MoveSonic
00011FE8 4440                       		neg.w	d0
00011FEA                            
00011FEA                            Obj5D_MoveSonic:
00011FEA D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011FEE                            
00011FEE                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011FEE 5328 001E                  		subq.b	#1,$1E(a0)
00011FF2 6A00                       		bpl.s	Obj5D_ChkDel
00011FF4 117C 0000 001E             		move.b	#0,$1E(a0)
00011FFA 5228 001B                  		addq.b	#1,$1B(a0)
00011FFE 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00012004 6500                       		bcs.s	loc_115D8
00012006 117C 0000 001B             		move.b	#0,$1B(a0)
0001200C                            
0001200C                            loc_115D8:
0001200C 7000                       		moveq	#0,d0
0001200E 0828 0000 0028             		btst	#0,$28(a0)
00012014 6700                       		beq.s	loc_115E4
00012016 7002                       		moveq	#2,d0
00012018                            
00012018                            loc_115E4:
00012018 D028 001B                  		add.b	$1B(a0),d0
0001201C 1140 001A                  		move.b	d0,$1A(a0)
00012020                            
00012020                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012020 6100 C02A                  		bsr.w	DisplaySprite
00012024 3028 0008                  		move.w	8(a0),d0
00012028 0240 FF80                  		andi.w	#$FF80,d0
0001202C 3238 F700                  		move.w	($FFFFF700).w,d1
00012030 0441 0080                  		subi.w	#$80,d1
00012034 0241 FF80                  		andi.w	#$FF80,d1
00012038 9041                       		sub.w	d1,d0
0001203A 0C40 0280                  		cmpi.w	#$280,d0
0001203E 6200 C048                  		bhi.w	DeleteObject
00012042 4E75                       		rts	
00012044                            ; ===========================================================================
00012044                            ; ---------------------------------------------------------------------------
00012044                            ; Sprite mappings - fans (SLZ)
00012044                            ; ---------------------------------------------------------------------------
00012044                            Map_obj5D:
00012044                            	include "_maps\obj5D.asm"
00012044                            ; ---------------------------------------------------------------------------
00012044                            ; Sprite mappings - fans (SLZ)
00012044                            ; ---------------------------------------------------------------------------
00012044 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00012048 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001204C 0000                       		dc.w byte_1161A-Map_obj5D
0001204E 02                         byte_1161A:	dc.b 2
0001204F F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00012054 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00012059 02                         byte_11625:	dc.b 2
0001205A F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
0001205F 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00012064 02                         byte_11630:	dc.b 2
00012065 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001206A 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012070 00                         		even
00012070 00                         		even
00012070                            
00012070                            ; ===========================================================================
00012070                            ; ---------------------------------------------------------------------------
00012070                            ; Object 5E - seesaws (SLZ)
00012070                            ; ---------------------------------------------------------------------------
00012070                            
00012070                            Obj5E:					; XREF: Obj_Index
00012070 7000                       		moveq	#0,d0
00012072 1028 0024                  		move.b	$24(a0),d0
00012076 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
0001207A 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
0001207E 3028 0030                  		move.w	$30(a0),d0
00012082 0240 FF80                  		andi.w	#$FF80,d0
00012086 3238 F700                  		move.w	($FFFFF700).w,d1
0001208A 0441 0080                  		subi.w	#$80,d1
0001208E 0241 FF80                  		andi.w	#$FF80,d1
00012092 9041                       		sub.w	d1,d0
00012094 6B00 BFF2                  		bmi.w	DeleteObject
00012098 0C40 0280                  		cmpi.w	#$280,d0
0001209C 6200 BFEA                  		bhi.w	DeleteObject
000120A0 6000 BFAA                  		bra.w	DisplaySprite
000120A4                            ; ===========================================================================
000120A4 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000120A6 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000120A8 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000120AA 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000120AC 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000120AE 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000120B0                            ; ===========================================================================
000120B0                            
000120B0                            Obj5E_Main:				; XREF: Obj5E_Index
000120B0 5428 0024                  		addq.b	#2,$24(a0)
000120B4 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000120BC 317C 0374 0002             		move.w	#$374,2(a0)
000120C2 0028 0004 0001             		ori.b	#4,1(a0)
000120C8 117C 0004 0018             		move.b	#4,$18(a0)
000120CE 117C 0030 0019             		move.b	#$30,$19(a0)
000120D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000120DA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000120DE 6600                       		bne.s	loc_116D2	; if not, branch
000120E0 6100 C406                  		bsr.w	SingleObjLoad2
000120E4 6600                       		bne.s	loc_116D2
000120E6 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000120EA 5C29 0024                  		addq.b	#6,$24(a1)
000120EE 3368 0008 0008             		move.w	8(a0),8(a1)
000120F4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120FA 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012100 2348 003C                  		move.l	a0,$3C(a1)
00012104                            
00012104                            loc_116D2:
00012104 0828 0000 0022             		btst	#0,$22(a0)
0001210A 6700                       		beq.s	loc_116E0
0001210C 117C 0002 001A             		move.b	#2,$1A(a0)
00012112                            
00012112                            loc_116E0:
00012112 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00012118                            
00012118                            Obj5E_Slope:				; XREF: Obj5E_Index
00012118 1228 003A                  		move.b	$3A(a0),d1
0001211C 6100 0000                  		bsr.w	loc_11766
00012120 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012126 0828 0000 001A             		btst	#0,$1A(a0)
0001212C 6700                       		beq.s	loc_11702
0001212E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012134                            
00012134                            loc_11702:
00012134 43F8 D000                  		lea	($FFFFD000).w,a1
00012138 3169 0012 0038             		move.w	$12(a1),$38(a0)
0001213E 323C 0030                  		move.w	#$30,d1
00012142 4EB9 0000 7D2A             		jsr	(SlopeObject).l
00012148 4E75                       		rts	
0001214A                            ; ===========================================================================
0001214A                            
0001214A                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001214A 6100 0000                  		bsr.w	loc_1174A
0001214E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00012154 0828 0000 001A             		btst	#0,$1A(a0)
0001215A 6700                       		beq.s	loc_11730
0001215C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012162                            
00012162                            loc_11730:
00012162 323C 0030                  		move.w	#$30,d1
00012166 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
0001216C 323C 0030                  		move.w	#$30,d1
00012170 3428 0008                  		move.w	8(a0),d2
00012174 4EB9 0000 8DBA             		jsr	SlopeObject2
0001217A 4E75                       		rts	
0001217C                            ; ===========================================================================
0001217C                            
0001217C                            loc_1174A:				; XREF: Obj5E_Slope2
0001217C 7202                       		moveq	#2,d1
0001217E 43F8 D000                  		lea	($FFFFD000).w,a1
00012182 3028 0008                  		move.w	8(a0),d0
00012186 9069 0008                  		sub.w	8(a1),d0
0001218A 6400                       		bcc.s	loc_1175E
0001218C 4440                       		neg.w	d0
0001218E 7200                       		moveq	#0,d1
00012190                            
00012190                            loc_1175E:
00012190 0C40 0008                  		cmpi.w	#8,d0
00012194 6400                       		bcc.s	loc_11766
00012196 7201                       		moveq	#1,d1
00012198                            
00012198                            loc_11766:
00012198 1028 001A                  		move.b	$1A(a0),d0
0001219C B001                       		cmp.b	d1,d0
0001219E 6700                       		beq.s	locret_11790
000121A0 6400                       		bcc.s	loc_11772
000121A2 5400                       		addq.b	#2,d0
000121A4                            
000121A4                            loc_11772:
000121A4 5300                       		subq.b	#1,d0
000121A6 1140 001A                  		move.b	d0,$1A(a0)
000121AA 1141 003A                  		move.b	d1,$3A(a0)
000121AE 08A8 0000 0001             		bclr	#0,1(a0)
000121B4 0828 0001 001A             		btst	#1,$1A(a0)
000121BA 6700                       		beq.s	locret_11790
000121BC 08E8 0000 0001             		bset	#0,1(a0)
000121C2                            
000121C2                            locret_11790:
000121C2 4E75                       		rts	
000121C4                            ; ===========================================================================
000121C4                            
000121C4                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000121C4 5428 0024                  		addq.b	#2,$24(a0)
000121C8 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000121D0 317C 04F0 0002             		move.w	#$4F0,2(a0)
000121D6 0028 0004 0001             		ori.b	#4,1(a0)
000121DC 117C 0004 0018             		move.b	#4,$18(a0)
000121E2 117C 008B 0020             		move.b	#$8B,$20(a0)
000121E8 117C 000C 0019             		move.b	#$C,$19(a0)
000121EE 3168 0008 0030             		move.w	8(a0),$30(a0)
000121F4 0668 0028 0008             		addi.w	#$28,8(a0)
000121FA 3168 000C 0034             		move.w	$C(a0),$34(a0)
00012200 117C 0001 001A             		move.b	#1,$1A(a0)
00012206 0828 0000 0022             		btst	#0,$22(a0)
0001220C 6700                       		beq.s	Obj5E_MoveSpike
0001220E 0468 0050 0008             		subi.w	#$50,8(a0)
00012214 117C 0002 003A             		move.b	#2,$3A(a0)
0001221A                            
0001221A                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001221A 2268 003C                  		movea.l	$3C(a0),a1
0001221E 7000                       		moveq	#0,d0
00012220 1028 003A                  		move.b	$3A(a0),d0
00012224 9029 003A                  		sub.b	$3A(a1),d0
00012228 6700                       		beq.s	loc_1183E
0001222A 6400                       		bcc.s	loc_117FC
0001222C 4400                       		neg.b	d0
0001222E                            
0001222E                            loc_117FC:
0001222E 323C F7E8                  		move.w	#-$818,d1
00012232 343C FEEC                  		move.w	#-$114,d2
00012236 0C00 0001                  		cmpi.b	#1,d0
0001223A 6700                       		beq.s	loc_11822
0001223C 323C F510                  		move.w	#-$AF0,d1
00012240 343C FF34                  		move.w	#-$CC,d2
00012244 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001224A 6D00                       		blt.s	loc_11822
0001224C 323C F200                  		move.w	#-$E00,d1
00012250 343C FF60                  		move.w	#-$A0,d2
00012254                            
00012254                            loc_11822:
00012254 3141 0012                  		move.w	d1,$12(a0)
00012258 3142 0010                  		move.w	d2,$10(a0)
0001225C 3028 0008                  		move.w	8(a0),d0
00012260 9068 0030                  		sub.w	$30(a0),d0
00012264 6400                       		bcc.s	loc_11838
00012266 4468 0010                  		neg.w	$10(a0)
0001226A                            
0001226A                            loc_11838:
0001226A 5428 0024                  		addq.b	#2,$24(a0)
0001226E 6000                       		bra.s	Obj5E_SpikeFall
00012270                            ; ===========================================================================
00012270                            
00012270                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012270 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012276 7000                       		moveq	#0,d0
00012278 1029 001A                  		move.b	$1A(a1),d0
0001227C 343C 0028                  		move.w	#$28,d2
00012280 3228 0008                  		move.w	8(a0),d1
00012284 9268 0030                  		sub.w	$30(a0),d1
00012288 6400                       		bcc.s	loc_1185C
0001228A 4442                       		neg.w	d2
0001228C 5440                       		addq.w	#2,d0
0001228E                            
0001228E                            loc_1185C:
0001228E D040                       		add.w	d0,d0
00012290 3228 0034                  		move.w	$34(a0),d1
00012294 D272 0000                  		add.w	(a2,d0.w),d1
00012298 3141 000C                  		move.w	d1,$C(a0)
0001229C D468 0030                  		add.w	$30(a0),d2
000122A0 3142 0008                  		move.w	d2,8(a0)
000122A4 4268 000E                  		clr.w	$E(a0)
000122A8 4268 000A                  		clr.w	$A(a0)
000122AC 4E75                       		rts	
000122AE                            ; ===========================================================================
000122AE                            
000122AE                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000122AE 4A68 0012                  		tst.w	$12(a0)
000122B2 6A00                       		bpl.s	loc_1189A
000122B4 6100 BCFE                  		bsr.w	ObjectFall
000122B8 3028 0034                  		move.w	$34(a0),d0
000122BC 0440 002F                  		subi.w	#$2F,d0
000122C0 B068 000C                  		cmp.w	$C(a0),d0
000122C4 6E00                       		bgt.s	locret_11898
000122C6 6100 BCEC                  		bsr.w	ObjectFall
000122CA                            
000122CA                            locret_11898:
000122CA 4E75                       		rts	
000122CC                            ; ===========================================================================
000122CC                            
000122CC                            loc_1189A:				; XREF: Obj5E_SpikeFall
000122CC 6100 BCE6                  		bsr.w	ObjectFall
000122D0 2268 003C                  		movea.l	$3C(a0),a1
000122D4 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000122DA 7000                       		moveq	#0,d0
000122DC 1029 001A                  		move.b	$1A(a1),d0
000122E0 3228 0008                  		move.w	8(a0),d1
000122E4 9268 0030                  		sub.w	$30(a0),d1
000122E8 6400                       		bcc.s	loc_118BA
000122EA 5440                       		addq.w	#2,d0
000122EC                            
000122EC                            loc_118BA:
000122EC D040                       		add.w	d0,d0
000122EE 3228 0034                  		move.w	$34(a0),d1
000122F2 D272 0000                  		add.w	(a2,d0.w),d1
000122F6 B268 000C                  		cmp.w	$C(a0),d1
000122FA 6E00                       		bgt.s	locret_11938
000122FC 2268 003C                  		movea.l	$3C(a0),a1
00012300 7202                       		moveq	#2,d1
00012302 4A68 0010                  		tst.w	$10(a0)
00012306 6B00                       		bmi.s	Obj5E_Spring
00012308 7200                       		moveq	#0,d1
0001230A                            
0001230A                            Obj5E_Spring:
0001230A 1341 003A                  		move.b	d1,$3A(a1)
0001230E 1141 003A                  		move.b	d1,$3A(a0)
00012312 B229 001A                  		cmp.b	$1A(a1),d1
00012316 6700                       		beq.s	loc_1192C
00012318 08A9 0003 0022             		bclr	#3,$22(a1)
0001231E 6700                       		beq.s	loc_1192C
00012320 4229 0025                  		clr.b	$25(a1)
00012324 137C 0002 0024             		move.b	#2,$24(a1)
0001232A 45F8 D000                  		lea	($FFFFD000).w,a2
0001232E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012334 446A 0012                  		neg.w	$12(a2)
00012338 08EA 0001 0022             		bset	#1,$22(a2)
0001233E 08AA 0003 0022             		bclr	#3,$22(a2)
00012344 422A 003C                  		clr.b	$3C(a2)
00012348 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001234E 157C 0002 0024             		move.b	#2,$24(a2)
00012354 303C 00CC                  		move.w	#$CC,d0
00012358 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play spring sound
0001235E                            
0001235E                            loc_1192C:
0001235E 4268 0010                  		clr.w	$10(a0)
00012362 4268 0012                  		clr.w	$12(a0)
00012366 5528 0024                  		subq.b	#2,$24(a0)
0001236A                            
0001236A                            locret_11938:
0001236A 4E75                       		rts	
0001236C                            ; ===========================================================================
0001236C FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012376                            
00012376                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000123A6                            		even
000123A6                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000123D6                            		even
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            ; Sprite mappings - seesaws (SLZ)
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            Map_obj5E:
000123D6                            	include "_maps\obj5E.asm"
000123D6                            ; ---------------------------------------------------------------------------
000123D6                            ; Sprite mappings - seesaws (SLZ)
000123D6                            ; ---------------------------------------------------------------------------
000123D6 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000123DA 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000123DE 07                         byte_119AC:	dc.b 7
000123DF D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000123E4 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000123E9 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000123EE EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000123F3 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000123F8 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000123FD FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012402 04                         byte_119D0:	dc.b 4
00012403 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012408 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001240D E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012412 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012418 00                         		even
00012418 00                         		even
00012418                            
00012418                            ; ---------------------------------------------------------------------------
00012418                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012418                            ; ---------------------------------------------------------------------------
00012418                            Map_obj5Ea:
00012418                            	include "_maps\obj5Eballs.asm"
00012418                            ; ---------------------------------------------------------------------------
00012418                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012418                            ; ---------------------------------------------------------------------------
00012418 0000                       		dc.w byte_119EA-Map_obj5Ea
0001241A 0000                       		dc.w byte_119F0-Map_obj5Ea
0001241C 01                         byte_119EA:	dc.b 1
0001241D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012422 01                         byte_119F0:	dc.b 1
00012423 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012428                            		even
00012428                            		even
00012428                            
00012428                            ; ===========================================================================
00012428                            ; ---------------------------------------------------------------------------
00012428                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012428                            ; ---------------------------------------------------------------------------
00012428                            
00012428                            Obj5F:					; XREF: Obj_Index
00012428 7000                       		moveq	#0,d0
0001242A 1028 0024                  		move.b	$24(a0),d0
0001242E 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012432 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012436                            ; ===========================================================================
00012436 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012438 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001243A 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001243C 0000                       		dc.w Obj5F_End-Obj5F_Index
0001243E                            ; ===========================================================================
0001243E                            
0001243E                            Obj5F_Main:				; XREF: Obj5F_Index
0001243E 5428 0024                  		addq.b	#2,$24(a0)
00012442 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001244A 317C 0400 0002             		move.w	#$400,2(a0)
00012450 0028 0004 0001             		ori.b	#4,1(a0)
00012456 117C 0003 0018             		move.b	#3,$18(a0)
0001245C 117C 000C 0019             		move.b	#$C,$19(a0)
00012462 1028 0028                  		move.b	$28(a0),d0
00012466 6700                       		beq.s	loc_11A3C
00012468 1140 0024                  		move.b	d0,$24(a0)
0001246C 4E75                       		rts	
0001246E                            ; ===========================================================================
0001246E                            
0001246E                            loc_11A3C:
0001246E 117C 009A 0020             		move.b	#$9A,$20(a0)
00012474 0868 0000 0022             		bchg	#0,$22(a0)
0001247A                            
0001247A                            Obj5F_Action:				; XREF: Obj5F_Index
0001247A 7000                       		moveq	#0,d0
0001247C 1028 0025                  		move.b	$25(a0),d0
00012480 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012484 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012488 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001248E 6100 8C0A                  		bsr.w	AnimateSprite
00012492 6000 DC60                  		bra.w	MarkObjGone
00012496                            ; ===========================================================================
00012496 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012498 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001249A 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001249C                            ; ===========================================================================
0001249C                            
0001249C                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001249C 6100 0000                  		bsr.w	Obj5F_ChkSonic
000124A0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124A4 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000124A6 5428 0025                  		addq.b	#2,$25(a0)
000124AA 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000124B0 317C 0010 0010             		move.w	#$10,$10(a0)
000124B6 117C 0001 001C             		move.b	#1,$1C(a0)
000124BC 0868 0000 0022             		bchg	#0,$22(a0)
000124C2 6700                       		beq.s	locret_11A96
000124C4 4468 0010                  		neg.w	$10(a0)		; change direction
000124C8                            
000124C8                            locret_11A96:
000124C8 4E75                       		rts	
000124CA                            ; ===========================================================================
000124CA                            
000124CA                            Obj5F_Wait:				; XREF: Obj5F_Index2
000124CA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000124CE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124D2 6B00                       		bmi.s	loc_11AA8
000124D4 6100 BB50                  		bsr.w	SpeedToPos
000124D8 4E75                       		rts	
000124DA                            ; ===========================================================================
000124DA                            
000124DA                            loc_11AA8:
000124DA 5528 0025                  		subq.b	#2,$25(a0)
000124DE 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000124E4 4268 0010                  		clr.w	$10(a0)		; stop walking
000124E8 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000124EE 4E75                       		rts	
000124F0                            ; ===========================================================================
000124F0                            
000124F0                            Obj5F_Explode:				; XREF: Obj5F_Index2
000124F0 5368 0030                  		subq.w	#1,$30(a0)
000124F4 6A00                       		bpl.s	locret_11AD0
000124F6 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000124FA 117C 0000 0024             		move.b	#0,$24(a0)
00012500                            
00012500                            locret_11AD0:
00012500 4E75                       		rts	
00012502                            ; ===========================================================================
00012502                            
00012502                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012502 3038 D008                  		move.w	($FFFFD008).w,d0
00012506 9068 0008                  		sub.w	8(a0),d0
0001250A 6400                       		bcc.s	loc_11ADE
0001250C 4440                       		neg.w	d0
0001250E                            
0001250E                            loc_11ADE:
0001250E 0C40 0060                  		cmpi.w	#$60,d0
00012512 6400                       		bcc.s	locret_11B5E
00012514 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012518 9068 000C                  		sub.w	$C(a0),d0
0001251C 6400                       		bcc.s	Obj5F_MakeFuse
0001251E 4440                       		neg.w	d0
00012520                            
00012520                            Obj5F_MakeFuse:
00012520 0C40 0060                  		cmpi.w	#$60,d0
00012524 6400                       		bcc.s	locret_11B5E
00012526 4A78 FE08                  		tst.w	($FFFFFE08).w
0001252A 6600                       		bne.s	locret_11B5E
0001252C 117C 0004 0025             		move.b	#4,$25(a0)
00012532 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012538 4268 0010                  		clr.w	$10(a0)
0001253C 117C 0002 001C             		move.b	#2,$1C(a0)
00012542 6100 BFA4                  		bsr.w	SingleObjLoad2
00012546 6600                       		bne.s	locret_11B5E
00012548 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001254C 3368 0008 0008             		move.w	8(a0),8(a1)
00012552 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012558 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001255E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012564 137C 0004 0028             		move.b	#4,$28(a1)
0001256A 137C 0003 001C             		move.b	#3,$1C(a1)
00012570 337C 0010 0012             		move.w	#$10,$12(a1)
00012576 0828 0001 0022             		btst	#1,$22(a0)
0001257C 6700                       		beq.s	loc_11B54
0001257E 4469 0012                  		neg.w	$12(a1)
00012582                            
00012582                            loc_11B54:
00012582 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012588 2348 003C                  		move.l	a0,$3C(a1)
0001258C                            
0001258C                            locret_11B5E:
0001258C 4E75                       		rts	
0001258E                            ; ===========================================================================
0001258E                            
0001258E                            Obj5F_Display:				; XREF: Obj5F_Index
0001258E 6100                       		bsr.s	loc_11B70
00012590 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012596 6100 8B02                  		bsr.w	AnimateSprite
0001259A 6000 DB58                  		bra.w	MarkObjGone
0001259E                            ; ===========================================================================
0001259E                            
0001259E                            loc_11B70:
0001259E 5368 0030                  		subq.w	#1,$30(a0)
000125A2 6B00                       		bmi.s	loc_11B7C
000125A4 6100 BA80                  		bsr.w	SpeedToPos
000125A8 4E75                       		rts	
000125AA                            ; ===========================================================================
000125AA                            
000125AA                            loc_11B7C:
000125AA 4268 0030                  		clr.w	$30(a0)
000125AE 4228 0024                  		clr.b	$24(a0)
000125B2 3168 0034 000C             		move.w	$34(a0),$C(a0)
000125B8 7203                       		moveq	#3,d1
000125BA 2248                       		movea.l	a0,a1
000125BC 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000125C2 6000                       		bra.s	Obj5F_MakeShrap
000125C4                            ; ===========================================================================
000125C4                            
000125C4                            Obj5F_Loop:
000125C4 6100 BF22                  		bsr.w	SingleObjLoad2
000125C8 6600                       		bne.s	loc_11BCE
000125CA                            
000125CA                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000125CA 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000125CE 3368 0008 0008             		move.w	8(a0),8(a1)
000125D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000125DA 137C 0006 0028             		move.b	#6,$28(a1)
000125E0 137C 0004 001C             		move.b	#4,$1C(a1)
000125E6 335A 0010                  		move.w	(a2)+,$10(a1)
000125EA 335A 0012                  		move.w	(a2)+,$12(a1)
000125EE 137C 0098 0020             		move.b	#$98,$20(a1)
000125F4 08E9 0007 0001             		bset	#7,1(a1)
000125FA                            
000125FA                            loc_11BCE:
000125FA 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000125FE                            
000125FE 117C 0006 0024             		move.b	#6,$24(a0)
00012604                            
00012604                            Obj5F_End:				; XREF: Obj5F_Index
00012604 6100 BA20                  		bsr.w	SpeedToPos
00012608 0668 0018 0012             		addi.w	#$18,$12(a0)
0001260E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012614 6100 8A84                  		bsr.w	AnimateSprite
00012618 4A28 0001                  		tst.b	1(a0)
0001261C 6A00 BA6A                  		bpl.w	DeleteObject
00012620 6000 BA2A                  		bra.w	DisplaySprite
00012624                            ; ===========================================================================
00012624 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012634                            
00012634                            Ani_obj5F:
00012634                            	include "_anim\obj5F.asm"
00012634                            ; ---------------------------------------------------------------------------
00012634                            ; Animation script - Bomb enemy
00012634                            ; ---------------------------------------------------------------------------
00012634 0000                       		dc.w byte_11C12-Ani_obj5F
00012636 0000                       		dc.w byte_11C16-Ani_obj5F
00012638 0000                       		dc.w byte_11C1C-Ani_obj5F
0001263A 0000                       		dc.w byte_11C20-Ani_obj5F
0001263C 0000                       		dc.w byte_11C24-Ani_obj5F
0001263E 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012642 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012648 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001264C 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012650 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012654                            		even
00012654                            		even
00012654                            
00012654                            ; ---------------------------------------------------------------------------
00012654                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012654                            ; ---------------------------------------------------------------------------
00012654                            Map_obj5F:
00012654                            	include "_maps\obj5F.asm"
00012654                            ; ---------------------------------------------------------------------------
00012654                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012654                            ; ---------------------------------------------------------------------------
00012654 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012658 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001265C 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012660 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012664 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012668 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001266C 03                         byte_11C40:	dc.b 3
0001266D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012672 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012677 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001267C 03                         byte_11C50:	dc.b 3
0001267D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012682 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012687 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001268C 03                         byte_11C60:	dc.b 3
0001268D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012692 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012697 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001269C 03                         byte_11C70:	dc.b 3
0001269D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126A2 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000126A7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000126AC 03                         byte_11C80:	dc.b 3
000126AD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000126B2 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000126B7 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000126BC 03                         byte_11C90:	dc.b 3
000126BD F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126C2 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000126C7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000126CC 02                         byte_11CA0:	dc.b 2
000126CD F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000126D2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000126D7 02                         byte_11CAB:	dc.b 2
000126D8 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000126DD 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000126E2 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000126E3 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000126E8 01                         byte_11CBC:	dc.b 1			; fuse
000126E9 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000126EE 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000126EF FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000126F4 01                         byte_11CC8:	dc.b 1			; fireball
000126F5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000126FA                            		even
000126FA                            		even
000126FA                            
000126FA                            ; ===========================================================================
000126FA                            ; ---------------------------------------------------------------------------
000126FA                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000126FA                            ; ---------------------------------------------------------------------------
000126FA                            
000126FA                            Obj60:					; XREF: Obj_Index
000126FA 7000                       		moveq	#0,d0
000126FC 1028 0024                  		move.b	$24(a0),d0
00012700 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012704 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012708                            ; ===========================================================================
00012708 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001270A 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001270C 0000                       		dc.w Obj60_Display-Obj60_Index
0001270E 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012710 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012712                            ; ===========================================================================
00012712                            
00012712                            Obj60_Main:				; XREF: Obj60_Index
00012712 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001271A 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012720 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012726 6700                       		beq.s	loc_11D02
00012728 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001272E                            
0001272E                            loc_11D02:
0001272E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012734 6600                       		bne.s	loc_11D10
00012736 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001273C                            
0001273C                            loc_11D10:
0001273C 0028 0004 0001             		ori.b	#4,1(a0)
00012742 117C 0004 0018             		move.b	#4,$18(a0)
00012748 117C 000B 0020             		move.b	#$B,$20(a0)
0001274E 117C 000C 0019             		move.b	#$C,$19(a0)
00012754 7400                       		moveq	#0,d2
00012756 45E8 0037                  		lea	$37(a0),a2
0001275A 264A                       		movea.l	a2,a3
0001275C 524A                       		addq.w	#1,a2
0001275E 7203                       		moveq	#3,d1
00012760                            
00012760                            Obj60_MakeOrbs:
00012760 6100 BD86                  		bsr.w	SingleObjLoad2
00012764 6600                       		bne.s	loc_11D90
00012766 5213                       		addq.b	#1,(a3)
00012768 3A09                       		move.w	a1,d5
0001276A 0445 D000                  		subi.w	#-$3000,d5
0001276E EC4D                       		lsr.w	#6,d5
00012770 0245 007F                  		andi.w	#$7F,d5
00012774 14C5                       		move.b	d5,(a2)+
00012776 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012778 137C 0006 0024             		move.b	#6,$24(a1)
0001277E 2368 0004 0004             		move.l	4(a0),4(a1)
00012784 3368 0002 0002             		move.w	2(a0),2(a1)
0001278A 0029 0004 0001             		ori.b	#4,1(a1)
00012790 137C 0004 0018             		move.b	#4,$18(a1)
00012796 137C 0008 0019             		move.b	#8,$19(a1)
0001279C 137C 0003 001A             		move.b	#3,$1A(a1)
000127A2 137C 0098 0020             		move.b	#$98,$20(a1)
000127A8 1342 0026                  		move.b	d2,$26(a1)
000127AC 0602 0040                  		addi.b	#$40,d2
000127B0 2348 003C                  		move.l	a0,$3C(a1)
000127B4 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000127B8                            
000127B8                            loc_11D90:
000127B8 7001                       		moveq	#1,d0
000127BA 0828 0000 0022             		btst	#0,$22(a0)
000127C0 6700                       		beq.s	Obj60_Move
000127C2 4440                       		neg.w	d0
000127C4                            
000127C4                            Obj60_Move:
000127C4 1140 0036                  		move.b	d0,$36(a0)
000127C8 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000127CE 5428 0024                  		addq.b	#2,$24(a0)
000127D2 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000127D8 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000127DE 6700                       		beq.s	locret_11DBC	; if not, branch
000127E0 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000127E4                            
000127E4                            locret_11DBC:
000127E4 4E75                       		rts	
000127E6                            ; ===========================================================================
000127E6                            
000127E6                            Obj60_ChkSonic:				; XREF: Obj60_Index
000127E6 3038 D008                  		move.w	($FFFFD008).w,d0
000127EA 9068 0008                  		sub.w	8(a0),d0
000127EE 6400                       		bcc.s	loc_11DCA
000127F0 4440                       		neg.w	d0
000127F2                            
000127F2                            loc_11DCA:
000127F2 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000127F6 6400                       		bcc.s	Obj60_Animate	; if not, branch
000127F8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000127FC 9068 000C                  		sub.w	$C(a0),d0
00012800 6400                       		bcc.s	loc_11DDC
00012802 4440                       		neg.w	d0
00012804                            
00012804                            loc_11DDC:
00012804 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012808 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001280A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001280E 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012810 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012816                            
00012816                            Obj60_Animate:
00012816 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001281C 6100 887C                  		bsr.w	AnimateSprite
00012820 6000 0000                  		bra.w	Obj60_ChkDel
00012824                            ; ===========================================================================
00012824                            
00012824                            Obj60_Display:				; XREF: Obj60_Index
00012824 6100 B800                  		bsr.w	SpeedToPos
00012828                            
00012828                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012828 3028 0008                  		move.w	8(a0),d0
0001282C 0240 FF80                  		andi.w	#$FF80,d0
00012830 3238 F700                  		move.w	($FFFFF700).w,d1
00012834 0441 0080                  		subi.w	#$80,d1
00012838 0241 FF80                  		andi.w	#$FF80,d1
0001283C 9041                       		sub.w	d1,d0
0001283E 0C40 0280                  		cmpi.w	#$280,d0
00012842 6200 0000                  		bhi.w	Obj60_ChkGone
00012846 6000 B804                  		bra.w	DisplaySprite
0001284A                            ; ===========================================================================
0001284A                            
0001284A                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
0001284A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001284E 7000                       		moveq	#0,d0
00012850 1028 0023                  		move.b	$23(a0),d0
00012854 6700                       		beq.s	loc_11E34
00012856 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001285C                            
0001285C                            loc_11E34:
0001285C 45E8 0037                  		lea	$37(a0),a2
00012860 7400                       		moveq	#0,d2
00012862 141A                       		move.b	(a2)+,d2
00012864 5342                       		subq.w	#1,d2
00012866 6500                       		bcs.s	Obj60_Delete
00012868                            
00012868                            loc_11E40:
00012868 7000                       		moveq	#0,d0
0001286A 101A                       		move.b	(a2)+,d0
0001286C ED48                       		lsl.w	#6,d0
0001286E 0680 00FF D000             		addi.l	#$FFD000,d0
00012874 2240                       		movea.l	d0,a1
00012876 6100 B812                  		bsr.w	DeleteObject2
0001287A 51CA FFEC                  		dbf	d2,loc_11E40
0001287E                            
0001287E                            Obj60_Delete:
0001287E 6000 B808                  		bra.w	DeleteObject
00012882                            ; ===========================================================================
00012882                            
00012882                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012882 2268 003C                  		movea.l	$3C(a0),a1
00012886 0C11 0060                  		cmpi.b	#$60,0(a1)
0001288A 6600 B7FC                  		bne.w	DeleteObject
0001288E 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012894 6600                       		bne.s	Obj60_Circle
00012896 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001289C 6600                       		bne.s	Obj60_Circle
0001289E 5428 0024                  		addq.b	#2,$24(a0)
000128A2 5329 0037                  		subq.b	#1,$37(a1)
000128A6 6600                       		bne.s	Obj60_FireOrb
000128A8 5429 0024                  		addq.b	#2,$24(a1)
000128AC                            
000128AC                            Obj60_FireOrb:
000128AC 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000128B2 0829 0000 0022             		btst	#0,$22(a1)
000128B8 6700                       		beq.s	Obj60_Display2
000128BA 4468 0010                  		neg.w	$10(a0)
000128BE                            
000128BE                            Obj60_Display2:
000128BE 6000 B78C                  		bra.w	DisplaySprite
000128C2                            ; ===========================================================================
000128C2                            
000128C2                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000128C2 1028 0026                  		move.b	$26(a0),d0
000128C6 4EB9 0000 2D34             		jsr	(CalcSine).l
000128CC E841                       		asr.w	#4,d1
000128CE D269 0008                  		add.w	8(a1),d1
000128D2 3141 0008                  		move.w	d1,8(a0)
000128D6 E840                       		asr.w	#4,d0
000128D8 D069 000C                  		add.w	$C(a1),d0
000128DC 3140 000C                  		move.w	d0,$C(a0)
000128E0 1029 0036                  		move.b	$36(a1),d0
000128E4 D128 0026                  		add.b	d0,$26(a0)
000128E8 6000 B762                  		bra.w	DisplaySprite
000128EC                            ; ===========================================================================
000128EC                            
000128EC                            Obj60_ChkDel2:				; XREF: Obj60_Index
000128EC 6100 B738                  		bsr.w	SpeedToPos
000128F0 4A28 0001                  		tst.b	1(a0)
000128F4 6A00 B792                  		bpl.w	DeleteObject
000128F8 6000 B752                  		bra.w	DisplaySprite
000128FC                            ; ===========================================================================
000128FC                            Ani_obj60:
000128FC                            	include "_anim\obj60.asm"
000128FC                            ; ---------------------------------------------------------------------------
000128FC                            ; Animation script - Orbinaut enemy
000128FC                            ; ---------------------------------------------------------------------------
000128FC 0000                       		dc.w byte_11EDA-Ani_obj60
000128FE 0000                       		dc.w byte_11EDE-Ani_obj60
00012900 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012904 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001290A                            		even
0001290A                            		even
0001290A                            
0001290A                            ; ---------------------------------------------------------------------------
0001290A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001290A                            ; ---------------------------------------------------------------------------
0001290A                            Map_obj60:
0001290A                            	include "_maps\obj60.asm"
0001290A                            ; ---------------------------------------------------------------------------
0001290A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001290A                            ; ---------------------------------------------------------------------------
0001290A 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001290E 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012912 01                         byte_11EEC:	dc.b 1
00012913 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012918 01                         byte_11EF2:	dc.b 1
00012919 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001291E 01                         byte_11EF8:	dc.b 1
0001291F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012924 01                         byte_11EFE:	dc.b 1
00012925 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001292A                            		even
0001292A                            		even
0001292A                            
0001292A                            ; ===========================================================================
0001292A                            ; ---------------------------------------------------------------------------
0001292A                            ; Object 16 - harpoon (LZ)
0001292A                            ; ---------------------------------------------------------------------------
0001292A                            
0001292A                            Obj16:					; XREF: Obj_Index
0001292A 7000                       		moveq	#0,d0
0001292C 1028 0024                  		move.b	$24(a0),d0
00012930 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012934 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012938                            ; ===========================================================================
00012938 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001293A 0000                       		dc.w Obj16_Move-Obj16_Index
0001293C 0000                       		dc.w Obj16_Wait-Obj16_Index
0001293E                            ; ===========================================================================
0001293E                            
0001293E                            Obj16_Main:				; XREF: Obj16_Index
0001293E 5428 0024                  		addq.b	#2,$24(a0)
00012942 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001294A 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012950 0028 0004 0001             		ori.b	#4,1(a0)
00012956 117C 0004 0018             		move.b	#4,$18(a0)
0001295C 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012962 117C 0014 0019             		move.b	#$14,$19(a0)
00012968 317C 003C 0030             		move.w	#60,$30(a0)
0001296E                            
0001296E                            Obj16_Move:				; XREF: Obj16_Index
0001296E 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012974 6100 8724                  		bsr.w	AnimateSprite
00012978 7000                       		moveq	#0,d0
0001297A 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001297E 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012984 6000 D76E                  		bra.w	MarkObjGone
00012988                            ; ===========================================================================
00012988 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001298E                            ; ===========================================================================
0001298E                            
0001298E                            Obj16_Wait:				; XREF: Obj16_Index
0001298E 5368 0030                  		subq.w	#1,$30(a0)
00012992 6A00                       		bpl.s	Obj16_ChkDel
00012994 317C 003C 0030             		move.w	#60,$30(a0)
0001299A 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001299E 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000129A4                            
000129A4                            Obj16_ChkDel:
000129A4 6000 D74E                  		bra.w	MarkObjGone
000129A8                            ; ===========================================================================
000129A8                            Ani_obj16:
000129A8                            	include "_anim\obj16.asm"
000129A8                            ; ---------------------------------------------------------------------------
000129A8                            ; Animation script - harpoon (LZ)
000129A8                            ; ---------------------------------------------------------------------------
000129A8 0000                       		dc.w byte_11F8A-Ani_obj16
000129AA 0000                       		dc.w byte_11F8E-Ani_obj16
000129AC 0000                       		dc.w byte_11F92-Ani_obj16
000129AE 0000                       		dc.w byte_11F96-Ani_obj16
000129B0 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000129B4 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000129B8 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000129BC 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000129C0                            		even
000129C0                            		even
000129C0                            
000129C0                            ; ---------------------------------------------------------------------------
000129C0                            ; Sprite mappings - harpoon (LZ)
000129C0                            ; ---------------------------------------------------------------------------
000129C0                            Map_obj16:
000129C0                            	include "_maps\obj16.asm"
000129C0                            ; ---------------------------------------------------------------------------
000129C0                            ; Sprite mappings - harpoon (LZ)
000129C0                            ; ---------------------------------------------------------------------------
000129C0 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000129C4 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000129C8 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000129CC 01                         byte_11FA6:	dc.b 1
000129CD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000129D2 01                         byte_11FAC:	dc.b 1
000129D3 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000129D8 02                         byte_11FB2:	dc.b 2
000129D9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000129DE FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000129E3 01                         byte_11FBD:	dc.b 1
000129E4 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000129E9 01                         byte_11FC3:	dc.b 1
000129EA E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000129EF 02                         byte_11FC9:	dc.b 2
000129F0 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000129F5 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000129FA                            		even
000129FA                            		even
000129FA                            
000129FA                            ; ===========================================================================
000129FA                            ; ---------------------------------------------------------------------------
000129FA                            ; Object 61 - blocks (LZ)
000129FA                            ; ---------------------------------------------------------------------------
000129FA                            
000129FA                            Obj61:					; XREF: Obj_Index
000129FA 7000                       		moveq	#0,d0
000129FC 1028 0024                  		move.b	$24(a0),d0
00012A00 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012A04 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012A08                            ; ===========================================================================
00012A08 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012A0A 0000                       		dc.w Obj61_Action-Obj61_Index
00012A0C                            
00012A0C 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012A0E 200C                       		dc.b $20, $C
00012A10 1010                       		dc.b $10, $10
00012A12 1010                       		dc.b $10, $10
00012A14                            ; ===========================================================================
00012A14                            
00012A14                            Obj61_Main:				; XREF: Obj61_Index
00012A14 5428 0024                  		addq.b	#2,$24(a0)
00012A18 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012A20 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012A26 117C 0004 0001             		move.b	#4,1(a0)
00012A2C 117C 0003 0018             		move.b	#3,$18(a0)
00012A32 7000                       		moveq	#0,d0
00012A34 1028 0028                  		move.b	$28(a0),d0
00012A38 E648                       		lsr.w	#3,d0
00012A3A 0240 000E                  		andi.w	#$E,d0
00012A3E 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012A42 115A 0019                  		move.b	(a2)+,$19(a0)
00012A46 1152 0016                  		move.b	(a2),$16(a0)
00012A4A E248                       		lsr.w	#1,d0
00012A4C 1140 001A                  		move.b	d0,$1A(a0)
00012A50 3168 0008 0034             		move.w	8(a0),$34(a0)
00012A56 3168 000C 0030             		move.w	$C(a0),$30(a0)
00012A5C 1028 0028                  		move.b	$28(a0),d0
00012A60 0200 000F                  		andi.b	#$F,d0
00012A64 6700                       		beq.s	Obj61_Action
00012A66 0C00 0007                  		cmpi.b	#7,d0
00012A6A 6700                       		beq.s	Obj61_Action
00012A6C 117C 0001 0038             		move.b	#1,$38(a0)
00012A72                            
00012A72                            Obj61_Action:				; XREF: Obj61_Index
00012A72 3F28 0008                  		move.w	8(a0),-(sp)
00012A76 7000                       		moveq	#0,d0
00012A78 1028 0028                  		move.b	$28(a0),d0
00012A7C 0240 000F                  		andi.w	#$F,d0
00012A80 D040                       		add.w	d0,d0
00012A82 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012A86 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012A8A 381F                       		move.w	(sp)+,d4
00012A8C 4A28 0001                  		tst.b	1(a0)
00012A90 6A00                       		bpl.s	Obj61_ChkDel
00012A92 7200                       		moveq	#0,d1
00012A94 1228 0019                  		move.b	$19(a0),d1
00012A98 0641 000B                  		addi.w	#$B,d1
00012A9C 7400                       		moveq	#0,d2
00012A9E 1428 0016                  		move.b	$16(a0),d2
00012AA2 3602                       		move.w	d2,d3
00012AA4 5243                       		addq.w	#1,d3
00012AA6 6100 D974                  		bsr.w	SolidObject
00012AAA 1144 003F                  		move.b	d4,$3F(a0)
00012AAE 6100 0000                  		bsr.w	loc_12180
00012AB2                            
00012AB2                            Obj61_ChkDel:
00012AB2 3028 0034                  		move.w	$34(a0),d0
00012AB6 0240 FF80                  		andi.w	#$FF80,d0
00012ABA 3238 F700                  		move.w	($FFFFF700).w,d1
00012ABE 0441 0080                  		subi.w	#$80,d1
00012AC2 0241 FF80                  		andi.w	#$FF80,d1
00012AC6 9041                       		sub.w	d1,d0
00012AC8 0C40 0280                  		cmpi.w	#$280,d0
00012ACC 6200 B5BA                  		bhi.w	DeleteObject
00012AD0 6000 B57A                  		bra.w	DisplaySprite
00012AD4                            ; ===========================================================================
00012AD4 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012AD8 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012ADC 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012AE0 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012AE4                            ; ===========================================================================
00012AE4                            
00012AE4                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012AE4 4E75                       		rts	
00012AE6                            ; ===========================================================================
00012AE6                            
00012AE6                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012AE6 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012AEA 6600                       		bne.s	loc_120D6	; if yes, branch
00012AEC 0828 0003 0022             		btst	#3,$22(a0)
00012AF2 6700                       		beq.s	locret_120D4
00012AF4 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012AFA                            
00012AFA                            locret_120D4:
00012AFA 4E75                       		rts	
00012AFC                            ; ===========================================================================
00012AFC                            
00012AFC                            loc_120D6:
00012AFC 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012B00 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012B02 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012B06 4228 0038                  		clr.b	$38(a0)
00012B0A 4E75                       		rts	
00012B0C                            ; ===========================================================================
00012B0C                            
00012B0C                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012B0C 6100 B518                  		bsr.w	SpeedToPos
00012B10 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012B14 6100 0000                  		bsr.w	ObjHitFloor
00012B18 4A41                       		tst.w	d1
00012B1A 6A00 0000                  		bpl.w	locret_12106
00012B1E 5241                       		addq.w	#1,d1
00012B20 D368 000C                  		add.w	d1,$C(a0)
00012B24 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012B28 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B2C                            
00012B2C                            locret_12106:
00012B2C 4E75                       		rts	
00012B2E                            ; ===========================================================================
00012B2E                            
00012B2E                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012B2E 6100 B4F6                  		bsr.w	SpeedToPos
00012B32 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012B36 6100 0000                  		bsr.w	ObjHitCeiling
00012B3A 4A41                       		tst.w	d1
00012B3C 6A00 0000                  		bpl.w	locret_12126
00012B40 9368 000C                  		sub.w	d1,$C(a0)
00012B44 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012B48 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012B4C                            
00012B4C                            locret_12126:
00012B4C 4E75                       		rts	
00012B4E                            ; ===========================================================================
00012B4E                            
00012B4E                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012B4E 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012B54 6600                       		bne.s	locret_12138	; if not, branch
00012B56 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012B5A 4228 0038                  		clr.b	$38(a0)
00012B5E                            
00012B5E                            locret_12138:
00012B5E 4E75                       		rts	
00012B60                            ; ===========================================================================
00012B60                            
00012B60                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012B60 3038 F646                  		move.w	($FFFFF646).w,d0
00012B64 9068 000C                  		sub.w	$C(a0),d0
00012B68 6700                       		beq.s	locret_1217E
00012B6A 6400                       		bcc.s	loc_12162
00012B6C 0C40 FFFE                  		cmpi.w	#-2,d0
00012B70 6C00                       		bge.s	loc_1214E
00012B72 70FE                       		moveq	#-2,d0
00012B74                            
00012B74                            loc_1214E:
00012B74 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012B78 6100 0000                  		bsr.w	ObjHitCeiling
00012B7C 4A41                       		tst.w	d1
00012B7E 6A00 0000                  		bpl.w	locret_12160
00012B82 9368 000C                  		sub.w	d1,$C(a0)
00012B86                            
00012B86                            locret_12160:
00012B86 4E75                       		rts	
00012B88                            ; ===========================================================================
00012B88                            
00012B88                            loc_12162:				; XREF: Obj61_Type07
00012B88 0C40 0002                  		cmpi.w	#2,d0
00012B8C 6F00                       		ble.s	loc_1216A
00012B8E 7002                       		moveq	#2,d0
00012B90                            
00012B90                            loc_1216A:
00012B90 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012B94 6100 0000                  		bsr.w	ObjHitFloor
00012B98 4A41                       		tst.w	d1
00012B9A 6A00 0000                  		bpl.w	locret_1217E
00012B9E 5241                       		addq.w	#1,d1
00012BA0 D368 000C                  		add.w	d1,$C(a0)
00012BA4                            
00012BA4                            locret_1217E:
00012BA4 4E75                       		rts	
00012BA6                            ; ===========================================================================
00012BA6                            
00012BA6                            loc_12180:				; XREF: Obj61_Action
00012BA6 4A28 0038                  		tst.b	$38(a0)
00012BAA 6700                       		beq.s	locret_121C0
00012BAC 0828 0003 0022             		btst	#3,$22(a0)
00012BB2 6600                       		bne.s	loc_1219A
00012BB4 4A28 003E                  		tst.b	$3E(a0)
00012BB8 6700                       		beq.s	locret_121C0
00012BBA 5928 003E                  		subq.b	#4,$3E(a0)
00012BBE 6000                       		bra.s	loc_121A6
00012BC0                            ; ===========================================================================
00012BC0                            
00012BC0                            loc_1219A:
00012BC0 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012BC6 6700                       		beq.s	locret_121C0
00012BC8 5828 003E                  		addq.b	#4,$3E(a0)
00012BCC                            
00012BCC                            loc_121A6:
00012BCC 1028 003E                  		move.b	$3E(a0),d0
00012BD0 4EB9 0000 2D34             		jsr	(CalcSine).l
00012BD6 323C 0400                  		move.w	#$400,d1
00012BDA C1C1                       		muls.w	d1,d0
00012BDC 4840                       		swap	d0
00012BDE D068 0030                  		add.w	$30(a0),d0
00012BE2 3140 000C                  		move.w	d0,$C(a0)
00012BE6                            
00012BE6                            locret_121C0:
00012BE6 4E75                       		rts	
00012BE8                            ; ===========================================================================
00012BE8                            ; ---------------------------------------------------------------------------
00012BE8                            ; Sprite mappings - blocks (LZ)
00012BE8                            ; ---------------------------------------------------------------------------
00012BE8                            Map_obj61:
00012BE8                            	include "_maps\obj61.asm"
00012BE8                            ; ---------------------------------------------------------------------------
00012BE8                            ; Sprite mappings - blocks (LZ)
00012BE8                            ; ---------------------------------------------------------------------------
00012BE8 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012BEC 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012BF0 01                         byte_121CA:	dc.b 1
00012BF1 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012BF6 02                         byte_121D0:	dc.b 2
00012BF7 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012BFC F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012C01 01                         byte_121DB:	dc.b 1
00012C02 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012C07 01                         byte_121E1:	dc.b 1
00012C08 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012C0E 00                         		even
00012C0E 00                         		even
00012C0E                            
00012C0E                            ; ===========================================================================
00012C0E                            ; ---------------------------------------------------------------------------
00012C0E                            ; Object 62 - gargoyle head (LZ)
00012C0E                            ; ---------------------------------------------------------------------------
00012C0E                            
00012C0E                            Obj62:					; XREF: Obj_Index
00012C0E 7000                       		moveq	#0,d0
00012C10 1028 0024                  		move.b	$24(a0),d0
00012C14 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012C18 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012C1C 6000 D4D6                  		bra.w	MarkObjGone
00012C20                            ; ===========================================================================
00012C20 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012C22 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012C24 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012C26 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012C28                            
00012C28 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012C30                            ; ===========================================================================
00012C30                            
00012C30                            Obj62_Main:				; XREF: Obj62_Index
00012C30 5428 0024                  		addq.b	#2,$24(a0)
00012C34 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012C3C 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012C42 0028 0004 0001             		ori.b	#4,1(a0)
00012C48 117C 0003 0018             		move.b	#3,$18(a0)
00012C4E 117C 0010 0019             		move.b	#$10,$19(a0)
00012C54 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C58 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012C5C 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012C62 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C68 0228 000F 0028             		andi.b	#$F,$28(a0)
00012C6E                            
00012C6E                            Obj62_MakeFire:				; XREF: Obj62_Index
00012C6E 5328 001E                  		subq.b	#1,$1E(a0)
00012C72 6600                       		bne.s	Obj62_NoFire
00012C74 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012C7A 6100 B64A                  		bsr.w	ChkObjOnScreen
00012C7E 6600                       		bne.s	Obj62_NoFire
00012C80 6100 B850                  		bsr.w	SingleObjLoad
00012C84 6600                       		bne.s	Obj62_NoFire
00012C86 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012C8A 5829 0024                  		addq.b	#4,$24(a1)
00012C8E 3368 0008 0008             		move.w	8(a0),8(a1)
00012C94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C9A 1368 0001 0001             		move.b	1(a0),1(a1)
00012CA0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012CA6                            
00012CA6                            Obj62_NoFire:
00012CA6 4E75                       		rts	
00012CA8                            ; ===========================================================================
00012CA8                            
00012CA8                            Obj62_FireBall:				; XREF: Obj62_Index
00012CA8 5428 0024                  		addq.b	#2,$24(a0)
00012CAC 117C 0008 0016             		move.b	#8,$16(a0)
00012CB2 117C 0008 0017             		move.b	#8,$17(a0)
00012CB8 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012CC0 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012CC6 0028 0004 0001             		ori.b	#4,1(a0)
00012CCC 117C 0004 0018             		move.b	#4,$18(a0)
00012CD2 117C 0098 0020             		move.b	#$98,$20(a0)
00012CD8 117C 0008 0019             		move.b	#8,$19(a0)
00012CDE 117C 0002 001A             		move.b	#2,$1A(a0)
00012CE4 5068 000C                  		addq.w	#8,$C(a0)
00012CE8 317C 0200 0010             		move.w	#$200,$10(a0)
00012CEE 0828 0000 0022             		btst	#0,$22(a0)
00012CF4 6600                       		bne.s	Obj62_Sound
00012CF6 4468 0010                  		neg.w	$10(a0)
00012CFA                            
00012CFA                            Obj62_Sound:
00012CFA 303C 00AE                  		move.w	#$AE,d0
00012CFE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012D04                            
00012D04                            Obj62_AniFire:				; XREF: Obj62_Index
00012D04 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012D08 0200 0007                  		andi.b	#7,d0
00012D0C 6600                       		bne.s	Obj62_StopFire
00012D0E 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012D14                            
00012D14                            Obj62_StopFire:
00012D14 6100 B310                  		bsr.w	SpeedToPos
00012D18 0828 0000 0022             		btst	#0,$22(a0)
00012D1E 6600                       		bne.s	Obj62_StopFire2
00012D20 76F8                       		moveq	#-8,d3
00012D22 6100 0000                  		bsr.w	ObjHitWallLeft
00012D26 4A41                       		tst.w	d1
00012D28 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012D2C 4E75                       		rts	
00012D2E                            ; ===========================================================================
00012D2E                            
00012D2E                            Obj62_StopFire2:
00012D2E 7608                       		moveq	#8,d3
00012D30 6100 0000                  		bsr.w	ObjHitWallRight
00012D34 4A41                       		tst.w	d1
00012D36 6B00 B350                  		bmi.w	DeleteObject
00012D3A 4E75                       		rts	
00012D3C                            ; ===========================================================================
00012D3C                            ; ---------------------------------------------------------------------------
00012D3C                            ; Sprite mappings - gargoyle head (LZ)
00012D3C                            ; ---------------------------------------------------------------------------
00012D3C                            Map_obj62:
00012D3C                            	include "_maps\obj62.asm"
00012D3C                            ; ---------------------------------------------------------------------------
00012D3C                            ; Sprite mappings - gargoyle head (LZ)
00012D3C                            ; ---------------------------------------------------------------------------
00012D3C 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012D40 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012D44 03                         byte_12320:	dc.b 3
00012D45 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012D4A F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012D4F 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012D54 01                         byte_12330:	dc.b 1
00012D55 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012D5A 01                         byte_12336:	dc.b 1
00012D5B FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012D60                            		even
00012D60                            		even
00012D60                            
00012D60                            ; ===========================================================================
00012D60                            ; ---------------------------------------------------------------------------
00012D60                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012D60                            ; ---------------------------------------------------------------------------
00012D60                            
00012D60                            Obj63:					; XREF: Obj_Index
00012D60 7000                       		moveq	#0,d0
00012D62 1028 0024                  		move.b	$24(a0),d0
00012D66 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012D6A 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012D6E 3028 0030                  		move.w	$30(a0),d0
00012D72 0240 FF80                  		andi.w	#$FF80,d0
00012D76 3238 F700                  		move.w	($FFFFF700).w,d1
00012D7A 0441 0080                  		subi.w	#$80,d1
00012D7E 0241 FF80                  		andi.w	#$FF80,d1
00012D82 9041                       		sub.w	d1,d0
00012D84 0C40 0280                  		cmpi.w	#$280,d0
00012D88 6200                       		bhi.s	loc_1236A
00012D8A                            
00012D8A                            Obj63_Display:				; XREF: loc_1236A
00012D8A 6000 B2C0                  		bra.w	DisplaySprite
00012D8E                            ; ===========================================================================
00012D8E                            
00012D8E                            loc_1236A:				; XREF: Obj63
00012D8E 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012D94 6600                       		bne.s	loc_12378
00012D96 0C40 FF80                  		cmpi.w	#-$80,d0
00012D9A 64EE                       		bcc.s	Obj63_Display
00012D9C                            
00012D9C                            loc_12378:
00012D9C 1028 002F                  		move.b	$2F(a0),d0
00012DA0 6A00 B2E6                  		bpl.w	DeleteObject
00012DA4 0240 007F                  		andi.w	#$7F,d0
00012DA8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012DAC 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012DB2 6000 B2D4                  		bra.w	DeleteObject
00012DB6                            ; ===========================================================================
00012DB6 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012DB8 0000                       		dc.w loc_124B2-Obj63_Index
00012DBA 0000                       		dc.w loc_124C2-Obj63_Index
00012DBC 0000                       		dc.w loc_124DE-Obj63_Index
00012DBE                            ; ===========================================================================
00012DBE                            
00012DBE                            Obj63_Main:				; XREF: Obj63_Index
00012DBE 1028 0028                  		move.b	$28(a0),d0
00012DC2 6B00 0000                  		bmi.w	loc_12460
00012DC6 5428 0024                  		addq.b	#2,$24(a0)
00012DCA 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012DD2 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012DD8 0028 0004 0001             		ori.b	#4,1(a0)
00012DDE 117C 0010 0019             		move.b	#$10,$19(a0)
00012DE4 117C 0004 0018             		move.b	#4,$18(a0)
00012DEA 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012DF0 6600                       		bne.s	loc_123E2
00012DF2 5828 0024                  		addq.b	#4,$24(a0)
00012DF6 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012DFC 117C 0001 0018             		move.b	#1,$18(a0)
00012E02 6000 0000                  		bra.w	loc_124DE
00012E06                            ; ===========================================================================
00012E06                            
00012E06                            loc_123E2:
00012E06 117C 0004 001A             		move.b	#4,$1A(a0)
00012E0C 7000                       		moveq	#0,d0
00012E0E 1028 0028                  		move.b	$28(a0),d0
00012E12 3200                       		move.w	d0,d1
00012E14 E648                       		lsr.w	#3,d0
00012E16 0240 001E                  		andi.w	#$1E,d0
00012E1A 45FA 0000                  		lea	Obj63_Data(pc),a2
00012E1E D4F2 0000                  		adda.w	(a2,d0.w),a2
00012E22 315A 0038                  		move.w	(a2)+,$38(a0)
00012E26 315A 0030                  		move.w	(a2)+,$30(a0)
00012E2A 214A 003C                  		move.l	a2,$3C(a0)
00012E2E 0241 000F                  		andi.w	#$F,d1
00012E32 E549                       		lsl.w	#2,d1
00012E34 1141 0038                  		move.b	d1,$38(a0)
00012E38 117C 0004 003A             		move.b	#4,$3A(a0)
00012E3E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012E42 6700                       		beq.s	loc_1244C
00012E44 117C 0001 003B             		move.b	#1,$3B(a0)
00012E4A 4428 003A                  		neg.b	$3A(a0)
00012E4E 7200                       		moveq	#0,d1
00012E50 1228 0038                  		move.b	$38(a0),d1
00012E54 D228 003A                  		add.b	$3A(a0),d1
00012E58 B228 0039                  		cmp.b	$39(a0),d1
00012E5C 6500                       		bcs.s	loc_12448
00012E5E 1001                       		move.b	d1,d0
00012E60 7200                       		moveq	#0,d1
00012E62 4A00                       		tst.b	d0
00012E64 6A00                       		bpl.s	loc_12448
00012E66 1228 0039                  		move.b	$39(a0),d1
00012E6A 5901                       		subq.b	#4,d1
00012E6C                            
00012E6C                            loc_12448:
00012E6C 1141 0038                  		move.b	d1,$38(a0)
00012E70                            
00012E70                            loc_1244C:
00012E70 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012E76 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012E7C 6100 0000                  		bsr.w	Obj63_ChangeDir
00012E80 6000 0000                  		bra.w	loc_124B2
00012E84                            ; ===========================================================================
00012E84                            
00012E84                            loc_12460:				; XREF: Obj63_Main
00012E84 1140 002F                  		move.b	d0,$2F(a0)
00012E88 0240 007F                  		andi.w	#$7F,d0
00012E8C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012E90 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012E96 6600 B1F0                  		bne.w	DeleteObject
00012E9A D040                       		add.w	d0,d0
00012E9C 0240 001E                  		andi.w	#$1E,d0
00012EA0 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
00012EA6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012EAA 321A                       		move.w	(a2)+,d1
00012EAC 2248                       		movea.l	a0,a1
00012EAE 6000                       		bra.s	Obj63_MakePtfms
00012EB0                            ; ===========================================================================
00012EB0                            
00012EB0                            Obj63_Loop:
00012EB0 6100 B620                  		bsr.w	SingleObjLoad
00012EB4 6600                       		bne.s	loc_124AA
00012EB6                            
00012EB6                            Obj63_MakePtfms:			; XREF: loc_12460
00012EB6 12BC 0063                  		move.b	#$63,0(a1)
00012EBA 335A 0008                  		move.w	(a2)+,8(a1)
00012EBE 335A 000C                  		move.w	(a2)+,$C(a1)
00012EC2 301A                       		move.w	(a2)+,d0
00012EC4 1340 0028                  		move.b	d0,$28(a1)
00012EC8                            
00012EC8                            loc_124AA:
00012EC8 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012ECC                            
00012ECC 588F                       		addq.l	#4,sp
00012ECE 4E75                       		rts	
00012ED0                            ; ===========================================================================
00012ED0                            
00012ED0                            loc_124B2:				; XREF: Obj63_Index
00012ED0 7200                       		moveq	#0,d1
00012ED2 1228 0019                  		move.b	$19(a0),d1
00012ED6 4EB9 0000 7C56             		jsr	(PlatformObject).l
00012EDC 6000 0000                  		bra.w	sub_12502
00012EE0                            ; ===========================================================================
00012EE0                            
00012EE0                            loc_124C2:				; XREF: Obj63_Index
00012EE0 7200                       		moveq	#0,d1
00012EE2 1228 0019                  		move.b	$19(a0),d1
00012EE6 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
00012EEC 3F28 0008                  		move.w	8(a0),-(sp)
00012EF0 6100 0000                  		bsr.w	sub_12502
00012EF4 341F                       		move.w	(sp)+,d2
00012EF6 4EF9 0000 8334             		jmp	(MvSonicOnPtfm2).l
00012EFC                            ; ===========================================================================
00012EFC                            
00012EFC                            loc_124DE:				; XREF: Obj63_Index
00012EFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012F00 0240 0003                  		andi.w	#3,d0
00012F04 6600                       		bne.s	loc_124FC
00012F06 7201                       		moveq	#1,d1
00012F08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012F0C 6700                       		beq.s	loc_124F2
00012F0E 4401                       		neg.b	d1
00012F10                            
00012F10                            loc_124F2:
00012F10 D328 001A                  		add.b	d1,$1A(a0)
00012F14 0228 0003 001A             		andi.b	#3,$1A(a0)
00012F1A                            
00012F1A                            loc_124FC:
00012F1A 588F                       		addq.l	#4,sp
00012F1C 6000 D1D6                  		bra.w	MarkObjGone
00012F20                            
00012F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F20                            
00012F20                            
00012F20                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012F20 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012F24 6700                       		beq.s	loc_12520
00012F26 4A28 003B                  		tst.b	$3B(a0)
00012F2A 6600                       		bne.s	loc_12520
00012F2C 117C 0001 003B             		move.b	#1,$3B(a0)
00012F32 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012F38 4428 003A                  		neg.b	$3A(a0)
00012F3C 6000                       		bra.s	loc_12534
00012F3E                            ; ===========================================================================
00012F3E                            
00012F3E                            loc_12520:
00012F3E 3028 0008                  		move.w	8(a0),d0
00012F42 B068 0034                  		cmp.w	$34(a0),d0
00012F46 6600                       		bne.s	loc_1256A
00012F48 3028 000C                  		move.w	$C(a0),d0
00012F4C B068 0036                  		cmp.w	$36(a0),d0
00012F50 6600                       		bne.s	loc_1256A
00012F52                            
00012F52                            loc_12534:
00012F52 7200                       		moveq	#0,d1
00012F54 1228 0038                  		move.b	$38(a0),d1
00012F58 D228 003A                  		add.b	$3A(a0),d1
00012F5C B228 0039                  		cmp.b	$39(a0),d1
00012F60 6500                       		bcs.s	loc_12552
00012F62 1001                       		move.b	d1,d0
00012F64 7200                       		moveq	#0,d1
00012F66 4A00                       		tst.b	d0
00012F68 6A00                       		bpl.s	loc_12552
00012F6A 1228 0039                  		move.b	$39(a0),d1
00012F6E 5901                       		subq.b	#4,d1
00012F70                            
00012F70                            loc_12552:
00012F70 1141 0038                  		move.b	d1,$38(a0)
00012F74 2268 003C                  		movea.l	$3C(a0),a1
00012F78 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012F7E 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012F84 6100 0000                  		bsr.w	Obj63_ChangeDir
00012F88                            
00012F88                            loc_1256A:
00012F88 6100 B09C                  		bsr.w	SpeedToPos
00012F8C 4E75                       		rts	
00012F8E                            ; End of function sub_12502
00012F8E                            
00012F8E                            
00012F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012F8E                            
00012F8E                            
00012F8E                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012F8E 7000                       		moveq	#0,d0
00012F90 343C FF00                  		move.w	#-$100,d2
00012F94 3028 0008                  		move.w	8(a0),d0
00012F98 9068 0034                  		sub.w	$34(a0),d0
00012F9C 6400                       		bcc.s	loc_12584
00012F9E 4440                       		neg.w	d0
00012FA0 4442                       		neg.w	d2
00012FA2                            
00012FA2                            loc_12584:
00012FA2 7200                       		moveq	#0,d1
00012FA4 363C FF00                  		move.w	#-$100,d3
00012FA8 3228 000C                  		move.w	$C(a0),d1
00012FAC 9268 0036                  		sub.w	$36(a0),d1
00012FB0 6400                       		bcc.s	loc_12598
00012FB2 4441                       		neg.w	d1
00012FB4 4443                       		neg.w	d3
00012FB6                            
00012FB6                            loc_12598:
00012FB6 B240                       		cmp.w	d0,d1
00012FB8 6500                       		bcs.s	loc_125C2
00012FBA 3028 0008                  		move.w	8(a0),d0
00012FBE 9068 0034                  		sub.w	$34(a0),d0
00012FC2 6700                       		beq.s	loc_125AE
00012FC4 48C0                       		ext.l	d0
00012FC6 E180                       		asl.l	#8,d0
00012FC8 81C1                       		divs.w	d1,d0
00012FCA 4440                       		neg.w	d0
00012FCC                            
00012FCC                            loc_125AE:
00012FCC 3140 0010                  		move.w	d0,$10(a0)
00012FD0 3143 0012                  		move.w	d3,$12(a0)
00012FD4 4840                       		swap	d0
00012FD6 3140 000A                  		move.w	d0,$A(a0)
00012FDA 4268 000E                  		clr.w	$E(a0)
00012FDE 4E75                       		rts	
00012FE0                            ; ===========================================================================
00012FE0                            
00012FE0                            loc_125C2:				; XREF: Obj63_ChangeDir
00012FE0 3228 000C                  		move.w	$C(a0),d1
00012FE4 9268 0036                  		sub.w	$36(a0),d1
00012FE8 6700                       		beq.s	loc_125D4
00012FEA 48C1                       		ext.l	d1
00012FEC E181                       		asl.l	#8,d1
00012FEE 83C0                       		divs.w	d0,d1
00012FF0 4441                       		neg.w	d1
00012FF2                            
00012FF2                            loc_125D4:
00012FF2 3141 0012                  		move.w	d1,$12(a0)
00012FF6 3142 0010                  		move.w	d2,$10(a0)
00012FFA 4841                       		swap	d1
00012FFC 3141 000E                  		move.w	d1,$E(a0)
00013000 4268 000A                  		clr.w	$A(a0)
00013004 4E75                       		rts	
00013006                            ; End of function Obj63_ChangeDir
00013006                            
00013006                            ; ===========================================================================
00013006 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00013008 0000                       		dc.w word_12610-Obj63_Data
0001300A 0000                       		dc.w word_12628-Obj63_Data
0001300C 0000                       		dc.w word_1263C-Obj63_Data
0001300E 0000                       		dc.w word_12650-Obj63_Data
00013010 0000                       		dc.w word_12668-Obj63_Data
00013012 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013022 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
0001302E 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
0001303E 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00013046 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
0001305A 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
0001306E 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00013086 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
0001309A                            
0001309A                            ; ---------------------------------------------------------------------------
0001309A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001309A                            ; ---------------------------------------------------------------------------
0001309A                            Map_obj63:
0001309A                            	include "_maps\obj63.asm"
0001309A                            ; ---------------------------------------------------------------------------
0001309A                            ; Sprite mappings - platforms on a conveyor belt (LZ)
0001309A                            ; ---------------------------------------------------------------------------
0001309A 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
0001309E 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000130A2 0000                       		dc.w byte_1269E-Map_obj63
000130A4 01                         byte_12686:	dc.b 1
000130A5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000130AA 01                         byte_1268C:	dc.b 1
000130AB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000130B0 01                         byte_12692:	dc.b 1
000130B1 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000130B6 01                         byte_12698:	dc.b 1
000130B7 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000130BC 01                         byte_1269E:	dc.b 1
000130BD F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000130C2                            		even
000130C2                            		even
000130C2                            
000130C2                            ; ===========================================================================
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            ; Object 64 - bubbles (LZ)
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            
000130C2                            Obj64:					; XREF: Obj_Index
000130C2 7000                       		moveq	#0,d0
000130C4 1028 0024                  		move.b	$24(a0),d0
000130C8 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000130CC 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000130D0                            ; ===========================================================================
000130D0 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000130D2 0000                       		dc.w Obj64_Animate-Obj64_Index
000130D4 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000130D6 0000                       		dc.w Obj64_Display2-Obj64_Index
000130D8 0000                       		dc.w Obj64_Delete3-Obj64_Index
000130DA 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000130DC                            ; ===========================================================================
000130DC                            
000130DC                            Obj64_Main:				; XREF: Obj64_Index
000130DC 5428 0024                  		addq.b	#2,$24(a0)
000130E0 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000130E8 317C 8348 0002             		move.w	#$8348,2(a0)
000130EE 117C 0084 0001             		move.b	#$84,1(a0)
000130F4 117C 0010 0019             		move.b	#$10,$19(a0)
000130FA 117C 0001 0018             		move.b	#1,$18(a0)
00013100 1028 0028                  		move.b	$28(a0),d0	; get object type
00013104 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00013106 5028 0024                  		addq.b	#8,$24(a0)
0001310A 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
0001310E 1140 0032                  		move.b	d0,$32(a0)
00013112 1140 0033                  		move.b	d0,$33(a0)
00013116 117C 0006 001C             		move.b	#6,$1C(a0)
0001311C 6000 0000                  		bra.w	Obj64_BblMaker
00013120                            ; ===========================================================================
00013120                            
00013120                            Obj64_Bubble:				; XREF: Obj64_Main
00013120 1140 001C                  		move.b	d0,$1C(a0)
00013124 3168 0008 0030             		move.w	8(a0),$30(a0)
0001312A 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013130 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00013136 1140 0026                  		move.b	d0,$26(a0)
0001313A                            
0001313A                            Obj64_Animate:				; XREF: Obj64_Index
0001313A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013140 4EB9 0000 B09A             		jsr	AnimateSprite
00013146 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0001314C 6600                       		bne.s	Obj64_ChkWater
0001314E 117C 0001 002E             		move.b	#1,$2E(a0)
00013154                            
00013154                            Obj64_ChkWater:				; XREF: Obj64_Index
00013154 3038 F646                  		move.w	($FFFFF646).w,d0
00013158 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
0001315C 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
0001315E                            
0001315E                            Obj64_Burst:				; XREF: Obj64_Wobble
0001315E 117C 0006 0024             		move.b	#6,$24(a0)
00013164 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00013168 6000 0000                  		bra.w	Obj64_Display2
0001316C                            ; ===========================================================================
0001316C                            
0001316C                            Obj64_Wobble:				; XREF: Obj64_ChkWater
0001316C 1028 0026                  		move.b	$26(a0),d0
00013170 5228 0026                  		addq.b	#1,$26(a0)
00013174 0240 007F                  		andi.w	#$7F,d0
00013178 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001317E 1031 0000                  		move.b	(a1,d0.w),d0
00013182 4880                       		ext.w	d0
00013184 D068 0030                  		add.w	$30(a0),d0
00013188 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
0001318C 4A28 002E                  		tst.b	$2E(a0)
00013190 6700                       		beq.s	Obj64_Display
00013192 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00013196 6700                       		beq.s	Obj64_Display	; if not, branch
00013198                            
00013198 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
0001319C 303C 00AD                  		move.w	#$AD,d0
000131A0 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000131A6 43F8 D000                  		lea	($FFFFD000).w,a1
000131AA 4269 0010                  		clr.w	$10(a1)
000131AE 4269 0012                  		clr.w	$12(a1)
000131B2 4269 0014                  		clr.w	$14(a1)
000131B6 137C 0015 001C             		move.b	#$15,$1C(a1)
000131BC 337C 0023 003E             		move.w	#$23,$3E(a1)
000131C2 137C 0000 003C             		move.b	#0,$3C(a1)
000131C8 08A9 0005 0022             		bclr	#5,$22(a1)
000131CE 08A9 0004 0022             		bclr	#4,$22(a1)
000131D4 0829 0002 0022             		btst	#2,$22(a1)
000131DA 6700 FF82                  		beq.w	Obj64_Burst
000131DE 08A9 0002 0022             		bclr	#2,$22(a1)
000131E4 137C 0013 0016             		move.b	#$13,$16(a1)
000131EA 137C 0009 0017             		move.b	#9,$17(a1)
000131F0 5B69 000C                  		subq.w	#5,$C(a1)
000131F4 6000 FF68                  		bra.w	Obj64_Burst
000131F8                            ; ===========================================================================
000131F8                            
000131F8                            Obj64_Display:				; XREF: Obj64_Wobble
000131F8 6100 AE2C                  		bsr.w	SpeedToPos
000131FC 4A28 0001                  		tst.b	1(a0)
00013200 6A00                       		bpl.s	Obj64_Delete
00013202 4EFA AE48                  		jmp	DisplaySprite
00013206                            ; ===========================================================================
00013206                            
00013206                            Obj64_Delete:
00013206 4EFA AE80                  		jmp	DeleteObject
0001320A                            ; ===========================================================================
0001320A                            
0001320A                            Obj64_Display2:				; XREF: Obj64_Index
0001320A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013210 4EB9 0000 B09A             		jsr	AnimateSprite
00013216 4A28 0001                  		tst.b	1(a0)
0001321A 6A00                       		bpl.s	Obj64_Delete2
0001321C 4EFA AE2E                  		jmp	DisplaySprite
00013220                            ; ===========================================================================
00013220                            
00013220                            Obj64_Delete2:
00013220 4EFA AE66                  		jmp	DeleteObject
00013224                            ; ===========================================================================
00013224                            
00013224                            Obj64_Delete3:				; XREF: Obj64_Index
00013224 6000 AE62                  		bra.w	DeleteObject
00013228                            ; ===========================================================================
00013228                            
00013228                            Obj64_BblMaker:				; XREF: Obj64_Index
00013228 4A68 0036                  		tst.w	$36(a0)
0001322C 6600                       		bne.s	loc_12874
0001322E 3038 F646                  		move.w	($FFFFF646).w,d0
00013232 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013236 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001323A 4A28 0001                  		tst.b	1(a0)
0001323E 6A00 0000                  		bpl.w	Obj64_ChkDel
00013242 5368 0038                  		subq.w	#1,$38(a0)
00013246 6A00 0000                  		bpl.w	loc_12914
0001324A 317C 0001 0036             		move.w	#1,$36(a0)
00013250                            
00013250                            loc_1283A:
00013250 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00013256 3200                       		move.w	d0,d1
00013258 0240 0007                  		andi.w	#7,d0
0001325C 0C40 0006                  		cmpi.w	#6,d0
00013260 64EE                       		bcc.s	loc_1283A
00013262                            
00013262 1140 0034                  		move.b	d0,$34(a0)
00013266 0241 000C                  		andi.w	#$C,d1
0001326A 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013270 D2C1                       		adda.w	d1,a1
00013272 2149 003C                  		move.l	a1,$3C(a0)
00013276 5328 0032                  		subq.b	#1,$32(a0)
0001327A 6A00                       		bpl.s	loc_12872
0001327C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013282 08E8 0007 0036             		bset	#7,$36(a0)
00013288                            
00013288                            loc_12872:
00013288 6000                       		bra.s	loc_1287C
0001328A                            ; ===========================================================================
0001328A                            
0001328A                            loc_12874:				; XREF: Obj64_BblMaker
0001328A 5368 0038                  		subq.w	#1,$38(a0)
0001328E 6A00 0000                  		bpl.w	loc_12914
00013292                            
00013292                            loc_1287C:
00013292 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00013298 0240 001F                  		andi.w	#$1F,d0
0001329C 3140 0038                  		move.w	d0,$38(a0)
000132A0 6100 B230                  		bsr.w	SingleObjLoad
000132A4 6600                       		bne.s	loc_128F8
000132A6 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000132AA 3368 0008 0008             		move.w	8(a0),8(a1)
000132B0 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000132B6 0240 000F                  		andi.w	#$F,d0
000132BA 5140                       		subq.w	#8,d0
000132BC D169 0008                  		add.w	d0,8(a1)
000132C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000132C6 7000                       		moveq	#0,d0
000132C8 1028 0034                  		move.b	$34(a0),d0
000132CC 2468 003C                  		movea.l	$3C(a0),a2
000132D0 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000132D6 0828 0007 0036             		btst	#7,$36(a0)
000132DC 6700                       		beq.s	loc_128F8
000132DE 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000132E4 0240 0003                  		andi.w	#3,d0
000132E8 6600                       		bne.s	loc_128E4
000132EA 08E8 0006 0036             		bset	#6,$36(a0)
000132F0 6600                       		bne.s	loc_128F8
000132F2 137C 0002 0028             		move.b	#2,$28(a1)
000132F8                            
000132F8                            loc_128E4:
000132F8 4A28 0034                  		tst.b	$34(a0)
000132FC 6600                       		bne.s	loc_128F8
000132FE 08E8 0006 0036             		bset	#6,$36(a0)
00013304 6600                       		bne.s	loc_128F8
00013306 137C 0002 0028             		move.b	#2,$28(a1)
0001330C                            
0001330C                            loc_128F8:
0001330C 5328 0034                  		subq.b	#1,$34(a0)
00013310 6A00                       		bpl.s	loc_12914
00013312 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00013318 0240 007F                  		andi.w	#$7F,d0
0001331C 0640 0080                  		addi.w	#$80,d0
00013320 D168 0038                  		add.w	d0,$38(a0)
00013324 4268 0036                  		clr.w	$36(a0)
00013328                            
00013328                            loc_12914:
00013328 43F9 0000 0000             		lea	(Ani_obj64).l,a1
0001332E 4EB9 0000 B09A             		jsr	AnimateSprite
00013334                            
00013334                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013334 3028 0008                  		move.w	8(a0),d0
00013338 0240 FF80                  		andi.w	#$FF80,d0
0001333C 3238 F700                  		move.w	($FFFFF700).w,d1
00013340 0441 0080                  		subi.w	#$80,d1
00013344 0241 FF80                  		andi.w	#$FF80,d1
00013348 9041                       		sub.w	d1,d0
0001334A 0C40 0280                  		cmpi.w	#$280,d0
0001334E 6200 AD38                  		bhi.w	DeleteObject
00013352 3038 F646                  		move.w	($FFFFF646).w,d0
00013356 B068 000C                  		cmp.w	$C(a0),d0
0001335A 6500 ACF0                  		bcs.w	DisplaySprite
0001335E 4E75                       		rts	
00013360                            ; ===========================================================================
00013360                            ; bubble production sequence
00013360                            
00013360                            ; 0 = small bubble, 1 =	large bubble
00013360                            
00013360 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013372                            
00013372                            ; ===========================================================================
00013372                            
00013372                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013372 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013376 6B00                       		bmi.s	loc_12998
00013378 43F8 D000                  		lea	($FFFFD000).w,a1
0001337C 3029 0008                  		move.w	8(a1),d0
00013380 3228 0008                  		move.w	8(a0),d1
00013384 0441 0010                  		subi.w	#$10,d1
00013388 B240                       		cmp.w	d0,d1
0001338A 6400                       		bcc.s	loc_12998
0001338C 0641 0020                  		addi.w	#$20,d1
00013390 B240                       		cmp.w	d0,d1
00013392 6500                       		bcs.s	loc_12998
00013394 3029 000C                  		move.w	$C(a1),d0
00013398 3228 000C                  		move.w	$C(a0),d1
0001339C B240                       		cmp.w	d0,d1
0001339E 6400                       		bcc.s	loc_12998
000133A0 0641 0010                  		addi.w	#$10,d1
000133A4 B240                       		cmp.w	d0,d1
000133A6 6500                       		bcs.s	loc_12998
000133A8 7001                       		moveq	#1,d0
000133AA 4E75                       		rts	
000133AC                            ; ===========================================================================
000133AC                            
000133AC                            loc_12998:
000133AC 7000                       		moveq	#0,d0
000133AE 4E75                       		rts	
000133B0                            ; ===========================================================================
000133B0                            Ani_obj64:
000133B0                            	include "_anim\obj64.asm"
000133B0                            ; ---------------------------------------------------------------------------
000133B0                            ; Animation script - bubbles (LZ)
000133B0                            ; ---------------------------------------------------------------------------
000133B0 0000                       		dc.w byte_129AA-Ani_obj64
000133B2 0000                       		dc.w byte_129B0-Ani_obj64
000133B4 0000                       		dc.w byte_129B6-Ani_obj64
000133B6 0000                       		dc.w byte_129BE-Ani_obj64
000133B8 0000                       		dc.w byte_129BE-Ani_obj64
000133BA 0000                       		dc.w byte_129C0-Ani_obj64
000133BC 0000                       		dc.w byte_129C6-Ani_obj64
000133BE 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000133C4 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000133CA 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000133D2 04FC                       byte_129BE:	dc.b 4,	$FC
000133D4 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000133DA 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000133E0 00                         		even
000133E0 00                         		even
000133E0                            
000133E0                            ; ---------------------------------------------------------------------------
000133E0                            ; Sprite mappings - bubbles (LZ)
000133E0                            ; ---------------------------------------------------------------------------
000133E0                            Map_obj64:
000133E0                            	include "_maps\obj64.asm"
000133E0                            ; ---------------------------------------------------------------------------
000133E0                            ; Sprite mappings - bubbles (LZ)
000133E0                            ; ---------------------------------------------------------------------------
000133E0 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000133E4 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000133E8 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000133EC 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
000133F0 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
000133F4 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
000133F8 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
000133FC 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013400 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013404 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013408 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001340C 0000                       		dc.w byte_12A9C-Map_obj64
0001340E 01                         byte_129FA:	dc.b 1
0001340F FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013414 01                         byte_12A00:	dc.b 1
00013415 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001341A 01                         byte_12A06:	dc.b 1
0001341B FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013420 01                         byte_12A0C:	dc.b 1
00013421 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013426 01                         byte_12A12:	dc.b 1
00013427 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001342C 01                         byte_12A18:	dc.b 1
0001342D F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013432 01                         byte_12A1E:	dc.b 1
00013433 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013438 04                         byte_12A24:	dc.b 4
00013439 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
0001343E F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013443 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013448 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001344D 04                         byte_12A39:	dc.b 4
0001344E F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013453 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013458 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001345D 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013462 01                         byte_12A4E:	dc.b 1
00013463 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013468 01                         byte_12A54:	dc.b 1
00013469 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001346E 01                         byte_12A5A:	dc.b 1
0001346F F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013474 01                         byte_12A60:	dc.b 1
00013475 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001347A 01                         byte_12A66:	dc.b 1
0001347B F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013480 01                         byte_12A6C:	dc.b 1
00013481 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013486 01                         byte_12A72:	dc.b 1
00013487 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001348C 01                         byte_12A78:	dc.b 1
0001348D F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013492 01                         byte_12A7E:	dc.b 1
00013493 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013498 01                         byte_12A84:	dc.b 1
00013499 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001349E 01                         byte_12A8A:	dc.b 1
0001349F F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000134A4 01                         byte_12A90:	dc.b 1
000134A5 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000134AA 01                         byte_12A96:	dc.b 1
000134AB F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000134B0 00                         byte_12A9C:	dc.b 0
000134B2 00                         		even
000134B2 00                         		even
000134B2                            
000134B2                            ; ===========================================================================
000134B2                            ; ---------------------------------------------------------------------------
000134B2                            ; Object 65 - waterfalls (LZ)
000134B2                            ; ---------------------------------------------------------------------------
000134B2                            
000134B2                            Obj65:					; XREF: Obj_Index
000134B2 7000                       		moveq	#0,d0
000134B4 1028 0024                  		move.b	$24(a0),d0
000134B8 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000134BC 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000134C0                            ; ===========================================================================
000134C0 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000134C2 0000                       		dc.w Obj65_Animate-Obj65_Index
000134C4 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000134C6 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000134C8 0000                       		dc.w loc_12B36-Obj65_Index
000134CA                            ; ===========================================================================
000134CA                            
000134CA                            Obj65_Main:				; XREF: Obj65_Index
000134CA 5828 0024                  		addq.b	#4,$24(a0)
000134CE 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000134D6 317C 4259 0002             		move.w	#$4259,2(a0)
000134DC 0028 0004 0001             		ori.b	#4,1(a0)
000134E2 117C 0018 0019             		move.b	#$18,$19(a0)
000134E8 117C 0001 0018             		move.b	#1,$18(a0)
000134EE 1028 0028                  		move.b	$28(a0),d0	; get object type
000134F2 6A00                       		bpl.s	loc_12AE6
000134F4 08E8 0007 0002             		bset	#7,2(a0)
000134FA                            
000134FA                            loc_12AE6:
000134FA 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000134FE 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013502 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013506 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013508 4228 0018                  		clr.b	$18(a0)
0001350C 5528 0024                  		subq.b	#2,$24(a0)
00013510 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013516 6700                       		beq.s	loc_12B0A	; if not, branch
00013518 117C 0006 0024             		move.b	#6,$24(a0)
0001351E                            
0001351E                            loc_12B0A:
0001351E 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013524 6700                       		beq.s	Obj65_Animate	; if not, branch
00013526 117C 0008 0024             		move.b	#8,$24(a0)
0001352C                            
0001352C                            Obj65_Animate:				; XREF: Obj65_Index
0001352C 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013532 4EB9 0000 B09A             		jsr	AnimateSprite
00013538                            
00013538                            Obj65_ChkDel:				; XREF: Obj65_Index
00013538 6000 CBBA                  		bra.w	MarkObjGone
0001353C                            ; ===========================================================================
0001353C                            
0001353C                            Obj65_FixHeight:			; XREF: Obj65_Index
0001353C 3038 F646                  		move.w	($FFFFF646).w,d0
00013540 0440 0010                  		subi.w	#$10,d0
00013544 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013548 60E2                       		bra.s	Obj65_Animate
0001354A                            ; ===========================================================================
0001354A                            
0001354A                            loc_12B36:				; XREF: Obj65_Index
0001354A 08A8 0007 0002             		bclr	#7,2(a0)
00013550 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013556 6600                       		bne.s	Obj65_Animate2
00013558 08E8 0007 0002             		bset	#7,2(a0)
0001355E                            
0001355E                            Obj65_Animate2:
0001355E 60CC                       		bra.s	Obj65_Animate
00013560                            ; ===========================================================================
00013560                            Ani_obj65:
00013560                            	include "_anim\obj65.asm"
00013560                            ; ---------------------------------------------------------------------------
00013560                            ; Animation script - waterfall (LZ)
00013560                            ; ---------------------------------------------------------------------------
00013560 0000                       		dc.w byte_12B4E-Ani_obj65
00013562 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013568 00                         		even
00013568 00                         		even
00013568                            
00013568                            ; ---------------------------------------------------------------------------
00013568                            ; Sprite mappings - waterfalls (LZ)
00013568                            ; ---------------------------------------------------------------------------
00013568                            Map_obj65:
00013568                            	include "_maps\obj65.asm"
00013568                            ; ---------------------------------------------------------------------------
00013568                            ; Sprite mappings - waterfalls (LZ)
00013568                            ; ---------------------------------------------------------------------------
00013568 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001356C 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013570 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013574 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013578 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001357C 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013580 01                         byte_12B6C:	dc.b 1
00013581 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013586 02                         byte_12B72:	dc.b 2
00013587 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001358C 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013591 02                         byte_12B7D:	dc.b 2
00013592 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013597 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001359C 01                         byte_12B88:	dc.b 1
0001359D F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000135A2 02                         byte_12B8E:	dc.b 2
000135A3 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000135A8 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000135AD 01                         byte_12B99:	dc.b 1
000135AE F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000135B3 01                         byte_12B9F:	dc.b 1
000135B4 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000135B9 01                         byte_12BA5:	dc.b 1
000135BA F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000135BF 02                         byte_12BAB:	dc.b 2
000135C0 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000135C5 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000135CA 02                         byte_12BB6:	dc.b 2
000135CB F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000135D0 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000135D5 02                         byte_12BC1:	dc.b 2
000135D6 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000135DB F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000135E0 02                         byte_12BCC:	dc.b 2
000135E1 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000135E6 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000135EC 00                         		even
000135EC 00                         		even
000135EC                            
000135EC                            ; ===========================================================================
000135EC                            ; ---------------------------------------------------------------------------
000135EC                            ; Object 01 - Sonic
000135EC                            ; ---------------------------------------------------------------------------
000135EC                            
000135EC                            Obj01:					; XREF: Obj_Index
000135EC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000135F0 6700                       		beq.s	Obj01_Normal	; if not, branch
000135F2 4EF9 0000 0000             		jmp	DebugMode
000135F8                            ; ===========================================================================
000135F8                            
000135F8                            Obj01_Normal:
000135F8 7000                       		moveq	#0,d0
000135FA 1028 0024                  		move.b	$24(a0),d0
000135FE 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013602 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013606                            ; ===========================================================================
00013606 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013608 0000                       		dc.w Obj01_Control-Obj01_Index
0001360A 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001360C 0000                       		dc.w Obj01_Death-Obj01_Index
0001360E 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013610                            ; ===========================================================================
00013610                            
00013610                            Player_Maps:
00013610 0000 0000                  	dc.l	Map_Sonic
00013614 0000 0000                  	dc.l	Map_Sonic ; gronic
00013618 0000 0000                  	dc.l	Map_Sonic ; anakama
0001361C 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013620                            	; insert player mapping here
00013620                            	
00013620                            Obj01_Main:				; XREF: Obj01_Index
00013620 5428 0024                  		addq.b	#2,$24(a0)
00013624 117C 0013 0016             		move.b	#$13,$16(a0)
0001362A 117C 0009 0017             		move.b	#9,$17(a0)
00013630                            		
00013630 7000                       		moveq	#0,d0
00013632 1038 FFE8                  		move.b	(v_character),d0
00013636 E548                       		lsl.w	#2,d0
00013638 43FA FFD6                  		lea 	Player_Maps(pc),a1
0001363C 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013642                            		
00013642 317C 0780 0002             		move.w	#$780,2(a0)
00013648 117C 0002 0018             		move.b	#2,$18(a0)
0001364E 117C 0018 0019             		move.b	#$18,$19(a0)
00013654 117C 0004 0001             		move.b	#4,1(a0)
0001365A 31FC 0FFF F760             		move.w	#$FFF,($FFFFF760).w ; Sonic's top speed
00013660 31FC 000F F762             		move.w	#$F,($FFFFF762).w ; Sonic's acceleration
00013666 31FC 0AAA F764             		move.w	#$AAA,($FFFFF764).w ; Sonic's deceleration
0001366C                            
0001366C                            Obj01_Control:				; XREF: Obj01_Index
0001366C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013670 6700                       		beq.s	loc_12C58	; if not, branch
00013672 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013678 6700                       		beq.s	loc_12C58	; if not, branch
0001367A 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013680 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013684 4E75                       		rts	
00013686                            ; ===========================================================================
00013686                            
00013686                            loc_12C58:
00013686 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
0001368A 6600                       		bne.s	loc_12C64	; if yes, branch
0001368C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013692                            
00013692                            loc_12C64:
00013692 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013698 6600                       		bne.s	loc_12C7E	; if yes, branch
0001369A 7000                       		moveq	#0,d0
0001369C 1028 0022                  		move.b	$22(a0),d0
000136A0 0240 0006                  		andi.w	#6,d0
000136A4 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000136A8 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000136AC                            
000136AC                            loc_12C7E:
000136AC 6100                       		bsr.s	Sonic_Display
000136AE 6100 0000                  		bsr.w	Sonic_RecordPos
000136B2 6100 0000                  		bsr.w	Sonic_Water
000136B6 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000136BC 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000136C2 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000136C6 6700                       		beq.s	loc_12CA6
000136C8 4A28 001C                  		tst.b	$1C(a0)
000136CC 6600                       		bne.s	loc_12CA6
000136CE 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000136D4                            
000136D4                            loc_12CA6:
000136D4 6100 0000                  		bsr.w	Sonic_Animate
000136D8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000136DC 6B00                       		bmi.s	loc_12CB6
000136DE 4EB9 0000 0000             		jsr	TouchResponse
000136E4                            
000136E4                            loc_12CB6:
000136E4 6100 0000                  		bsr.w	Sonic_Loops
000136E8 6100 0000                  		bsr.w	LoadSonicDynPLC
000136EC 4E75                       		rts	
000136EE                            ; ===========================================================================
000136EE 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000136F0 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000136F2 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000136F4 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000136F6                            ; ---------------------------------------------------------------------------
000136F6                            ; Music	to play	after invincibility wears off
000136F6                            ; ---------------------------------------------------------------------------
000136F6                            ; ===========================================================================
000136F6                            
000136F6                            Sonic_Display:				; XREF: loc_12C7E
000136F6 3028 0030                  		move.w	$30(a0),d0
000136FA 6700                       		beq.s	Obj01_Display
000136FC 5368 0030                  		subq.w	#1,$30(a0)
00013700 E648                       		lsr.w	#3,d0
00013702 6400                       		bcc.s	Obj01_ChkInvin
00013704                            
00013704                            Obj01_Display:
00013704 4EBA A946                  		jsr	DisplaySprite
00013708                            
00013708                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013708                             
00013708                            Obj01_ChkInvin:
00013708 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001370C 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013710 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013714 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013718 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001371C 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013720 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013724 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013728 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001372E 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013732 7000                       		moveq	#0,d0
00013734 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013738                             
00013738 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001373E 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013740 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013746 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013748                             
00013748                            Obj01_GetBgm2:
00013748 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001374E 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013750 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013756 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013758                             
00013758                            Obj01_GetBgm3:
00013758 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001375E 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013760 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013766 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013768                             
00013768                            Obj01_GetBgm4:
00013768 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001376E 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013770 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013776                             
00013776                            Obj01_PlayMusic:
00013776 1031 0000                  		move.b	(a1,d0.w),d0
0001377A 4EB9 0000 1594             		jsr	(PlaySound).l	; play normal music
00013780                             
00013780                            ; NineKode ends here.
00013780                            
00013780                            Obj01_RmvInvin:
00013780 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013786                            
00013786                            Obj01_ChkShoes:
00013786 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
0001378A 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001378C 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013790 6700                       		beq.s	Obj01_ExitChk
00013792 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013796 6600                       		bne.s	Obj01_ExitChk
00013798 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001379E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000137A4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000137AA 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000137B0 303C 00E3                  		move.w	#$E3,d0
000137B4 4EF9 0000 1594             		jmp	(PlaySound).l	; run music at normal speed
000137BA                            ; ===========================================================================
000137BA                            
000137BA                            Obj01_ExitChk:
000137BA 4E75                       		rts	
000137BC                            
000137BC                            ; ---------------------------------------------------------------------------
000137BC                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000137BC                            ; ---------------------------------------------------------------------------
000137BC                            
000137BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137BC                            
000137BC                            
000137BC                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000137BC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000137C0 43F8 CB00                  		lea	($FFFFCB00).w,a1
000137C4 43F1 0000                  		lea	(a1,d0.w),a1
000137C8 32E8 0008                  		move.w	8(a0),(a1)+
000137CC 32E8 000C                  		move.w	$C(a0),(a1)+
000137D0 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000137D4 4E75                       		rts	
000137D6                            ; End of function Sonic_RecordPos
000137D6                            
000137D6                            ; ---------------------------------------------------------------------------
000137D6                            ; Subroutine for Sonic when he's underwater
000137D6                            ; ---------------------------------------------------------------------------
000137D6                            
000137D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137D6                            
000137D6                            
000137D6                            Sonic_Water:				; XREF: loc_12C7E
000137D6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000137DC 6700                       		beq.s	Obj01_InWater	; if yes, branch
000137DE                            
000137DE                            locret_12D80:
000137DE 4E75                       		rts	
000137E0                            ; ===========================================================================
000137E0                            
000137E0                            Obj01_InWater:
000137E0 3038 F646                  		move.w	($FFFFF646).w,d0
000137E4 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000137E8 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000137EA 08E8 0006 0022             		bset	#6,$22(a0)
000137F0 66EC                       		bne.s	locret_12D80
000137F2 6100 0000                  		bsr.w	ResumeMusic
000137F6 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000137FC 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013802 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013808 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001380E 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013814 E0E8 0010                  		asr	$10(a0)
00013818 E0E8 0012                  		asr	$12(a0)
0001381C E0E8 0012                  		asr	$12(a0)
00013820 67BC                       		beq.s	locret_12D80
00013822 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013828 303C 00AA                  		move.w	#$AA,d0
0001382C 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play splash sound
00013832                            ; ===========================================================================
00013832                            
00013832                            Obj01_OutWater:
00013832 08A8 0006 0022             		bclr	#6,$22(a0)
00013838 67A4                       		beq.s	locret_12D80
0001383A 6100 0000                  		bsr.w	ResumeMusic
0001383E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013844 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001384A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013850 E1E8 0012                  		asl	$12(a0)
00013854 6700 FF88                  		beq.w	locret_12D80
00013858 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001385E 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013864 6E00                       		bgt.s	loc_12E0E
00013866 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001386C                            
0001386C                            loc_12E0E:
0001386C 303C 00AA                  		move.w	#$AA,d0
00013870 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play splash sound
00013876                            ; End of function Sonic_Water
00013876                            
00013876                            ; ===========================================================================
00013876                            ; ---------------------------------------------------------------------------
00013876                            ; Modes	for controlling	Sonic
00013876                            ; ---------------------------------------------------------------------------
00013876                            
00013876                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013876 6100 0000                  		bsr.w	Sonic_Jump
0001387A 6100 0000                  		bsr.w	Sonic_SlopeResist
0001387E 6100 0000                  		bsr.w	Sonic_Move
00013882 6100 0000                  		bsr.w	Sonic_Roll
00013886 6100 0000                  		bsr.w	Sonic_LevelBound
0001388A 4EBA A79A                  		jsr	SpeedToPos
0001388E 6100 0000                  		bsr.w	Sonic_AnglePos
00013892 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013896 4E75                       		rts	
00013898                            ; ===========================================================================
00013898                            
00013898                            Obj01_MdJump:				; XREF: Obj01_Modes
00013898 6100 0000                  		bsr.w	Sonic_JumpHeight
0001389C 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000138A0 6100 0000                  		bsr.w	Sonic_LevelBound
000138A4 4EBA A70E                  		jsr	ObjectFall
000138A8 0828 0006 0022             		btst	#6,$22(a0)
000138AE 6700                       		beq.s	loc_12E5C
000138B0 0468 0028 0012             		subi.w	#$28,$12(a0)
000138B6                            
000138B6                            loc_12E5C:
000138B6 6100 0000                  		bsr.w	Sonic_JumpAngle
000138BA 6100 0000                  		bsr.w	Sonic_Floor
000138BE 4E75                       		rts	
000138C0                            ; ===========================================================================
000138C0                            
000138C0                            Obj01_MdRoll:				; XREF: Obj01_Modes
000138C0 6100 0000                  		bsr.w	Sonic_Jump
000138C4 6100 0000                  		bsr.w	Sonic_RollRepel
000138C8 6100 0000                  		bsr.w	Sonic_RollSpeed
000138CC 6100 0000                  		bsr.w	Sonic_LevelBound
000138D0 4EBA A754                  		jsr	SpeedToPos
000138D4 6100 0000                  		bsr.w	Sonic_AnglePos
000138D8 6100 0000                  		bsr.w	Sonic_SlopeRepel
000138DC 4E75                       		rts	
000138DE                            ; ===========================================================================
000138DE                            
000138DE                            Obj01_MdJump2:				; XREF: Obj01_Modes
000138DE 6100 0000                  		bsr.w	Sonic_JumpHeight
000138E2 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000138E6 6100 0000                  		bsr.w	Sonic_LevelBound
000138EA 6100 0000                  		bsr.w	Sonic_AirUnroll
000138EE 4EBA A6C4                  		jsr	ObjectFall
000138F2 0828 0006 0022             		btst	#6,$22(a0)
000138F8 6700                       		beq.s	loc_12EA6
000138FA 0468 0028 0012             		subi.w	#$28,$12(a0)
00013900                            
00013900                            loc_12EA6:
00013900 6100 0000                  		bsr.w	Sonic_JumpAngle
00013904 6100 0000                  		bsr.w	Sonic_Floor
00013908 4E75                       		rts	
0001390A                            ; ---------------------------------------------------------------------------
0001390A                            ; Subroutine to	make Sonic walk/run
0001390A                            ; ---------------------------------------------------------------------------
0001390A                            
0001390A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001390A                            
0001390A                            
0001390A                            Sonic_Move:				; XREF: Obj01_MdNormal
0001390A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001390E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013912 3838 F764                  		move.w	($FFFFF764).w,d4
00013916 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001391A 6600 0000                  		bne.w	loc_12FEE
0001391E 4A68 003E                  		tst.w	$3E(a0)
00013922 6600 0000                  		bne.w	Obj01_ResetScr
00013926 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001392C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001392E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013934 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013936 6100 0000                  		bsr.w	Sonic_MoveLeft
0001393A                            
0001393A                            Obj01_NotLeft:
0001393A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013940 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013942 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013948 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
0001394A 6100 0000                  		bsr.w	Sonic_MoveLeft
0001394E 6000                       		bra.s	Obj01_NotRight
00013950                            
00013950                            Obj01_MoveRight:
00013950 6100 0000                  		bsr.w	Sonic_MoveRight
00013954                            
00013954                            Obj01_NotRight:
00013954 1028 0026                  		move.b	$26(a0),d0
00013958 0600 0020                  		addi.b	#$20,d0
0001395C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013960 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013964 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013968 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001396C 08A8 0005 0022             		bclr	#5,$22(a0)
00013972 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013978 0828 0003 0022             		btst	#3,$22(a0)
0001397E 6700                       		beq.s	Sonic_Balance
00013980 7000                       		moveq	#0,d0
00013982 1028 003D                  		move.b	$3D(a0),d0
00013986 ED48                       		lsl.w	#6,d0
00013988 43F8 D000                  		lea	($FFFFD000).w,a1
0001398C 43F1 0000                  		lea	(a1,d0.w),a1
00013990 4A29 0022                  		tst.b	$22(a1)
00013994 6B00                       		bmi.s	Sonic_LookUp
00013996 7200                       		moveq	#0,d1
00013998 1229 0019                  		move.b	$19(a1),d1
0001399C 3401                       		move.w	d1,d2
0001399E D442                       		add.w	d2,d2
000139A0 5942                       		subq.w	#4,d2
000139A2 D268 0008                  		add.w	8(a0),d1
000139A6 9269 0008                  		sub.w	8(a1),d1
000139AA 0C41 0004                  		cmpi.w	#4,d1
000139AE 6D00                       		blt.s	loc_12F6A
000139B0 B242                       		cmp.w	d2,d1
000139B2 6C00                       		bge.s	loc_12F5A
000139B4 6000                       		bra.s	Sonic_LookUp
000139B6                            ; ===========================================================================
000139B6                            
000139B6                            Sonic_Balance:
000139B6 4EB9 0000 0000             		jsr	ObjHitFloor
000139BC 0C41 000C                  		cmpi.w	#$C,d1
000139C0 6D00                       		blt.s	Sonic_LookUp
000139C2 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000139C8 6600                       		bne.s	loc_12F62
000139CA                            
000139CA                            loc_12F5A:
000139CA 08A8 0000 0022             		bclr	#0,$22(a0)
000139D0 6000                       		bra.s	loc_12F70
000139D2                            ; ===========================================================================
000139D2                            
000139D2                            loc_12F62:
000139D2 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000139D8 6600                       		bne.s	Sonic_LookUp
000139DA                            
000139DA                            loc_12F6A:
000139DA 08E8 0000 0022             		bset	#0,$22(a0)
000139E0                            
000139E0                            loc_12F70:
000139E0 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000139E6 6000                       		bra.s	Obj01_ResetScr
000139E8                            ; ===========================================================================
000139E8                            
000139E8                            Sonic_LookUp:
000139E8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000139EE 6700                       		beq.s	Sonic_Duck	; if not, branch
000139F0 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000139F6 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000139FC 6700                       		beq.s	loc_12FC2
000139FE 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013A02 6000                       		bra.s	loc_12FC2
00013A04                            ; ===========================================================================
00013A04                            
00013A04                            Sonic_Duck:
00013A04 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013A0A 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013A0C 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013A12 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013A18 6700                       		beq.s	loc_12FC2
00013A1A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013A1E 6000                       		bra.s	loc_12FC2
00013A20                            ; ===========================================================================
00013A20                            
00013A20                            Obj01_ResetScr:
00013A20 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013A26 6700                       		beq.s	loc_12FC2	; if yes, branch
00013A28 6400                       		bcc.s	loc_12FBE
00013A2A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013A2E                            
00013A2E                            loc_12FBE:
00013A2E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013A32                            
00013A32                            loc_12FC2:
00013A32 1038 F602                  		move.b	($FFFFF602).w,d0
00013A36 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013A3A 6600                       		bne.s	loc_12FEE	; if yes, branch
00013A3C 3028 0014                  		move.w	$14(a0),d0
00013A40 6700                       		beq.s	loc_12FEE
00013A42 6B00                       		bmi.s	loc_12FE2
00013A44 9045                       		sub.w	d5,d0
00013A46 6400                       		bcc.s	loc_12FDC
00013A48 303C 0000                  		move.w	#0,d0
00013A4C                            
00013A4C                            loc_12FDC:
00013A4C 3140 0014                  		move.w	d0,$14(a0)
00013A50 6000                       		bra.s	loc_12FEE
00013A52                            ; ===========================================================================
00013A52                            
00013A52                            loc_12FE2:
00013A52 D045                       		add.w	d5,d0
00013A54 6400                       		bcc.s	loc_12FEA
00013A56 303C 0000                  		move.w	#0,d0
00013A5A                            
00013A5A                            loc_12FEA:
00013A5A 3140 0014                  		move.w	d0,$14(a0)
00013A5E                            
00013A5E                            loc_12FEE:
00013A5E 1028 0026                  		move.b	$26(a0),d0
00013A62 4EB9 0000 2D34             		jsr	(CalcSine).l
00013A68 C3E8 0014                  		muls.w	$14(a0),d1
00013A6C E081                       		asr.l	#8,d1
00013A6E 3141 0010                  		move.w	d1,$10(a0)
00013A72 C1E8 0014                  		muls.w	$14(a0),d0
00013A76 E080                       		asr.l	#8,d0
00013A78 3140 0012                  		move.w	d0,$12(a0)
00013A7C                            
00013A7C                            loc_1300C:
00013A7C 1028 0026                  		move.b	$26(a0),d0
00013A80 0600 0040                  		addi.b	#$40,d0
00013A84 6B00                       		bmi.s	locret_1307C
00013A86 123C 0040                  		move.b	#$40,d1
00013A8A 4A68 0014                  		tst.w	$14(a0)
00013A8E 6700                       		beq.s	locret_1307C
00013A90 6B00                       		bmi.s	loc_13024
00013A92 4441                       		neg.w	d1
00013A94                            
00013A94                            loc_13024:
00013A94 1028 0026                  		move.b	$26(a0),d0
00013A98 D001                       		add.b	d1,d0
00013A9A 3F00                       		move.w	d0,-(sp)
00013A9C 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013AA0 301F                       		move.w	(sp)+,d0
00013AA2 4A41                       		tst.w	d1
00013AA4 6A00                       		bpl.s	locret_1307C
00013AA6 E141                       		asl.w	#8,d1
00013AA8 0600 0020                  		addi.b	#$20,d0
00013AAC 0200 00C0                  		andi.b	#$C0,d0
00013AB0 6700                       		beq.s	loc_13078
00013AB2 0C00 0040                  		cmpi.b	#$40,d0
00013AB6 6700                       		beq.s	loc_13066
00013AB8 0C00 0080                  		cmpi.b	#$80,d0
00013ABC 6700                       		beq.s	loc_13060
00013ABE D368 0010                  		add.w	d1,$10(a0)
00013AC2 08E8 0005 0022             		bset	#5,$22(a0)
00013AC8 317C 0000 0014             		move.w	#0,$14(a0)
00013ACE 4E75                       		rts	
00013AD0                            ; ===========================================================================
00013AD0                            
00013AD0                            loc_13060:
00013AD0 9368 0012                  		sub.w	d1,$12(a0)
00013AD4 4E75                       		rts	
00013AD6                            ; ===========================================================================
00013AD6                            
00013AD6                            loc_13066:
00013AD6 9368 0010                  		sub.w	d1,$10(a0)
00013ADA 08E8 0005 0022             		bset	#5,$22(a0)
00013AE0 317C 0000 0014             		move.w	#0,$14(a0)
00013AE6 4E75                       		rts	
00013AE8                            ; ===========================================================================
00013AE8                            
00013AE8                            loc_13078:
00013AE8 D368 0012                  		add.w	d1,$12(a0)
00013AEC                            
00013AEC                            locret_1307C:
00013AEC 4E75                       		rts	
00013AEE                            ; End of function Sonic_Move
00013AEE                            
00013AEE                            
00013AEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AEE                            
00013AEE                            
00013AEE                            Sonic_MoveLeft:				; XREF: Sonic_Move
00013AEE 3028 0014                  		move.w	$14(a0),d0
00013AF2 6700                       		beq.s	loc_13086
00013AF4 6A00                       		bpl.s	loc_130B2
00013AF6                            
00013AF6                            loc_13086:
00013AF6 08E8 0000 0022             		bset	#0,$22(a0)
00013AFC 6600                       		bne.s	loc_1309A
00013AFE 08A8 0005 0022             		bclr	#5,$22(a0)
00013B04 117C 0001 001D             		move.b	#1,$1D(a0)
00013B0A                            
00013B0A                            loc_1309A:
00013B0A 9045                       		sub.w	d5,d0
00013B0C 3206                       		move.w	d6,d1
00013B0E 4441                       		neg.w	d1
00013B10 B041                       		cmp.w	d1,d0
00013B12 6E00                       		bgt.s	loc_130A6
00013B14 3001                       		move.w	d1,d0
00013B16                            
00013B16                            loc_130A6:
00013B16 3140 0014                  		move.w	d0,$14(a0)
00013B1A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B20 4E75                       		rts	
00013B22                            ; ===========================================================================
00013B22                            
00013B22                            loc_130B2:				; XREF: Sonic_MoveLeft
00013B22 9044                       		sub.w	d4,d0
00013B24 6400                       		bcc.s	loc_130BA
00013B26 303C FF80                  		move.w	#-$80,d0
00013B2A                            
00013B2A                            loc_130BA:
00013B2A 3140 0014                  		move.w	d0,$14(a0)
00013B2E 1028 0026                  		move.b	$26(a0),d0
00013B32 0600 0020                  		addi.b	#$20,d0
00013B36 0200 00C0                  		andi.b	#$C0,d0
00013B3A 6600                       		bne.s	locret_130E8
00013B3C 0C40 0400                  		cmpi.w	#$400,d0
00013B40 6D00                       		blt.s	locret_130E8
00013B42 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013B48 08A8 0000 0022             		bclr	#0,$22(a0)
00013B4E 303C 00A4                  		move.w	#$A4,d0
00013B52 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stopping sound
00013B58                            
00013B58                            locret_130E8:
00013B58 4E75                       		rts	
00013B5A                            ; End of function Sonic_MoveLeft
00013B5A                            
00013B5A                            
00013B5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B5A                            
00013B5A                            
00013B5A                            Sonic_MoveRight:			; XREF: Sonic_Move
00013B5A 3028 0014                  		move.w	$14(a0),d0
00013B5E 6B00                       		bmi.s	loc_13118
00013B60 08A8 0000 0022             		bclr	#0,$22(a0)
00013B66 6700                       		beq.s	loc_13104
00013B68 08A8 0005 0022             		bclr	#5,$22(a0)
00013B6E 117C 0001 001D             		move.b	#1,$1D(a0)
00013B74                            
00013B74                            loc_13104:
00013B74 D045                       		add.w	d5,d0
00013B76 B046                       		cmp.w	d6,d0
00013B78 6D00                       		blt.s	loc_1310C
00013B7A 3006                       		move.w	d6,d0
00013B7C                            
00013B7C                            loc_1310C:
00013B7C 3140 0014                  		move.w	d0,$14(a0)
00013B80 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013B86 4E75                       		rts	
00013B88                            ; ===========================================================================
00013B88                            
00013B88                            loc_13118:				; XREF: Sonic_MoveRight
00013B88 D044                       		add.w	d4,d0
00013B8A 6400                       		bcc.s	loc_13120
00013B8C 303C 0080                  		move.w	#$80,d0
00013B90                            
00013B90                            loc_13120:
00013B90 3140 0014                  		move.w	d0,$14(a0)
00013B94 1028 0026                  		move.b	$26(a0),d0
00013B98 0600 0020                  		addi.b	#$20,d0
00013B9C 0200 00C0                  		andi.b	#$C0,d0
00013BA0 6600                       		bne.s	locret_1314E
00013BA2 0C40 FC00                  		cmpi.w	#-$400,d0
00013BA6 6E00                       		bgt.s	locret_1314E
00013BA8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013BAE 08E8 0000 0022             		bset	#0,$22(a0)
00013BB4 303C 00A4                  		move.w	#$A4,d0
00013BB8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play stopping sound
00013BBE                            
00013BBE                            locret_1314E:
00013BBE 4E75                       		rts	
00013BC0                            ; End of function Sonic_MoveRight
00013BC0                            
00013BC0                            ; ---------------------------------------------------------------------------
00013BC0                            ; Subroutine to	change Sonic's speed as he rolls
00013BC0                            ; ---------------------------------------------------------------------------
00013BC0                            
00013BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BC0                            
00013BC0                            
00013BC0                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013BC0 3C38 F760                  		move.w	($FFFFF760).w,d6
00013BC4 E346                       		asl.w	#1,d6
00013BC6 3A38 F762                  		move.w	($FFFFF762).w,d5
00013BCA E245                       		asr.w	#1,d5
00013BCC 3838 F764                  		move.w	($FFFFF764).w,d4
00013BD0 E444                       		asr.w	#2,d4
00013BD2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013BD6 6600 0000                  		bne.w	loc_131CC
00013BDA 4A68 003E                  		tst.w	$3E(a0)
00013BDE 6600                       		bne.s	loc_13188
00013BE0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013BE6 6700                       		beq.s	loc_1317C	; if not, branch
00013BE8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013BEE 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013BF0 6100 0000                  		bsr.w	Sonic_RollLeft
00013BF4                            
00013BF4                            loc_1317C:
00013BF4 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013BFA 6700                       		beq.s	loc_13188	; if not, branch
00013BFC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013C02 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013C04 6100 0000                  		bsr.w	Sonic_RollLeft
00013C08 6000                       		bra.s	loc_13188
00013C0A                            
00013C0A                            SonicRS_RollRight:
00013C0A 6100 0000                  		bsr.w	Sonic_RollRight
00013C0E                            
00013C0E                            loc_13188:
00013C0E 3028 0014                  		move.w	$14(a0),d0
00013C12 6700                       		beq.s	loc_131AA
00013C14 6B00                       		bmi.s	loc_1319E
00013C16 9045                       		sub.w	d5,d0
00013C18 6400                       		bcc.s	loc_13198
00013C1A 303C 0000                  		move.w	#0,d0
00013C1E                            
00013C1E                            loc_13198:
00013C1E 3140 0014                  		move.w	d0,$14(a0)
00013C22 6000                       		bra.s	loc_131AA
00013C24                            ; ===========================================================================
00013C24                            
00013C24                            loc_1319E:				; XREF: Sonic_RollSpeed
00013C24 D045                       		add.w	d5,d0
00013C26 6400                       		bcc.s	loc_131A6
00013C28 303C 0000                  		move.w	#0,d0
00013C2C                            
00013C2C                            loc_131A6:
00013C2C 3140 0014                  		move.w	d0,$14(a0)
00013C30                            
00013C30                            loc_131AA:
00013C30 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013C34 6600                       		bne.s	loc_131CC	; if yes, branch
00013C36 08A8 0002 0022             		bclr	#2,$22(a0)
00013C3C 117C 0013 0016             		move.b	#$13,$16(a0)
00013C42 117C 0009 0017             		move.b	#9,$17(a0)
00013C48 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013C4E 5B68 000C                  		subq.w	#5,$C(a0)
00013C52                            
00013C52                            loc_131CC:
00013C52 1028 0026                  		move.b	$26(a0),d0
00013C56 4EB9 0000 2D34             		jsr	(CalcSine).l
00013C5C C1E8 0014                  		muls.w	$14(a0),d0
00013C60 E080                       		asr.l	#8,d0
00013C62 3140 0012                  		move.w	d0,$12(a0)
00013C66 C3E8 0014                  		muls.w	$14(a0),d1
00013C6A E081                       		asr.l	#8,d1
00013C6C 0C41 1000                  		cmpi.w	#$1000,d1
00013C70 6F00                       		ble.s	loc_131F0
00013C72 323C 1000                  		move.w	#$1000,d1
00013C76                            
00013C76                            loc_131F0:
00013C76 0C41 F000                  		cmpi.w	#-$1000,d1
00013C7A 6C00                       		bge.s	loc_131FA
00013C7C 323C F000                  		move.w	#-$1000,d1
00013C80                            
00013C80                            loc_131FA:
00013C80 3141 0010                  		move.w	d1,$10(a0)
00013C84 6000 FDF6                  		bra.w	loc_1300C
00013C88                            ; End of function Sonic_RollSpeed
00013C88                            
00013C88                            
00013C88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C88                            
00013C88                            
00013C88                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013C88 3028 0014                  		move.w	$14(a0),d0
00013C8C 6700                       		beq.s	loc_1320A
00013C8E 6A00                       		bpl.s	loc_13218
00013C90                            
00013C90                            loc_1320A:
00013C90 08E8 0000 0022             		bset	#0,$22(a0)
00013C96 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C9C 4E75                       		rts	
00013C9E                            ; ===========================================================================
00013C9E                            
00013C9E                            loc_13218:
00013C9E 9044                       		sub.w	d4,d0
00013CA0 6400                       		bcc.s	loc_13220
00013CA2 303C FF80                  		move.w	#-$80,d0
00013CA6                            
00013CA6                            loc_13220:
00013CA6 3140 0014                  		move.w	d0,$14(a0)
00013CAA 4E75                       		rts	
00013CAC                            ; End of function Sonic_RollLeft
00013CAC                            
00013CAC                            
00013CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CAC                            
00013CAC                            
00013CAC                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013CAC 3028 0014                  		move.w	$14(a0),d0
00013CB0 6B00                       		bmi.s	loc_1323A
00013CB2 08A8 0000 0022             		bclr	#0,$22(a0)
00013CB8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CBE 4E75                       		rts	
00013CC0                            ; ===========================================================================
00013CC0                            
00013CC0                            loc_1323A:
00013CC0 D044                       		add.w	d4,d0
00013CC2 6400                       		bcc.s	loc_13242
00013CC4 303C 0080                  		move.w	#$80,d0
00013CC8                            
00013CC8                            loc_13242:
00013CC8 3140 0014                  		move.w	d0,$14(a0)
00013CCC 4E75                       		rts	
00013CCE                            ; End of function Sonic_RollRight
00013CCE                            
00013CCE                            Sonic_AirUnroll:
00013CCE                            		
00013CCE 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013CD2 6600                       		bne.s	@timer
00013CD4 1038 F605                  		move.b	($FFFFF605).w,d0
00013CD8 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013CDC 6700                       		beq.s	@end	; if not, branch
00013CDE 08A8 0002 0022             		bclr	#2,$22(a0)
00013CE4 117C 0013 0016             		move.b	#$13,$16(a0)
00013CEA 117C 0009 0017             		move.b	#9,$17(a0)
00013CF0 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013CF6 303C 00A5                  		move.w	#$A5,d0
00013CFA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play fart sound
00013D00 2028 0010                  		move.l	$10(a0),d0
00013D04 D080                       		add.l	d0,d0
00013D06 2140 0010                  		move.l	d0,$10(a0)
00013D0A 5B68 000C                  		subq.w	#5,$C(a0)
00013D0E                            	@end:
00013D0E 4E75                       		rts
00013D10                            	@timer:
00013D10 5328 003A                  		subq.b	#1,$3A(a0)
00013D14 4E75                       		rts
00013D16                            
00013D16                            ; ---------------------------------------------------------------------------
00013D16                            ; Subroutine to	change Sonic's direction while jumping
00013D16                            ; ---------------------------------------------------------------------------
00013D16                            
00013D16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D16                            
00013D16                            
00013D16                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D16 3C38 F760                  		move.w	($FFFFF760).w,d6
00013D1A 3A38 F762                  		move.w	($FFFFF762).w,d5
00013D1E E345                       		asl.w	#1,d5
00013D20 0828 0004 0022             		btst	#4,$22(a0)
00013D26 6600                       		bne.s	Obj01_ResetScr2
00013D28 3028 0010                  		move.w	$10(a0),d0
00013D2C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013D32 6700                       		beq.s	loc_13278	; if not, branch
00013D34 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D3A 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013D3C 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D40 6E00                       		bgt.s	loc_13278
00013D42 3001                       		move.w	d1,d0
00013D44                            
00013D44                            loc_13278:
00013D44 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013D4A 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013D4C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013D52 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013D54 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013D58 6E00                       		bgt.s	Obj01_JumpMove
00013D5A 3001                       		move.w	d1,d0
00013D5C 6000                       		bra.s	Obj01_JumpMove
00013D5E                            
00013D5E                            SonicCJD_JumpLeft:
00013D5E 08E8 0000 0022             		bset	#0,$22(a0)
00013D64 9045                       		sub.w	d5,d0
00013D66 3206                       		move.w	d6,d1
00013D68 4441                       		neg.w	d1
00013D6A B041                       		cmp.w	d1,d0
00013D6C                            		; bgt.s	loc_13278
00013D6C                            		; move.w	d1,d0
00013D6C 4E75                       		rts
00013D6E                            
00013D6E                            SonicCJD_JumpRight:
00013D6E 08A8 0000 0022             		bclr	#0,$22(a0)
00013D74 D045                       		add.w	d5,d0
00013D76 B046                       		cmp.w	d6,d0
00013D78 6D00                       		blt.s	Obj01_JumpMove
00013D7A 3006                       		move.w	d6,d0
00013D7C                            
00013D7C                            Obj01_JumpMove:
00013D7C 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013D80                            
00013D80                            Obj01_ResetScr2:
00013D80 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013D86 6700                       		beq.s	loc_132A4	; if yes, branch
00013D88 6400                       		bcc.s	loc_132A0
00013D8A 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013D8E                            
00013D8E                            loc_132A0:
00013D8E 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013D92                            
00013D92                            loc_132A4:
00013D92 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013D98 6500                       		bcs.s	locret_132D2	; if yes, branch
00013D9A 3028 0010                  		move.w	$10(a0),d0
00013D9E 3200                       		move.w	d0,d1
00013DA0 EA41                       		asr.w	#5,d1
00013DA2 6700                       		beq.s	locret_132D2
00013DA4 6B00                       		bmi.s	loc_132C6
00013DA6 9041                       		sub.w	d1,d0
00013DA8 6400                       		bcc.s	loc_132C0
00013DAA 303C 0000                  		move.w	#0,d0
00013DAE                            
00013DAE                            loc_132C0:
00013DAE 3140 0010                  		move.w	d0,$10(a0)
00013DB2 4E75                       		rts	
00013DB4                            ; ===========================================================================
00013DB4                            
00013DB4                            loc_132C6:
00013DB4 9041                       		sub.w	d1,d0
00013DB6 6500                       		bcs.s	loc_132CE
00013DB8 303C 0000                  		move.w	#0,d0
00013DBC                            
00013DBC                            loc_132CE:
00013DBC 3140 0010                  		move.w	d0,$10(a0)
00013DC0                            
00013DC0                            locret_132D2:
00013DC0 4E75                       		rts	
00013DC2                            ; End of function Sonic_ChgJumpDir
00013DC2                            
00013DC2                            ; ===========================================================================
00013DC2                            ; ---------------------------------------------------------------------------
00013DC2                            ; Unused subroutine to squash Sonic
00013DC2                            ; ---------------------------------------------------------------------------
00013DC2 1028 0026                  		move.b	$26(a0),d0
00013DC6 0600 0020                  		addi.b	#$20,d0
00013DCA 0200 00C0                  		andi.b	#$C0,d0
00013DCE 6600                       		bne.s	locret_13302
00013DD0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DD4 4A41                       		tst.w	d1
00013DD6 6A00                       		bpl.s	locret_13302
00013DD8 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013DDE 317C 0000 0010             		move.w	#0,$10(a0)
00013DE4 317C 0000 0012             		move.w	#0,$12(a0)
00013DEA 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013DF0                            
00013DF0                            locret_13302:
00013DF0 4E75                       		rts	
00013DF2                            ; ---------------------------------------------------------------------------
00013DF2                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013DF2                            ; ---------------------------------------------------------------------------
00013DF2                            
00013DF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DF2                            
00013DF2                            
00013DF2                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013DF2 2228 0008                  		move.l	8(a0),d1
00013DF6 3028 0010                  		move.w	$10(a0),d0
00013DFA 48C0                       		ext.l	d0
00013DFC E180                       		asl.l	#8,d0
00013DFE D280                       		add.l	d0,d1
00013E00 4841                       		swap	d1
00013E02 3038 F728                  		move.w	($FFFFF728).w,d0
00013E06 0640 0010                  		addi.w	#$10,d0
00013E0A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013E0C 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013E0E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013E12 0640 0128                  		addi.w	#$128,d0
00013E16 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013E1A 6600                       		bne.s	loc_13332
00013E1C 0640 0040                  		addi.w	#$40,d0
00013E20                            
00013E20                            loc_13332:
00013E20 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013E22 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013E24                            
00013E24                            loc_13336:
00013E24 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E28 0640 00E0                  		addi.w	#$E0,d0
00013E2C B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013E30 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013E32 4E75                       		rts	
00013E34                            ; ===========================================================================
00013E34                            
00013E34                            Boundary_Bottom:
00013E34 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013E3A 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013E3E 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013E44 6500 0000                  		bcs.w	KillSonic
00013E48 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013E4C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013E52 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013E58 4E75                       		rts	
00013E5A                            ; ===========================================================================
00013E5A                            
00013E5A                            Boundary_Sides:
00013E5A 3140 0008                  		move.w	d0,8(a0)
00013E5E 317C 0000 000A             		move.w	#0,$A(a0)
00013E64 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013E6A 317C 0000 0014             		move.w	#0,$14(a0)
00013E70 60B2                       		bra.s	loc_13336
00013E72                            ; End of function Sonic_LevelBound
00013E72                            
00013E72                            ; ---------------------------------------------------------------------------
00013E72                            ; Subroutine allowing Sonic to roll when he's moving
00013E72                            ; ---------------------------------------------------------------------------
00013E72                            
00013E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E72                            
00013E72                            
00013E72                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013E72 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013E76 6600                       		bne.s	Obj01_NoRoll
00013E78 3028 0014                  		move.w	$14(a0),d0
00013E7C 6A00                       		bpl.s	loc_13392
00013E7E 4440                       		neg.w	d0
00013E80                            
00013E80                            loc_13392:
00013E80 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013E84 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013E86 1038 F602                  		move.b	($FFFFF602).w,d0
00013E8A 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013E8E 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013E90 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013E96 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013E98                            
00013E98                            Obj01_NoRoll:
00013E98 4E75                       		rts	
00013E9A                            ; ===========================================================================
00013E9A                            
00013E9A                            Obj01_ChkRoll:
00013E9A 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013EA0 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013EA2 4E75                       		rts	
00013EA4                            ; ===========================================================================
00013EA4                            
00013EA4                            Obj01_DoRoll:
00013EA4 08E8 0002 0022             		bset	#2,$22(a0)
00013EAA 117C 000E 0016             		move.b	#$E,$16(a0)
00013EB0 117C 0007 0017             		move.b	#7,$17(a0)
00013EB6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013EBC 5A68 000C                  		addq.w	#5,$C(a0)
00013EC0 303C 00BE                  		move.w	#$BE,d0
00013EC4 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rolling sound
00013ECA 4A68 0014                  		tst.w	$14(a0)
00013ECE 6600                       		bne.s	locret_133E8
00013ED0 317C 0200 0014             		move.w	#$200,$14(a0)
00013ED6                            
00013ED6                            locret_133E8:
00013ED6 4E75                       		rts	
00013ED8                            ; End of function Sonic_Roll
00013ED8                            
00013ED8                            ; ---------------------------------------------------------------------------
00013ED8                            ; Subroutine allowing Sonic to jump
00013ED8                            ; ---------------------------------------------------------------------------
00013ED8                            
00013ED8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ED8                            
00013ED8                            
00013ED8                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013ED8 1038 F603                  		move.b	($FFFFF603).w,d0
00013EDC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013EE0 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013EE4 7000                       		moveq	#0,d0
00013EE6 1028 0026                  		move.b	$26(a0),d0
00013EEA 0600 0080                  		addi.b	#$80,d0
00013EEE 6100 0000                  		bsr.w	sub_14D48
00013EF2 0C41 0006                  		cmpi.w	#6,d1
00013EF6 6D00 0000                  		blt.w	locret_1348E
00013EFA 343C 0680                  		move.w	#$680,d2
00013EFE 0828 0006 0022             		btst	#6,$22(a0)
00013F04 6700                       		beq.s	loc_1341C
00013F06 343C 0380                  		move.w	#$380,d2
00013F0A                            
00013F0A                            loc_1341C:
00013F0A 7000                       		moveq	#0,d0
00013F0C 1028 0026                  		move.b	$26(a0),d0
00013F10 0400 0040                  		subi.b	#$40,d0
00013F14 4EB9 0000 2D34             		jsr	(CalcSine).l
00013F1A C3C2                       		muls.w	d2,d1
00013F1C E081                       		asr.l	#8,d1
00013F1E D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013F22 C1C2                       		muls.w	d2,d0
00013F24 E080                       		asr.l	#8,d0
00013F26 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013F2A 08E8 0001 0022             		bset	#1,$22(a0)
00013F30 08A8 0005 0022             		bclr	#5,$22(a0)
00013F36 588F                       		addq.l	#4,sp
00013F38 117C 0001 003C             		move.b	#1,$3C(a0)
00013F3E 4228 0038                  		clr.b	$38(a0)
00013F42 303C 00A0                  		move.w	#$A0,d0
00013F46 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play jumping sound
00013F4C 117C 0013 0016             		move.b	#$13,$16(a0)
00013F52 117C 0009 0017             		move.b	#9,$17(a0)
00013F58 0828 0002 0022             		btst	#2,$22(a0)
00013F5E 6600                       		bne.s	loc_13490
00013F60 117C 000E 0016             		move.b	#$E,$16(a0)
00013F66 117C 0007 0017             		move.b	#7,$17(a0)
00013F6C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013F72 08E8 0002 0022             		bset	#2,$22(a0)
00013F78 5A68 000C                  		addq.w	#5,$C(a0)
00013F7C 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013F82                            
00013F82                            locret_1348E:
00013F82 4E75                       		rts	
00013F84                            ; ===========================================================================
00013F84                            
00013F84                            loc_13490:
00013F84 08E8 0004 0022             		bset	#4,$22(a0)
00013F8A 4E75                       		rts	
00013F8C                            ; End of function Sonic_Jump
00013F8C                            
00013F8C                            
00013F8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F8C                            
00013F8C                            
00013F8C                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013F8C 4A28 003C                  		tst.b	$3C(a0)
00013F90 6700                       		beq.s	loc_134C4
00013F92 323C FC00                  		move.w	#-$400,d1
00013F96 0828 0006 0022             		btst	#6,$22(a0)
00013F9C 6700                       		beq.s	loc_134AE
00013F9E 323C FE00                  		move.w	#-$200,d1
00013FA2                            
00013FA2                            loc_134AE:
00013FA2 B268 0012                  		cmp.w	$12(a0),d1
00013FA6 6F00                       		ble.s	locret_134C2
00013FA8 1038 F602                  		move.b	($FFFFF602).w,d0
00013FAC 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013FB0 6600                       		bne.s	locret_134C2	; if yes, branch
00013FB2 3141 0012                  		move.w	d1,$12(a0)
00013FB6                            
00013FB6                            locret_134C2:
00013FB6 4E75                       		rts	
00013FB8                            ; ===========================================================================
00013FB8                            
00013FB8                            loc_134C4:
00013FB8 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013FBE 6C00                       		bge.s	locret_134D2
00013FC0 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013FC6                            
00013FC6                            locret_134D2:
00013FC6 4E75                       		rts	
00013FC8                            ; End of function Sonic_JumpHeight
00013FC8                            
00013FC8                            ; ---------------------------------------------------------------------------
00013FC8                            ; Subroutine to	slow Sonic walking up a	slope
00013FC8                            ; ---------------------------------------------------------------------------
00013FC8                            
00013FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FC8                            
00013FC8                            
00013FC8                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013FC8 1028 0026                  		move.b	$26(a0),d0
00013FCC 0600 0060                  		addi.b	#$60,d0
00013FD0 0C00 00C0                  		cmpi.b	#$C0,d0
00013FD4 6400                       		bcc.s	locret_13508
00013FD6 1028 0026                  		move.b	$26(a0),d0
00013FDA 4EB9 0000 2D34             		jsr	(CalcSine).l
00013FE0 C1FC 0020                  		muls.w	#$20,d0
00013FE4 E080                       		asr.l	#8,d0
00013FE6 4A68 0014                  		tst.w	$14(a0)
00013FEA 6700                       		beq.s	locret_13508
00013FEC 6B00                       		bmi.s	loc_13504
00013FEE 4A40                       		tst.w	d0
00013FF0 6700                       		beq.s	locret_13502
00013FF2 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013FF6                            
00013FF6                            locret_13502:
00013FF6 4E75                       		rts	
00013FF8                            ; ===========================================================================
00013FF8                            
00013FF8                            loc_13504:
00013FF8 D168 0014                  		add.w	d0,$14(a0)
00013FFC                            
00013FFC                            locret_13508:
00013FFC 4E75                       		rts	
00013FFE                            ; End of function Sonic_SlopeResist
00013FFE                            
00013FFE                            ; ---------------------------------------------------------------------------
00013FFE                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013FFE                            ; ---------------------------------------------------------------------------
00013FFE                            
00013FFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FFE                            
00013FFE                            
00013FFE                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013FFE 1028 0026                  		move.b	$26(a0),d0
00014002 0600 0060                  		addi.b	#$60,d0
00014006 0C00 00C0                  		cmpi.b	#-$40,d0
0001400A 6400                       		bcc.s	locret_13544
0001400C 1028 0026                  		move.b	$26(a0),d0
00014010 4EB9 0000 2D34             		jsr	(CalcSine).l
00014016 C1FC 0050                  		muls.w	#$50,d0
0001401A E080                       		asr.l	#8,d0
0001401C 4A68 0014                  		tst.w	$14(a0)
00014020 6B00                       		bmi.s	loc_1353A
00014022 4A40                       		tst.w	d0
00014024 6A00                       		bpl.s	loc_13534
00014026 E480                       		asr.l	#2,d0
00014028                            
00014028                            loc_13534:
00014028 D168 0014                  		add.w	d0,$14(a0)
0001402C 4E75                       		rts	
0001402E                            ; ===========================================================================
0001402E                            
0001402E                            loc_1353A:
0001402E 4A40                       		tst.w	d0
00014030 6B00                       		bmi.s	loc_13540
00014032 E480                       		asr.l	#2,d0
00014034                            
00014034                            loc_13540:
00014034 D168 0014                  		add.w	d0,$14(a0)
00014038                            
00014038                            locret_13544:
00014038 4E75                       		rts	
0001403A                            ; End of function Sonic_RollRepel
0001403A                            
0001403A                            ; ---------------------------------------------------------------------------
0001403A                            ; Subroutine to	push Sonic down	a slope
0001403A                            ; ---------------------------------------------------------------------------
0001403A                            
0001403A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001403A                            
0001403A                            
0001403A                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
0001403A 4E71                       		nop	
0001403C 4A28 0038                  		tst.b	$38(a0)
00014040 6600                       		bne.s	locret_13580
00014042 4A68 003E                  		tst.w	$3E(a0)
00014046 6600                       		bne.s	loc_13582
00014048 1028 0026                  		move.b	$26(a0),d0
0001404C 0600 0020                  		addi.b	#$20,d0
00014050 0200 00C0                  		andi.b	#$C0,d0
00014054 6700                       		beq.s	locret_13580
00014056 3028 0014                  		move.w	$14(a0),d0
0001405A 6A00                       		bpl.s	loc_1356A
0001405C 4440                       		neg.w	d0
0001405E                            
0001405E                            loc_1356A:
0001405E 0C40 0280                  		cmpi.w	#$280,d0
00014062 6400                       		bcc.s	locret_13580
00014064 4268 0014                  		clr.w	$14(a0)
00014068 08E8 0001 0022             		bset	#1,$22(a0)
0001406E 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014074                            
00014074                            locret_13580:
00014074 4E75                       		rts	
00014076                            ; ===========================================================================
00014076                            
00014076                            loc_13582:
00014076 5368 003E                  		subq.w	#1,$3E(a0)
0001407A 4E75                       		rts	
0001407C                            ; End of function Sonic_SlopeRepel
0001407C                            
0001407C                            ; ---------------------------------------------------------------------------
0001407C                            ; Subroutine to	return Sonic's angle to 0 as he jumps
0001407C                            ; ---------------------------------------------------------------------------
0001407C                            
0001407C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001407C                            
0001407C                            
0001407C                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001407C 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014080 6700                       		beq.s	locret_135A2	; if already 0,	branch
00014082 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014084                            
00014084 5400                       		addq.b	#2,d0		; increase angle
00014086 6400                       		bcc.s	loc_13596
00014088 7000                       		moveq	#0,d0
0001408A                            
0001408A                            loc_13596:
0001408A 6000                       		bra.s	loc_1359E
0001408C                            ; ===========================================================================
0001408C                            
0001408C                            loc_13598:
0001408C 5500                       		subq.b	#2,d0		; decrease angle
0001408E 6400                       		bcc.s	loc_1359E
00014090 7000                       		moveq	#0,d0
00014092                            
00014092                            loc_1359E:
00014092 1140 0026                  		move.b	d0,$26(a0)
00014096                            
00014096                            locret_135A2:
00014096 4E75                       		rts	
00014098                            ; End of function Sonic_JumpAngle
00014098                            
00014098                            ; ---------------------------------------------------------------------------
00014098                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014098                            ; ---------------------------------------------------------------------------
00014098                            
00014098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014098                            
00014098                            
00014098                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014098 3228 0010                  		move.w	$10(a0),d1
0001409C 3428 0012                  		move.w	$12(a0),d2
000140A0 4EB9 0000 3002             		jsr	(CalcAngle).l
000140A6 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000140AA 0400 0020                  		subi.b	#$20,d0
000140AE 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000140B2 0200 00C0                  		andi.b	#$C0,d0
000140B6 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000140BA 0C00 0040                  		cmpi.b	#$40,d0
000140BE 6700 0000                  		beq.w	loc_13680
000140C2 0C00 0080                  		cmpi.b	#$80,d0
000140C6 6700 0000                  		beq.w	loc_136E2
000140CA 0C00 00C0                  		cmpi.b	#-$40,d0
000140CE 6700 0000                  		beq.w	loc_1373E
000140D2 6100 0000                  		bsr.w	Sonic_HitWall
000140D6 4A41                       		tst.w	d1
000140D8 6A00                       		bpl.s	loc_135F0
000140DA 9368 0008                  		sub.w	d1,8(a0)
000140DE 317C 0000 0010             		move.w	#0,$10(a0)
000140E4                            
000140E4                            loc_135F0:
000140E4 6100 0000                  		bsr.w	sub_14EB4
000140E8 4A41                       		tst.w	d1
000140EA 6A00                       		bpl.s	loc_13602
000140EC D368 0008                  		add.w	d1,8(a0)
000140F0 317C 0000 0010             		move.w	#0,$10(a0)
000140F6                            
000140F6                            loc_13602:
000140F6 6100 0000                  		bsr.w	Sonic_HitFloor
000140FA 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000140FE 4A41                       		tst.w	d1
00014100 6A00                       		bpl.s	locret_1367E
00014102 1428 0012                  		move.b	$12(a0),d2
00014106 5002                       		addq.b	#8,d2
00014108 4402                       		neg.b	d2
0001410A B202                       		cmp.b	d2,d1
0001410C 6C00                       		bge.s	loc_1361E
0001410E B002                       		cmp.b	d2,d0
00014110 6D00                       		blt.s	locret_1367E
00014112                            
00014112                            loc_1361E:
00014112 D368 000C                  		add.w	d1,$C(a0)
00014116 1143 0026                  		move.b	d3,$26(a0)
0001411A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001411E 117C 0000 001C             		move.b	#0,$1C(a0)
00014124 1003                       		move.b	d3,d0
00014126 0600 0020                  		addi.b	#$20,d0
0001412A 0200 0040                  		andi.b	#$40,d0
0001412E 6600                       		bne.s	loc_1365C
00014130 1003                       		move.b	d3,d0
00014132 0600 0010                  		addi.b	#$10,d0
00014136 0200 0020                  		andi.b	#$20,d0
0001413A 6700                       		beq.s	loc_1364E
0001413C E0E8 0012                  		asr	$12(a0)
00014140 6000                       		bra.s	loc_13670
00014142                            ; ===========================================================================
00014142                            
00014142                            loc_1364E:
00014142 317C 0000 0012             		move.w	#0,$12(a0)
00014148 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001414E 4E75                       		rts	
00014150                            ; ===========================================================================
00014150                            
00014150                            loc_1365C:
00014150 317C 0000 0010             		move.w	#0,$10(a0)
00014156 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
0001415C 6F00                       		ble.s	loc_13670
0001415E 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014164                            
00014164                            loc_13670:
00014164 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001416A 4A03                       		tst.b	d3
0001416C 6A00                       		bpl.s	locret_1367E
0001416E 4468 0014                  		neg.w	$14(a0)
00014172                            
00014172                            locret_1367E:
00014172 4E75                       		rts	
00014174                            ; ===========================================================================
00014174                            
00014174                            loc_13680:
00014174 6100 0000                  		bsr.w	Sonic_HitWall
00014178 4A41                       		tst.w	d1
0001417A 6A00                       		bpl.s	loc_1369A
0001417C 9368 0008                  		sub.w	d1,8(a0)
00014180 317C 0000 0010             		move.w	#0,$10(a0)
00014186 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001418C 4E75                       		rts	
0001418E                            ; ===========================================================================
0001418E                            
0001418E                            loc_1369A:
0001418E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014192 4A41                       		tst.w	d1
00014194 6A00                       		bpl.s	loc_136B4
00014196 9368 000C                  		sub.w	d1,$C(a0)
0001419A 4A68 0012                  		tst.w	$12(a0)
0001419E 6A00                       		bpl.s	locret_136B2
000141A0 317C 0000 0012             		move.w	#0,$12(a0)
000141A6                            
000141A6                            locret_136B2:
000141A6 4E75                       		rts	
000141A8                            ; ===========================================================================
000141A8                            
000141A8                            loc_136B4:
000141A8 4A68 0012                  		tst.w	$12(a0)
000141AC 6B00                       		bmi.s	locret_136E0
000141AE 6100 0000                  		bsr.w	Sonic_HitFloor
000141B2 4A41                       		tst.w	d1
000141B4 6A00                       		bpl.s	locret_136E0
000141B6 D368 000C                  		add.w	d1,$C(a0)
000141BA 1143 0026                  		move.b	d3,$26(a0)
000141BE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000141C2 117C 0000 001C             		move.b	#0,$1C(a0)
000141C8 317C 0000 0012             		move.w	#0,$12(a0)
000141CE 3168 0010 0014             		move.w	$10(a0),$14(a0)
000141D4                            
000141D4                            locret_136E0:
000141D4 4E75                       		rts	
000141D6                            ; ===========================================================================
000141D6                            
000141D6                            loc_136E2:
000141D6 6100 0000                  		bsr.w	Sonic_HitWall
000141DA 4A41                       		tst.w	d1
000141DC 6A00                       		bpl.s	loc_136F4
000141DE 9368 0008                  		sub.w	d1,8(a0)
000141E2 317C 0000 0010             		move.w	#0,$10(a0)
000141E8                            
000141E8                            loc_136F4:
000141E8 6100 0000                  		bsr.w	sub_14EB4
000141EC 4A41                       		tst.w	d1
000141EE 6A00                       		bpl.s	loc_13706
000141F0 D368 0008                  		add.w	d1,8(a0)
000141F4 317C 0000 0010             		move.w	#0,$10(a0)
000141FA                            
000141FA                            loc_13706:
000141FA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000141FE 4A41                       		tst.w	d1
00014200 6A00                       		bpl.s	locret_1373C
00014202 9368 000C                  		sub.w	d1,$C(a0)
00014206 1003                       		move.b	d3,d0
00014208 0600 0020                  		addi.b	#$20,d0
0001420C 0200 0040                  		andi.b	#$40,d0
00014210 6600                       		bne.s	loc_13726
00014212 317C 0000 0012             		move.w	#0,$12(a0)
00014218 4E75                       		rts	
0001421A                            ; ===========================================================================
0001421A                            
0001421A                            loc_13726:
0001421A 1143 0026                  		move.b	d3,$26(a0)
0001421E 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014222 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014228 4A03                       		tst.b	d3
0001422A 6A00                       		bpl.s	locret_1373C
0001422C 4468 0014                  		neg.w	$14(a0)
00014230                            
00014230                            locret_1373C:
00014230 4E75                       		rts	
00014232                            ; ===========================================================================
00014232                            
00014232                            loc_1373E:
00014232 6100 0000                  		bsr.w	sub_14EB4
00014236 4A41                       		tst.w	d1
00014238 6A00                       		bpl.s	loc_13758
0001423A D368 0008                  		add.w	d1,8(a0)
0001423E 317C 0000 0010             		move.w	#0,$10(a0)
00014244 3168 0012 0014             		move.w	$12(a0),$14(a0)
0001424A 4E75                       		rts	
0001424C                            ; ===========================================================================
0001424C                            
0001424C                            loc_13758:
0001424C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00014250 4A41                       		tst.w	d1
00014252 6A00                       		bpl.s	loc_13772
00014254 9368 000C                  		sub.w	d1,$C(a0)
00014258 4A68 0012                  		tst.w	$12(a0)
0001425C 6A00                       		bpl.s	locret_13770
0001425E 317C 0000 0012             		move.w	#0,$12(a0)
00014264                            
00014264                            locret_13770:
00014264 4E75                       		rts	
00014266                            ; ===========================================================================
00014266                            
00014266                            loc_13772:
00014266 4A68 0012                  		tst.w	$12(a0)
0001426A 6B00                       		bmi.s	locret_1379E
0001426C 6100 0000                  		bsr.w	Sonic_HitFloor
00014270 4A41                       		tst.w	d1
00014272 6A00                       		bpl.s	locret_1379E
00014274 D368 000C                  		add.w	d1,$C(a0)
00014278 1143 0026                  		move.b	d3,$26(a0)
0001427C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014280 117C 0000 001C             		move.b	#0,$1C(a0)
00014286 317C 0000 0012             		move.w	#0,$12(a0)
0001428C 3168 0010 0014             		move.w	$10(a0),$14(a0)
00014292                            
00014292                            locret_1379E:
00014292 4E75                       		rts	
00014294                            ; End of function Sonic_Floor
00014294                            
00014294                            ; ---------------------------------------------------------------------------
00014294                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014294                            ; ---------------------------------------------------------------------------
00014294                            
00014294                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014294                            
00014294                            
00014294                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014294 0828 0004 0022             		btst	#4,$22(a0)
0001429A 6700                       		beq.s	loc_137AE
0001429C 4E71                       		nop	
0001429E 4E71                       		nop	
000142A0 4E71                       		nop	
000142A2                            
000142A2                            loc_137AE:
000142A2 08A8 0005 0022             		bclr	#5,$22(a0)
000142A8 08A8 0001 0022             		bclr	#1,$22(a0)
000142AE 08A8 0004 0022             		bclr	#4,$22(a0)
000142B4 0828 0002 0022             		btst	#2,$22(a0)
000142BA 6700                       		beq.s	loc_137E4
000142BC 08A8 0002 0022             		bclr	#2,$22(a0)
000142C2 117C 0013 0016             		move.b	#$13,$16(a0)
000142C8 117C 0009 0017             		move.b	#9,$17(a0)
000142CE 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000142D4 5B68 000C                  		subq.w	#5,$C(a0)
000142D8                            
000142D8                            loc_137E4:
000142D8 117C 0000 003C             		move.b	#0,$3C(a0)
000142DE 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000142E4 4E75                       		rts	
000142E6                            ; End of function Sonic_ResetOnFloor
000142E6                            
000142E6                            ; ===========================================================================
000142E6                            ; ---------------------------------------------------------------------------
000142E6                            ; Sonic	when he	gets hurt
000142E6                            ; ---------------------------------------------------------------------------
000142E6                            
000142E6                            Obj01_Hurt:				; XREF: Obj01_Index
000142E6 4EBA 9D3E                  		jsr	SpeedToPos
000142EA 0668 0030 0012             		addi.w	#$30,$12(a0)
000142F0 0828 0006 0022             		btst	#6,$22(a0)
000142F6 6700                       		beq.s	loc_1380C
000142F8 0468 0020 0012             		subi.w	#$20,$12(a0)
000142FE                            
000142FE                            loc_1380C:
000142FE 6100 0000                  		bsr.w	Sonic_HurtStop
00014302 6100 FAEE                  		bsr.w	Sonic_LevelBound
00014306 6100 F4B4                  		bsr.w	Sonic_RecordPos
0001430A 6100 0000                  		bsr.w	Sonic_Animate
0001430E 6100 0000                  		bsr.w	LoadSonicDynPLC
00014312 4EFA 9D38                  		jmp	DisplaySprite
00014316                            
00014316                            ; ---------------------------------------------------------------------------
00014316                            ; Subroutine to	stop Sonic falling after he's been hurt
00014316                            ; ---------------------------------------------------------------------------
00014316                            
00014316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014316                            
00014316                            
00014316                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014316 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001431A 0640 00E0                  		addi.w	#$E0,d0
0001431E B068 000C                  		cmp.w	$C(a0),d0
00014322 6500 0000                  		bcs.w	KillSonic
00014326 6100 FD70                  		bsr.w	Sonic_Floor
0001432A 0828 0001 0022             		btst	#1,$22(a0)
00014330 6600                       		bne.s	locret_13860
00014332 7000                       		moveq	#0,d0
00014334 3140 0012                  		move.w	d0,$12(a0)
00014338 3140 0010                  		move.w	d0,$10(a0)
0001433C 3140 0014                  		move.w	d0,$14(a0)
00014340 117C 0000 001C             		move.b	#0,$1C(a0)
00014346 5528 0024                  		subq.b	#2,$24(a0)
0001434A 317C 0078 0030             		move.w	#$78,$30(a0)
00014350                            
00014350                            locret_13860:
00014350 4E75                       		rts	
00014352                            ; End of function Sonic_HurtStop
00014352                            
00014352                            ; ===========================================================================
00014352                            ; ---------------------------------------------------------------------------
00014352                            ; Sonic	when he	dies
00014352                            ; ---------------------------------------------------------------------------
00014352                            
00014352                            Obj01_Death:				; XREF: Obj01_Index
00014352 6100 0000                  		bsr.w	GameOver
00014356 4EBA 9C5C                  		jsr	ObjectFall
0001435A 6100 F460                  		bsr.w	Sonic_RecordPos
0001435E 6100 0000                  		bsr.w	Sonic_Animate
00014362 6100 0000                  		bsr.w	LoadSonicDynPLC
00014366 4EFA 9CE4                  		jmp	DisplaySprite
0001436A                            
0001436A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001436A                            
0001436A                            
0001436A                            GameOver:				; XREF: Obj01_Death
0001436A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001436E 0640 0100                  		addi.w	#$100,d0
00014372 B068 000C                  		cmp.w	$C(a0),d0
00014376 6400 0000                  		bcc.w	locret_13900
0001437A 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014380 5428 0024                  		addq.b	#2,$24(a0)
00014384 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014388 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001438C 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014390 6600                       		bne.s	loc_138D4
00014392 317C 0000 003A             		move.w	#0,$3A(a0)
00014398 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001439E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000143A4 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000143AA 4238 FE1A                  		clr.b	($FFFFFE1A).w
000143AE                            
000143AE                            loc_138C2:
000143AE 303C 008F                  		move.w	#$8F,d0
000143B2 4EB9 0000 1594             		jsr	(PlaySound).l	; play game over music
000143B8 7003                       		moveq	#3,d0
000143BA 4EF9 0000 177E             		jmp	(LoadPLC).l	; load game over patterns
000143C0                            ; ===========================================================================
000143C0                            
000143C0                            loc_138D4:
000143C0 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000143C6 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000143CA 6700                       		beq.s	locret_13900	; if not, branch
000143CC 317C 0000 003A             		move.w	#0,$3A(a0)
000143D2 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000143D8 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000143DE 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000143E4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000143EA 60C2                       		bra.s	loc_138C2
000143EC                            ; ===========================================================================
000143EC                            
000143EC                            locret_13900:
000143EC 4E75                       		rts	
000143EE                            ; End of function GameOver
000143EE                            
000143EE                            ; ===========================================================================
000143EE                            ; ---------------------------------------------------------------------------
000143EE                            ; Sonic	when the level is restarted
000143EE                            ; ---------------------------------------------------------------------------
000143EE                            
000143EE                            Obj01_ResetLevel:			; XREF: Obj01_Index
000143EE 4A68 003A                  		tst.w	$3A(a0)
000143F2 6700                       		beq.s	locret_13914
000143F4 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000143F8 6600                       		bne.s	locret_13914
000143FA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014400                            
00014400                            locret_13914:
00014400 4E75                       		rts	
00014402                            
00014402                            ; ---------------------------------------------------------------------------
00014402                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014402                            ; ---------------------------------------------------------------------------
00014402                            
00014402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014402                            
00014402                            
00014402                            Sonic_Loops:				; XREF: Obj01_Control
00014402                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014402                            ;		beq.s	loc_13926	; if yes, branch
00014402                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014402                            ;		bne.w	locret_139C2	; if not, branch
00014402                            ;		this is commented out, please do more plane messups id love that
00014402                            ;loc_13926:
00014402 3028 000C                  		move.w	$C(a0),d0
00014406 E248                       		lsr.w	#1,d0
00014408 0240 0380                  		andi.w	#$380,d0
0001440C 1228 0008                  		move.b	8(a0),d1
00014410 0241 007F                  		andi.w	#$7F,d1
00014414 D041                       		add.w	d1,d0
00014416 43F8 A400                  		lea	($FFFFA400).w,a1
0001441A 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001441E B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014422 6700 FA76                  		beq.w	Obj01_ChkRoll
00014426 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
0001442A 6700 FA6E                  		beq.w	Obj01_ChkRoll
0001442E B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014432 6700                       		beq.s	loc_13976
00014434 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014438 6700                       		beq.s	loc_13966
0001443A 08A8 0006 0001             		bclr	#6,1(a0)
00014440 4E75                       		rts	
00014442                            ; ===========================================================================
00014442                            
00014442                            loc_13966:
00014442 0828 0001 0022             		btst	#1,$22(a0)
00014448 6700                       		beq.s	loc_13976
0001444A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014450 4E75                       		rts	
00014452                            ; ===========================================================================
00014452                            
00014452                            loc_13976:
00014452 3428 0008                  		move.w	8(a0),d2
00014456 0C02 002C                  		cmpi.b	#$2C,d2
0001445A 6400                       		bcc.s	loc_13988
0001445C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014462 4E75                       		rts	
00014464                            ; ===========================================================================
00014464                            
00014464                            loc_13988:
00014464 0C02 00E0                  		cmpi.b	#-$20,d2
00014468 6500                       		bcs.s	loc_13996
0001446A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014470 4E75                       		rts	
00014472                            ; ===========================================================================
00014472                            
00014472                            loc_13996:
00014472 0828 0006 0001             		btst	#6,1(a0)
00014478 6600                       		bne.s	loc_139B2
0001447A 1228 0026                  		move.b	$26(a0),d1
0001447E 6700                       		beq.s	locret_139C2
00014480 0C01 0080                  		cmpi.b	#-$80,d1
00014484 6200                       		bhi.s	locret_139C2
00014486 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001448C 4E75                       		rts	
0001448E                            ; ===========================================================================
0001448E                            
0001448E                            loc_139B2:
0001448E 1228 0026                  		move.b	$26(a0),d1
00014492 0C01 0080                  		cmpi.b	#-$80,d1
00014496 6300                       		bls.s	locret_139C2
00014498 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001449E                            
0001449E                            locret_139C2:
0001449E 4E75                       		rts	
000144A0                            ; End of function Sonic_Loops
000144A0                            
000144A0                            ; ---------------------------------------------------------------------------
000144A0                            ; Subroutine to	animate	Sonic's sprites
000144A0                            ; ---------------------------------------------------------------------------
000144A0                            
000144A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144A0                            
000144A0                            Player_Anim:
000144A0 0000 0000                  	dc.l	SonicAniData
000144A4 0000 0000                  	dc.l	SonicAniData ; gronic
000144A8 0000 0000                  	dc.l	SonicAniData ; anakama
000144AC 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
000144B0                            
000144B0                            	; Insert more animation data for other characters here
000144B0                            	
000144B0                            Sonic_Animate:				; XREF: Obj01_Control; et al
000144B0 7000                       			moveq	#0,d0
000144B2 1038 FFE8                  		move.b	(v_character),d0
000144B6 E548                       		lsl.w	#2,d0
000144B8 43FA FFE6                  		lea 	Player_Anim(pc),a1
000144BC                            		
000144BC 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000144C0                            	
000144C0 7000                       		moveq	#0,d0
000144C2 1028 001C                  		move.b	$1C(a0),d0
000144C6 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000144CA 6700                       		beq.s	SAnim_Do	; if not, branch
000144CC 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000144D0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000144D6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000144DC                            
000144DC                            SAnim_Do:
000144DC D040                       		add.w	d0,d0
000144DE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000144E2 1011                       		move.b	(a1),d0
000144E4 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
000144E6 1228 0022                  		move.b	$22(a0),d1
000144EA 0201 0001                  		andi.b	#1,d1
000144EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000144F4 8328 0001                  		or.b	d1,1(a0)
000144F8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000144FC 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000144FE 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014502                            
00014502                            SAnim_Do2:
00014502 7200                       		moveq	#0,d1
00014504 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014508 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001450C 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001450E                            
0001450E                            SAnim_Next:
0001450E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014512 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014516                            
00014516                            SAnim_Delay:
00014516 4E75                       		rts	
00014518                            ; ===========================================================================
00014518                            
00014518                            SAnim_End_FF:
00014518 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001451A 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001451C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014522 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014526 60E6                       		bra.s	SAnim_Next
00014528                            ; ===========================================================================
00014528                            
00014528                            SAnim_End_FE:
00014528 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001452A 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001452C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014530 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014534 9200                       		sub.b	d0,d1
00014536 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001453A 60D2                       		bra.s	SAnim_Next
0001453C                            ; ===========================================================================
0001453C                            
0001453C                            SAnim_End_FD:
0001453C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001453E 6600                       		bne.s	SAnim_End	; if not, branch
00014540 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014546                            
00014546                            SAnim_End:
00014546 4E75                       		rts	
00014548                            ; ===========================================================================
00014548                            
00014548                            SAnim_WalkRun:				; XREF: SAnim_Do
00014548 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001454C 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001454E 5200                       		addq.b	#1,d0		; is animation walking/running?
00014550 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014554 7200                       		moveq	#0,d1
00014556 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001455A 1428 0022                  		move.b	$22(a0),d2
0001455E 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014562 6600                       		bne.s	loc_13A70	; if yes, branch
00014564 4600                       		not.b	d0		; reverse angle
00014566                            
00014566                            loc_13A70:
00014566 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
0001456A 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
0001456C 7203                       		moveq	#3,d1
0001456E                            
0001456E                            loc_13A78:
0001456E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014574 B302                       		eor.b	d1,d2
00014576 8528 0001                  		or.b	d2,1(a0)
0001457A 0828 0005 0022             		btst	#5,$22(a0)
00014580 6600 0000                  		bne.w	SAnim_Push
00014584 E808                       		lsr.b	#4,d0		; divide angle by $10
00014586 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
0001458A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001458E 6A00                       		bpl.s	loc_13A9C
00014590 4442                       		neg.w	d2
00014592                            
00014592                            loc_13A9C:
00014592 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014598 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
0001459C 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001459E 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000145A4 1200                       		move.b	d0,d1
000145A6 E209                       		lsr.b	#1,d1
000145A8 D001                       		add.b	d1,d0
000145AA                            
000145AA                            loc_13AB4:
000145AA D000                       		add.b	d0,d0
000145AC 1600                       		move.b	d0,d3
000145AE 4442                       		neg.w	d2
000145B0 0642 0800                  		addi.w	#$800,d2
000145B4 6A00                       		bpl.s	loc_13AC2
000145B6 7400                       		moveq	#0,d2
000145B8                            
000145B8                            loc_13AC2:
000145B8 E04A                       		lsr.w	#8,d2
000145BA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145BE 6100 FF42                  		bsr.w	SAnim_Do2
000145C2 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000145C6 4E75                       		rts	
000145C8                            ; ===========================================================================
000145C8                            
000145C8                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000145C8 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000145CA 6600                       		bne.s	SAnim_Push	; if not, branch
000145CC 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000145D0 6A00                       		bpl.s	loc_13ADE
000145D2 4442                       		neg.w	d2
000145D4                            
000145D4                            loc_13ADE:
000145D4 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000145DA 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000145DE 6400                       		bcc.s	loc_13AF0	; if yes, branch
000145E0 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000145E6                            
000145E6                            loc_13AF0:
000145E6 4442                       		neg.w	d2
000145E8 0642 0400                  		addi.w	#$400,d2
000145EC 6A00                       		bpl.s	loc_13AFA
000145EE 7400                       		moveq	#0,d2
000145F0                            
000145F0                            loc_13AFA:
000145F0 E04A                       		lsr.w	#8,d2
000145F2 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000145F6 1228 0022                  		move.b	$22(a0),d1
000145FA 0201 0001                  		andi.b	#1,d1
000145FE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014604 8328 0001                  		or.b	d1,1(a0)
00014608 6000 FEF8                  		bra.w	SAnim_Do2
0001460C                            ; ===========================================================================
0001460C                            
0001460C                            SAnim_Push:				; XREF: SAnim_RollJump
0001460C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014610 6B00                       		bmi.s	loc_13B1E
00014612 4442                       		neg.w	d2
00014614                            
00014614                            loc_13B1E:
00014614 0642 0800                  		addi.w	#$800,d2
00014618 6A00                       		bpl.s	loc_13B26
0001461A 7400                       		moveq	#0,d2
0001461C                            
0001461C                            loc_13B26:
0001461C EC4A                       		lsr.w	#6,d2
0001461E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014622 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014628 1228 0022                  		move.b	$22(a0),d1
0001462C 0201 0001                  		andi.b	#1,d1
00014630 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014636 8328 0001                  		or.b	d1,1(a0)
0001463A 6000 FEC6                  		bra.w	SAnim_Do2
0001463E                            ; End of function Sonic_Animate
0001463E                            
0001463E                            ; ===========================================================================
0001463E                            SonicAniData:
0001463E                            	include "_anim\Sonic.asm"
0001463E                            ; ---------------------------------------------------------------------------
0001463E                            ; Animation script - Sonic
0001463E                            ; ---------------------------------------------------------------------------
0001463E 0000                       		dc.w SonAni_Walk-SonicAniData
00014640 0000                       		dc.w SonAni_Run-SonicAniData
00014642 0000                       		dc.w SonAni_Roll-SonicAniData
00014644 0000                       		dc.w SonAni_Roll2-SonicAniData
00014646 0000                       		dc.w SonAni_Push-SonicAniData
00014648 0000                       		dc.w SonAni_Wait-SonicAniData
0001464A 0000                       		dc.w SonAni_Balance-SonicAniData
0001464C 0000                       		dc.w SonAni_LookUp-SonicAniData
0001464E 0000                       		dc.w SonAni_Duck-SonicAniData
00014650 0000                       		dc.w SonAni_Warp1-SonicAniData
00014652 0000                       		dc.w SonAni_Warp2-SonicAniData
00014654 0000                       		dc.w SonAni_Warp3-SonicAniData
00014656 0000                       		dc.w SonAni_Warp4-SonicAniData
00014658 0000                       		dc.w SonAni_Stop-SonicAniData
0001465A 0000                       		dc.w SonAni_Float1-SonicAniData
0001465C 0000                       		dc.w SonAni_Float2-SonicAniData
0001465E 0000                       		dc.w SonAni_Spring-SonicAniData
00014660 0000                       		dc.w SonAni_LZHang-SonicAniData
00014662 0000                       		dc.w SonAni_Leap1-SonicAniData
00014664 0000                       		dc.w SonAni_Leap2-SonicAniData
00014666 0000                       		dc.w SonAni_Surf-SonicAniData
00014668 0000                       		dc.w SonAni_Bubble-SonicAniData
0001466A 0000                       		dc.w SonAni_Death1-SonicAniData
0001466C 0000                       		dc.w SonAni_Drown-SonicAniData
0001466E 0000                       		dc.w SonAni_Death2-SonicAniData
00014670 0000                       		dc.w SonAni_Shrink-SonicAniData
00014672 0000                       		dc.w SonAni_Hurt-SonicAniData
00014674 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014676 0000                       		dc.w SonAni_Blank-SonicAniData
00014678 0000                       		dc.w SonAni_Float3-SonicAniData
0001467A 0000                       		dc.w SonAni_Float4-SonicAniData
0001467C FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014686 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001468E FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014696 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001469E FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000146A6 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000146BC 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000146C0 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000146C4 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000146C8 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000146CC 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000146D0 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000146D4 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000146D8 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000146DC 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000146E0 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
000146E8 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
000146EC 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
000146F0 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000146F6 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000146FC 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014700 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014708 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
0001470C 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014710 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014714 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001471E 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014722 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014726 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001472A 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014732 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014736                            		even
00014736                            		even
00014736                            
00014736                            ; ---------------------------------------------------------------------------
00014736                            ; Sonic	pattern	loading	subroutine
00014736                            ; ---------------------------------------------------------------------------
00014736                            
00014736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014736                            Player_DPLC:
00014736 0000 0000                  	dc.l	SonicDynPLC
0001473A 0000 0000                  	dc.l	SonicDynPLC ; gronic
0001473E 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014742 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014746                            	; add pointers for player dplc here
00014746                            Player_Art:
00014746 0000 0000                  	dc.l	Art_Sonic
0001474A 0000 0000                  	dc.l	Art_Sonic ; gronic
0001474E 0000 0000                  	dc.l	Art_Sonic ; anakama
00014752 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014756                            	; add pointers for player art here
00014756                            
00014756                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014756 7000                       		moveq	#0,d0
00014758 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001475C B038 F766                  		cmp.b	($FFFFF766).w,d0
00014760 6700                       		beq.s	locret_13C96
00014762 11C0 F766                  		move.b	d0,($FFFFF766).w
00014766                            		
00014766 323C 0000                  		move.w	#0,d1
0001476A 1238 FFE8                  		move.b	(v_character),d1
0001476E E549                       		lsl.w	#2,d1
00014770 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014774                            
00014774 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014778                            		
00014778 D040                       		add.w	d0,d0
0001477A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001477E 7200                       		moveq	#0,d1
00014780 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014782 5301                       		subq.b	#1,d1
00014784 6B00                       		bmi.s	locret_13C96
00014786 47F8 C800                  		lea	($FFFFC800).w,a3
0001478A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014790                            
00014790                            SPLC_ReadEntry:
00014790 303C 0000                  		move.w	#0,d0
00014794 1038 FFE8                  		move.b	(v_character),d0
00014798 E548                       		lsl.w	#2,d0
0001479A 43FA FFAA                  		lea 	Player_Art(pc),a1
0001479E                            
0001479E 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000147A2                            
000147A2 7400                       		moveq	#0,d2
000147A4 141A                       		move.b	(a2)+,d2
000147A6 3002                       		move.w	d2,d0
000147A8 E808                       		lsr.b	#4,d0
000147AA E14A                       		lsl.w	#8,d2
000147AC 141A                       		move.b	(a2)+,d2
000147AE EB4A                       		lsl.w	#5,d2
000147B0 D3C2                       		adda.l	d2,a1
000147B2                            
000147B2                            SPLC_LoadTile:
000147B2 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000147B6 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000147BA 47EB 0020                  		lea	$20(a3),a3	; next tile
000147BE 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000147C2                            
000147C2 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000147C6                            
000147C6                            locret_13C96:
000147C6 4E75                       		rts	
000147C8                            ; End of function LoadSonicDynPLC
000147C8                            
000147C8                            ; ===========================================================================
000147C8                            ; ---------------------------------------------------------------------------
000147C8                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000147C8                            ; ---------------------------------------------------------------------------
000147C8                            
000147C8                            Obj0A:					; XREF: Obj_Index
000147C8 7000                       		moveq	#0,d0
000147CA 1028 0024                  		move.b	$24(a0),d0
000147CE 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000147D2 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000147D6                            ; ===========================================================================
000147D6 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000147DA 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000147DE 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000147E2 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000147E6 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            Obj0A_Main:				; XREF: Obj0A_Index
000147E8 5428 0024                  		addq.b	#2,$24(a0)
000147EC 217C 0001 33E0 0004        		move.l	#Map_obj64,4(a0)
000147F4 317C 8348 0002             		move.w	#$8348,2(a0)
000147FA 117C 0084 0001             		move.b	#$84,1(a0)
00014800 117C 0010 0019             		move.b	#$10,$19(a0)
00014806 117C 0001 0018             		move.b	#1,$18(a0)
0001480C 1028 0028                  		move.b	$28(a0),d0
00014810 6A00                       		bpl.s	loc_13D00
00014812 5028 0024                  		addq.b	#8,$24(a0)
00014816 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
0001481E 317C 0440 0002             		move.w	#$440,2(a0)
00014824 0240 007F                  		andi.w	#$7F,d0
00014828 1140 0033                  		move.b	d0,$33(a0)
0001482C 6000 0000                  		bra.w	Obj0A_Countdown
00014830                            ; ===========================================================================
00014830                            
00014830                            loc_13D00:
00014830 1140 001C                  		move.b	d0,$1C(a0)
00014834 3168 0008 0030             		move.w	8(a0),$30(a0)
0001483A 317C FF78 0012             		move.w	#-$88,$12(a0)
00014840                            
00014840                            Obj0A_Animate:				; XREF: Obj0A_Index
00014840 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014846 4EB9 0000 B09A             		jsr	AnimateSprite
0001484C                            
0001484C                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001484C 3038 F646                  		move.w	($FFFFF646).w,d0
00014850 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014854 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014856 117C 0006 0024             		move.b	#6,$24(a0)
0001485C 5E28 001C                  		addq.b	#7,$1C(a0)
00014860 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014866 6700                       		beq.s	Obj0A_Display
00014868 6000                       		bra.s	Obj0A_Display
0001486A                            ; ===========================================================================
0001486A                            
0001486A                            Obj0A_Wobble:
0001486A 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001486E 6700                       		beq.s	loc_13D44
00014870 5868 0030                  		addq.w	#4,$30(a0)
00014874                            
00014874                            loc_13D44:
00014874 1028 0026                  		move.b	$26(a0),d0
00014878 5228 0026                  		addq.b	#1,$26(a0)
0001487C 0240 007F                  		andi.w	#$7F,d0
00014880 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014886 1031 0000                  		move.b	(a1,d0.w),d0
0001488A 4880                       		ext.w	d0
0001488C D068 0030                  		add.w	$30(a0),d0
00014890 3140 0008                  		move.w	d0,8(a0)
00014894 6100                       		bsr.s	Obj0A_ShowNumber
00014896 4EBA 978E                  		jsr	SpeedToPos
0001489A 4A28 0001                  		tst.b	1(a0)
0001489E 6A00                       		bpl.s	Obj0A_Delete
000148A0 4EFA 97AA                  		jmp	DisplaySprite
000148A4                            ; ===========================================================================
000148A4                            
000148A4                            Obj0A_Delete:
000148A4 4EFA 97E2                  		jmp	DeleteObject
000148A8                            ; ===========================================================================
000148A8                            
000148A8                            Obj0A_Display:				; XREF: Obj0A_Index
000148A8 6100                       		bsr.s	Obj0A_ShowNumber
000148AA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148B0 4EB9 0000 B09A             		jsr	AnimateSprite
000148B6 4EFA 9794                  		jmp	DisplaySprite
000148BA                            ; ===========================================================================
000148BA                            
000148BA                            Obj0A_Delete2:				; XREF: Obj0A_Index
000148BA 4EFA 97CC                  		jmp	DeleteObject
000148BE                            ; ===========================================================================
000148BE                            
000148BE                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000148BE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000148C4 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000148C6 5368 0038                  		subq.w	#1,$38(a0)
000148CA 6600                       		bne.s	Obj0A_Display2
000148CC 117C 000E 0024             		move.b	#$E,$24(a0)
000148D2 5E28 001C                  		addq.b	#7,$1C(a0)
000148D6 60D0                       		bra.s	Obj0A_Display
000148D8                            ; ===========================================================================
000148D8                            
000148D8                            Obj0A_Display2:
000148D8 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000148DE 4EB9 0000 B09A             		jsr	AnimateSprite
000148E4 4A28 0001                  		tst.b	1(a0)
000148E8 6A00                       		bpl.s	Obj0A_Delete3
000148EA 4EFA 9760                  		jmp	DisplaySprite
000148EE                            ; ===========================================================================
000148EE                            
000148EE                            Obj0A_Delete3:
000148EE 4EFA 9798                  		jmp	DeleteObject
000148F2                            ; ===========================================================================
000148F2                            
000148F2                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000148F2 4A68 0038                  		tst.w	$38(a0)
000148F6 6700                       		beq.s	locret_13E1A
000148F8 5368 0038                  		subq.w	#1,$38(a0)
000148FC 6600                       		bne.s	locret_13E1A
000148FE 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014904 6400                       		bcc.s	locret_13E1A
00014906 317C 000F 0038             		move.w	#$F,$38(a0)
0001490C 4268 0012                  		clr.w	$12(a0)
00014910 117C 0080 0001             		move.b	#$80,1(a0)
00014916 3028 0008                  		move.w	8(a0),d0
0001491A 9078 F700                  		sub.w	($FFFFF700).w,d0
0001491E 0640 0080                  		addi.w	#$80,d0
00014922 3140 0008                  		move.w	d0,8(a0)
00014926 3028 000C                  		move.w	$C(a0),d0
0001492A 9078 F704                  		sub.w	($FFFFF704).w,d0
0001492E 0640 0080                  		addi.w	#$80,d0
00014932 3140 000A                  		move.w	d0,$A(a0)
00014936 117C 000C 0024             		move.b	#$C,$24(a0)
0001493C                            
0001493C                            locret_13E1A:
0001493C 4E75                       		rts	
0001493E                            ; ===========================================================================
0001493E                            Obj0A_WobbleData:
0001493E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001494F 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014960 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014971 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014981 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001498E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001499B FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000149A8 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000149B5 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000149BE                            ; ===========================================================================
000149BE                            
000149BE                            Obj0A_Countdown:			; XREF: Obj0A_Index
000149BE 4A68 002C                  		tst.w	$2C(a0)
000149C2 6600 0000                  		bne.w	loc_13F86
000149C6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000149CC 6400 0000                  		bcc.w	locret_1408C
000149D0 0838 0006 D022             		btst	#6,($FFFFD022).w
000149D6 6700 0000                  		beq.w	locret_1408C
000149DA 5368 0038                  		subq.w	#1,$38(a0)
000149DE 6A00 0000                  		bpl.w	loc_13FAC
000149E2 317C 003B 0038             		move.w	#59,$38(a0)
000149E8 317C 0001 0036             		move.w	#1,$36(a0)
000149EE 4EB9 0000 2D0E             		jsr	(RandomNumber).l
000149F4 0240 0001                  		andi.w	#1,d0
000149F8 1140 0034                  		move.b	d0,$34(a0)
000149FC 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014A00 0C40 0019                  		cmpi.w	#$19,d0
00014A04 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014A06 0C40 0014                  		cmpi.w	#$14,d0
00014A0A 6700                       		beq.s	Obj0A_WarnSound
00014A0C 0C40 000F                  		cmpi.w	#$F,d0
00014A10 6700                       		beq.s	Obj0A_WarnSound
00014A12 0C40 000C                  		cmpi.w	#$C,d0
00014A16 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00014A18 6600                       		bne.s	loc_13F02
00014A1A 303C 0092                  		move.w	#$92,d0
00014A1E 4EB9 0000 1594             		jsr	(PlaySound).l	; play countdown music
00014A24                            
00014A24                            loc_13F02:
00014A24 5328 0032                  		subq.b	#1,$32(a0)
00014A28 6A00                       		bpl.s	Obj0A_ReduceAir
00014A2A 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014A30 08E8 0007 0036             		bset	#7,$36(a0)
00014A36 6000                       		bra.s	Obj0A_ReduceAir
00014A38                            ; ===========================================================================
00014A38                            
00014A38                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00014A38 303C 00C2                  		move.w	#$C2,d0
00014A3C 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014A42                            
00014A42                            Obj0A_ReduceAir:
00014A42 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014A46 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00014A4A 6100 0000                  		bsr.w	ResumeMusic
00014A4E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014A54 303C 00B2                  		move.w	#$B2,d0
00014A58 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play drowning sound
00014A5E 117C 000A 0034             		move.b	#$A,$34(a0)
00014A64 317C 0001 0036             		move.w	#1,$36(a0)
00014A6A 317C 0078 002C             		move.w	#$78,$2C(a0)
00014A70 2F08                       		move.l	a0,-(sp)
00014A72 41F8 D000                  		lea	($FFFFD000).w,a0
00014A76 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00014A7A 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014A80 08E8 0001 0022             		bset	#1,$22(a0)
00014A86 08E8 0007 0002             		bset	#7,2(a0)
00014A8C 317C 0000 0012             		move.w	#0,$12(a0)
00014A92 317C 0000 0010             		move.w	#0,$10(a0)
00014A98 317C 0000 0014             		move.w	#0,$14(a0)
00014A9E 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014AA4 205F                       		movea.l	(sp)+,a0
00014AA6 4E75                       		rts	
00014AA8                            ; ===========================================================================
00014AA8                            
00014AA8                            loc_13F86:
00014AA8 5368 002C                  		subq.w	#1,$2C(a0)
00014AAC 6600                       		bne.s	loc_13F94
00014AAE 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014AB4 4E75                       		rts	
00014AB6                            ; ===========================================================================
00014AB6                            
00014AB6                            loc_13F94:
00014AB6 2F08                       		move.l	a0,-(sp)
00014AB8 41F8 D000                  		lea	($FFFFD000).w,a0
00014ABC 4EBA 9568                  		jsr	SpeedToPos
00014AC0 0668 0010 0012             		addi.w	#$10,$12(a0)
00014AC6 205F                       		movea.l	(sp)+,a0
00014AC8 6000                       		bra.s	loc_13FAC
00014ACA                            ; ===========================================================================
00014ACA                            
00014ACA                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014ACA 6000                       		bra.s	Obj0A_MakeItem
00014ACC                            ; ===========================================================================
00014ACC                            
00014ACC                            loc_13FAC:
00014ACC 4A68 0036                  		tst.w	$36(a0)
00014AD0 6700 0000                  		beq.w	locret_1408C
00014AD4 5368 003A                  		subq.w	#1,$3A(a0)
00014AD8 6A00 0000                  		bpl.w	locret_1408C
00014ADC                            
00014ADC                            Obj0A_MakeItem:
00014ADC 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014AE2 0240 000F                  		andi.w	#$F,d0
00014AE6 3140 003A                  		move.w	d0,$3A(a0)
00014AEA 4EBA 99E6                  		jsr	SingleObjLoad
00014AEE 6600 0000                  		bne.w	locret_1408C
00014AF2 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014AF6 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014AFC 7006                       		moveq	#6,d0
00014AFE 0838 0000 D022             		btst	#0,($FFFFD022).w
00014B04 6700                       		beq.s	loc_13FF2
00014B06 4440                       		neg.w	d0
00014B08 137C 0040 0026             		move.b	#$40,$26(a1)
00014B0E                            
00014B0E                            loc_13FF2:
00014B0E D169 0008                  		add.w	d0,8(a1)
00014B12 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00014B18 137C 0006 0028             		move.b	#6,$28(a1)
00014B1E 4A68 002C                  		tst.w	$2C(a0)
00014B22 6700 0000                  		beq.w	loc_1403E
00014B26 0268 0007 003A             		andi.w	#7,$3A(a0)
00014B2C 0668 0000 003A             		addi.w	#0,$3A(a0)
00014B32 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014B36 0440 000C                  		subi.w	#$C,d0
00014B3A 3340 000C                  		move.w	d0,$C(a1)
00014B3E 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014B44 1340 0026                  		move.b	d0,$26(a1)
00014B48 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014B4C 0200 0003                  		andi.b	#3,d0
00014B50 6600                       		bne.s	loc_14082
00014B52 137C 000E 0028             		move.b	#$E,$28(a1)
00014B58 6000                       		bra.s	loc_14082
00014B5A                            ; ===========================================================================
00014B5A                            
00014B5A                            loc_1403E:
00014B5A 0828 0007 0036             		btst	#7,$36(a0)
00014B60 6700                       		beq.s	loc_14082
00014B62 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014B66 E24A                       		lsr.w	#1,d2
00014B68 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00014B6E 0240 0003                  		andi.w	#3,d0
00014B72 6600                       		bne.s	loc_1406A
00014B74 08E8 0006 0036             		bset	#6,$36(a0)
00014B7A 6600                       		bne.s	loc_14082
00014B7C 1342 0028                  		move.b	d2,$28(a1)
00014B80 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B86                            
00014B86                            loc_1406A:
00014B86 4A28 0034                  		tst.b	$34(a0)
00014B8A 6600                       		bne.s	loc_14082
00014B8C 08E8 0006 0036             		bset	#6,$36(a0)
00014B92 6600                       		bne.s	loc_14082
00014B94 1342 0028                  		move.b	d2,$28(a1)
00014B98 337C 001C 0038             		move.w	#$1C,$38(a1)
00014B9E                            
00014B9E                            loc_14082:
00014B9E 5328 0034                  		subq.b	#1,$34(a0)
00014BA2 6A00                       		bpl.s	locret_1408C
00014BA4 4268 0036                  		clr.w	$36(a0)
00014BA8                            
00014BA8                            locret_1408C:
00014BA8 4E75                       		rts	
00014BAA                            
00014BAA                            ; ---------------------------------------------------------------------------
00014BAA                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014BAA                            ; ---------------------------------------------------------------------------
00014BAA                            
00014BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BAA                            
00014BAA                            
00014BAA                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014BAA 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014BB0                             
00014BB0                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014BB0                             
00014BB0 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014BB4                             
00014BB4 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014BBA 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014BBC 43F9 0000 3D8E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014BC2 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BC4                             
00014BC4                            Air_GetBgm2:
00014BC4 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014BCA 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014BCC 43F9 0000 3D96             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014BD2 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BD4                             
00014BD4                            Air_GetBgm3:
00014BD4 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014BDA 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014BDC 43F9 0000 3D9E             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014BE2 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014BE4                             
00014BE4                            Air_GetBgm4:
00014BE4 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014BEA 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014BEC 43F9 0000 3DA6             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014BF2                             
00014BF2                            Air_PlayMusic:
00014BF2 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014BF6                             
00014BF6                            loc_140A6:
00014BF6 4EB9 0000 1594             		jsr	(PlaySound).l
00014BFC                             
00014BFC                            ; NineKode ends here
00014BFC                            
00014BFC                            loc_140AC:
00014BFC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014C02 4238 D372                  		clr.b	($FFFFD372).w
00014C06 4E75                       		rts	
00014C08                            ; End of function ResumeMusic
00014C08                            
00014C08                            ; ===========================================================================
00014C08                            Ani_obj0A:
00014C08                            	include "_anim\obj0A.asm"
00014C08                            ; ---------------------------------------------------------------------------
00014C08                            ; Animation script - countdown numbers and bubbles (LZ)
00014C08                            ; ---------------------------------------------------------------------------
00014C08 0000                       		dc.w byte_140D6-Ani_obj0A
00014C0A 0000                       		dc.w byte_140E0-Ani_obj0A
00014C0C 0000                       		dc.w byte_140EA-Ani_obj0A
00014C0E 0000                       		dc.w byte_140F4-Ani_obj0A
00014C10 0000                       		dc.w byte_140FE-Ani_obj0A
00014C12 0000                       		dc.w byte_14108-Ani_obj0A
00014C14 0000                       		dc.w byte_14112-Ani_obj0A
00014C16 0000                       		dc.w byte_14118-Ani_obj0A
00014C18 0000                       		dc.w byte_14120-Ani_obj0A
00014C1A 0000                       		dc.w byte_14128-Ani_obj0A
00014C1C 0000                       		dc.w byte_14130-Ani_obj0A
00014C1E 0000                       		dc.w byte_14138-Ani_obj0A
00014C20 0000                       		dc.w byte_14140-Ani_obj0A
00014C22 0000                       		dc.w byte_14148-Ani_obj0A
00014C24 0000                       		dc.w byte_1414A-Ani_obj0A
00014C26 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014C30 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014C3A 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014C44 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014C4E 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014C58 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014C62 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014C68 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014C70 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014C78 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014C80 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014C88 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014C90 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014C98 0EFC                       byte_14148:	dc.b $E, $FC
00014C9A 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014CA0                            		even
00014CA0                            		even
00014CA0                            
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0                            ; Sprite mappings - drowning countdown numbers (LZ)
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0                            Map_obj0A:
00014CA0                            	include "_maps\obj0A.asm"
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0                            ; Sprite mappings - drowning countdown numbers (LZ)
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0 0000                       		dc.w byte_14152-Map_obj0A
00014CA2 01                         byte_14152:	dc.b 1
00014CA3 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014CA8                            		even
00014CA8                            		even
00014CA8                            
00014CA8                            ; ===========================================================================
00014CA8                            ; ---------------------------------------------------------------------------
00014CA8                            ; Object 38 - shield and invincibility stars
00014CA8                            ; ---------------------------------------------------------------------------
00014CA8                            
00014CA8                            Obj38:					; XREF: Obj_Index
00014CA8 7000                       		moveq	#0,d0
00014CAA 1028 0024                  		move.b	$24(a0),d0
00014CAE 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014CB2 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014CB6                            ; ===========================================================================
00014CB6 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014CB8 0000                       		dc.w Obj38_Shield-Obj38_Index
00014CBA 0000                       		dc.w Obj38_Stars-Obj38_Index
00014CBC                            ; ===========================================================================
00014CBC                            
00014CBC                            Obj38_Main:				; XREF: Obj38_Index
00014CBC 5428 0024                  		addq.b	#2,$24(a0)
00014CC0 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014CC8 117C 0004 0001             		move.b	#4,1(a0)
00014CCE 117C 0001 0018             		move.b	#1,$18(a0)
00014CD4 117C 0010 0019             		move.b	#$10,$19(a0)
00014CDA 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014CDE 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014CE0 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014CE6 4E75                       		rts	
00014CE8                            ; ===========================================================================
00014CE8                            
00014CE8                            Obj38_DoStars:
00014CE8 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014CEC 317C 055C 0002             		move.w	#$55C,2(a0)
00014CF2 4E75                       		rts	
00014CF4                            ; ===========================================================================
00014CF4                            
00014CF4                            Obj38_Shield:				; XREF: Obj38_Index
00014CF4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014CF8 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014CFA 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014CFE 6700                       		beq.s	Obj38_Delete	; if not, branch
00014D00 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014D06 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014D0C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D12 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D18 4EB9 0000 B09A             		jsr	AnimateSprite
00014D1E 4EFA 932C                  		jmp	DisplaySprite
00014D22                            ; ===========================================================================
00014D22                            
00014D22                            Obj38_RmvShield:
00014D22 4E75                       		rts	
00014D24                            ; ===========================================================================
00014D24                            
00014D24                            Obj38_Delete:
00014D24 4EFA 9362                  		jmp	DeleteObject
00014D28                            ; ===========================================================================
00014D28                            
00014D28                            Obj38_Stars:				; XREF: Obj38_Index
00014D28 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014D2C 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014D2E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014D32 1228 001C                  		move.b	$1C(a0),d1
00014D36 5301                       		subq.b	#1,d1
00014D38 6000                       		bra.s	Obj38_StarTrail
00014D3A                            ; ===========================================================================
00014D3A E909                       		lsl.b	#4,d1
00014D3C 5801                       		addq.b	#4,d1
00014D3E 9001                       		sub.b	d1,d0
00014D40 1228 0030                  		move.b	$30(a0),d1
00014D44 9001                       		sub.b	d1,d0
00014D46 5801                       		addq.b	#4,d1
00014D48 0201 000F                  		andi.b	#$F,d1
00014D4C 1141 0030                  		move.b	d1,$30(a0)
00014D50 6000                       		bra.s	Obj38_StarTrail2a
00014D52                            ; ===========================================================================
00014D52                            
00014D52                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014D52 E709                       		lsl.b	#3,d1
00014D54 1401                       		move.b	d1,d2
00014D56 D201                       		add.b	d1,d1
00014D58 D202                       		add.b	d2,d1
00014D5A 5801                       		addq.b	#4,d1
00014D5C 9001                       		sub.b	d1,d0
00014D5E 1228 0030                  		move.b	$30(a0),d1
00014D62 9001                       		sub.b	d1,d0
00014D64 5801                       		addq.b	#4,d1
00014D66 0C01 0018                  		cmpi.b	#$18,d1
00014D6A 6500                       		bcs.s	Obj38_StarTrail2
00014D6C 7200                       		moveq	#0,d1
00014D6E                            
00014D6E                            Obj38_StarTrail2:
00014D6E 1141 0030                  		move.b	d1,$30(a0)
00014D72                            
00014D72                            Obj38_StarTrail2a:
00014D72 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014D76 43F1 0000                  		lea	(a1,d0.w),a1
00014D7A 3159 0008                  		move.w	(a1)+,8(a0)
00014D7E 3159 000C                  		move.w	(a1)+,$C(a0)
00014D82 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014D88 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014D8E 4EB9 0000 B09A             		jsr	AnimateSprite
00014D94 4EFA 92B6                  		jmp	DisplaySprite
00014D98                            ; ===========================================================================
00014D98                            
00014D98                            Obj38_Delete2:				; XREF: Obj38_Stars
00014D98 4EFA 92EE                  		jmp	DeleteObject
00014D9C                            ; ===========================================================================
00014D9C                            ; ---------------------------------------------------------------------------
00014D9C                            ; Object 4A - special stage entry from beta
00014D9C                            ; ---------------------------------------------------------------------------
00014D9C                            
00014D9C                            Obj4A:					; XREF: Obj_Index
00014D9C 7000                       		moveq	#0,d0
00014D9E 1028 0024                  		move.b	$24(a0),d0
00014DA2 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014DA6 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014DAA                            ; ===========================================================================
00014DAA 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014DAC 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014DAE 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014DB0                            ; ===========================================================================
00014DB0                            
00014DB0                            Obj4A_Main:				; XREF: Obj4A_Index
00014DB0 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014DB4 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014DB6 4E75                       		rts	
00014DB8                            ; ===========================================================================
00014DB8                            
00014DB8                            Obj4A_Main2:
00014DB8 5428 0024                  		addq.b	#2,$24(a0)
00014DBC 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014DC4 117C 0004 0001             		move.b	#4,1(a0)
00014DCA 117C 0001 0018             		move.b	#1,$18(a0)
00014DD0 117C 0038 0019             		move.b	#$38,$19(a0)
00014DD6 317C 0541 0002             		move.w	#$541,2(a0)
00014DDC 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014DE2                            
00014DE2                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014DE2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014DE8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014DEE 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014DF4 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014DFA 4EB9 0000 B09A             		jsr	AnimateSprite
00014E00 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014E06 6600                       		bne.s	Obj4A_Display
00014E08 4A38 D000                  		tst.b	($FFFFD000).w
00014E0C 6700                       		beq.s	Obj4A_Display
00014E0E 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014E14 303C 00A8                  		move.w	#$A8,d0
00014E18 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014E1E                            
00014E1E                            Obj4A_Display:
00014E1E 4EFA 922C                  		jmp	DisplaySprite
00014E22                            ; ===========================================================================
00014E22                            
00014E22                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014E22 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014E26 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014E28 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014E2E 4EFA 9258                  		jmp	DeleteObject
00014E32                            ; ===========================================================================
00014E32                            
00014E32                            Obj4A_Wait:
00014E32 4E75                       		rts	
00014E34                            ; ===========================================================================
00014E34                            ; ---------------------------------------------------------------------------
00014E34                            ; Object 08 - water splash (LZ)
00014E34                            ; ---------------------------------------------------------------------------
00014E34                            
00014E34                            Obj08:					; XREF: Obj_Index
00014E34 7000                       		moveq	#0,d0
00014E36 1028 0024                  		move.b	$24(a0),d0
00014E3A 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014E3E 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014E42                            ; ===========================================================================
00014E42 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014E44 0000                       		dc.w Obj08_Display-Obj08_Index
00014E46 0000                       		dc.w Obj08_Delete-Obj08_Index
00014E48                            ; ===========================================================================
00014E48                            
00014E48                            Obj08_Main:				; XREF: Obj08_Index
00014E48 5428 0024                  		addq.b	#2,$24(a0)
00014E4C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014E54 0028 0004 0001             		ori.b	#4,1(a0)
00014E5A 117C 0001 0018             		move.b	#1,$18(a0)
00014E60 117C 0010 0019             		move.b	#$10,$19(a0)
00014E66 317C 4259 0002             		move.w	#$4259,2(a0)
00014E6C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014E72                            
00014E72                            Obj08_Display:				; XREF: Obj08_Index
00014E72 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014E78 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014E7E 4EB9 0000 B09A             		jsr	AnimateSprite
00014E84 4EFA 91C6                  		jmp	DisplaySprite
00014E88                            ; ===========================================================================
00014E88                            
00014E88                            Obj08_Delete:				; XREF: Obj08_Index
00014E88 4EFA 91FE                  		jmp	DeleteObject	; delete when animation	is complete
00014E8C                            ; ===========================================================================
00014E8C                            Ani_obj38:
00014E8C                            	include "_anim\obj38.asm"
00014E8C                            ; ---------------------------------------------------------------------------
00014E8C                            ; Animation script - shield and invincibility stars
00014E8C                            ; ---------------------------------------------------------------------------
00014E8C 0000                       		dc.w byte_14356-Ani_obj38
00014E8E 0000                       		dc.w byte_1435E-Ani_obj38
00014E90 0000                       		dc.w byte_14364-Ani_obj38
00014E92 0000                       		dc.w byte_1437E-Ani_obj38
00014E94 0000                       		dc.w byte_14398-Ani_obj38
00014E96 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014E9E 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014EA4 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014EB5 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014EBE 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014ECF 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014ED8 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014EE9 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014EF2                            		even
00014EF2                            		even
00014EF2                            
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2                            ; Sprite mappings - shield and invincibility stars
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2                            Map_obj38:
00014EF2                            	include "_maps\obj38.asm"
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2                            ; Sprite mappings - shield and invincibility stars
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014EF6 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014EFA 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014EFE 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014F02 04                         byte_143C2:	dc.b 4
00014F03 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F08 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F0D 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014F12 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F17 04                         byte_143D7:	dc.b 4
00014F18 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014F1D E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014F22 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014F27 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014F2C 04                         byte_143EC:	dc.b 4
00014F2D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F32 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F37 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F3C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F41 04                         byte_14401:	dc.b 4
00014F42 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014F47 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014F4C 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014F51 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014F56 04                         byte_14416:	dc.b 4
00014F57 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014F5C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014F61 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014F66 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014F6B 04                         byte_1442B:	dc.b 4
00014F6C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014F71 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014F76 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014F7B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014F80 04                         byte_14440:	dc.b 4
00014F81 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014F86 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014F8B 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014F90 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014F96 00                         		even
00014F96 00                         		even
00014F96                            
00014F96                            Ani_obj4A:
00014F96                            	include "_anim\obj4A.asm"
00014F96                            ; ---------------------------------------------------------------------------
00014F96                            ; Animation script - special stage entry effect from beta
00014F96                            ; ---------------------------------------------------------------------------
00014F96 0000                       		dc.w byte_14458-Ani_obj4A
00014F98 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014FAC                            		even
00014FAC                            		even
00014FAC                            
00014FAC                            ; ---------------------------------------------------------------------------
00014FAC                            ; Sprite mappings - special stage entry	from beta
00014FAC                            ; ---------------------------------------------------------------------------
00014FAC                            Map_obj4A:
00014FAC                            	include "_maps\obj4A.asm"
00014FAC                            ; ---------------------------------------------------------------------------
00014FAC                            ; Sprite mappings - special stage entry	from beta
00014FAC                            ; ---------------------------------------------------------------------------
00014FAC 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014FB0 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014FB4 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014FB8 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014FBC 03                         byte_1447C:	dc.b 3
00014FBD F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014FC2 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014FC7 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014FCC 03                         byte_1448C:	dc.b 3
00014FCD F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014FD2 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014FD7 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014FDC 05                         byte_1449C:	dc.b 5
00014FDD E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014FE2 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014FE7 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014FEC 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014FF1 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014FF6 09                         byte_144B6:	dc.b 9
00014FF7 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014FFC F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00015001 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015006 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001500B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00015010 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015015 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001501A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001501F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015024 12                         byte_144E4:	dc.b $12
00015025 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001502A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001502F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015034 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015039 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001503E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00015043 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015048 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001504D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00015052 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015057 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001505C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00015061 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015066 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001506B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00015070 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015075 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001507A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001507F 11                         byte_1453F:	dc.b $11
00015080 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015085 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001508A 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001508F 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015094 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015099 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001509E 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000150A3 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000150A8 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000150AD 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000150B2 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000150B7 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000150BC F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000150C1 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000150C6 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000150CB 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000150D0 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000150D5 09                         byte_14595:	dc.b 9
000150D6 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000150DB 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000150E0 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000150E5 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000150EA FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000150EF FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000150F4 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000150F9 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000150FE 04                         		dc.b 4
000150FF 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015104                            		even
00015104                            		even
00015104                            
00015104                            Ani_obj08:
00015104                            	include "_anim\obj08.asm"
00015104                            ; ---------------------------------------------------------------------------
00015104                            ; Animation script - water splash (LZ)
00015104                            ; ---------------------------------------------------------------------------
00015104 0000                       		dc.w byte_145C6-Ani_obj08
00015106 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001510C                            		even
0001510C                            		even
0001510C                            
0001510C                            ; ---------------------------------------------------------------------------
0001510C                            ; Sprite mappings - water splash (LZ)
0001510C                            ; ---------------------------------------------------------------------------
0001510C                            Map_obj08:
0001510C                            	include "_maps\obj08.asm"
0001510C                            ; ---------------------------------------------------------------------------
0001510C                            ; Sprite mappings - water splash (LZ)
0001510C                            ; ---------------------------------------------------------------------------
0001510C 0000                       		dc.w byte_145D2-Map_obj08
0001510E 0000                       		dc.w byte_145DD-Map_obj08
00015110 0000                       		dc.w byte_145E8-Map_obj08
00015112 02                         byte_145D2:	dc.b 2
00015113 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015118 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001511D 02                         byte_145DD:	dc.b 2
0001511E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00015123 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015128 01                         byte_145E8:	dc.b 1
00015129 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001512E                            		even
0001512E                            		even
0001512E                            
0001512E                            ; ---------------------------------------------------------------------------
0001512E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001512E                            ; ---------------------------------------------------------------------------
0001512E                            
0001512E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001512E                            
0001512E                            
0001512E                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001512E 0828 0003 0022             		btst	#3,$22(a0)
00015134 6700                       		beq.s	loc_14602
00015136 7000                       		moveq	#0,d0
00015138 11C0 F768                  		move.b	d0,($FFFFF768).w
0001513C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015140 4E75                       		rts	
00015142                            ; ===========================================================================
00015142                            
00015142                            loc_14602:
00015142 7003                       		moveq	#3,d0
00015144 11C0 F768                  		move.b	d0,($FFFFF768).w
00015148 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001514C 1028 0026                  		move.b	$26(a0),d0
00015150 0600 0020                  		addi.b	#$20,d0
00015154 6A00                       		bpl.s	loc_14624
00015156 1028 0026                  		move.b	$26(a0),d0
0001515A 6A00                       		bpl.s	loc_1461E
0001515C 5300                       		subq.b	#1,d0
0001515E                            
0001515E                            loc_1461E:
0001515E 0600 0020                  		addi.b	#$20,d0
00015162 6000                       		bra.s	loc_14630
00015164                            ; ===========================================================================
00015164                            
00015164                            loc_14624:
00015164 1028 0026                  		move.b	$26(a0),d0
00015168 6A00                       		bpl.s	loc_1462C
0001516A 5200                       		addq.b	#1,d0
0001516C                            
0001516C                            loc_1462C:
0001516C 0600 001F                  		addi.b	#$1F,d0
00015170                            
00015170                            loc_14630:
00015170 0200 00C0                  		andi.b	#$C0,d0
00015174 0C00 0040                  		cmpi.b	#$40,d0
00015178 6700 0000                  		beq.w	Sonic_WalkVertL
0001517C 0C00 0080                  		cmpi.b	#$80,d0
00015180 6700 0000                  		beq.w	Sonic_WalkCeiling
00015184 0C00 00C0                  		cmpi.b	#$C0,d0
00015188 6700 0000                  		beq.w	Sonic_WalkVertR
0001518C 3428 000C                  		move.w	$C(a0),d2
00015190 3628 0008                  		move.w	8(a0),d3
00015194 7000                       		moveq	#0,d0
00015196 1028 0016                  		move.b	$16(a0),d0
0001519A 4880                       		ext.w	d0
0001519C D440                       		add.w	d0,d2
0001519E 1028 0017                  		move.b	$17(a0),d0
000151A2 4880                       		ext.w	d0
000151A4 D640                       		add.w	d0,d3
000151A6 49F8 F768                  		lea	($FFFFF768).w,a4
000151AA 367C 0010                  		movea.w	#$10,a3
000151AE 3C3C 0000                  		move.w	#0,d6
000151B2 7A0D                       		moveq	#$D,d5
000151B4 6100 0000                  		bsr.w	FindFloor
000151B8 3F01                       		move.w	d1,-(sp)
000151BA 3428 000C                  		move.w	$C(a0),d2
000151BE 3628 0008                  		move.w	8(a0),d3
000151C2 7000                       		moveq	#0,d0
000151C4 1028 0016                  		move.b	$16(a0),d0
000151C8 4880                       		ext.w	d0
000151CA D440                       		add.w	d0,d2
000151CC 1028 0017                  		move.b	$17(a0),d0
000151D0 4880                       		ext.w	d0
000151D2 4440                       		neg.w	d0
000151D4 D640                       		add.w	d0,d3
000151D6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151DA 367C 0010                  		movea.w	#$10,a3
000151DE 3C3C 0000                  		move.w	#0,d6
000151E2 7A0D                       		moveq	#$D,d5
000151E4 6100 0000                  		bsr.w	FindFloor
000151E8 301F                       		move.w	(sp)+,d0
000151EA 6100 0000                  		bsr.w	Sonic_Angle
000151EE 4A41                       		tst.w	d1
000151F0 6700                       		beq.s	locret_146BE
000151F2 6A00                       		bpl.s	loc_146C0
000151F4 0C41 FFF2                  		cmpi.w	#-$E,d1
000151F8 6D00                       		blt.s	locret_146E6
000151FA D368 000C                  		add.w	d1,$C(a0)
000151FE                            
000151FE                            locret_146BE:
000151FE 4E75                       		rts	
00015200                            ; ===========================================================================
00015200                            
00015200                            loc_146C0:
00015200 0C41 000E                  		cmpi.w	#$E,d1
00015204 6E00                       		bgt.s	loc_146CC
00015206                            
00015206                            loc_146C6:
00015206 D368 000C                  		add.w	d1,$C(a0)
0001520A 4E75                       		rts	
0001520C                            ; ===========================================================================
0001520C                            
0001520C                            loc_146CC:
0001520C 4A28 0038                  		tst.b	$38(a0)
00015210 66F4                       		bne.s	loc_146C6
00015212 08E8 0001 0022             		bset	#1,$22(a0)
00015218 08A8 0005 0022             		bclr	#5,$22(a0)
0001521E 117C 0001 001D             		move.b	#1,$1D(a0)
00015224 4E75                       		rts	
00015226                            ; ===========================================================================
00015226                            
00015226                            locret_146E6:
00015226 4E75                       		rts	
00015228                            ; End of function Sonic_AnglePos
00015228                            
00015228                            ; ===========================================================================
00015228 2428 0008                  		move.l	8(a0),d2
0001522C 3028 0010                  		move.w	$10(a0),d0
00015230 48C0                       		ext.l	d0
00015232 E180                       		asl.l	#8,d0
00015234 9480                       		sub.l	d0,d2
00015236 2142 0008                  		move.l	d2,8(a0)
0001523A 303C 0038                  		move.w	#$38,d0
0001523E 48C0                       		ext.l	d0
00015240 E180                       		asl.l	#8,d0
00015242 9680                       		sub.l	d0,d3
00015244 2143 000C                  		move.l	d3,$C(a0)
00015248 4E75                       		rts	
0001524A                            ; ===========================================================================
0001524A                            
0001524A                            locret_1470A:
0001524A 4E75                       		rts	
0001524C                            ; ===========================================================================
0001524C 2628 000C                  		move.l	$C(a0),d3
00015250 3028 0012                  		move.w	$12(a0),d0
00015254 0440 0038                  		subi.w	#$38,d0
00015258 3140 0012                  		move.w	d0,$12(a0)
0001525C 48C0                       		ext.l	d0
0001525E E180                       		asl.l	#8,d0
00015260 9680                       		sub.l	d0,d3
00015262 2143 000C                  		move.l	d3,$C(a0)
00015266 4E75                       		rts	
00015268 4E75                       		rts	
0001526A                            ; ===========================================================================
0001526A 2428 0008                  		move.l	8(a0),d2
0001526E 2628 000C                  		move.l	$C(a0),d3
00015272 3028 0010                  		move.w	$10(a0),d0
00015276 48C0                       		ext.l	d0
00015278 E180                       		asl.l	#8,d0
0001527A 9480                       		sub.l	d0,d2
0001527C 3028 0012                  		move.w	$12(a0),d0
00015280 48C0                       		ext.l	d0
00015282 E180                       		asl.l	#8,d0
00015284 9680                       		sub.l	d0,d3
00015286 2142 0008                  		move.l	d2,8(a0)
0001528A 2143 000C                  		move.l	d3,$C(a0)
0001528E 4E75                       		rts	
00015290                            
00015290                            ; ---------------------------------------------------------------------------
00015290                            ; Subroutine to	change Sonic's angle as he walks along the floor
00015290                            ; ---------------------------------------------------------------------------
00015290                            
00015290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015290                            
00015290                            
00015290                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00015290 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015294 B240                       		cmp.w	d0,d1
00015296 6F00                       		ble.s	loc_1475E
00015298 1438 F768                  		move.b	($FFFFF768).w,d2
0001529C 3200                       		move.w	d0,d1
0001529E                            
0001529E                            loc_1475E:
0001529E 0802 0000                  		btst	#0,d2
000152A2 6600                       		bne.s	loc_1476A
000152A4 1142 0026                  		move.b	d2,$26(a0)
000152A8 4E75                       		rts	
000152AA                            ; ===========================================================================
000152AA                            
000152AA                            loc_1476A:
000152AA 1428 0026                  		move.b	$26(a0),d2
000152AE 0602 0020                  		addi.b	#$20,d2
000152B2 0202 00C0                  		andi.b	#$C0,d2
000152B6 1142 0026                  		move.b	d2,$26(a0)
000152BA 4E75                       		rts	
000152BC                            ; End of function Sonic_Angle
000152BC                            
000152BC                            ; ---------------------------------------------------------------------------
000152BC                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000152BC                            ; ---------------------------------------------------------------------------
000152BC                            
000152BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152BC                            
000152BC                            
000152BC                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000152BC 3428 000C                  		move.w	$C(a0),d2
000152C0 3628 0008                  		move.w	8(a0),d3
000152C4 7000                       		moveq	#0,d0
000152C6 1028 0017                  		move.b	$17(a0),d0
000152CA 4880                       		ext.w	d0
000152CC 4440                       		neg.w	d0
000152CE D440                       		add.w	d0,d2
000152D0 1028 0016                  		move.b	$16(a0),d0
000152D4 4880                       		ext.w	d0
000152D6 D640                       		add.w	d0,d3
000152D8 49F8 F768                  		lea	($FFFFF768).w,a4
000152DC 367C 0010                  		movea.w	#$10,a3
000152E0 3C3C 0000                  		move.w	#0,d6
000152E4 7A0D                       		moveq	#$D,d5
000152E6 6100 0000                  		bsr.w	FindWall
000152EA 3F01                       		move.w	d1,-(sp)
000152EC 3428 000C                  		move.w	$C(a0),d2
000152F0 3628 0008                  		move.w	8(a0),d3
000152F4 7000                       		moveq	#0,d0
000152F6 1028 0017                  		move.b	$17(a0),d0
000152FA 4880                       		ext.w	d0
000152FC D440                       		add.w	d0,d2
000152FE 1028 0016                  		move.b	$16(a0),d0
00015302 4880                       		ext.w	d0
00015304 D640                       		add.w	d0,d3
00015306 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001530A 367C 0010                  		movea.w	#$10,a3
0001530E 3C3C 0000                  		move.w	#0,d6
00015312 7A0D                       		moveq	#$D,d5
00015314 6100 0000                  		bsr.w	FindWall
00015318 301F                       		move.w	(sp)+,d0
0001531A 6100 FF74                  		bsr.w	Sonic_Angle
0001531E 4A41                       		tst.w	d1
00015320 6700                       		beq.s	locret_147F0
00015322 6A00                       		bpl.s	loc_147F2
00015324 0C41 FFF2                  		cmpi.w	#-$E,d1
00015328 6D00 FF20                  		blt.w	locret_1470A
0001532C D368 0008                  		add.w	d1,8(a0)
00015330                            
00015330                            locret_147F0:
00015330 4E75                       		rts	
00015332                            ; ===========================================================================
00015332                            
00015332                            loc_147F2:
00015332 0C41 000E                  		cmpi.w	#$E,d1
00015336 6E00                       		bgt.s	loc_147FE
00015338                            
00015338                            loc_147F8:
00015338 D368 0008                  		add.w	d1,8(a0)
0001533C 4E75                       		rts	
0001533E                            ; ===========================================================================
0001533E                            
0001533E                            loc_147FE:
0001533E 4A28 0038                  		tst.b	$38(a0)
00015342 66F4                       		bne.s	loc_147F8
00015344 08E8 0001 0022             		bset	#1,$22(a0)
0001534A 08A8 0005 0022             		bclr	#5,$22(a0)
00015350 117C 0001 001D             		move.b	#1,$1D(a0)
00015356 4E75                       		rts	
00015358                            ; End of function Sonic_WalkVertR
00015358                            
00015358                            ; ---------------------------------------------------------------------------
00015358                            ; Subroutine allowing Sonic to walk upside-down
00015358                            ; ---------------------------------------------------------------------------
00015358                            
00015358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015358                            
00015358                            
00015358                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015358 3428 000C                  		move.w	$C(a0),d2
0001535C 3628 0008                  		move.w	8(a0),d3
00015360 7000                       		moveq	#0,d0
00015362 1028 0016                  		move.b	$16(a0),d0
00015366 4880                       		ext.w	d0
00015368 9440                       		sub.w	d0,d2
0001536A 0A42 000F                  		eori.w	#$F,d2
0001536E 1028 0017                  		move.b	$17(a0),d0
00015372 4880                       		ext.w	d0
00015374 D640                       		add.w	d0,d3
00015376 49F8 F768                  		lea	($FFFFF768).w,a4
0001537A 367C FFF0                  		movea.w	#-$10,a3
0001537E 3C3C 1000                  		move.w	#$1000,d6
00015382 7A0D                       		moveq	#$D,d5
00015384 6100 0000                  		bsr.w	FindFloor
00015388 3F01                       		move.w	d1,-(sp)
0001538A 3428 000C                  		move.w	$C(a0),d2
0001538E 3628 0008                  		move.w	8(a0),d3
00015392 7000                       		moveq	#0,d0
00015394 1028 0016                  		move.b	$16(a0),d0
00015398 4880                       		ext.w	d0
0001539A 9440                       		sub.w	d0,d2
0001539C 0A42 000F                  		eori.w	#$F,d2
000153A0 1028 0017                  		move.b	$17(a0),d0
000153A4 4880                       		ext.w	d0
000153A6 9640                       		sub.w	d0,d3
000153A8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153AC 367C FFF0                  		movea.w	#-$10,a3
000153B0 3C3C 1000                  		move.w	#$1000,d6
000153B4 7A0D                       		moveq	#$D,d5
000153B6 6100 0000                  		bsr.w	FindFloor
000153BA 301F                       		move.w	(sp)+,d0
000153BC 6100 FED2                  		bsr.w	Sonic_Angle
000153C0 4A41                       		tst.w	d1
000153C2 6700                       		beq.s	locret_14892
000153C4 6A00                       		bpl.s	loc_14894
000153C6 0C41 FFF2                  		cmpi.w	#-$E,d1
000153CA 6D00 FE5A                  		blt.w	locret_146E6
000153CE 9368 000C                  		sub.w	d1,$C(a0)
000153D2                            
000153D2                            locret_14892:
000153D2 4E75                       		rts	
000153D4                            ; ===========================================================================
000153D4                            
000153D4                            loc_14894:
000153D4 0C41 000E                  		cmpi.w	#$E,d1
000153D8 6E00                       		bgt.s	loc_148A0
000153DA                            
000153DA                            loc_1489A:
000153DA 9368 000C                  		sub.w	d1,$C(a0)
000153DE 4E75                       		rts	
000153E0                            ; ===========================================================================
000153E0                            
000153E0                            loc_148A0:
000153E0 4A28 0038                  		tst.b	$38(a0)
000153E4 66F4                       		bne.s	loc_1489A
000153E6 08E8 0001 0022             		bset	#1,$22(a0)
000153EC 08A8 0005 0022             		bclr	#5,$22(a0)
000153F2 117C 0001 001D             		move.b	#1,$1D(a0)
000153F8 4E75                       		rts	
000153FA                            ; End of function Sonic_WalkCeiling
000153FA                            
000153FA                            ; ---------------------------------------------------------------------------
000153FA                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000153FA                            ; ---------------------------------------------------------------------------
000153FA                            
000153FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153FA                            
000153FA                            
000153FA                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000153FA 3428 000C                  		move.w	$C(a0),d2
000153FE 3628 0008                  		move.w	8(a0),d3
00015402 7000                       		moveq	#0,d0
00015404 1028 0017                  		move.b	$17(a0),d0
00015408 4880                       		ext.w	d0
0001540A 9440                       		sub.w	d0,d2
0001540C 1028 0016                  		move.b	$16(a0),d0
00015410 4880                       		ext.w	d0
00015412 9640                       		sub.w	d0,d3
00015414 0A43 000F                  		eori.w	#$F,d3
00015418 49F8 F768                  		lea	($FFFFF768).w,a4
0001541C 367C FFF0                  		movea.w	#-$10,a3
00015420 3C3C 0800                  		move.w	#$800,d6
00015424 7A0D                       		moveq	#$D,d5
00015426 6100 0000                  		bsr.w	FindWall
0001542A 3F01                       		move.w	d1,-(sp)
0001542C 3428 000C                  		move.w	$C(a0),d2
00015430 3628 0008                  		move.w	8(a0),d3
00015434 7000                       		moveq	#0,d0
00015436 1028 0017                  		move.b	$17(a0),d0
0001543A 4880                       		ext.w	d0
0001543C D440                       		add.w	d0,d2
0001543E 1028 0016                  		move.b	$16(a0),d0
00015442 4880                       		ext.w	d0
00015444 9640                       		sub.w	d0,d3
00015446 0A43 000F                  		eori.w	#$F,d3
0001544A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001544E 367C FFF0                  		movea.w	#-$10,a3
00015452 3C3C 0800                  		move.w	#$800,d6
00015456 7A0D                       		moveq	#$D,d5
00015458 6100 0000                  		bsr.w	FindWall
0001545C 301F                       		move.w	(sp)+,d0
0001545E 6100 FE30                  		bsr.w	Sonic_Angle
00015462 4A41                       		tst.w	d1
00015464 6700                       		beq.s	locret_14934
00015466 6A00                       		bpl.s	loc_14936
00015468 0C41 FFF2                  		cmpi.w	#-$E,d1
0001546C 6D00 FDDC                  		blt.w	locret_1470A
00015470 9368 0008                  		sub.w	d1,8(a0)
00015474                            
00015474                            locret_14934:
00015474 4E75                       		rts	
00015476                            ; ===========================================================================
00015476                            
00015476                            loc_14936:
00015476 0C41 000E                  		cmpi.w	#$E,d1
0001547A 6E00                       		bgt.s	loc_14942
0001547C                            
0001547C                            loc_1493C:
0001547C 9368 0008                  		sub.w	d1,8(a0)
00015480 4E75                       		rts	
00015482                            ; ===========================================================================
00015482                            
00015482                            loc_14942:
00015482 4A28 0038                  		tst.b	$38(a0)
00015486 66F4                       		bne.s	loc_1493C
00015488 08E8 0001 0022             		bset	#1,$22(a0)
0001548E 08A8 0005 0022             		bclr	#5,$22(a0)
00015494 117C 0001 001D             		move.b	#1,$1D(a0)
0001549A 4E75                       		rts	
0001549C                            ; End of function Sonic_WalkVertL
0001549C                            
0001549C                            ; ---------------------------------------------------------------------------
0001549C                            ; Subroutine to	find which tile	the object is standing on
0001549C                            ; ---------------------------------------------------------------------------
0001549C                            
0001549C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001549C                            
0001549C                            
0001549C                            Floor_ChkTile:				; XREF: FindFloor; et al
0001549C 3002                       		move.w	d2,d0
0001549E E248                       		lsr.w	#1,d0
000154A0 0240 0380                  		andi.w	#$380,d0
000154A4 3203                       		move.w	d3,d1
000154A6 E049                       		lsr.w	#8,d1
000154A8 0241 007F                  		andi.w	#$7F,d1
000154AC D041                       		add.w	d1,d0
000154AE 72FF                       		moveq	#-1,d1
000154B0 43F8 A400                  		lea	($FFFFA400).w,a1
000154B4 1231 0000                  		move.b	(a1,d0.w),d1
000154B8 6700                       		beq.s	loc_14996
000154BA 6B00                       		bmi.s	loc_1499A
000154BC 5301                       		subq.b	#1,d1
000154BE 4881                       		ext.w	d1
000154C0 EE59                       		ror.w	#7,d1
000154C2 3002                       		move.w	d2,d0
000154C4 D040                       		add.w	d0,d0
000154C6 0240 01E0                  		andi.w	#$1E0,d0
000154CA D240                       		add.w	d0,d1
000154CC 3003                       		move.w	d3,d0
000154CE E648                       		lsr.w	#3,d0
000154D0 0240 001E                  		andi.w	#$1E,d0
000154D4 D240                       		add.w	d0,d1
000154D6                            
000154D6                            loc_14996:
000154D6 2241                       		movea.l	d1,a1
000154D8 4E75                       		rts	
000154DA                            ; ===========================================================================
000154DA                            
000154DA                            loc_1499A:
000154DA 0241 007F                  		andi.w	#$7F,d1
000154DE 0828 0006 0001             		btst	#6,1(a0)
000154E4 6700                       		beq.s	loc_149B2
000154E6 5241                       		addq.w	#1,d1
000154E8 0C41 0029                  		cmpi.w	#$29,d1
000154EC 6600                       		bne.s	loc_149B2
000154EE 323C 0051                  		move.w	#$51,d1
000154F2                            
000154F2                            loc_149B2:
000154F2 5301                       		subq.b	#1,d1
000154F4 EE59                       		ror.w	#7,d1
000154F6 3002                       		move.w	d2,d0
000154F8 D040                       		add.w	d0,d0
000154FA 0240 01E0                  		andi.w	#$1E0,d0
000154FE D240                       		add.w	d0,d1
00015500 3003                       		move.w	d3,d0
00015502 E648                       		lsr.w	#3,d0
00015504 0240 001E                  		andi.w	#$1E,d0
00015508 D240                       		add.w	d0,d1
0001550A 2241                       		movea.l	d1,a1
0001550C 4E75                       		rts	
0001550E                            ; End of function Floor_ChkTile
0001550E                            
0001550E                            
0001550E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001550E                            
0001550E                            
0001550E                            FindFloor:				; XREF: Sonic_AnglePos; et al
0001550E 618C                       		bsr.s	Floor_ChkTile
00015510 3011                       		move.w	(a1),d0
00015512 3800                       		move.w	d0,d4
00015514 0240 07FF                  		andi.w	#$7FF,d0
00015518 6700                       		beq.s	loc_149DE
0001551A 0B04                       		btst	d5,d4
0001551C 6600                       		bne.s	loc_149EC
0001551E                            
0001551E                            loc_149DE:
0001551E D44B                       		add.w	a3,d2
00015520 6100 0000                  		bsr.w	FindFloor2
00015524 944B                       		sub.w	a3,d2
00015526 0641 0010                  		addi.w	#$10,d1
0001552A 4E75                       		rts	
0001552C                            ; ===========================================================================
0001552C                            
0001552C                            loc_149EC:
0001552C 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015530 1032 0000                  		move.b	(a2,d0.w),d0
00015534 0240 00FF                  		andi.w	#$FF,d0
00015538 67E4                       		beq.s	loc_149DE
0001553A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015540 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015544 E948                       		lsl.w	#4,d0
00015546 3203                       		move.w	d3,d1
00015548 0804 000B                  		btst	#$B,d4
0001554C 6700                       		beq.s	loc_14A12
0001554E 4641                       		not.w	d1
00015550 4414                       		neg.b	(a4)
00015552                            
00015552                            loc_14A12:
00015552 0804 000C                  		btst	#$C,d4
00015556 6700                       		beq.s	loc_14A22
00015558 0614 0040                  		addi.b	#$40,(a4)
0001555C 4414                       		neg.b	(a4)
0001555E 0414 0040                  		subi.b	#$40,(a4)
00015562                            
00015562                            loc_14A22:
00015562 0241 000F                  		andi.w	#$F,d1
00015566 D240                       		add.w	d0,d1
00015568 45F9 0000 0000             		lea	(CollArray1).l,a2
0001556E 1032 1000                  		move.b	(a2,d1.w),d0
00015572 4880                       		ext.w	d0
00015574 BD44                       		eor.w	d6,d4
00015576 0804 000C                  		btst	#$C,d4
0001557A 6700                       		beq.s	loc_14A3E
0001557C 4440                       		neg.w	d0
0001557E                            
0001557E                            loc_14A3E:
0001557E 4A40                       		tst.w	d0
00015580 679C                       		beq.s	loc_149DE
00015582 6B00                       		bmi.s	loc_14A5A
00015584 0C00 0010                  		cmpi.b	#$10,d0
00015588 6700                       		beq.s	loc_14A66
0001558A 3202                       		move.w	d2,d1
0001558C 0241 000F                  		andi.w	#$F,d1
00015590 D041                       		add.w	d1,d0
00015592 323C 000F                  		move.w	#$F,d1
00015596 9240                       		sub.w	d0,d1
00015598 4E75                       		rts	
0001559A                            ; ===========================================================================
0001559A                            
0001559A                            loc_14A5A:
0001559A 3202                       		move.w	d2,d1
0001559C 0241 000F                  		andi.w	#$F,d1
000155A0 D041                       		add.w	d1,d0
000155A2 6A00 FF7A                  		bpl.w	loc_149DE
000155A6                            
000155A6                            loc_14A66:
000155A6 944B                       		sub.w	a3,d2
000155A8 6100 0000                  		bsr.w	FindFloor2
000155AC D44B                       		add.w	a3,d2
000155AE 0441 0010                  		subi.w	#$10,d1
000155B2 4E75                       		rts	
000155B4                            ; End of function FindFloor
000155B4                            
000155B4                            
000155B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B4                            
000155B4                            
000155B4                            FindFloor2:				; XREF: FindFloor
000155B4 6100 FEE6                  		bsr.w	Floor_ChkTile
000155B8 3011                       		move.w	(a1),d0
000155BA 3800                       		move.w	d0,d4
000155BC 0240 07FF                  		andi.w	#$7FF,d0
000155C0 6700                       		beq.s	loc_14A86
000155C2 0B04                       		btst	d5,d4
000155C4 6600                       		bne.s	loc_14A94
000155C6                            
000155C6                            loc_14A86:
000155C6 323C 000F                  		move.w	#$F,d1
000155CA 3002                       		move.w	d2,d0
000155CC 0240 000F                  		andi.w	#$F,d0
000155D0 9240                       		sub.w	d0,d1
000155D2 4E75                       		rts	
000155D4                            ; ===========================================================================
000155D4                            
000155D4                            loc_14A94:
000155D4 2478 F796                  		movea.l	($FFFFF796).w,a2
000155D8 1032 0000                  		move.b	(a2,d0.w),d0
000155DC 0240 00FF                  		andi.w	#$FF,d0
000155E0 67E4                       		beq.s	loc_14A86
000155E2 45F9 0000 0000             		lea	(AngleMap).l,a2
000155E8 18B2 0000                  		move.b	(a2,d0.w),(a4)
000155EC E948                       		lsl.w	#4,d0
000155EE 3203                       		move.w	d3,d1
000155F0 0804 000B                  		btst	#$B,d4
000155F4 6700                       		beq.s	loc_14ABA
000155F6 4641                       		not.w	d1
000155F8 4414                       		neg.b	(a4)
000155FA                            
000155FA                            loc_14ABA:
000155FA 0804 000C                  		btst	#$C,d4
000155FE 6700                       		beq.s	loc_14ACA
00015600 0614 0040                  		addi.b	#$40,(a4)
00015604 4414                       		neg.b	(a4)
00015606 0414 0040                  		subi.b	#$40,(a4)
0001560A                            
0001560A                            loc_14ACA:
0001560A 0241 000F                  		andi.w	#$F,d1
0001560E D240                       		add.w	d0,d1
00015610 45F9 0000 0000             		lea	(CollArray1).l,a2
00015616 1032 1000                  		move.b	(a2,d1.w),d0
0001561A 4880                       		ext.w	d0
0001561C BD44                       		eor.w	d6,d4
0001561E 0804 000C                  		btst	#$C,d4
00015622 6700                       		beq.s	loc_14AE6
00015624 4440                       		neg.w	d0
00015626                            
00015626                            loc_14AE6:
00015626 4A40                       		tst.w	d0
00015628 679C                       		beq.s	loc_14A86
0001562A 6B00                       		bmi.s	loc_14AFC
0001562C 3202                       		move.w	d2,d1
0001562E 0241 000F                  		andi.w	#$F,d1
00015632 D041                       		add.w	d1,d0
00015634 323C 000F                  		move.w	#$F,d1
00015638 9240                       		sub.w	d0,d1
0001563A 4E75                       		rts	
0001563C                            ; ===========================================================================
0001563C                            
0001563C                            loc_14AFC:
0001563C 3202                       		move.w	d2,d1
0001563E 0241 000F                  		andi.w	#$F,d1
00015642 D041                       		add.w	d1,d0
00015644 6A00 FF80                  		bpl.w	loc_14A86
00015648 4641                       		not.w	d1
0001564A 4E75                       		rts	
0001564C                            ; End of function FindFloor2
0001564C                            
0001564C                            
0001564C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001564C                            
0001564C                            
0001564C                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001564C 6100 FE4E                  		bsr.w	Floor_ChkTile
00015650 3011                       		move.w	(a1),d0
00015652 3800                       		move.w	d0,d4
00015654 0240 07FF                  		andi.w	#$7FF,d0
00015658 6700                       		beq.s	loc_14B1E
0001565A 0B04                       		btst	d5,d4
0001565C 6600                       		bne.s	loc_14B2C
0001565E                            
0001565E                            loc_14B1E:
0001565E D64B                       		add.w	a3,d3
00015660 6100 0000                  		bsr.w	FindWall2
00015664 964B                       		sub.w	a3,d3
00015666 0641 0010                  		addi.w	#$10,d1
0001566A 4E75                       		rts	
0001566C                            ; ===========================================================================
0001566C                            
0001566C                            loc_14B2C:
0001566C 2478 F796                  		movea.l	($FFFFF796).w,a2
00015670 1032 0000                  		move.b	(a2,d0.w),d0
00015674 0240 00FF                  		andi.w	#$FF,d0
00015678 67E4                       		beq.s	loc_14B1E
0001567A 45F9 0000 0000             		lea	(AngleMap).l,a2
00015680 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015684 E948                       		lsl.w	#4,d0
00015686 3202                       		move.w	d2,d1
00015688 0804 000C                  		btst	#$C,d4
0001568C 6700                       		beq.s	loc_14B5A
0001568E 4641                       		not.w	d1
00015690 0614 0040                  		addi.b	#$40,(a4)
00015694 4414                       		neg.b	(a4)
00015696 0414 0040                  		subi.b	#$40,(a4)
0001569A                            
0001569A                            loc_14B5A:
0001569A 0804 000B                  		btst	#$B,d4
0001569E 6700                       		beq.s	loc_14B62
000156A0 4414                       		neg.b	(a4)
000156A2                            
000156A2                            loc_14B62:
000156A2 0241 000F                  		andi.w	#$F,d1
000156A6 D240                       		add.w	d0,d1
000156A8 45F9 0000 0000             		lea	(CollArray2).l,a2
000156AE 1032 1000                  		move.b	(a2,d1.w),d0
000156B2 4880                       		ext.w	d0
000156B4 BD44                       		eor.w	d6,d4
000156B6 0804 000B                  		btst	#$B,d4
000156BA 6700                       		beq.s	loc_14B7E
000156BC 4440                       		neg.w	d0
000156BE                            
000156BE                            loc_14B7E:
000156BE 4A40                       		tst.w	d0
000156C0 679C                       		beq.s	loc_14B1E
000156C2 6B00                       		bmi.s	loc_14B9A
000156C4 0C00 0010                  		cmpi.b	#$10,d0
000156C8 6700                       		beq.s	loc_14BA6
000156CA 3203                       		move.w	d3,d1
000156CC 0241 000F                  		andi.w	#$F,d1
000156D0 D041                       		add.w	d1,d0
000156D2 323C 000F                  		move.w	#$F,d1
000156D6 9240                       		sub.w	d0,d1
000156D8 4E75                       		rts	
000156DA                            ; ===========================================================================
000156DA                            
000156DA                            loc_14B9A:
000156DA 3203                       		move.w	d3,d1
000156DC 0241 000F                  		andi.w	#$F,d1
000156E0 D041                       		add.w	d1,d0
000156E2 6A00 FF7A                  		bpl.w	loc_14B1E
000156E6                            
000156E6                            loc_14BA6:
000156E6 964B                       		sub.w	a3,d3
000156E8 6100 0000                  		bsr.w	FindWall2
000156EC D64B                       		add.w	a3,d3
000156EE 0441 0010                  		subi.w	#$10,d1
000156F2 4E75                       		rts	
000156F4                            ; End of function FindWall
000156F4                            
000156F4                            
000156F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156F4                            
000156F4                            
000156F4                            FindWall2:				; XREF: FindWall
000156F4 6100 FDA6                  		bsr.w	Floor_ChkTile
000156F8 3011                       		move.w	(a1),d0
000156FA 3800                       		move.w	d0,d4
000156FC 0240 07FF                  		andi.w	#$7FF,d0
00015700 6700                       		beq.s	loc_14BC6
00015702 0B04                       		btst	d5,d4
00015704 6600                       		bne.s	loc_14BD4
00015706                            
00015706                            loc_14BC6:
00015706 323C 000F                  		move.w	#$F,d1
0001570A 3003                       		move.w	d3,d0
0001570C 0240 000F                  		andi.w	#$F,d0
00015710 9240                       		sub.w	d0,d1
00015712 4E75                       		rts	
00015714                            ; ===========================================================================
00015714                            
00015714                            loc_14BD4:
00015714 2478 F796                  		movea.l	($FFFFF796).w,a2
00015718 1032 0000                  		move.b	(a2,d0.w),d0
0001571C 0240 00FF                  		andi.w	#$FF,d0
00015720 67E4                       		beq.s	loc_14BC6
00015722 45F9 0000 0000             		lea	(AngleMap).l,a2
00015728 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001572C E948                       		lsl.w	#4,d0
0001572E 3202                       		move.w	d2,d1
00015730 0804 000C                  		btst	#$C,d4
00015734 6700                       		beq.s	loc_14C02
00015736 4641                       		not.w	d1
00015738 0614 0040                  		addi.b	#$40,(a4)
0001573C 4414                       		neg.b	(a4)
0001573E 0414 0040                  		subi.b	#$40,(a4)
00015742                            
00015742                            loc_14C02:
00015742 0804 000B                  		btst	#$B,d4
00015746 6700                       		beq.s	loc_14C0A
00015748 4414                       		neg.b	(a4)
0001574A                            
0001574A                            loc_14C0A:
0001574A 0241 000F                  		andi.w	#$F,d1
0001574E D240                       		add.w	d0,d1
00015750 45F9 0000 0000             		lea	(CollArray2).l,a2
00015756 1032 1000                  		move.b	(a2,d1.w),d0
0001575A 4880                       		ext.w	d0
0001575C BD44                       		eor.w	d6,d4
0001575E 0804 000B                  		btst	#$B,d4
00015762 6700                       		beq.s	loc_14C26
00015764 4440                       		neg.w	d0
00015766                            
00015766                            loc_14C26:
00015766 4A40                       		tst.w	d0
00015768 679C                       		beq.s	loc_14BC6
0001576A 6B00                       		bmi.s	loc_14C3C
0001576C 3203                       		move.w	d3,d1
0001576E 0241 000F                  		andi.w	#$F,d1
00015772 D041                       		add.w	d1,d0
00015774 323C 000F                  		move.w	#$F,d1
00015778 9240                       		sub.w	d0,d1
0001577A 4E75                       		rts	
0001577C                            ; ===========================================================================
0001577C                            
0001577C                            loc_14C3C:
0001577C 3203                       		move.w	d3,d1
0001577E 0241 000F                  		andi.w	#$F,d1
00015782 D041                       		add.w	d1,d0
00015784 6A00 FF80                  		bpl.w	loc_14BC6
00015788 4641                       		not.w	d1
0001578A 4E75                       		rts	
0001578C                            ; End of function FindWall2
0001578C                            
0001578C                            ; ---------------------------------------------------------------------------
0001578C                            ; Unused floor/wall subroutine - logs something	to do with collision
0001578C                            ; ---------------------------------------------------------------------------
0001578C                            
0001578C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001578C                            
0001578C                            
0001578C                            FloorLog_Unk:				; XREF: Level
0001578C 4E75                       		rts	
0001578E                            
0001578E 43F9 0000 0000             		lea	(CollArray1).l,a1
00015794 45F9 0000 0000             		lea	(CollArray1).l,a2
0001579A 363C 00FF                  		move.w	#$FF,d3
0001579E                            
0001579E                            loc_14C5E:
0001579E 7A10                       		moveq	#$10,d5
000157A0 343C 000F                  		move.w	#$F,d2
000157A4                            
000157A4                            loc_14C64:
000157A4 7800                       		moveq	#0,d4
000157A6 323C 000F                  		move.w	#$F,d1
000157AA                            
000157AA                            loc_14C6A:
000157AA 3019                       		move.w	(a1)+,d0
000157AC EAA8                       		lsr.l	d5,d0
000157AE D944                       		addx.w	d4,d4
000157B0 51C9 FFF8                  		dbf	d1,loc_14C6A
000157B4                            
000157B4 34C4                       		move.w	d4,(a2)+
000157B6 92FC 0020                  		suba.w	#$20,a1
000157BA 5345                       		subq.w	#1,d5
000157BC 51CA FFE6                  		dbf	d2,loc_14C64
000157C0                            
000157C0 D2FC 0020                  		adda.w	#$20,a1
000157C4 51CB FFD8                  		dbf	d3,loc_14C5E
000157C8                            
000157C8 43F9 0000 0000             		lea	(CollArray1).l,a1
000157CE 45F9 0000 0000             		lea	(CollArray2).l,a2
000157D4 6100                       		bsr.s	FloorLog_Unk2
000157D6 43F9 0000 0000             		lea	(CollArray1).l,a1
000157DC 45F9 0000 0000             		lea	(CollArray1).l,a2
000157E2                            
000157E2                            ; End of function FloorLog_Unk
000157E2                            
000157E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157E2                            
000157E2                            
000157E2                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000157E2 363C 0FFF                  		move.w	#$FFF,d3
000157E6                            
000157E6                            loc_14CA6:
000157E6 7400                       		moveq	#0,d2
000157E8 323C 000F                  		move.w	#$F,d1
000157EC 3019                       		move.w	(a1)+,d0
000157EE 6700                       		beq.s	loc_14CD4
000157F0 6B00                       		bmi.s	loc_14CBE
000157F2                            
000157F2                            loc_14CB2:
000157F2 E248                       		lsr.w	#1,d0
000157F4 6400                       		bcc.s	loc_14CB8
000157F6 5202                       		addq.b	#1,d2
000157F8                            
000157F8                            loc_14CB8:
000157F8 51C9 FFF8                  		dbf	d1,loc_14CB2
000157FC                            
000157FC 6000                       		bra.s	loc_14CD6
000157FE                            ; ===========================================================================
000157FE                            
000157FE                            loc_14CBE:
000157FE 0C40 FFFF                  		cmpi.w	#-1,d0
00015802 6700                       		beq.s	loc_14CD0
00015804                            
00015804                            loc_14CC4:
00015804 E348                       		lsl.w	#1,d0
00015806 6400                       		bcc.s	loc_14CCA
00015808 5302                       		subq.b	#1,d2
0001580A                            
0001580A                            loc_14CCA:
0001580A 51C9 FFF8                  		dbf	d1,loc_14CC4
0001580E                            
0001580E 6000                       		bra.s	loc_14CD6
00015810                            ; ===========================================================================
00015810                            
00015810                            loc_14CD0:
00015810 303C 0010                  		move.w	#$10,d0
00015814                            
00015814                            loc_14CD4:
00015814 3400                       		move.w	d0,d2
00015816                            
00015816                            loc_14CD6:
00015816 14C2                       		move.b	d2,(a2)+
00015818 51CB FFCC                  		dbf	d3,loc_14CA6
0001581C                            
0001581C 4E75                       		rts	
0001581E                            
0001581E                            ; End of function FloorLog_Unk2
0001581E                            
0001581E                            
0001581E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001581E                            
0001581E                            
0001581E                            Sonic_WalkSpeed:			; XREF: Sonic_Move
0001581E 2628 0008                  		move.l	8(a0),d3
00015822 2428 000C                  		move.l	$C(a0),d2
00015826 3228 0010                  		move.w	$10(a0),d1
0001582A 48C1                       		ext.l	d1
0001582C E181                       		asl.l	#8,d1
0001582E D681                       		add.l	d1,d3
00015830 3228 0012                  		move.w	$12(a0),d1
00015834 48C1                       		ext.l	d1
00015836 E181                       		asl.l	#8,d1
00015838 D481                       		add.l	d1,d2
0001583A 4842                       		swap	d2
0001583C 4843                       		swap	d3
0001583E 11C0 F768                  		move.b	d0,($FFFFF768).w
00015842 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015846 1200                       		move.b	d0,d1
00015848 0600 0020                  		addi.b	#$20,d0
0001584C 6A00                       		bpl.s	loc_14D1A
0001584E 1001                       		move.b	d1,d0
00015850 6A00                       		bpl.s	loc_14D14
00015852 5300                       		subq.b	#1,d0
00015854                            
00015854                            loc_14D14:
00015854 0600 0020                  		addi.b	#$20,d0
00015858 6000                       		bra.s	loc_14D24
0001585A                            ; ===========================================================================
0001585A                            
0001585A                            loc_14D1A:
0001585A 1001                       		move.b	d1,d0
0001585C 6A00                       		bpl.s	loc_14D20
0001585E 5200                       		addq.b	#1,d0
00015860                            
00015860                            loc_14D20:
00015860 0600 001F                  		addi.b	#$1F,d0
00015864                            
00015864                            loc_14D24:
00015864 0200 00C0                  		andi.b	#$C0,d0
00015868 6700 0000                  		beq.w	loc_14DF0
0001586C 0C00 0080                  		cmpi.b	#$80,d0
00015870 6700 0000                  		beq.w	loc_14F7C
00015874 0201 0038                  		andi.b	#$38,d1
00015878 6600                       		bne.s	loc_14D3C
0001587A 5042                       		addq.w	#8,d2
0001587C                            
0001587C                            loc_14D3C:
0001587C 0C00 0040                  		cmpi.b	#$40,d0
00015880 6700 0000                  		beq.w	loc_1504A
00015884 6000 0000                  		bra.w	loc_14EBC
00015888                            
00015888                            ; End of function Sonic_WalkSpeed
00015888                            
00015888                            
00015888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015888                            
00015888                            
00015888                            sub_14D48:				; XREF: Sonic_Jump
00015888 11C0 F768                  		move.b	d0,($FFFFF768).w
0001588C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015890 0600 0020                  		addi.b	#$20,d0
00015894 0200 00C0                  		andi.b	#$C0,d0
00015898 0C00 0040                  		cmpi.b	#$40,d0
0001589C 6700 0000                  		beq.w	loc_14FD6
000158A0 0C00 0080                  		cmpi.b	#$80,d0
000158A4 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000158A8 0C00 00C0                  		cmpi.b	#$C0,d0
000158AC 6700 0000                  		beq.w	sub_14E50
000158B0                            
000158B0                            ; End of function sub_14D48
000158B0                            
000158B0                            ; ---------------------------------------------------------------------------
000158B0                            ; Subroutine to	make Sonic land	on the floor after jumping
000158B0                            ; ---------------------------------------------------------------------------
000158B0                            
000158B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158B0                            
000158B0                            
000158B0                            Sonic_HitFloor:				; XREF: Sonic_Floor
000158B0 3428 000C                  		move.w	$C(a0),d2
000158B4 3628 0008                  		move.w	8(a0),d3
000158B8 7000                       		moveq	#0,d0
000158BA 1028 0016                  		move.b	$16(a0),d0
000158BE 4880                       		ext.w	d0
000158C0 D440                       		add.w	d0,d2
000158C2 1028 0017                  		move.b	$17(a0),d0
000158C6 4880                       		ext.w	d0
000158C8 D640                       		add.w	d0,d3
000158CA 49F8 F768                  		lea	($FFFFF768).w,a4
000158CE 367C 0010                  		movea.w	#$10,a3
000158D2 3C3C 0000                  		move.w	#0,d6
000158D6 7A0D                       		moveq	#$D,d5
000158D8 6100 FC34                  		bsr.w	FindFloor
000158DC 3F01                       		move.w	d1,-(sp)
000158DE 3428 000C                  		move.w	$C(a0),d2
000158E2 3628 0008                  		move.w	8(a0),d3
000158E6 7000                       		moveq	#0,d0
000158E8 1028 0016                  		move.b	$16(a0),d0
000158EC 4880                       		ext.w	d0
000158EE D440                       		add.w	d0,d2
000158F0 1028 0017                  		move.b	$17(a0),d0
000158F4 4880                       		ext.w	d0
000158F6 9640                       		sub.w	d0,d3
000158F8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158FC 367C 0010                  		movea.w	#$10,a3
00015900 3C3C 0000                  		move.w	#0,d6
00015904 7A0D                       		moveq	#$D,d5
00015906 6100 FC06                  		bsr.w	FindFloor
0001590A 301F                       		move.w	(sp)+,d0
0001590C 143C 0000                  		move.b	#0,d2
00015910                            
00015910                            loc_14DD0:
00015910 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015914 B240                       		cmp.w	d0,d1
00015916 6F00                       		ble.s	loc_14DDE
00015918 1638 F768                  		move.b	($FFFFF768).w,d3
0001591C C141                       		exg	d0,d1
0001591E                            
0001591E                            loc_14DDE:
0001591E 0803 0000                  		btst	#0,d3
00015922 6700                       		beq.s	locret_14DE6
00015924 1602                       		move.b	d2,d3
00015926                            
00015926                            locret_14DE6:
00015926 4E75                       		rts	
00015928                            
00015928                            ; End of function Sonic_HitFloor
00015928                            
00015928                            ; ===========================================================================
00015928 3428 000C                  		move.w	$C(a0),d2
0001592C 3628 0008                  		move.w	8(a0),d3
00015930                            
00015930                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015930 0642 000A                  		addi.w	#$A,d2
00015934 49F8 F768                  		lea	($FFFFF768).w,a4
00015938 367C 0010                  		movea.w	#$10,a3
0001593C 3C3C 0000                  		move.w	#0,d6
00015940 7A0E                       		moveq	#$E,d5
00015942 6100 FBCA                  		bsr.w	FindFloor
00015946 143C 0000                  		move.b	#0,d2
0001594A                            
0001594A                            loc_14E0A:				; XREF: sub_14EB4
0001594A 1638 F768                  		move.b	($FFFFF768).w,d3
0001594E 0803 0000                  		btst	#0,d3
00015952 6700                       		beq.s	locret_14E16
00015954 1602                       		move.b	d2,d3
00015956                            
00015956                            locret_14E16:
00015956 4E75                       		rts	
00015958                            
00015958                            ; ---------------------------------------------------------------------------
00015958                            ; Subroutine allowing objects to interact with the floor
00015958                            ; ---------------------------------------------------------------------------
00015958                            
00015958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015958                            
00015958                            
00015958                            ObjHitFloor:
00015958 3628 0008                  		move.w	8(a0),d3
0001595C                            
0001595C                            ; End of function ObjHitFloor
0001595C                            
0001595C                            
0001595C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001595C                            
0001595C                            
0001595C                            ObjHitFloor2:
0001595C 3428 000C                  		move.w	$C(a0),d2
00015960 7000                       		moveq	#0,d0
00015962 1028 0016                  		move.b	$16(a0),d0
00015966 4880                       		ext.w	d0
00015968 D440                       		add.w	d0,d2
0001596A 49F8 F768                  		lea	($FFFFF768).w,a4
0001596E 18BC 0000                  		move.b	#0,(a4)
00015972 367C 0010                  		movea.w	#$10,a3
00015976 3C3C 0000                  		move.w	#0,d6
0001597A 7A0D                       		moveq	#$D,d5
0001597C 6100 FB90                  		bsr.w	FindFloor
00015980 1638 F768                  		move.b	($FFFFF768).w,d3
00015984 0803 0000                  		btst	#0,d3
00015988 6700                       		beq.s	locret_14E4E
0001598A 163C 0000                  		move.b	#0,d3
0001598E                            
0001598E                            locret_14E4E:
0001598E 4E75                       		rts	
00015990                            ; End of function ObjHitFloor2
00015990                            
00015990                            
00015990                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015990                            
00015990                            
00015990                            sub_14E50:				; XREF: sub_14D48
00015990 3428 000C                  		move.w	$C(a0),d2
00015994 3628 0008                  		move.w	8(a0),d3
00015998 7000                       		moveq	#0,d0
0001599A 1028 0017                  		move.b	$17(a0),d0
0001599E 4880                       		ext.w	d0
000159A0 9440                       		sub.w	d0,d2
000159A2 1028 0016                  		move.b	$16(a0),d0
000159A6 4880                       		ext.w	d0
000159A8 D640                       		add.w	d0,d3
000159AA 49F8 F768                  		lea	($FFFFF768).w,a4
000159AE 367C 0010                  		movea.w	#$10,a3
000159B2 3C3C 0000                  		move.w	#0,d6
000159B6 7A0E                       		moveq	#$E,d5
000159B8 6100 FC92                  		bsr.w	FindWall
000159BC 3F01                       		move.w	d1,-(sp)
000159BE 3428 000C                  		move.w	$C(a0),d2
000159C2 3628 0008                  		move.w	8(a0),d3
000159C6 7000                       		moveq	#0,d0
000159C8 1028 0017                  		move.b	$17(a0),d0
000159CC 4880                       		ext.w	d0
000159CE D440                       		add.w	d0,d2
000159D0 1028 0016                  		move.b	$16(a0),d0
000159D4 4880                       		ext.w	d0
000159D6 D640                       		add.w	d0,d3
000159D8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000159DC 367C 0010                  		movea.w	#$10,a3
000159E0 3C3C 0000                  		move.w	#0,d6
000159E4 7A0E                       		moveq	#$E,d5
000159E6 6100 FC64                  		bsr.w	FindWall
000159EA 301F                       		move.w	(sp)+,d0
000159EC 143C 00C0                  		move.b	#-$40,d2
000159F0 6000 FF1E                  		bra.w	loc_14DD0
000159F4                            
000159F4                            ; End of function sub_14E50
000159F4                            
000159F4                            
000159F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159F4                            
000159F4                            
000159F4                            sub_14EB4:				; XREF: Sonic_Floor
000159F4 3428 000C                  		move.w	$C(a0),d2
000159F8 3628 0008                  		move.w	8(a0),d3
000159FC                            
000159FC                            loc_14EBC:
000159FC 0643 000A                  		addi.w	#$A,d3
00015A00 49F8 F768                  		lea	($FFFFF768).w,a4
00015A04 367C 0010                  		movea.w	#$10,a3
00015A08 3C3C 0000                  		move.w	#0,d6
00015A0C 7A0E                       		moveq	#$E,d5
00015A0E 6100 FC3C                  		bsr.w	FindWall
00015A12 143C 00C0                  		move.b	#-$40,d2
00015A16 6000 FF32                  		bra.w	loc_14E0A
00015A1A                            
00015A1A                            ; End of function sub_14EB4
00015A1A                            
00015A1A                            ; ---------------------------------------------------------------------------
00015A1A                            ; Subroutine to	detect when an object hits a wall to its right
00015A1A                            ; ---------------------------------------------------------------------------
00015A1A                            
00015A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A1A                            
00015A1A                            
00015A1A                            ObjHitWallRight:
00015A1A D668 0008                  		add.w	8(a0),d3
00015A1E 3428 000C                  		move.w	$C(a0),d2
00015A22 49F8 F768                  		lea	($FFFFF768).w,a4
00015A26 18BC 0000                  		move.b	#0,(a4)
00015A2A 367C 0010                  		movea.w	#$10,a3
00015A2E 3C3C 0000                  		move.w	#0,d6
00015A32 7A0E                       		moveq	#$E,d5
00015A34 6100 FC16                  		bsr.w	FindWall
00015A38 1638 F768                  		move.b	($FFFFF768).w,d3
00015A3C 0803 0000                  		btst	#0,d3
00015A40 6700                       		beq.s	locret_14F06
00015A42 163C 00C0                  		move.b	#-$40,d3
00015A46                            
00015A46                            locret_14F06:
00015A46 4E75                       		rts	
00015A48                            
00015A48                            ; End of function ObjHitWallRight
00015A48                            
00015A48                            ; ---------------------------------------------------------------------------
00015A48                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015A48                            ; touches them
00015A48                            ; ---------------------------------------------------------------------------
00015A48                            
00015A48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A48                            
00015A48                            
00015A48                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015A48 3428 000C                  		move.w	$C(a0),d2
00015A4C 3628 0008                  		move.w	8(a0),d3
00015A50 7000                       		moveq	#0,d0
00015A52 1028 0016                  		move.b	$16(a0),d0
00015A56 4880                       		ext.w	d0
00015A58 9440                       		sub.w	d0,d2
00015A5A 0A42 000F                  		eori.w	#$F,d2
00015A5E 1028 0017                  		move.b	$17(a0),d0
00015A62 4880                       		ext.w	d0
00015A64 D640                       		add.w	d0,d3
00015A66 49F8 F768                  		lea	($FFFFF768).w,a4
00015A6A 367C FFF0                  		movea.w	#-$10,a3
00015A6E 3C3C 1000                  		move.w	#$1000,d6
00015A72 7A0E                       		moveq	#$E,d5
00015A74 6100 FA98                  		bsr.w	FindFloor
00015A78 3F01                       		move.w	d1,-(sp)
00015A7A 3428 000C                  		move.w	$C(a0),d2
00015A7E 3628 0008                  		move.w	8(a0),d3
00015A82 7000                       		moveq	#0,d0
00015A84 1028 0016                  		move.b	$16(a0),d0
00015A88 4880                       		ext.w	d0
00015A8A 9440                       		sub.w	d0,d2
00015A8C 0A42 000F                  		eori.w	#$F,d2
00015A90 1028 0017                  		move.b	$17(a0),d0
00015A94 4880                       		ext.w	d0
00015A96 9640                       		sub.w	d0,d3
00015A98 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A9C 367C FFF0                  		movea.w	#-$10,a3
00015AA0 3C3C 1000                  		move.w	#$1000,d6
00015AA4 7A0E                       		moveq	#$E,d5
00015AA6 6100 FA66                  		bsr.w	FindFloor
00015AAA 301F                       		move.w	(sp)+,d0
00015AAC 143C 0080                  		move.b	#-$80,d2
00015AB0 6000 FE5E                  		bra.w	loc_14DD0
00015AB4                            ; End of function Sonic_DontRunOnWalls
00015AB4                            
00015AB4                            ; ===========================================================================
00015AB4 3428 000C                  		move.w	$C(a0),d2
00015AB8 3628 0008                  		move.w	8(a0),d3
00015ABC                            
00015ABC                            loc_14F7C:
00015ABC 0442 000A                  		subi.w	#$A,d2
00015AC0 0A42 000F                  		eori.w	#$F,d2
00015AC4 49F8 F768                  		lea	($FFFFF768).w,a4
00015AC8 367C FFF0                  		movea.w	#-$10,a3
00015ACC 3C3C 1000                  		move.w	#$1000,d6
00015AD0 7A0E                       		moveq	#$E,d5
00015AD2 6100 FA3A                  		bsr.w	FindFloor
00015AD6 143C 0080                  		move.b	#-$80,d2
00015ADA 6000 FE6E                  		bra.w	loc_14E0A
00015ADE                            
00015ADE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015ADE                            
00015ADE                            
00015ADE                            ObjHitCeiling:
00015ADE 3428 000C                  		move.w	$C(a0),d2
00015AE2 3628 0008                  		move.w	8(a0),d3
00015AE6 7000                       		moveq	#0,d0
00015AE8 1028 0016                  		move.b	$16(a0),d0
00015AEC 4880                       		ext.w	d0
00015AEE 9440                       		sub.w	d0,d2
00015AF0 0A42 000F                  		eori.w	#$F,d2
00015AF4 49F8 F768                  		lea	($FFFFF768).w,a4
00015AF8 367C FFF0                  		movea.w	#-$10,a3
00015AFC 3C3C 1000                  		move.w	#$1000,d6
00015B00 7A0E                       		moveq	#$E,d5
00015B02 6100 FA0A                  		bsr.w	FindFloor
00015B06 1638 F768                  		move.b	($FFFFF768).w,d3
00015B0A 0803 0000                  		btst	#0,d3
00015B0E 6700                       		beq.s	locret_14FD4
00015B10 163C 0080                  		move.b	#-$80,d3
00015B14                            
00015B14                            locret_14FD4:
00015B14 4E75                       		rts	
00015B16                            ; End of function ObjHitCeiling
00015B16                            
00015B16                            ; ===========================================================================
00015B16                            
00015B16                            loc_14FD6:				; XREF: sub_14D48
00015B16 3428 000C                  		move.w	$C(a0),d2
00015B1A 3628 0008                  		move.w	8(a0),d3
00015B1E 7000                       		moveq	#0,d0
00015B20 1028 0017                  		move.b	$17(a0),d0
00015B24 4880                       		ext.w	d0
00015B26 9440                       		sub.w	d0,d2
00015B28 1028 0016                  		move.b	$16(a0),d0
00015B2C 4880                       		ext.w	d0
00015B2E 9640                       		sub.w	d0,d3
00015B30 0A43 000F                  		eori.w	#$F,d3
00015B34 49F8 F768                  		lea	($FFFFF768).w,a4
00015B38 367C FFF0                  		movea.w	#-$10,a3
00015B3C 3C3C 0800                  		move.w	#$800,d6
00015B40 7A0E                       		moveq	#$E,d5
00015B42 6100 FB08                  		bsr.w	FindWall
00015B46 3F01                       		move.w	d1,-(sp)
00015B48 3428 000C                  		move.w	$C(a0),d2
00015B4C 3628 0008                  		move.w	8(a0),d3
00015B50 7000                       		moveq	#0,d0
00015B52 1028 0017                  		move.b	$17(a0),d0
00015B56 4880                       		ext.w	d0
00015B58 D440                       		add.w	d0,d2
00015B5A 1028 0016                  		move.b	$16(a0),d0
00015B5E 4880                       		ext.w	d0
00015B60 9640                       		sub.w	d0,d3
00015B62 0A43 000F                  		eori.w	#$F,d3
00015B66 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B6A 367C FFF0                  		movea.w	#-$10,a3
00015B6E 3C3C 0800                  		move.w	#$800,d6
00015B72 7A0E                       		moveq	#$E,d5
00015B74 6100 FAD6                  		bsr.w	FindWall
00015B78 301F                       		move.w	(sp)+,d0
00015B7A 143C 0040                  		move.b	#$40,d2
00015B7E 6000 FD90                  		bra.w	loc_14DD0
00015B82                            
00015B82                            ; ---------------------------------------------------------------------------
00015B82                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015B82                            ; ---------------------------------------------------------------------------
00015B82                            
00015B82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B82                            
00015B82                            
00015B82                            Sonic_HitWall:				; XREF: Sonic_Floor
00015B82 3428 000C                  		move.w	$C(a0),d2
00015B86 3628 0008                  		move.w	8(a0),d3
00015B8A                            
00015B8A                            loc_1504A:
00015B8A 0443 000A                  		subi.w	#$A,d3
00015B8E 0A43 000F                  		eori.w	#$F,d3
00015B92 49F8 F768                  		lea	($FFFFF768).w,a4
00015B96 367C FFF0                  		movea.w	#-$10,a3
00015B9A 3C3C 0800                  		move.w	#$800,d6
00015B9E 7A0E                       		moveq	#$E,d5
00015BA0 6100 FAAA                  		bsr.w	FindWall
00015BA4 143C 0040                  		move.b	#$40,d2
00015BA8 6000 FDA0                  		bra.w	loc_14E0A
00015BAC                            ; End of function Sonic_HitWall
00015BAC                            
00015BAC                            ; ---------------------------------------------------------------------------
00015BAC                            ; Subroutine to	detect when an object hits a wall to its left
00015BAC                            ; ---------------------------------------------------------------------------
00015BAC                            
00015BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015BAC                            
00015BAC                            
00015BAC                            ObjHitWallLeft:
00015BAC D668 0008                  		add.w	8(a0),d3
00015BB0 3428 000C                  		move.w	$C(a0),d2
00015BB4 49F8 F768                  		lea	($FFFFF768).w,a4
00015BB8 18BC 0000                  		move.b	#0,(a4)
00015BBC 367C FFF0                  		movea.w	#-$10,a3
00015BC0 3C3C 0800                  		move.w	#$800,d6
00015BC4 7A0E                       		moveq	#$E,d5
00015BC6 6100 FA84                  		bsr.w	FindWall
00015BCA 1638 F768                  		move.b	($FFFFF768).w,d3
00015BCE 0803 0000                  		btst	#0,d3
00015BD2 6700                       		beq.s	locret_15098
00015BD4 163C 0040                  		move.b	#$40,d3
00015BD8                            
00015BD8                            locret_15098:
00015BD8 4E75                       		rts	
00015BDA                            ; End of function ObjHitWallLeft
00015BDA                            
00015BDA                            ; ===========================================================================
00015BDA                            ; ---------------------------------------------------------------------------
00015BDA                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015BDA                            ; ---------------------------------------------------------------------------
00015BDA                            
00015BDA                            Obj66:					; XREF: Obj_Index
00015BDA 7000                       		moveq	#0,d0
00015BDC 1028 0024                  		move.b	$24(a0),d0
00015BE0 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015BE4 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015BE8                            ; ===========================================================================
00015BE8 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015BEA 0000                       		dc.w Obj66_Action-Obj66_Index
00015BEC 0000                       		dc.w Obj66_Display-Obj66_Index
00015BEE 0000                       		dc.w Obj66_Release-Obj66_Index
00015BF0                            ; ===========================================================================
00015BF0                            
00015BF0                            Obj66_Main:				; XREF: Obj66_Index
00015BF0 5428 0024                  		addq.b	#2,$24(a0)
00015BF4 323C 0001                  		move.w	#1,d1
00015BF8 2248                       		movea.l	a0,a1
00015BFA 6000                       		bra.s	Obj66_MakeItem
00015BFC                            ; ===========================================================================
00015BFC                            
00015BFC                            Obj66_Loop:
00015BFC 6100 88D4                  		bsr.w	SingleObjLoad
00015C00 6600                       		bne.s	loc_150FE
00015C02 12BC 0066                  		move.b	#$66,0(a1)
00015C06 5829 0024                  		addq.b	#4,$24(a1)
00015C0A 3368 0008 0008             		move.w	8(a0),8(a1)
00015C10 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015C16 137C 0003 0018             		move.b	#3,$18(a1)
00015C1C 137C 0010 001A             		move.b	#$10,$1A(a1)
00015C22                            
00015C22                            Obj66_MakeItem:				; XREF: Obj66_Main
00015C22 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015C2A 337C 4348 0002             		move.w	#$4348,2(a1)
00015C30 0029 0004 0001             		ori.b	#4,1(a1)
00015C36 137C 0038 0019             		move.b	#$38,$19(a1)
00015C3C                            
00015C3C                            loc_150FE:
00015C3C 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015C40                            
00015C40 117C 0030 0019             		move.b	#$30,$19(a0)
00015C46 117C 0004 0018             		move.b	#4,$18(a0)
00015C4C 317C 003C 0030             		move.w	#$3C,$30(a0)
00015C52 117C 0001 0034             		move.b	#1,$34(a0)
00015C58 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015C5E                            
00015C5E                            Obj66_Action:				; XREF: Obj66_Index
00015C5E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015C62 4A28 0001                  		tst.b	1(a0)
00015C66 6A00 0000                  		bpl.w	Obj66_Display
00015C6A 323C 0030                  		move.w	#$30,d1
00015C6E 3401                       		move.w	d1,d2
00015C70 3602                       		move.w	d2,d3
00015C72 5243                       		addq.w	#1,d3
00015C74 3828 0008                  		move.w	8(a0),d4
00015C78 6100 A7A2                  		bsr.w	SolidObject
00015C7C 0828 0005 0022             		btst	#5,$22(a0)
00015C82 6700 0000                  		beq.w	Obj66_Display
00015C86 43F8 D000                  		lea	($FFFFD000).w,a1
00015C8A 720E                       		moveq	#$E,d1
00015C8C 3029 0008                  		move.w	8(a1),d0
00015C90 B068 0008                  		cmp.w	8(a0),d0
00015C94 6500                       		bcs.s	Obj66_GrabSonic
00015C96 7207                       		moveq	#7,d1
00015C98                            
00015C98                            Obj66_GrabSonic:
00015C98 B228 001A                  		cmp.b	$1A(a0),d1
00015C9C 6600                       		bne.s	Obj66_Display
00015C9E 1141 0032                  		move.b	d1,$32(a0)
00015CA2 5828 0024                  		addq.b	#4,$24(a0)
00015CA6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015CAC 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015CB2 337C 0800 0014             		move.w	#$800,$14(a1)
00015CB8 337C 0000 0010             		move.w	#0,$10(a1)
00015CBE 337C 0000 0012             		move.w	#0,$12(a1)
00015CC4 08A8 0005 0022             		bclr	#5,$22(a0)
00015CCA 08A9 0005 0022             		bclr	#5,$22(a1)
00015CD0 08E9 0001 0022             		bset	#1,$22(a1)
00015CD6 3429 0008                  		move.w	8(a1),d2
00015CDA 3629 000C                  		move.w	$C(a1),d3
00015CDE 6100 0000                  		bsr.w	Obj66_ChgPos
00015CE2 D569 0008                  		add.w	d2,8(a1)
00015CE6 D769 000C                  		add.w	d3,$C(a1)
00015CEA E0E9 0008                  		asr	8(a1)
00015CEE E0E9 000C                  		asr	$C(a1)
00015CF2                            
00015CF2                            Obj66_Display:				; XREF: Obj66_Index
00015CF2 6000 A400                  		bra.w	MarkObjGone
00015CF6                            ; ===========================================================================
00015CF6                            
00015CF6                            Obj66_Release:				; XREF: Obj66_Index
00015CF6 1028 001A                  		move.b	$1A(a0),d0
00015CFA 0C00 0004                  		cmpi.b	#4,d0
00015CFE 6700                       		beq.s	loc_151C8
00015D00 0C00 0007                  		cmpi.b	#7,d0
00015D04 6600                       		bne.s	loc_151F8
00015D06                            
00015D06                            loc_151C8:
00015D06 B028 0032                  		cmp.b	$32(a0),d0
00015D0A 6700                       		beq.s	loc_151F8
00015D0C 43F8 D000                  		lea	($FFFFD000).w,a1
00015D10 337C 0000 0010             		move.w	#0,$10(a1)
00015D16 337C 0800 0012             		move.w	#$800,$12(a1)
00015D1C 0C00 0004                  		cmpi.b	#4,d0
00015D20 6700                       		beq.s	loc_151F0
00015D22 337C 0800 0010             		move.w	#$800,$10(a1)
00015D28 337C 0800 0012             		move.w	#$800,$12(a1)
00015D2E                            
00015D2E                            loc_151F0:
00015D2E 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015D32 5928 0024                  		subq.b	#4,$24(a0)
00015D36                            
00015D36                            loc_151F8:
00015D36 6100                       		bsr.s	Obj66_ChkSwitch
00015D38 6100                       		bsr.s	Obj66_ChgPos
00015D3A 6000 A3B8                  		bra.w	MarkObjGone
00015D3E                            
00015D3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D3E                            
00015D3E                            
00015D3E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015D3E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015D42 7000                       		moveq	#0,d0
00015D44 1028 0038                  		move.b	$38(a0),d0
00015D48 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015D4E 6700                       		beq.s	loc_15224	; if not, branch
00015D50 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015D54 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015D56 4428 0034                  		neg.b	$34(a0)
00015D5A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015D60 6000                       		bra.s	Obj66_Animate
00015D62                            ; ===========================================================================
00015D62                            
00015D62                            loc_15224:
00015D62 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015D66                            
00015D66                            Obj66_Animate:
00015D66 5328 001E                  		subq.b	#1,$1E(a0)
00015D6A 6A00                       		bpl.s	locret_15246
00015D6C 117C 0007 001E             		move.b	#7,$1E(a0)
00015D72 1228 0034                  		move.b	$34(a0),d1
00015D76 1028 001A                  		move.b	$1A(a0),d0
00015D7A D001                       		add.b	d1,d0
00015D7C 0200 000F                  		andi.b	#$F,d0
00015D80 1140 001A                  		move.b	d0,$1A(a0)
00015D84                            
00015D84                            locret_15246:
00015D84 4E75                       		rts	
00015D86                            ; End of function Obj66_ChkSwitch
00015D86                            
00015D86                            
00015D86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D86                            
00015D86                            
00015D86                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015D86 43F8 D000                  		lea	($FFFFD000).w,a1
00015D8A 7000                       		moveq	#0,d0
00015D8C 1028 001A                  		move.b	$1A(a0),d0
00015D90 D040                       		add.w	d0,d0
00015D92 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015D96 101A                       		move.b	(a2)+,d0
00015D98 4880                       		ext.w	d0
00015D9A D068 0008                  		add.w	8(a0),d0
00015D9E 3340 0008                  		move.w	d0,8(a1)
00015DA2 101A                       		move.b	(a2)+,d0
00015DA4 4880                       		ext.w	d0
00015DA6 D068 000C                  		add.w	$C(a0),d0
00015DAA 3340 000C                  		move.w	d0,$C(a1)
00015DAE 4E75                       		rts	
00015DB0                            ; End of function Obj66_ChgPos
00015DB0                            
00015DB0                            ; ===========================================================================
00015DB0 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015DB4 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015DB8 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015DBC 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015DC0 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015DC4 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015DC8 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015DCC E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015DD0                            ; ---------------------------------------------------------------------------
00015DD0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DD0                            ; ---------------------------------------------------------------------------
00015DD0                            Map_obj66:
00015DD0                            	include "_maps\obj66.asm"
00015DD0                            ; ---------------------------------------------------------------------------
00015DD0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015DD0                            ; ---------------------------------------------------------------------------
00015DD0 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015DD4 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015DD8 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015DDC 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015DE0 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015DE4 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015DE8 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015DEC 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015DF0 0000                       		dc.w byte_154A4-Map_obj66
00015DF2 06                         byte_152B4:	dc.b 6
00015DF3 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015DF8 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015DFD E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015E02 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015E07 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015E0C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015E11 06                         byte_152D3:	dc.b 6
00015E12 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015E17 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015E1C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015E21 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015E26 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015E2B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015E30 06                         byte_152F2:	dc.b 6
00015E31 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015E36 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015E3B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015E40 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015E45 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015E4A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015E4F 06                         byte_15311:	dc.b 6
00015E50 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015E55 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015E5A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015E5F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015E64 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015E69 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015E6E 06                         byte_15330:	dc.b 6
00015E6F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015E74 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015E79 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015E7E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015E83 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015E88 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015E8D 06                         byte_1534F:	dc.b 6
00015E8E 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015E93 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015E98 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015E9D 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015EA2 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015EA7 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015EAC 06                         byte_1536E:	dc.b 6
00015EAD 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015EB2 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015EB7 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015EBC 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015EC1 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015EC6 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015ECB 06                         byte_1538D:	dc.b 6
00015ECC 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015ED1 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015ED6 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015EDB F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015EE0 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015EE5 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015EEA 06                         byte_153AC:	dc.b 6
00015EEB E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015EF0 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015EF5 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015EFA E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015EFF 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015F04 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015F09 06                         byte_153CB:	dc.b 6
00015F0A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015F0F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015F14 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015F19 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015F1E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015F23 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015F28 06                         byte_153EA:	dc.b 6
00015F29 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015F2E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015F33 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015F38 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015F3D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015F42 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015F47 06                         byte_15409:	dc.b 6
00015F48 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015F4D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015F52 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015F57 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015F5C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015F61 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015F66 06                         byte_15428:	dc.b 6
00015F67 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015F6C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015F71 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015F76 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015F7B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015F80 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015F85 06                         byte_15447:	dc.b 6
00015F86 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015F8B D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015F90 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015F95 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015F9A E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015F9F E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015FA4 06                         byte_15466:	dc.b 6
00015FA5 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015FAA D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015FAF D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015FB4 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015FB9 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015FBE E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015FC3 06                         byte_15485:	dc.b 6
00015FC4 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015FC9 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015FCE DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015FD3 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015FD8 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015FDD F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015FE2 0C                         byte_154A4:	dc.b $C
00015FE3 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015FE8 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015FED E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015FF2 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015FF7 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015FFC E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00016001 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016006 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001600B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00016010 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016015 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001601A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00016020 00                         		even
00016020 00                         		even
00016020                            
00016020                            ; ===========================================================================
00016020                            ; ---------------------------------------------------------------------------
00016020                            ; Object 67 - disc that	you run	around (SBZ)
00016020                            ; ---------------------------------------------------------------------------
00016020                            
00016020                            Obj67:					; XREF: Obj_Index
00016020 7000                       		moveq	#0,d0
00016022 1028 0024                  		move.b	$24(a0),d0
00016026 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001602A 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001602E                            ; ===========================================================================
0001602E 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00016030 0000                       		dc.w Obj67_Action-Obj67_Index
00016032                            ; ===========================================================================
00016032                            
00016032                            Obj67_Main:				; XREF: Obj67_Index
00016032 5428 0024                  		addq.b	#2,$24(a0)
00016036 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001603E 317C C344 0002             		move.w	#$C344,2(a0)
00016044 117C 0004 0001             		move.b	#4,1(a0)
0001604A 117C 0004 0018             		move.b	#4,$18(a0)
00016050 117C 0008 0019             		move.b	#8,$19(a0)
00016056 3168 0008 0032             		move.w	8(a0),$32(a0)
0001605C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016062 117C 0018 0034             		move.b	#$18,$34(a0)
00016068 117C 0048 0038             		move.b	#$48,$38(a0)
0001606E 1228 0028                  		move.b	$28(a0),d1	; get object type
00016072 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016076 6700                       		beq.s	loc_15546
00016078 117C 0010 0034             		move.b	#$10,$34(a0)
0001607E 117C 0038 0038             		move.b	#$38,$38(a0)
00016084                            
00016084                            loc_15546:
00016084 1228 0028                  		move.b	$28(a0),d1	; get object type
00016088 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001608C 4881                       		ext.w	d1
0001608E E741                       		asl.w	#3,d1
00016090 3141 0036                  		move.w	d1,$36(a0)
00016094 1028 0022                  		move.b	$22(a0),d0
00016098 E418                       		ror.b	#2,d0
0001609A 0200 00C0                  		andi.b	#-$40,d0
0001609E 1140 0026                  		move.b	d0,$26(a0)
000160A2                            
000160A2                            Obj67_Action:				; XREF: Obj67_Index
000160A2 6100 0000                  		bsr.w	Obj67_MoveSonic
000160A6 6100 0000                  		bsr.w	Obj67_MoveSpot
000160AA 6000 0000                  		bra.w	Obj67_ChkDel
000160AE                            ; ===========================================================================
000160AE                            
000160AE                            Obj67_MoveSonic:			; XREF: Obj67_Action
000160AE 7400                       		moveq	#0,d2
000160B0 1428 0038                  		move.b	$38(a0),d2
000160B4 3602                       		move.w	d2,d3
000160B6 D643                       		add.w	d3,d3
000160B8 43F8 D000                  		lea	($FFFFD000).w,a1
000160BC 3029 0008                  		move.w	8(a1),d0
000160C0 9068 0032                  		sub.w	$32(a0),d0
000160C4 D042                       		add.w	d2,d0
000160C6 B043                       		cmp.w	d3,d0
000160C8 6400                       		bcc.s	loc_155A8
000160CA 3229 000C                  		move.w	$C(a1),d1
000160CE 9268 0030                  		sub.w	$30(a0),d1
000160D2 D242                       		add.w	d2,d1
000160D4 B243                       		cmp.w	d3,d1
000160D6 6400                       		bcc.s	loc_155A8
000160D8 0829 0001 0022             		btst	#1,$22(a1)
000160DE 6700                       		beq.s	loc_155B8
000160E0 4228 003A                  		clr.b	$3A(a0)
000160E4 4E75                       		rts	
000160E6                            ; ===========================================================================
000160E6                            
000160E6                            loc_155A8:
000160E6 4A28 003A                  		tst.b	$3A(a0)
000160EA 6700                       		beq.s	locret_155B6
000160EC 4229 0038                  		clr.b	$38(a1)
000160F0 4228 003A                  		clr.b	$3A(a0)
000160F4                            
000160F4                            locret_155B6:
000160F4 4E75                       		rts	
000160F6                            ; ===========================================================================
000160F6                            
000160F6                            loc_155B8:
000160F6 4A28 003A                  		tst.b	$3A(a0)
000160FA 6600                       		bne.s	loc_155E2
000160FC 117C 0001 003A             		move.b	#1,$3A(a0)
00016102 0829 0002 0022             		btst	#2,$22(a1)
00016108 6600                       		bne.s	loc_155D0
0001610A 4229 001C                  		clr.b	$1C(a1)
0001610E                            
0001610E                            loc_155D0:
0001610E 08A9 0005 0022             		bclr	#5,$22(a1)
00016114 137C 0001 001D             		move.b	#1,$1D(a1)
0001611A 137C 0001 0038             		move.b	#1,$38(a1)
00016120                            
00016120                            loc_155E2:
00016120 3029 0014                  		move.w	$14(a1),d0
00016124 4A68 0036                  		tst.w	$36(a0)
00016128 6A00                       		bpl.s	loc_15608
0001612A 0C40 FC00                  		cmpi.w	#-$400,d0
0001612E 6F00                       		ble.s	loc_155FA
00016130 337C FC00 0014             		move.w	#-$400,$14(a1)
00016136 4E75                       		rts	
00016138                            ; ===========================================================================
00016138                            
00016138                            loc_155FA:
00016138 0C40 F100                  		cmpi.w	#-$F00,d0
0001613C 6C00                       		bge.s	locret_15606
0001613E 337C F100 0014             		move.w	#-$F00,$14(a1)
00016144                            
00016144                            locret_15606:
00016144 4E75                       		rts	
00016146                            ; ===========================================================================
00016146                            
00016146                            loc_15608:
00016146 0C40 0400                  		cmpi.w	#$400,d0
0001614A 6C00                       		bge.s	loc_15616
0001614C 337C 0400 0014             		move.w	#$400,$14(a1)
00016152 4E75                       		rts	
00016154                            ; ===========================================================================
00016154                            
00016154                            loc_15616:
00016154 0C40 0F00                  		cmpi.w	#$F00,d0
00016158 6F00                       		ble.s	locret_15622
0001615A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00016160                            
00016160                            locret_15622:
00016160 4E75                       		rts	
00016162                            ; ===========================================================================
00016162                            
00016162                            Obj67_MoveSpot:				; XREF: Obj67_Action
00016162 3028 0036                  		move.w	$36(a0),d0
00016166 D168 0026                  		add.w	d0,$26(a0)
0001616A 1028 0026                  		move.b	$26(a0),d0
0001616E 4EB9 0000 2D34             		jsr	(CalcSine).l
00016174 3428 0030                  		move.w	$30(a0),d2
00016178 3628 0032                  		move.w	$32(a0),d3
0001617C 7800                       		moveq	#0,d4
0001617E 1828 0034                  		move.b	$34(a0),d4
00016182 E14C                       		lsl.w	#8,d4
00016184 2A04                       		move.l	d4,d5
00016186 C9C0                       		muls.w	d0,d4
00016188 4844                       		swap	d4
0001618A CBC1                       		muls.w	d1,d5
0001618C 4845                       		swap	d5
0001618E D842                       		add.w	d2,d4
00016190 DA43                       		add.w	d3,d5
00016192 3144 000C                  		move.w	d4,$C(a0)
00016196 3145 0008                  		move.w	d5,8(a0)
0001619A 4E75                       		rts	
0001619C                            ; ===========================================================================
0001619C                            
0001619C                            Obj67_ChkDel:				; XREF: Obj67_Action
0001619C 3028 0032                  		move.w	$32(a0),d0
000161A0 0240 FF80                  		andi.w	#-$80,d0
000161A4 3238 F700                  		move.w	($FFFFF700).w,d1
000161A8 0441 0080                  		subi.w	#$80,d1
000161AC 0241 FF80                  		andi.w	#-$80,d1
000161B0 9041                       		sub.w	d1,d0
000161B2 0C40 0280                  		cmpi.w	#$280,d0
000161B6 6200                       		bhi.s	Obj67_Delete
000161B8 4EF9 0000 E04C             		jmp	DisplaySprite
000161BE                            ; ===========================================================================
000161BE                            
000161BE                            Obj67_Delete:
000161BE 4EF9 0000 E088             		jmp	DeleteObject
000161C4                            ; ===========================================================================
000161C4                            ; ---------------------------------------------------------------------------
000161C4                            ; Sprite mappings - disc that you run around (SBZ)
000161C4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161C4                            ; part of the level tiles.)
000161C4                            ; ---------------------------------------------------------------------------
000161C4                            Map_obj67:
000161C4                            	include "_maps\obj67.asm"
000161C4                            ; ---------------------------------------------------------------------------
000161C4                            ; Sprite mappings - disc that you run around (SBZ)
000161C4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000161C4                            ; part of the level tiles.)
000161C4                            ; ---------------------------------------------------------------------------
000161C4 0000                       		dc.w byte_15688-Map_obj67
000161C6 01                         byte_15688:	dc.b 1
000161C7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000161CC                            		even
000161CC                            		even
000161CC                            
000161CC                            ; ===========================================================================
000161CC                            ; ---------------------------------------------------------------------------
000161CC                            ; Object 68 - conveyor belts (SBZ)
000161CC                            ; ---------------------------------------------------------------------------
000161CC                            
000161CC                            Obj68:					; XREF: Obj_Index
000161CC 7000                       		moveq	#0,d0
000161CE 1028 0024                  		move.b	$24(a0),d0
000161D2 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000161D6 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000161DA                            ; ===========================================================================
000161DA 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000161DC 0000                       		dc.w Obj68_Action-Obj68_Index
000161DE                            ; ===========================================================================
000161DE                            
000161DE                            Obj68_Main:				; XREF: Obj68_Index
000161DE 5428 0024                  		addq.b	#2,$24(a0)
000161E2 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000161E8 1228 0028                  		move.b	$28(a0),d1	; get object type
000161EC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000161F0 6700                       		beq.s	loc_156BA	; if zero, branch
000161F2 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000161F8                            
000161F8                            loc_156BA:
000161F8 1228 0028                  		move.b	$28(a0),d1	; get object type
000161FC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016200 4881                       		ext.w	d1
00016202 E841                       		asr.w	#4,d1
00016204 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016208                            
00016208                            Obj68_Action:				; XREF: Obj68_Index
00016208 6100                       		bsr.s	Obj68_MoveSonic
0001620A 3028 0008                  		move.w	8(a0),d0
0001620E 0240 FF80                  		andi.w	#$FF80,d0
00016212 3238 F700                  		move.w	($FFFFF700).w,d1
00016216 0441 0080                  		subi.w	#$80,d1
0001621A 0241 FF80                  		andi.w	#$FF80,d1
0001621E 9041                       		sub.w	d1,d0
00016220 0C40 0280                  		cmpi.w	#$280,d0
00016224 6200                       		bhi.s	Obj68_Delete
00016226 4E75                       		rts	
00016228                            ; ===========================================================================
00016228                            
00016228                            Obj68_Delete:
00016228 4EF9 0000 E088             		jmp	DeleteObject
0001622E                            ; ===========================================================================
0001622E                            
0001622E                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001622E 7400                       		moveq	#0,d2
00016230 1428 0038                  		move.b	$38(a0),d2
00016234 3602                       		move.w	d2,d3
00016236 D643                       		add.w	d3,d3
00016238 43F8 D000                  		lea	($FFFFD000).w,a1
0001623C 3029 0008                  		move.w	8(a1),d0
00016240 9068 0008                  		sub.w	8(a0),d0
00016244 D042                       		add.w	d2,d0
00016246 B043                       		cmp.w	d3,d0
00016248 6400                       		bcc.s	locret_1572E
0001624A 3229 000C                  		move.w	$C(a1),d1
0001624E 9268 000C                  		sub.w	$C(a0),d1
00016252 0641 0030                  		addi.w	#$30,d1
00016256 0C41 0030                  		cmpi.w	#$30,d1
0001625A 6400                       		bcc.s	locret_1572E
0001625C 0829 0001 0022             		btst	#1,$22(a1)
00016262 6600                       		bne.s	locret_1572E
00016264 3028 0036                  		move.w	$36(a0),d0
00016268 D169 0008                  		add.w	d0,8(a1)
0001626C                            
0001626C                            locret_1572E:
0001626C 4E75                       		rts	
0001626E                            
0001626E                            ; ===========================================================================
0001626E                            ; ---------------------------------------------------------------------------
0001626E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001626E                            ; ---------------------------------------------------------------------------
0001626E                            
0001626E                            Obj69:					; XREF: Obj_Index
0001626E 7000                       		moveq	#0,d0
00016270 1028 0024                  		move.b	$24(a0),d0
00016274 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016278 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001627C                            ; ===========================================================================
0001627C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001627E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016280 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016282                            ; ===========================================================================
00016282                            
00016282                            Obj69_Main:				; XREF: Obj69_Index
00016282 5428 0024                  		addq.b	#2,$24(a0)
00016286 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001628E 317C 4492 0002             		move.w	#$4492,2(a0)
00016294 0028 0004 0001             		ori.b	#4,1(a0)
0001629A 117C 0080 0019             		move.b	#$80,$19(a0)
000162A0 7000                       		moveq	#0,d0
000162A2 1028 0028                  		move.b	$28(a0),d0
000162A6 0240 000F                  		andi.w	#$F,d0
000162AA C0FC 003C                  		mulu.w	#$3C,d0
000162AE 3140 0032                  		move.w	d0,$32(a0)
000162B2 4A28 0028                  		tst.b	$28(a0)
000162B6 6A00                       		bpl.s	Obj69_Trapdoor
000162B8 5428 0024                  		addq.b	#2,$24(a0)
000162BC 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000162C4 317C 04DF 0002             		move.w	#$4DF,2(a0)
000162CA 117C 0010 0019             		move.b	#$10,$19(a0)
000162D0 117C 0002 001C             		move.b	#2,$1C(a0)
000162D6 7000                       		moveq	#0,d0
000162D8 1028 0028                  		move.b	$28(a0),d0	; get object type
000162DC 3200                       		move.w	d0,d1
000162DE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000162E2 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000162E6 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000162EA 3140 0032                  		move.w	d0,$32(a0)
000162EE 0241 0070                  		andi.w	#$70,d1
000162F2 0641 0010                  		addi.w	#$10,d1
000162F6 E549                       		lsl.w	#2,d1
000162F8 5341                       		subq.w	#1,d1
000162FA 3141 0036                  		move.w	d1,$36(a0)
000162FE 6000                       		bra.s	Obj69_Spinner
00016300                            ; ===========================================================================
00016300                            
00016300                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016300 5368 0030                  		subq.w	#1,$30(a0)
00016304 6A00                       		bpl.s	Obj69_Animate
00016306 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001630C 0868 0000 001C             		bchg	#0,$1C(a0)
00016312 4A28 0001                  		tst.b	1(a0)
00016316 6A00                       		bpl.s	Obj69_Animate
00016318 303C 00BB                  		move.w	#$BB,d0
0001631C 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play door sound
00016322                            
00016322                            Obj69_Animate:
00016322 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016328 4EB9 0000 B09A             		jsr	AnimateSprite
0001632E 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016332 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016334 323C 004B                  		move.w	#$4B,d1
00016338 343C 000C                  		move.w	#$C,d2
0001633C 3602                       		move.w	d2,d3
0001633E 5243                       		addq.w	#1,d3
00016340 3828 0008                  		move.w	8(a0),d4
00016344 6100 A0D6                  		bsr.w	SolidObject
00016348 6000 9DAA                  		bra.w	MarkObjGone
0001634C                            ; ===========================================================================
0001634C                            
0001634C                            Obj69_NotSolid:
0001634C 0828 0003 0022             		btst	#3,$22(a0)
00016352 6700                       		beq.s	Obj69_Display
00016354 43F8 D000                  		lea	($FFFFD000).w,a1
00016358 08A9 0003 0022             		bclr	#3,$22(a1)
0001635E 08A8 0003 0022             		bclr	#3,$22(a0)
00016364 4228 0025                  		clr.b	$25(a0)
00016368                            
00016368                            Obj69_Display:
00016368 6000 9D8A                  		bra.w	MarkObjGone
0001636C                            ; ===========================================================================
0001636C                            
0001636C                            Obj69_Spinner:				; XREF: Obj69_Index
0001636C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016370 C068 0036                  		and.w	$36(a0),d0
00016374 6600                       		bne.s	Obj69_Delay
00016376 117C 0001 0034             		move.b	#1,$34(a0)
0001637C                            
0001637C                            Obj69_Delay:
0001637C 4A28 0034                  		tst.b	$34(a0)
00016380 6700                       		beq.s	Obj69_Animate2
00016382 5368 0030                  		subq.w	#1,$30(a0)
00016386 6A00                       		bpl.s	Obj69_Animate2
00016388 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001638E 4228 0034                  		clr.b	$34(a0)
00016392 0868 0000 001C             		bchg	#0,$1C(a0)
00016398                            
00016398                            Obj69_Animate2:
00016398 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001639E 4EB9 0000 B09A             		jsr	AnimateSprite
000163A4 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000163A8 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000163AA 323C 001B                  		move.w	#$1B,d1
000163AE 343C 0007                  		move.w	#7,d2
000163B2 3602                       		move.w	d2,d3
000163B4 5243                       		addq.w	#1,d3
000163B6 3828 0008                  		move.w	8(a0),d4
000163BA 6100 A060                  		bsr.w	SolidObject
000163BE 6000 9D34                  		bra.w	MarkObjGone
000163C2                            ; ===========================================================================
000163C2                            
000163C2                            Obj69_NotSolid2:
000163C2 0828 0003 0022             		btst	#3,$22(a0)
000163C8 6700                       		beq.s	Obj69_Display2
000163CA 43F8 D000                  		lea	($FFFFD000).w,a1
000163CE 08A9 0003 0022             		bclr	#3,$22(a1)
000163D4 08A8 0003 0022             		bclr	#3,$22(a0)
000163DA 4228 0025                  		clr.b	$25(a0)
000163DE                            
000163DE                            Obj69_Display2:
000163DE 6000 9D14                  		bra.w	MarkObjGone
000163E2                            ; ===========================================================================
000163E2                            Ani_obj69:
000163E2                            	include "_anim\obj69.asm"
000163E2                            ; ---------------------------------------------------------------------------
000163E2                            ; Animation script - trapdoor (SBZ)
000163E2                            ; ---------------------------------------------------------------------------
000163E2 0000                       		dc.w byte_158AC-Ani_obj69
000163E4 0000                       		dc.w byte_158B2-Ani_obj69
000163E6 0000                       		dc.w byte_158B8-Ani_obj69
000163E8 0000                       		dc.w byte_158CC-Ani_obj69
000163EA 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000163F0 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000163F6 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016403 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001640A 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016417 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001641E                            		even
0001641E                            		even
0001641E                            
0001641E                            ; ---------------------------------------------------------------------------
0001641E                            ; Sprite mappings - trapdoor (SBZ)
0001641E                            ; ---------------------------------------------------------------------------
0001641E                            Map_obj69:
0001641E                            	include "_maps\obj69.asm"
0001641E                            ; ---------------------------------------------------------------------------
0001641E                            ; Sprite mappings - trapdoor (SBZ)
0001641E                            ; ---------------------------------------------------------------------------
0001641E 0000                       		dc.w byte_158E6-Map_obj69
00016420 0000                       		dc.w byte_158FB-Map_obj69
00016422 0000                       		dc.w byte_15924-Map_obj69
00016424 04                         byte_158E6:	dc.b 4
00016425 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001642A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001642F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016434 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016439 08                         byte_158FB:	dc.b 8
0001643A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001643F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016444 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016449 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001644E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016453 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016458 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001645D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016462 04                         byte_15924:	dc.b 4
00016463 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016468 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001646D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016472 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016478 00                         		even
00016478 00                         		even
00016478                            
00016478                            ; ---------------------------------------------------------------------------
00016478                            ; Sprite mappings - spinning platforms (SBZ)
00016478                            ; ---------------------------------------------------------------------------
00016478                            Map_obj69a:
00016478                            	include "_maps\obj69a.asm"
00016478                            ; ---------------------------------------------------------------------------
00016478                            ; Sprite mappings - spinning platforms (SBZ)
00016478                            ; ---------------------------------------------------------------------------
00016478 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001647C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016480 0000                       		dc.w byte_15970-Map_obj69a
00016482 02                         byte_15944:	dc.b 2
00016483 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016488 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001648D 02                         byte_1594F:	dc.b 2
0001648E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016493 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016498 02                         byte_1595A:	dc.b 2
00016499 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001649E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000164A3 02                         byte_15965:	dc.b 2
000164A4 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000164A9 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000164AE 02                         byte_15970:	dc.b 2
000164AF F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000164B4 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000164BA 00                         		even
000164BA 00                         		even
000164BA                            
000164BA                            ; ===========================================================================
000164BA                            ; ---------------------------------------------------------------------------
000164BA                            ; Object 6A - ground saws and pizza cutters (SBZ)
000164BA                            ; ---------------------------------------------------------------------------
000164BA                            
000164BA                            Obj6A:					; XREF: Obj_Index
000164BA 7000                       		moveq	#0,d0
000164BC 1028 0024                  		move.b	$24(a0),d0
000164C0 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000164C4 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000164C8                            ; ===========================================================================
000164C8 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000164CA 0000                       		dc.w Obj6A_Action-Obj6A_Index
000164CC                            ; ===========================================================================
000164CC                            
000164CC                            Obj6A_Main:				; XREF: Obj6A_Index
000164CC 5428 0024                  		addq.b	#2,$24(a0)
000164D0 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000164D8 317C 43B5 0002             		move.w	#$43B5,2(a0)
000164DE 117C 0004 0001             		move.b	#4,1(a0)
000164E4 117C 0004 0018             		move.b	#4,$18(a0)
000164EA 117C 0020 0019             		move.b	#$20,$19(a0)
000164F0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164F6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000164FC 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016502 6400                       		bcc.s	Obj6A_Action
00016504 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001650A                            
0001650A                            Obj6A_Action:				; XREF: Obj6A_Index
0001650A 7000                       		moveq	#0,d0
0001650C 1028 0028                  		move.b	$28(a0),d0
00016510 0240 0007                  		andi.w	#7,d0
00016514 D040                       		add.w	d0,d0
00016516 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001651A 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001651E 3028 003A                  		move.w	$3A(a0),d0
00016522 0240 FF80                  		andi.w	#$FF80,d0
00016526 3238 F700                  		move.w	($FFFFF700).w,d1
0001652A 0441 0080                  		subi.w	#$80,d1
0001652E 0241 FF80                  		andi.w	#$FF80,d1
00016532 9041                       		sub.w	d1,d0
00016534 0C40 0280                  		cmpi.w	#$280,d0
00016538 6200                       		bhi.s	Obj6A_Delete
0001653A 4EF9 0000 E04C             		jmp	DisplaySprite
00016540                            ; ===========================================================================
00016540                            
00016540                            Obj6A_Delete:
00016540 4EF9 0000 E088             		jmp	DeleteObject
00016546                            ; ===========================================================================
00016546 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001654A 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001654E 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016550                            ; ===========================================================================
00016550                            
00016550                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016550 4E75                       		rts	
00016552                            ; ===========================================================================
00016552                            
00016552                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016552 323C 0060                  		move.w	#$60,d1
00016556 7000                       		moveq	#0,d0
00016558 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001655C 0828 0000 0022             		btst	#0,$22(a0)
00016562 6700                       		beq.s	Obj6A_Animate01
00016564 4440                       		neg.w	d0
00016566 D041                       		add.w	d1,d0
00016568                            
00016568                            Obj6A_Animate01:
00016568 3228 003A                  		move.w	$3A(a0),d1
0001656C 9240                       		sub.w	d0,d1
0001656E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016572 5328 001E                  		subq.b	#1,$1E(a0)
00016576 6A00                       		bpl.s	loc_15A46
00016578 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001657E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016584                            
00016584                            loc_15A46:
00016584 4A28 0001                  		tst.b	1(a0)
00016588 6A00                       		bpl.s	locret_15A60
0001658A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001658E 0240 000F                  		andi.w	#$F,d0
00016592 6600                       		bne.s	locret_15A60
00016594 303C 00B0                  		move.w	#$B0,d0
00016598 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
0001659E                            
0001659E                            locret_15A60:
0001659E 4E75                       		rts	
000165A0                            ; ===========================================================================
000165A0                            
000165A0                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000165A0 323C 0030                  		move.w	#$30,d1
000165A4 7000                       		moveq	#0,d0
000165A6 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165AA 0828 0000 0022             		btst	#0,$22(a0)
000165B0 6700                       		beq.s	Obj6A_Animate02
000165B2 4440                       		neg.w	d0
000165B4 0640 0080                  		addi.w	#$80,d0
000165B8                            
000165B8                            Obj6A_Animate02:
000165B8 3228 0038                  		move.w	$38(a0),d1
000165BC 9240                       		sub.w	d0,d1
000165BE 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000165C2 5328 001E                  		subq.b	#1,$1E(a0)
000165C6 6A00                       		bpl.s	loc_15A96
000165C8 117C 0002 001E             		move.b	#2,$1E(a0)
000165CE 0868 0000 001A             		bchg	#0,$1A(a0)
000165D4                            
000165D4                            loc_15A96:
000165D4 4A28 0001                  		tst.b	1(a0)
000165D8 6A00                       		bpl.s	locret_15AB0
000165DA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000165DE 0C00 0018                  		cmpi.b	#$18,d0
000165E2 6600                       		bne.s	locret_15AB0
000165E4 303C 00B0                  		move.w	#$B0,d0
000165E8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
000165EE                            
000165EE                            locret_15AB0:
000165EE 4E75                       		rts	
000165F0                            ; ===========================================================================
000165F0                            
000165F0                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000165F0 4A28 003D                  		tst.b	$3D(a0)
000165F4 6600                       		bne.s	Obj6A_Animate03
000165F6 3038 D008                  		move.w	($FFFFD008).w,d0
000165FA 0440 00C0                  		subi.w	#$C0,d0
000165FE 6500                       		bcs.s	loc_15B02
00016600 9068 0008                  		sub.w	8(a0),d0
00016604 6500                       		bcs.s	loc_15B02
00016606 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001660A 0440 0080                  		subi.w	#$80,d0
0001660E B068 000C                  		cmp.w	$C(a0),d0
00016612 6400                       		bcc.s	locret_15B04
00016614 0640 0100                  		addi.w	#$100,d0
00016618 B068 000C                  		cmp.w	$C(a0),d0
0001661C 6500                       		bcs.s	locret_15B04
0001661E 117C 0001 003D             		move.b	#1,$3D(a0)
00016624 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001662A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016630 117C 0002 001A             		move.b	#2,$1A(a0)
00016636 303C 00B0                  		move.w	#$B0,d0
0001663A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
00016640                            
00016640                            loc_15B02:
00016640 588F                       		addq.l	#4,sp
00016642                            
00016642                            locret_15B04:
00016642 4E75                       		rts	
00016644                            ; ===========================================================================
00016644                            
00016644                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016644 4EB9 0000 E026             		jsr	SpeedToPos
0001664A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016650 5328 001E                  		subq.b	#1,$1E(a0)
00016654 6A00                       		bpl.s	locret_15B24
00016656 117C 0002 001E             		move.b	#2,$1E(a0)
0001665C 0868 0000 001A             		bchg	#0,$1A(a0)
00016662                            
00016662                            locret_15B24:
00016662 4E75                       		rts	
00016664                            ; ===========================================================================
00016664                            
00016664                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016664 4A28 003D                  		tst.b	$3D(a0)
00016668 6600                       		bne.s	Obj6A_Animate04
0001666A 3038 D008                  		move.w	($FFFFD008).w,d0
0001666E 0640 00E0                  		addi.w	#$E0,d0
00016672 9068 0008                  		sub.w	8(a0),d0
00016676 6400                       		bcc.s	loc_15B74
00016678 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001667C 0440 0080                  		subi.w	#$80,d0
00016680 B068 000C                  		cmp.w	$C(a0),d0
00016684 6400                       		bcc.s	locret_15B76
00016686 0640 0100                  		addi.w	#$100,d0
0001668A B068 000C                  		cmp.w	$C(a0),d0
0001668E 6500                       		bcs.s	locret_15B76
00016690 117C 0001 003D             		move.b	#1,$3D(a0)
00016696 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
0001669C 117C 00A2 0020             		move.b	#$A2,$20(a0)
000166A2 117C 0002 001A             		move.b	#2,$1A(a0)
000166A8 303C 00B0                  		move.w	#$B0,d0
000166AC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play saw sound
000166B2                            
000166B2                            loc_15B74:
000166B2 588F                       		addq.l	#4,sp
000166B4                            
000166B4                            locret_15B76:
000166B4 4E75                       		rts	
000166B6                            ; ===========================================================================
000166B6                            
000166B6                            Obj6A_Animate04:
000166B6 4EB9 0000 E026             		jsr	SpeedToPos
000166BC 3168 0008 003A             		move.w	8(a0),$3A(a0)
000166C2 5328 001E                  		subq.b	#1,$1E(a0)
000166C6 6A00                       		bpl.s	locret_15B96
000166C8 117C 0002 001E             		move.b	#2,$1E(a0)
000166CE 0868 0000 001A             		bchg	#0,$1A(a0)
000166D4                            
000166D4                            locret_15B96:
000166D4 4E75                       		rts	
000166D6                            ; ===========================================================================
000166D6                            ; ---------------------------------------------------------------------------
000166D6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166D6                            ; ---------------------------------------------------------------------------
000166D6                            Map_obj6A:
000166D6                            	include "_maps\obj6A.asm"
000166D6                            ; ---------------------------------------------------------------------------
000166D6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000166D6                            ; ---------------------------------------------------------------------------
000166D6 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000166DA 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000166DE 07                         byte_15BA0:	dc.b 7
000166DF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000166E4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000166E9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000166EE E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000166F3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000166F8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000166FD 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016702 07                         byte_15BC4:	dc.b 7
00016703 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016708 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001670D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016712 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016717 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001671C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016721 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016726 04                         byte_15BE8:	dc.b 4
00016727 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001672C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016731 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016736 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001673B 04                         byte_15BFD:	dc.b 4
0001673C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016741 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016746 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001674B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016750                            		even
00016750                            		even
00016750                            
00016750                            ; ===========================================================================
00016750                            ; ---------------------------------------------------------------------------
00016750                            ; Object 6B - stomper (SBZ)
00016750                            ; ---------------------------------------------------------------------------
00016750                            
00016750                            Obj6B:					; XREF: Obj_Index
00016750 7000                       		moveq	#0,d0
00016752 1028 0024                  		move.b	$24(a0),d0
00016756 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001675A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
0001675E                            ; ===========================================================================
0001675E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016760 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016762                            
00016762 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016766 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001676A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001676E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016772 8040 0005                  		dc.b  $80, $40,	  0,   5
00016776                            ; ===========================================================================
00016776                            
00016776                            Obj6B_Main:				; XREF: Obj6B_Index
00016776 5428 0024                  		addq.b	#2,$24(a0)
0001677A 7000                       		moveq	#0,d0
0001677C 1028 0028                  		move.b	$28(a0),d0
00016780 E448                       		lsr.w	#2,d0
00016782 0240 001C                  		andi.w	#$1C,d0
00016786 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001678A 115B 0019                  		move.b	(a3)+,$19(a0)
0001678E 115B 0016                  		move.b	(a3)+,$16(a0)
00016792 E448                       		lsr.w	#2,d0
00016794 1140 001A                  		move.b	d0,$1A(a0)
00016798 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000167A0 317C 22C0 0002             		move.w	#$22C0,2(a0)
000167A6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000167AC 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000167AE 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000167B4 6700                       		beq.s	Obj6B_SBZ3
000167B6                            
000167B6                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000167B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167BA 7000                       		moveq	#0,d0
000167BC 1028 0023                  		move.b	$23(a0),d0
000167C0 6700                       		beq.s	Obj6B_Delete
000167C2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000167C8                            
000167C8                            Obj6B_Delete:
000167C8 4EF9 0000 E088             		jmp	DeleteObject
000167CE                            ; ===========================================================================
000167CE                            
000167CE                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000167CE 317C 41F0 0002             		move.w	#$41F0,2(a0)
000167D4 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000167DA 6600                       		bne.s	Obj6B_SBZ12
000167DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167E0 7000                       		moveq	#0,d0
000167E2 1028 0023                  		move.b	$23(a0),d0
000167E6 6700                       		beq.s	Obj6B_SBZ12
000167E8 0832 0000 0002             		btst	#0,2(a2,d0.w)
000167EE 6700                       		beq.s	Obj6B_SBZ12
000167F0 4238 F7CB                  		clr.b	($FFFFF7CB).w
000167F4 60C0                       		bra.s	Obj6B_ChkGone
000167F6                            ; ===========================================================================
000167F6                            
000167F6                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000167F6 0028 0004 0001             		ori.b	#4,1(a0)
000167FC 117C 0004 0018             		move.b	#4,$18(a0)
00016802 3168 0008 0034             		move.w	8(a0),$34(a0)
00016808 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001680E 7000                       		moveq	#0,d0
00016810 101B                       		move.b	(a3)+,d0
00016812 3140 003C                  		move.w	d0,$3C(a0)
00016816 7000                       		moveq	#0,d0
00016818 1028 0028                  		move.b	$28(a0),d0
0001681C 6A00                       		bpl.s	Obj6B_Action
0001681E 0200 000F                  		andi.b	#$F,d0
00016822 1140 003E                  		move.b	d0,$3E(a0)
00016826 1153 0028                  		move.b	(a3),$28(a0)
0001682A 0C13 0005                  		cmpi.b	#5,(a3)
0001682E 6600                       		bne.s	Obj6B_ChkGone2
00016830 08E8 0004 0001             		bset	#4,1(a0)
00016836                            
00016836                            Obj6B_ChkGone2:
00016836 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001683A 7000                       		moveq	#0,d0
0001683C 1028 0023                  		move.b	$23(a0),d0
00016840 6700                       		beq.s	Obj6B_Action
00016842 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016848                            
00016848                            Obj6B_Action:				; XREF: Obj6B_Index
00016848 3F28 0008                  		move.w	8(a0),-(sp)
0001684C 7000                       		moveq	#0,d0
0001684E 1028 0028                  		move.b	$28(a0),d0
00016852 0240 000F                  		andi.w	#$F,d0
00016856 D040                       		add.w	d0,d0
00016858 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001685C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016860 381F                       		move.w	(sp)+,d4
00016862 4A28 0001                  		tst.b	1(a0)
00016866 6A00                       		bpl.s	Obj6B_ChkDel
00016868 7200                       		moveq	#0,d1
0001686A 1228 0019                  		move.b	$19(a0),d1
0001686E 0641 000B                  		addi.w	#$B,d1
00016872 7400                       		moveq	#0,d2
00016874 1428 0016                  		move.b	$16(a0),d2
00016878 3602                       		move.w	d2,d3
0001687A 5243                       		addq.w	#1,d3
0001687C 6100 9B9E                  		bsr.w	SolidObject
00016880                            
00016880                            Obj6B_ChkDel:
00016880 3028 0034                  		move.w	$34(a0),d0
00016884 0240 FF80                  		andi.w	#$FF80,d0
00016888 3238 F700                  		move.w	($FFFFF700).w,d1
0001688C 0441 0080                  		subi.w	#$80,d1
00016890 0241 FF80                  		andi.w	#$FF80,d1
00016894 9041                       		sub.w	d1,d0
00016896 0C40 0280                  		cmpi.w	#$280,d0
0001689A 6200                       		bhi.s	loc_15D64
0001689C 4EF9 0000 E04C             		jmp	DisplaySprite
000168A2                            ; ===========================================================================
000168A2                            
000168A2                            loc_15D64:
000168A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000168A8 6600                       		bne.s	Obj6B_Delete2
000168AA 4238 F7CB                  		clr.b	($FFFFF7CB).w
000168AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000168B2 7000                       		moveq	#0,d0
000168B4 1028 0023                  		move.b	$23(a0),d0
000168B8 6700                       		beq.s	Obj6B_Delete2
000168BA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000168C0                            
000168C0                            Obj6B_Delete2:
000168C0 4EF9 0000 E088             		jmp	DeleteObject
000168C6                            ; ===========================================================================
000168C6 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000168CA 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000168CE 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000168D2                            ; ===========================================================================
000168D2                            
000168D2                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000168D2 4E75                       		rts	
000168D4                            ; ===========================================================================
000168D4                            
000168D4                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000168D4 4A28 0038                  		tst.b	$38(a0)
000168D8 6600                       		bne.s	loc_15DB4
000168DA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000168DE 7000                       		moveq	#0,d0
000168E0 1028 003E                  		move.b	$3E(a0),d0
000168E4 0832 0000 0000             		btst	#0,(a2,d0.w)
000168EA 6700                       		beq.s	loc_15DC2
000168EC 117C 0001 0038             		move.b	#1,$38(a0)
000168F2                            
000168F2                            loc_15DB4:
000168F2 3028 003C                  		move.w	$3C(a0),d0
000168F6 B068 003A                  		cmp.w	$3A(a0),d0
000168FA 6700                       		beq.s	loc_15DE0
000168FC 5468 003A                  		addq.w	#2,$3A(a0)
00016900                            
00016900                            loc_15DC2:
00016900 3028 003A                  		move.w	$3A(a0),d0
00016904 0828 0000 0022             		btst	#0,$22(a0)
0001690A 6700                       		beq.s	loc_15DD4
0001690C 4440                       		neg.w	d0
0001690E 0640 0080                  		addi.w	#$80,d0
00016912                            
00016912                            loc_15DD4:
00016912 3228 0034                  		move.w	$34(a0),d1
00016916 9240                       		sub.w	d0,d1
00016918 3141 0008                  		move.w	d1,8(a0)
0001691C 4E75                       		rts	
0001691E                            ; ===========================================================================
0001691E                            
0001691E                            loc_15DE0:
0001691E 5228 0028                  		addq.b	#1,$28(a0)
00016922 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016928 4228 0038                  		clr.b	$38(a0)
0001692C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016930 7000                       		moveq	#0,d0
00016932 1028 0023                  		move.b	$23(a0),d0
00016936 67C8                       		beq.s	loc_15DC2
00016938 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001693E 60C0                       		bra.s	loc_15DC2
00016940                            ; ===========================================================================
00016940                            
00016940                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016940 4A28 0038                  		tst.b	$38(a0)
00016944 6600                       		bne.s	loc_15E14
00016946 5368 0036                  		subq.w	#1,$36(a0)
0001694A 6600                       		bne.s	loc_15E1E
0001694C 117C 0001 0038             		move.b	#1,$38(a0)
00016952                            
00016952                            loc_15E14:
00016952 4A68 003A                  		tst.w	$3A(a0)
00016956 6700                       		beq.s	loc_15E3C
00016958 5568 003A                  		subq.w	#2,$3A(a0)
0001695C                            
0001695C                            loc_15E1E:
0001695C 3028 003A                  		move.w	$3A(a0),d0
00016960 0828 0000 0022             		btst	#0,$22(a0)
00016966 6700                       		beq.s	loc_15E30
00016968 4440                       		neg.w	d0
0001696A 0640 0080                  		addi.w	#$80,d0
0001696E                            
0001696E                            loc_15E30:
0001696E 3228 0034                  		move.w	$34(a0),d1
00016972 9240                       		sub.w	d0,d1
00016974 3141 0008                  		move.w	d1,8(a0)
00016978 4E75                       		rts	
0001697A                            ; ===========================================================================
0001697A                            
0001697A                            loc_15E3C:
0001697A 5328 0028                  		subq.b	#1,$28(a0)
0001697E 4228 0038                  		clr.b	$38(a0)
00016982 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016986 7000                       		moveq	#0,d0
00016988 1028 0023                  		move.b	$23(a0),d0
0001698C 67CE                       		beq.s	loc_15E1E
0001698E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016994 60C6                       		bra.s	loc_15E1E
00016996                            ; ===========================================================================
00016996                            
00016996                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016996 4A28 0038                  		tst.b	$38(a0)
0001699A 6600                       		bne.s	loc_15E7C
0001699C 4A68 003A                  		tst.w	$3A(a0)
000169A0 6700                       		beq.s	loc_15E6A
000169A2 5368 003A                  		subq.w	#1,$3A(a0)
000169A6 6000                       		bra.s	loc_15E8E
000169A8                            ; ===========================================================================
000169A8                            
000169A8                            loc_15E6A:
000169A8 5368 0036                  		subq.w	#1,$36(a0)
000169AC 6A00                       		bpl.s	loc_15E8E
000169AE 317C 003C 0036             		move.w	#$3C,$36(a0)
000169B4 117C 0001 0038             		move.b	#1,$38(a0)
000169BA                            
000169BA                            loc_15E7C:
000169BA 5068 003A                  		addq.w	#8,$3A(a0)
000169BE 3028 003A                  		move.w	$3A(a0),d0
000169C2 B068 003C                  		cmp.w	$3C(a0),d0
000169C6 6600                       		bne.s	loc_15E8E
000169C8 4228 0038                  		clr.b	$38(a0)
000169CC                            
000169CC                            loc_15E8E:
000169CC 3028 003A                  		move.w	$3A(a0),d0
000169D0 0828 0000 0022             		btst	#0,$22(a0)
000169D6 6700                       		beq.s	loc_15EA0
000169D8 4440                       		neg.w	d0
000169DA 0640 0038                  		addi.w	#$38,d0
000169DE                            
000169DE                            loc_15EA0:
000169DE 3228 0030                  		move.w	$30(a0),d1
000169E2 D240                       		add.w	d0,d1
000169E4 3141 000C                  		move.w	d1,$C(a0)
000169E8 4E75                       		rts	
000169EA                            ; ===========================================================================
000169EA                            
000169EA                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000169EA 4A28 0038                  		tst.b	$38(a0)
000169EE 6600                       		bne.s	loc_15ED0
000169F0 4A68 003A                  		tst.w	$3A(a0)
000169F4 6700                       		beq.s	loc_15EBE
000169F6 5168 003A                  		subq.w	#8,$3A(a0)
000169FA 6000                       		bra.s	loc_15EF0
000169FC                            ; ===========================================================================
000169FC                            
000169FC                            loc_15EBE:
000169FC 5368 0036                  		subq.w	#1,$36(a0)
00016A00 6A00                       		bpl.s	loc_15EF0
00016A02 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A08 117C 0001 0038             		move.b	#1,$38(a0)
00016A0E                            
00016A0E                            loc_15ED0:
00016A0E 3028 003A                  		move.w	$3A(a0),d0
00016A12 B068 003C                  		cmp.w	$3C(a0),d0
00016A16 6700                       		beq.s	loc_15EE0
00016A18 5068 003A                  		addq.w	#8,$3A(a0)
00016A1C 6000                       		bra.s	loc_15EF0
00016A1E                            ; ===========================================================================
00016A1E                            
00016A1E                            loc_15EE0:
00016A1E 5368 0036                  		subq.w	#1,$36(a0)
00016A22 6A00                       		bpl.s	loc_15EF0
00016A24 317C 003C 0036             		move.w	#$3C,$36(a0)
00016A2A 4228 0038                  		clr.b	$38(a0)
00016A2E                            
00016A2E                            loc_15EF0:
00016A2E 3028 003A                  		move.w	$3A(a0),d0
00016A32 0828 0000 0022             		btst	#0,$22(a0)
00016A38 6700                       		beq.s	loc_15F02
00016A3A 4440                       		neg.w	d0
00016A3C 0640 0038                  		addi.w	#$38,d0
00016A40                            
00016A40                            loc_15F02:
00016A40 3228 0030                  		move.w	$30(a0),d1
00016A44 D240                       		add.w	d0,d1
00016A46 3141 000C                  		move.w	d1,$C(a0)
00016A4A 4E75                       		rts	
00016A4C                            ; ===========================================================================
00016A4C                            
00016A4C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016A4C 4A28 0038                  		tst.b	$38(a0)
00016A50 6600                       		bne.s	loc_15F3E
00016A52 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016A56 7000                       		moveq	#0,d0
00016A58 1028 003E                  		move.b	$3E(a0),d0
00016A5C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016A62 6700                       		beq.s	locret_15F5C
00016A64 117C 0001 0038             		move.b	#1,$38(a0)
00016A6A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016A6E 7000                       		moveq	#0,d0
00016A70 1028 0023                  		move.b	$23(a0),d0
00016A74 6700                       		beq.s	loc_15F3E
00016A76 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016A7C                            
00016A7C                            loc_15F3E:
00016A7C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016A84 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016A8C 3168 0008 0034             		move.w	8(a0),$34(a0)
00016A92 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016A98 6700                       		beq.s	loc_15F5E
00016A9A                            
00016A9A                            locret_15F5C:
00016A9A 4E75                       		rts	
00016A9C                            ; ===========================================================================
00016A9C                            
00016A9C                            loc_15F5E:
00016A9C 4228 0028                  		clr.b	$28(a0)
00016AA0 4228 0038                  		clr.b	$38(a0)
00016AA4 4E75                       		rts	
00016AA6                            ; ===========================================================================
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6                            ; Sprite mappings - stomper and	platforms (SBZ)
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6                            Map_obj6B:
00016AA6                            	include "_maps\obj6B.asm"
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6                            ; Sprite mappings - stomper and	platforms (SBZ)
00016AA6                            ; ---------------------------------------------------------------------------
00016AA6 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016AAA 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016AAE 0000                       		dc.w byte_15FB0-Map_obj6B
00016AB0 04                         byte_15F72:	dc.b 4
00016AB1 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016AB6 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016ABB F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016AC0 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016AC5 08                         byte_15F87:	dc.b 8
00016AC6 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016ACB E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016AD0 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016AD5 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016ADA 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016ADF 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016AE4 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016AE9 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016AEE 0E                         byte_15FB0:	dc.b $E
00016AEF C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016AF4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016AF9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016AFE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016B03 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016B08 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016B0D C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016B12 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016B17 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016B1C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016B21 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016B26 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016B2B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016B30 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016B36 00                         		even
00016B36 00                         		even
00016B36                            
00016B36                            ; ===========================================================================
00016B36                            ; ---------------------------------------------------------------------------
00016B36                            ; Object 6C - vanishing	platforms (SBZ)
00016B36                            ; ---------------------------------------------------------------------------
00016B36                            
00016B36                            Obj6C:					; XREF: Obj_Index
00016B36 7000                       		moveq	#0,d0
00016B38 1028 0024                  		move.b	$24(a0),d0
00016B3C 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016B40 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016B44                            ; ===========================================================================
00016B44 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016B46 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B48 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016B4A 0000                       		dc.w loc_16068-Obj6C_Index
00016B4C                            ; ===========================================================================
00016B4C                            
00016B4C                            Obj6C_Main:				; XREF: Obj6C_Index
00016B4C 5C28 0024                  		addq.b	#6,$24(a0)
00016B50 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016B58 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016B5E 0028 0004 0001             		ori.b	#4,1(a0)
00016B64 117C 0010 0019             		move.b	#$10,$19(a0)
00016B6A 117C 0004 0018             		move.b	#4,$18(a0)
00016B70 7000                       		moveq	#0,d0
00016B72 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B76 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016B7A 5240                       		addq.w	#1,d0		; add 1
00016B7C EF48                       		lsl.w	#7,d0		; multiply by $80
00016B7E 3200                       		move.w	d0,d1
00016B80 5340                       		subq.w	#1,d0
00016B82 3140 0030                  		move.w	d0,$30(a0)
00016B86 3140 0032                  		move.w	d0,$32(a0)
00016B8A 7000                       		moveq	#0,d0
00016B8C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016B90 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016B94 0641 0080                  		addi.w	#$80,d1
00016B98 C0C1                       		mulu.w	d1,d0
00016B9A E088                       		lsr.l	#8,d0
00016B9C 3140 0036                  		move.w	d0,$36(a0)
00016BA0 5341                       		subq.w	#1,d1
00016BA2 3141 0038                  		move.w	d1,$38(a0)
00016BA6                            
00016BA6                            loc_16068:				; XREF: Obj6C_Index
00016BA6 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016BAA 9068 0036                  		sub.w	$36(a0),d0
00016BAE C068 0038                  		and.w	$38(a0),d0
00016BB2 6600                       		bne.s	Obj6C_Animate
00016BB4 5928 0024                  		subq.b	#4,$24(a0)
00016BB8 6000                       		bra.s	Obj6C_Vanish
00016BBA                            ; ===========================================================================
00016BBA                            
00016BBA                            Obj6C_Animate:
00016BBA 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BC0 4EB9 0000 B09A             		jsr	AnimateSprite
00016BC6 6000 952C                  		bra.w	MarkObjGone
00016BCA                            ; ===========================================================================
00016BCA                            
00016BCA                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016BCA 5368 0030                  		subq.w	#1,$30(a0)
00016BCE 6A00                       		bpl.s	loc_160AA
00016BD0 317C 007F 0030             		move.w	#127,$30(a0)
00016BD6 4A28 001C                  		tst.b	$1C(a0)
00016BDA 6700                       		beq.s	loc_160A4
00016BDC 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016BE2                            
00016BE2                            loc_160A4:
00016BE2 0868 0000 001C             		bchg	#0,$1C(a0)
00016BE8                            
00016BE8                            loc_160AA:
00016BE8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016BEE 4EB9 0000 B09A             		jsr	AnimateSprite
00016BF4 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016BFA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016BFC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016C02 6600                       		bne.s	loc_160D6
00016C04 7200                       		moveq	#0,d1
00016C06 1228 0019                  		move.b	$19(a0),d1
00016C0A 4EB9 0000 7C56             		jsr	(PlatformObject).l
00016C10 6000 94E2                  		bra.w	MarkObjGone
00016C14                            ; ===========================================================================
00016C14                            
00016C14                            loc_160D6:
00016C14 7200                       		moveq	#0,d1
00016C16 1228 0019                  		move.b	$19(a0),d1
00016C1A 4EB9 0000 7DCA             		jsr	(ExitPlatform).l
00016C20 3428 0008                  		move.w	8(a0),d2
00016C24 4EB9 0000 8334             		jsr	(MvSonicOnPtfm2).l
00016C2A 6000 94C8                  		bra.w	MarkObjGone
00016C2E                            ; ===========================================================================
00016C2E                            
00016C2E                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016C2E 0828 0003 0022             		btst	#3,$22(a0)
00016C34 6700                       		beq.s	Obj6C_Display
00016C36 43F8 D000                  		lea	($FFFFD000).w,a1
00016C3A 08A9 0003 0022             		bclr	#3,$22(a1)
00016C40 08A8 0003 0022             		bclr	#3,$22(a0)
00016C46 117C 0002 0024             		move.b	#2,$24(a0)
00016C4C 4228 0025                  		clr.b	$25(a0)
00016C50                            
00016C50                            Obj6C_Display:
00016C50 6000 94A2                  		bra.w	MarkObjGone
00016C54                            ; ===========================================================================
00016C54                            Ani_obj6C:
00016C54                            	include "_anim\obj6C.asm"
00016C54                            ; ---------------------------------------------------------------------------
00016C54                            ; Animation script - vanishing platforms (SBZ)
00016C54                            ; ---------------------------------------------------------------------------
00016C54 0000                       		dc.w byte_1611A-Ani_obj6C
00016C56 0000                       		dc.w byte_16122-Ani_obj6C
00016C58 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016C60 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016C68                            		even
00016C68                            		even
00016C68                            
00016C68                            ; ---------------------------------------------------------------------------
00016C68                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C68                            ; ---------------------------------------------------------------------------
00016C68                            Map_obj6C:
00016C68                            	include "_maps\obj6C.asm"
00016C68                            ; ---------------------------------------------------------------------------
00016C68                            ; Sprite mappings - vanishing platforms	(SBZ)
00016C68                            ; ---------------------------------------------------------------------------
00016C68 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016C6C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016C70 01                         byte_16132:	dc.b 1
00016C71 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016C76 01                         byte_16138:	dc.b 1
00016C77 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016C7C 01                         byte_1613E:	dc.b 1
00016C7D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016C82 00                         byte_16144:	dc.b 0
00016C84 00                         		even
00016C84 00                         		even
00016C84                            
00016C84                            ; ===========================================================================
00016C84                            ; ---------------------------------------------------------------------------
00016C84                            ; Object 6E - electrocution orbs (SBZ)
00016C84                            ; ---------------------------------------------------------------------------
00016C84                            
00016C84                            Obj6E:					; XREF: Obj_Index
00016C84 7000                       		moveq	#0,d0
00016C86 1028 0024                  		move.b	$24(a0),d0
00016C8A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016C8E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016C92                            ; ===========================================================================
00016C92 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016C94 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016C96                            ; ===========================================================================
00016C96                            
00016C96                            Obj6E_Main:				; XREF: Obj6E_Index
00016C96 5428 0024                  		addq.b	#2,$24(a0)
00016C9A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016CA2 317C 047E 0002             		move.w	#$47E,2(a0)
00016CA8 0028 0004 0001             		ori.b	#4,1(a0)
00016CAE 117C 0028 0019             		move.b	#$28,$19(a0)
00016CB4 7000                       		moveq	#0,d0
00016CB6 1028 0028                  		move.b	$28(a0),d0	; read object type
00016CBA E948                       		lsl.w	#4,d0		; multiply by $10
00016CBC 5340                       		subq.w	#1,d0
00016CBE 3140 0034                  		move.w	d0,$34(a0)
00016CC2                            
00016CC2                            Obj6E_Shock:				; XREF: Obj6E_Index
00016CC2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016CC6 C068 0034                  		and.w	$34(a0),d0
00016CCA 6600                       		bne.s	Obj6E_Animate
00016CCC 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016CD2 4A28 0001                  		tst.b	1(a0)
00016CD6 6A00                       		bpl.s	Obj6E_Animate
00016CD8 303C 00B1                  		move.w	#$B1,d0
00016CDC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play electricity sound
00016CE2                            
00016CE2                            Obj6E_Animate:
00016CE2 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016CE8 4EB9 0000 B09A             		jsr	AnimateSprite
00016CEE 117C 0000 0020             		move.b	#0,$20(a0)
00016CF4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016CFA 6600                       		bne.s	Obj6E_Display	; if not, branch
00016CFC 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016D02                            
00016D02                            Obj6E_Display:
00016D02 6000 93F0                  		bra.w	MarkObjGone
00016D06                            ; ===========================================================================
00016D06                            Ani_obj6E:
00016D06                            	include "_anim\obj6E.asm"
00016D06                            ; ---------------------------------------------------------------------------
00016D06                            ; Animation script - electrocution orbs (SBZ)
00016D06                            ; ---------------------------------------------------------------------------
00016D06 0000                       		dc.w byte_161CC-Ani_obj6E
00016D08 0000                       		dc.w byte_161D0-Ani_obj6E
00016D0A 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016D0E 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016D1E                            		even
00016D1E                            		even
00016D1E                            
00016D1E                            ; ---------------------------------------------------------------------------
00016D1E                            ; Sprite mappings - electrocution orbs (SBZ)
00016D1E                            ; ---------------------------------------------------------------------------
00016D1E                            Map_obj6E:
00016D1E                            	include "_maps\obj6E.asm"
00016D1E                            Map_26ed:
00016D1E 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016D20 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016D22 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016D24 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016D26 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016D28 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016D2A 01                         Map_26ed_C: 	dc.b $1
00016D2B 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016D30 02                         Map_26ed_12: 	dc.b $2
00016D31 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D36 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D3B 06                         Map_26ed_1D: 	dc.b $6
00016D3C F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D41 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D46 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D4B F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D50 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D55 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D5A 08                         Map_26ed_3C: 	dc.b $8
00016D5B F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D60 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D65 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016D6A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D6F F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016D74 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D79 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D7E F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016D83 06                         Map_26ed_65: 	dc.b $6
00016D84 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016D89 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016D8E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016D93 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016D98 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016D9D F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016DA2 04                         Map_26ed_84: 	dc.b $4
00016DA3 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016DA8 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016DAD F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016DB2 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016DB8 00                         	even
00016DB8 00                         	even
00016DB8                            
00016DB8                            ; ===========================================================================
00016DB8                            ; ---------------------------------------------------------------------------
00016DB8                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016DB8                            ; ---------------------------------------------------------------------------
00016DB8                            
00016DB8                            Obj6F:					; XREF: Obj_Index
00016DB8 7000                       		moveq	#0,d0
00016DBA 1028 0024                  		move.b	$24(a0),d0
00016DBE 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016DC2 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016DC6 3028 0030                  		move.w	$30(a0),d0
00016DCA 0240 FF80                  		andi.w	#$FF80,d0
00016DCE 3238 F700                  		move.w	($FFFFF700).w,d1
00016DD2 0441 0080                  		subi.w	#$80,d1
00016DD6 0241 FF80                  		andi.w	#$FF80,d1
00016DDA 9041                       		sub.w	d1,d0
00016DDC 0C40 0280                  		cmpi.w	#$280,d0
00016DE0 6200                       		bhi.s	loc_1629A
00016DE2                            
00016DE2                            Obj6F_Display:
00016DE2 4EF9 0000 E04C             		jmp	DisplaySprite
00016DE8                            ; ===========================================================================
00016DE8                            
00016DE8                            loc_1629A:
00016DE8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016DEE 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016DF0 0C40 FF80                  		cmpi.w	#-$80,d0
00016DF4 64EC                       		bcc.s	Obj6F_Display
00016DF6                            
00016DF6                            Obj6F_Act1or2:
00016DF6 1028 002F                  		move.b	$2F(a0),d0
00016DFA 6A00                       		bpl.s	Obj6F_Delete
00016DFC 0240 007F                  		andi.w	#$7F,d0
00016E00 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016E04 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016E0A                            
00016E0A                            Obj6F_Delete:
00016E0A 4EF9 0000 E088             		jmp	DeleteObject
00016E10                            ; ===========================================================================
00016E10 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016E12 0000                       		dc.w loc_163D8-Obj6F_Index
00016E14                            ; ===========================================================================
00016E14                            
00016E14                            Obj6F_Main:				; XREF: Obj6F_Index
00016E14 1028 0028                  		move.b	$28(a0),d0
00016E18 6B00 0000                  		bmi.w	loc_16380
00016E1C 5428 0024                  		addq.b	#2,$24(a0)
00016E20 217C 0001 6478 0004        		move.l	#Map_obj69a,4(a0)
00016E28 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016E2E 117C 0010 0019             		move.b	#$10,$19(a0)
00016E34 0028 0004 0001             		ori.b	#4,1(a0)
00016E3A 117C 0004 0018             		move.b	#4,$18(a0)
00016E40 7000                       		moveq	#0,d0
00016E42 1028 0028                  		move.b	$28(a0),d0
00016E46 3200                       		move.w	d0,d1
00016E48 E648                       		lsr.w	#3,d0
00016E4A 0240 001E                  		andi.w	#$1E,d0
00016E4E 45FA 0000                  		lea	off_164A6(pc),a2
00016E52 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E56 315A 0038                  		move.w	(a2)+,$38(a0)
00016E5A 315A 0030                  		move.w	(a2)+,$30(a0)
00016E5E 214A 003C                  		move.l	a2,$3C(a0)
00016E62 0241 000F                  		andi.w	#$F,d1
00016E66 E549                       		lsl.w	#2,d1
00016E68 1141 0038                  		move.b	d1,$38(a0)
00016E6C 117C 0004 003A             		move.b	#4,$3A(a0)
00016E72 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016E76 6700                       		beq.s	loc_16356
00016E78 117C 0001 003B             		move.b	#1,$3B(a0)
00016E7E 4428 003A                  		neg.b	$3A(a0)
00016E82 7200                       		moveq	#0,d1
00016E84 1228 0038                  		move.b	$38(a0),d1
00016E88 D228 003A                  		add.b	$3A(a0),d1
00016E8C B228 0039                  		cmp.b	$39(a0),d1
00016E90 6500                       		bcs.s	loc_16352
00016E92 1001                       		move.b	d1,d0
00016E94 7200                       		moveq	#0,d1
00016E96 4A00                       		tst.b	d0
00016E98 6A00                       		bpl.s	loc_16352
00016E9A 1228 0039                  		move.b	$39(a0),d1
00016E9E 5901                       		subq.b	#4,d1
00016EA0                            
00016EA0                            loc_16352:
00016EA0 1141 0038                  		move.b	d1,$38(a0)
00016EA4                            
00016EA4                            loc_16356:
00016EA4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016EAA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016EB0 4A41                       		tst.w	d1
00016EB2 6600                       		bne.s	loc_1636C
00016EB4 117C 0001 001C             		move.b	#1,$1C(a0)
00016EBA                            
00016EBA                            loc_1636C:
00016EBA 0C41 0008                  		cmpi.w	#8,d1
00016EBE 6600                       		bne.s	loc_16378
00016EC0 117C 0000 001C             		move.b	#0,$1C(a0)
00016EC6                            
00016EC6                            loc_16378:
00016EC6 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016ECA 6000 0000                  		bra.w	loc_163D8
00016ECE                            ; ===========================================================================
00016ECE                            
00016ECE                            loc_16380:				; XREF: Obj6F_Main
00016ECE 1140 002F                  		move.b	d0,$2F(a0)
00016ED2 0240 007F                  		andi.w	#$7F,d0
00016ED6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016EDA 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016EE0 6700                       		beq.s	loc_1639A
00016EE2 4EF9 0000 E088             		jmp	DeleteObject
00016EE8                            ; ===========================================================================
00016EE8                            
00016EE8                            loc_1639A:
00016EE8 D040                       		add.w	d0,d0
00016EEA 0240 001E                  		andi.w	#$1E,d0
00016EEE 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
00016EF4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016EF8 321A                       		move.w	(a2)+,d1
00016EFA 2248                       		movea.l	a0,a1
00016EFC 6000                       		bra.s	Obj6F_LoadPform
00016EFE                            ; ===========================================================================
00016EFE                            
00016EFE                            Obj6F_Loop:
00016EFE 4EB9 0000 E4D2             		jsr	SingleObjLoad
00016F04 6600                       		bne.s	loc_163D0
00016F06                            
00016F06                            Obj6F_LoadPform:			; XREF: loc_1639A
00016F06 12BC 006F                  		move.b	#$6F,0(a1)
00016F0A 335A 0008                  		move.w	(a2)+,8(a1)
00016F0E 335A 000C                  		move.w	(a2)+,$C(a1)
00016F12 301A                       		move.w	(a2)+,d0
00016F14 1340 0028                  		move.b	d0,$28(a1)
00016F18                            
00016F18                            loc_163D0:
00016F18 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016F1C                            
00016F1C 588F                       		addq.l	#4,sp
00016F1E 4E75                       		rts	
00016F20                            ; ===========================================================================
00016F20                            
00016F20                            loc_163D8:				; XREF: Obj6F_Index
00016F20 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016F26 4EB9 0000 B09A             		jsr	AnimateSprite
00016F2C 4A28 001A                  		tst.b	$1A(a0)
00016F30 6600                       		bne.s	loc_16404
00016F32 3F28 0008                  		move.w	8(a0),-(sp)
00016F36 6100 0000                  		bsr.w	loc_16424
00016F3A 323C 001B                  		move.w	#$1B,d1
00016F3E 343C 0007                  		move.w	#7,d2
00016F42 3602                       		move.w	d2,d3
00016F44 5243                       		addq.w	#1,d3
00016F46 381F                       		move.w	(sp)+,d4
00016F48 6000 94D2                  		bra.w	SolidObject
00016F4C                            ; ===========================================================================
00016F4C                            
00016F4C                            loc_16404:
00016F4C 0828 0003 0022             		btst	#3,$22(a0)
00016F52 6700                       		beq.s	loc_16420
00016F54 43F8 D000                  		lea	($FFFFD000).w,a1
00016F58 08A9 0003 0022             		bclr	#3,$22(a1)
00016F5E 08A8 0003 0022             		bclr	#3,$22(a0)
00016F64 4228 0025                  		clr.b	$25(a0)
00016F68                            
00016F68                            loc_16420:
00016F68 6000 0002                  		bra.w	*+4
00016F6C                            
00016F6C                            loc_16424:
00016F6C 3028 0008                  		move.w	8(a0),d0
00016F70 B068 0034                  		cmp.w	$34(a0),d0
00016F74 6600                       		bne.s	loc_16484
00016F76 3028 000C                  		move.w	$C(a0),d0
00016F7A B068 0036                  		cmp.w	$36(a0),d0
00016F7E 6600                       		bne.s	loc_16484
00016F80 7200                       		moveq	#0,d1
00016F82 1228 0038                  		move.b	$38(a0),d1
00016F86 D228 003A                  		add.b	$3A(a0),d1
00016F8A B228 0039                  		cmp.b	$39(a0),d1
00016F8E 6500                       		bcs.s	loc_16456
00016F90 1001                       		move.b	d1,d0
00016F92 7200                       		moveq	#0,d1
00016F94 4A00                       		tst.b	d0
00016F96 6A00                       		bpl.s	loc_16456
00016F98 1228 0039                  		move.b	$39(a0),d1
00016F9C 5901                       		subq.b	#4,d1
00016F9E                            
00016F9E                            loc_16456:
00016F9E 1141 0038                  		move.b	d1,$38(a0)
00016FA2 2268 003C                  		movea.l	$3C(a0),a1
00016FA6 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016FAC 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016FB2 4A41                       		tst.w	d1
00016FB4 6600                       		bne.s	loc_16474
00016FB6 117C 0001 001C             		move.b	#1,$1C(a0)
00016FBC                            
00016FBC                            loc_16474:
00016FBC 0C41 0008                  		cmpi.w	#8,d1
00016FC0 6600                       		bne.s	loc_16480
00016FC2 117C 0000 001C             		move.b	#0,$1C(a0)
00016FC8                            
00016FC8                            loc_16480:
00016FC8 6100 BFC4                  		bsr.w	Obj63_ChangeDir
00016FCC                            
00016FCC                            loc_16484:
00016FCC 4EF9 0000 E026             		jmp	SpeedToPos
00016FD2                            ; ===========================================================================
00016FD2                            Ani_obj6F:
00016FD2                            	include "_anim\obj6F.asm"
00016FD2                            ; ---------------------------------------------------------------------------
00016FD2                            ; Animation script - platform on conveyor belt (SBZ)
00016FD2                            ; ---------------------------------------------------------------------------
00016FD2 0000                       		dc.w byte_1648E-Ani_obj6F
00016FD4 0000                       		dc.w byte_164A2-Ani_obj6F
00016FD6 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016FE3 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016FEA 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016FEE 00                         		even
00016FEE 00                         		even
00016FEE                            
00016FEE 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016FF4 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016FFA 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001700E 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00017022 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017036 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001704A 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001705E 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00017072                            ; ===========================================================================
00017072                            ; ---------------------------------------------------------------------------
00017072                            ; Object 70 - large girder block (SBZ)
00017072                            ; ---------------------------------------------------------------------------
00017072                            
00017072                            Obj70:					; XREF: Obj_Index
00017072 7000                       		moveq	#0,d0
00017074 1028 0024                  		move.b	$24(a0),d0
00017078 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
0001707C 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00017080                            ; ===========================================================================
00017080 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00017082 0000                       		dc.w Obj70_Action-Obj70_Index
00017084                            ; ===========================================================================
00017084                            
00017084                            Obj70_Main:				; XREF: Obj70_Index
00017084 5428 0024                  		addq.b	#2,$24(a0)
00017088 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00017090 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017096 0028 0004 0001             		ori.b	#4,1(a0)
0001709C 117C 0004 0018             		move.b	#4,$18(a0)
000170A2 117C 0060 0019             		move.b	#$60,$19(a0)
000170A8 117C 0018 0016             		move.b	#$18,$16(a0)
000170AE 3168 0008 0032             		move.w	8(a0),$32(a0)
000170B4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000170BA 6100 0000                  		bsr.w	Obj70_Move2
000170BE                            
000170BE                            Obj70_Action:				; XREF: Obj70_Index
000170BE 3F28 0008                  		move.w	8(a0),-(sp)
000170C2 4A68 003A                  		tst.w	$3A(a0)
000170C6 6700                       		beq.s	Obj70_Move
000170C8 5368 003A                  		subq.w	#1,$3A(a0)
000170CC 6600                       		bne.s	Obj70_Solid
000170CE                            
000170CE                            Obj70_Move:
000170CE 4EB9 0000 E026             		jsr	SpeedToPos
000170D4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000170D8 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000170DA 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000170DE                            
000170DE                            Obj70_Solid:
000170DE 381F                       		move.w	(sp)+,d4
000170E0 4A28 0001                  		tst.b	1(a0)
000170E4 6A00                       		bpl.s	Obj70_ChkDel
000170E6 7200                       		moveq	#0,d1
000170E8 1228 0019                  		move.b	$19(a0),d1
000170EC 0641 000B                  		addi.w	#$B,d1
000170F0 7400                       		moveq	#0,d2
000170F2 1428 0016                  		move.b	$16(a0),d2
000170F6 3602                       		move.w	d2,d3
000170F8 5243                       		addq.w	#1,d3
000170FA 6100 9320                  		bsr.w	SolidObject
000170FE                            
000170FE                            Obj70_ChkDel:
000170FE 3028 0032                  		move.w	$32(a0),d0
00017102 0240 FF80                  		andi.w	#$FF80,d0
00017106 3238 F700                  		move.w	($FFFFF700).w,d1
0001710A 0441 0080                  		subi.w	#$80,d1
0001710E 0241 FF80                  		andi.w	#$FF80,d1
00017112 9041                       		sub.w	d1,d0
00017114 0C40 0280                  		cmpi.w	#$280,d0
00017118 6200                       		bhi.s	Obj70_Delete
0001711A 4EF9 0000 E04C             		jmp	DisplaySprite
00017120                            ; ===========================================================================
00017120                            
00017120                            Obj70_Delete:
00017120 4EF9 0000 E088             		jmp	DeleteObject
00017126                            ; ===========================================================================
00017126                            
00017126                            Obj70_Move2:				; XREF: Obj70_Main
00017126 1028 0038                  		move.b	$38(a0),d0
0001712A 0240 0018                  		andi.w	#$18,d0
0001712E 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017134 43F1 0000                  		lea	(a1,d0.w),a1
00017138 3159 0010                  		move.w	(a1)+,$10(a0)
0001713C 3159 0012                  		move.w	(a1)+,$12(a0)
00017140 3159 0034                  		move.w	(a1)+,$34(a0)
00017144 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017148 317C 0007 003A             		move.w	#7,$3A(a0)
0001714E 4E75                       		rts	
00017150                            ; ===========================================================================
00017150 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017158 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00017160 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017168 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00017170                            ; ---------------------------------------------------------------------------
00017170                            ; Sprite mappings - large girder block (SBZ)
00017170                            ; ---------------------------------------------------------------------------
00017170                            Map_obj70:
00017170                            	include "_maps\obj70.asm"
00017170                            ; ---------------------------------------------------------------------------
00017170                            ; Sprite mappings - large girder block (SBZ)
00017170                            ; ---------------------------------------------------------------------------
00017170 0000                       		dc.w byte_1662A-Map_obj70
00017172 0C                         byte_1662A:	dc.b $C
00017173 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017178 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
0001717D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00017182 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017187 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
0001718C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00017191 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017196 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001719B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000171A0 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000171A5 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000171AA 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000171B0 00                         		even
000171B0 00                         		even
000171B0                            
000171B0                            ; ===========================================================================
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            ; Object 72 - teleporter (SBZ)
000171B0                            ; ---------------------------------------------------------------------------
000171B0                            
000171B0                            Obj72:					; XREF: Obj_Index
000171B0 7000                       		moveq	#0,d0
000171B2 1028 0024                  		move.b	$24(a0),d0
000171B6 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000171BA 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000171BE 3028 0008                  		move.w	8(a0),d0
000171C2 0240 FF80                  		andi.w	#$FF80,d0
000171C6 3238 F700                  		move.w	($FFFFF700).w,d1
000171CA 0441 0080                  		subi.w	#$80,d1
000171CE 0241 FF80                  		andi.w	#$FF80,d1
000171D2 9041                       		sub.w	d1,d0
000171D4 0C40 0280                  		cmpi.w	#$280,d0
000171D8 6200                       		bhi.s	Obj72_Delete
000171DA 4E75                       		rts	
000171DC                            ; ===========================================================================
000171DC                            
000171DC                            Obj72_Delete:
000171DC 4EF9 0000 E088             		jmp	DeleteObject
000171E2                            ; ===========================================================================
000171E2 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000171E4 0000                       		dc.w loc_166C8-Obj72_Index
000171E6 0000                       		dc.w loc_1675E-Obj72_Index
000171E8 0000                       		dc.w loc_16798-Obj72_Index
000171EA                            ; ===========================================================================
000171EA                            
000171EA                            Obj72_Main:				; XREF: Obj72_Index
000171EA 5428 0024                  		addq.b	#2,$24(a0)
000171EE 1028 0028                  		move.b	$28(a0),d0
000171F2 D040                       		add.w	d0,d0
000171F4 0240 001E                  		andi.w	#$1E,d0
000171F8 45FA 0000                  		lea	Obj72_Data(pc),a2
000171FC D4F2 0000                  		adda.w	(a2,d0.w),a2
00017200 315A 003A                  		move.w	(a2)+,$3A(a0)
00017204 214A 003C                  		move.l	a2,$3C(a0)
00017208 315A 0036                  		move.w	(a2)+,$36(a0)
0001720C 315A 0038                  		move.w	(a2)+,$38(a0)
00017210                            
00017210                            loc_166C8:				; XREF: Obj72_Index
00017210 43F8 D000                  		lea	($FFFFD000).w,a1
00017214 3029 0008                  		move.w	8(a1),d0
00017218 9068 0008                  		sub.w	8(a0),d0
0001721C 0828 0000 0022             		btst	#0,$22(a0)
00017222 6700                       		beq.s	loc_166E0
00017224 0640 000F                  		addi.w	#$F,d0
00017228                            
00017228                            loc_166E0:
00017228 0C40 0010                  		cmpi.w	#$10,d0
0001722C 6400                       		bcc.s	locret_1675C
0001722E 3229 000C                  		move.w	$C(a1),d1
00017232 9268 000C                  		sub.w	$C(a0),d1
00017236 0641 0020                  		addi.w	#$20,d1
0001723A 0C41 0040                  		cmpi.w	#$40,d1
0001723E 6400                       		bcc.s	locret_1675C
00017240 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017244 6600                       		bne.s	locret_1675C
00017246 0C28 0007 0028             		cmpi.b	#7,$28(a0)
0001724C 6600                       		bne.s	loc_1670E
0001724E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017254 6500                       		bcs.s	locret_1675C
00017256                            
00017256                            loc_1670E:
00017256 5428 0024                  		addq.b	#2,$24(a0)
0001725A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017260 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017266 337C 0800 0014             		move.w	#$800,$14(a1)
0001726C 337C 0000 0010             		move.w	#0,$10(a1)
00017272 337C 0000 0012             		move.w	#0,$12(a1)
00017278 08A8 0005 0022             		bclr	#5,$22(a0)
0001727E 08A9 0005 0022             		bclr	#5,$22(a1)
00017284 08E9 0001 0022             		bset	#1,$22(a1)
0001728A 3368 0008 0008             		move.w	8(a0),8(a1)
00017290 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017296 4228 0032                  		clr.b	$32(a0)
0001729A 303C 00BE                  		move.w	#$BE,d0
0001729E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000172A4                            
000172A4                            locret_1675C:
000172A4 4E75                       		rts	
000172A6                            ; ===========================================================================
000172A6                            
000172A6                            loc_1675E:				; XREF: Obj72_Index
000172A6 43F8 D000                  		lea	($FFFFD000).w,a1
000172AA 1028 0032                  		move.b	$32(a0),d0
000172AE 5428 0032                  		addq.b	#2,$32(a0)
000172B2 4EB9 0000 2D34             		jsr	(CalcSine).l
000172B8 EA40                       		asr.w	#5,d0
000172BA 3428 000C                  		move.w	$C(a0),d2
000172BE 9440                       		sub.w	d0,d2
000172C0 3342 000C                  		move.w	d2,$C(a1)
000172C4 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000172CA 6600                       		bne.s	locret_16796
000172CC 6100 0000                  		bsr.w	sub_1681C
000172D0 5428 0024                  		addq.b	#2,$24(a0)
000172D4 303C 00BC                  		move.w	#$BC,d0
000172D8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play teleport sound
000172DE                            
000172DE                            locret_16796:
000172DE 4E75                       		rts	
000172E0                            ; ===========================================================================
000172E0                            
000172E0                            loc_16798:				; XREF: Obj72_Index
000172E0 588F                       		addq.l	#4,sp
000172E2 43F8 D000                  		lea	($FFFFD000).w,a1
000172E6 5328 002E                  		subq.b	#1,$2E(a0)
000172EA 6A00                       		bpl.s	loc_167DA
000172EC 3368 0036 0008             		move.w	$36(a0),8(a1)
000172F2 3368 0038 000C             		move.w	$38(a0),$C(a1)
000172F8 7200                       		moveq	#0,d1
000172FA 1228 003A                  		move.b	$3A(a0),d1
000172FE 5801                       		addq.b	#4,d1
00017300 B228 003B                  		cmp.b	$3B(a0),d1
00017304 6500                       		bcs.s	loc_167C2
00017306 7200                       		moveq	#0,d1
00017308 6000                       		bra.s	loc_16800
0001730A                            ; ===========================================================================
0001730A                            
0001730A                            loc_167C2:
0001730A 1141 003A                  		move.b	d1,$3A(a0)
0001730E 2468 003C                  		movea.l	$3C(a0),a2
00017312 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017318 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
0001731E 6000 0000                  		bra.w	sub_1681C
00017322                            ; ===========================================================================
00017322                            
00017322                            loc_167DA:
00017322 2429 0008                  		move.l	8(a1),d2
00017326 2629 000C                  		move.l	$C(a1),d3
0001732A 3029 0010                  		move.w	$10(a1),d0
0001732E 48C0                       		ext.l	d0
00017330 E180                       		asl.l	#8,d0
00017332 D480                       		add.l	d0,d2
00017334 3029 0012                  		move.w	$12(a1),d0
00017338 48C0                       		ext.l	d0
0001733A E180                       		asl.l	#8,d0
0001733C D680                       		add.l	d0,d3
0001733E 2342 0008                  		move.l	d2,8(a1)
00017342 2343 000C                  		move.l	d3,$C(a1)
00017346 4E75                       		rts	
00017348                            ; ===========================================================================
00017348                            
00017348                            loc_16800:
00017348 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
0001734E 4228 0024                  		clr.b	$24(a0)
00017352 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017356 337C 0000 0010             		move.w	#0,$10(a1)
0001735C 337C 0200 0012             		move.w	#$200,$12(a1)
00017362 4E75                       		rts	
00017364                            
00017364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017364                            
00017364                            
00017364                            sub_1681C:
00017364 7000                       		moveq	#0,d0
00017366 343C 1000                  		move.w	#$1000,d2
0001736A 3028 0036                  		move.w	$36(a0),d0
0001736E 9069 0008                  		sub.w	8(a1),d0
00017372 6C00                       		bge.s	loc_16830
00017374 4440                       		neg.w	d0
00017376 4442                       		neg.w	d2
00017378                            
00017378                            loc_16830:
00017378 7200                       		moveq	#0,d1
0001737A 363C 1000                  		move.w	#$1000,d3
0001737E 3228 0038                  		move.w	$38(a0),d1
00017382 9269 000C                  		sub.w	$C(a1),d1
00017386 6C00                       		bge.s	loc_16844
00017388 4441                       		neg.w	d1
0001738A 4443                       		neg.w	d3
0001738C                            
0001738C                            loc_16844:
0001738C B240                       		cmp.w	d0,d1
0001738E 6500                       		bcs.s	loc_1687A
00017390 7200                       		moveq	#0,d1
00017392 3228 0038                  		move.w	$38(a0),d1
00017396 9269 000C                  		sub.w	$C(a1),d1
0001739A 4841                       		swap	d1
0001739C 83C3                       		divs.w	d3,d1
0001739E 7000                       		moveq	#0,d0
000173A0 3028 0036                  		move.w	$36(a0),d0
000173A4 9069 0008                  		sub.w	8(a1),d0
000173A8 6700                       		beq.s	loc_16866
000173AA 4840                       		swap	d0
000173AC 81C1                       		divs.w	d1,d0
000173AE                            
000173AE                            loc_16866:
000173AE 3340 0010                  		move.w	d0,$10(a1)
000173B2 3343 0012                  		move.w	d3,$12(a1)
000173B6 4A41                       		tst.w	d1
000173B8 6A00                       		bpl.s	loc_16874
000173BA 4441                       		neg.w	d1
000173BC                            
000173BC                            loc_16874:
000173BC 3141 002E                  		move.w	d1,$2E(a0)
000173C0 4E75                       		rts	
000173C2                            ; ===========================================================================
000173C2                            
000173C2                            loc_1687A:
000173C2 7000                       		moveq	#0,d0
000173C4 3028 0036                  		move.w	$36(a0),d0
000173C8 9069 0008                  		sub.w	8(a1),d0
000173CC 4840                       		swap	d0
000173CE 81C2                       		divs.w	d2,d0
000173D0 7200                       		moveq	#0,d1
000173D2 3228 0038                  		move.w	$38(a0),d1
000173D6 9269 000C                  		sub.w	$C(a1),d1
000173DA 6700                       		beq.s	loc_16898
000173DC 4841                       		swap	d1
000173DE 83C0                       		divs.w	d0,d1
000173E0                            
000173E0                            loc_16898:
000173E0 3341 0012                  		move.w	d1,$12(a1)
000173E4 3342 0010                  		move.w	d2,$10(a1)
000173E8 4A40                       		tst.w	d0
000173EA 6A00                       		bpl.s	loc_168A6
000173EC 4440                       		neg.w	d0
000173EE                            
000173EE                            loc_168A6:
000173EE 3140 002E                  		move.w	d0,$2E(a0)
000173F2 4E75                       		rts	
000173F4                            ; End of function sub_1681C
000173F4                            
000173F4                            ; ===========================================================================
000173F4 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000173FA 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017400 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017404 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
0001740A 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017410 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017416 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001741C 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017422 0884 0298 0894             		dc.w $884, $298, $894
00017428 0270 0894 0190             		dc.w $270, $894, $190
0001742E 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017434 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001743A 1184 0498 1158             		dc.w $1184, $498, $1158
00017440 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017446 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001744C 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017452 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017458 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
0001745E 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017464 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001746A 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017470 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017476 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001747C                            ; ===========================================================================
0001747C                            ; ---------------------------------------------------------------------------
0001747C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001747C                            ; ---------------------------------------------------------------------------
0001747C                            
0001747C                            Obj78:					; XREF: Obj_Index
0001747C 7000                       		moveq	#0,d0
0001747E 1028 0024                  		move.b	$24(a0),d0
00017482 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017486 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001748A                            ; ===========================================================================
0001748A 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001748C 0000                       		dc.w Obj78_Action-Obj78_Index
0001748E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017490 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017492 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017494 0000                       		dc.w Obj78_Delete-Obj78_Index
00017496 0000                       		dc.w loc_16CC0-Obj78_Index
00017498                            ; ===========================================================================
00017498                            
00017498                            locret_16950:
00017498 4E75                       		rts	
0001749A                            ; ===========================================================================
0001749A                            
0001749A                            Obj78_Main:				; XREF: Obj78_Index
0001749A 117C 0007 0016             		move.b	#7,$16(a0)
000174A0 117C 0008 0017             		move.b	#8,$17(a0)
000174A6 4EB9 0000 DFB4             		jsr	ObjectFall
000174AC 4EBA E4AA                  		jsr	ObjHitFloor
000174B0 4A41                       		tst.w	d1
000174B2 6AE4                       		bpl.s	locret_16950
000174B4 D368 000C                  		add.w	d1,$C(a0)
000174B8 4268 0012                  		clr.w	$12(a0)
000174BC 5428 0024                  		addq.b	#2,$24(a0)
000174C0 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000174C8 317C 22B0 0002             		move.w	#$22B0,2(a0)
000174CE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000174D4 6700                       		beq.s	loc_16996
000174D6 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000174DC                            
000174DC                            loc_16996:
000174DC 0228 0003 0001             		andi.b	#3,1(a0)
000174E2 0028 0004 0001             		ori.b	#4,1(a0)
000174E8 1168 0001 0022             		move.b	1(a0),$22(a0)
000174EE 117C 0004 0018             		move.b	#4,$18(a0)
000174F4 117C 0008 0019             		move.b	#8,$19(a0)
000174FA 117C 000B 0020             		move.b	#$B,$20(a0)
00017500 3428 0008                  		move.w	8(a0),d2
00017504 7A0C                       		moveq	#$C,d5
00017506 0828 0000 0022             		btst	#0,$22(a0)
0001750C 6700                       		beq.s	loc_169CA
0001750E 4445                       		neg.w	d5
00017510                            
00017510                            loc_169CA:
00017510 1C3C 0004                  		move.b	#4,d6
00017514 7600                       		moveq	#0,d3
00017516 7804                       		moveq	#4,d4
00017518 2448                       		movea.l	a0,a2
0001751A 7202                       		moveq	#2,d1
0001751C                            
0001751C                            Obj78_LoadBody:
0001751C 4EB9 0000 E4E8             		jsr	SingleObjLoad2
00017522 6600                       		bne.s	Obj78_QuitLoad
00017524 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017528 1346 0024                  		move.b	d6,$24(a1)
0001752C 5406                       		addq.b	#2,d6
0001752E 2368 0004 0004             		move.l	4(a0),4(a1)
00017534 3368 0002 0002             		move.w	2(a0),2(a1)
0001753A 137C 0005 0018             		move.b	#5,$18(a1)
00017540 137C 0008 0019             		move.b	#8,$19(a1)
00017546 137C 00CB 0020             		move.b	#$CB,$20(a1)
0001754C D445                       		add.w	d5,d2
0001754E 3342 0008                  		move.w	d2,8(a1)
00017552 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017558 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001755E 1368 0022 0001             		move.b	$22(a0),1(a1)
00017564 137C 0008 001A             		move.b	#8,$1A(a1)
0001756A 234A 003C                  		move.l	a2,$3C(a1)
0001756E 1344 003C                  		move.b	d4,$3C(a1)
00017572 5804                       		addq.b	#4,d4
00017574 2449                       		movea.l	a1,a2
00017576                            
00017576                            Obj78_QuitLoad:
00017576 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001757A                            
0001757A 117C 0007 002A             		move.b	#7,$2A(a0)
00017580 4228 003C                  		clr.b	$3C(a0)
00017584                            
00017584                            Obj78_Action:				; XREF: Obj78_Index
00017584 4A28 0022                  		tst.b	$22(a0)
00017588 6B00 0000                  		bmi.w	loc_16C96
0001758C 7000                       		moveq	#0,d0
0001758E 1028 0025                  		move.b	$25(a0),d0
00017592 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017596 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001759A 1228 002B                  		move.b	$2B(a0),d1
0001759E 6A00                       		bpl.s	Obj78_Display
000175A0 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000175A6 1028 0026                  		move.b	$26(a0),d0
000175AA 0240 007F                  		andi.w	#$7F,d0
000175AE 5828 0026                  		addq.b	#4,$26(a0)
000175B2 1031 0000                  		move.b	(a1,d0.w),d0
000175B6 6A00                       		bpl.s	Obj78_AniHead
000175B8 08A8 0007 002B             		bclr	#7,$2B(a0)
000175BE 6000                       		bra.s	Obj78_Display
000175C0                            ; ===========================================================================
000175C0                            
000175C0                            Obj78_AniHead:
000175C0 0201 0010                  		andi.b	#$10,d1
000175C4 D001                       		add.b	d1,d0
000175C6 1140 001A                  		move.b	d0,$1A(a0)
000175CA                            
000175CA                            Obj78_Display:
000175CA 3028 0008                  		move.w	8(a0),d0
000175CE 0240 FF80                  		andi.w	#$FF80,d0
000175D2 3238 F700                  		move.w	($FFFFF700).w,d1
000175D6 0441 0080                  		subi.w	#$80,d1
000175DA 0241 FF80                  		andi.w	#$FF80,d1
000175DE 9041                       		sub.w	d1,d0
000175E0 0C40 0280                  		cmpi.w	#$280,d0
000175E4 6200 0000                  		bhi.w	Obj78_ChkGone
000175E8 4EF9 0000 E04C             		jmp	DisplaySprite
000175EE                            ; ===========================================================================
000175EE                            
000175EE                            Obj78_ChkGone:
000175EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175F2 7000                       		moveq	#0,d0
000175F4 1028 0023                  		move.b	$23(a0),d0
000175F8 6700                       		beq.s	loc_16ABC
000175FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017600                            
00017600                            loc_16ABC:
00017600 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017606 4E75                       		rts	
00017608                            ; ===========================================================================
00017608                            
00017608                            Obj78_Delete:				; XREF: Obj78_Index
00017608 4EF9 0000 E088             		jmp	DeleteObject
0001760E                            ; ===========================================================================
0001760E 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017610 0000                       		dc.w loc_16B02-Obj78_Index2
00017612                            ; ===========================================================================
00017612                            
00017612                            Obj78_Move:				; XREF: Obj78_Index2
00017612 5328 002A                  		subq.b	#1,$2A(a0)
00017616 6B00                       		bmi.s	Obj78_Move2
00017618 4E75                       		rts	
0001761A                            ; ===========================================================================
0001761A                            
0001761A                            Obj78_Move2:
0001761A 5428 0025                  		addq.b	#2,$25(a0)
0001761E 117C 0010 002A             		move.b	#$10,$2A(a0)
00017624 317C FF40 0010             		move.w	#-$C0,$10(a0)
0001762A 317C 0040 0014             		move.w	#$40,$14(a0)
00017630 0868 0004 002B             		bchg	#4,$2B(a0)
00017636 6600                       		bne.s	loc_16AFC
00017638 4268 0010                  		clr.w	$10(a0)
0001763C 4468 0014                  		neg.w	$14(a0)
00017640                            
00017640                            loc_16AFC:
00017640 08E8 0007 002B             		bset	#7,$2B(a0)
00017646                            
00017646                            loc_16B02:				; XREF: Obj78_Index2
00017646 5328 002A                  		subq.b	#1,$2A(a0)
0001764A 6B00                       		bmi.s	loc_16B5E
0001764C 2F28 0008                  		move.l	8(a0),-(sp)
00017650 2428 0008                  		move.l	8(a0),d2
00017654 3028 0010                  		move.w	$10(a0),d0
00017658 0828 0000 0022             		btst	#0,$22(a0)
0001765E 6700                       		beq.s	loc_16B1E
00017660 4440                       		neg.w	d0
00017662                            
00017662                            loc_16B1E:
00017662 48C0                       		ext.l	d0
00017664 E180                       		asl.l	#8,d0
00017666 D480                       		add.l	d0,d2
00017668 2142 0008                  		move.l	d2,8(a0)
0001766C 4EBA E2EA                  		jsr	ObjHitFloor
00017670 241F                       		move.l	(sp)+,d2
00017672 0C41 FFF8                  		cmpi.w	#-8,d1
00017676 6D00                       		blt.s	loc_16B70
00017678 0C41 000C                  		cmpi.w	#$C,d1
0001767C 6C00                       		bge.s	loc_16B70
0001767E D368 000C                  		add.w	d1,$C(a0)
00017682 4842                       		swap	d2
00017684 B468 0008                  		cmp.w	8(a0),d2
00017688 6700                       		beq.s	locret_16B5C
0001768A 7000                       		moveq	#0,d0
0001768C 1028 003C                  		move.b	$3C(a0),d0
00017690 5228 003C                  		addq.b	#1,$3C(a0)
00017694 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001769A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001769E                            
0001769E                            locret_16B5C:
0001769E 4E75                       		rts	
000176A0                            ; ===========================================================================
000176A0                            
000176A0                            loc_16B5E:
000176A0 5528 0025                  		subq.b	#2,$25(a0)
000176A4 117C 0007 002A             		move.b	#7,$2A(a0)
000176AA 317C 0000 0010             		move.w	#0,$10(a0)
000176B0 4E75                       		rts	
000176B2                            ; ===========================================================================
000176B2                            
000176B2                            loc_16B70:
000176B2 2142 0008                  		move.l	d2,8(a0)
000176B6 0868 0000 0022             		bchg	#0,$22(a0)
000176BC 1168 0022 0001             		move.b	$22(a0),1(a0)
000176C2 7000                       		moveq	#0,d0
000176C4 1028 003C                  		move.b	$3C(a0),d0
000176C8 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000176CE 5228 003C                  		addq.b	#1,$3C(a0)
000176D2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000176D8 4E75                       		rts	
000176DA                            ; ===========================================================================
000176DA                            
000176DA                            Obj78_BodySeg2:				; XREF: Obj78_Index
000176DA 2268 003C                  		movea.l	$3C(a0),a1
000176DE 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000176E4 6A00                       		bpl.s	Obj78_BodySeg1
000176E6 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000176EC 1028 0026                  		move.b	$26(a0),d0
000176F0 0240 007F                  		andi.w	#$7F,d0
000176F4 5828 0026                  		addq.b	#4,$26(a0)
000176F8 4A31 0004                  		tst.b	4(a1,d0.w)
000176FC 6A00                       		bpl.s	Obj78_AniBody
000176FE 5828 0026                  		addq.b	#4,$26(a0)
00017702                            
00017702                            Obj78_AniBody:
00017702 1031 0000                  		move.b	(a1,d0.w),d0
00017706 5000                       		addq.b	#8,d0
00017708 1140 001A                  		move.b	d0,$1A(a0)
0001770C                            
0001770C                            Obj78_BodySeg1:				; XREF: Obj78_Index
0001770C 2268 003C                  		movea.l	$3C(a0),a1
00017710 4A28 0022                  		tst.b	$22(a0)
00017714 6B00 0000                  		bmi.w	loc_16C90
00017718 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001771E 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017724 6700 0000                  		beq.w	loc_16C64
00017728 3169 0014 0014             		move.w	$14(a1),$14(a0)
0001772E 3029 0010                  		move.w	$10(a1),d0
00017732 D069 0014                  		add.w	$14(a1),d0
00017736 3140 0010                  		move.w	d0,$10(a0)
0001773A 2428 0008                  		move.l	8(a0),d2
0001773E 2602                       		move.l	d2,d3
00017740 3028 0010                  		move.w	$10(a0),d0
00017744 0828 0000 0022             		btst	#0,$22(a0)
0001774A 6700                       		beq.s	loc_16C0C
0001774C 4440                       		neg.w	d0
0001774E                            
0001774E                            loc_16C0C:
0001774E 48C0                       		ext.l	d0
00017750 E180                       		asl.l	#8,d0
00017752 D480                       		add.l	d0,d2
00017754 2142 0008                  		move.l	d2,8(a0)
00017758 4843                       		swap	d3
0001775A B668 0008                  		cmp.w	8(a0),d3
0001775E 6700                       		beq.s	loc_16C64
00017760 7000                       		moveq	#0,d0
00017762 1028 003C                  		move.b	$3C(a0),d0
00017766 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001776A 0C01 0080                  		cmpi.b	#-$80,d1
0001776E 6600                       		bne.s	loc_16C50
00017770 4843                       		swap	d3
00017772 2143 0008                  		move.l	d3,8(a0)
00017776 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001777A 0868 0000 0022             		bchg	#0,$22(a0)
00017780 1168 0022 0001             		move.b	$22(a0),1(a0)
00017786 5228 003C                  		addq.b	#1,$3C(a0)
0001778A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017790 6000                       		bra.s	loc_16C64
00017792                            ; ===========================================================================
00017792                            
00017792                            loc_16C50:
00017792 4881                       		ext.w	d1
00017794 D368 000C                  		add.w	d1,$C(a0)
00017798 5228 003C                  		addq.b	#1,$3C(a0)
0001779C 0228 000F 003C             		andi.b	#$F,$3C(a0)
000177A2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000177A6                            
000177A6                            loc_16C64:
000177A6 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000177AC 6700                       		beq.s	loc_16C90
000177AE 0C11 0027                  		cmpi.b	#$27,0(a1)
000177B2 6700                       		beq.s	loc_16C7C
000177B4 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000177BA 6600                       		bne.s	loc_16C82
000177BC                            
000177BC                            loc_16C7C:
000177BC 117C 000A 0024             		move.b	#$A,$24(a0)
000177C2                            
000177C2                            loc_16C82:
000177C2 4EF9 0000 E04C             		jmp	DisplaySprite
000177C8                            
000177C8                            ; ===========================================================================
000177C8 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000177D0                            ; ===========================================================================
000177D0                            
000177D0                            loc_16C90:
000177D0 08E9 0007 0022             		bset	#7,$22(a1)
000177D6                            
000177D6                            loc_16C96:
000177D6 7000                       		moveq	#0,d0
000177D8 1028 0024                  		move.b	$24(a0),d0
000177DC 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000177E0 0828 0000 0022             		btst	#0,$22(a0)
000177E6 6700                       		beq.s	loc_16CAA
000177E8 4440                       		neg.w	d0
000177EA                            
000177EA                            loc_16CAA:
000177EA 3140 0010                  		move.w	d0,$10(a0)
000177EE 317C FC00 0012             		move.w	#-$400,$12(a0)
000177F4 117C 000C 0024             		move.b	#$C,$24(a0)
000177FA 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017800                            
00017800                            loc_16CC0:				; XREF: Obj78_Index
00017800 4EB9 0000 DFB4             		jsr	ObjectFall
00017806 4A68 0012                  		tst.w	$12(a0)
0001780A 6B00                       		bmi.s	loc_16CE0
0001780C 4EBA E14A                  		jsr	ObjHitFloor
00017810 4A41                       		tst.w	d1
00017812 6A00                       		bpl.s	loc_16CE0
00017814 D368 000C                  		add.w	d1,$C(a0)
00017818 317C FC00 0012             		move.w	#-$400,$12(a0)
0001781E                            
0001781E                            loc_16CE0:
0001781E 4A28 0001                  		tst.b	1(a0)
00017822 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017826 4EF9 0000 E04C             		jmp	DisplaySprite
0001782C                            ; ===========================================================================
0001782C                            Ani_obj78:
0001782C                            	include "_anim\obj78.asm"
0001782C                            ; ---------------------------------------------------------------------------
0001782C                            ; Animation script - Caterkiller enemy (uses non-standard format)
0001782C                            ; ---------------------------------------------------------------------------
0001782C 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
0001783C 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
0001784C 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
0001785C 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001786C 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001787C 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001788C 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001789C 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000178AC                            	even
000178AC                            	even
000178AC                            
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            Map_obj78:
000178AC                            	include "_maps\obj78.asm"
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000178AC                            ; ---------------------------------------------------------------------------
000178AC 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000178B0 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000178B4 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000178B8 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000178BC 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000178C0 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000178C4 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000178C8 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000178CC 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000178D0 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000178D4 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000178D8 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000178DC 01                         byte_16D9E:	dc.b 1
000178DD F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000178E2 01                         byte_16DA4:	dc.b 1
000178E3 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000178E8 01                         byte_16DAA:	dc.b 1
000178E9 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000178EE 01                         byte_16DB0:	dc.b 1
000178EF EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000178F4 01                         byte_16DB6:	dc.b 1
000178F5 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000178FA 01                         byte_16DBC:	dc.b 1
000178FB ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017900 01                         byte_16DC2:	dc.b 1
00017901 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017906 01                         byte_16DC8:	dc.b 1
00017907 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
0001790C 01                         byte_16DCE:	dc.b 1
0001790D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017912 01                         byte_16DD4:	dc.b 1
00017913 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017918 01                         byte_16DDA:	dc.b 1
00017919 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001791E 01                         byte_16DE0:	dc.b 1
0001791F F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00017924 01                         byte_16DE6:	dc.b 1
00017925 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
0001792A 01                         byte_16DEC:	dc.b 1
0001792B F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017930 01                         byte_16DF2:	dc.b 1
00017931 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00017936 01                         byte_16DF8:	dc.b 1
00017937 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
0001793C 01                         byte_16DFE:	dc.b 1
0001793D F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017942 01                         byte_16E04:	dc.b 1
00017943 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017948 01                         byte_16E0A:	dc.b 1
00017949 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001794E 01                         byte_16E10:	dc.b 1
0001794F EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00017954 01                         byte_16E16:	dc.b 1
00017955 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
0001795A 01                         byte_16E1C:	dc.b 1
0001795B ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017960 01                         byte_16E22:	dc.b 1
00017961 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017966 01                         byte_16E28:	dc.b 1
00017967 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001796C                            		even
0001796C                            		even
0001796C                            
0001796C                            ; ===========================================================================
0001796C                            ; ---------------------------------------------------------------------------
0001796C                            ; Object 79 - lamppost
0001796C                            ; ---------------------------------------------------------------------------
0001796C                            
0001796C                            Obj79:					; XREF: Obj_Index
0001796C 7000                       		moveq	#0,d0
0001796E 1028 0024                  		move.b	$24(a0),d0
00017972 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017976 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001797A 4EFA 8778                  		jmp	MarkObjGone
0001797E                            ; ===========================================================================
0001797E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017980 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017982 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017984 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017986                            ; ===========================================================================
00017986                            
00017986                            Obj79_Main:				; XREF: Obj79_Index
00017986 5428 0024                  		addq.b	#2,$24(a0)
0001798A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017992 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017998 117C 0004 0001             		move.b	#4,1(a0)
0001799E 117C 0008 0019             		move.b	#8,$19(a0)
000179A4 117C 0005 0018             		move.b	#5,$18(a0)
000179AA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000179AE 7000                       		moveq	#0,d0
000179B0 1028 0023                  		move.b	$23(a0),d0
000179B4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000179BA 0832 0000 0002             		btst	#0,2(a2,d0.w)
000179C0 6600                       		bne.s	Obj79_RedLamp
000179C2 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179C6 0201 007F                  		andi.b	#$7F,d1
000179CA 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000179CE 0202 007F                  		andi.b	#$7F,d2
000179D2 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000179D4 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000179D6                            
000179D6                            Obj79_RedLamp:
000179D6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000179DC 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000179E2 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000179E8 4E75                       		rts	
000179EA                            ; ===========================================================================
000179EA                            
000179EA                            Obj79_BlueLamp:				; XREF: Obj79_Index
000179EA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000179EE 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000179F2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000179F6 6B00 0000                  		bmi.w	locret_16F90
000179FA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000179FE 0201 007F                  		andi.b	#$7F,d1
00017A02 1428 0028                  		move.b	$28(a0),d2
00017A06 0202 007F                  		andi.b	#$7F,d2
00017A0A B202                       		cmp.b	d2,d1
00017A0C 6500                       		bcs.s	Obj79_HitLamp
00017A0E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017A12 7000                       		moveq	#0,d0
00017A14 1028 0023                  		move.b	$23(a0),d0
00017A18 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017A1E 117C 0004 0024             		move.b	#4,$24(a0)
00017A24 117C 0003 001A             		move.b	#3,$1A(a0)
00017A2A 6000 0000                  		bra.w	locret_16F90
00017A2E                            ; ===========================================================================
00017A2E                            
00017A2E                            Obj79_HitLamp:
00017A2E 3038 D008                  		move.w	($FFFFD008).w,d0
00017A32 9068 0008                  		sub.w	8(a0),d0
00017A36 5040                       		addq.w	#8,d0
00017A38 0C40 0010                  		cmpi.w	#$10,d0
00017A3C 6400 0000                  		bcc.w	locret_16F90
00017A40 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017A44 9068 000C                  		sub.w	$C(a0),d0
00017A48 0640 0040                  		addi.w	#$40,d0
00017A4C 0C40 0068                  		cmpi.w	#$68,d0
00017A50 6400                       		bcc.s	locret_16F90
00017A52 303C 00A1                  		move.w	#$A1,d0
00017A56 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017A5C 5428 0024                  		addq.b	#2,$24(a0)
00017A60 4EB9 0000 E4D2             		jsr	SingleObjLoad
00017A66 6600                       		bne.s	loc_16F76
00017A68 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017A6C 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017A72 3368 0008 0030             		move.w	8(a0),$30(a1)
00017A78 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017A7E 0469 0018 0032             		subi.w	#$18,$32(a1)
00017A84 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017A8C 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017A92 137C 0004 0001             		move.b	#4,1(a1)
00017A98 137C 0008 0019             		move.b	#8,$19(a1)
00017A9E 137C 0004 0018             		move.b	#4,$18(a1)
00017AA4 137C 0002 001A             		move.b	#2,$1A(a1)
00017AAA 337C 0020 0036             		move.w	#$20,$36(a1)
00017AB0                            
00017AB0                            loc_16F76:
00017AB0 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017AB6 6100 0000                  		bsr.w	Obj79_StoreInfo
00017ABA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017ABE 7000                       		moveq	#0,d0
00017AC0 1028 0023                  		move.b	$23(a0),d0
00017AC4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017ACA                            
00017ACA                            locret_16F90:
00017ACA 4E75                       		rts	
00017ACC                            ; ===========================================================================
00017ACC                            
00017ACC                            Obj79_AfterHit:				; XREF: Obj79_Index
00017ACC 4E75                       		rts	
00017ACE                            ; ===========================================================================
00017ACE                            
00017ACE                            Obj79_Twirl:				; XREF: Obj79_Index
00017ACE 5368 0036                  		subq.w	#1,$36(a0)
00017AD2 6A00                       		bpl.s	loc_16FA0
00017AD4 117C 0004 0024             		move.b	#4,$24(a0)
00017ADA                            
00017ADA                            loc_16FA0:
00017ADA 1028 0026                  		move.b	$26(a0),d0
00017ADE 0428 0010 0026             		subi.b	#$10,$26(a0)
00017AE4 0400 0040                  		subi.b	#$40,d0
00017AE8 4EB9 0000 2D34             		jsr	(CalcSine).l
00017AEE C3FC 0C00                  		muls.w	#$C00,d1
00017AF2 4841                       		swap	d1
00017AF4 D268 0030                  		add.w	$30(a0),d1
00017AF8 3141 0008                  		move.w	d1,8(a0)
00017AFC C1FC 0C00                  		muls.w	#$C00,d0
00017B00 4840                       		swap	d0
00017B02 D068 0032                  		add.w	$32(a0),d0
00017B06 3140 000C                  		move.w	d0,$C(a0)
00017B0A 4E75                       		rts	
00017B0C                            ; ===========================================================================
00017B0C                            ; ---------------------------------------------------------------------------
00017B0C                            ; Subroutine to	store information when you hit a lamppost
00017B0C                            ; ---------------------------------------------------------------------------
00017B0C                            
00017B0C                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017B0C 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017B12 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017B18 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017B1E 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017B24 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017B2A 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017B30 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00017B36 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017B3C 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017B42 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017B48 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017B4E 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017B54 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017B5A 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017B60 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017B66 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017B6C 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017B72 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017B78 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017B7E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017B84 4E75                       		rts	
00017B86                            
00017B86                            ; ---------------------------------------------------------------------------
00017B86                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017B86                            ; ---------------------------------------------------------------------------
00017B86                            
00017B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B86                            
00017B86                            
00017B86                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017B86 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017B8C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017B92 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017B98 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017B9E 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017BA4 4278 FE20                  		clr.w	($FFFFFE20).w
00017BA8 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017BAC 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017BB2 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017BB8 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017BBC 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017BC2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017BC8 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017BCE 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017BD4 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017BDA 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017BE0 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017BE6 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017BEC 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017BF2 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017BF8 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017BFE 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017C04 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017C0A 6600                       		bne.s	loc_170E4
00017C0C 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017C12 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017C18 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017C1E                            
00017C1E                            loc_170E4:
00017C1E 4A38 FE30                  		tst.b	($FFFFFE30).w
00017C22 6A00                       		bpl.s	locret_170F6
00017C24 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017C28 0440 00A0                  		subi.w	#$A0,d0
00017C2C 31C0 F728                  		move.w	d0,($FFFFF728).w
00017C30                            
00017C30                            locret_170F6:
00017C30 4E75                       		rts	
00017C32                            ; End of function Obj79_LoadInfo
00017C32                            
00017C32                            ; ===========================================================================
00017C32                            ; ---------------------------------------------------------------------------
00017C32                            ; Sprite mappings - lamppost
00017C32                            ; ---------------------------------------------------------------------------
00017C32                            Map_obj79:
00017C32                            	include "_maps\obj79.asm"
00017C32                            ; ---------------------------------------------------------------------------
00017C32                            ; Sprite mappings - lamppost
00017C32                            ; ---------------------------------------------------------------------------
00017C32 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017C36 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017C3A 06                         byte_17100:	dc.b 6
00017C3B E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C40 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C45 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C4A F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C4F D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017C54 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017C59 04                         byte_1711F:	dc.b 4
00017C5A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C5F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C64 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C69 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C6E 02                         byte_17134:	dc.b 2
00017C6F F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017C74 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017C79 06                         byte_1713F:	dc.b 6
00017C7A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017C7F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017C84 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017C89 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017C8E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017C93 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017C98                            		even
00017C98                            		even
00017C98                            
00017C98                            ; ===========================================================================
00017C98                            ; ---------------------------------------------------------------------------
00017C98                            ; Object 7D - hidden points at the end of a level
00017C98                            ; ---------------------------------------------------------------------------
00017C98                            
00017C98                            Obj7D:					; XREF: Obj_Index
00017C98 7000                       		moveq	#0,d0
00017C9A 1028 0024                  		move.b	$24(a0),d0
00017C9E 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017CA2 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017CA6                            ; ===========================================================================
00017CA6 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017CA8 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017CAA                            ; ===========================================================================
00017CAA                            
00017CAA                            Obj7D_Main:				; XREF: Obj7D_Index
00017CAA 7410                       		moveq	#$10,d2
00017CAC 3602                       		move.w	d2,d3
00017CAE D643                       		add.w	d3,d3
00017CB0 43F8 D000                  		lea	($FFFFD000).w,a1
00017CB4 3029 0008                  		move.w	8(a1),d0
00017CB8 9068 0008                  		sub.w	8(a0),d0
00017CBC D042                       		add.w	d2,d0
00017CBE B043                       		cmp.w	d3,d0
00017CC0 6400                       		bcc.s	Obj7D_ChkDel
00017CC2 3229 000C                  		move.w	$C(a1),d1
00017CC6 9268 000C                  		sub.w	$C(a0),d1
00017CCA D242                       		add.w	d2,d1
00017CCC B243                       		cmp.w	d3,d1
00017CCE 6400                       		bcc.s	Obj7D_ChkDel
00017CD0 4A78 FE08                  		tst.w	($FFFFFE08).w
00017CD4 6600                       		bne.s	Obj7D_ChkDel
00017CD6 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017CDA 6600                       		bne.s	Obj7D_ChkDel
00017CDC 5428 0024                  		addq.b	#2,$24(a0)
00017CE0 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017CE8 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017CEE 0028 0004 0001             		ori.b	#4,1(a0)
00017CF4 117C 0000 0018             		move.b	#0,$18(a0)
00017CFA 117C 0010 0019             		move.b	#$10,$19(a0)
00017D00 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017D06 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017D0C 303C 00C9                  		move.w	#$C9,d0
00017D10 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play bonus sound
00017D16 7000                       		moveq	#0,d0
00017D18 1028 0028                  		move.b	$28(a0),d0
00017D1C D040                       		add.w	d0,d0
00017D1E 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017D22 4EB9 0000 0000             		jsr	AddPoints
00017D28                            
00017D28                            Obj7D_ChkDel:
00017D28 3028 0008                  		move.w	8(a0),d0
00017D2C 0240 FF80                  		andi.w	#$FF80,d0
00017D30 3238 F700                  		move.w	($FFFFF700).w,d1
00017D34 0441 0080                  		subi.w	#$80,d1
00017D38 0241 FF80                  		andi.w	#$FF80,d1
00017D3C 9041                       		sub.w	d1,d0
00017D3E 0C40 0280                  		cmpi.w	#$280,d0
00017D42 6200                       		bhi.s	Obj7D_Delete
00017D44 4E75                       		rts	
00017D46                            ; ===========================================================================
00017D46                            
00017D46                            Obj7D_Delete:
00017D46 4EF9 0000 E088             		jmp	DeleteObject
00017D4C                            ; ===========================================================================
00017D4C 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017D4E 03E8                       		dc.w 1000
00017D50 0064                       		dc.w 100
00017D52 0001                       		dc.w 1
00017D54                            ; ===========================================================================
00017D54                            
00017D54                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017D54 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017D58 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017D5A 3028 0008                  		move.w	8(a0),d0
00017D5E 0240 FF80                  		andi.w	#-$80,d0
00017D62 3238 F700                  		move.w	($FFFFF700).w,d1
00017D66 0441 0080                  		subi.w	#$80,d1
00017D6A 0241 FF80                  		andi.w	#-$80,d1
00017D6E 9041                       		sub.w	d1,d0
00017D70 0C40 0280                  		cmpi.w	#$280,d0
00017D74 6200                       		bhi.s	Obj7D_Delete2
00017D76 4EF9 0000 E04C             		jmp	DisplaySprite
00017D7C                            ; ===========================================================================
00017D7C                            
00017D7C                            Obj7D_Delete2:
00017D7C 4EF9 0000 E088             		jmp	DeleteObject
00017D82                            ; ===========================================================================
00017D82                            ; ---------------------------------------------------------------------------
00017D82                            ; Sprite mappings - hidden points at the end of	a level
00017D82                            ; ---------------------------------------------------------------------------
00017D82                            Map_obj7D:
00017D82                            	include "_maps\obj7D.asm"
00017D82                            ; ---------------------------------------------------------------------------
00017D82                            ; Sprite mappings - hidden points at the end of	a level
00017D82                            ; ---------------------------------------------------------------------------
00017D82 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017D86 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017D8A 00                         byte_17250:	dc.b 0
00017D8B 01                         byte_17251:	dc.b 1
00017D8C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017D91 01                         byte_17257:	dc.b 1
00017D92 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017D97 01                         byte_1725D:	dc.b 1
00017D98 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017D9E 00                         		even
00017D9E 00                         		even
00017D9E                            
00017D9E                            ; ===========================================================================
00017D9E                            ; ---------------------------------------------------------------------------
00017D9E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017D9E                            ; ---------------------------------------------------------------------------
00017D9E                            
00017D9E                            Obj8A:					; XREF: Obj_Index
00017D9E 7000                       		moveq	#0,d0
00017DA0 1028 0024                  		move.b	$24(a0),d0
00017DA4 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017DA8 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017DAC                            ; ===========================================================================
00017DAC 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017DAE 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017DB0                            ; ===========================================================================
00017DB0                            
00017DB0                            Obj8A_Main:				; XREF: Obj8A_Index
00017DB0 5428 0024                  		addq.b	#2,$24(a0)
00017DB4 317C 0120 0008             		move.w	#$120,8(a0)
00017DBA 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017DC0 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017DC8 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017DCE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017DD2 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017DD6 117C 0000 0001             		move.b	#0,1(a0)
00017DDC 117C 0000 0018             		move.b	#0,$18(a0)
00017DE2 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017DE8 6600                       		bne.s	Obj8A_Display	; if not, branch
00017DEA 317C 00A6 0002             		move.w	#$A6,2(a0)
00017DF0 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017DF6 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017DFA 6700                       		beq.s	Obj8A_Display	; if not, branch
00017DFC 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017E02 6600                       		bne.s	Obj8A_Display	; if not, branch
00017E04 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017E0A 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017E10 4EF9 0000 E088             		jmp	DeleteObject
00017E16                            ; ===========================================================================
00017E16                            
00017E16                            Obj8A_Display:				; XREF: Obj8A_Index
00017E16 4EF9 0000 E04C             		jmp	DisplaySprite
00017E1C                            ; ===========================================================================
00017E1C                            ; ---------------------------------------------------------------------------
00017E1C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017E1C                            ; ---------------------------------------------------------------------------
00017E1C                            Map_obj8A:
00017E1C                            	include "_maps\obj8A.asm"
00017E1C                            Map_ca8f:
00017E1C 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017E1E 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017E20 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017E22 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017E24 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017E26 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017E28 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017E2A 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017E2C 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017E2E 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017E30 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017E32 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
00017E34 08                         Map_ca8f_16: 	dc.b $8
00017E35 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017E3A E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017E3F F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017E44 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017E49 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017E4E B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017E53 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017E58 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017E5D 10                         Map_ca8f_3F: 	dc.b $10
00017E5E D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017E63 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017E68 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017E6D D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017E72 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017E77 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017E7C D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017E81 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017E86 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017E8B 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017E90 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017E95 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017E9A 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017E9F 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017EA4 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017EA9 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017EAE 0A                         Map_ca8f_90: 	dc.b $A
00017EAF D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017EB4 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017EB9 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017EBE D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017EC3 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017EC8 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017ECD D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017ED2 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017ED7 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017EDC 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017EE1 18                         Map_ca8f_C3: 	dc.b $18
00017EE2 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017EE7 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017EEC D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017EF1 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017EF6 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EFB D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017F00 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017F05 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017F0A D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017F0F D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017F14 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017F19 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017F1E D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017F23 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017F28 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017F2D 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017F32 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017F37 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017F3C 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017F41 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017F46 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017F4B 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017F50 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017F55 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017F5A 14                         Map_ca8f_13C: 	dc.b $14
00017F5B D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017F60 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017F65 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017F6A D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017F6F D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017F74 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017F79 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017F7E 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017F83 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017F88 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017F8D 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017F92 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017F97 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017F9C 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017FA1 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017FA6 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017FAB 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017FB0 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017FB5 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017FBA 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017FBF 1A                         Map_ca8f_1A1: 	dc.b $1A
00017FC0 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017FC5 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017FCA D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017FCF D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017FD4 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017FD9 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017FDE D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017FE3 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017FE8 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017FED D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017FF2 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017FF7 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017FFC 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00018001 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00018006 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
0001800B 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00018010 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00018015 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
0001801A 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
0001801F 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00018024 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00018029 0805 0004 28               	dc.b $8, $5, $0, $4, $28
0001802E 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00018033 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00018038 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
0001803D 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00018042 17                         Map_ca8f_224: 	dc.b $17
00018043 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00018048 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
0001804D D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00018052 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00018057 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
0001805C D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00018061 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018066 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
0001806B D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00018070 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018075 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
0001807A D009 0008 58               	dc.b $D0, $9, $0, $8, $58
0001807F 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018084 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018089 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
0001808E 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00018093 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00018098 0005 0004 14               	dc.b $0, $5, $0, $4, $14
0001809D 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
000180A2 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
000180A7 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
000180AC 2005 0058 04               	dc.b $20, $5, $0, $58, $4
000180B1 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
000180B6 1F                         Map_ca8f_298: 	dc.b $1F
000180B7 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000180BC D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000180C1 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000180C6 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000180CB D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000180D0 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000180D5 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000180DA D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000180DF D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000180E4 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
000180E9 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
000180EE D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000180F3 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000180F8 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
000180FD 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00018102 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018107 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
0001810C 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00018111 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00018116 0001 0046 14               	dc.b $0, $1, $0, $46, $14
0001811B 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00018120 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00018125 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
0001812A 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
0001812F 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00018134 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00018139 0001 0046 74               	dc.b $0, $1, $0, $46, $74
0001813E 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00018143 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00018148 2005 0012 18               	dc.b $20, $5, $0, $12, $18
0001814D 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00018152 0F                         Map_ca8f_334: 	dc.b $F
00018153 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00018158 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
0001815D F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00018162 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018167 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
0001816C F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00018171 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018176 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
0001817B F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00018180 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018185 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0001818A F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
0001818F F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018194 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00018199 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
0001819E 08                         Map_ca8f_380: 	dc.b $8
0001819F 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
000181A4 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
000181A9 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
000181AE 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
000181B3 3005 0000 08               	dc.b $30, $5, $0, $0, $8
000181B8 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000181BD 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000181C2 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000181C7 20                         Map_ca8f_3A9: 	dc.b $20
000181C8 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000181CD ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000181D2 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000181D7 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000181DC ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000181E1 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
000181E6 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
000181EB FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000181F0 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000181F5 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
000181FA FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000181FF FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018204 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018209 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
0001820E 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00018213 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018218 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
0001821D 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00018222 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018227 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
0001822C 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018231 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018236 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
0001823B 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00018240 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018245 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
0001824A 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
0001824F 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018254 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018259 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001825E 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018263 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018268 1C                         Map_ca8f_tmss:	dc.b 28
000182F6 00                         	even
000182F6 00                         	even
000182F6                            
000182F6                            ; ===========================================================================
000182F6                            ; ---------------------------------------------------------------------------
000182F6                            ; Object 3D - matthew boss - modified by GK89
000182F6                            ; ---------------------------------------------------------------------------
000182F6                            
000182F6                            Obj3D:					; XREF: Obj_Index
000182F6 7000                       		moveq	#0,d0
000182F8 1028 0024                  		move.b	$24(a0),d0
000182FC 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018300 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018304                            ; ===========================================================================
00018304 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018306 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018308 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
0001830A 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
0001830C                            
0001830C 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
0001830E 0401                       		dc.b 4,	1
00018310 0607                       		dc.b 6,	7
00018312                            ; ===========================================================================
00018312                            
00018312                            Obj3D_Main:				; XREF: Obj3D_Index
00018312 45F9 0001 830C             		lea	(Obj3D_ObjData).l,a2
00018318 2248                       		movea.l	a0,a1
0001831A 7202                       		moveq	#2,d1
0001831C 6000                       		bra.s	Obj3D_LoadBoss
0001831E                            ; ===========================================================================
0001831E                            
0001831E                            Obj3D_Loop:
0001831E 4EB9 0000 E4E8             		jsr	SingleObjLoad2
00018324 6600                       		bne.s	loc_17772
00018326                            
00018326                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018326 135A 0024                  		move.b	(a2)+,$24(a1)
0001832A 12BC 003D                  		move.b	#$3D,0(a1)
0001832E 3368 0008 0008             		move.w	8(a0),8(a1)
00018334 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001833A 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018342 337C 0400 0002             		move.w	#$400,2(a1)
00018348 137C 0004 0001             		move.b	#4,1(a1)
0001834E 137C 0020 0019             		move.b	#$20,$19(a1)
00018354 137C 0003 0018             		move.b	#3,$18(a1)
0001835A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001835E 2348 0034                  		move.l	a0,$34(a1)
00018362 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018366                            
00018366                            loc_17772:
00018366 3168 0008 0030             		move.w	8(a0),$30(a0)
0001836C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018372 117C 000F 0020             		move.b	#$F,$20(a0)
00018378 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
0001837E                            
0001837E                            Obj3D_ShipMain:				; XREF: Obj3D_Index
0001837E 7000                       		moveq	#0,d0
00018380 1028 0025                  		move.b	$25(a0),d0
00018384 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00018388 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
0001838C 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018392 4EB9 0000 B09A             		jsr	AnimateSprite
00018398 1028 0022                  		move.b	$22(a0),d0
0001839C 0200 0003                  		andi.b	#3,d0
000183A0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000183A6 8128 0001                  		or.b	d0,1(a0)
000183AA 4EF9 0000 E04C             		jmp	DisplaySprite
000183B0                            ; ===========================================================================
000183B0 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000183B2 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000183B4 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000183B6 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000183B8 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000183BA 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000183BC 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000183BE                            ; ===========================================================================
000183BE                            
000183BE                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000183BE 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000183C4 6100 0000                  		bsr.w	BossMove
000183C8 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000183CE 6600                       		bne.s	loc_177E6
000183D0 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000183D6 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000183DA                            
000183DA                            loc_177E6:
000183DA 1028 003F                  		move.b	$3F(a0),d0
000183DE 4EB9 0000 2D34             		jsr	(CalcSine).l
000183E4 EC40                       		asr.w	#6,d0
000183E6 D068 0038                  		add.w	$38(a0),d0
000183EA 3140 000C                  		move.w	d0,$C(a0)
000183EE 3168 0030 0008             		move.w	$30(a0),8(a0)
000183F4 5428 003F                  		addq.b	#2,$3F(a0)
000183F8 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000183FE 6400                       		bcc.s	locret_1784A
00018400 4A28 0022                  		tst.b	$22(a0)
00018404 6B00                       		bmi.s	loc_1784C
00018406 4A28 0020                  		tst.b	$20(a0)
0001840A 6600                       		bne.s	locret_1784A
0001840C 4A28 003E                  		tst.b	$3E(a0)
00018410 6600                       		bne.s	Obj3D_ShipFlash
00018412 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018418 303C 00AC                  		move.w	#$AC,d0
0001841C 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018422                            
00018422                            Obj3D_ShipFlash:
00018422 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018426 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018428 4A51                       		tst.w	(a1)
0001842A 6600                       		bne.s	loc_1783C
0001842C 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018430                            
00018430                            loc_1783C:
00018430 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018432 5328 003E                  		subq.b	#1,$3E(a0)
00018436 6600                       		bne.s	locret_1784A
00018438 117C 000F 0020             		move.b	#$F,$20(a0)
0001843E                            
0001843E                            locret_1784A:
0001843E 4E75                       		rts	
00018440                            ; ===========================================================================
00018440                            
00018440                            loc_1784C:				; XREF: loc_177E6
00018440 7064                       		moveq	#100,d0
00018442 6100 0000                  		bsr.w	AddPoints
00018446 117C 0008 0025             		move.b	#8,$25(a0)
0001844C 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018452 4E75                       		rts	
00018454                            
00018454                            ; ---------------------------------------------------------------------------
00018454                            ; Defeated boss	subroutine
00018454                            ; ---------------------------------------------------------------------------
00018454                            
00018454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018454                            
00018454                            
00018454                            BossDefeated:
00018454 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018458 0200 0007                  		andi.b	#7,d0
0001845C 6600                       		bne.s	locret_178A2
0001845E 4EB9 0000 E4D2             		jsr	SingleObjLoad
00018464 6600                       		bne.s	locret_178A2
00018466 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001846A 3368 0008 0008             		move.w	8(a0),8(a1)
00018470 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018476 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001847C 3200                       		move.w	d0,d1
0001847E 7200                       		moveq	#0,d1
00018480 1200                       		move.b	d0,d1
00018482 E409                       		lsr.b	#2,d1
00018484 0441 0020                  		subi.w	#$20,d1
00018488 D369 0008                  		add.w	d1,8(a1)
0001848C E048                       		lsr.w	#8,d0
0001848E E608                       		lsr.b	#3,d0
00018490 D169 000C                  		add.w	d0,$C(a1)
00018494                            
00018494                            locret_178A2:
00018494 4E75                       		rts	
00018496                            ; End of function BossDefeated
00018496                            
00018496                            ; ---------------------------------------------------------------------------
00018496                            ; Subroutine to	move a boss
00018496                            ; ---------------------------------------------------------------------------
00018496                            
00018496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018496                            
00018496                            
00018496                            BossMove:
00018496 2428 0030                  		move.l	$30(a0),d2
0001849A 2628 0038                  		move.l	$38(a0),d3
0001849E 3028 0010                  		move.w	$10(a0),d0
000184A2 48C0                       		ext.l	d0
000184A4 E180                       		asl.l	#8,d0
000184A6 D480                       		add.l	d0,d2
000184A8 3028 0012                  		move.w	$12(a0),d0
000184AC 48C0                       		ext.l	d0
000184AE E180                       		asl.l	#8,d0
000184B0 D680                       		add.l	d0,d3
000184B2 2142 0030                  		move.l	d2,$30(a0)
000184B6 2143 0038                  		move.l	d3,$38(a0)
000184BA 4E75                       		rts	
000184BC                            ; End of function BossMove
000184BC                            
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000184BC 6100 FFD8                  		bsr.w	BossMove
000184C0 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000184C6 6600                       		bne.s	loc_17916
000184C8 317C 0000 0010             		move.w	#0,$10(a0)
000184CE 317C 0000 0012             		move.w	#0,$12(a0)
000184D4 5428 0025                  		addq.b	#2,$25(a0)
000184D8 4EB9 0000 E4E8             		jsr	SingleObjLoad2
000184DE 6600                       		bne.s	loc_17910
000184E0 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000184E4 3368 0030 0008             		move.w	$30(a0),8(a1)
000184EA 3368 0038 000C             		move.w	$38(a0),$C(a1)
000184F0 2348 0034                  		move.l	a0,$34(a1)
000184F4                            
000184F4                            loc_17910:
000184F4 317C 0077 003C             		move.w	#$77,$3C(a0)
000184FA                            
000184FA                            loc_17916:
000184FA 6000 FEDE                  		bra.w	loc_177E6
000184FE                            ; ===========================================================================
000184FE                            
000184FE                            Obj3D_ShipMove:				; XREF:  sonic follow move
000184FE 5368 003C                  		subq.w	#1,$3C(a0)
00018502 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018508 5428 0025                  		addq.b	#2,$25(a0)
0001850C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018512 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018516 9068 0008                  		sub.w	8(a0),d0		 
0001851A 6A00                       		bpl.s	Obj3D_left			 
0001851C 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018522 6000                       		bra.s	Obj3D_right		 
00018524 08A8 0005 0022             		bclr	#5,$22(a0)
0001852A 4EB9 0000 0000              		jsr     loc_17950
00018530 4E75                       		rts
00018532                            ; ===========================================================================
00018532                            
00018532                            Obj3D_right:
00018532 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018538 4E75                       		Rts
0001853A                            
0001853A                            Obj3D_left:
0001853A 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018540 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018546 6600                       		bne.s	RTSboss  	; if not, branch
00018548 0868 0000 0022              		bchg	#0,$22(a0)
0001854E                            
0001854E                            RTSboss:	    
0001854E 4E75                       		rts
00018550                             ; ===========================================================================
00018550                            
00018550                            Obj3D_UpStuff:
00018550 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018554 9068 000C                  		sub.w	$C(a0),d0		 
00018558 6A00                       		bpl.s	Obj3D_down			 
0001855A 6000                        		bra.s	Obj3D_up		 
0001855C 08A8 0005 0022             		bclr	#5,$22(a0)
00018562                             
00018562                            Obj3D_up:		
00018562 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018568 4E75                        	    rts
0001856A                            
0001856A                            Obj3D_down:
0001856A 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018570                            
00018570                            loc_17950:
00018570 6000 FE68                  		bra.w	loc_177E6
00018574                            ; ===========================================================================
00018574                            
00018574                            loc_17954:				; XREF: Obj3D_ShipIndex
00018574 5368 003C                  		subq.w	#1,$3C(a0)
00018578 6B00                       		bmi.s	loc_17960
0001857A 6100 FF1A                  		bsr.w	BossMove
0001857E 6000                       		bra.s	loc_17976
00018580                            ; ===========================================================================
00018580                            
00018580                            loc_17960:
00018580 0868 0000 0022             		bchg	#0,$22(a0)
00018586 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001858C 5528 0025                  		subq.b	#2,$25(a0)
00018590 317C 0000 0010             		move.w	#0,$10(a0)
00018596                            
00018596                            loc_17976:
00018596 6000 FE42                  		bra.w	loc_177E6
0001859A                            ; ===========================================================================
0001859A                            
0001859A                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001859A 5368 003C                  		subq.w	#1,$3C(a0)
0001859E 6B00                       		bmi.s	loc_17984
000185A0 6000 FEB2                  		bra.w	BossDefeated
000185A4                            ; ===========================================================================
000185A4                            
000185A4                            loc_17984:
000185A4 08E8 0000 0022             		bset	#0,$22(a0)
000185AA 08A8 0007 0022             		bclr	#7,$22(a0)
000185B0 4268 0010                  		clr.w	$10(a0)
000185B4 5428 0025                  		addq.b	#2,$25(a0)
000185B8 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000185BE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000185C2 6600                       		bne.s	locret_179AA
000185C4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000185CA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000185D0 6000 FE82                  		bra.w	BossDefeated
000185D4                            
000185D4                            locret_179AA:
000185D4 4E75                       		rts	
000185D6                            ; ===========================================================================
000185D6                            
000185D6                            loc_179AC:				; XREF: Obj3D_ShipIndex
000185D6 4EB9 0000 DFB4             		jsr ObjectFall		
000185DC 5268 003C                  		addq.w	#1,$3C(a0)
000185E0 6700                       		beq.s	loc_179BC
000185E2 6A00                       		bpl.s	loc_179C2
000185E4 6000                       		bra.s	loc_179EE
000185E6                            ; ===========================================================================
000185E6                            
000185E6                            loc_179BC:
000185E6 4268 0012                  		clr.w	$12(a0)
000185EA 6000                       		bra.s	loc_179EE
000185EC                            ; ===========================================================================
000185EC                            
000185EC                            loc_179C2:
000185EC 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000185F2 6500                       		bcs.s	loc_179DA
000185F4 6700                       		beq.s	loc_179E0
000185F6 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000185FC 6500                       		bcs.s	loc_179EE
000185FE 5428 0025                  		addq.b	#2,$25(a0)
00018602 6000                       		bra.s	loc_179EE
00018604                            ; ===========================================================================
00018604                            
00018604                            loc_179DA:
00018604 5168 0012                  		subq.w	#8,$12(a0)
00018608 6000                       		bra.s	loc_179EE
0001860A 6000 FE48                  		bra.w	BossDefeated
0001860E                            ; ===========================================================================
0001860E                            
0001860E                            loc_179E0:
0001860E 4268 0012                  		clr.w	$12(a0)
00018612 303C 0081                  		move.w	#$81,d0
00018616 4EB9 0000 1594             		jsr	(PlaySound).l	; play GHZ music
0001861C                            
0001861C                            loc_179EE:
0001861C 6100 FE78                  		bsr.w	BossMove
00018620 6000 FDB8                  		bra.w	loc_177E6
00018624                            ; ===========================================================================
00018624                            
00018624                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018624 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001862A 6700                       		beq.s	loc_17A10
0001862C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018630 6000                       		bra.s	loc_17A16
00018632                            ; ===========================================================================
00018632                            
00018632                            loc_17A10:
00018632 4A28 0001                  		tst.b	1(a0)
00018636 6A00                       		bpl.s	Obj3D_ShipDel
00018638                            
00018638                            loc_17A16:
00018638 6100 FE5C                  		bsr.w	BossMove
0001863C 6000 FD9C                  		bra.w	loc_177E6
00018640                            ; ===========================================================================
00018640                            
00018640                            Obj3D_ShipDel:
00018640 4EF9 0000 E088             		jmp	DeleteObject
00018646                            ; ===========================================================================
00018646                            
00018646                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018646 7000                       		moveq	#0,d0
00018648 7201                       		moveq	#1,d1
0001864A 2268 0034                  		movea.l	$34(a0),a1
0001864E 1029 0025                  		move.b	$25(a1),d0
00018652 5900                       		subq.b	#4,d0
00018654 6600                       		bne.s	loc_17A3E
00018656 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001865C 6600                       		bne.s	loc_17A46
0001865E 7204                       		moveq	#4,d1
00018660                            
00018660                            loc_17A3E:
00018660 5D00                       		subq.b	#6,d0
00018662 6B00                       		bmi.s	loc_17A46
00018664 720A                       		moveq	#$A,d1
00018666 6000                       		bra.s	loc_17A5A
00018668                            ; ===========================================================================
00018668                            
00018668                            loc_17A46:
00018668 4A29 0020                  		tst.b	$20(a1)
0001866C 6600                       		bne.s	loc_17A50
0001866E 7205                       		moveq	#5,d1
00018670 6000                       		bra.s	loc_17A5A
00018672                            ; ===========================================================================
00018672                            
00018672                            loc_17A50:
00018672 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018678 6500                       		bcs.s	loc_17A5A
0001867A 7204                       		moveq	#4,d1
0001867C                            
0001867C                            loc_17A5A:
0001867C 1141 001C                  		move.b	d1,$1C(a0)
00018680 5500                       		subq.b	#2,d0
00018682 6600                       		bne.s	Obj3D_FaceDisp
00018684 117C 0006 001C             		move.b	#6,$1C(a0)
0001868A 4A28 0001                  		tst.b	1(a0)
0001868E 6A00                       		bpl.s	Obj3D_FaceDel
00018690                            
00018690                            Obj3D_FaceDisp:
00018690 6000                       		bra.s	Obj3D_Display
00018692                            ; ===========================================================================
00018692                            
00018692                            Obj3D_FaceDel:
00018692 4EF9 0000 E088             		jmp	DeleteObject
00018698                            ; ===========================================================================
00018698                            
00018698                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018698 117C 0007 001C             		move.b	#7,$1C(a0)
0001869E 2268 0034                  		movea.l	$34(a0),a1
000186A2 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000186A8 6600                       		bne.s	loc_17A96
000186AA 117C 000B 001C             		move.b	#$B,$1C(a0)
000186B0 4A28 0001                  		tst.b	1(a0)
000186B4 6A00                       		bpl.s	Obj3D_FlameDel
000186B6 6000                       		bra.s	Obj3D_FlameDisp
000186B8                            ; ===========================================================================
000186B8                            
000186B8                            loc_17A96:
000186B8 3029 0010                  		move.w	$10(a1),d0
000186BC 6700                       		beq.s	Obj3D_FlameDisp
000186BE 117C 0008 001C             		move.b	#8,$1C(a0)
000186C4                            
000186C4                            Obj3D_FlameDisp:
000186C4 6000                       		bra.s	Obj3D_Display
000186C6                            ; ===========================================================================
000186C6                            
000186C6                            Obj3D_FlameDel:
000186C6 4EF9 0000 E088             		jmp	DeleteObject
000186CC                            ; ===========================================================================
000186CC                            
000186CC                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000186CC 2268 0034                  		movea.l	$34(a0),a1
000186D0 3169 0008 0008             		move.w	8(a1),8(a0)
000186D6 3169 000C 000C             		move.w	$C(a1),$C(a0)
000186DC 1169 0022 0022             		move.b	$22(a1),$22(a0)
000186E2 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000186E8 4EB9 0000 B09A             		jsr	AnimateSprite
000186EE 1028 0022                  		move.b	$22(a0),d0
000186F2 0200 0003                  		andi.b	#3,d0
000186F6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000186FC 8128 0001                  		or.b	d0,1(a0)
00018700 4EF9 0000 E04C             		jmp	DisplaySprite
00018706                            ; ===========================================================================
00018706                            ; ---------------------------------------------------------------------------
00018706                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018706                            ; ---------------------------------------------------------------------------
00018706                            
00018706                            Obj48:					; XREF: Obj_Index
00018706 7000                       		moveq	#0,d0
00018708 1028 0024                  		move.b	$24(a0),d0
0001870C 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018710 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018714                            ; ===========================================================================
00018714 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018716 0000                       		dc.w Obj48_Base-Obj48_Index
00018718 0000                       		dc.w Obj48_Display2-Obj48_Index
0001871A 0000                       		dc.w loc_17C68-Obj48_Index
0001871C 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
0001871E                            ; ===========================================================================
0001871E                            
0001871E                            Obj48_Main:				; XREF: Obj48_Index
0001871E 5428 0024                  		addq.b	#2,$24(a0)
00018722 317C 4080 0026             		move.w	#$4080,$26(a0)
00018728 317C FE00 003E             		move.w	#-$200,$3E(a0)
0001872E 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018736 317C 046C 0002             		move.w	#$46C,2(a0)
0001873C 45E8 0028                  		lea	$28(a0),a2
00018740 14FC 0000                  		move.b	#0,(a2)+
00018744 7205                       		moveq	#5,d1
00018746 2248                       		movea.l	a0,a1
00018748 6000                       		bra.s	loc_17B60
0001874A                            ; ===========================================================================
0001874A                            
0001874A                            Obj48_MakeLinks:
0001874A 4EB9 0000 E4E8             		jsr	SingleObjLoad2
00018750 6600                       		bne.s	Obj48_MakeBall
00018752 3368 0008 0008             		move.w	8(a0),8(a1)
00018758 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001875E 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018762 137C 0006 0024             		move.b	#6,$24(a1)
00018768 237C 0000 844E 0004        		move.l	#Map_obj15,4(a1)
00018770 337C 0380 0002             		move.w	#$380,2(a1)
00018776 137C 0001 001A             		move.b	#1,$1A(a1)
0001877C 5228 0028                  		addq.b	#1,$28(a0)
00018780                            
00018780                            loc_17B60:				; XREF: Obj48_Main
00018780 3A09                       		move.w	a1,d5
00018782 0445 D000                  		subi.w	#$D000,d5
00018786 EC4D                       		lsr.w	#6,d5
00018788 0245 007F                  		andi.w	#$7F,d5
0001878C 14C5                       		move.b	d5,(a2)+
0001878E 137C 0004 0001             		move.b	#4,1(a1)
00018794 137C 0008 0019             		move.b	#8,$19(a1)
0001879A 137C 0006 0018             		move.b	#6,$18(a1)
000187A0 2368 0034 0034             		move.l	$34(a0),$34(a1)
000187A6 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000187AA                            
000187AA                            Obj48_MakeBall:
000187AA 137C 0008 0024             		move.b	#8,$24(a1)
000187B0 237C 0000 8A3E 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000187B8 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000187BE 137C 0001 001A             		move.b	#1,$1A(a1)
000187C4 137C 0005 0018             		move.b	#5,$18(a1)
000187CA 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000187D0 4E75                       		rts	
000187D2                            ; ===========================================================================
000187D2                            
000187D2 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000187D8                            
000187D8                            ; ===========================================================================
000187D8                            
000187D8                            Obj48_Base:				; XREF: Obj48_Index
000187D8 47F9 0001 87D2             		lea	(Obj48_PosData).l,a3
000187DE 45E8 0028                  		lea	$28(a0),a2
000187E2 7C00                       		moveq	#0,d6
000187E4 1C1A                       		move.b	(a2)+,d6
000187E6                            
000187E6                            loc_17BC6:
000187E6 7800                       		moveq	#0,d4
000187E8 181A                       		move.b	(a2)+,d4
000187EA ED4C                       		lsl.w	#6,d4
000187EC 0684 00FF D000             		addi.l	#$FFD000,d4
000187F2 2244                       		movea.l	d4,a1
000187F4 101B                       		move.b	(a3)+,d0
000187F6 B029 003C                  		cmp.b	$3C(a1),d0
000187FA 6700                       		beq.s	loc_17BE0
000187FC 5229 003C                  		addq.b	#1,$3C(a1)
00018800                            
00018800                            loc_17BE0:
00018800 51CE FFE4                  		dbf	d6,loc_17BC6
00018804                            
00018804 B029 003C                  		cmp.b	$3C(a1),d0
00018808 6600                       		bne.s	loc_17BFA
0001880A 2268 0034                  		movea.l	$34(a0),a1
0001880E 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018814 6600                       		bne.s	loc_17BFA
00018816 5428 0024                  		addq.b	#2,$24(a0)
0001881A                            
0001881A                            loc_17BFA:
0001881A 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018820 6700                       		beq.s	Obj48_Display
00018822 5268 0032                  		addq.w	#1,$32(a0)
00018826                            
00018826                            Obj48_Display:
00018826 6100 0000                  		bsr.w	sub_17C2A
0001882A 1028 0026                  		move.b	$26(a0),d0
0001882E 4EB9 0000 83C0             		jsr	(Obj15_Move2).l
00018834 4EF9 0000 E04C             		jmp	DisplaySprite
0001883A                            ; ===========================================================================
0001883A                            
0001883A                            Obj48_Display2:				; XREF: Obj48_Index
0001883A 6100 0000                  		bsr.w	sub_17C2A
0001883E 4EB9 0000 8380             		jsr	(Obj48_Move).l
00018844 4EF9 0000 E04C             		jmp	DisplaySprite
0001884A                            
0001884A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001884A                            
0001884A                            
0001884A                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001884A 2268 0034                  		movea.l	$34(a0),a1
0001884E 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018854 6400                       		bcc.s	loc_17C3C
00018856 0868 0000 001A             		bchg	#0,$1A(a0)
0001885C                            
0001885C                            loc_17C3C:
0001885C 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018862 3029 000C                  		move.w	$C(a1),d0
00018866 D068 0032                  		add.w	$32(a0),d0
0001886A 3140 0038                  		move.w	d0,$38(a0)
0001886E 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018874 4A29 0022                  		tst.b	$22(a1)
00018878 6A00                       		bpl.s	locret_17C66
0001887A 10BC 003F                  		move.b	#$3F,0(a0)
0001887E 117C 0000 0024             		move.b	#0,$24(a0)
00018884                            
00018884                            locret_17C66:
00018884 4E75                       		rts	
00018886                            ; End of function sub_17C2A
00018886                            
00018886                            ; ===========================================================================
00018886                            
00018886                            loc_17C68:				; XREF: Obj48_Index
00018886 2268 0034                  		movea.l	$34(a0),a1
0001888A 4A29 0022                  		tst.b	$22(a1)
0001888E 6A00                       		bpl.s	Obj48_Display3
00018890 10BC 003F                  		move.b	#$3F,0(a0)
00018894 117C 0000 0024             		move.b	#0,$24(a0)
0001889A                            
0001889A                            Obj48_Display3:
0001889A 4EF9 0000 E04C             		jmp	DisplaySprite
000188A0                            ; ===========================================================================
000188A0                            
000188A0                            Obj48_ChkVanish:			; XREF: Obj48_Index
000188A0 7000                       		moveq	#0,d0
000188A2 4A28 001A                  		tst.b	$1A(a0)
000188A6 6600                       		bne.s	Obj48_Vanish
000188A8 5200                       		addq.b	#1,d0
000188AA                            
000188AA                            Obj48_Vanish:
000188AA 1140 001A                  		move.b	d0,$1A(a0)
000188AE 2268 0034                  		movea.l	$34(a0),a1
000188B2 4A29 0022                  		tst.b	$22(a1)
000188B6 6A00                       		bpl.s	Obj48_Display4
000188B8 117C 0000 0020             		move.b	#0,$20(a0)
000188BE 6100 FB94                  		bsr.w	BossDefeated
000188C2 5328 003C                  		subq.b	#1,$3C(a0)
000188C6 6A00                       		bpl.s	Obj48_Display4
000188C8 10BC 003F                  		move.b	#$3F,(a0)
000188CC 117C 0000 0024             		move.b	#0,$24(a0)
000188D2                            
000188D2                            Obj48_Display4:
000188D2 4EF9 0000 E04C             		jmp	DisplaySprite
000188D8                            ; ===========================================================================
000188D8                            Ani_Eggman:
000188D8                            	include "_anim\Eggman.asm"
000188D8                            ; ---------------------------------------------------------------------------
000188D8                            ; Animation script - Eggman (bosses)
000188D8                            ; ---------------------------------------------------------------------------
000188D8 0000                       		dc.w byte_17CD4-Ani_Eggman
000188DA 0000                       		dc.w byte_17CD8-Ani_Eggman
000188DC 0000                       		dc.w byte_17CDC-Ani_Eggman
000188DE 0000                       		dc.w byte_17CE0-Ani_Eggman
000188E0 0000                       		dc.w byte_17CE4-Ani_Eggman
000188E2 0000                       		dc.w byte_17CE8-Ani_Eggman
000188E4 0000                       		dc.w byte_17CEC-Ani_Eggman
000188E6 0000                       		dc.w byte_17CF0-Ani_Eggman
000188E8 0000                       		dc.w byte_17CF4-Ani_Eggman
000188EA 0000                       		dc.w byte_17CF8-Ani_Eggman
000188EC 0000                       		dc.w byte_17CFC-Ani_Eggman
000188EE 0000                       		dc.w byte_17D00-Ani_Eggman
000188F0 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000188F4 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000188F8 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000188FC 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018900 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018904 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018908 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001890C 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018910 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018914 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018918 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001891C 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018928                            		even
00018928                            		even
00018928                            Ani_TetoB:
00018928                            	include "_anim\TetoB.asm"
00018928                            ; ---------------------------------------------------------------------------
00018928                            ; Animation script - Eggman (bosses)
00018928                            ; ---------------------------------------------------------------------------
00018928 0000                       		dc.w spin-Ani_TetoB
0001892A 0000                       		dc.w static-Ani_TetoB
0001892C 0000                       		dc.w static2-Ani_TetoB
0001892E 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00018935 0500 FF                    static:	dc.b 5,	0, $FF
00018938 0501 FF                    static2:	dc.b 5,	1, $FF
0001893C 00                         		even
0001893C 00                         		even
0001893C                            ; ---------------------------------------------------------------------------
0001893C                            ; Sprite mappings - Eggman (boss levels)
0001893C                            ; ---------------------------------------------------------------------------
0001893C                            Map_Eggman:
0001893C                            	include "_maps\Eggman.asm"
0001893C                            Map_dc7e:
0001893C 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001893E 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018940 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018942 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018944 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018946 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018948 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
0001894A 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001894C 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001894E 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018950 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018952 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018954 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018956 06                         Map_dc7e_1A: 	dc.b $6
00018957 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001895C EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018961 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018966 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001896B 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018970 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018975 02                         Map_dc7e_39: 	dc.b $2
00018976 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001897B EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018980 02                         Map_dc7e_44: 	dc.b $2
00018981 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018986 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001898B 03                         Map_dc7e_4F: 	dc.b $3
0001898C E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018991 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018996 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
0001899B 03                         Map_dc7e_5F: 	dc.b $3
0001899C E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000189A1 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000189A6 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000189AB 03                         Map_dc7e_6F: 	dc.b $3
000189AC E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000189B1 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000189B6 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000189BB 03                         Map_dc7e_7F: 	dc.b $3
000189BC E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000189C1 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000189C6 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000189CB 04                         Map_dc7e_8F: 	dc.b $4
000189CC E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000189D1 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000189D6 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000189DB EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000189E0 01                         Map_dc7e_A4: 	dc.b $1
000189E1 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000189E6 01                         Map_dc7e_AA: 	dc.b $1
000189E7 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000189EC 00                         Map_dc7e_B0: 	dc.b $0
000189ED 02                         Map_dc7e_B1: 	dc.b $2
000189EE 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000189F3 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000189F8 02                         Map_dc7e_BC: 	dc.b $2
000189F9 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000189FE 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018A04 00                         	even
00018A04 00                         	even
00018A04                            
00018A04                            ; ---------------------------------------------------------------------------
00018A04                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018A04                            ; ---------------------------------------------------------------------------
00018A04                            Map_BossItems:
00018A04                            	include "_maps\Boss items.asm"
00018A04                            ; ---------------------------------------------------------------------------
00018A04                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018A04                            ; ---------------------------------------------------------------------------
00018A04 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00018A08 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018A0C 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018A10 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018A14 01                         byte_17DE4:	dc.b 1
00018A15 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018A1A 02                         byte_17DEA:	dc.b 2
00018A1B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018A20 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018A25 00                         		dc.b 0
00018A26 01                         byte_17DF6:	dc.b 1
00018A27 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018A2C 01                         byte_17DFC:	dc.b 1
00018A2D 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018A32 01                         byte_17E02:	dc.b 1
00018A33 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018A38 04                         byte_17E08:	dc.b 4
00018A39 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018A3E F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018A43 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018A48 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018A4D 00                         		dc.b 0
00018A4E 02                         byte_17E1E:	dc.b 2
00018A4F 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018A54 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018A59 00                         		dc.b 0
00018A5A 02                         byte_17E2A:	dc.b 2
00018A5B 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018A60 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018A66 00                         		even
00018A66 00                         		even
00018A66                            
00018A66                            ; ===========================================================================
00018A66                            ; ---------------------------------------------------------------------------
00018A66                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00018A66                            ; ---------------------------------------------------------------------------
00018A66                            
00018A66                            
00018A66                            obj77:					; XREF: Obj_Index
00018A66 7000                       		moveq	#0,d0
00018A68 1028 0024                  		move.b	$24(a0),d0
00018A6C 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018A70 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00018A74                            ; ===========================================================================
00018A74 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00018A76 0000                       		dc.w obj77_ShipMain-obj77_Index
00018A78 0000                       		dc.w obj77_FaceMain-obj77_Index
00018A7A 0000                       		dc.w obj77_FlameMain-obj77_Index
00018A7C                            
00018A7C 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018A7E 0401                       		dc.b 4,	1
00018A80 0607                       		dc.b 6,	7
00018A82                            ; ===========================================================================
00018A82                            
00018A82                            obj77_Main:				; XREF: obj77_Index
00018A82 45F9 0001 8A7C             		lea	(obj77_ObjData).l,a2
00018A88 2248                       		movea.l	a0,a1
00018A8A 7202                       		moveq	#2,d1
00018A8C 6000                       		bra.s	obj77_LoadBoss
00018A8E                            ; ===========================================================================
00018A8E                            
00018A8E                            obj77_Loop:
00018A8E 4EB9 0000 E4E8             		jsr	SingleObjLoad2
00018A94 6600                       		bne.s	loc2_17772
00018A96                            
00018A96                            obj77_LoadBoss:				; XREF: obj77_Main
00018A96 135A 0024                  		move.b	(a2)+,$24(a1)
00018A9A 12BC 0077                  		move.b	#$77,0(a1)
00018A9E 3368 0008 0008             		move.w	8(a0),8(a1)
00018AA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018AAA 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018AB2 337C 0400 0002             		move.w	#$400,2(a1)
00018AB8 137C 0004 0001             		move.b	#4,1(a1)
00018ABE 137C 0020 0019             		move.b	#$20,$19(a1)
00018AC4 137C 0003 0018             		move.b	#3,$18(a1)
00018ACA 135A 001C                  		move.b	(a2)+,$1C(a1)
00018ACE 2348 0034                  		move.l	a0,$34(a1)
00018AD2 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
00018AD6                            
00018AD6                            loc2_17772:
00018AD6 3168 0008 0030             		move.w	8(a0),$30(a0)
00018ADC 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018AE2 117C 000F 0020             		move.b	#$F,$20(a0)
00018AE8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018AEE                            
00018AEE                            obj77_ShipMain:				; XREF: obj77_Index
00018AEE 7000                       		moveq	#0,d0
00018AF0 1028 0025                  		move.b	$25(a0),d0
00018AF4 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
00018AF8 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018AFC 43F9 0001 8928             		lea	(Ani_TetoB).l,a1
00018B02 4EB9 0000 B09A             		jsr	AnimateSprite
00018B08 1028 0022                  		move.b	$22(a0),d0
00018B0C 0200 0003                  		andi.b	#3,d0
00018B10 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018B16 8128 0001                  		or.b	d0,1(a0)
00018B1A 4EF9 0000 E04C             		jmp	DisplaySprite
00018B20                            ; ===========================================================================
00018B20 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018B22 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00018B24 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00018B26 0000                       		dc.w loc2_17954-obj77_ShipIndex
00018B28 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018B2A 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018B2C 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018B2E 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018B30                            ; ===========================================================================
00018B30                            
00018B30                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018B30                            	;	move.w	#$100,$12(a0)	; move ship down
00018B30 6100 F964                  		bsr.w	BossMove
00018B34 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018B3A 6600                       		bne.s	loc2_177E6
00018B3C 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018B42 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018B46                            
00018B46                            loc2_177E6:
00018B46                            ;		move.b	$3F(a0),d0
00018B46                            ;		jsr	(CalcSine).l
00018B46 EC40                       		asr.w	#6,d0
00018B48 D068 0038                  		add.w	$38(a0),d0
00018B4C 3140 000C                  		move.w	d0,$C(a0)
00018B50 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B56 5428 003F                  		addq.b	#2,$3F(a0)
00018B5A 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018B60 6400                       		bcc.s	locret_1784A2
00018B62 4A28 0022                  		tst.b	$22(a0)
00018B66 6B00                       		bmi.s	loc2_1784C
00018B68 4A28 0020                  		tst.b	$20(a0)
00018B6C 6600                       		bne.s	locret_1784A2
00018B6E 4A28 003E                  		tst.b	$3E(a0)
00018B72 6600                       		bne.s	obj77_ShipFlash
00018B74 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018B7A 303C 00AC                  		move.w	#$AC,d0
00018B7E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B84                            
00018B84                            obj77_ShipFlash:
00018B84 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018B88 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018B8A 4A51                       		tst.w	(a1)
00018B8C 6600                       		bne.s	loc2_1783C
00018B8E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018B92                            
00018B92                            loc2_1783C:
00018B92 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018B94 5328 003E                  		subq.b	#1,$3E(a0)
00018B98 6600                       		bne.s	locret_1784A2
00018B9A 117C 000F 0020             		move.b	#$F,$20(a0)
00018BA0                            
00018BA0                            locret_1784A2:
00018BA0 4E75                       		rts	
00018BA2                            ; ===========================================================================
00018BA2                            
00018BA2                            loc2_1784C:				; XREF: loc2_177E6
00018BA2 7064                       		moveq	#100,d0
00018BA4 6100 0000                  		bsr.w	AddPoints
00018BA8 117C 000A 0025             		move.b	#$A,$25(a0)
00018BAE 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018BB4 4E75                       		rts	
00018BB6                            ; ===========================================================================
00018BB6                            
00018BB6                            obj77_MakeBall:				; XREF: obj77_ShipIndex
00018BB6 317C FF00 0010             		move.w	#-$100,$10(a0)
00018BBC 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018BC2 6100 F8D2                  		bsr.w	BossMove
00018BC6 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018BCC 6600                       		bne.s	loc2_17916
00018BCE 317C 0000 0010             		move.w	#0,$10(a0)
00018BD4 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018BDA 317C 0000 0012             		move.w	#0,$12(a0)
00018BE0 5428 0025                  		addq.b	#2,$25(a0)
00018BE4                            
00018BE4                            loc2_17910:
00018BE4 317C 0077 003C             		move.w	#$77,$3C(a0)
00018BEA                            
00018BEA                            loc2_17916:
00018BEA 6000 FF5A                  		bra.w	loc2_177E6
00018BEE                            ; ===========================================================================
00018BEE                            
00018BEE                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018BEE 6100 F8A6                  		bsr.w	BossMove
00018BF2 5368 003C                  		subq.w	#1,$3C(a0)
00018BF6 6A00                       		bpl.s	loc2_17950 ; if time remains go here
00018BF8 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018BFE 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00018C04 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018C0A 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018C10 6600                       		bne.s	loc2_17950 ; if not branch
00018C12                            
00018C12                            fatass_attack:
00018C12 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00018C18 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018C1E 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00018C24 6600                       		bne.s	loc2_17950    ; if not you know the drill
00018C26 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018C2A 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018C30                            
00018C30                            loc2_17950:
00018C30 6000 FF14                  		bra.w	loc2_177E6
00018C34                            ; ===========================================================================
00018C34                            
00018C34                            loc2_17954:				; XREF: obj77_ShipIndex
00018C34 6100 F860                  		bsr.w	BossMove
00018C38 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018C3E                            		; i suck at programming
00018C3E 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00018C44 6600                       		bne.s	loc2_17976    ; if not blah blah
00018C46 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018C4C 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018C50 303C 00B9                  		move.w	#$B9,d0
00018C54 4EB9 0000 1594             		jsr	(PlaySound).l	; play the earthquake sound
00018C5A                            
00018C5A                            Peartobombs:	
00018C5A 4EB9 0000 E4E8                		jsr	SingleObjLoad2
00018C60 6600                       		bne.s	secondone
00018C62 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00018C66 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018C6C 337C 0670 000C             		move.w	#$670,$C(a1)
00018C72                            secondone:		
00018C72 4EB9 0000 E4E8                		jsr	SingleObjLoad2
00018C78 6600                       		bne.s	loc2_17976		
00018C7A 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018C7E 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018C84 337C 0670 000C             		move.w	#$670,$C(a1)
00018C8A                            lastone:
00018C8A 4EB9 0000 E4E8                		jsr	SingleObjLoad2
00018C90 6600                       		bne.s	loc2_17976		
00018C92 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018C96 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018C9C 337C 0670 000C             		move.w	#$670,$C(a1)
00018CA2                            		
00018CA2                            loc2_17976:
00018CA2 6000 FEA2                  		bra.w	loc2_177E6
00018CA6                            		
00018CA6                            ; ===========================================================================
00018CA6                            Fatassruns:
00018CA6 6100 F7EE                   		bsr.w	BossMove
00018CAA 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018CB0 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018CB6 6600                       		bne.s	processstuff ; is not go here
00018CB8 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018CBE 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018CC4 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018CC8 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018CCE 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018CD4                            		
00018CD4                            		
00018CD4                            processstuff:
00018CD4 6000 FE70                  		bra.w	loc2_177E6
00018CD8                            ; ===========================================================================
00018CD8                            
00018CD8                            loc2_1797A:				; XREF: obj77_ShipIndex
00018CD8 5368 003C                  		subq.w	#1,$3C(a0)
00018CDC 6B00                       		bmi.s	loc2_17984
00018CDE 6000 F774                  		bra.w	BossDefeated
00018CE2                            ; ===========================================================================
00018CE2                            
00018CE2                            loc2_17984:
00018CE2 08E8 0000 0022             		bset	#0,$22(a0)
00018CE8 08A8 0007 0022             		bclr	#7,$22(a0)
00018CEE 4268 0010                  		clr.w	$10(a0)
00018CF2 5428 0025                  		addq.b	#2,$25(a0)
00018CF6 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018CFC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018D00 6600                       		bne.s	locret_179AA2
00018D02 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018D08                            
00018D08                            locret_179AA2:
00018D08 4E75                       		rts	
00018D0A                            ; ===========================================================================
00018D0A                            
00018D0A                            loc2_179AC:				; XREF: obj77_ShipIndex
00018D0A 5268 003C                  		addq.w	#1,$3C(a0)
00018D0E 6700                       		beq.s	loc2_179BC
00018D10 6A00                       		bpl.s	loc2_179C2
00018D12 0668 0018 0012             		addi.w	#$18,$12(a0)
00018D18 6000                       		bra.s	loc2_179EE
00018D1A                            ; ===========================================================================
00018D1A                            
00018D1A                            loc2_179BC:
00018D1A 4268 0012                  		clr.w	$12(a0)
00018D1E 6000                       		bra.s	loc2_179EE
00018D20                            ; ===========================================================================
00018D20                            
00018D20                            loc2_179C2:
00018D20 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018D26 6500                       		bcs.s	loc2_179DA
00018D28 6700                       		beq.s	loc2_179E0
00018D2A 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018D30 6500                       		bcs.s	loc2_179EE
00018D32 5428 0025                  		addq.b	#2,$25(a0)
00018D36 6000                       		bra.s	loc2_179EE
00018D38                            ; ===========================================================================
00018D38                            
00018D38                            loc2_179DA:
00018D38 5168 0012                  		subq.w	#8,$12(a0)
00018D3C 6000                       		bra.s	loc2_179EE
00018D3E                            ; ===========================================================================
00018D3E                            
00018D3E                            loc2_179E0:
00018D3E 4268 0012                  		clr.w	$12(a0)
00018D42 303C 0097                  		move.w	#$97,d0
00018D46 4EB9 0000 1594             		jsr	(PlaySound).l	; play lz3 music
00018D4C                            
00018D4C                            loc2_179EE:
00018D4C 6100 F748                  		bsr.w	BossMove
00018D50 6000 FDF4                  		bra.w	loc2_177E6
00018D54                            ; ===========================================================================
00018D54                            
00018D54                            loc2_179F6:				; XREF: obj77_ShipIndex
00018D54 317C 0400 0010             		move.w	#$400,$10(a0)
00018D5A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018D60 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018D66 6700                       		beq.s	loc2_17A10
00018D68 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018D6C 6000                       		bra.s	loc2_17A16
00018D6E                            ; ===========================================================================
00018D6E                            
00018D6E                            loc2_17A10:
00018D6E 4A28 0001                  		tst.b	1(a0)
00018D72 6A00                       		bpl.s	obj77_ShipDel
00018D74                            
00018D74                            loc2_17A16:
00018D74 6100 F720                  		bsr.w	BossMove
00018D78 6000 FDCC                  		bra.w	loc2_177E6
00018D7C                            ; ===========================================================================
00018D7C                            
00018D7C                            obj77_ShipDel:
00018D7C 4EF9 0000 E088             		jmp	DeleteObject
00018D82                            ; ===========================================================================
00018D82                            
00018D82                            obj77_FaceMain:				; XREF: obj77_Index
00018D82 4E75                       		rts
00018D84                            ; ===========================================================================
00018D84                            
00018D84                            obj77_FlameMain:			; XREF: obj77_Index
00018D84 4E75                       		rts
00018D86                            ; ===========================================================================
00018D86                            
00018D86                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018D86 43F9 0001 8928             		lea	(Ani_TetoB).l,a1
00018D8C 4EB9 0000 B09A             		jsr	AnimateSprite
00018D92 4EF9 0000 E04C             		jmp	DisplaySprite
00018D98                            ; ---------------------------------------------------------------------------
00018D98                            ; Sprite mappings - Fatass teto boss
00018D98                            ; ---------------------------------------------------------------------------
00018D98                            Map_TetoBoss:
00018D98                            	include "_maps\tetoboss.asm"
00018D98                            Map_f09a:
00018D98 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018D9A 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018D9C 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018D9E 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018DA0 03                         Map_f09a_8: 	dc.b $3
00018DA1 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018DA6 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018DAB DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018DB0 06                         Map_f09a_18: 	dc.b $6
00018DB1 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018DB6 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018DBB E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018DC0 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018DC5 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018DCA 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018DCF 03                         Map_f09a_37: 	dc.b $3
00018DD0 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018DD5 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018DDA DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018DDF 06                         Map_f09a_47: 	dc.b $6
00018DE0 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018DE5 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018DEA E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018DEF DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018DF4 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018DF9 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018DFE                            	even
00018DFE                            	even
00018DFE                            ; ===========================================================================
00018DFE                            ; ---------------------------------------------------------------------------
00018DFE                            ; Object 73 - Eggman (MZ)
00018DFE                            ; ---------------------------------------------------------------------------
00018DFE                            
00018DFE                            Obj73:					; XREF: Obj_Index
00018DFE 7000                       		moveq	#0,d0
00018E00 1028 0024                  		move.b	$24(a0),d0
00018E04 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018E08 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018E0C                            ; ===========================================================================
00018E0C 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018E0E 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018E10 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018E12 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018E14 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018E16                            
00018E16 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018E19 0401 04                    		dc.b 4,	1, 4
00018E1C 0607 04                    		dc.b 6,	7, 4
00018E1F 0800 03                    		dc.b 8,	0, 3
00018E22                            ; ===========================================================================
00018E22                            
00018E22                            Obj73_Main:				; XREF: Obj73_Index
00018E22 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E28 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018E2E 117C 000F 0020             		move.b	#$F,$20(a0)
00018E34 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018E3A 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018E3E 2248                       		movea.l	a0,a1
00018E40 7203                       		moveq	#3,d1
00018E42 6000                       		bra.s	Obj73_LoadBoss
00018E44                            ; ===========================================================================
00018E44                            
00018E44                            Obj73_Loop:
00018E44 4EB9 0000 E4E8             		jsr	SingleObjLoad2
00018E4A 6600                       		bne.s	Obj73_ShipMain
00018E4C 12BC 0073                  		move.b	#$73,0(a1)
00018E50 3368 0008 0008             		move.w	8(a0),8(a1)
00018E56 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018E5C                            
00018E5C                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018E5C 08A8 0000 0022             		bclr	#0,$22(a0)
00018E62 4229 0025                  		clr.b	$25(a1)
00018E66 135A 0024                  		move.b	(a2)+,$24(a1)
00018E6A 135A 001C                  		move.b	(a2)+,$1C(a1)
00018E6E 135A 0018                  		move.b	(a2)+,$18(a1)
00018E72 237C 0001 893C 0004        		move.l	#Map_Eggman,4(a1)
00018E7A 337C 0400 0002             		move.w	#$400,2(a1)
00018E80 137C 0004 0001             		move.b	#4,1(a1)
00018E86 137C 0020 0019             		move.b	#$20,$19(a1)
00018E8C 2348 0034                  		move.l	a0,$34(a1)
00018E90 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018E94                            
00018E94                            Obj73_ShipMain:
00018E94 7000                       		moveq	#0,d0
00018E96 1028 0025                  		move.b	$25(a0),d0
00018E9A 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018E9E 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018EA2 43F9 0001 88D8             		lea	(Ani_Eggman).l,a1
00018EA8 4EB9 0000 B09A             		jsr	AnimateSprite
00018EAE 7003                       		moveq	#3,d0
00018EB0 C028 0022                  		and.b	$22(a0),d0
00018EB4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018EBA 8128 0001                  		or.b	d0,1(a0)
00018EBE 4EF9 0000 E04C             		jmp	DisplaySprite
00018EC4                            ; ===========================================================================
00018EC4 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018EC6 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018EC8 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018ECA 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018ECC 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018ECE                            ; ===========================================================================
00018ECE                            
00018ECE                            loc_18302:				; XREF: Obj73_ShipIndex
00018ECE 1028 003F                  		move.b	$3F(a0),d0
00018ED2 5428 003F                  		addq.b	#2,$3F(a0)
00018ED6 4EB9 0000 2D34             		jsr	(CalcSine).l
00018EDC E440                       		asr.w	#2,d0
00018EDE 3140 0012                  		move.w	d0,$12(a0)
00018EE2 317C FF00 0010             		move.w	#-$100,$10(a0)
00018EE8 6100 F5AC                  		bsr.w	BossMove
00018EEC 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018EF2 6600                       		bne.s	loc_18334
00018EF4 5428 0025                  		addq.b	#2,$25(a0)
00018EF8 4228 0028                  		clr.b	$28(a0)
00018EFC 42A8 0010                  		clr.l	$10(a0)
00018F00                            
00018F00                            loc_18334:
00018F00 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00018F06 1140 0034                  		move.b	d0,$34(a0)
00018F0A                            
00018F0A                            loc_1833E:
00018F0A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018F10 3168 0030 0008             		move.w	$30(a0),8(a0)
00018F16 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018F1C 6400                       		bcc.s	locret_18390
00018F1E 4A28 0022                  		tst.b	$22(a0)
00018F22 6B00                       		bmi.s	loc_18392
00018F24 4A28 0020                  		tst.b	$20(a0)
00018F28 6600                       		bne.s	locret_18390
00018F2A 4A28 003E                  		tst.b	$3E(a0)
00018F2E 6600                       		bne.s	loc_18374
00018F30 117C 0028 003E             		move.b	#$28,$3E(a0)
00018F36 303C 00AC                  		move.w	#$AC,d0
00018F3A 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018F40                            
00018F40                            loc_18374:
00018F40 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018F44 7000                       		moveq	#0,d0
00018F46 4A51                       		tst.w	(a1)
00018F48 6600                       		bne.s	loc_18382
00018F4A 303C 0EEE                  		move.w	#$EEE,d0
00018F4E                            
00018F4E                            loc_18382:
00018F4E 3280                       		move.w	d0,(a1)
00018F50 5328 003E                  		subq.b	#1,$3E(a0)
00018F54 6600                       		bne.s	locret_18390
00018F56 117C 000F 0020             		move.b	#$F,$20(a0)
00018F5C                            
00018F5C                            locret_18390:
00018F5C 4E75                       		rts	
00018F5E                            ; ===========================================================================
00018F5E                            
00018F5E                            loc_18392:				; XREF: loc_1833E
00018F5E 7064                       		moveq	#100,d0
00018F60 6100 0000                  		bsr.w	AddPoints
00018F64 117C 0004 0025             		move.b	#4,$25(a0)
00018F6A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018F70 4268 0010                  		clr.w	$10(a0)
00018F74 4E75                       		rts	
00018F76                            ; ===========================================================================
00018F76                            
00018F76                            loc_183AA:				; XREF: Obj73_ShipIndex
00018F76 7000                       		moveq	#0,d0
00018F78 1028 0028                  		move.b	$28(a0),d0
00018F7C 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018F80 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018F84 0228 0006 0028             		andi.b	#6,$28(a0)
00018F8A 6000 FF7E                  		bra.w	loc_1833E
00018F8E                            ; ===========================================================================
00018F8E 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018F90 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018F92 0000                       		dc.w loc_183CA-off_183C2
00018F94 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018F96                            ; ===========================================================================
00018F96                            
00018F96                            loc_183CA:				; XREF: off_183C2
00018F96 4A68 0010                  		tst.w	$10(a0)
00018F9A 6600                       		bne.s	loc_183FE
00018F9C 7040                       		moveq	#$40,d0
00018F9E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018FA4 6700                       		beq.s	loc_183E6
00018FA6 6500                       		bcs.s	loc_183DE
00018FA8 4440                       		neg.w	d0
00018FAA                            
00018FAA                            loc_183DE:
00018FAA 3140 0012                  		move.w	d0,$12(a0)
00018FAE 6000 F4E6                  		bra.w	BossMove
00018FB2                            ; ===========================================================================
00018FB2                            
00018FB2                            loc_183E6:
00018FB2 317C 0200 0010             		move.w	#$200,$10(a0)
00018FB8 317C 0100 0012             		move.w	#$100,$12(a0)
00018FBE 0828 0000 0022             		btst	#0,$22(a0)
00018FC4 6600                       		bne.s	loc_183FE
00018FC6 4468 0010                  		neg.w	$10(a0)
00018FCA                            
00018FCA                            loc_183FE:
00018FCA 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018FD0 6400                       		bcc.s	Obj73_MakeLava
00018FD2 6100 F4C2                  		bsr.w	BossMove
00018FD6 5968 0012                  		subq.w	#4,$12(a0)
00018FDA                            
00018FDA                            Obj73_MakeLava:
00018FDA 5328 0034                  		subq.b	#1,$34(a0)
00018FDE 6400                       		bcc.s	loc_1845C
00018FE0 4EB9 0000 E4D2             		jsr	SingleObjLoad
00018FE6 6600                       		bne.s	loc_1844A
00018FE8 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018FEC 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018FF2 4EB9 0000 2D0E             		jsr	(RandomNumber).l
00018FF8 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018FFE 80FC 0050                  		divu.w	#$50,d0
00019002 4840                       		swap	d0
00019004 0640 1878                  		addi.w	#$1878,d0
00019008 3340 0008                  		move.w	d0,8(a1)
0001900C EE09                       		lsr.b	#7,d1
0001900E 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019014                            
00019014                            loc_1844A:
00019014 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001901A 0200 001F                  		andi.b	#$1F,d0
0001901E 0600 0040                  		addi.b	#$40,d0
00019022 1140 0034                  		move.b	d0,$34(a0)
00019026                            
00019026                            loc_1845C:
00019026 0828 0000 0022             		btst	#0,$22(a0)
0001902C 6700                       		beq.s	loc_18474
0001902E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019034 6D00                       		blt.s	locret_1849C
00019036 317C 1910 0030             		move.w	#$1910,$30(a0)
0001903C 6000                       		bra.s	loc_18482
0001903E                            ; ===========================================================================
0001903E                            
0001903E                            loc_18474:
0001903E 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019044 6E00                       		bgt.s	locret_1849C
00019046 317C 1830 0030             		move.w	#$1830,$30(a0)
0001904C                            
0001904C                            loc_18482:
0001904C 4268 0010                  		clr.w	$10(a0)
00019050 317C FE80 0012             		move.w	#-$180,$12(a0)
00019056 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001905C 6400                       		bcc.s	loc_18498
0001905E 4468 0012                  		neg.w	$12(a0)
00019062                            
00019062                            loc_18498:
00019062 5428 0028                  		addq.b	#2,$28(a0)
00019066                            
00019066                            locret_1849C:
00019066 4E75                       		rts	
00019068                            ; ===========================================================================
00019068                            
00019068                            Obj73_MakeLava2:			; XREF: off_183C2
00019068 6100 F42C                  		bsr.w	BossMove
0001906C 3028 0038                  		move.w	$38(a0),d0
00019070 0440 022C                  		subi.w	#$22C,d0
00019074 6E00                       		bgt.s	locret_184F4
00019076 303C 022C                  		move.w	#$22C,d0
0001907A 4A68 0012                  		tst.w	$12(a0)
0001907E 6700                       		beq.s	loc_184EA
00019080 4268 0012                  		clr.w	$12(a0)
00019084 317C 0050 003C             		move.w	#$50,$3C(a0)
0001908A 0868 0000 0022             		bchg	#0,$22(a0)
00019090 4EB9 0000 E4D2             		jsr	SingleObjLoad
00019096 6600                       		bne.s	loc_184EA
00019098 3368 0030 0008             		move.w	$30(a0),8(a1)
0001909E 3368 0038 000C             		move.w	$38(a0),$C(a1)
000190A4 0669 0018 000C             		addi.w	#$18,$C(a1)
000190AA 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000190AE 137C 0001 0028             		move.b	#1,$28(a1)
000190B4                            
000190B4                            loc_184EA:
000190B4 5368 003C                  		subq.w	#1,$3C(a0)
000190B8 6600                       		bne.s	locret_184F4
000190BA 5428 0028                  		addq.b	#2,$28(a0)
000190BE                            
000190BE                            locret_184F4:
000190BE 4E75                       		rts	
000190C0                            ; ===========================================================================
000190C0                            
000190C0                            loc_184F6:				; XREF: Obj73_ShipIndex
000190C0 5368 003C                  		subq.w	#1,$3C(a0)
000190C4 6B00                       		bmi.s	loc_18500
000190C6 6000 F38C                  		bra.w	BossDefeated
000190CA                            ; ===========================================================================
000190CA                            
000190CA                            loc_18500:
000190CA 08E8 0000 0022             		bset	#0,$22(a0)
000190D0 08A8 0007 0022             		bclr	#7,$22(a0)
000190D6 4268 0010                  		clr.w	$10(a0)
000190DA 5428 0025                  		addq.b	#2,$25(a0)
000190DE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000190E4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000190E8 6600                       		bne.s	locret_1852A
000190EA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000190F0 4268 0012                  		clr.w	$12(a0)
000190F4                            
000190F4                            locret_1852A:
000190F4 4E75                       		rts	
000190F6                            ; ===========================================================================
000190F6                            
000190F6                            loc_1852C:				; XREF: Obj73_ShipIndex
000190F6 5268 003C                  		addq.w	#1,$3C(a0)
000190FA 6700                       		beq.s	loc_18544
000190FC 6A00                       		bpl.s	loc_1854E
000190FE 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019104 6400                       		bcc.s	loc_18544
00019106 0668 0018 0012             		addi.w	#$18,$12(a0)
0001910C 6000                       		bra.s	loc_1857A
0001910E                            ; ===========================================================================
0001910E                            
0001910E                            loc_18544:
0001910E 4268 0012                  		clr.w	$12(a0)
00019112 4268 003C                  		clr.w	$3C(a0)
00019116 6000                       		bra.s	loc_1857A
00019118                            ; ===========================================================================
00019118                            
00019118                            loc_1854E:
00019118 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001911E 6500                       		bcs.s	loc_18566
00019120 6700                       		beq.s	loc_1856C
00019122 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019128 6500                       		bcs.s	loc_1857A
0001912A 5428 0025                  		addq.b	#2,$25(a0)
0001912E 6000                       		bra.s	loc_1857A
00019130                            ; ===========================================================================
00019130                            
00019130                            loc_18566:
00019130 5168 0012                  		subq.w	#8,$12(a0)
00019134 6000                       		bra.s	loc_1857A
00019136                            ; ===========================================================================
00019136                            
00019136                            loc_1856C:
00019136 4268 0012                  		clr.w	$12(a0)
0001913A 303C 0083                  		move.w	#$83,d0
0001913E 4EB9 0000 1594             		jsr	(PlaySound).l	; play MZ music
00019144                            
00019144                            loc_1857A:
00019144 6100 F350                  		bsr.w	BossMove
00019148 6000 FDC0                  		bra.w	loc_1833E
0001914C                            ; ===========================================================================
0001914C                            
0001914C                            loc_18582:				; XREF: Obj73_ShipIndex
0001914C 317C 0500 0010             		move.w	#$500,$10(a0)
00019152 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019158 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001915E 6400                       		bcc.s	loc_1859C
00019160 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019164 6000                       		bra.s	loc_185A2
00019166                            ; ===========================================================================
00019166                            
00019166                            loc_1859C:
00019166 4A28 0001                  		tst.b	1(a0)
0001916A 6A00                       		bpl.s	Obj73_ShipDel
0001916C                            
0001916C                            loc_185A2:
0001916C 6100 F328                  		bsr.w	BossMove
00019170 6000 FD98                  		bra.w	loc_1833E
00019174                            ; ===========================================================================
00019174                            
00019174                            Obj73_ShipDel:
00019174 4EF9 0000 E088             		jmp	DeleteObject
0001917A                            ; ===========================================================================
0001917A                            
0001917A                            Obj73_FaceMain:				; XREF: Obj73_Index
0001917A 7000                       		moveq	#0,d0
0001917C 7201                       		moveq	#1,d1
0001917E 2268 0034                  		movea.l	$34(a0),a1
00019182 1029 0025                  		move.b	$25(a1),d0
00019186 5540                       		subq.w	#2,d0
00019188 6600                       		bne.s	loc_185D2
0001918A 0829 0001 0028             		btst	#1,$28(a1)
00019190 6700                       		beq.s	loc_185DA
00019192 4A69 0012                  		tst.w	$12(a1)
00019196 6600                       		bne.s	loc_185DA
00019198 7204                       		moveq	#4,d1
0001919A 6000                       		bra.s	loc_185EE
0001919C                            ; ===========================================================================
0001919C                            
0001919C                            loc_185D2:
0001919C 5500                       		subq.b	#2,d0
0001919E 6B00                       		bmi.s	loc_185DA
000191A0 720A                       		moveq	#$A,d1
000191A2 6000                       		bra.s	loc_185EE
000191A4                            ; ===========================================================================
000191A4                            
000191A4                            loc_185DA:
000191A4 4A29 0020                  		tst.b	$20(a1)
000191A8 6600                       		bne.s	loc_185E4
000191AA 7205                       		moveq	#5,d1
000191AC 6000                       		bra.s	loc_185EE
000191AE                            ; ===========================================================================
000191AE                            
000191AE                            loc_185E4:
000191AE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000191B4 6500                       		bcs.s	loc_185EE
000191B6 7204                       		moveq	#4,d1
000191B8                            
000191B8                            loc_185EE:
000191B8 1141 001C                  		move.b	d1,$1C(a0)
000191BC 5900                       		subq.b	#4,d0
000191BE 6600                       		bne.s	loc_18602
000191C0 117C 0006 001C             		move.b	#6,$1C(a0)
000191C6 4A28 0001                  		tst.b	1(a0)
000191CA 6A00                       		bpl.s	Obj73_FaceDel
000191CC                            
000191CC                            loc_18602:
000191CC 6000                       		bra.s	Obj73_Display
000191CE                            ; ===========================================================================
000191CE                            
000191CE                            Obj73_FaceDel:
000191CE 4EF9 0000 E088             		jmp	DeleteObject
000191D4                            ; ===========================================================================
000191D4                            
000191D4                            Obj73_FlameMain:			; XREF: Obj73_Index
000191D4 117C 0007 001C             		move.b	#7,$1C(a0)
000191DA 2268 0034                  		movea.l	$34(a0),a1
000191DE 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000191E4 6D00                       		blt.s	loc_1862A
000191E6 117C 000B 001C             		move.b	#$B,$1C(a0)
000191EC 4A28 0001                  		tst.b	1(a0)
000191F0 6A00                       		bpl.s	Obj73_FlameDel
000191F2 6000                       		bra.s	loc_18636
000191F4                            ; ===========================================================================
000191F4                            
000191F4                            loc_1862A:
000191F4 4A69 0010                  		tst.w	$10(a1)
000191F8 6700                       		beq.s	loc_18636
000191FA 117C 0008 001C             		move.b	#8,$1C(a0)
00019200                            
00019200                            loc_18636:
00019200 6000                       		bra.s	Obj73_Display
00019202                            ; ===========================================================================
00019202                            
00019202                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00019202 4EF9 0000 E088             		jmp	DeleteObject
00019208                            ; ===========================================================================
00019208                            
00019208                            Obj73_Display:
00019208 43F9 0001 88D8             		lea	(Ani_Eggman).l,a1
0001920E 4EB9 0000 B09A             		jsr	AnimateSprite
00019214                            
00019214                            loc_1864A:
00019214 2268 0034                  		movea.l	$34(a0),a1
00019218 3169 0008 0008             		move.w	8(a1),8(a0)
0001921E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019224 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001922A 7003                       		moveq	#3,d0
0001922C C028 0022                  		and.b	$22(a0),d0
00019230 0228 00FC 0001             		andi.b	#-4,1(a0)
00019236 8128 0001                  		or.b	d0,1(a0)
0001923A 4EF9 0000 E04C             		jmp	DisplaySprite
00019240                            ; ===========================================================================
00019240                            
00019240                            Obj73_TubeMain:				; XREF: Obj73_Index
00019240 2268 0034                  		movea.l	$34(a0),a1
00019244 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001924A 6600                       		bne.s	loc_18688
0001924C 4A28 0001                  		tst.b	1(a0)
00019250 6A00                       		bpl.s	Obj73_TubeDel
00019252                            
00019252                            loc_18688:
00019252 217C 0001 8A04 0004        		move.l	#Map_BossItems,4(a0)
0001925A 317C 246C 0002             		move.w	#$246C,2(a0)
00019260 117C 0004 001A             		move.b	#4,$1A(a0)
00019266 60AC                       		bra.s	loc_1864A
00019268                            ; ===========================================================================
00019268                            
00019268                            Obj73_TubeDel:
00019268 4EF9 0000 E088             		jmp	DeleteObject
0001926E                            ; ===========================================================================
0001926E                            ; ---------------------------------------------------------------------------
0001926E                            ; Object 74 - lava that	Eggman drops (MZ)
0001926E                            ; ---------------------------------------------------------------------------
0001926E                            
0001926E                            Obj74:					; XREF: Obj_Index
0001926E 7000                       		moveq	#0,d0
00019270 1028 0024                  		move.b	$24(a0),d0
00019274 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00019278 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001927C 4EF9 0000 E04C             		jmp	DisplaySprite
00019282                            ; ===========================================================================
00019282 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00019284 0000                       		dc.w Obj74_Action-Obj74_Index
00019286 0000                       		dc.w loc_18886-Obj74_Index
00019288 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001928A                            ; ===========================================================================
0001928A                            
0001928A                            Obj74_Main:				; XREF: Obj74_Index
0001928A 117C 0008 0016             		move.b	#8,$16(a0)
00019290 117C 0008 0017             		move.b	#8,$17(a0)
00019296 217C 0000 BC98 0004        		move.l	#Map_obj14,4(a0)
0001929E 317C 0345 0002             		move.w	#$345,2(a0)
000192A4 117C 0004 0001             		move.b	#4,1(a0)
000192AA 117C 0005 0018             		move.b	#5,$18(a0)
000192B0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000192B6 117C 0008 0019             		move.b	#8,$19(a0)
000192BC 5428 0024                  		addq.b	#2,$24(a0)
000192C0 4A28 0028                  		tst.b	$28(a0)
000192C4 6600                       		bne.s	loc_1870A
000192C6 117C 008B 0020             		move.b	#$8B,$20(a0)
000192CC 5428 0024                  		addq.b	#2,$24(a0)
000192D0 6000 0000                  		bra.w	loc_18886
000192D4                            ; ===========================================================================
000192D4                            
000192D4                            loc_1870A:
000192D4 117C 001E 0029             		move.b	#$1E,$29(a0)
000192DA 303C 00AE                  		move.w	#$AE,d0
000192DE 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play lava sound
000192E4                            
000192E4                            Obj74_Action:				; XREF: Obj74_Index
000192E4 7000                       		moveq	#0,d0
000192E6 1028 0025                  		move.b	$25(a0),d0
000192EA 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000192EE 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000192F2 4EB9 0000 E026             		jsr	SpeedToPos
000192F8 43F9 0000 EF06             		lea	(Ani_obj14).l,a1
000192FE 4EB9 0000 B09A             		jsr	AnimateSprite
00019304 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001930A 6200                       		bhi.s	Obj74_Delete
0001930C 4E75                       		rts	
0001930E                            ; ===========================================================================
0001930E                            
0001930E                            Obj74_Delete:
0001930E 4EF9 0000 E088             		jmp	DeleteObject
00019314                            ; ===========================================================================
00019314 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019316 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019318 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001931A 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            Obj74_Drop:				; XREF: Obj74_Index2
0001931C 08E8 0001 0022             		bset	#1,$22(a0)
00019322 5328 0029                  		subq.b	#1,$29(a0)
00019326 6A00                       		bpl.s	locret_18780
00019328 117C 008B 0020             		move.b	#$8B,$20(a0)
0001932E 4228 0028                  		clr.b	$28(a0)
00019332 0668 0018 0012             		addi.w	#$18,$12(a0)
00019338 08A8 0001 0022             		bclr	#1,$22(a0)
0001933E 6100 C618                  		bsr.w	ObjHitFloor
00019342 4A41                       		tst.w	d1
00019344 6A00                       		bpl.s	locret_18780
00019346 5428 0025                  		addq.b	#2,$25(a0)
0001934A                            
0001934A                            locret_18780:
0001934A 4E75                       		rts	
0001934C                            ; ===========================================================================
0001934C                            
0001934C                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001934C 5568 000C                  		subq.w	#2,$C(a0)
00019350 08E8 0007 0002             		bset	#7,2(a0)
00019356 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001935C 4268 0012                  		clr.w	$12(a0)
00019360 3168 0008 0030             		move.w	8(a0),$30(a0)
00019366 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001936C 117C 0003 0029             		move.b	#3,$29(a0)
00019372 4EB9 0000 E4E8             		jsr	SingleObjLoad2
00019378 6600                       		bne.s	loc_187CA
0001937A 47D1                       		lea	(a1),a3
0001937C 45D0                       		lea	(a0),a2
0001937E 7003                       		moveq	#3,d0
00019380                            
00019380                            Obj74_Loop:
00019380 26DA                       		move.l	(a2)+,(a3)+
00019382 26DA                       		move.l	(a2)+,(a3)+
00019384 26DA                       		move.l	(a2)+,(a3)+
00019386 26DA                       		move.l	(a2)+,(a3)+
00019388 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001938C                            
0001938C 4469 0010                  		neg.w	$10(a1)
00019390 5429 0025                  		addq.b	#2,$25(a1)
00019394                            
00019394                            loc_187CA:
00019394 5428 0025                  		addq.b	#2,$25(a0)
00019398 4E75                       		rts	
0001939A                            
0001939A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001939A                            
0001939A                            
0001939A                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001939A 4EB9 0000 E4E8             		jsr	SingleObjLoad2
000193A0 6600                       		bne.s	locret_187EE
000193A2 3368 0008 0008             		move.w	8(a0),8(a1)
000193A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000193AE 12BC 0074                  		move.b	#$74,(a1)
000193B2 337C 0067 0028             		move.w	#$67,$28(a1)
000193B8                            
000193B8                            locret_187EE:
000193B8 4E75                       		rts	
000193BA                            ; End of function Obj74_Duplicate2
000193BA                            
000193BA                            ; ===========================================================================
000193BA                            
000193BA                            Obj74_Duplicate:			; XREF: Obj74_Index2
000193BA 6100 C59C                  		bsr.w	ObjHitFloor
000193BE 4A41                       		tst.w	d1
000193C0 6A00                       		bpl.s	loc_18826
000193C2 3028 0008                  		move.w	8(a0),d0
000193C6 0C40 1940                  		cmpi.w	#$1940,d0
000193CA 6E00                       		bgt.s	loc_1882C
000193CC 3228 0030                  		move.w	$30(a0),d1
000193D0 B240                       		cmp.w	d0,d1
000193D2 6700                       		beq.s	loc_1881E
000193D4 0240 0010                  		andi.w	#$10,d0
000193D8 0241 0010                  		andi.w	#$10,d1
000193DC B240                       		cmp.w	d0,d1
000193DE 6700                       		beq.s	loc_1881E
000193E0 61B8                       		bsr.s	Obj74_Duplicate2
000193E2 3168 0008 0032             		move.w	8(a0),$32(a0)
000193E8                            
000193E8                            loc_1881E:
000193E8 3168 0008 0030             		move.w	8(a0),$30(a0)
000193EE 4E75                       		rts	
000193F0                            ; ===========================================================================
000193F0                            
000193F0                            loc_18826:
000193F0 5428 0025                  		addq.b	#2,$25(a0)
000193F4 4E75                       		rts	
000193F6                            ; ===========================================================================
000193F6                            
000193F6                            loc_1882C:
000193F6 5428 0024                  		addq.b	#2,$24(a0)
000193FA 4E75                       		rts	
000193FC                            ; ===========================================================================
000193FC                            
000193FC                            Obj74_FallEdge:				; XREF: Obj74_Index2
000193FC 08A8 0001 0022             		bclr	#1,$22(a0)
00019402 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019408 3028 0008                  		move.w	8(a0),d0
0001940C 9068 0032                  		sub.w	$32(a0),d0
00019410 6A00                       		bpl.s	loc_1884A
00019412 4440                       		neg.w	d0
00019414                            
00019414                            loc_1884A:
00019414 0C40 0012                  		cmpi.w	#$12,d0
00019418 6600                       		bne.s	loc_18856
0001941A 08A8 0007 0002             		bclr	#7,2(a0)
00019420                            
00019420                            loc_18856:
00019420 6100 C536                  		bsr.w	ObjHitFloor
00019424 4A41                       		tst.w	d1
00019426 6A00                       		bpl.s	locret_1887E
00019428 5328 0029                  		subq.b	#1,$29(a0)
0001942C 6700                       		beq.s	Obj74_Delete2
0001942E 4268 0012                  		clr.w	$12(a0)
00019432 3168 0032 0008             		move.w	$32(a0),8(a0)
00019438 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001943E 08E8 0007 0002             		bset	#7,2(a0)
00019444 5528 0025                  		subq.b	#2,$25(a0)
00019448                            
00019448                            locret_1887E:
00019448 4E75                       		rts	
0001944A                            ; ===========================================================================
0001944A                            
0001944A                            Obj74_Delete2:
0001944A 4EF9 0000 E088             		jmp	DeleteObject
00019450                            ; ===========================================================================
00019450                            
00019450                            loc_18886:				; XREF: Obj74_Index
00019450 08E8 0007 0002             		bset	#7,2(a0)
00019456 5328 0029                  		subq.b	#1,$29(a0)
0001945A 6600                       		bne.s	Obj74_Animate
0001945C 117C 0001 001C             		move.b	#1,$1C(a0)
00019462 5968 000C                  		subq.w	#4,$C(a0)
00019466 4228 0020                  		clr.b	$20(a0)
0001946A                            
0001946A                            Obj74_Animate:
0001946A 43F9 0000 EF06             		lea	(Ani_obj14).l,a1
00019470 4EF9 0000 B09A             		jmp	AnimateSprite
00019476                            ; ===========================================================================
00019476                            
00019476                            Obj74_Delete3:				; XREF: Obj74_Index
00019476 4EF9 0000 E088             		jmp	DeleteObject
0001947C                            ; ===========================================================================
0001947C                            
0001947C                            Obj7A_Delete:
0001947C 4EF9 0000 E088             		jmp	DeleteObject
00019482                            ; ===========================================================================
00019482                            ; ---------------------------------------------------------------------------
00019482                            ; Object 7A - Eggman (SLZ)
00019482                            ; ---------------------------------------------------------------------------
00019482                            
00019482                            Obj7A:					; XREF: Obj_Index
00019482 7000                       		moveq	#0,d0
00019484 1028 0024                  		move.b	$24(a0),d0
00019488 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
0001948C 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019490                            ; ===========================================================================
00019490 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019492 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019494 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019496 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019498 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001949A                            
0001949A 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001949D 0401 04                    		dc.b 4,	1, 4
000194A0 0607 04                    		dc.b 6,	7, 4
000194A3 0800 03                    		dc.b 8,	0, 3
000194A6                            ; ===========================================================================
000194A6                            
000194A6                            Obj7A_Main:				; XREF: Obj7A_Index
000194A6 317C 2188 0008             		move.w	#$2188,8(a0)
000194AC 317C 0228 000C             		move.w	#$228,$C(a0)
000194B2 3168 0008 0030             		move.w	8(a0),$30(a0)
000194B8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000194BE 117C 000F 0020             		move.b	#$F,$20(a0)
000194C4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000194CA 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000194CE 2248                       		movea.l	a0,a1
000194D0 7203                       		moveq	#3,d1
000194D2 6000                       		bra.s	Obj7A_LoadBoss
000194D4                            ; ===========================================================================
000194D4                            
000194D4                            Obj7A_Loop:
000194D4 4EB9 0000 E4E8             		jsr	SingleObjLoad2
000194DA 6600                       		bne.s	loc_1895C
000194DC 12BC 007A                  		move.b	#$7A,0(a1)
000194E0 3368 0008 0008             		move.w	8(a0),8(a1)
000194E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000194EC                            
000194EC                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000194EC 08A8 0000 0022             		bclr	#0,$22(a0)
000194F2 4229 0025                  		clr.b	$25(a1)
000194F6 135A 0024                  		move.b	(a2)+,$24(a1)
000194FA 135A 001C                  		move.b	(a2)+,$1C(a1)
000194FE 135A 0018                  		move.b	(a2)+,$18(a1)
00019502 237C 0001 893C 0004        		move.l	#Map_Eggman,4(a1)
0001950A 337C 0400 0002             		move.w	#$400,2(a1)
00019510 137C 0004 0001             		move.b	#4,1(a1)
00019516 137C 0020 0019             		move.b	#$20,$19(a1)
0001951C 2348 0034                  		move.l	a0,$34(a1)
00019520 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019524                            
00019524                            loc_1895C:
00019524 43F8 D040                  		lea	($FFFFD040).w,a1
00019528 45E8 002A                  		lea	$2A(a0),a2
0001952C 705E                       		moveq	#$5E,d0
0001952E 723E                       		moveq	#$3E,d1
00019530                            
00019530                            loc_18968:
00019530 B011                       		cmp.b	(a1),d0
00019532 6600                       		bne.s	loc_18974
00019534 4A29 0028                  		tst.b	$28(a1)
00019538 6700                       		beq.s	loc_18974
0001953A 34C9                       		move.w	a1,(a2)+
0001953C                            
0001953C                            loc_18974:
0001953C D2FC 0040                  		adda.w	#$40,a1
00019540 51C9 FFEE                  		dbf	d1,loc_18968
00019544                            
00019544                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019544 7000                       		moveq	#0,d0
00019546 1028 0025                  		move.b	$25(a0),d0
0001954A 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001954E 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019552 43F9 0001 88D8             		lea	(Ani_Eggman).l,a1
00019558 4EB9 0000 B09A             		jsr	AnimateSprite
0001955E 7003                       		moveq	#3,d0
00019560 C028 0022                  		and.b	$22(a0),d0
00019564 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001956A 8128 0001                  		or.b	d0,1(a0)
0001956E 4EF9 0000 E04C             		jmp	DisplaySprite
00019574                            ; ===========================================================================
00019574 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019576 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019578 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
0001957A 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
0001957C 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
0001957E 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019580                            ; ===========================================================================
00019580                            
00019580                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019580 317C FF00 0010             		move.w	#-$100,$10(a0)
00019586 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
0001958C 6400                       		bcc.s	loc_189CA
0001958E 5428 0025                  		addq.b	#2,$25(a0)
00019592                            
00019592                            loc_189CA:
00019592 6100 EF02                  		bsr.w	BossMove
00019596 1028 003F                  		move.b	$3F(a0),d0
0001959A 5428 003F                  		addq.b	#2,$3F(a0)
0001959E 4EB9 0000 2D34             		jsr	(CalcSine).l
000195A4 EC40                       		asr.w	#6,d0
000195A6 D068 0038                  		add.w	$38(a0),d0
000195AA 3140 000C                  		move.w	d0,$C(a0)
000195AE 3168 0030 0008             		move.w	$30(a0),8(a0)
000195B4 6000                       		bra.s	loc_189FE
000195B6                            ; ===========================================================================
000195B6                            
000195B6                            loc_189EE:
000195B6 6100 EEDE                  		bsr.w	BossMove
000195BA 3168 0038 000C             		move.w	$38(a0),$C(a0)
000195C0 3168 0030 0008             		move.w	$30(a0),8(a0)
000195C6                            
000195C6                            loc_189FE:
000195C6 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000195CC 6400                       		bcc.s	locret_18A44
000195CE 4A28 0022                  		tst.b	$22(a0)
000195D2 6B00                       		bmi.s	loc_18A46
000195D4 4A28 0020                  		tst.b	$20(a0)
000195D8 6600                       		bne.s	locret_18A44
000195DA 4A28 003E                  		tst.b	$3E(a0)
000195DE 6600                       		bne.s	loc_18A28
000195E0 117C 0020 003E             		move.b	#$20,$3E(a0)
000195E6 303C 00AC                  		move.w	#$AC,d0
000195EA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
000195F0                            
000195F0                            loc_18A28:
000195F0 43F8 FB22                  		lea	($FFFFFB22).w,a1
000195F4 7000                       		moveq	#0,d0
000195F6 4A51                       		tst.w	(a1)
000195F8 6600                       		bne.s	loc_18A36
000195FA 303C 0EEE                  		move.w	#$EEE,d0
000195FE                            
000195FE                            loc_18A36:
000195FE 3280                       		move.w	d0,(a1)
00019600 5328 003E                  		subq.b	#1,$3E(a0)
00019604 6600                       		bne.s	locret_18A44
00019606 117C 000F 0020             		move.b	#$F,$20(a0)
0001960C                            
0001960C                            locret_18A44:
0001960C 4E75                       		rts	
0001960E                            ; ===========================================================================
0001960E                            
0001960E                            loc_18A46:
0001960E 7064                       		moveq	#100,d0
00019610 6100 0000                  		bsr.w	AddPoints
00019614 117C 0006 0025             		move.b	#6,$25(a0)
0001961A 117C 0078 003C             		move.b	#$78,$3C(a0)
00019620 4268 0010                  		clr.w	$10(a0)
00019624 4E75                       		rts	
00019626                            ; ===========================================================================
00019626                            
00019626                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019626 3028 0030                  		move.w	$30(a0),d0
0001962A 317C 0200 0010             		move.w	#$200,$10(a0)
00019630 0828 0000 0022             		btst	#0,$22(a0)
00019636 6600                       		bne.s	loc_18A7C
00019638 4468 0010                  		neg.w	$10(a0)
0001963C 0C40 2008                  		cmpi.w	#$2008,d0
00019640 6E00                       		bgt.s	loc_18A88
00019642 6000                       		bra.s	loc_18A82
00019644                            ; ===========================================================================
00019644                            
00019644                            loc_18A7C:
00019644 0C40 2138                  		cmpi.w	#$2138,d0
00019648 6D00                       		blt.s	loc_18A88
0001964A                            
0001964A                            loc_18A82:
0001964A 0868 0000 0022             		bchg	#0,$22(a0)
00019650                            
00019650                            loc_18A88:
00019650 3028 0008                  		move.w	8(a0),d0
00019654 72FF                       		moveq	#-1,d1
00019656 7402                       		moveq	#2,d2
00019658 45E8 002A                  		lea	$2A(a0),a2
0001965C 7828                       		moveq	#$28,d4
0001965E 4A68 0010                  		tst.w	$10(a0)
00019662 6A00                       		bpl.s	loc_18A9E
00019664 4444                       		neg.w	d4
00019666                            
00019666                            loc_18A9E:
00019666 321A                       		move.w	(a2)+,d1
00019668 2641                       		movea.l	d1,a3
0001966A 082B 0003 0022             		btst	#3,$22(a3)
00019670 6600                       		bne.s	loc_18AB4
00019672 362B 0008                  		move.w	8(a3),d3
00019676 D644                       		add.w	d4,d3
00019678 9640                       		sub.w	d0,d3
0001967A 6700                       		beq.s	loc_18AC0
0001967C                            
0001967C                            loc_18AB4:
0001967C 51CA FFE8                  		dbf	d2,loc_18A9E
00019680                            
00019680 1142 0028                  		move.b	d2,$28(a0)
00019684 6000 FF0C                  		bra.w	loc_189CA
00019688                            ; ===========================================================================
00019688                            
00019688                            loc_18AC0:
00019688 1142 0028                  		move.b	d2,$28(a0)
0001968C 5428 0025                  		addq.b	#2,$25(a0)
00019690 117C 0028 003C             		move.b	#$28,$3C(a0)
00019696 6000 FEFA                  		bra.w	loc_189CA
0001969A                            ; ===========================================================================
0001969A                            
0001969A                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001969A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000196A0 6600                       		bne.s	loc_18B36
000196A2 70FF                       		moveq	#-1,d0
000196A4 1028 0028                  		move.b	$28(a0),d0
000196A8 4880                       		ext.w	d0
000196AA 6B00                       		bmi.s	loc_18B40
000196AC 5540                       		subq.w	#2,d0
000196AE 4440                       		neg.w	d0
000196B0 D040                       		add.w	d0,d0
000196B2 43E8 002A                  		lea	$2A(a0),a1
000196B6 3031 0000                  		move.w	(a1,d0.w),d0
000196BA 2440                       		movea.l	d0,a2
000196BC 43F8 D040                  		lea	($FFFFD040).w,a1
000196C0 723E                       		moveq	#$3E,d1
000196C2                            
000196C2                            loc_18AFA:
000196C2 B0A9 003C                  		cmp.l	$3C(a1),d0
000196C6 6700                       		beq.s	loc_18B40
000196C8 D2FC 0040                  		adda.w	#$40,a1
000196CC 51C9 FFF4                  		dbf	d1,loc_18AFA
000196D0                            
000196D0 2F08                       		move.l	a0,-(sp)
000196D2 41D2                       		lea	(a2),a0
000196D4 4EB9 0000 E4E8             		jsr	SingleObjLoad2
000196DA 205F                       		movea.l	(sp)+,a0
000196DC 6600                       		bne.s	loc_18B40
000196DE 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000196E2 3368 0008 0008             		move.w	8(a0),8(a1)
000196E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000196EE 0669 0020 000C             		addi.w	#$20,$C(a1)
000196F4 136A 0022 0022             		move.b	$22(a2),$22(a1)
000196FA 234A 003C                  		move.l	a2,$3C(a1)
000196FE                            
000196FE                            loc_18B36:
000196FE 5328 003C                  		subq.b	#1,$3C(a0)
00019702 6700                       		beq.s	loc_18B40
00019704 6000 FEC0                  		bra.w	loc_189FE
00019708                            ; ===========================================================================
00019708                            
00019708                            loc_18B40:
00019708 5528 0025                  		subq.b	#2,$25(a0)
0001970C 6000 FE84                  		bra.w	loc_189CA
00019710                            ; ===========================================================================
00019710                            
00019710                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019710 5328 003C                  		subq.b	#1,$3C(a0)
00019714 6B00                       		bmi.s	loc_18B52
00019716 6000 ED3C                  		bra.w	BossDefeated
0001971A                            ; ===========================================================================
0001971A                            
0001971A                            loc_18B52:
0001971A 5428 0025                  		addq.b	#2,$25(a0)
0001971E 4268 0012                  		clr.w	$12(a0)
00019722 08E8 0000 0022             		bset	#0,$22(a0)
00019728 08A8 0007 0022             		bclr	#7,$22(a0)
0001972E 4268 0010                  		clr.w	$10(a0)
00019732 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019738 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001973C 6600                       		bne.s	loc_18B7C
0001973E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019744                            
00019744                            loc_18B7C:
00019744 6000 FE80                  		bra.w	loc_189FE
00019748                            ; ===========================================================================
00019748                            
00019748                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019748 5228 003C                  		addq.b	#1,$3C(a0)
0001974C 6700                       		beq.s	loc_18B90
0001974E 6A00                       		bpl.s	loc_18B96
00019750 0668 0018 0012             		addi.w	#$18,$12(a0)
00019756 6000                       		bra.s	loc_18BC2
00019758                            ; ===========================================================================
00019758                            
00019758                            loc_18B90:
00019758 4268 0012                  		clr.w	$12(a0)
0001975C 6000                       		bra.s	loc_18BC2
0001975E                            ; ===========================================================================
0001975E                            
0001975E                            loc_18B96:
0001975E 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019764 6500                       		bcs.s	loc_18BAE
00019766 6700                       		beq.s	loc_18BB4
00019768 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
0001976E 6500                       		bcs.s	loc_18BC2
00019770 5428 0025                  		addq.b	#2,$25(a0)
00019774 6000                       		bra.s	loc_18BC2
00019776                            ; ===========================================================================
00019776                            
00019776                            loc_18BAE:
00019776 5168 0012                  		subq.w	#8,$12(a0)
0001977A 6000                       		bra.s	loc_18BC2
0001977C                            ; ===========================================================================
0001977C                            
0001977C                            loc_18BB4:
0001977C 4268 0012                  		clr.w	$12(a0)
00019780 303C 0084                  		move.w	#$84,d0
00019784 4EB9 0000 1594             		jsr	(PlaySound).l	; play SLZ music
0001978A                            
0001978A                            loc_18BC2:
0001978A 6000 FE2A                  		bra.w	loc_189EE
0001978E                            ; ===========================================================================
0001978E                            
0001978E                            loc_18BC6:				; XREF: Obj7A_ShipIndex
0001978E 317C 0400 0010             		move.w	#$400,$10(a0)
00019794 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001979A 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000197A0 6400                       		bcc.s	loc_18BE0
000197A2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000197A6 6000                       		bra.s	loc_18BE8
000197A8                            ; ===========================================================================
000197A8                            
000197A8                            loc_18BE0:
000197A8 4A28 0001                  		tst.b	1(a0)
000197AC 6A00 FCCE                  		bpl.w	Obj7A_Delete
000197B0                            
000197B0                            loc_18BE8:
000197B0 6100 ECE4                  		bsr.w	BossMove
000197B4 6000 FDDC                  		bra.w	loc_189CA
000197B8                            ; ===========================================================================
000197B8                            
000197B8                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000197B8 7000                       		moveq	#0,d0
000197BA 7201                       		moveq	#1,d1
000197BC 2268 0034                  		movea.l	$34(a0),a1
000197C0 1029 0025                  		move.b	$25(a1),d0
000197C4 0C00 0006                  		cmpi.b	#6,d0
000197C8 6B00                       		bmi.s	loc_18C06
000197CA 720A                       		moveq	#$A,d1
000197CC 6000                       		bra.s	loc_18C1A
000197CE                            ; ===========================================================================
000197CE                            
000197CE                            loc_18C06:
000197CE 4A29 0020                  		tst.b	$20(a1)
000197D2 6600                       		bne.s	loc_18C10
000197D4 7205                       		moveq	#5,d1
000197D6 6000                       		bra.s	loc_18C1A
000197D8                            ; ===========================================================================
000197D8                            
000197D8                            loc_18C10:
000197D8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000197DE 6500                       		bcs.s	loc_18C1A
000197E0 7204                       		moveq	#4,d1
000197E2                            
000197E2                            loc_18C1A:
000197E2 1141 001C                  		move.b	d1,$1C(a0)
000197E6 0C00 000A                  		cmpi.b	#$A,d0
000197EA 6600                       		bne.s	loc_18C32
000197EC 117C 0006 001C             		move.b	#6,$1C(a0)
000197F2 4A28 0001                  		tst.b	1(a0)
000197F6 6A00 FC84                  		bpl.w	Obj7A_Delete
000197FA                            
000197FA                            loc_18C32:
000197FA 6000                       		bra.s	loc_18C6C
000197FC                            ; ===========================================================================
000197FC                            
000197FC                            Obj7A_FlameMain:			; XREF: Obj7A_Index
000197FC 117C 0008 001C             		move.b	#8,$1C(a0)
00019802 2268 0034                  		movea.l	$34(a0),a1
00019806 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001980C 6600                       		bne.s	loc_18C56
0001980E 4A28 0001                  		tst.b	1(a0)
00019812 6A00 FC68                  		bpl.w	Obj7A_Delete
00019816 117C 000B 001C             		move.b	#$B,$1C(a0)
0001981C 6000                       		bra.s	loc_18C6C
0001981E                            ; ===========================================================================
0001981E                            
0001981E                            loc_18C56:
0001981E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019824 6E00                       		bgt.s	loc_18C6C
00019826 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001982C 6D00                       		blt.s	loc_18C6C
0001982E 117C 0007 001C             		move.b	#7,$1C(a0)
00019834                            
00019834                            loc_18C6C:
00019834 43F9 0001 88D8             		lea	(Ani_Eggman).l,a1
0001983A 4EB9 0000 B09A             		jsr	AnimateSprite
00019840                            
00019840                            loc_18C78:
00019840 2268 0034                  		movea.l	$34(a0),a1
00019844 3169 0008 0008             		move.w	8(a1),8(a0)
0001984A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019850 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019856 7003                       		moveq	#3,d0
00019858 C028 0022                  		and.b	$22(a0),d0
0001985C 0228 00FC 0001             		andi.b	#-4,1(a0)
00019862 8128 0001                  		or.b	d0,1(a0)
00019866 4EF9 0000 E04C             		jmp	DisplaySprite
0001986C                            ; ===========================================================================
0001986C                            
0001986C                            Obj7A_TubeMain:				; XREF: Obj7A_Index
0001986C 2268 0034                  		movea.l	$34(a0),a1
00019870 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019876 6600                       		bne.s	loc_18CB8
00019878 4A28 0001                  		tst.b	1(a0)
0001987C 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019880                            
00019880                            loc_18CB8:
00019880 217C 0001 8A04 0004        		move.l	#Map_BossItems,4(a0)
00019888 317C 246C 0002             		move.w	#$246C,2(a0)
0001988E 117C 0003 001A             		move.b	#3,$1A(a0)
00019894 60AA                       		bra.s	loc_18C78
00019896                            ; ===========================================================================
00019896                            ; ---------------------------------------------------------------------------
00019896                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019896                            ; ---------------------------------------------------------------------------
00019896                            
00019896                            Obj7B:					; XREF: Obj_Index
00019896 7000                       		moveq	#0,d0
00019898 1028 0024                  		move.b	$24(a0),d0
0001989C 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000198A0 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000198A4 3028 0030                  		move.w	$30(a0),d0
000198A8 0240 FF80                  		andi.w	#$FF80,d0
000198AC 3238 F700                  		move.w	($FFFFF700).w,d1
000198B0 0441 0080                  		subi.w	#$80,d1
000198B4 0241 FF80                  		andi.w	#$FF80,d1
000198B8 9041                       		sub.w	d1,d0
000198BA 6B00 FBC0                  		bmi.w	Obj7A_Delete
000198BE 0C40 0280                  		cmpi.w	#$280,d0
000198C2 6200 FBB8                  		bhi.w	Obj7A_Delete
000198C6 4EF9 0000 E04C             		jmp	DisplaySprite
000198CC                            ; ===========================================================================
000198CC 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000198CE 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000198D0 0000                       		dc.w loc_18DC6-Obj7B_Index
000198D2 0000                       		dc.w loc_18EAA-Obj7B_Index
000198D4 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000198D6 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000198D8                            ; ===========================================================================
000198D8                            
000198D8                            Obj7B_Main:				; XREF: Obj7B_Index
000198D8 217C 0001 2418 0004        		move.l	#Map_obj5Ea,4(a0)
000198E0 317C 0518 0002             		move.w	#$518,2(a0)
000198E6 117C 0001 001A             		move.b	#1,$1A(a0)
000198EC 0028 0004 0001             		ori.b	#4,1(a0)
000198F2 117C 0004 0018             		move.b	#4,$18(a0)
000198F8 117C 008B 0020             		move.b	#$8B,$20(a0)
000198FE 117C 000C 0019             		move.b	#$C,$19(a0)
00019904 2268 003C                  		movea.l	$3C(a0),a1
00019908 3169 0008 0030             		move.w	8(a1),$30(a0)
0001990E 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019914 08E8 0000 0022             		bset	#0,$22(a0)
0001991A 3028 0008                  		move.w	8(a0),d0
0001991E B069 0008                  		cmp.w	8(a1),d0
00019922 6E00                       		bgt.s	loc_18D68
00019924 08A8 0000 0022             		bclr	#0,$22(a0)
0001992A 117C 0002 003A             		move.b	#2,$3A(a0)
00019930                            
00019930                            loc_18D68:
00019930 5428 0024                  		addq.b	#2,$24(a0)
00019934                            
00019934                            Obj7B_Fall:				; XREF: Obj7B_Index
00019934 4EB9 0000 DFB4             		jsr	ObjectFall
0001993A 2268 003C                  		movea.l	$3C(a0),a1
0001993E 45F9 0000 0000             		lea	(word_19018).l,a2
00019944 7000                       		moveq	#0,d0
00019946 1029 001A                  		move.b	$1A(a1),d0
0001994A 3228 0008                  		move.w	8(a0),d1
0001994E 9268 0030                  		sub.w	$30(a0),d1
00019952 6400                       		bcc.s	loc_18D8E
00019954 5440                       		addq.w	#2,d0
00019956                            
00019956                            loc_18D8E:
00019956 D040                       		add.w	d0,d0
00019958 3228 0034                  		move.w	$34(a0),d1
0001995C D272 0000                  		add.w	(a2,d0.w),d1
00019960 B268 000C                  		cmp.w	$C(a0),d1
00019964 6E00                       		bgt.s	locret_18DC4
00019966 2268 003C                  		movea.l	$3C(a0),a1
0001996A 7202                       		moveq	#2,d1
0001996C 0828 0000 0022             		btst	#0,$22(a0)
00019972 6700                       		beq.s	loc_18DAE
00019974 7200                       		moveq	#0,d1
00019976                            
00019976                            loc_18DAE:
00019976 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001997C 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019982 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019988 6000 0000                  		bra.w	loc_18FA2
0001998C                            ; ===========================================================================
0001998C                            
0001998C                            locret_18DC4:
0001998C 4E75                       		rts	
0001998E                            ; ===========================================================================
0001998E                            
0001998E                            loc_18DC6:				; XREF: Obj7B_Index
0001998E 2268 003C                  		movea.l	$3C(a0),a1
00019992 7000                       		moveq	#0,d0
00019994 1028 003A                  		move.b	$3A(a0),d0
00019998 9029 003A                  		sub.b	$3A(a1),d0
0001999C 6700                       		beq.s	loc_18E2A
0001999E 6400                       		bcc.s	loc_18DDA
000199A0 4400                       		neg.b	d0
000199A2                            
000199A2                            loc_18DDA:
000199A2 323C F7E8                  		move.w	#-$818,d1
000199A6 343C FEEC                  		move.w	#-$114,d2
000199AA 0C00 0001                  		cmpi.b	#1,d0
000199AE 6700                       		beq.s	loc_18E00
000199B0 323C F6A0                  		move.w	#-$960,d1
000199B4 343C FF0C                  		move.w	#-$F4,d2
000199B8 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000199BE 6D00                       		blt.s	loc_18E00
000199C0 323C F5E0                  		move.w	#-$A20,d1
000199C4 343C FF80                  		move.w	#-$80,d2
000199C8                            
000199C8                            loc_18E00:
000199C8 3141 0012                  		move.w	d1,$12(a0)
000199CC 3142 0010                  		move.w	d2,$10(a0)
000199D0 3028 0008                  		move.w	8(a0),d0
000199D4 9068 0030                  		sub.w	$30(a0),d0
000199D8 6400                       		bcc.s	loc_18E16
000199DA 4468 0010                  		neg.w	$10(a0)
000199DE                            
000199DE                            loc_18E16:
000199DE 117C 0001 001A             		move.b	#1,$1A(a0)
000199E4 317C 0020 0028             		move.w	#$20,$28(a0)
000199EA 5428 0024                  		addq.b	#2,$24(a0)
000199EE 6000 0000                  		bra.w	loc_18EAA
000199F2                            ; ===========================================================================
000199F2                            
000199F2                            loc_18E2A:				; XREF: loc_18DC6
000199F2 45F9 0000 0000             		lea	(word_19018).l,a2
000199F8 7000                       		moveq	#0,d0
000199FA 1029 001A                  		move.b	$1A(a1),d0
000199FE 343C 0028                  		move.w	#$28,d2
00019A02 3228 0008                  		move.w	8(a0),d1
00019A06 9268 0030                  		sub.w	$30(a0),d1
00019A0A 6400                       		bcc.s	loc_18E48
00019A0C 4442                       		neg.w	d2
00019A0E 5440                       		addq.w	#2,d0
00019A10                            
00019A10                            loc_18E48:
00019A10 D040                       		add.w	d0,d0
00019A12 3228 0034                  		move.w	$34(a0),d1
00019A16 D272 0000                  		add.w	(a2,d0.w),d1
00019A1A 3141 000C                  		move.w	d1,$C(a0)
00019A1E D468 0030                  		add.w	$30(a0),d2
00019A22 3142 0008                  		move.w	d2,8(a0)
00019A26 4268 000E                  		clr.w	$E(a0)
00019A2A 4268 000A                  		clr.w	$A(a0)
00019A2E 5368 0028                  		subq.w	#1,$28(a0)
00019A32 6600                       		bne.s	loc_18E7A
00019A34 317C 0020 0028             		move.w	#$20,$28(a0)
00019A3A 117C 0008 0024             		move.b	#8,$24(a0)
00019A40 4E75                       		rts	
00019A42                            ; ===========================================================================
00019A42                            
00019A42                            loc_18E7A:
00019A42 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019A48 6600                       		bne.s	loc_18E88
00019A4A 117C 0005 001F             		move.b	#5,$1F(a0)
00019A50                            
00019A50                            loc_18E88:
00019A50 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00019A56 6600                       		bne.s	loc_18E96
00019A58 117C 0002 001F             		move.b	#2,$1F(a0)
00019A5E                            
00019A5E                            loc_18E96:
00019A5E 5328 001E                  		subq.b	#1,$1E(a0)
00019A62 6E00                       		bgt.s	locret_18EA8
00019A64 0868 0000 001A             		bchg	#0,$1A(a0)
00019A6A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019A70                            
00019A70                            locret_18EA8:
00019A70 4E75                       		rts	
00019A72                            ; ===========================================================================
00019A72                            
00019A72                            loc_18EAA:				; XREF: Obj7B_Index
00019A72 43F8 D040                  		lea	($FFFFD040).w,a1
00019A76 707A                       		moveq	#$7A,d0
00019A78 7240                       		moveq	#$40,d1
00019A7A 743E                       		moveq	#$3E,d2
00019A7C                            
00019A7C                            loc_18EB4:
00019A7C B011                       		cmp.b	(a1),d0
00019A7E 6700                       		beq.s	loc_18EC0
00019A80 D2C1                       		adda.w	d1,a1
00019A82 51CA FFF8                  		dbf	d2,loc_18EB4
00019A86                            
00019A86 6000                       		bra.s	loc_18F38
00019A88                            ; ===========================================================================
00019A88                            
00019A88                            loc_18EC0:
00019A88 3029 0008                  		move.w	8(a1),d0
00019A8C 3229 000C                  		move.w	$C(a1),d1
00019A90 3428 0008                  		move.w	8(a0),d2
00019A94 3628 000C                  		move.w	$C(a0),d3
00019A98 45FA 0000                  		lea	byte_19022(pc),a2
00019A9C 47FA 0000                  		lea	byte_19026(pc),a3
00019AA0 181A                       		move.b	(a2)+,d4
00019AA2 4884                       		ext.w	d4
00019AA4 D044                       		add.w	d4,d0
00019AA6 181B                       		move.b	(a3)+,d4
00019AA8 4884                       		ext.w	d4
00019AAA D444                       		add.w	d4,d2
00019AAC B440                       		cmp.w	d0,d2
00019AAE 6500                       		bcs.s	loc_18F38
00019AB0 181A                       		move.b	(a2)+,d4
00019AB2 4884                       		ext.w	d4
00019AB4 D044                       		add.w	d4,d0
00019AB6 181B                       		move.b	(a3)+,d4
00019AB8 4884                       		ext.w	d4
00019ABA D444                       		add.w	d4,d2
00019ABC B042                       		cmp.w	d2,d0
00019ABE 6500                       		bcs.s	loc_18F38
00019AC0 181A                       		move.b	(a2)+,d4
00019AC2 4884                       		ext.w	d4
00019AC4 D244                       		add.w	d4,d1
00019AC6 181B                       		move.b	(a3)+,d4
00019AC8 4884                       		ext.w	d4
00019ACA D644                       		add.w	d4,d3
00019ACC B641                       		cmp.w	d1,d3
00019ACE 6500                       		bcs.s	loc_18F38
00019AD0 181A                       		move.b	(a2)+,d4
00019AD2 4884                       		ext.w	d4
00019AD4 D244                       		add.w	d4,d1
00019AD6 181B                       		move.b	(a3)+,d4
00019AD8 4884                       		ext.w	d4
00019ADA D644                       		add.w	d4,d3
00019ADC B243                       		cmp.w	d3,d1
00019ADE 6500                       		bcs.s	loc_18F38
00019AE0 5428 0024                  		addq.b	#2,$24(a0)
00019AE4 4268 0028                  		clr.w	$28(a0)
00019AE8 4229 0020                  		clr.b	$20(a1)
00019AEC 5329 0021                  		subq.b	#1,$21(a1)
00019AF0 6600                       		bne.s	loc_18F38
00019AF2 08E9 0007 0022             		bset	#7,$22(a1)
00019AF8 4268 0010                  		clr.w	$10(a0)
00019AFC 4268 0012                  		clr.w	$12(a0)
00019B00                            
00019B00                            loc_18F38:
00019B00 4A68 0012                  		tst.w	$12(a0)
00019B04 6A00                       		bpl.s	loc_18F5C
00019B06 4EB9 0000 DFB4             		jsr	ObjectFall
00019B0C 3028 0034                  		move.w	$34(a0),d0
00019B10 0440 002F                  		subi.w	#$2F,d0
00019B14 B068 000C                  		cmp.w	$C(a0),d0
00019B18 6E00                       		bgt.s	loc_18F58
00019B1A 4EB9 0000 DFB4             		jsr	ObjectFall
00019B20                            
00019B20                            loc_18F58:
00019B20 6000 FF20                  		bra.w	loc_18E7A
00019B24                            ; ===========================================================================
00019B24                            
00019B24                            loc_18F5C:
00019B24 4EB9 0000 DFB4             		jsr	ObjectFall
00019B2A 2268 003C                  		movea.l	$3C(a0),a1
00019B2E 45F9 0000 0000             		lea	(word_19018).l,a2
00019B34 7000                       		moveq	#0,d0
00019B36 1029 001A                  		move.b	$1A(a1),d0
00019B3A 3228 0008                  		move.w	8(a0),d1
00019B3E 9268 0030                  		sub.w	$30(a0),d1
00019B42 6400                       		bcc.s	loc_18F7E
00019B44 5440                       		addq.w	#2,d0
00019B46                            
00019B46                            loc_18F7E:
00019B46 D040                       		add.w	d0,d0
00019B48 3228 0034                  		move.w	$34(a0),d1
00019B4C D272 0000                  		add.w	(a2,d0.w),d1
00019B50 B268 000C                  		cmp.w	$C(a0),d1
00019B54 6ECA                       		bgt.s	loc_18F58
00019B56 2268 003C                  		movea.l	$3C(a0),a1
00019B5A 7202                       		moveq	#2,d1
00019B5C 4A68 0010                  		tst.w	$10(a0)
00019B60 6B00                       		bmi.s	loc_18F9C
00019B62 7200                       		moveq	#0,d1
00019B64                            
00019B64                            loc_18F9C:
00019B64 317C 0000 0028             		move.w	#0,$28(a0)
00019B6A                            
00019B6A                            loc_18FA2:
00019B6A 1341 003A                  		move.b	d1,$3A(a1)
00019B6E 1141 003A                  		move.b	d1,$3A(a0)
00019B72 B229 001A                  		cmp.b	$1A(a1),d1
00019B76 6700                       		beq.s	loc_19008
00019B78 08A9 0003 0022             		bclr	#3,$22(a1)
00019B7E 6700                       		beq.s	loc_19008
00019B80 4229 0025                  		clr.b	$25(a1)
00019B84 137C 0002 0024             		move.b	#2,$24(a1)
00019B8A 45F8 D000                  		lea	($FFFFD000).w,a2
00019B8E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019B94 446A 0012                  		neg.w	$12(a2)
00019B98 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019B9E 6600                       		bne.s	loc_18FDC
00019BA0 E0EA 0012                  		asr	$12(a2)
00019BA4                            
00019BA4                            loc_18FDC:
00019BA4 08EA 0001 0022             		bset	#1,$22(a2)
00019BAA 08AA 0003 0022             		bclr	#3,$22(a2)
00019BB0 422A 003C                  		clr.b	$3C(a2)
00019BB4 2F08                       		move.l	a0,-(sp)
00019BB6 41D2                       		lea	(a2),a0
00019BB8 4EBA A2E0                  		jsr	Obj01_ChkRoll
00019BBC 205F                       		movea.l	(sp)+,a0
00019BBE 157C 0002 0024             		move.b	#2,$24(a2)
00019BC4 303C 00CC                  		move.w	#$CC,d0
00019BC8 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019BCE                            
00019BCE                            loc_19008:
00019BCE 4268 0010                  		clr.w	$10(a0)
00019BD2 4268 0012                  		clr.w	$12(a0)
00019BD6 5428 0024                  		addq.b	#2,$24(a0)
00019BDA 6000 FE66                  		bra.w	loc_18E7A
00019BDE                            ; ===========================================================================
00019BDE FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019BE8                            		even
00019BE8 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019BEC                            		even
00019BEC 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019BF0                            		even
00019BF0                            ; ===========================================================================
00019BF0                            
00019BF0                            Obj7B_Explode:				; XREF: Obj7B_Index
00019BF0 10BC 003F                  		move.b	#$3F,(a0)
00019BF4 4228 0024                  		clr.b	$24(a0)
00019BF8 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019BFE 6700                       		beq.s	Obj7B_MakeFrag
00019C00 4E75                       		rts	
00019C02                            ; ===========================================================================
00019C02                            
00019C02                            Obj7B_MakeFrag:
00019C02 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019C08 7203                       		moveq	#3,d1
00019C0A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019C0E                            
00019C0E                            Obj7B_Loop:
00019C0E 4EB9 0000 E4D2             		jsr	SingleObjLoad
00019C14 6600                       		bne.s	loc_1909A
00019C16 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019C1A 137C 000A 0024             		move.b	#$A,$24(a1)
00019C20 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019C28 137C 0003 0018             		move.b	#3,$18(a1)
00019C2E 337C 0518 0002             		move.w	#$518,2(a1)
00019C34 3368 0008 0008             		move.w	8(a0),8(a1)
00019C3A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019C40 335A 0010                  		move.w	(a2)+,$10(a1)
00019C44 335A 0012                  		move.w	(a2)+,$12(a1)
00019C48 137C 0098 0020             		move.b	#$98,$20(a1)
00019C4E 0029 0004 0001             		ori.b	#4,1(a1)
00019C54 08E9 0007 0001             		bset	#7,1(a1)
00019C5A 137C 000C 0019             		move.b	#$C,$19(a1)
00019C60                            
00019C60                            loc_1909A:
00019C60 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00019C64                            
00019C64 4E75                       		rts	
00019C66                            ; ===========================================================================
00019C66 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019C6A FF60 FDC0                  		dc.w $FF60, $FDC0
00019C6E 0100 FCC0                  		dc.w $100, $FCC0
00019C72 00A0 FDC0                  		dc.w $A0, $FDC0
00019C76                            ; ===========================================================================
00019C76                            
00019C76                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019C76 4EB9 0000 E026             		jsr	SpeedToPos
00019C7C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019C82 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019C88 0668 0018 0012             		addi.w	#$18,$12(a0)
00019C8E 7004                       		moveq	#4,d0
00019C90 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019C94 E448                       		lsr.w	#2,d0
00019C96 1140 001A                  		move.b	d0,$1A(a0)
00019C9A 4A28 0001                  		tst.b	1(a0)
00019C9E 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019CA2 4E75                       		rts	
00019CA4                            ; ===========================================================================
00019CA4                            ; ---------------------------------------------------------------------------
00019CA4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019CA4                            ; ---------------------------------------------------------------------------
00019CA4                            Map_obj7B:
00019CA4                            	include "_maps\obj7B.asm"
00019CA4                            ; ---------------------------------------------------------------------------
00019CA4                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019CA4                            ; ---------------------------------------------------------------------------
00019CA4 0000                       		dc.w byte_190E2-Map_obj7B
00019CA6 0000                       		dc.w byte_190E8-Map_obj7B
00019CA8 01                         byte_190E2:	dc.b 1
00019CA9 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019CAE 01                         byte_190E8:	dc.b 1
00019CAF FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019CB4                            		even
00019CB4                            		even
00019CB4                            
00019CB4                            ; ===========================================================================
00019CB4                            ; ---------------------------------------------------------------------------
00019CB4                            ; Object 75 - Eggman (SYZ)
00019CB4                            ; ---------------------------------------------------------------------------
00019CB4                            
00019CB4                            Obj75:					; XREF: Obj_Index
00019CB4 7000                       		moveq	#0,d0
00019CB6 1028 0024                  		move.b	$24(a0),d0
00019CBA 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019CBE 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019CC2                            ; ===========================================================================
00019CC2 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019CC4 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019CC6 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019CC8 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019CCA 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019CCC                            
00019CCC 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019CCF 0401 05                    		dc.b 4,	1, 5
00019CD2 0607 05                    		dc.b 6,	7, 5
00019CD5 0800 05                    		dc.b 8,	0, 5
00019CD8                            ; ===========================================================================
00019CD8                            
00019CD8                            Obj75_Main:				; XREF: Obj75_Index
00019CD8 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019CDE 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019CE4 3168 0008 0030             		move.w	8(a0),$30(a0)
00019CEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019CF0 117C 000F 0020             		move.b	#$F,$20(a0)
00019CF6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019CFC 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019D00 2248                       		movea.l	a0,a1
00019D02 7203                       		moveq	#3,d1
00019D04 6000                       		bra.s	Obj75_LoadBoss
00019D06                            ; ===========================================================================
00019D06                            
00019D06                            Obj75_Loop:
00019D06 4EB9 0000 E4E8             		jsr	SingleObjLoad2
00019D0C 6600                       		bne.s	Obj75_ShipMain
00019D0E 12BC 0075                  		move.b	#$75,(a1)
00019D12 3368 0008 0008             		move.w	8(a0),8(a1)
00019D18 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019D1E                            
00019D1E                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019D1E 08A8 0000 0022             		bclr	#0,$22(a0)
00019D24 4229 0025                  		clr.b	$25(a1)
00019D28 135A 0024                  		move.b	(a2)+,$24(a1)
00019D2C 135A 001C                  		move.b	(a2)+,$1C(a1)
00019D30 135A 0018                  		move.b	(a2)+,$18(a1)
00019D34 237C 0001 893C 0004        		move.l	#Map_Eggman,4(a1)
00019D3C 337C 0400 0002             		move.w	#$400,2(a1)
00019D42 137C 0004 0001             		move.b	#4,1(a1)
00019D48 137C 0020 0019             		move.b	#$20,$19(a1)
00019D4E 2348 0034                  		move.l	a0,$34(a1)
00019D52 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019D56                            
00019D56                            Obj75_ShipMain:				; XREF: Obj75_Index
00019D56 7000                       		moveq	#0,d0
00019D58 1028 0025                  		move.b	$25(a0),d0
00019D5C 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019D60 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019D64 43F9 0001 88D8             		lea	(Ani_Eggman).l,a1
00019D6A 4EB9 0000 B09A             		jsr	AnimateSprite
00019D70 7003                       		moveq	#3,d0
00019D72 C028 0022                  		and.b	$22(a0),d0
00019D76 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019D7C 8128 0001                  		or.b	d0,1(a0)
00019D80 4EF9 0000 E04C             		jmp	DisplaySprite
00019D86                            ; ===========================================================================
00019D86 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019D8A 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019D8E 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019D92                            ; ===========================================================================
00019D92                            
00019D92                            loc_191CC:				; XREF: Obj75_ShipIndex
00019D92 317C FF00 0010             		move.w	#-$100,$10(a0)
00019D98 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019D9E 6400                       		bcc.s	loc_191DE
00019DA0 5428 0025                  		addq.b	#2,$25(a0)
00019DA4                            
00019DA4                            loc_191DE:
00019DA4 1028 003F                  		move.b	$3F(a0),d0
00019DA8 5428 003F                  		addq.b	#2,$3F(a0)
00019DAC 4EB9 0000 2D34             		jsr	(CalcSine).l
00019DB2 E440                       		asr.w	#2,d0
00019DB4 3140 0012                  		move.w	d0,$12(a0)
00019DB8                            
00019DB8                            loc_191F2:
00019DB8 6100 E6DC                  		bsr.w	BossMove
00019DBC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019DC2 3168 0030 0008             		move.w	$30(a0),8(a0)
00019DC8                            
00019DC8                            loc_19202:
00019DC8 3028 0008                  		move.w	8(a0),d0
00019DCC 0440 2C00                  		subi.w	#$2C00,d0
00019DD0 EA48                       		lsr.w	#5,d0
00019DD2 1140 0034                  		move.b	d0,$34(a0)
00019DD6 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019DDC 6400                       		bcc.s	locret_19256
00019DDE 4A28 0022                  		tst.b	$22(a0)
00019DE2 6B00                       		bmi.s	loc_19258
00019DE4 4A28 0020                  		tst.b	$20(a0)
00019DE8 6600                       		bne.s	locret_19256
00019DEA 4A28 003E                  		tst.b	$3E(a0)
00019DEE 6600                       		bne.s	loc_1923A
00019DF0 117C 0020 003E             		move.b	#$20,$3E(a0)
00019DF6 303C 00AC                  		move.w	#$AC,d0
00019DFA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019E00                            
00019E00                            loc_1923A:
00019E00 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019E04 7000                       		moveq	#0,d0
00019E06 4A51                       		tst.w	(a1)
00019E08 6600                       		bne.s	loc_19248
00019E0A 303C 0EEE                  		move.w	#$EEE,d0
00019E0E                            
00019E0E                            loc_19248:
00019E0E 3280                       		move.w	d0,(a1)
00019E10 5328 003E                  		subq.b	#1,$3E(a0)
00019E14 6600                       		bne.s	locret_19256
00019E16 117C 000F 0020             		move.b	#$F,$20(a0)
00019E1C                            
00019E1C                            locret_19256:
00019E1C 4E75                       		rts	
00019E1E                            ; ===========================================================================
00019E1E                            
00019E1E                            loc_19258:				; XREF: loc_19202
00019E1E 7064                       		moveq	#100,d0
00019E20 6100 0000                  		bsr.w	AddPoints
00019E24 117C 0006 0025             		move.b	#6,$25(a0)
00019E2A 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019E30 4268 0010                  		clr.w	$10(a0)
00019E34 4E75                       		rts	
00019E36                            ; ===========================================================================
00019E36                            
00019E36                            loc_19270:				; XREF: Obj75_ShipIndex
00019E36 3028 0030                  		move.w	$30(a0),d0
00019E3A 317C 0140 0010             		move.w	#$140,$10(a0)
00019E40 0828 0000 0022             		btst	#0,$22(a0)
00019E46 6600                       		bne.s	loc_1928E
00019E48 4468 0010                  		neg.w	$10(a0)
00019E4C 0C40 2C08                  		cmpi.w	#$2C08,d0
00019E50 6E00                       		bgt.s	loc_1929E
00019E52 6000                       		bra.s	loc_19294
00019E54                            ; ===========================================================================
00019E54                            
00019E54                            loc_1928E:
00019E54 0C40 2D38                  		cmpi.w	#$2D38,d0
00019E58 6D00                       		blt.s	loc_1929E
00019E5A                            
00019E5A                            loc_19294:
00019E5A 0868 0000 0022             		bchg	#0,$22(a0)
00019E60 4228 003D                  		clr.b	$3D(a0)
00019E64                            
00019E64                            loc_1929E:
00019E64 0440 2C10                  		subi.w	#$2C10,d0
00019E68 0240 001F                  		andi.w	#$1F,d0
00019E6C 0440 001F                  		subi.w	#$1F,d0
00019E70 6A00                       		bpl.s	loc_192AE
00019E72 4440                       		neg.w	d0
00019E74                            
00019E74                            loc_192AE:
00019E74 5340                       		subq.w	#1,d0
00019E76 6E00                       		bgt.s	loc_192E8
00019E78 4A28 003D                  		tst.b	$3D(a0)
00019E7C 6600                       		bne.s	loc_192E8
00019E7E 3238 D008                  		move.w	($FFFFD008).w,d1
00019E82 0441 2C00                  		subi.w	#$2C00,d1
00019E86 EA41                       		asr.w	#5,d1
00019E88 B228 0034                  		cmp.b	$34(a0),d1
00019E8C 6600                       		bne.s	loc_192E8
00019E8E 7000                       		moveq	#0,d0
00019E90 1028 0034                  		move.b	$34(a0),d0
00019E94 EB40                       		asl.w	#5,d0
00019E96 0640 2C10                  		addi.w	#$2C10,d0
00019E9A 3140 0030                  		move.w	d0,$30(a0)
00019E9E 6100 0000                  		bsr.w	Obj75_FindBlocks
00019EA2 5428 0025                  		addq.b	#2,$25(a0)
00019EA6 4268 0028                  		clr.w	$28(a0)
00019EAA 4268 0010                  		clr.w	$10(a0)
00019EAE                            
00019EAE                            loc_192E8:
00019EAE 6000 FEF4                  		bra.w	loc_191DE
00019EB2                            ; ===========================================================================
00019EB2                            
00019EB2                            loc_192EC:				; XREF: Obj75_ShipIndex
00019EB2 7000                       		moveq	#0,d0
00019EB4 1028 0028                  		move.b	$28(a0),d0
00019EB8 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019EBC 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019EC0                            ; ===========================================================================
00019EC0 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019EC2 0000                       		dc.w loc_19348-off_192FA
00019EC4 0000                       		dc.w loc_1938E-off_192FA
00019EC6 0000                       		dc.w loc_193D0-off_192FA
00019EC8                            ; ===========================================================================
00019EC8                            
00019EC8                            loc_19302:				; XREF: off_192FA
00019EC8 317C 0180 0012             		move.w	#$180,$12(a0)
00019ECE 3028 0038                  		move.w	$38(a0),d0
00019ED2 0C40 0556                  		cmpi.w	#$556,d0
00019ED6 6500                       		bcs.s	loc_19344
00019ED8 317C 0556 0038             		move.w	#$556,$38(a0)
00019EDE 4268 003C                  		clr.w	$3C(a0)
00019EE2 70FF                       		moveq	#-1,d0
00019EE4 3028 0036                  		move.w	$36(a0),d0
00019EE8 6700                       		beq.s	loc_1933C
00019EEA 2240                       		movea.l	d0,a1
00019EEC 137C 00FF 0029             		move.b	#-1,$29(a1)
00019EF2 117C 00FF 0029             		move.b	#-1,$29(a0)
00019EF8 2348 0034                  		move.l	a0,$34(a1)
00019EFC 317C 0032 003C             		move.w	#$32,$3C(a0)
00019F02                            
00019F02                            loc_1933C:
00019F02 4268 0012                  		clr.w	$12(a0)
00019F06 5428 0028                  		addq.b	#2,$28(a0)
00019F0A                            
00019F0A                            loc_19344:
00019F0A 6000 FEAC                  		bra.w	loc_191F2
00019F0E                            ; ===========================================================================
00019F0E                            
00019F0E                            loc_19348:				; XREF: off_192FA
00019F0E 5368 003C                  		subq.w	#1,$3C(a0)
00019F12 6A00                       		bpl.s	loc_19366
00019F14 5428 0028                  		addq.b	#2,$28(a0)
00019F18 317C F800 0012             		move.w	#-$800,$12(a0)
00019F1E 4A68 0036                  		tst.w	$36(a0)
00019F22 6600                       		bne.s	loc_19362
00019F24 E0E8 0012                  		asr	$12(a0)
00019F28                            
00019F28                            loc_19362:
00019F28 7000                       		moveq	#0,d0
00019F2A 6000                       		bra.s	loc_1937C
00019F2C                            ; ===========================================================================
00019F2C                            
00019F2C                            loc_19366:
00019F2C 7000                       		moveq	#0,d0
00019F2E 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019F34 6E00                       		bgt.s	loc_1937C
00019F36 7002                       		moveq	#2,d0
00019F38 0828 0001 003D             		btst	#1,$3D(a0)
00019F3E 6700                       		beq.s	loc_1937C
00019F40 4440                       		neg.w	d0
00019F42                            
00019F42                            loc_1937C:
00019F42 D068 0038                  		add.w	$38(a0),d0
00019F46 3140 000C                  		move.w	d0,$C(a0)
00019F4A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019F50 6000 FE76                  		bra.w	loc_19202
00019F54                            ; ===========================================================================
00019F54                            
00019F54                            loc_1938E:				; XREF: off_192FA
00019F54 303C 04DA                  		move.w	#$4DA,d0
00019F58 4A68 0036                  		tst.w	$36(a0)
00019F5C 6700                       		beq.s	loc_1939C
00019F5E 0440 0018                  		subi.w	#$18,d0
00019F62                            
00019F62                            loc_1939C:
00019F62 B068 0038                  		cmp.w	$38(a0),d0
00019F66 6D00                       		blt.s	loc_193BE
00019F68 317C 0008 003C             		move.w	#8,$3C(a0)
00019F6E 4A68 0036                  		tst.w	$36(a0)
00019F72 6700                       		beq.s	loc_193B4
00019F74 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019F7A                            
00019F7A                            loc_193B4:
00019F7A 5428 0028                  		addq.b	#2,$28(a0)
00019F7E 4268 0012                  		clr.w	$12(a0)
00019F82 6000                       		bra.s	loc_193CC
00019F84                            ; ===========================================================================
00019F84                            
00019F84                            loc_193BE:
00019F84 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019F8A 6C00                       		bge.s	loc_193CC
00019F8C 0668 000C 0012             		addi.w	#$C,$12(a0)
00019F92                            
00019F92                            loc_193CC:
00019F92 6000 FE24                  		bra.w	loc_191F2
00019F96                            ; ===========================================================================
00019F96                            
00019F96                            loc_193D0:				; XREF: off_192FA
00019F96 5368 003C                  		subq.w	#1,$3C(a0)
00019F9A 6E00                       		bgt.s	loc_19406
00019F9C 6B00                       		bmi.s	loc_193EE
00019F9E 70FF                       		moveq	#-1,d0
00019FA0 3028 0036                  		move.w	$36(a0),d0
00019FA4 6700                       		beq.s	loc_193E8
00019FA6 2240                       		movea.l	d0,a1
00019FA8 137C 000A 0029             		move.b	#$A,$29(a1)
00019FAE                            
00019FAE                            loc_193E8:
00019FAE 4268 0036                  		clr.w	$36(a0)
00019FB2 6000                       		bra.s	loc_19406
00019FB4                            ; ===========================================================================
00019FB4                            
00019FB4                            loc_193EE:
00019FB4 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019FBA 6600                       		bne.s	loc_19406
00019FBC 4228 0029                  		clr.b	$29(a0)
00019FC0 5528 0025                  		subq.b	#2,$25(a0)
00019FC4 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019FCA 6000                       		bra.s	loc_19446
00019FCC                            ; ===========================================================================
00019FCC                            
00019FCC                            loc_19406:
00019FCC 7001                       		moveq	#1,d0
00019FCE 4A68 0036                  		tst.w	$36(a0)
00019FD2 6700                       		beq.s	loc_19410
00019FD4 7002                       		moveq	#2,d0
00019FD6                            
00019FD6                            loc_19410:
00019FD6 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019FDC 6700                       		beq.s	loc_19424
00019FDE 6D00                       		blt.s	loc_1941C
00019FE0 4440                       		neg.w	d0
00019FE2                            
00019FE2                            loc_1941C:
00019FE2 4A68 0036                  		tst.w	$36(a0)
00019FE6 D168 0038                  		add.w	d0,$38(a0)
00019FEA                            
00019FEA                            loc_19424:
00019FEA 7000                       		moveq	#0,d0
00019FEC 4A68 0036                  		tst.w	$36(a0)
00019FF0 6700                       		beq.s	loc_19438
00019FF2 7002                       		moveq	#2,d0
00019FF4 0828 0000 003D             		btst	#0,$3D(a0)
00019FFA 6700                       		beq.s	loc_19438
00019FFC 4440                       		neg.w	d0
00019FFE                            
00019FFE                            loc_19438:
00019FFE D068 0038                  		add.w	$38(a0),d0
0001A002 3140 000C                  		move.w	d0,$C(a0)
0001A006 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A00C                            
0001A00C                            loc_19446:
0001A00C 6000 FDBA                  		bra.w	loc_19202
0001A010                            
0001A010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A010                            
0001A010                            
0001A010                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A010 4268 0036                  		clr.w	$36(a0)
0001A014 43F8 D040                  		lea	($FFFFD040).w,a1
0001A018 703E                       		moveq	#$3E,d0
0001A01A 7276                       		moveq	#$76,d1
0001A01C 1428 0034                  		move.b	$34(a0),d2
0001A020                            
0001A020                            Obj75_FindLoop:
0001A020 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A022 6600                       		bne.s	loc_1946A	; if not, branch
0001A024 B429 0028                  		cmp.b	$28(a1),d2
0001A028 6600                       		bne.s	loc_1946A
0001A02A 3149 0036                  		move.w	a1,$36(a0)
0001A02E 6000                       		bra.s	locret_19472
0001A030                            ; ===========================================================================
0001A030                            
0001A030                            loc_1946A:
0001A030 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A034 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A038                            
0001A038                            locret_19472:
0001A038 4E75                       		rts	
0001A03A                            ; End of function Obj75_FindBlocks
0001A03A                            
0001A03A                            ; ===========================================================================
0001A03A                            
0001A03A                            loc_19474:				; XREF: Obj75_ShipIndex
0001A03A 5368 003C                  		subq.w	#1,$3C(a0)
0001A03E 6B00                       		bmi.s	loc_1947E
0001A040 6000 E412                  		bra.w	BossDefeated
0001A044                            ; ===========================================================================
0001A044                            
0001A044                            loc_1947E:
0001A044 5428 0025                  		addq.b	#2,$25(a0)
0001A048 4268 0012                  		clr.w	$12(a0)
0001A04C 08E8 0000 0022             		bset	#0,$22(a0)
0001A052 08A8 0007 0022             		bclr	#7,$22(a0)
0001A058 4268 0010                  		clr.w	$10(a0)
0001A05C 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A062 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A066 6600                       		bne.s	loc_194A8
0001A068 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A06E                            
0001A06E                            loc_194A8:
0001A06E 6000 FD58                  		bra.w	loc_19202
0001A072                            ; ===========================================================================
0001A072                            
0001A072                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A072 5268 003C                  		addq.w	#1,$3C(a0)
0001A076 6700                       		beq.s	loc_194BC
0001A078 6A00                       		bpl.s	loc_194C2
0001A07A 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A080 6000                       		bra.s	loc_194EE
0001A082                            ; ===========================================================================
0001A082                            
0001A082                            loc_194BC:
0001A082 4268 0012                  		clr.w	$12(a0)
0001A086 6000                       		bra.s	loc_194EE
0001A088                            ; ===========================================================================
0001A088                            
0001A088                            loc_194C2:
0001A088 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A08E 6500                       		bcs.s	loc_194DA
0001A090 6700                       		beq.s	loc_194E0
0001A092 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A098 6500                       		bcs.s	loc_194EE
0001A09A 5428 0025                  		addq.b	#2,$25(a0)
0001A09E 6000                       		bra.s	loc_194EE
0001A0A0                            ; ===========================================================================
0001A0A0                            
0001A0A0                            loc_194DA:
0001A0A0 5168 0012                  		subq.w	#8,$12(a0)
0001A0A4 6000                       		bra.s	loc_194EE
0001A0A6                            ; ===========================================================================
0001A0A6                            
0001A0A6                            loc_194E0:
0001A0A6 4268 0012                  		clr.w	$12(a0)
0001A0AA 303C 0085                  		move.w	#$85,d0
0001A0AE 4EB9 0000 1594             		jsr	(PlaySound).l	; play SYZ music
0001A0B4                            
0001A0B4                            loc_194EE:
0001A0B4 6000 FD02                  		bra.w	loc_191F2
0001A0B8                            ; ===========================================================================
0001A0B8                            
0001A0B8                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A0B8 317C 0400 0010             		move.w	#$400,$10(a0)
0001A0BE 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A0C4 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A0CA 6400                       		bcc.s	loc_1950C
0001A0CC 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A0D0 6000                       		bra.s	loc_19512
0001A0D2                            ; ===========================================================================
0001A0D2                            
0001A0D2                            loc_1950C:
0001A0D2 4A28 0001                  		tst.b	1(a0)
0001A0D6 6A00                       		bpl.s	Obj75_ShipDelete
0001A0D8                            
0001A0D8                            loc_19512:
0001A0D8 6100 E3BC                  		bsr.w	BossMove
0001A0DC 6000 FCC6                  		bra.w	loc_191DE
0001A0E0                            ; ===========================================================================
0001A0E0                            
0001A0E0                            Obj75_ShipDelete:
0001A0E0 4EF9 0000 E088             		jmp	DeleteObject
0001A0E6                            ; ===========================================================================
0001A0E6                            
0001A0E6                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A0E6 7201                       		moveq	#1,d1
0001A0E8 2268 0034                  		movea.l	$34(a0),a1
0001A0EC 7000                       		moveq	#0,d0
0001A0EE 1029 0025                  		move.b	$25(a1),d0
0001A0F2 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A0F6 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A0FA 1141 001C                  		move.b	d1,$1C(a0)
0001A0FE 1010                       		move.b	(a0),d0
0001A100 B011                       		cmp.b	(a1),d0
0001A102 6600                       		bne.s	Obj75_FaceDelete
0001A104 6000                       		bra.s	loc_195BE
0001A106                            ; ===========================================================================
0001A106                            
0001A106                            Obj75_FaceDelete:
0001A106 4EF9 0000 E088             		jmp	DeleteObject
0001A10C                            ; ===========================================================================
0001A10C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A110 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A114 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A118                            ; ===========================================================================
0001A118                            
0001A118                            loc_19552:				; XREF: off_19546
0001A118 720A                       		moveq	#$A,d1
0001A11A 4E75                       		rts	
0001A11C                            ; ===========================================================================
0001A11C                            
0001A11C                            loc_19556:				; XREF: off_19546
0001A11C 7206                       		moveq	#6,d1
0001A11E 4E75                       		rts	
0001A120                            ; ===========================================================================
0001A120                            
0001A120                            loc_1955A:				; XREF: off_19546
0001A120 7000                       		moveq	#0,d0
0001A122 1029 0028                  		move.b	$28(a1),d0
0001A126 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A12A 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A12E                            ; ===========================================================================
0001A12E 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A132 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A136                            ; ===========================================================================
0001A136                            
0001A136                            loc_19570:				; XREF: off_19568
0001A136 6000                       		bra.s	loc_19574
0001A138                            ; ===========================================================================
0001A138                            
0001A138                            loc_19572:				; XREF: off_19568
0001A138 7206                       		moveq	#6,d1
0001A13A                            
0001A13A                            loc_19574:				; XREF: off_19546
0001A13A 4A29 0020                  		tst.b	$20(a1)
0001A13E 6600                       		bne.s	loc_1957E
0001A140 7205                       		moveq	#5,d1
0001A142 4E75                       		rts	
0001A144                            ; ===========================================================================
0001A144                            
0001A144                            loc_1957E:
0001A144 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A14A 6500                       		bcs.s	locret_19588
0001A14C 7204                       		moveq	#4,d1
0001A14E                            
0001A14E                            locret_19588:
0001A14E 4E75                       		rts	
0001A150                            ; ===========================================================================
0001A150                            
0001A150                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A150 117C 0007 001C             		move.b	#7,$1C(a0)
0001A156 2268 0034                  		movea.l	$34(a0),a1
0001A15A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A160 6600                       		bne.s	loc_195AA
0001A162 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A168 4A28 0001                  		tst.b	1(a0)
0001A16C 6A00                       		bpl.s	Obj75_FlameDelete
0001A16E 6000                       		bra.s	loc_195B6
0001A170                            ; ===========================================================================
0001A170                            
0001A170                            loc_195AA:
0001A170 4A69 0010                  		tst.w	$10(a1)
0001A174 6700                       		beq.s	loc_195B6
0001A176 117C 0008 001C             		move.b	#8,$1C(a0)
0001A17C                            
0001A17C                            loc_195B6:
0001A17C 6000                       		bra.s	loc_195BE
0001A17E                            ; ===========================================================================
0001A17E                            
0001A17E                            Obj75_FlameDelete:
0001A17E 4EF9 0000 E088             		jmp	DeleteObject
0001A184                            ; ===========================================================================
0001A184                            
0001A184                            loc_195BE:
0001A184 43F9 0001 88D8             		lea	(Ani_Eggman).l,a1
0001A18A 4EB9 0000 B09A             		jsr	AnimateSprite
0001A190 2268 0034                  		movea.l	$34(a0),a1
0001A194 3169 0008 0008             		move.w	8(a1),8(a0)
0001A19A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A1A0                            
0001A1A0                            loc_195DA:
0001A1A0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A1A6 7003                       		moveq	#3,d0
0001A1A8 C028 0022                  		and.b	$22(a0),d0
0001A1AC 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A1B2 8128 0001                  		or.b	d0,1(a0)
0001A1B6 4EF9 0000 E04C             		jmp	DisplaySprite
0001A1BC                            ; ===========================================================================
0001A1BC                            
0001A1BC                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A1BC 217C 0001 8A04 0004        		move.l	#Map_BossItems,4(a0)
0001A1C4 317C 246C 0002             		move.w	#$246C,2(a0)
0001A1CA 117C 0005 001A             		move.b	#5,$1A(a0)
0001A1D0 2268 0034                  		movea.l	$34(a0),a1
0001A1D4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A1DA 6600                       		bne.s	loc_1961C
0001A1DC 4A28 0001                  		tst.b	1(a0)
0001A1E0 6A00                       		bpl.s	Obj75_SpikeDelete
0001A1E2                            
0001A1E2                            loc_1961C:
0001A1E2 3169 0008 0008             		move.w	8(a1),8(a0)
0001A1E8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A1EE 3028 003C                  		move.w	$3C(a0),d0
0001A1F2 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A1F8 6600                       		bne.s	loc_19652
0001A1FA 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A200 6700                       		beq.s	loc_1964C
0001A202 4A29 0028                  		tst.b	$28(a1)
0001A206 6600                       		bne.s	loc_19658
0001A208 0C40 0094                  		cmpi.w	#$94,d0
0001A20C 6C00                       		bge.s	loc_19658
0001A20E 5E40                       		addq.w	#7,d0
0001A210 6000                       		bra.s	loc_19658
0001A212                            ; ===========================================================================
0001A212                            
0001A212                            loc_1964C:
0001A212 4A69 003C                  		tst.w	$3C(a1)
0001A216 6A00                       		bpl.s	loc_19658
0001A218                            
0001A218                            loc_19652:
0001A218 4A40                       		tst.w	d0
0001A21A 6F00                       		ble.s	loc_19658
0001A21C 5B40                       		subq.w	#5,d0
0001A21E                            
0001A21E                            loc_19658:
0001A21E 3140 003C                  		move.w	d0,$3C(a0)
0001A222 E440                       		asr.w	#2,d0
0001A224 D168 000C                  		add.w	d0,$C(a0)
0001A228 117C 0008 0019             		move.b	#8,$19(a0)
0001A22E 117C 000C 0016             		move.b	#$C,$16(a0)
0001A234 4228 0020                  		clr.b	$20(a0)
0001A238 2268 0034                  		movea.l	$34(a0),a1
0001A23C 4A29 0020                  		tst.b	$20(a1)
0001A240 6700                       		beq.s	loc_19688
0001A242 4A29 0029                  		tst.b	$29(a1)
0001A246 6600                       		bne.s	loc_19688
0001A248 117C 0084 0020             		move.b	#$84,$20(a0)
0001A24E                            
0001A24E                            loc_19688:
0001A24E 6000 FF50                  		bra.w	loc_195DA
0001A252                            ; ===========================================================================
0001A252                            
0001A252                            Obj75_SpikeDelete:
0001A252 4EF9 0000 E088             		jmp	DeleteObject
0001A258                            ; ===========================================================================
0001A258                            ; ---------------------------------------------------------------------------
0001A258                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A258                            ; ---------------------------------------------------------------------------
0001A258                            
0001A258                            Obj76:					; XREF: Obj_Index
0001A258 7000                       		moveq	#0,d0
0001A25A 1028 0024                  		move.b	$24(a0),d0
0001A25E 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A262 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A266                            ; ===========================================================================
0001A266 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A268 0000                       		dc.w Obj76_Action-Obj76_Index
0001A26A 0000                       		dc.w loc_19762-Obj76_Index
0001A26C                            ; ===========================================================================
0001A26C                            
0001A26C                            Obj76_Main:				; XREF: Obj76_Index
0001A26C 7800                       		moveq	#0,d4
0001A26E 3A3C 2C10                  		move.w	#$2C10,d5
0001A272 7C09                       		moveq	#9,d6
0001A274 43D0                       		lea	(a0),a1
0001A276 6000                       		bra.s	Obj76_MakeBlock
0001A278                            ; ===========================================================================
0001A278                            
0001A278                            Obj76_Loop:
0001A278 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001A27E 6600                       		bne.s	Obj76_ExitLoop
0001A280                            
0001A280                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A280 12BC 0076                  		move.b	#$76,(a1)
0001A284 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A28C 337C 4000 0002             		move.w	#$4000,2(a1)
0001A292 137C 0004 0001             		move.b	#4,1(a1)
0001A298 137C 0010 0019             		move.b	#$10,$19(a1)
0001A29E 137C 0010 0016             		move.b	#$10,$16(a1)
0001A2A4 137C 0003 0018             		move.b	#3,$18(a1)
0001A2AA 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A2AE 337C 0582 000C             		move.w	#$582,$C(a1)
0001A2B4 3344 0028                  		move.w	d4,$28(a1)
0001A2B8 0644 0101                  		addi.w	#$101,d4
0001A2BC 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A2C0 5429 0024                  		addq.b	#2,$24(a1)
0001A2C4 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A2C8                            
0001A2C8                            Obj76_ExitLoop:
0001A2C8 4E75                       		rts	
0001A2CA                            ; ===========================================================================
0001A2CA                            
0001A2CA                            Obj76_Action:				; XREF: Obj76_Index
0001A2CA 1028 0029                  		move.b	$29(a0),d0
0001A2CE B028 0028                  		cmp.b	$28(a0),d0
0001A2D2 6700                       		beq.s	Obj76_Solid
0001A2D4 4A00                       		tst.b	d0
0001A2D6 6B00                       		bmi.s	loc_19718
0001A2D8                            
0001A2D8                            loc_19712:
0001A2D8 6100 0000                  		bsr.w	Obj76_Break
0001A2DC 6000                       		bra.s	Obj76_Display
0001A2DE                            ; ===========================================================================
0001A2DE                            
0001A2DE                            loc_19718:
0001A2DE 2268 0034                  		movea.l	$34(a0),a1
0001A2E2 4A29 0021                  		tst.b	$21(a1)
0001A2E6 67F0                       		beq.s	loc_19712
0001A2E8 3169 0008 0008             		move.w	8(a1),8(a0)
0001A2EE 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A2F4 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A2FA B2C8                       		cmpa.w	a0,a1
0001A2FC 6500                       		bcs.s	Obj76_Display
0001A2FE 3029 0012                  		move.w	$12(a1),d0
0001A302 48C0                       		ext.l	d0
0001A304 E080                       		asr.l	#8,d0
0001A306 D168 000C                  		add.w	d0,$C(a0)
0001A30A 6000                       		bra.s	Obj76_Display
0001A30C                            ; ===========================================================================
0001A30C                            
0001A30C                            Obj76_Solid:				; XREF: Obj76_Action
0001A30C 323C 001B                  		move.w	#$1B,d1
0001A310 343C 0010                  		move.w	#$10,d2
0001A314 363C 0011                  		move.w	#$11,d3
0001A318 3828 0008                  		move.w	8(a0),d4
0001A31C 4EB9 0001 041C             		jsr	SolidObject
0001A322                            
0001A322                            Obj76_Display:				; XREF: Obj76_Action
0001A322 4EF9 0000 E04C             		jmp	DisplaySprite
0001A328                            ; ===========================================================================
0001A328                            
0001A328                            loc_19762:				; XREF: Obj76_Index
0001A328 4A28 0001                  		tst.b	1(a0)
0001A32C 6A00                       		bpl.s	Obj76_Delete
0001A32E 4EB9 0000 DFB4             		jsr	ObjectFall
0001A334 4EF9 0000 E04C             		jmp	DisplaySprite
0001A33A                            ; ===========================================================================
0001A33A                            
0001A33A                            Obj76_Delete:
0001A33A 4EF9 0000 E088             		jmp	DeleteObject
0001A340                            
0001A340                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A340                            
0001A340                            
0001A340                            Obj76_Break:				; XREF: Obj76_Action
0001A340 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A344 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A348 7801                       		moveq	#1,d4
0001A34A 7203                       		moveq	#3,d1
0001A34C 7438                       		moveq	#$38,d2
0001A34E 5428 0024                  		addq.b	#2,$24(a0)
0001A352 117C 0008 0019             		move.b	#8,$19(a0)
0001A358 117C 0008 0016             		move.b	#8,$16(a0)
0001A35E 43D0                       		lea	(a0),a1
0001A360 6000                       		bra.s	Obj76_MakeFrag
0001A362                            ; ===========================================================================
0001A362                            
0001A362                            Obj76_LoopFrag:
0001A362 4EB9 0000 E4E8             		jsr	SingleObjLoad2
0001A368 6600                       		bne.s	loc_197D4
0001A36A                            
0001A36A                            Obj76_MakeFrag:
0001A36A 45D0                       		lea	(a0),a2
0001A36C 47D1                       		lea	(a1),a3
0001A36E 7603                       		moveq	#3,d3
0001A370                            
0001A370                            loc_197AA:
0001A370 26DA                       		move.l	(a2)+,(a3)+
0001A372 26DA                       		move.l	(a2)+,(a3)+
0001A374 26DA                       		move.l	(a2)+,(a3)+
0001A376 26DA                       		move.l	(a2)+,(a3)+
0001A378 51CB FFF6                  		dbf	d3,loc_197AA
0001A37C                            
0001A37C 335C 0010                  		move.w	(a4)+,$10(a1)
0001A380 335C 0012                  		move.w	(a4)+,$12(a1)
0001A384 361D                       		move.w	(a5)+,d3
0001A386 D769 0008                  		add.w	d3,8(a1)
0001A38A 361D                       		move.w	(a5)+,d3
0001A38C D769 000C                  		add.w	d3,$C(a1)
0001A390 1344 001A                  		move.b	d4,$1A(a1)
0001A394 5244                       		addq.w	#1,d4
0001A396 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A39A                            
0001A39A                            loc_197D4:
0001A39A 303C 00CB                  		move.w	#$CB,d0
0001A39E 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A3A4                            ; End of function Obj76_Break
0001A3A4                            
0001A3A4                            ; ===========================================================================
0001A3A4 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A3A8 0180 FE00                  		dc.w $180, $FE00
0001A3AC FF00 FF00                  		dc.w $FF00, $FF00
0001A3B0 0100 FF00                  		dc.w $100, $FF00
0001A3B4 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A3B8 0010 0000                  		dc.w $10, 0
0001A3BC 0000 0010                  		dc.w 0,	$10
0001A3C0 0010 0010                  		dc.w $10, $10
0001A3C4                            ; ---------------------------------------------------------------------------
0001A3C4                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A3C4                            ; ---------------------------------------------------------------------------
0001A3C4                            Map_obj76:
0001A3C4                            	include "_maps\obj76.asm"
0001A3C4                            ; ---------------------------------------------------------------------------
0001A3C4                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A3C4                            ; ---------------------------------------------------------------------------
0001A3C4 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A3C8 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A3CC 0000                       		dc.w byte_19826-Map_obj76
0001A3CE 02                         byte_19808:	dc.b 2
0001A3CF F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A3D4 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A3D9 00                         		dc.b 0
0001A3DA 01                         byte_19814:	dc.b 1
0001A3DB F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A3E0 01                         byte_1981A:	dc.b 1
0001A3E1 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A3E6 01                         byte_19820:	dc.b 1
0001A3E7 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A3EC 01                         byte_19826:	dc.b 1
0001A3ED F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A3F2                            		even
0001A3F2                            		even
0001A3F2                            
0001A3F2                            ; ===========================================================================
0001A3F2                            
0001A3F2                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A3F2 4EF9 0000 E088             		jmp	DeleteObject
0001A3F8                            ; ===========================================================================
0001A3F8                            ; ---------------------------------------------------------------------------
0001A3F8                            ; Object 82 - Eggman (SBZ2)
0001A3F8                            ; ---------------------------------------------------------------------------
0001A3F8                            
0001A3F8                            Obj82:					; XREF: Obj_Index
0001A3F8 7000                       		moveq	#0,d0
0001A3FA 1028 0024                  		move.b	$24(a0),d0
0001A3FE 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A402 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A406                            ; ===========================================================================
0001A406 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A408 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A40A 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A40C                            
0001A40C 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A40F 0400 03                    		dc.b 4,	0, 3
0001A412                            ; ===========================================================================
0001A412                            
0001A412                            Obj82_Main:				; XREF: Obj82_Index
0001A412 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A416 317C 2160 0008             		move.w	#$2160,8(a0)
0001A41C 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A422 117C 000F 0020             		move.b	#$F,$20(a0)
0001A428 117C 0010 0021             		move.b	#$10,$21(a0)
0001A42E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A434 4228 0025                  		clr.b	$25(a0)
0001A438 115A 0024                  		move.b	(a2)+,$24(a0)
0001A43C 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A440 115A 0018                  		move.b	(a2)+,$18(a0)
0001A444 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A44C 317C 0400 0002             		move.w	#$400,2(a0)
0001A452 117C 0004 0001             		move.b	#4,1(a0)
0001A458 08E8 0007 0001             		bset	#7,1(a0)
0001A45E 117C 0020 0019             		move.b	#$20,$19(a0)
0001A464 4EB9 0000 E4E8             		jsr	SingleObjLoad2
0001A46A 6600                       		bne.s	Obj82_Eggman
0001A46C 2348 0034                  		move.l	a0,$34(a1)
0001A470 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A474 337C 2130 0008             		move.w	#$2130,8(a1)
0001A47A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A480 4228 0025                  		clr.b	$25(a0)
0001A484 135A 0024                  		move.b	(a2)+,$24(a1)
0001A488 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A48C 135A 0018                  		move.b	(a2)+,$18(a1)
0001A490 237C 0000 C7CE 0004        		move.l	#Map_obj32,4(a1)
0001A498 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A49E 137C 0004 0001             		move.b	#4,1(a1)
0001A4A4 08E9 0007 0001             		bset	#7,1(a1)
0001A4AA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A4B0 137C 0000 001A             		move.b	#0,$1A(a1)
0001A4B6                            
0001A4B6                            Obj82_Eggman:				; XREF: Obj82_Index
0001A4B6 7000                       		moveq	#0,d0
0001A4B8 1028 0025                  		move.b	$25(a0),d0
0001A4BC 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A4C0 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A4C4 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A4C8 4EB9 0000 B09A             		jsr	AnimateSprite
0001A4CE 4EF9 0000 E04C             		jmp	DisplaySprite
0001A4D4                            ; ===========================================================================
0001A4D4 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A4D6 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A4D8 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A4DA 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A4DC                            ; ===========================================================================
0001A4DC                            
0001A4DC                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A4DC 3028 0008                  		move.w	8(a0),d0
0001A4E0 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A4E4 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A4E8 6400                       		bcc.s	loc_19934	; if not, branch
0001A4EA 5428 0025                  		addq.b	#2,$25(a0)
0001A4EE 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A4F4 117C 0001 001C             		move.b	#1,$1C(a0)
0001A4FA                            
0001A4FA                            loc_19934:				; XREF: Obj82_EggIndex
0001A4FA 4EF9 0000 E026             		jmp	SpeedToPos
0001A500                            ; ===========================================================================
0001A500                            
0001A500                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A500 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A504 6600                       		bne.s	loc_19954	; if time remains, branch
0001A506 5428 0025                  		addq.b	#2,$25(a0)
0001A50A 117C 0002 001C             		move.b	#2,$1C(a0)
0001A510 5868 000C                  		addq.w	#4,$C(a0)
0001A514 317C 000F 003C             		move.w	#15,$3C(a0)
0001A51A                            
0001A51A                            loc_19954:
0001A51A 60DE                       		bra.s	loc_19934
0001A51C                            ; ===========================================================================
0001A51C                            
0001A51C                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A51C 5368 003C                  		subq.w	#1,$3C(a0)
0001A520 6E00                       		bgt.s	loc_199D0
0001A522 6600                       		bne.s	loc_1996A
0001A524 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A52A 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A530                            
0001A530                            loc_1996A:
0001A530 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A536 6E00                       		bgt.s	loc_19976
0001A538 4268 0010                  		clr.w	$10(a0)
0001A53C                            
0001A53C                            loc_19976:
0001A53C 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A542 4A68 0012                  		tst.w	$12(a0)
0001A546 6B00                       		bmi.s	Obj82_FindBlocks
0001A548 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A54E 6500                       		bcs.s	Obj82_FindBlocks
0001A550 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A556 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A55C 6500                       		bcs.s	Obj82_FindBlocks
0001A55E 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A564 4268 0012                  		clr.w	$12(a0)
0001A568                            
0001A568                            Obj82_FindBlocks:
0001A568 3028 0010                  		move.w	$10(a0),d0
0001A56C 8068 0012                  		or.w	$12(a0),d0
0001A570 6600                       		bne.s	loc_199D0
0001A572 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A576 703E                       		moveq	#$3E,d0
0001A578 7240                       		moveq	#$40,d1
0001A57A                            
0001A57A                            Obj82_FindLoop:	
0001A57A D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A57C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A580 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A584                            
0001A584 6600                       		bne.s	loc_199D0
0001A586 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A58C 5428 0025                  		addq.b	#2,$25(a0)
0001A590 117C 0001 001C             		move.b	#1,$1C(a0)
0001A596                            
0001A596                            loc_199D0:
0001A596 6000 FF62                  		bra.w	loc_19934
0001A59A                            ; ===========================================================================
0001A59A                            
0001A59A                            Obj82_Switch:				; XREF: Obj82_Index
0001A59A 7000                       		moveq	#0,d0
0001A59C 1028 0025                  		move.b	$25(a0),d0
0001A5A0 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A5A4 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A5A8                            ; ===========================================================================
0001A5A8 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A5AA 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A5AC                            ; ===========================================================================
0001A5AC                            
0001A5AC                            loc_199E6:				; XREF: Obj82_SwIndex
0001A5AC 2268 0034                  		movea.l	$34(a0),a1
0001A5B0 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A5B6 6600                       		bne.s	Obj82_SwDisplay
0001A5B8 117C 0001 001A             		move.b	#1,$1A(a0)
0001A5BE 5428 0025                  		addq.b	#2,$25(a0)
0001A5C2                            
0001A5C2                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A5C2 4EF9 0000 E04C             		jmp	DisplaySprite
0001A5C8                            ; ===========================================================================
0001A5C8                            Ani_obj82:
0001A5C8                            	include "_anim\obj82.asm"
0001A5C8                            ; ---------------------------------------------------------------------------
0001A5C8                            ; Animation script - Eggman (SBZ2)
0001A5C8                            ; ---------------------------------------------------------------------------
0001A5C8 0000                       		dc.w byte_19A10-Ani_obj82
0001A5CA 0000                       		dc.w byte_19A14-Ani_obj82
0001A5CC 0000                       		dc.w byte_19A18-Ani_obj82
0001A5CE 0000                       		dc.w byte_19A20-Ani_obj82
0001A5D0 0000                       		dc.w byte_19A24-Ani_obj82
0001A5D2 0000                       		dc.w byte_19A2A-Ani_obj82
0001A5D4 0000                       		dc.w byte_19A30-Ani_obj82
0001A5D6 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A5DA 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A5DE 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A5E6 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A5EA 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A5F0 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A5F6 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A5FA                            		even
0001A5FA                            		even
0001A5FA                            
0001A5FA                            ; ---------------------------------------------------------------------------
0001A5FA                            ; Sprite mappings - Eggman (SBZ2)
0001A5FA                            ; ---------------------------------------------------------------------------
0001A5FA                            Map_obj82:
0001A5FA                            	include "_maps\obj82.asm"
0001A5FA                            ; ================================================================================
0001A5FA                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A5FA                            ; ================================================================================
0001A5FA                            
0001A5FA                            DATAA16Z12RYSAF:
0001A5FA 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A5FE 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A602 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A606 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A60A 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A60E 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A610 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A611 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A616 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A61B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A620 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A621 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A626 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A62B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A630 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A635 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A636 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A63B E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A640 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A645 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A64A 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A64B E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A650 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A655 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A65A 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A65B E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A660 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A665 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A66A E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A66F 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A670 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A675 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A67A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A67F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A684 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A685 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A68A E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A68F 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A694 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A699 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A69E F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A6A3 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A6A8 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A6A9 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A6AE E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A6B3 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A6B8 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A6BD 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A6BE 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A6C3 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A6C8 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A6CD 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A6D2 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A6D7 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A6D8 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A6DD E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A6E2 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A6E7 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A6EC E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A6F1 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A6F6 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A6FB 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A700 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A701 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A706 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A70B EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A710                            	even
0001A710                            	even
0001A710                            
0001A710                            ; ===========================================================================
0001A710                            ; ---------------------------------------------------------------------------
0001A710                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A710                            ; ---------------------------------------------------------------------------
0001A710                            
0001A710                            Obj83:					; XREF: Obj_Index
0001A710 7000                       		moveq	#0,d0
0001A712 1028 0024                  		move.b	$24(a0),d0
0001A716 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A71A 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A71E                            ; ===========================================================================
0001A71E 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A720 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A722 0000                       		dc.w loc_19C36-Obj83_Index
0001A724 0000                       		dc.w loc_19C62-Obj83_Index
0001A726 0000                       		dc.w loc_19C72-Obj83_Index
0001A728 0000                       		dc.w loc_19C80-Obj83_Index
0001A72A                            ; ===========================================================================
0001A72A                            
0001A72A                            Obj83_Main:				; XREF: Obj83_Index
0001A72A 317C 2080 0008             		move.w	#$2080,8(a0)
0001A730 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A736 117C 0080 0019             		move.b	#$80,$19(a0)
0001A73C 117C 0010 0016             		move.b	#$10,$16(a0)
0001A742 117C 0004 0001             		move.b	#4,1(a0)
0001A748 08E8 0007 0001             		bset	#7,1(a0)
0001A74E 7800                       		moveq	#0,d4
0001A750 3A3C 2010                  		move.w	#$2010,d5
0001A754 7C07                       		moveq	#7,d6
0001A756 45E8 0030                  		lea	$30(a0),a2
0001A75A                            
0001A75A                            Obj83_MakeBlock:
0001A75A 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001A760 6600                       		bne.s	Obj83_ExitMake
0001A762 34C9                       		move.w	a1,(a2)+
0001A764 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A768 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A770 337C 4518 0002             		move.w	#$4518,2(a1)
0001A776 137C 0004 0001             		move.b	#4,1(a1)
0001A77C 137C 0010 0019             		move.b	#$10,$19(a1)
0001A782 137C 0010 0016             		move.b	#$10,$16(a1)
0001A788 137C 0003 0018             		move.b	#3,$18(a1)
0001A78E 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A792 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A798 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A79C 137C 0008 0024             		move.b	#8,$24(a1)
0001A7A2 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A7A6                            
0001A7A6                            Obj83_ExitMake:
0001A7A6 5428 0024                  		addq.b	#2,$24(a0)
0001A7AA 4E75                       		rts	
0001A7AC                            ; ===========================================================================
0001A7AC                            
0001A7AC                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A7AC 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A7B2 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A7B4 4228 001A                  		clr.b	$1A(a0)
0001A7B8 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A7BC                            
0001A7BC                            Obj83_Solid:
0001A7BC 7000                       		moveq	#0,d0
0001A7BE 1028 001A                  		move.b	$1A(a0),d0
0001A7C2 4400                       		neg.b	d0
0001A7C4 4880                       		ext.w	d0
0001A7C6 5040                       		addq.w	#8,d0
0001A7C8 E940                       		asl.w	#4,d0
0001A7CA 383C 2100                  		move.w	#$2100,d4
0001A7CE 9840                       		sub.w	d0,d4
0001A7D0 1140 0019                  		move.b	d0,$19(a0)
0001A7D4 3144 0008                  		move.w	d4,8(a0)
0001A7D8 720B                       		moveq	#$B,d1
0001A7DA D240                       		add.w	d0,d1
0001A7DC 7410                       		moveq	#$10,d2
0001A7DE 7611                       		moveq	#$11,d3
0001A7E0 4EF9 0001 041C             		jmp	SolidObject
0001A7E6                            ; ===========================================================================
0001A7E6                            
0001A7E6                            loc_19C36:				; XREF: Obj83_Index
0001A7E6 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A7EC 6400                       		bcc.s	Obj83_Solid2
0001A7EE 70FF                       		moveq	#-1,d0
0001A7F0 1028 001A                  		move.b	$1A(a0),d0
0001A7F4 4880                       		ext.w	d0
0001A7F6 D040                       		add.w	d0,d0
0001A7F8 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A7FC 2240                       		movea.l	d0,a1
0001A7FE 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A804 5228 001A                  		addq.b	#1,$1A(a0)
0001A808 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A80E 6700                       		beq.s	loc_19C62
0001A810                            
0001A810                            Obj83_Solid2:
0001A810 60AA                       		bra.s	Obj83_Solid
0001A812                            ; ===========================================================================
0001A812                            
0001A812                            loc_19C62:				; XREF: Obj83_Index
0001A812 08A8 0003 0022             		bclr	#3,$22(a0)
0001A818 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A81E 6000 FBD2                  		bra.w	loc_1982C
0001A822                            ; ===========================================================================
0001A822                            
0001A822                            loc_19C72:				; XREF: Obj83_Index
0001A822 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A828 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A82A 4EF9 0000 E04C             		jmp	DisplaySprite
0001A830                            ; ===========================================================================
0001A830                            
0001A830                            loc_19C80:				; XREF: Obj83_Index
0001A830 4A28 0001                  		tst.b	1(a0)
0001A834 6A00 FBBC                  		bpl.w	loc_1982C
0001A838 4EB9 0000 DFB4             		jsr	ObjectFall
0001A83E 4EF9 0000 E04C             		jmp	DisplaySprite
0001A844                            ; ===========================================================================
0001A844                            
0001A844                            Obj83_Break:				; XREF: loc_19C72
0001A844 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A848 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A84C 7801                       		moveq	#1,d4
0001A84E 7203                       		moveq	#3,d1
0001A850 7438                       		moveq	#$38,d2
0001A852 5428 0024                  		addq.b	#2,$24(a0)
0001A856 117C 0008 0019             		move.b	#8,$19(a0)
0001A85C 117C 0008 0016             		move.b	#8,$16(a0)
0001A862 43D0                       		lea	(a0),a1
0001A864 6000                       		bra.s	Obj83_MakeFrag
0001A866                            ; ===========================================================================
0001A866                            
0001A866                            Obj83_LoopFrag:
0001A866 4EB9 0000 E4E8             		jsr	SingleObjLoad2
0001A86C 6600                       		bne.s	Obj83_BreakSnd
0001A86E                            
0001A86E                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A86E 45D0                       		lea	(a0),a2
0001A870 47D1                       		lea	(a1),a3
0001A872 7603                       		moveq	#3,d3
0001A874                            
0001A874                            loc_19CC4:
0001A874 26DA                       		move.l	(a2)+,(a3)+
0001A876 26DA                       		move.l	(a2)+,(a3)+
0001A878 26DA                       		move.l	(a2)+,(a3)+
0001A87A 26DA                       		move.l	(a2)+,(a3)+
0001A87C 51CB FFF6                  		dbf	d3,loc_19CC4
0001A880                            
0001A880 335C 0012                  		move.w	(a4)+,$12(a1)
0001A884 361D                       		move.w	(a5)+,d3
0001A886 D769 0008                  		add.w	d3,8(a1)
0001A88A 361D                       		move.w	(a5)+,d3
0001A88C D769 000C                  		add.w	d3,$C(a1)
0001A890 1344 001A                  		move.b	d4,$1A(a1)
0001A894 5244                       		addq.w	#1,d4
0001A896 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A89A                            
0001A89A                            Obj83_BreakSnd:
0001A89A 303C 00CB                  		move.w	#$CB,d0
0001A89E 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A8A4 4EF9 0000 E04C             		jmp	DisplaySprite
0001A8AA                            ; ===========================================================================
0001A8AA 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A8AE 0120 00C0                  		dc.w $120, $C0
0001A8B2 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A8B6 0010 0000                  		dc.w $10, 0
0001A8BA 0000 0010                  		dc.w 0,	$10
0001A8BE 0010 0010                  		dc.w $10, $10
0001A8C2                            ; ---------------------------------------------------------------------------
0001A8C2                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A8C2                            ; ---------------------------------------------------------------------------
0001A8C2                            Map_obj83:
0001A8C2                            	include "_maps\obj83.asm"
0001A8C2                            ; ---------------------------------------------------------------------------
0001A8C2                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A8C2                            ; ---------------------------------------------------------------------------
0001A8C2 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A8C6 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A8CA 0000                       		dc.w byte_19D46-Map_obj83
0001A8CC 01                         byte_19D1C:	dc.b 1
0001A8CD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A8D2 02                         byte_19D22:	dc.b 2
0001A8D3 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A8D8 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A8DD 00                         		dc.b 0
0001A8DE 02                         byte_19D2E:	dc.b 2
0001A8DF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A8E4 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A8E9 00                         		dc.b 0
0001A8EA 02                         byte_19D3A:	dc.b 2
0001A8EB F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A8F0 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A8F5 00                         		dc.b 0
0001A8F6 02                         byte_19D46:	dc.b 2
0001A8F7 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A8FC F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A902 00                         		even
0001A902 00                         		even
0001A902                            
0001A902                            ; ===========================================================================
0001A902                            ; ---------------------------------------------------------------------------
0001A902                            ; Object 85 - Eggman (FZ)
0001A902                            ; ---------------------------------------------------------------------------
0001A902                            
0001A902                            Obj85_Delete:
0001A902 4EF9 0000 E088             		jmp	DeleteObject
0001A908                            ; ===========================================================================
0001A908                            
0001A908                            Obj85:					; XREF: Obj_Index
0001A908 7000                       		moveq	#0,d0
0001A90A 1028 0024                  		move.b	$24(a0),d0
0001A90E 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A912 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A916                            ; ===========================================================================
0001A916 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A918 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A91A 0000                       		dc.w loc_1A38E-Obj85_Index
0001A91C 0000                       		dc.w loc_1A346-Obj85_Index
0001A91E 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A920 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A922 0000                       		dc.w loc_1A264-Obj85_Index
0001A924                            
0001A924 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A92A 0001 A5FA                  		dc.l Map_obj82		; mappings pointer
0001A92E 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A934 0000 0000                  		dc.l Map_obj84
0001A938 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A93E 0000 0000                  		dc.l Map_FZBoss
0001A942 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A948 0001 A5FA                  		dc.l Map_obj82
0001A94C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A952 0001 893C                  		dc.l Map_Eggman
0001A956 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A95C 0001 893C                  		dc.l Map_Eggman
0001A960                            
0001A960 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A965 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A96A 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A96F 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A974 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A979 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A97E                            ; ===========================================================================
0001A97E                            
0001A97E                            Obj85_Main:				; XREF: Obj85_Index
0001A97E 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A982 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A986 2248                       		movea.l	a0,a1
0001A988 7205                       		moveq	#5,d1
0001A98A 6000                       		bra.s	Obj85_LoadBoss
0001A98C                            ; ===========================================================================
0001A98C                            
0001A98C                            Obj85_Loop:
0001A98C 4EB9 0000 E4E8             		jsr	SingleObjLoad2
0001A992 6600                       		bne.s	loc_19E20
0001A994                            
0001A994                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A994 12BC 0085                  		move.b	#$85,(a1)
0001A998 335A 0008                  		move.w	(a2)+,8(a1)
0001A99C 335A 000C                  		move.w	(a2)+,$C(a1)
0001A9A0 335A 0002                  		move.w	(a2)+,2(a1)
0001A9A4 235A 0004                  		move.l	(a2)+,4(a1)
0001A9A8 135B 0024                  		move.b	(a3)+,$24(a1)
0001A9AC 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A9B0 135B 0018                  		move.b	(a3)+,$18(a1)
0001A9B4 135B 0017                  		move.b	(a3)+,$17(a1)
0001A9B8 135B 0016                  		move.b	(a3)+,$16(a1)
0001A9BC 137C 0004 0001             		move.b	#4,1(a1)
0001A9C2 08E8 0007 0001             		bset	#7,1(a0)
0001A9C8 2348 0034                  		move.l	a0,$34(a1)
0001A9CC 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A9D0                            
0001A9D0                            loc_19E20:
0001A9D0 45E8 0036                  		lea	$36(a0),a2
0001A9D4 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001A9DA 6600                       		bne.s	loc_19E5A
0001A9DC 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A9E0 3489                       		move.w	a1,(a2)
0001A9E2 2348 0034                  		move.l	a0,$34(a1)
0001A9E6 45E8 0038                  		lea	$38(a0),a2
0001A9EA 7400                       		moveq	#0,d2
0001A9EC 7203                       		moveq	#3,d1
0001A9EE                            
0001A9EE                            loc_19E3E:
0001A9EE 4EB9 0000 E4E8             		jsr	SingleObjLoad2
0001A9F4 6600                       		bne.s	loc_19E5A
0001A9F6 34C9                       		move.w	a1,(a2)+
0001A9F8 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A9FC 2348 0034                  		move.l	a0,$34(a1)
0001AA00 1342 0028                  		move.b	d2,$28(a1)
0001AA04 5442                       		addq.w	#2,d2
0001AA06 51C9 FFE6                  		dbf	d1,loc_19E3E
0001AA0A                            
0001AA0A                            loc_19E5A:
0001AA0A 317C 0000 0034             		move.w	#0,$34(a0)
0001AA10 4EB8 2D0E                  		jsr	RandomNumber	; get a number between 0 and 250
0001AA14 4240                       		clr.w	d0
0001AA16 4840                       		swap	d0
0001AA18 80FC 00FB                  		divu.w	#251,d0
0001AA1C 4840                       		swap	d0
0001AA1E 0640 0118                  		add.w	#280,d0		; add 280
0001AA22 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001AA28 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AA2E                            
0001AA2E                            Obj85_Eggman:				; XREF: Obj85_Index
0001AA2E 7000                       		moveq	#0,d0
0001AA30 1028 0034                  		move.b	$34(a0),d0
0001AA34 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001AA38 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001AA3C 4EF9 0000 E04C             		jmp	DisplaySprite
0001AA42                            ; ===========================================================================
0001AA42 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001AA46 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001AA4A 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001AA4E 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001AA52                            ; ===========================================================================
0001AA52                            
0001AA52                            loc_19E90:				; XREF: off_19E80
0001AA52 4AB8 F680                  		tst.l	($FFFFF680).w
0001AA56 6600                       		bne.s	loc_19EA2
0001AA58 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001AA5E 6500                       		bcs.s	loc_19EA2
0001AA60 5428 0034                  		addq.b	#2,$34(a0)
0001AA64                            
0001AA64                            loc_19EA2:
0001AA64 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001AA68 4E75                       		rts	
0001AA6A                            ; ===========================================================================
0001AA6A                            
0001AA6A                            loc_19EA8:				; XREF: off_19E80
0001AA6A 4A68 0030                  		tst.w	$30(a0)
0001AA6E 6A00                       		bpl.s	loc_19F10
0001AA70 4268 0030                  		clr.w	$30(a0)
0001AA74 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001AA7A 0240 000C                  		andi.w	#$C,d0
0001AA7E 3200                       		move.w	d0,d1
0001AA80 5441                       		addq.w	#2,d1
0001AA82 4A80                       		tst.l	d0
0001AA84 6A00                       		bpl.s	loc_19EC6
0001AA86 C141                       		exg	d1,d0
0001AA88                            
0001AA88                            loc_19EC6:
0001AA88 43FA 0000                  		lea	word_19FD6(pc),a1
0001AA8C 3031 0000                  		move.w	(a1,d0.w),d0
0001AA90 3231 1000                  		move.w	(a1,d1.w),d1
0001AA94 3140 0030                  		move.w	d0,$30(a0)
0001AA98 74FF                       		moveq	#-1,d2
0001AA9A 3430 0038                  		move.w	$38(a0,d0.w),d2
0001AA9E 2242                       		movea.l	d2,a1
0001AAA0 137C 00FF 0029             		move.b	#-1,$29(a1)
0001AAA6 337C FFFF 0030             		move.w	#-1,$30(a1)
0001AAAC 3430 1038                  		move.w	$38(a0,d1.w),d2
0001AAB0 2242                       		movea.l	d2,a1
0001AAB2 137C 0001 0029             		move.b	#1,$29(a1)
0001AAB8 337C 0000 0030             		move.w	#0,$30(a1)
0001AABE 317C 0001 0032             		move.w	#1,$32(a0)
0001AAC4 4228 0035                  		clr.b	$35(a0)
0001AAC8 303C 00B7                  		move.w	#$B7,d0
0001AACC 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001AAD2                            
0001AAD2                            loc_19F10:
0001AAD2 4A68 0032                  		tst.w	$32(a0)
0001AAD6 6B00 0000                  		bmi.w	loc_19FA6
0001AADA 08A8 0000 0022             		bclr	#0,$22(a0)
0001AAE0 3038 D008                  		move.w	($FFFFD008).w,d0
0001AAE4 9068 0008                  		sub.w	8(a0),d0
0001AAE8 6500                       		bcs.s	loc_19F2E
0001AAEA 08E8 0000 0022             		bset	#0,$22(a0)
0001AAF0                            
0001AAF0                            loc_19F2E:
0001AAF0 323C 002B                  		move.w	#$2B,d1
0001AAF4 343C 0014                  		move.w	#$14,d2
0001AAF8 363C 0014                  		move.w	#$14,d3
0001AAFC 3828 0008                  		move.w	8(a0),d4
0001AB00 4EB9 0001 041C             		jsr	SolidObject
0001AB06 4A44                       		tst.w	d4
0001AB08 6E00                       		bgt.s	loc_19F50
0001AB0A                            
0001AB0A                            loc_19F48:
0001AB0A 4A28 0035                  		tst.b	$35(a0)
0001AB0E 6600                       		bne.s	loc_19F88
0001AB10 6000                       		bra.s	loc_19F96
0001AB12                            ; ===========================================================================
0001AB12                            
0001AB12                            loc_19F50:
0001AB12 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001AB16                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001AB16                            ;		bne.s	loc_19F48
0001AB16                            ;		move.w	#$300,d0		; knock player back (nah)
0001AB16                            ;		btst	#0,$22(a0)
0001AB16                            ;		bne.s	loc_19F6A
0001AB16                            ;		neg.w	d0
0001AB16                            ;
0001AB16                            ;loc_19F6A:
0001AB16                            ;		move.w	d0,($FFFFD010).w
0001AB16 4A28 0035                  		tst.b	$35(a0)
0001AB1A 6600                       		bne.s	loc_19F88
0001AB1C 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001AB22 6400                       		bcc.s	@notoverflown
0001AB24 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001AB2A                            @notoverflown:
0001AB2A 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001AB30 303C 00AC                  		move.w	#$AC,d0
0001AB34 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AB3A                            
0001AB3A                            loc_19F88:
0001AB3A 5328 0035                  		subq.b	#1,$35(a0)
0001AB3E 6700                       		beq.s	loc_19F96
0001AB40 117C 0003 001C             		move.b	#3,$1C(a0)
0001AB46 6000                       		bra.s	loc_19F9C
0001AB48                            ; ===========================================================================
0001AB48                            
0001AB48                            loc_19F96:
0001AB48 117C 0001 001C             		move.b	#1,$1C(a0)
0001AB4E                            
0001AB4E                            loc_19F9C:
0001AB4E 43FA FA78                  		lea	Ani_obj82(pc),a1
0001AB52 4EF9 0000 B09A             		jmp	AnimateSprite
0001AB58                            ; ===========================================================================
0001AB58                            
0001AB58                            loc_19FA6:
0001AB58 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001AB5E 6700                       		beq.s	loc_19FBC
0001AB60 5428 0034                  		addq.b	#2,$34(a0)
0001AB64 317C FFFF 0030             		move.w	#-1,$30(a0)
0001AB6A 4268 0032                  		clr.w	$32(a0)
0001AB6E 4E75                       		rts	
0001AB70                            ; ===========================================================================
0001AB70                            
0001AB70                            loc_19FBC:
0001AB70 117C 0006 0034             		move.b	#6,$34(a0)
0001AB76 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001AB7C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AB82 117C 0014 0016             		move.b	#$14,$16(a0)
0001AB88 4E75                       		rts	
0001AB8A                            ; ===========================================================================
0001AB8A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001AB9A                            ; ===========================================================================
0001AB9A                            
0001AB9A                            loc_19FE6:				; XREF: off_19E80
0001AB9A 70FF                       		moveq	#-1,d0
0001AB9C 3028 0036                  		move.w	$36(a0),d0
0001ABA0 2240                       		movea.l	d0,a1
0001ABA2 4A68 0030                  		tst.w	$30(a0)
0001ABA6 6A00                       		bpl.s	loc_1A000
0001ABA8 4268 0030                  		clr.w	$30(a0)
0001ABAC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001ABB2 6100                       		bsr.s	loc_1A020
0001ABB4                            
0001ABB4                            loc_1A000:
0001ABB4 700F                       		moveq	#$F,d0
0001ABB6 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001ABBA 6600                       		bne.s	loc_1A00A
0001ABBC 6100                       		bsr.s	loc_1A020
0001ABBE                            
0001ABBE                            loc_1A00A:
0001ABBE 4A68 0032                  		tst.w	$32(a0)
0001ABC2 6700                       		beq.s	locret_1A01E
0001ABC4 5528 0034                  		subq.b	#2,$34(a0)
0001ABC8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001ABCE 4268 0032                  		clr.w	$32(a0)
0001ABD2                            
0001ABD2                            locret_1A01E:
0001ABD2 4E75                       		rts	
0001ABD4                            ; ===========================================================================
0001ABD4                            
0001ABD4                            loc_1A020:
0001ABD4 303C 00B1                  		move.w	#$B1,d0
0001ABD8 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play electricity sound
0001ABDE                            ; ===========================================================================
0001ABDE                            
0001ABDE                            loc_1A02A:				; XREF: off_19E80
0001ABDE 117C 0030 0017             		move.b	#$30,$17(a0)
0001ABE4 08E8 0000 0022             		bset	#0,$22(a0)
0001ABEA 4EB9 0000 E026             		jsr	SpeedToPos
0001ABF0 117C 0006 001A             		move.b	#6,$1A(a0)
0001ABF6 0668 0010 0012             		addi.w	#$10,$12(a0)
0001ABFC 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001AC02 6500                       		bcs.s	loc_1A070
0001AC04 317C 059C 000C             		move.w	#$59C,$C(a0)
0001AC0A 5428 0034                  		addq.b	#2,$34(a0)
0001AC0E 117C 0020 0017             		move.b	#$20,$17(a0)
0001AC14 317C 0100 0010             		move.w	#$100,$10(a0)
0001AC1A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001AC20 5438 F742                  		addq.b	#2,($FFFFF742).w
0001AC24                            
0001AC24                            loc_1A070:
0001AC24 6000 0000                  		bra.w	loc_1A166
0001AC28                            ; ===========================================================================
0001AC28                            
0001AC28                            loc_1A074:				; XREF: off_19E80
0001AC28 08E8 0000 0022             		bset	#0,$22(a0)
0001AC2E 117C 0004 001C             		move.b	#4,$1C(a0)
0001AC34 4EB9 0000 E026             		jsr	SpeedToPos
0001AC3A 0668 0010 0012             		addi.w	#$10,$12(a0)
0001AC40 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001AC46 6500                       		bcs.s	loc_1A09A
0001AC48 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001AC4E                            
0001AC4E                            loc_1A09A:
0001AC4E 317C 0400 0010             		move.w	#$400,$10(a0)
0001AC54 3028 0008                  		move.w	8(a0),d0
0001AC58 9078 D008                  		sub.w	($FFFFD008).w,d0
0001AC5C 6A00                       		bpl.s	loc_1A0B4
0001AC5E 317C 0500 0010             		move.w	#$500,$10(a0)
0001AC64 6000 0000                  		bra.w	loc_1A0F2
0001AC68                            ; ===========================================================================
0001AC68                            
0001AC68                            loc_1A0B4:
0001AC68 0440 0070                  		subi.w	#$70,d0
0001AC6C 6500                       		bcs.s	loc_1A0F2
0001AC6E 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AC74 5140                       		subq.w	#8,d0
0001AC76 6500                       		bcs.s	loc_1A0F2
0001AC78 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AC7E 5140                       		subq.w	#8,d0
0001AC80 6500                       		bcs.s	loc_1A0F2
0001AC82 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC88 5140                       		subq.w	#8,d0
0001AC8A 6500                       		bcs.s	loc_1A0F2
0001AC8C 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC92 5140                       		subq.w	#8,d0
0001AC94 6500                       		bcs.s	loc_1A0F2
0001AC96 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AC9C 0440 0038                  		subi.w	#$38,d0
0001ACA0 6500                       		bcs.s	loc_1A0F2
0001ACA2 4268 0010                  		clr.w	$10(a0)
0001ACA6                            
0001ACA6                            loc_1A0F2:
0001ACA6 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001ACAC 6500                       		bcs.s	loc_1A110
0001ACAE 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001ACB4 317C 0240 0010             		move.w	#$240,$10(a0)
0001ACBA 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001ACC0 5428 0034                  		addq.b	#2,$34(a0)
0001ACC4                            
0001ACC4                            loc_1A110:
0001ACC4 6000                       		bra.s	loc_1A15C
0001ACC6                            ; ===========================================================================
0001ACC6                            
0001ACC6                            loc_1A112:				; XREF: off_19E80
0001ACC6 4EB9 0000 E026             		jsr	SpeedToPos
0001ACCC 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001ACD2 6500                       		bcs.s	loc_1A124
0001ACD4 4268 0010                  		clr.w	$10(a0)
0001ACD8                            
0001ACD8                            loc_1A124:
0001ACD8 0668 0034 0012             		addi.w	#$34,$12(a0)
0001ACDE 4A68 0012                  		tst.w	$12(a0)
0001ACE2 6B00                       		bmi.s	loc_1A142
0001ACE4 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001ACEA 6500                       		bcs.s	loc_1A142
0001ACEC 317C 0592 000C             		move.w	#$592,$C(a0)
0001ACF2 4268 0012                  		clr.w	$12(a0)
0001ACF6                            
0001ACF6                            loc_1A142:
0001ACF6 3028 0010                  		move.w	$10(a0),d0
0001ACFA 8068 0012                  		or.w	$12(a0),d0
0001ACFE 6600                       		bne.s	loc_1A15C
0001AD00 5428 0034                  		addq.b	#2,$34(a0)
0001AD04 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AD0A 117C 0001 0021             		move.b	#1,$21(a0)
0001AD10                            
0001AD10                            loc_1A15C:
0001AD10 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001AD14 4EB9 0000 B09A             		jsr	AnimateSprite
0001AD1A                            
0001AD1A                            loc_1A166:
0001AD1A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AD20 6C00                       		bge.s	loc_1A172
0001AD22 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AD26                            
0001AD26                            loc_1A172:
0001AD26 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AD2C 6C00                       		bge.s	locret_1A190
0001AD2E 323C 001B                  		move.w	#$1B,d1
0001AD32 343C 0070                  		move.w	#$70,d2
0001AD36 363C 0071                  		move.w	#$71,d3
0001AD3A 3828 0008                  		move.w	8(a0),d4
0001AD3E 4EF9 0001 041C             		jmp	SolidObject
0001AD44                            ; ===========================================================================
0001AD44                            
0001AD44                            locret_1A190:
0001AD44 4E75                       		rts	
0001AD46                            ; ===========================================================================
0001AD46                            
0001AD46                            loc_1A192:				; XREF: off_19E80
0001AD46 217C 0001 893C 0004        		move.l	#Map_Eggman,4(a0)
0001AD4E 317C 0400 0002             		move.w	#$400,2(a0)
0001AD54 117C 0000 001C             		move.b	#0,$1C(a0)
0001AD5A 08E8 0000 0022             		bset	#0,$22(a0)
0001AD60 4EB9 0000 E026             		jsr	SpeedToPos
0001AD66 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AD6C 6400                       		bcc.s	loc_1A1D0
0001AD6E 317C 0180 0010             		move.w	#$180,$10(a0)
0001AD74 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AD7A 117C 000F 0020             		move.b	#$F,$20(a0)
0001AD80 5428 0034                  		addq.b	#2,$34(a0)
0001AD84                            
0001AD84                            loc_1A1D0:
0001AD84 6000 FF8A                  		bra.w	loc_1A15C
0001AD88                            ; ===========================================================================
0001AD88                            
0001AD88                            loc_1A1D4:				; XREF: off_19E80
0001AD88 08E8 0000 0022             		bset	#0,$22(a0)
0001AD8E 4EB9 0000 E026             		jsr	SpeedToPos
0001AD94 4A68 0030                  		tst.w	$30(a0)
0001AD98 6600                       		bne.s	loc_1A1FC
0001AD9A 4A28 0020                  		tst.b	$20(a0)
0001AD9E 6600                       		bne.s	loc_1A216
0001ADA0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001ADA6 303C 00AC                  		move.w	#$AC,d0
0001ADAA 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001ADB0                            
0001ADB0                            loc_1A1FC:
0001ADB0 5368 0030                  		subq.w	#1,$30(a0)
0001ADB4 6600                       		bne.s	loc_1A216
0001ADB6 4A28 0022                  		tst.b	$22(a0)
0001ADBA 6A00                       		bpl.s	loc_1A210
0001ADBC 317C 0060 0012             		move.w	#$60,$12(a0)
0001ADC2 6000                       		bra.s	loc_1A216
0001ADC4                            ; ===========================================================================
0001ADC4                            
0001ADC4                            loc_1A210:
0001ADC4 117C 000F 0020             		move.b	#$F,$20(a0)
0001ADCA                            
0001ADCA                            loc_1A216:
0001ADCA 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001ADD0 6D00                       		blt.s	loc_1A23A
0001ADD2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001ADD8 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001ADDE 4278 D014                  		clr.w	($FFFFD014).w
0001ADE2 4A68 0012                  		tst.w	$12(a0)
0001ADE6 6A00                       		bpl.s	loc_1A248
0001ADE8 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001ADEE                            
0001ADEE                            loc_1A23A:
0001ADEE 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001ADF4 6D00                       		blt.s	loc_1A248
0001ADF6 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001ADFC                            
0001ADFC                            loc_1A248:
0001ADFC 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AE02 6500                       		bcs.s	loc_1A260
0001AE04 4A28 0001                  		tst.b	1(a0)
0001AE08 6B00                       		bmi.s	loc_1A260
0001AE0A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AE10 6000 FAF0                  		bra.w	Obj85_Delete
0001AE14                            ; ===========================================================================
0001AE14                            
0001AE14                            loc_1A260:
0001AE14 6000 FEFA                  		bra.w	loc_1A15C
0001AE18                            ; ===========================================================================
0001AE18                            
0001AE18                            loc_1A264:				; XREF: Obj85_Index
0001AE18 2268 0034                  		movea.l	$34(a0),a1
0001AE1C 1011                       		move.b	(a1),d0
0001AE1E B010                       		cmp.b	(a0),d0
0001AE20 6600 FAE0                  		bne.w	Obj85_Delete
0001AE24 117C 0007 001C             		move.b	#7,$1C(a0)
0001AE2A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AE30 6C00                       		bge.s	loc_1A280
0001AE32 6000                       		bra.s	loc_1A2A6
0001AE34                            ; ===========================================================================
0001AE34                            
0001AE34                            loc_1A280:
0001AE34 4A69 0010                  		tst.w	$10(a1)
0001AE38 6700                       		beq.s	loc_1A28C
0001AE3A 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AE40                            
0001AE40                            loc_1A28C:
0001AE40 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001AE44 4EB9 0000 B09A             		jsr	AnimateSprite
0001AE4A                            
0001AE4A                            loc_1A296:
0001AE4A 2268 0034                  		movea.l	$34(a0),a1
0001AE4E 3169 0008 0008             		move.w	8(a1),8(a0)
0001AE54 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AE5A                            
0001AE5A                            loc_1A2A6:
0001AE5A 2268 0034                  		movea.l	$34(a0),a1
0001AE5E 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AE64 7003                       		moveq	#3,d0
0001AE66 C028 0022                  		and.b	$22(a0),d0
0001AE6A 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AE70 8128 0001                  		or.b	d0,1(a0)
0001AE74 4EF9 0000 E04C             		jmp	DisplaySprite
0001AE7A                            ; ===========================================================================
0001AE7A                            
0001AE7A                            loc_1A2C6:				; XREF: Obj85_Index
0001AE7A 2268 0034                  		movea.l	$34(a0),a1
0001AE7E 1011                       		move.b	(a1),d0
0001AE80 B010                       		cmp.b	(a0),d0
0001AE82 6600 FA7E                  		bne.w	Obj85_Delete
0001AE86 0CA9 0001 893C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AE8E 6700                       		beq.s	loc_1A2E4
0001AE90 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AE96 60C2                       		bra.s	loc_1A2A6
0001AE98                            ; ===========================================================================
0001AE98                            
0001AE98                            loc_1A2E4:
0001AE98 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE9E 4A29 0021                  		tst.b	$21(a1)
0001AEA2 6F00                       		ble.s	loc_1A312
0001AEA4 117C 0006 001C             		move.b	#6,$1C(a0)
0001AEAA 217C 0001 893C 0004        		move.l	#Map_Eggman,4(a0)
0001AEB2 317C 0400 0002             		move.w	#$400,2(a0)
0001AEB8 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001AEBC 4EB9 0000 B09A             		jsr	AnimateSprite
0001AEC2 6000 FF86                  		bra.w	loc_1A296
0001AEC6                            ; ===========================================================================
0001AEC6                            
0001AEC6                            loc_1A312:
0001AEC6 4A28 0001                  		tst.b	1(a0)
0001AECA 6A00 FA36                  		bpl.w	Obj85_Delete
0001AECE 6100 D584                  		bsr.w	BossDefeated
0001AED2 117C 0002 0018             		move.b	#2,$18(a0)
0001AED8 117C 0000 001C             		move.b	#0,$1C(a0)
0001AEDE 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AEE6 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AEEC 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AEF0 4EB9 0000 B09A             		jsr	AnimateSprite
0001AEF6 6000 FF52                  		bra.w	loc_1A296
0001AEFA                            ; ===========================================================================
0001AEFA                            
0001AEFA                            loc_1A346:				; XREF: Obj85_Index
0001AEFA 08E8 0000 0022             		bset	#0,$22(a0)
0001AF00 2268 0034                  		movea.l	$34(a0),a1
0001AF04 0CA9 0001 893C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AF0C 6700                       		beq.s	loc_1A35E
0001AF0E 6000 FF4A                  		bra.w	loc_1A2A6
0001AF12                            ; ===========================================================================
0001AF12                            
0001AF12                            loc_1A35E:
0001AF12 3169 0008 0008             		move.w	8(a1),8(a0)
0001AF18 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AF1E 4A28 001E                  		tst.b	$1E(a0)
0001AF22 6600                       		bne.s	loc_1A376
0001AF24 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AF2A                            
0001AF2A                            loc_1A376:
0001AF2A 5328 001E                  		subq.b	#1,$1E(a0)
0001AF2E 6E00                       		bgt.s	loc_1A38A
0001AF30 5228 001A                  		addq.b	#1,$1A(a0)
0001AF34 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AF3A 6E00 F9C6                  		bgt.w	Obj85_Delete
0001AF3E                            
0001AF3E                            loc_1A38A:
0001AF3E 6000 FF0A                  		bra.w	loc_1A296
0001AF42                            ; ===========================================================================
0001AF42                            
0001AF42                            loc_1A38E:				; XREF: Obj85_Index
0001AF42 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AF48 3038 D008                  		move.w	($FFFFD008).w,d0
0001AF4C 9068 0008                  		sub.w	8(a0),d0
0001AF50 6500                       		bcs.s	loc_1A3A6
0001AF52 4A28 0001                  		tst.b	1(a0)
0001AF56 6A00 F9AA                  		bpl.w	Obj85_Delete
0001AF5A                            
0001AF5A                            loc_1A3A6:
0001AF5A 4EF9 0000 E04C             		jmp	DisplaySprite
0001AF60                            ; ===========================================================================
0001AF60                            
0001AF60                            loc_1A3AC:				; XREF: Obj85_Index
0001AF60 117C 0000 001A             		move.b	#0,$1A(a0)
0001AF66 08E8 0000 0022             		bset	#0,$22(a0)
0001AF6C 2268 0034                  		movea.l	$34(a0),a1
0001AF70 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AF76 6600                       		bne.s	loc_1A3D0
0001AF78 0CA9 0001 893C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AF80 6700 F980                  		beq.w	Obj85_Delete
0001AF84                            
0001AF84                            loc_1A3D0:
0001AF84 6000 FED4                  		bra.w	loc_1A2A6
0001AF88                            ; ===========================================================================
0001AF88                            Ani_obj85:
0001AF88                            	include "_anim\obj85.asm"
0001AF88                            ; ---------------------------------------------------------------------------
0001AF88                            ; Animation script - Eggman (FZ)
0001AF88                            ; ---------------------------------------------------------------------------
0001AF88 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AF8A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AF8E                            		even
0001AF8E                            		even
0001AF8E                            
0001AF8E                            Map_Eggman2:
0001AF8E                            	include "_maps\Eggman2.asm"
0001AF8E                            ; ---------------------------------------------------------------------------
0001AF8E                            ; Sprite mappings - Eggman (FZ)
0001AF8E                            ; ---------------------------------------------------------------------------
0001AF8E 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AF90 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AF92 06                         byte_1A3DE:	dc.b 6
0001AF93 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AF98 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AF9D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AFA2 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AFA7 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AFAC 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AFB1 06                         byte_1A3FD:	dc.b 6
0001AFB2 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AFB7 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AFBC EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AFC1 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AFC6 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AFCB 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AFD0                            		even
0001AFD0                            		even
0001AFD0                            
0001AFD0                            Map_FZBoss:
0001AFD0                            	include "_maps\FZ boss.asm"
0001AFD0                            ; ---------------------------------------------------------------------------
0001AFD0                            ; Sprite mappings - boss (FZ)
0001AFD0                            ; ---------------------------------------------------------------------------
0001AFD0 0000                       		dc.w byte_1A422-Map_FZBoss
0001AFD2 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AFD4 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AFD6 02                         byte_1A422:	dc.b 2
0001AFD7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AFDC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AFE1 03                         byte_1A42D:	dc.b 3
0001AFE2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AFE7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AFEC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AFF1 02                         byte_1A43D:	dc.b 2
0001AFF2 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AFF7 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AFFC                            		even
0001AFFC                            		even
0001AFFC                            
0001AFFC                            ; ===========================================================================
0001AFFC                            
0001AFFC                            Obj84_Delete:
0001AFFC 4EF9 0000 E088             		jmp	DeleteObject
0001B002                            ; ===========================================================================
0001B002                            ; ---------------------------------------------------------------------------
0001B002                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B002                            ; ---------------------------------------------------------------------------
0001B002                            
0001B002                            Obj84:					; XREF: Obj_Index
0001B002 7000                       		moveq	#0,d0
0001B004 1028 0024                  		move.b	$24(a0),d0
0001B008 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B00C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B010                            ; ===========================================================================
0001B010 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B012 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B014 0000                       		dc.w loc_1A57E-Obj84_Index
0001B016                            
0001B016 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B01A 2550 0620                  		dc.w $2550, $620
0001B01E 2490 04C0                  		dc.w $2490, $4C0
0001B022 2510 04C0                  		dc.w $2510, $4C0
0001B026                            ; ===========================================================================
0001B026                            
0001B026                            Obj84_Main:				; XREF: Obj84_Index
0001B026 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B02A 7000                       		moveq	#0,d0
0001B02C 1028 0028                  		move.b	$28(a0),d0
0001B030 D040                       		add.w	d0,d0
0001B032 D2C0                       		adda.w	d0,a1
0001B034 117C 0004 0001             		move.b	#4,1(a0)
0001B03A 08E8 0007 0001             		bset	#7,1(a0)
0001B040 08E8 0004 0001             		bset	#4,1(a0)
0001B046 317C 0300 0002             		move.w	#$300,2(a0)
0001B04C 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B054 3159 0008                  		move.w	(a1)+,8(a0)
0001B058 3151 000C                  		move.w	(a1),$C(a0)
0001B05C 3159 0038                  		move.w	(a1)+,$38(a0)
0001B060 117C 0020 0016             		move.b	#$20,$16(a0)
0001B066 117C 0060 0017             		move.b	#$60,$17(a0)
0001B06C 117C 0020 0019             		move.b	#$20,$19(a0)
0001B072 117C 0060 0016             		move.b	#$60,$16(a0)
0001B078 117C 0003 0018             		move.b	#3,$18(a0)
0001B07E 5428 0024                  		addq.b	#2,$24(a0)
0001B082                            
0001B082                            loc_1A4CE:				; XREF: Obj84_Index
0001B082 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B088 6F00                       		ble.s	loc_1A4DC
0001B08A 08E8 0001 0001             		bset	#1,1(a0)
0001B090                            
0001B090                            loc_1A4DC:
0001B090 42A8 003C                  		clr.l	$3C(a0)
0001B094 4A28 0029                  		tst.b	$29(a0)
0001B098 6700                       		beq.s	loc_1A4EA
0001B09A 5428 0024                  		addq.b	#2,$24(a0)
0001B09E                            
0001B09E                            loc_1A4EA:
0001B09E 2028 003C                  		move.l	$3C(a0),d0
0001B0A2 2228 0038                  		move.l	$38(a0),d1
0001B0A6 D280                       		add.l	d0,d1
0001B0A8 4841                       		swap	d1
0001B0AA 3141 000C                  		move.w	d1,$C(a0)
0001B0AE 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B0B4 6600                       		bne.s	loc_1A524
0001B0B6 4A68 0030                  		tst.w	$30(a0)
0001B0BA 6A00                       		bpl.s	loc_1A524
0001B0BC 70F6                       		moveq	#-$A,d0
0001B0BE 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B0C4 6F00                       		ble.s	loc_1A514
0001B0C6 700E                       		moveq	#$E,d0
0001B0C8                            
0001B0C8                            loc_1A514:
0001B0C8 D240                       		add.w	d0,d1
0001B0CA 2268 0034                  		movea.l	$34(a0),a1
0001B0CE 3341 000C                  		move.w	d1,$C(a1)
0001B0D2 3368 0008 0008             		move.w	8(a0),8(a1)
0001B0D8                            
0001B0D8                            loc_1A524:
0001B0D8 323C 002B                  		move.w	#$2B,d1
0001B0DC 343C 0060                  		move.w	#$60,d2
0001B0E0 363C 0061                  		move.w	#$61,d3
0001B0E4 3828 0008                  		move.w	8(a0),d4
0001B0E8 4EB9 0001 041C             		jsr	SolidObject
0001B0EE 7000                       		moveq	#0,d0
0001B0F0 3228 003C                  		move.w	$3C(a0),d1
0001B0F4 6A00                       		bpl.s	loc_1A550
0001B0F6 4441                       		neg.w	d1
0001B0F8 5141                       		subq.w	#8,d1
0001B0FA 6500                       		bcs.s	loc_1A55C
0001B0FC 5200                       		addq.b	#1,d0
0001B0FE E841                       		asr.w	#4,d1
0001B100 D041                       		add.w	d1,d0
0001B102 6000                       		bra.s	loc_1A55C
0001B104                            ; ===========================================================================
0001B104                            
0001B104                            loc_1A550:
0001B104 0441 0027                  		subi.w	#$27,d1
0001B108 6500                       		bcs.s	loc_1A55C
0001B10A 5200                       		addq.b	#1,d0
0001B10C E841                       		asr.w	#4,d1
0001B10E D041                       		add.w	d1,d0
0001B110                            
0001B110                            loc_1A55C:
0001B110 1140 001A                  		move.b	d0,$1A(a0)
0001B114 3038 D008                  		move.w	($FFFFD008).w,d0
0001B118 9068 0008                  		sub.w	8(a0),d0
0001B11C 6B00                       		bmi.s	loc_1A578
0001B11E 0440 0140                  		subi.w	#$140,d0
0001B122 6B00                       		bmi.s	loc_1A578
0001B124 4A28 0001                  		tst.b	1(a0)
0001B128 6A00 FED2                  		bpl.w	Obj84_Delete
0001B12C                            
0001B12C                            loc_1A578:
0001B12C 4EF9 0000 E04C             		jmp	DisplaySprite
0001B132                            ; ===========================================================================
0001B132                            
0001B132                            loc_1A57E:				; XREF: Obj84_Index
0001B132 7000                       		moveq	#0,d0
0001B134 1028 0028                  		move.b	$28(a0),d0
0001B138 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B13C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B140 6000 FF5C                  		bra.w	loc_1A4EA
0001B144                            ; ===========================================================================
0001B144 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B146 0000                       		dc.w loc_1A598-off_1A590
0001B148 0000                       		dc.w loc_1A604-off_1A590
0001B14A 0000                       		dc.w loc_1A604-off_1A590
0001B14C                            ; ===========================================================================
0001B14C                            
0001B14C                            loc_1A598:				; XREF: off_1A590
0001B14C 4A28 0029                  		tst.b	$29(a0)
0001B150 6600                       		bne.s	loc_1A5D4
0001B152 2268 0034                  		movea.l	$34(a0),a1
0001B156 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B15C 6600                       		bne.s	loc_1A5B4
0001B15E 6100 D2F4                  		bsr.w	BossDefeated
0001B162 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B16A                            
0001B16A                            loc_1A5B4:
0001B16A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B172 6400                       		bcc.s	locret_1A602
0001B174 42A8 003C                  		clr.l	$3C(a0)
0001B178 2268 0034                  		movea.l	$34(a0),a1
0001B17C 5369 0032                  		subq.w	#1,$32(a1)
0001B180 4269 0030                  		clr.w	$30(a1)
0001B184 5528 0024                  		subq.b	#2,$24(a0)
0001B188 4E75                       		rts	
0001B18A                            ; ===========================================================================
0001B18A                            
0001B18A                            loc_1A5D4:
0001B18A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B190 6C00                       		bge.s	loc_1A5E4
0001B192 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B19A                            
0001B19A                            loc_1A5E4:
0001B19A 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B1A2 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B1A8 6E00                       		bgt.s	locret_1A602
0001B1AA 4268 003E                  		clr.w	$3E(a0)
0001B1AE 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B1B4 4228 0029                  		clr.b	$29(a0)
0001B1B8                            
0001B1B8                            locret_1A602:
0001B1B8 4E75                       		rts	
0001B1BA                            ; ===========================================================================
0001B1BA                            
0001B1BA                            loc_1A604:				; XREF: off_1A590
0001B1BA 08E8 0001 0001             		bset	#1,1(a0)
0001B1C0 4A28 0029                  		tst.b	$29(a0)
0001B1C4 6600                       		bne.s	loc_1A646
0001B1C6 2268 0034                  		movea.l	$34(a0),a1
0001B1CA 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B1D0 6600                       		bne.s	loc_1A626
0001B1D2 6100 D280                  		bsr.w	BossDefeated
0001B1D6 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B1DE                            
0001B1DE                            loc_1A626:
0001B1DE 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B1E6 6400                       		bcc.s	locret_1A674
0001B1E8 42A8 003C                  		clr.l	$3C(a0)
0001B1EC 2268 0034                  		movea.l	$34(a0),a1
0001B1F0 5369 0032                  		subq.w	#1,$32(a1)
0001B1F4 4269 0030                  		clr.w	$30(a1)
0001B1F8 5528 0024                  		subq.b	#2,$24(a0)
0001B1FC 4E75                       		rts	
0001B1FE                            ; ===========================================================================
0001B1FE                            
0001B1FE                            loc_1A646:
0001B1FE 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B204 6D00                       		blt.s	loc_1A656
0001B206 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B20E                            
0001B20E                            loc_1A656:
0001B20E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B216 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B21C 6D00                       		blt.s	locret_1A674
0001B21E 4268 003E                  		clr.w	$3E(a0)
0001B222 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B228 4228 0029                  		clr.b	$29(a0)
0001B22C                            
0001B22C                            locret_1A674:
0001B22C 4E75                       		rts	
0001B22E                            ; ===========================================================================
0001B22E                            ; ---------------------------------------------------------------------------
0001B22E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B22E                            ; ---------------------------------------------------------------------------
0001B22E                            Map_obj84:
0001B22E                            	include "_maps\obj84.asm"
0001B22E                            ; ---------------------------------------------------------------------------
0001B22E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B22E                            ; ---------------------------------------------------------------------------
0001B22E 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B232 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B236 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B23A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B23E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B242 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B246 06                         byte_1A68E:	dc.b 6
0001B247 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B24C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B251 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B256 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B25B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B260 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B265 08                         byte_1A6AD:	dc.b 8
0001B266 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B26B A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B270 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B275 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B27A B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B27F B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B284 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B289 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B28E 0A                         byte_1A6D6:	dc.b $A
0001B28F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B294 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B299 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B29E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B2A3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B2A8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B2AD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B2B2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B2B7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B2BC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B2C1 0C                         byte_1A709:	dc.b $C
0001B2C2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B2C7 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B2CC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B2D1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B2D6 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B2DB B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B2E0 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B2E5 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B2EA F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B2EF F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B2F4 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B2F9 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B2FE 0D                         byte_1A746:	dc.b $D
0001B2FF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B304 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B309 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B30E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B313 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B318 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B31D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B322 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B327 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B32C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B331 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B336 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B33B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B340 0E                         byte_1A788:	dc.b $E
0001B341 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B346 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B34B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B350 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B355 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B35A B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B35F D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B364 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B369 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B36E F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B373 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B378 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B37D 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B382 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B387 02                         byte_1A7CF:	dc.b 2
0001B388 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B38D 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B392                            		even
0001B392                            		even
0001B392                            
0001B392                            ; ===========================================================================
0001B392                            ; ---------------------------------------------------------------------------
0001B392                            ; Object 86 - energy balls (FZ)
0001B392                            ; ---------------------------------------------------------------------------
0001B392                            
0001B392                            Obj86:					; XREF: Obj_Index
0001B392 7000                       		moveq	#0,d0
0001B394 1028 0024                  		move.b	$24(a0),d0
0001B398 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B39C 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B3A0                            ; ===========================================================================
0001B3A0 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B3A2 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B3A4 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B3A6 0000                       		dc.w loc_1A962-Obj86_Index
0001B3A8 0000                       		dc.w loc_1A982-Obj86_Index
0001B3AA                            ; ===========================================================================
0001B3AA                            
0001B3AA                            Obj86_Main:				; XREF: Obj86_Index
0001B3AA 317C 2588 0008             		move.w	#$2588,8(a0)
0001B3B0 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B3B6 317C 0300 0002             		move.w	#$300,2(a0)
0001B3BC 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B3C4 117C 0000 001C             		move.b	#0,$1C(a0)
0001B3CA 117C 0003 0018             		move.b	#3,$18(a0)
0001B3D0 117C 0008 0017             		move.b	#8,$17(a0)
0001B3D6 117C 0008 0016             		move.b	#8,$16(a0)
0001B3DC 117C 0004 0001             		move.b	#4,1(a0)
0001B3E2 08E8 0007 0001             		bset	#7,1(a0)
0001B3E8 5428 0024                  		addq.b	#2,$24(a0)
0001B3EC                            
0001B3EC                            Obj86_Generator:			; XREF: Obj86_Index
0001B3EC 2268 0034                  		movea.l	$34(a0),a1
0001B3F0 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B3F6 6600                       		bne.s	loc_1A850
0001B3F8 10BC 003F                  		move.b	#$3F,(a0)
0001B3FC 117C 0000 0024             		move.b	#0,$24(a0)
0001B402 4EF9 0000 E04C             		jmp	DisplaySprite
0001B408                            ; ===========================================================================
0001B408                            
0001B408                            loc_1A850:
0001B408 117C 0000 001C             		move.b	#0,$1C(a0)
0001B40E 4A28 0029                  		tst.b	$29(a0)
0001B412 6700                       		beq.s	loc_1A86C
0001B414 5428 0024                  		addq.b	#2,$24(a0)
0001B418 117C 0001 001C             		move.b	#1,$1C(a0)
0001B41E 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B424                            
0001B424                            loc_1A86C:
0001B424 323C 0013                  		move.w	#$13,d1
0001B428 343C 0008                  		move.w	#8,d2
0001B42C 363C 0011                  		move.w	#$11,d3
0001B430 3828 0008                  		move.w	8(a0),d4
0001B434 4EB9 0001 041C             		jsr	SolidObject
0001B43A 3038 D008                  		move.w	($FFFFD008).w,d0
0001B43E 9068 0008                  		sub.w	8(a0),d0
0001B442 6B00                       		bmi.s	loc_1A89A
0001B444 0440 0140                  		subi.w	#$140,d0
0001B448 6B00                       		bmi.s	loc_1A89A
0001B44A 4A28 0001                  		tst.b	1(a0)
0001B44E 6A00 FBAC                  		bpl.w	Obj84_Delete
0001B452                            
0001B452                            loc_1A89A:
0001B452 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B456 4EB9 0000 B09A             		jsr	AnimateSprite
0001B45C 4EF9 0000 E04C             		jmp	DisplaySprite
0001B462                            ; ===========================================================================
0001B462                            
0001B462                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B462 4A28 0029                  		tst.b	$29(a0)
0001B466 6700 0000                  		beq.w	loc_1A954
0001B46A 4228 0029                  		clr.b	$29(a0)
0001B46E D068 0030                  		add.w	$30(a0),d0
0001B472 0240 001E                  		andi.w	#$1E,d0
0001B476 D4C0                       		adda.w	d0,a2
0001B478 5868 0030                  		addq.w	#4,$30(a0)
0001B47C 4268 0032                  		clr.w	$32(a0)
0001B480 7403                       		moveq	#3,d2
0001B482                            
0001B482                            Obj86_Loop:
0001B482 4EB9 0000 E4E8             		jsr	SingleObjLoad2
0001B488 6600 0000                  		bne.w	loc_1A954
0001B48C 12BC 0086                  		move.b	#$86,(a1)
0001B490 3368 0008 0008             		move.w	8(a0),8(a1)
0001B496 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B49C 137C 0008 0024             		move.b	#8,$24(a1)
0001B4A2 337C 2300 0002             		move.w	#$2300,2(a1)
0001B4A8 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B4B0 137C 000C 0016             		move.b	#$C,$16(a1)
0001B4B6 137C 000C 0017             		move.b	#$C,$17(a1)
0001B4BC 137C 0000 0020             		move.b	#0,$20(a1)
0001B4C2 137C 0003 0018             		move.b	#3,$18(a1)
0001B4C8 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B4CE 137C 0004 0001             		move.b	#4,1(a1)
0001B4D4 08E9 0007 0001             		bset	#7,1(a1)
0001B4DA 2348 0034                  		move.l	a0,$34(a1)
0001B4DE 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B4E4 3228 0032                  		move.w	$32(a0),d1
0001B4E8 C3FC FFB1                  		muls.w	#-$4F,d1
0001B4EC 0641 2578                  		addi.w	#$2578,d1
0001B4F0 0240 001F                  		andi.w	#$1F,d0
0001B4F4 0440 0010                  		subi.w	#$10,d0
0001B4F8 D041                       		add.w	d1,d0
0001B4FA 3340 0030                  		move.w	d0,$30(a1)
0001B4FE 5268 0032                  		addq.w	#1,$32(a0)
0001B502 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B508 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B50C                            
0001B50C                            loc_1A954:
0001B50C 4A68 0032                  		tst.w	$32(a0)
0001B510 6600                       		bne.s	loc_1A95E
0001B512 5428 0024                  		addq.b	#2,$24(a0)
0001B516                            
0001B516                            loc_1A95E:
0001B516 6000 FF0C                  		bra.w	loc_1A86C
0001B51A                            ; ===========================================================================
0001B51A                            
0001B51A                            loc_1A962:				; XREF: Obj86_Index
0001B51A 117C 0002 001C             		move.b	#2,$1C(a0)
0001B520 4A68 0038                  		tst.w	$38(a0)
0001B524 6600                       		bne.s	loc_1A97E
0001B526 117C 0002 0024             		move.b	#2,$24(a0)
0001B52C 2268 0034                  		movea.l	$34(a0),a1
0001B530 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B536                            
0001B536                            loc_1A97E:
0001B536 6000 FEEC                  		bra.w	loc_1A86C
0001B53A                            ; ===========================================================================
0001B53A                            
0001B53A                            loc_1A982:				; XREF: Obj86_Index
0001B53A 7000                       		moveq	#0,d0
0001B53C 1028 0025                  		move.b	$25(a0),d0
0001B540 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B544 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001B548                            ; ===========================================================================
0001B548 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B54A 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B54C 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001B54E 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001B550 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001B552 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001B554 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B556 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001B558 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001B55A 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001B55C                            ; ===========================================================================
0001B55C                            
0001B55C                            loc_1A9A6:				; XREF: Obj86_Index2
0001B55C 3028 0030                  		move.w	$30(a0),d0
0001B560 9068 0008                  		sub.w	8(a0),d0
0001B564 E940                       		asl.w	#4,d0
0001B566 3140 0010                  		move.w	d0,$10(a0)
0001B56A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B570 5428 0025                  		addq.b	#2,$25(a0)
0001B574                            
0001B574                            Obj86_Ball_Animate:
0001B574 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B578 4EB9 0000 B09A             		jsr	AnimateSprite
0001B57E 4EF9 0000 E04C             		jmp	DisplaySprite
0001B584                            ; ===========================================================================
0001B584                            
0001B584                            loc_1A9C0:				; XREF: Obj86_Index2
0001B584 4A68 0010                  		tst.w	$10(a0)
0001B588 6700                       		beq.s	loc_1A9E6
0001B58A 4EB9 0000 E026             		jsr	SpeedToPos
0001B590 3028 0008                  		move.w	8(a0),d0
0001B594 9068 0030                  		sub.w	$30(a0),d0
0001B598 6400                       		bcc.s	loc_1A9E6
0001B59A 4268 0010                  		clr.w	$10(a0)
0001B59E D168 0008                  		add.w	d0,8(a0)
0001B5A2 2268 0034                  		movea.l	$34(a0),a1
0001B5A6 5369 0032                  		subq.w	#1,$32(a1)
0001B5AA                            
0001B5AA                            loc_1A9E6:
0001B5AA 117C 0000 001C             		move.b	#0,$1C(a0)
0001B5B0 5368 0028                  		subq.w	#1,$28(a0)
0001B5B4 6600                       		bne.s	locret_1AA1C
0001B5B6 4EB8 2D0E                  		jsr	RandomNumber
0001B5BA 0240 000E                  		and.w	#7*2,d0
0001B5BE 5840                       		addq.w	#2*2,d0
0001B5C0 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001B5C4 4840                       		swap	d0
0001B5C6 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001B5CA 117C 0001 001C             		move.b	#1,$1C(a0)
0001B5D0 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B5D6 3038 D008                  		move.w	($FFFFD008).w,d0
0001B5DA 9068 0008                  		sub.w	8(a0),d0
0001B5DE 3140 0010                  		move.w	d0,$10(a0)
0001B5E2 317C 0140 0012             		move.w	#$140,$12(a0)
0001B5E8                            
0001B5E8                            locret_1AA1C:
0001B5E8 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001B5EC                            ; ===========================================================================
0001B5EC                            
0001B5EC                            Obj86_Ball_Explode:
0001B5EC 5328 0028                  		subq.b	#1,$28(a0)
0001B5F0 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001B5F4 2268 0034                  		movea.l	$34(a0),a1
0001B5F8 5369 0038                  		subq.w	#1,$38(a1)
0001B5FC 2248                       		move.l	a0,a1
0001B5FE 7400                       		moveq	#0,d2	; GMZ
0001B600 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001B602 6000                       		bra.s	@start
0001B604                            @loop:
0001B604 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001B60A 6600                       		bne.s	@exit
0001B60C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B612 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B618                            @start:
0001B618 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B61C 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001B622 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001B626 5802                       		addq.b	#4,d2
0001B628 51C9 FFDA                  		dbf	d1,@loop
0001B62C                            @exit:
0001B62C 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001B630                            ; ===========================================================================
0001B630                            
0001B630                            Obj86_Ball_Sine:
0001B630 1028 0028                  		move.b	$28(a0),d0
0001B634 5828 0028                  		addq.b	#4,$28(a0)
0001B638 4EB8 2D34                  		jsr	CalcSine
0001B63C C1FC 0002                  		muls.w	#2,d0
0001B640 3140 0010                  		move.w	d0,$10(a0)
0001B644                            
0001B644 1028 0029                  		move.b	$29(a0),d0
0001B648 5828 0029                  		addq.b	#4,$29(a0)
0001B64C 4EB8 2D34                  		jsr	CalcSine
0001B650 4A40                       		tst.w	d0
0001B652 6B00                       		bmi.s	@upwards
0001B654 E548                       		lsl.w	#2,d0		; x4 go down faster
0001B656                            @upwards:
0001B656 3140 0012                  		move.w	d0,$12(a0)
0001B65A 6000 0000                  		bra.w	loc_1AA1E
0001B65E                            ; ===========================================================================
0001B65E                            
0001B65E                            Obj86_Ball_Homing:
0001B65E 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001B664 6400                       		bhs.s	@homer
0001B666 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001B66C 6400                       		bhs.s	Obj86_Ball_Vanish
0001B66E 5328 0028                  		subq.b	#1,$28(a0)
0001B672 6400                       		bcc.s	@nomorehoming
0001B674 3038 D008                  		move.w	($FFFFD008).w,d0
0001B678 9068 0008                  		sub.w	8(a0),d0
0001B67C D168 0010                  		add.w	d0,$10(a0)
0001B680 D168 0010                  		add.w	d0,$10(a0)
0001B684                            @nomorehoming:
0001B684 6000 0000                  		bra.w	loc_1AA1E
0001B688                            @homer:
0001B688 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001B68E 60F4                       		bra.s	@nomorehoming	; next frame ig
0001B690                            ; ===========================================================================
0001B690                            
0001B690                            Obj86_Ball_Speed:
0001B690 4268 0010                  		clr.w	$10(a0)
0001B694 7000                       		moveq	#0,d0
0001B696 1028 0028                  		move.b	$28(a0),d0
0001B69A E448                       		lsr.w	#2,d0
0001B69C D168 0012                  		add.w	d0,$12(a0)
0001B6A0 1028 0029                  		move.b	$29(a0),d0
0001B6A4 D128 0028                  		add.b	d0,$28(a0)
0001B6A8 6000 0000                  		bra.w	loc_1AA1E
0001B6AC                            ; ===========================================================================
0001B6AC                            
0001B6AC                            Obj86_Ball_Vanish:
0001B6AC 303C 00E1                  		move.w	#$E1,d0
0001B6B0 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001B6B6 6000 0000                  		bra.w	loc_1AA34
0001B6BA                            ; ===========================================================================
0001B6BA                            
0001B6BA                            Obj86_Ball_Static:
0001B6BA 4268 0010                  		clr.w	$10(a0)
0001B6BE 7000                       		moveq	#0,d0
0001B6C0 7200                       		moveq	#0,d1
0001B6C2 1028 0028                  		move.b	$28(a0),d0
0001B6C6 1228 0029                  		move.b	$29(a0),d1
0001B6CA D041                       		add.w	d1,d0
0001B6CC 3140 0012                  		move.w	d0,$12(a0)
0001B6D0 6000 0000                  		bra.w	loc_1AA1E
0001B6D4                            ; ===========================================================================
0001B6D4                            
0001B6D4                            Obj86_Ball_Standard:
0001B6D4                            loc_1AA1E:
0001B6D4 4EB9 0000 E026             		jsr	SpeedToPos
0001B6DA 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B6E0 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001B6E4                            loc_1AA34:
0001B6E4 2268 0034                  		movea.l	$34(a0),a1
0001B6E8 5369 0038                  		subq.w	#1,$38(a1)
0001B6EC 6000 F90E                  		bra.w	Obj84_Delete
0001B6F0                            ; ===========================================================================
0001B6F0                            Ani_obj86:
0001B6F0                            	include "_anim\obj86.asm"
0001B6F0                            ; ---------------------------------------------------------------------------
0001B6F0                            ; Animation script - energy ball launcher (FZ)
0001B6F0                            ; ---------------------------------------------------------------------------
0001B6F0 0000                       		dc.w byte_1AA46-Ani_obj86
0001B6F2 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B6F4 0000                       		dc.w byte_1AA50-Ani_obj86
0001B6F6 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B6FA 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B700 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B706                            		even
0001B706                            		even
0001B706                            
0001B706                            ; ---------------------------------------------------------------------------
0001B706                            ; Sprite mappings - energy ball	launcher (FZ)
0001B706                            ; ---------------------------------------------------------------------------
0001B706                            Map_obj86:
0001B706                            	include "_maps\obj86.asm"
0001B706                            ; ---------------------------------------------------------------------------
0001B706                            ; Sprite mappings - energy ball	launcher (FZ)
0001B706                            ; ---------------------------------------------------------------------------
0001B706 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B70A 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B70E 01                         byte_1AA5E:	dc.b 1
0001B70F F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B714 01                         byte_1AA64:	dc.b 1
0001B715 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B71A 01                         byte_1AA6A:	dc.b 1
0001B71B F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B720 01                         byte_1AA70:	dc.b 1
0001B721 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B726                            		even
0001B726                            		even
0001B726                            
0001B726                            Ani_obj86a:
0001B726                            	include "_anim\obj86a.asm"
0001B726                            ; ---------------------------------------------------------------------------
0001B726                            ; Animation script - energy balls (FZ)
0001B726                            ; ---------------------------------------------------------------------------
0001B726 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B728 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B72A 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B739 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B748 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B74C 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B756                            		even
0001B756                            		even
0001B756                            
0001B756                            ; ---------------------------------------------------------------------------
0001B756                            ; Sprite mappings - energy balls (FZ)
0001B756                            ; ---------------------------------------------------------------------------
0001B756                            Map_obj86a:
0001B756                            	include "_maps\obj86a.asm"
0001B756                            ; ---------------------------------------------------------------------------
0001B756                            ; Sprite mappings - energy balls (FZ)
0001B756                            ; ---------------------------------------------------------------------------
0001B756 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B75A 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B75E 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B762 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B766 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B76A 0000                       		dc.w byte_1AB20-Map_obj86a
0001B76C 02                         byte_1AABC:	dc.b 2
0001B76D F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B772 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B777 02                         byte_1AAC7:	dc.b 2
0001B778 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B77D F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B782 02                         byte_1AAD2:	dc.b 2
0001B783 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B788 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B78D 02                         byte_1AADD:	dc.b 2
0001B78E F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B793 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B798 02                         byte_1AAE8:	dc.b 2
0001B799 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B79E 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B7A3 02                         byte_1AAF3:	dc.b 2
0001B7A4 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B7A9 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B7AE 01                         byte_1AAFE:	dc.b 1
0001B7AF F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B7B4 01                         byte_1AB04:	dc.b 1
0001B7B5 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B7BA 02                         byte_1AB0A:	dc.b 2
0001B7BB F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B7C0 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B7C5 02                         byte_1AB15:	dc.b 2
0001B7C6 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B7CB F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B7D0 00                         byte_1AB20:	dc.b 0
0001B7D2 00                         		even
0001B7D2 00                         		even
0001B7D2                            
0001B7D2                            ; ===========================================================================
0001B7D2                            ; ---------------------------------------------------------------------------
0001B7D2                            ; Object 3E - prison capsule
0001B7D2                            ; ---------------------------------------------------------------------------
0001B7D2                            
0001B7D2                            Obj3E:					; XREF: Obj_Index
0001B7D2 7000                       		moveq	#0,d0
0001B7D4 1028 0024                  		move.b	$24(a0),d0
0001B7D8 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B7DC 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B7E0 3028 0008                  		move.w	8(a0),d0
0001B7E4 0240 FF80                  		andi.w	#$FF80,d0
0001B7E8 3238 F700                  		move.w	($FFFFF700).w,d1
0001B7EC 0441 0080                  		subi.w	#$80,d1
0001B7F0 0241 FF80                  		andi.w	#$FF80,d1
0001B7F4 9041                       		sub.w	d1,d0
0001B7F6 0C40 0280                  		cmpi.w	#$280,d0
0001B7FA 6200                       		bhi.s	Obj3E_Delete
0001B7FC 4EF9 0000 E04C             		jmp	DisplaySprite
0001B802                            ; ===========================================================================
0001B802                            
0001B802                            Obj3E_Delete:
0001B802 4EF9 0000 E088             		jmp	DeleteObject
0001B808                            ; ===========================================================================
0001B808 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B80A 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B80C 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B80E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B810 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B812 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B814 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B816 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B818                            
0001B818 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B81C 040C 0501                  		dc.b 4,	$C, 5, 1
0001B820 0610 0403                  		dc.b 6,	$10, 4,	3
0001B824 0810 0305                  		dc.b 8,	$10, 3,	5
0001B828                            ; ===========================================================================
0001B828                            
0001B828                            Obj3E_Main:				; XREF: Obj3E_Index
0001B828 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B830 317C 049D 0002             		move.w	#$49D,2(a0)
0001B836 117C 0004 0001             		move.b	#4,1(a0)
0001B83C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B842 7000                       		moveq	#0,d0
0001B844 1028 0028                  		move.b	$28(a0),d0
0001B848 E548                       		lsl.w	#2,d0
0001B84A 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B84E 1159 0024                  		move.b	(a1)+,$24(a0)
0001B852 1159 0019                  		move.b	(a1)+,$19(a0)
0001B856 1159 0018                  		move.b	(a1)+,$18(a0)
0001B85A 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B85E 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B862 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B864 117C 0006 0020             		move.b	#6,$20(a0)
0001B86A 117C 0008 0021             		move.b	#8,$21(a0)
0001B870                            
0001B870                            Obj3E_Not02:
0001B870 4E75                       		rts	
0001B872                            ; ===========================================================================
0001B872                            
0001B872                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B872 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B878 6700                       		beq.s	Obj3E_ChkOpened
0001B87A 323C 002B                  		move.w	#$2B,d1
0001B87E 343C 0018                  		move.w	#$18,d2
0001B882 363C 0018                  		move.w	#$18,d3
0001B886 3828 0008                  		move.w	8(a0),d4
0001B88A 4EF9 0001 041C             		jmp	SolidObject
0001B890                            ; ===========================================================================
0001B890                            
0001B890                            Obj3E_ChkOpened:
0001B890 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B894 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B896 4228 0025                  		clr.b	$25(a0)
0001B89A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B8A0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B8A6                            
0001B8A6                            Obj3E_DoOpen:
0001B8A6 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B8AC 4E75                       		rts	
0001B8AE                            ; ===========================================================================
0001B8AE                            
0001B8AE                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B8AE 323C 0017                  		move.w	#$17,d1
0001B8B2 343C 0008                  		move.w	#8,d2
0001B8B6 363C 0008                  		move.w	#8,d3
0001B8BA 3828 0008                  		move.w	8(a0),d4
0001B8BE 4EB9 0001 041C             		jsr	SolidObject
0001B8C4 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B8CA 4EB9 0000 B09A             		jsr	AnimateSprite
0001B8D0 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B8D6 4A28 0025                  		tst.b	$25(a0)
0001B8DA 6700                       		beq.s	locret_1AC60
0001B8DC 5068 000C                  		addq.w	#8,$C(a0)
0001B8E0 117C 000A 0024             		move.b	#$A,$24(a0)
0001B8E6 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B8EC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B8F0 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B8F4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B8FA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B900 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B902 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B908 6000                       		bra.s	Obj3E_ContinueCode
0001B90A                            
0001B90A                            Obj3E_MoveLeft:
0001B90A 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B910                            
0001B910                            Obj3E_ContinueCode:
0001B910 4228 0025                  		clr.b	$25(a0)
0001B914 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B91A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B920                            
0001B920                            locret_1AC60:
0001B920 4E75                       		rts	
0001B922                            ; ===========================================================================
0001B922                            
0001B922                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B922 7007                       		moveq	#7,d0
0001B924 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B928 6600                       		bne.s	loc_1ACA0
0001B92A 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001B930 6600                       		bne.s	loc_1ACA0
0001B932 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B936 3368 0008 0008             		move.w	8(a0),8(a1)
0001B93C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B942 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B948 7200                       		moveq	#0,d1
0001B94A 1200                       		move.b	d0,d1
0001B94C E409                       		lsr.b	#2,d1
0001B94E 0441 0020                  		subi.w	#$20,d1
0001B952 D369 0008                  		add.w	d1,8(a1)
0001B956 E048                       		lsr.w	#8,d0
0001B958 E608                       		lsr.b	#3,d0
0001B95A D169 000C                  		add.w	d0,$C(a1)
0001B95E                            
0001B95E                            loc_1ACA0:
0001B95E 5368 001E                  		subq.w	#1,$1E(a0)
0001B962 6700                       		beq.s	Obj3E_MakeAnimal
0001B964 4E75                       		rts	
0001B966                            ; ===========================================================================
0001B966                            
0001B966                            Obj3E_MakeAnimal:
0001B966 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B96C 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B972 117C 0006 001A             		move.b	#6,$1A(a0)
0001B978 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B97E 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B984 7C07                       		moveq	#7,d6
0001B986 3A3C 009A                  		move.w	#$9A,d5
0001B98A 78E4                       		moveq	#-$1C,d4
0001B98C                            
0001B98C                            Obj3E_Loop:
0001B98C 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001B992 6600                       		bne.s	locret_1ACF8
0001B994 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B998 3368 0008 0008             		move.w	8(a0),8(a1)
0001B99E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B9A4 D969 0008                  		add.w	d4,8(a1)
0001B9A8 5E44                       		addq.w	#7,d4
0001B9AA 3345 0036                  		move.w	d5,$36(a1)
0001B9AE 5145                       		subq.w	#8,d5
0001B9B0 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B9B4                            
0001B9B4                            locret_1ACF8:
0001B9B4 4E75                       		rts	
0001B9B6                            ; ===========================================================================
0001B9B6                            
0001B9B6                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B9B6 7007                       		moveq	#7,d0
0001B9B8 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B9BC 6600                       		bne.s	loc_1AD38
0001B9BE 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001B9C4 6600                       		bne.s	loc_1AD38
0001B9C6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B9CA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B9D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B9D6 4EB9 0000 2D0E             		jsr	(RandomNumber).l
0001B9DC 0240 001F                  		andi.w	#$1F,d0
0001B9E0 5D40                       		subq.w	#6,d0
0001B9E2 4A41                       		tst.w	d1
0001B9E4 6A00                       		bpl.s	loc_1AD2E
0001B9E6 4440                       		neg.w	d0
0001B9E8                            
0001B9E8                            loc_1AD2E:
0001B9E8 D169 0008                  		add.w	d0,8(a1)
0001B9EC 337C 000C 0036             		move.w	#$C,$36(a1)
0001B9F2                            
0001B9F2                            loc_1AD38:
0001B9F2 5368 001E                  		subq.w	#1,$1E(a0)
0001B9F6 6600                       		bne.s	locret_1AD48
0001B9F8 5428 0024                  		addq.b	#2,$24(a0)
0001B9FC 317C 00B4 001E             		move.w	#180,$1E(a0)
0001BA02                            
0001BA02                            locret_1AD48:
0001BA02 4E75                       		rts	
0001BA04                            ; ===========================================================================
0001BA04                            
0001BA04                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001BA04 703E                       		moveq	#$3E,d0
0001BA06 7228                       		moveq	#$28,d1
0001BA08 7440                       		moveq	#$40,d2
0001BA0A 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001BA0E                            
0001BA0E                            Obj3E_FindObj28:
0001BA0E B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001BA10 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001BA12 D2C2                       		adda.w	d2,a1		; next object RAM
0001BA14 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001BA18                            
0001BA18 4EB9 0000 F6D8             		jsr	GotThroughAct
0001BA1E 4EF9 0000 E088             		jmp	DeleteObject
0001BA24                            ; ===========================================================================
0001BA24                            
0001BA24                            Obj3E_Obj28Found:
0001BA24 4E75                       		rts	
0001BA26                            ; ===========================================================================
0001BA26                            Ani_obj3E:
0001BA26                            	include "_anim\obj3E.asm"
0001BA26                            ; ---------------------------------------------------------------------------
0001BA26                            ; Animation script - prison capsule
0001BA26                            ; ---------------------------------------------------------------------------
0001BA26 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BA28 0000                       		dc.w byte_1AD70-Ani_obj3E
0001BA2A 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001BA2E                            		even
0001BA2E                            		even
0001BA2E                            
0001BA2E                            ; ---------------------------------------------------------------------------
0001BA2E                            ; Sprite mappings - prison capsule
0001BA2E                            ; ---------------------------------------------------------------------------
0001BA2E                            Map_obj3E:
0001BA2E                            	include "_maps\obj3E.asm"
0001BA2E                            ; ---------------------------------------------------------------------------
0001BA2E                            ; Sprite mappings - prison capsule
0001BA2E                            ; ---------------------------------------------------------------------------
0001BA2E 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001BA32 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001BA36 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001BA3A 0000                       		dc.w byte_1ADE2-Map_obj3E
0001BA3C 07                         byte_1AD82:	dc.b 7
0001BA3D E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001BA42 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001BA47 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001BA4C F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001BA51 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001BA56 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BA5B 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BA60 01                         byte_1ADA6:	dc.b 1
0001BA61 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001BA66 06                         byte_1ADAC:	dc.b 6
0001BA67 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001BA6C 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001BA71 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001BA76 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001BA7B 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001BA80 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001BA85 01                         byte_1ADCB:	dc.b 1
0001BA86 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001BA8B 02                         byte_1ADD1:	dc.b 2
0001BA8C E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001BA91 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001BA96 01                         byte_1ADDC:	dc.b 1
0001BA97 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001BA9C 00                         byte_1ADE2:	dc.b 0
0001BA9E 00                         		even
0001BA9E 00                         		even
0001BA9E                            
0001BA9E                            ; ---------------------------------------------------------------------------
0001BA9E                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001BA9E                            ; ---------------------------------------------------------------------------
0001BA9E                            
0001BA9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA9E                            
0001BA9E                            
0001BA9E                            TouchResponse:				; XREF: Obj01
0001BA9E 4E71                       		nop	
0001BAA0 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001BAA4 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001BAA8 5142                       		subq.w	#8,d2
0001BAAA 7A00                       		moveq	#0,d5
0001BAAC 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001BAB0 5705                       		subq.b	#3,d5
0001BAB2 9645                       		sub.w	d5,d3
0001BAB4 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001BABA 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001BABC 0643 000C                  		addi.w	#$C,d3
0001BAC0 7A0A                       		moveq	#$A,d5
0001BAC2                            
0001BAC2                            Touch_NoDuck:
0001BAC2 383C 0010                  		move.w	#$10,d4
0001BAC6 DA45                       		add.w	d5,d5
0001BAC8 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001BACC 3C3C 005F                  		move.w	#$5F,d6
0001BAD0                            
0001BAD0                            Touch_Loop:
0001BAD0 4A29 0001                  		tst.b	1(a1)
0001BAD4 6A00                       		bpl.s	Touch_NextObj
0001BAD6 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001BADA 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001BADC                            
0001BADC                            Touch_NextObj:
0001BADC 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001BAE0 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001BAE4                            
0001BAE4 7000                       		moveq	#0,d0
0001BAE6 4E75                       		rts	
0001BAE8                            ; ===========================================================================
0001BAE8 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001BAEA 0C14                       		dc.b   $C, $14
0001BAEC 140C                       		dc.b  $14,  $C
0001BAEE 0410                       		dc.b	4, $10
0001BAF0 0C12                       		dc.b   $C, $12
0001BAF2 1010                       		dc.b  $10, $10
0001BAF4 0606                       		dc.b	6,   6
0001BAF6 180C                       		dc.b  $18,  $C
0001BAF8 0C10                       		dc.b   $C, $10
0001BAFA 100C                       		dc.b  $10,  $C
0001BAFC 0808                       		dc.b	8,   8
0001BAFE 1410                       		dc.b  $14, $10
0001BB00 1408                       		dc.b  $14,   8
0001BB02 0E0E                       		dc.b   $E,  $E
0001BB04 1818                       		dc.b  $18, $18
0001BB06 2810                       		dc.b  $28, $10
0001BB08 1018                       		dc.b  $10, $18
0001BB0A 0810                       		dc.b	8, $10
0001BB0C 2070                       		dc.b  $20, $70
0001BB0E 4020                       		dc.b  $40, $20
0001BB10 8020                       		dc.b  $80, $20
0001BB12 2020                       		dc.b  $20, $20
0001BB14 0808                       		dc.b	8,   8
0001BB16 0404                       		dc.b	4,   4
0001BB18 2008                       		dc.b  $20,   8
0001BB1A 0C0C                       		dc.b   $C,  $C
0001BB1C 0804                       		dc.b	8,   4
0001BB1E 1804                       		dc.b  $18,   4
0001BB20 2804                       		dc.b  $28,   4
0001BB22 0408                       		dc.b	4,   8
0001BB24 0418                       		dc.b	4, $18
0001BB26 0428                       		dc.b	4, $28
0001BB28 0420                       		dc.b	4, $20
0001BB2A 1818                       		dc.b  $18, $18
0001BB2C 0C18                       		dc.b   $C, $18
0001BB2E 4808                       		dc.b  $48,   8
0001BB30                            ; ===========================================================================
0001BB30                            
0001BB30                            Touch_Height:				; XREF: TouchResponse
0001BB30 0240 003F                  		andi.w	#$3F,d0
0001BB34 D040                       		add.w	d0,d0
0001BB36 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001BB3A 7200                       		moveq	#0,d1
0001BB3C 121A                       		move.b	(a2)+,d1
0001BB3E 3029 0008                  		move.w	8(a1),d0
0001BB42 9041                       		sub.w	d1,d0
0001BB44 9042                       		sub.w	d2,d0
0001BB46 6400                       		bcc.s	loc_1AE98
0001BB48 D241                       		add.w	d1,d1
0001BB4A D041                       		add.w	d1,d0
0001BB4C 6500                       		bcs.s	Touch_Width
0001BB4E 6000 FF8C                  		bra.w	Touch_NextObj
0001BB52                            ; ===========================================================================
0001BB52                            
0001BB52                            loc_1AE98:
0001BB52 B044                       		cmp.w	d4,d0
0001BB54 6200 FF86                  		bhi.w	Touch_NextObj
0001BB58                            
0001BB58                            Touch_Width:
0001BB58 7200                       		moveq	#0,d1
0001BB5A 121A                       		move.b	(a2)+,d1
0001BB5C 3029 000C                  		move.w	$C(a1),d0
0001BB60 9041                       		sub.w	d1,d0
0001BB62 9043                       		sub.w	d3,d0
0001BB64 6400                       		bcc.s	loc_1AEB6
0001BB66 D241                       		add.w	d1,d1
0001BB68 D240                       		add.w	d0,d1
0001BB6A 6500                       		bcs.s	Touch_ChkValue
0001BB6C 6000 FF6E                  		bra.w	Touch_NextObj
0001BB70                            ; ===========================================================================
0001BB70                            
0001BB70                            loc_1AEB6:
0001BB70 B045                       		cmp.w	d5,d0
0001BB72 6200 FF68                  		bhi.w	Touch_NextObj
0001BB76                            
0001BB76                            Touch_ChkValue:
0001BB76 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001BB7A 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001BB7E 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001BB82 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001BB86 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001BB8A 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001BB8C 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001BB90                            
0001BB90                            ; touch	response is $40-$7F
0001BB90                            
0001BB90 1029 0020                  		move.b	$20(a1),d0
0001BB94 0200 003F                  		andi.b	#$3F,d0
0001BB98 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001BB9C 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001BB9E 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001BBA4 6400 0000                  		bcc.w	locret_1AEF2
0001BBA8 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001BBAC                            
0001BBAC                            locret_1AEF2:
0001BBAC 4E75                       		rts	
0001BBAE                            ; ===========================================================================
0001BBAE                            
0001BBAE                            Touch_Monitor:
0001BBAE 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001BBB2 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001BBB4 3028 000C                  		move.w	$C(a0),d0
0001BBB8 0440 0010                  		subi.w	#$10,d0
0001BBBC B069 000C                  		cmp.w	$C(a1),d0
0001BBC0 6500                       		bcs.s	locret_1AF2E
0001BBC2 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BBC6 337C FE80 0012             		move.w	#-$180,$12(a1)
0001BBCC 4A29 0025                  		tst.b	$25(a1)
0001BBD0 6600                       		bne.s	locret_1AF2E
0001BBD2 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001BBD6 4E75                       		rts	
0001BBD8                            ; ===========================================================================
0001BBD8                            
0001BBD8                            loc_1AF1E:
0001BBD8 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001BBDE 6600                       		bne.s	locret_1AF2E
0001BBE0 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001BBE4 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001BBE8                            
0001BBE8                            locret_1AF2E:
0001BBE8 4E75                       		rts	
0001BBEA                            ; ===========================================================================
0001BBEA                            
0001BBEA                            Touch_Enemy:				; XREF: Touch_ChkValue
0001BBEA 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BBEE 6600                       		bne.s	loc_1AF40	; if yes, branch
0001BBF0 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001BBF6 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001BBFA                            
0001BBFA                            loc_1AF40:
0001BBFA 4A29 0021                  		tst.b	$21(a1)
0001BBFE 6700                       		beq.s	Touch_KillEnemy
0001BC00 4468 0010                  		neg.w	$10(a0)
0001BC04 4468 0012                  		neg.w	$12(a0)
0001BC08 E0E8 0010                  		asr	$10(a0)
0001BC0C E0E8 0012                  		asr	$12(a0)
0001BC10 137C 0000 0020             		move.b	#0,$20(a1)
0001BC16 5329 0021                  		subq.b	#1,$21(a1)
0001BC1A 6600                       		bne.s	locret_1AF68
0001BC1C 08E9 0007 0022             		bset	#7,$22(a1)
0001BC22                            
0001BC22                            locret_1AF68:
0001BC22 4E75                       		rts	
0001BC24                            ; ===========================================================================
0001BC24                            
0001BC24                            Touch_KillEnemy:
0001BC24 08E9 0007 0022             		bset	#7,$22(a1)
0001BC2A 7000                       		moveq	#0,d0
0001BC2C 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001BC30 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001BC34 0C40 0006                  		cmpi.w	#6,d0
0001BC38 6500                       		bcs.s	loc_1AF82
0001BC3A 7006                       		moveq	#6,d0
0001BC3C                            
0001BC3C                            loc_1AF82:
0001BC3C 3340 003E                  		move.w	d0,$3E(a1)
0001BC40 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001BC44 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001BC4A 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001BC4C 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001BC50 337C 000A 003E             		move.w	#$A,$3E(a1)
0001BC56                            
0001BC56                            loc_1AF9C:
0001BC56 6100 0000                  		bsr.w	AddPoints
0001BC5A 7400                       		moveq	#0,d2	; GMZ
0001BC5C 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001BC5E 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001BC60                            
0001BC60                            TouchKE_Explode:
0001BC60 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BC64 137C 0000 0024             		move.b	#0,$24(a1)
0001BC6A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001BC6E                            
0001BC6E                            TouchKE_NextExplosion:
0001BC6E 5802                       		addq.b	#4,d2
0001BC70 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001BC76 6600                       		bne.s	TouchKE_NoExplosion
0001BC78 336A 0008 0008             		move.w	8(a2),8(a1)
0001BC7E 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001BC84 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001BC88                            
0001BC88                            TouchKE_NoExplosion:
0001BC88 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001BC8A 4A68 0012                  		tst.w	$12(a0)
0001BC8E 6B00                       		bmi.s	loc_1AFC2
0001BC90 3028 000C                  		move.w	$C(a0),d0
0001BC94 B069 000C                  		cmp.w	$C(a1),d0
0001BC98 6400                       		bcc.s	loc_1AFCA
0001BC9A 4468 0012                  		neg.w	$12(a0)
0001BC9E 4E75                       		rts	
0001BCA0                            ; ===========================================================================
0001BCA0                            
0001BCA0                            loc_1AFC2:
0001BCA0 0668 0100 0012             		addi.w	#$100,$12(a0)
0001BCA6 4E75                       		rts	
0001BCA8                            ; ===========================================================================
0001BCA8                            
0001BCA8                            loc_1AFCA:
0001BCA8 0468 0100 0012             		subi.w	#$100,$12(a0)
0001BCAE 4E75                       		rts	
0001BCB0                            ; ===========================================================================
0001BCB0 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001BCB8                            ; ===========================================================================
0001BCB8                            
0001BCB8                            loc_1AFDA:				; XREF: Touch_CatKiller
0001BCB8 08E9 0007 0022             		bset	#7,$22(a1)
0001BCBE                            
0001BCBE                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001BCBE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001BCC2 6700                       		beq.s	Touch_Hurt	; if not, branch
0001BCC4                            
0001BCC4                            loc_1AFE6:				; XREF: Touch_Hurt
0001BCC4 70FF                       		moveq	#-1,d0
0001BCC6 4E75                       		rts	
0001BCC8                            ; ===========================================================================
0001BCC8                            
0001BCC8                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001BCC8 4E71                       		nop	
0001BCCA 4A68 0030                  		tst.w	$30(a0)
0001BCCE 66F4                       		bne.s	loc_1AFE6
0001BCD0 2449                       		movea.l	a1,a2
0001BCD2                            
0001BCD2                            ; End of function TouchResponse
0001BCD2                            ; continue straight to HurtSonic
0001BCD2                            
0001BCD2                            ; ---------------------------------------------------------------------------
0001BCD2                            ; Hurting Sonic	subroutine
0001BCD2                            ; ---------------------------------------------------------------------------
0001BCD2                            
0001BCD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCD2                            
0001BCD2                            
0001BCD2                            HurtSonic:
0001BCD2 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001BCD6 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001BCD8 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001BCDC 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001BCE0 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001BCE6 6600                       		bne.s	Hurt_Shield
0001BCE8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001BCEC 3368 0008 0008             		move.w	8(a0),8(a1)
0001BCF2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BCF8                            
0001BCF8                            Hurt_Shield:
0001BCF8 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001BCFE 117C 0004 0024             		move.b	#4,$24(a0)
0001BD04 6100 858E                  		bsr.w	Sonic_ResetOnFloor
0001BD08 08E8 0001 0022             		bset	#1,$22(a0)
0001BD0E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001BD14 317C FE00 0010             		move.w	#-$200,$10(a0)
0001BD1A 0828 0006 0022             		btst	#6,$22(a0)
0001BD20 6700                       		beq.s	Hurt_Reverse
0001BD22 317C FE00 0012             		move.w	#-$200,$12(a0)
0001BD28 317C FF00 0010             		move.w	#-$100,$10(a0)
0001BD2E                            
0001BD2E                            Hurt_Reverse:
0001BD2E 3028 0008                  		move.w	8(a0),d0
0001BD32 B06A 0008                  		cmp.w	8(a2),d0
0001BD36 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001BD38 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001BD3C                            
0001BD3C                            Hurt_ChkSpikes:
0001BD3C 317C 0000 0014             		move.w	#0,$14(a0)
0001BD42 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001BD48 317C 0078 0030             		move.w	#$78,$30(a0)
0001BD4E 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001BD52 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001BD56 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BD58 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001BD5C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001BD5E 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001BD62                            
0001BD62                            Hurt_Sound:
0001BD62 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001BD68 70FF                       		moveq	#-1,d0
0001BD6A 4E75                       		rts	
0001BD6C                            ; ===========================================================================
0001BD6C                            
0001BD6C                            Hurt_NoRings:
0001BD6C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001BD70 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001BD74                            ; End of function HurtSonic
0001BD74                            
0001BD74                            ; ---------------------------------------------------------------------------
0001BD74                            ; Subroutine to	kill Sonic
0001BD74                            ; ---------------------------------------------------------------------------
0001BD74                            
0001BD74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD74                            
0001BD74                            
0001BD74                            KillSonic:
0001BD74 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001BD78 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BD7A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BD80 117C 0006 0024             		move.b	#6,$24(a0)
0001BD86 6100 850C                  		bsr.w	Sonic_ResetOnFloor
0001BD8A 08E8 0001 0022             		bset	#1,$22(a0)
0001BD90 317C F900 0012             		move.w	#-$700,$12(a0)
0001BD96 317C 0000 0010             		move.w	#0,$10(a0)
0001BD9C 317C 0000 0014             		move.w	#0,$14(a0)
0001BDA2 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BDA8 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BDAE 08E8 0007 0002             		bset	#7,2(a0)
0001BDB4 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BDB8 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BDBC 6600                       		bne.s	Kill_Sound
0001BDBE 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BDC2                            
0001BDC2                            Kill_Sound:
0001BDC2 4EB9 0000 159A             		jsr	(PlaySound_Special).l
0001BDC8                            
0001BDC8                            Kill_NoDeath:
0001BDC8 70FF                       		moveq	#-1,d0
0001BDCA 4E75                       		rts	
0001BDCC                            ; End of function KillSonic
0001BDCC                            
0001BDCC                            
0001BDCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDCC                            
0001BDCC                            
0001BDCC                            Touch_Special:				; XREF: Touch_ChkValue
0001BDCC 1229 0020                  		move.b	$20(a1),d1
0001BDD0 0201 003F                  		andi.b	#$3F,d1
0001BDD4 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BDD8 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BDDA 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BDDE 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BDE0 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BDE4 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BDE6 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BDEA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BDEC 4E75                       		rts	
0001BDEE                            ; ===========================================================================
0001BDEE                            
0001BDEE                            Touch_CatKiller:			; XREF: Touch_Special
0001BDEE 6000 FEC8                  		bra.w	loc_1AFDA
0001BDF2                            ; ===========================================================================
0001BDF2                            
0001BDF2                            Touch_Yadrin:				; XREF: Touch_Special
0001BDF2 9A40                       		sub.w	d0,d5
0001BDF4 0C45 0008                  		cmpi.w	#8,d5
0001BDF8 6400                       		bcc.s	loc_1B144
0001BDFA 3029 0008                  		move.w	8(a1),d0
0001BDFE 5940                       		subq.w	#4,d0
0001BE00 0829 0000 0022             		btst	#0,$22(a1)
0001BE06 6700                       		beq.s	loc_1B130
0001BE08 0440 0010                  		subi.w	#$10,d0
0001BE0C                            
0001BE0C                            loc_1B130:
0001BE0C 9042                       		sub.w	d2,d0
0001BE0E 6400                       		bcc.s	loc_1B13C
0001BE10 0640 0018                  		addi.w	#$18,d0
0001BE14 6500                       		bcs.s	loc_1B140
0001BE16 6000                       		bra.s	loc_1B144
0001BE18                            ; ===========================================================================
0001BE18                            
0001BE18                            loc_1B13C:
0001BE18 B044                       		cmp.w	d4,d0
0001BE1A 6200                       		bhi.s	loc_1B144
0001BE1C                            
0001BE1C                            loc_1B140:
0001BE1C 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BE20                            ; ===========================================================================
0001BE20                            
0001BE20                            loc_1B144:
0001BE20 6000 FDC8                  		bra.w	Touch_Enemy
0001BE24                            ; ===========================================================================
0001BE24                            
0001BE24                            Touch_D7orE1:				; XREF: Touch_Special
0001BE24 5229 0021                  		addq.b	#1,$21(a1)
0001BE28 4E75                       		rts	
0001BE2A                            ; End of function Touch_Special
0001BE2A                            
0001BE2A                            ; ---------------------------------------------------------------------------
0001BE2A                            ; Subroutine to	show the special stage layout
0001BE2A                            ; ---------------------------------------------------------------------------
0001BE2A                            
0001BE2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE2A                            
0001BE2A                            
0001BE2A                            SS_ShowLayout:				; XREF: SpecialStage
0001BE2A 6100 0000                  		bsr.w	SS_AniWallsRings
0001BE2E 6100 0000                  		bsr.w	SS_AniItems
0001BE32 3F05                       		move.w	d5,-(sp)
0001BE34 43F8 8000                  		lea	($FFFF8000).w,a1
0001BE38 1038 F780                  		move.b	($FFFFF780).w,d0
0001BE3C 0200 00FC                  		andi.b	#$FC,d0
0001BE40 4EB9 0000 2D34             		jsr	(CalcSine).l
0001BE46 3800                       		move.w	d0,d4
0001BE48 3A01                       		move.w	d1,d5
0001BE4A C9FC 0018                  		muls.w	#$18,d4
0001BE4E CBFC 0018                  		muls.w	#$18,d5
0001BE52 7400                       		moveq	#0,d2
0001BE54 3438 F700                  		move.w	($FFFFF700).w,d2
0001BE58 84FC 0018                  		divu.w	#$18,d2
0001BE5C 4842                       		swap	d2
0001BE5E 4442                       		neg.w	d2
0001BE60 0642 FF4C                  		addi.w	#-$B4,d2
0001BE64 7600                       		moveq	#0,d3
0001BE66 3638 F704                  		move.w	($FFFFF704).w,d3
0001BE6A 86FC 0018                  		divu.w	#$18,d3
0001BE6E 4843                       		swap	d3
0001BE70 4443                       		neg.w	d3
0001BE72 0643 FF4C                  		addi.w	#-$B4,d3
0001BE76 3E3C 000F                  		move.w	#$F,d7
0001BE7A                            
0001BE7A                            loc_1B19E:
0001BE7A 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BE7E 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BE82 4440                       		neg.w	d0
0001BE84 C3C2                       		muls.w	d2,d1
0001BE86 C1C3                       		muls.w	d3,d0
0001BE88 2C00                       		move.l	d0,d6
0001BE8A DC81                       		add.l	d1,d6
0001BE8C 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BE90 C1C2                       		muls.w	d2,d0
0001BE92 C3C3                       		muls.w	d3,d1
0001BE94 D280                       		add.l	d0,d1
0001BE96 2406                       		move.l	d6,d2
0001BE98 3C3C 000F                  		move.w	#$F,d6
0001BE9C                            
0001BE9C                            loc_1B1C0:
0001BE9C 2002                       		move.l	d2,d0
0001BE9E E080                       		asr.l	#8,d0
0001BEA0 32C0                       		move.w	d0,(a1)+
0001BEA2 2001                       		move.l	d1,d0
0001BEA4 E080                       		asr.l	#8,d0
0001BEA6 32C0                       		move.w	d0,(a1)+
0001BEA8 D485                       		add.l	d5,d2
0001BEAA D284                       		add.l	d4,d1
0001BEAC 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BEB0                            
0001BEB0 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BEB4 0643 0018                  		addi.w	#$18,d3
0001BEB8 51CF FFC0                  		dbf	d7,loc_1B19E
0001BEBC                            
0001BEBC 3A1F                       		move.w	(sp)+,d5
0001BEBE 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BEC4 7000                       		moveq	#0,d0
0001BEC6 3038 F704                  		move.w	($FFFFF704).w,d0
0001BECA 80FC 0018                  		divu.w	#$18,d0
0001BECE C0FC 0080                  		mulu.w	#$80,d0
0001BED2 D1C0                       		adda.l	d0,a0
0001BED4 7000                       		moveq	#0,d0
0001BED6 3038 F700                  		move.w	($FFFFF700).w,d0
0001BEDA 80FC 0018                  		divu.w	#$18,d0
0001BEDE D0C0                       		adda.w	d0,a0
0001BEE0 49F8 8000                  		lea	($FFFF8000).w,a4
0001BEE4 3E3C 000F                  		move.w	#$F,d7
0001BEE8                            
0001BEE8                            loc_1B20C:
0001BEE8 3C3C 000F                  		move.w	#$F,d6
0001BEEC                            
0001BEEC                            loc_1B210:
0001BEEC 7000                       		moveq	#0,d0
0001BEEE 1018                       		move.b	(a0)+,d0
0001BEF0 6700                       		beq.s	loc_1B268
0001BEF2 0C00 004E                  		cmpi.b	#$4E,d0
0001BEF6 6200                       		bhi.s	loc_1B268
0001BEF8 3614                       		move.w	(a4),d3
0001BEFA 0643 0120                  		addi.w	#$120,d3
0001BEFE 0C43 0070                  		cmpi.w	#$70,d3
0001BF02 6500                       		bcs.s	loc_1B268
0001BF04 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BF08 6400                       		bcc.s	loc_1B268
0001BF0A 342C 0002                  		move.w	2(a4),d2
0001BF0E 0642 00F0                  		addi.w	#$F0,d2
0001BF12 0C42 0070                  		cmpi.w	#$70,d2
0001BF16 6500                       		bcs.s	loc_1B268
0001BF18 0C42 0170                  		cmpi.w	#$170,d2
0001BF1C 6400                       		bcc.s	loc_1B268
0001BF1E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BF24 E748                       		lsl.w	#3,d0
0001BF26 4BF5 0000                  		lea	(a5,d0.w),a5
0001BF2A 225D                       		movea.l	(a5)+,a1
0001BF2C 321D                       		move.w	(a5)+,d1
0001BF2E D241                       		add.w	d1,d1
0001BF30 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BF34 365D                       		movea.w	(a5)+,a3
0001BF36 7200                       		moveq	#0,d1
0001BF38 1219                       		move.b	(a1)+,d1
0001BF3A 5301                       		subq.b	#1,d1
0001BF3C 6B00                       		bmi.s	loc_1B268
0001BF3E 4EB9 0000 E1AA             		jsr	sub_D762
0001BF44                            
0001BF44                            loc_1B268:
0001BF44 584C                       		addq.w	#4,a4
0001BF46 51CE FFA4                  		dbf	d6,loc_1B210
0001BF4A                            
0001BF4A 41E8 0070                  		lea	$70(a0),a0
0001BF4E 51CF FF98                  		dbf	d7,loc_1B20C
0001BF52                            
0001BF52 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BF56 0C05 0050                  		cmpi.b	#$50,d5
0001BF5A 6700                       		beq.s	loc_1B288
0001BF5C 24BC 0000 0000             		move.l	#0,(a2)
0001BF62 4E75                       		rts	
0001BF64                            ; ===========================================================================
0001BF64                            
0001BF64                            loc_1B288:
0001BF64 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BF6A 4E75                       		rts	
0001BF6C                            ; End of function SS_ShowLayout
0001BF6C                            
0001BF6C                            ; ---------------------------------------------------------------------------
0001BF6C                            ; Subroutine to	animate	walls and rings	in the special stage
0001BF6C                            ; ---------------------------------------------------------------------------
0001BF6C                            
0001BF6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF6C                            
0001BF6C                            
0001BF6C                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BF6C 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BF72 7000                       		moveq	#0,d0
0001BF74 1038 F780                  		move.b	($FFFFF780).w,d0
0001BF78 E408                       		lsr.b	#2,d0
0001BF7A 0240 000F                  		andi.w	#$F,d0
0001BF7E 7223                       		moveq	#$23,d1
0001BF80                            
0001BF80                            loc_1B2A4:
0001BF80 3280                       		move.w	d0,(a1)
0001BF82 5049                       		addq.w	#8,a1
0001BF84 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BF88                            
0001BF88 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BF8E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BF92 6A00                       		bpl.s	loc_1B2C8
0001BF94 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BF9A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BF9E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BFA4                            
0001BFA4                            loc_1B2C8:
0001BFA4 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BFAA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BFAE 6A00                       		bpl.s	loc_1B2E4
0001BFB0 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BFB6 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BFBA 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BFC0                            
0001BFC0                            loc_1B2E4:
0001BFC0 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BFC4 1340 0138                  		move.b	d0,$138(a1)
0001BFC8 1340 0160                  		move.b	d0,$160(a1)
0001BFCC 1340 0148                  		move.b	d0,$148(a1)
0001BFD0 1340 0150                  		move.b	d0,$150(a1)
0001BFD4 1340 01D8                  		move.b	d0,$1D8(a1)
0001BFD8 1340 01E0                  		move.b	d0,$1E0(a1)
0001BFDC 1340 01E8                  		move.b	d0,$1E8(a1)
0001BFE0 1340 01F0                  		move.b	d0,$1F0(a1)
0001BFE4 1340 01F8                  		move.b	d0,$1F8(a1)
0001BFE8 1340 0200                  		move.b	d0,$200(a1)
0001BFEC 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BFF0 6A00                       		bpl.s	loc_1B326
0001BFF2 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BFF8 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BFFC 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C002                            
0001C002                            loc_1B326:
0001C002 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C006 1340 0168                  		move.b	d0,$168(a1)
0001C00A 1340 0170                  		move.b	d0,$170(a1)
0001C00E 1340 0178                  		move.b	d0,$178(a1)
0001C012 1340 0180                  		move.b	d0,$180(a1)
0001C016 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C01A 6A00                       		bpl.s	loc_1B350
0001C01C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C022 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C026 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C02C                            
0001C02C                            loc_1B350:
0001C02C 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C032 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C038 7000                       		moveq	#0,d0
0001C03A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C03E D040                       		add.w	d0,d0
0001C040 41F0 0000                  		lea	(a0,d0.w),a0
0001C044 3290                       		move.w	(a0),(a1)
0001C046 3368 0002 0008             		move.w	2(a0),8(a1)
0001C04C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C052 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C058 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C05E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C064 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C06A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C070 D0FC 0020                  		adda.w	#$20,a0
0001C074 D2FC 0048                  		adda.w	#$48,a1
0001C078 3290                       		move.w	(a0),(a1)
0001C07A 3368 0002 0008             		move.w	2(a0),8(a1)
0001C080 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C086 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C08C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C092 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C098 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C09E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C0A4 D0FC 0020                  		adda.w	#$20,a0
0001C0A8 D2FC 0048                  		adda.w	#$48,a1
0001C0AC 3290                       		move.w	(a0),(a1)
0001C0AE 3368 0002 0008             		move.w	2(a0),8(a1)
0001C0B4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C0BA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C0C0 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C0C6 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C0CC 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C0D2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C0D8 D0FC 0020                  		adda.w	#$20,a0
0001C0DC D2FC 0048                  		adda.w	#$48,a1
0001C0E0 3290                       		move.w	(a0),(a1)
0001C0E2 3368 0002 0008             		move.w	2(a0),8(a1)
0001C0E8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C0EE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C0F4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C0FA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C100 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C106 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C10C D0FC 0020                  		adda.w	#$20,a0
0001C110 D2FC 0048                  		adda.w	#$48,a1
0001C114 4E75                       		rts	
0001C116                            ; End of function SS_AniWallsRings
0001C116                            
0001C116                            ; ===========================================================================
0001C116 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C126 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C136 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C146 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C156 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C166 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C176 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C186 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C196                            ; ---------------------------------------------------------------------------
0001C196                            ; Subroutine to	remove items when you collect them in the special stage
0001C196                            ; ---------------------------------------------------------------------------
0001C196                            
0001C196                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C196                            
0001C196                            
0001C196                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C196 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C19C 303C 001F                  		move.w	#$1F,d0
0001C1A0                            
0001C1A0                            loc_1B4C4:
0001C1A0 4A12                       		tst.b	(a2)
0001C1A2 6700                       		beq.s	locret_1B4CE
0001C1A4 504A                       		addq.w	#8,a2
0001C1A6 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C1AA                            
0001C1AA                            locret_1B4CE:
0001C1AA 4E75                       		rts	
0001C1AC                            ; End of function SS_RemoveCollectedItem
0001C1AC                            
0001C1AC                            ; ---------------------------------------------------------------------------
0001C1AC                            ; Subroutine to	animate	special	stage items when you touch them
0001C1AC                            ; ---------------------------------------------------------------------------
0001C1AC                            
0001C1AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1AC                            
0001C1AC                            
0001C1AC                            SS_AniItems:				; XREF: SS_ShowLayout
0001C1AC 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C1B2 3E3C 001F                  		move.w	#$1F,d7
0001C1B6                            
0001C1B6                            loc_1B4DA:
0001C1B6 7000                       		moveq	#0,d0
0001C1B8 1010                       		move.b	(a0),d0
0001C1BA 6700                       		beq.s	loc_1B4E8
0001C1BC E548                       		lsl.w	#2,d0
0001C1BE 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C1C2 4E91                       		jsr	(a1)
0001C1C4                            
0001C1C4                            loc_1B4E8:
0001C1C4 5048                       		addq.w	#8,a0
0001C1C6                            
0001C1C6                            loc_1B4EA:
0001C1C6 51CF FFEE                  		dbf	d7,loc_1B4DA
0001C1CA                            
0001C1CA 4E75                       		rts	
0001C1CC                            ; End of function SS_AniItems
0001C1CC                            
0001C1CC                            ; ===========================================================================
0001C1CC 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001C1D0 0000 0000                  		dc.l SS_AniBumper
0001C1D4 0000 0000                  		dc.l SS_Ani1Up
0001C1D8 0000 0000                  		dc.l SS_AniReverse
0001C1DC 0000 0000                  		dc.l SS_AniEmeraldSparks
0001C1E0 0000 0000                  		dc.l SS_AniGlassBlock
0001C1E4                            ; ===========================================================================
0001C1E4                            
0001C1E4                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001C1E4 5328 0002                  		subq.b	#1,2(a0)
0001C1E8 6A00                       		bpl.s	locret_1B530
0001C1EA 117C 0005 0002             		move.b	#5,2(a0)
0001C1F0 7000                       		moveq	#0,d0
0001C1F2 1028 0003                  		move.b	3(a0),d0
0001C1F6 5228 0003                  		addq.b	#1,3(a0)
0001C1FA 2268 0004                  		movea.l	4(a0),a1
0001C1FE 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001C202 1280                       		move.b	d0,(a1)
0001C204 6600                       		bne.s	locret_1B530
0001C206 4290                       		clr.l	(a0)
0001C208 42A8 0004                  		clr.l	4(a0)
0001C20C                            
0001C20C                            locret_1B530:
0001C20C 4E75                       		rts	
0001C20E                            ; ===========================================================================
0001C20E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001C214                            ; ===========================================================================
0001C214                            
0001C214                            SS_AniBumper:				; XREF: SS_AniIndex
0001C214 5328 0002                  		subq.b	#1,2(a0)
0001C218 6A00                       		bpl.s	locret_1B566
0001C21A 117C 0007 0002             		move.b	#7,2(a0)
0001C220 7000                       		moveq	#0,d0
0001C222 1028 0003                  		move.b	3(a0),d0
0001C226 5228 0003                  		addq.b	#1,3(a0)
0001C22A 2268 0004                  		movea.l	4(a0),a1
0001C22E 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001C232 6600                       		bne.s	loc_1B564
0001C234 4290                       		clr.l	(a0)
0001C236 42A8 0004                  		clr.l	4(a0)
0001C23A 12BC 0025                  		move.b	#$25,(a1)
0001C23E 4E75                       		rts	
0001C240                            ; ===========================================================================
0001C240                            
0001C240                            loc_1B564:
0001C240 1280                       		move.b	d0,(a1)
0001C242                            
0001C242                            locret_1B566:
0001C242 4E75                       		rts	
0001C244                            ; ===========================================================================
0001C244 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001C24A                            ; ===========================================================================
0001C24A                            
0001C24A                            SS_Ani1Up:				; XREF: SS_AniIndex
0001C24A 5328 0002                  		subq.b	#1,2(a0)
0001C24E 6A00                       		bpl.s	locret_1B596
0001C250 117C 0005 0002             		move.b	#5,2(a0)
0001C256 7000                       		moveq	#0,d0
0001C258 1028 0003                  		move.b	3(a0),d0
0001C25C 5228 0003                  		addq.b	#1,3(a0)
0001C260 2268 0004                  		movea.l	4(a0),a1
0001C264 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001C268 1280                       		move.b	d0,(a1)
0001C26A 6600                       		bne.s	locret_1B596
0001C26C 4290                       		clr.l	(a0)
0001C26E 42A8 0004                  		clr.l	4(a0)
0001C272                            
0001C272                            locret_1B596:
0001C272 4E75                       		rts	
0001C274                            ; ===========================================================================
0001C274 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001C27A                            ; ===========================================================================
0001C27A                            
0001C27A                            SS_AniReverse:				; XREF: SS_AniIndex
0001C27A 5328 0002                  		subq.b	#1,2(a0)
0001C27E 6A00                       		bpl.s	locret_1B5CC
0001C280 117C 0007 0002             		move.b	#7,2(a0)
0001C286 7000                       		moveq	#0,d0
0001C288 1028 0003                  		move.b	3(a0),d0
0001C28C 5228 0003                  		addq.b	#1,3(a0)
0001C290 2268 0004                  		movea.l	4(a0),a1
0001C294 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001C298 6600                       		bne.s	loc_1B5CA
0001C29A 4290                       		clr.l	(a0)
0001C29C 42A8 0004                  		clr.l	4(a0)
0001C2A0 12BC 002B                  		move.b	#$2B,(a1)
0001C2A4 4E75                       		rts	
0001C2A6                            ; ===========================================================================
0001C2A6                            
0001C2A6                            loc_1B5CA:
0001C2A6 1280                       		move.b	d0,(a1)
0001C2A8                            
0001C2A8                            locret_1B5CC:
0001C2A8 4E75                       		rts	
0001C2AA                            ; ===========================================================================
0001C2AA 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001C2B0                            ; ===========================================================================
0001C2B0                            
0001C2B0                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001C2B0 5328 0002                  		subq.b	#1,2(a0)
0001C2B4 6A00                       		bpl.s	locret_1B60C
0001C2B6 117C 0005 0002             		move.b	#5,2(a0)
0001C2BC 7000                       		moveq	#0,d0
0001C2BE 1028 0003                  		move.b	3(a0),d0
0001C2C2 5228 0003                  		addq.b	#1,3(a0)
0001C2C6 2268 0004                  		movea.l	4(a0),a1
0001C2CA 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001C2CE 1280                       		move.b	d0,(a1)
0001C2D0 6600                       		bne.s	locret_1B60C
0001C2D2 4290                       		clr.l	(a0)
0001C2D4 42A8 0004                  		clr.l	4(a0)
0001C2D8 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001C2DE 303C 00A8                  		move.w	#$A8,d0
0001C2E2 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001C2E8                            
0001C2E8                            locret_1B60C:
0001C2E8 4E75                       		rts	
0001C2EA                            ; ===========================================================================
0001C2EA 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001C2F0                            ; ===========================================================================
0001C2F0                            
0001C2F0                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001C2F0 5328 0002                  		subq.b	#1,2(a0)
0001C2F4 6A00                       		bpl.s	locret_1B640
0001C2F6 117C 0001 0002             		move.b	#1,2(a0)
0001C2FC 7000                       		moveq	#0,d0
0001C2FE 1028 0003                  		move.b	3(a0),d0
0001C302 5228 0003                  		addq.b	#1,3(a0)
0001C306 2268 0004                  		movea.l	4(a0),a1
0001C30A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001C30E 1280                       		move.b	d0,(a1)
0001C310 6600                       		bne.s	locret_1B640
0001C312 12A8 0004                  		move.b	4(a0),(a1)
0001C316 4290                       		clr.l	(a0)
0001C318 42A8 0004                  		clr.l	4(a0)
0001C31C                            
0001C31C                            locret_1B640:
0001C31C 4E75                       		rts	
0001C31E                            ; ===========================================================================
0001C31E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001C328                            ; ---------------------------------------------------------------------------
0001C328                            ; Special stage	layout pointers
0001C328                            ; ---------------------------------------------------------------------------
0001C328                            SS_LayoutIndex:
0001C328                            	include "_inc\Special stage layout pointers.asm"
0001C328                            ; ---------------------------------------------------------------------------
0001C328                            ; Special stage	layout pointers
0001C328                            ; ---------------------------------------------------------------------------
0001C328 0000 0000                  	dc.l SS_1
0001C32C 0000 0000                  	dc.l SS_2
0001C330 0000 0000                  	dc.l SS_3
0001C334 0000 0000                  	dc.l SS_4
0001C338 0000 0000                  	dc.l SS_5
0001C33C 0000 0000                  	dc.l SS_6
0001C340                            	even
0001C340                            	even
0001C340                            
0001C340                            ; ---------------------------------------------------------------------------
0001C340                            ; Special stage	start locations
0001C340                            ; ---------------------------------------------------------------------------
0001C340                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001C358                            		even
0001C358                            
0001C358                            ; ---------------------------------------------------------------------------
0001C358                            ; Subroutine to	load special stage layout
0001C358                            ; ---------------------------------------------------------------------------
0001C358                            
0001C358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C358                            
0001C358                            
0001C358                            SS_Load:				; XREF: SpecialStage
0001C358 7000                       		moveq	#0,d0
0001C35A 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001C35E 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001C362 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001C368 6500                       		bcs.s	SS_ChkEmldNum
0001C36A 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001C370                            
0001C370                            SS_ChkEmldNum:
0001C370 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001C376 6700                       		beq.s	SS_LoadData	; if yes, branch
0001C378 7200                       		moveq	#0,d1
0001C37A 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C37E 5301                       		subq.b	#1,d1
0001C380 6500                       		bcs.s	SS_LoadData
0001C382 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C386                            
0001C386                            SS_ChkEmldLoop:	
0001C386 B033 1000                  		cmp.b	(a3,d1.w),d0
0001C38A 6600                       		bne.s	SS_ChkEmldRepeat
0001C38C 60CA                       		bra.s	SS_Load
0001C38E                            ; ===========================================================================
0001C38E                            
0001C38E                            SS_ChkEmldRepeat:
0001C38E 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C392                            
0001C392                            SS_LoadData:
0001C392 E548                       		lsl.w	#2,d0
0001C394 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C398 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C39C 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C3A0 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C3A4 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C3AA 303C 0000                  		move.w	#0,d0
0001C3AE 4EB9 0000 191C             		jsr	(EniDec).l
0001C3B4 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C3BA 303C 0FFF                  		move.w	#$FFF,d0
0001C3BE                            
0001C3BE                            SS_ClrRAM3:
0001C3BE 4299                       		clr.l	(a1)+
0001C3C0 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C3C4                            
0001C3C4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C3CA 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C3D0 723F                       		moveq	#$3F,d1
0001C3D2                            
0001C3D2                            loc_1B6F6:
0001C3D2 743F                       		moveq	#$3F,d2
0001C3D4                            
0001C3D4                            loc_1B6F8:
0001C3D4 12D8                       		move.b	(a0)+,(a1)+
0001C3D6 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C3DA                            
0001C3DA 43E9 0040                  		lea	$40(a1),a1
0001C3DE 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C3E2                            
0001C3E2 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C3E8 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C3EE 724D                       		moveq	#$4D,d1
0001C3F0                            
0001C3F0                            loc_1B714:
0001C3F0 22D8                       		move.l	(a0)+,(a1)+
0001C3F2 32FC 0000                  		move.w	#0,(a1)+
0001C3F6 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C3FC 32D8                       		move.w	(a0)+,(a1)+
0001C3FE 51C9 FFF0                  		dbf	d1,loc_1B714
0001C402                            
0001C402 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C408 323C 003F                  		move.w	#$3F,d1
0001C40C                            
0001C40C                            loc_1B730:
0001C40C                            
0001C40C 4299                       		clr.l	(a1)+
0001C40E 51C9 FFFC                  		dbf	d1,loc_1B730
0001C412                            
0001C412 4E75                       		rts	
0001C414                            ; End of function SS_Load
0001C414                            
0001C414                            ; ===========================================================================
0001C414                            ; ---------------------------------------------------------------------------
0001C414                            ; Special stage	mappings and VRAM pointers
0001C414                            ; ---------------------------------------------------------------------------
0001C414                            SS_MapIndex:
0001C414                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C414                            ; ---------------------------------------------------------------------------
0001C414                            ; Special stage	mappings and VRAM pointers
0001C414                            ; ---------------------------------------------------------------------------
0001C414 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C418 0142                       	dc.w $142		; VRAM setting
0001C41A 0000 0000                  	dc.l Map_SSWalls
0001C41E 0142                       	dc.w $142
0001C420 0000 0000                  	dc.l Map_SSWalls
0001C424 0142                       	dc.w $142
0001C426 0000 0000                  	dc.l Map_SSWalls
0001C42A 0142                       	dc.w $142
0001C42C 0000 0000                  	dc.l Map_SSWalls
0001C430 0142                       	dc.w $142
0001C432 0000 0000                  	dc.l Map_SSWalls
0001C436 0142                       	dc.w $142
0001C438 0000 0000                  	dc.l Map_SSWalls
0001C43C 0142                       	dc.w $142
0001C43E 0000 0000                  	dc.l Map_SSWalls
0001C442 0142                       	dc.w $142
0001C444 0000 0000                  	dc.l Map_SSWalls
0001C448 0142                       	dc.w $142
0001C44A 0000 0000                  	dc.l Map_SSWalls
0001C44E 2142                       	dc.w $2142
0001C450 0000 0000                  	dc.l Map_SSWalls
0001C454 2142                       	dc.w $2142
0001C456 0000 0000                  	dc.l Map_SSWalls
0001C45A 2142                       	dc.w $2142
0001C45C 0000 0000                  	dc.l Map_SSWalls
0001C460 2142                       	dc.w $2142
0001C462 0000 0000                  	dc.l Map_SSWalls
0001C466 2142                       	dc.w $2142
0001C468 0000 0000                  	dc.l Map_SSWalls
0001C46C 2142                       	dc.w $2142
0001C46E 0000 0000                  	dc.l Map_SSWalls
0001C472 2142                       	dc.w $2142
0001C474 0000 0000                  	dc.l Map_SSWalls
0001C478 2142                       	dc.w $2142
0001C47A 0000 0000                  	dc.l Map_SSWalls
0001C47E 2142                       	dc.w $2142
0001C480 0000 0000                  	dc.l Map_SSWalls
0001C484 4142                       	dc.w $4142
0001C486 0000 0000                  	dc.l Map_SSWalls
0001C48A 4142                       	dc.w $4142
0001C48C 0000 0000                  	dc.l Map_SSWalls
0001C490 4142                       	dc.w $4142
0001C492 0000 0000                  	dc.l Map_SSWalls
0001C496 4142                       	dc.w $4142
0001C498 0000 0000                  	dc.l Map_SSWalls
0001C49C 4142                       	dc.w $4142
0001C49E 0000 0000                  	dc.l Map_SSWalls
0001C4A2 4142                       	dc.w $4142
0001C4A4 0000 0000                  	dc.l Map_SSWalls
0001C4A8 4142                       	dc.w $4142
0001C4AA 0000 0000                  	dc.l Map_SSWalls
0001C4AE 4142                       	dc.w $4142
0001C4B0 0000 0000                  	dc.l Map_SSWalls
0001C4B4 4142                       	dc.w $4142
0001C4B6 0000 0000                  	dc.l Map_SSWalls
0001C4BA 6142                       	dc.w $6142
0001C4BC 0000 0000                  	dc.l Map_SSWalls
0001C4C0 6142                       	dc.w $6142
0001C4C2 0000 0000                  	dc.l Map_SSWalls
0001C4C6 6142                       	dc.w $6142
0001C4C8 0000 0000                  	dc.l Map_SSWalls
0001C4CC 6142                       	dc.w $6142
0001C4CE 0000 0000                  	dc.l Map_SSWalls
0001C4D2 6142                       	dc.w $6142
0001C4D4 0000 0000                  	dc.l Map_SSWalls
0001C4D8 6142                       	dc.w $6142
0001C4DA 0000 0000                  	dc.l Map_SSWalls
0001C4DE 6142                       	dc.w $6142
0001C4E0 0000 0000                  	dc.l Map_SSWalls
0001C4E4 6142                       	dc.w $6142
0001C4E6 0000 0000                  	dc.l Map_SSWalls
0001C4EA 6142                       	dc.w $6142
0001C4EC 0000 F540                  	dc.l Map_obj47
0001C4F0 023B                       	dc.w $23B
0001C4F2 0000 0000                  	dc.l Map_SS_R
0001C4F6 0570                       	dc.w $570
0001C4F8 0000 0000                  	dc.l Map_SS_R
0001C4FC 0251                       	dc.w $251
0001C4FE 0000 0000                  	dc.l Map_SS_R
0001C502 0370                       	dc.w $370
0001C504 0000 0000                  	dc.l Map_SS_Up
0001C508 0263                       	dc.w $263
0001C50A 0000 0000                  	dc.l Map_SS_Down
0001C50E 0263                       	dc.w $263
0001C510 0000 0000                  	dc.l Map_SS_R
0001C514 22F0                       	dc.w $22F0
0001C516 0000 0000                  	dc.l Map_SS_Glass
0001C51A 0470                       	dc.w $470
0001C51C 0000 0000                  	dc.l Map_SS_Glass
0001C520 05F0                       	dc.w $5F0
0001C522 0000 0000                  	dc.l Map_SS_Glass
0001C526 65F0                       	dc.w $65F0
0001C528 0000 0000                  	dc.l Map_SS_Glass
0001C52C 25F0                       	dc.w $25F0
0001C52E 0000 0000                  	dc.l Map_SS_Glass
0001C532 45F0                       	dc.w $45F0
0001C534 0000 0000                  	dc.l Map_SS_R
0001C538 02F0                       	dc.w $2F0
0001C53A 0100 F540                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C53E 023B                       	dc.w $23B
0001C540 0200 F540                  	dc.l Map_obj47+$2000000
0001C544 023B                       	dc.w $23B
0001C546 0000 0000                  	dc.l Map_SS_R
0001C54A 0797                       	dc.w $797
0001C54C 0000 0000                  	dc.l Map_SS_R
0001C550 07A0                       	dc.w $7A0
0001C552 0000 0000                  	dc.l Map_SS_R
0001C556 07A9                       	dc.w $7A9
0001C558 0000 0000                  	dc.l Map_SS_R
0001C55C 0797                       	dc.w $797
0001C55E 0000 0000                  	dc.l Map_SS_R
0001C562 07A0                       	dc.w $7A0
0001C564 0000 0000                  	dc.l Map_SS_R
0001C568 07A9                       	dc.w $7A9
0001C56A 0000 A838                  	dc.l Map_obj25
0001C56E 27B2                       	dc.w $27B2
0001C570 0000 0000                  	dc.l Map_SS_Chaos3
0001C574 0770                       	dc.w $770
0001C576 0000 0000                  	dc.l Map_SS_Chaos3
0001C57A 2770                       	dc.w $2770
0001C57C 0000 0000                  	dc.l Map_SS_Chaos3
0001C580 4770                       	dc.w $4770
0001C582 0000 0000                  	dc.l Map_SS_Chaos3
0001C586 6770                       	dc.w $6770
0001C588 0000 0000                  	dc.l Map_SS_Chaos1
0001C58C 0770                       	dc.w $770
0001C58E 0000 0000                  	dc.l Map_SS_Chaos2
0001C592 0770                       	dc.w $770
0001C594 0000 0000                  	dc.l Map_SS_R
0001C598 04F0                       	dc.w $4F0
0001C59A 0400 A838                  	dc.l Map_obj25+$4000000
0001C59E 27B2                       	dc.w $27B2
0001C5A0 0500 A838                  	dc.l Map_obj25+$5000000
0001C5A4 27B2                       	dc.w $27B2
0001C5A6 0600 A838                  	dc.l Map_obj25+$6000000
0001C5AA 27B2                       	dc.w $27B2
0001C5AC 0700 A838                  	dc.l Map_obj25+$7000000
0001C5B0 27B2                       	dc.w $27B2
0001C5B2 0000 0000                  	dc.l Map_SS_Glass
0001C5B6 23F0                       	dc.w $23F0
0001C5B8 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C5BC 23F0                       	dc.w $23F0
0001C5BE 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C5C2 23F0                       	dc.w $23F0
0001C5C4 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C5C8 23F0                       	dc.w $23F0
0001C5CA 0000 0000                  	dc.l Map_SS_R+$2000000
0001C5CE 04F0                       	dc.w $4F0
0001C5D0 0000 0000                  	dc.l Map_SS_Glass
0001C5D4 05F0                       	dc.w $5F0
0001C5D6 0000 0000                  	dc.l Map_SS_Glass
0001C5DA 65F0                       	dc.w $65F0
0001C5DC 0000 0000                  	dc.l Map_SS_Glass
0001C5E0 25F0                       	dc.w $25F0
0001C5E2 0000 0000                  	dc.l Map_SS_Glass
0001C5E6 45F0                       	dc.w $45F0
0001C5E6 45F0                       	dc.w $45F0
0001C5E8                            
0001C5E8                            ; ---------------------------------------------------------------------------
0001C5E8                            ; Sprite mappings - special stage "R" block
0001C5E8                            ; ---------------------------------------------------------------------------
0001C5E8                            Map_SS_R:
0001C5E8                            	include "_maps\SSRblock.asm"
0001C5E8                            ; ---------------------------------------------------------------------------
0001C5E8                            ; Sprite mappings - special stage "R" block
0001C5E8                            ; ---------------------------------------------------------------------------
0001C5E8 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C5EC 0000                       		dc.w byte_1B91E-Map_SS_R
0001C5EE 01                         byte_1B912:	dc.b 1
0001C5EF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C5F4 01                         byte_1B918:	dc.b 1
0001C5F5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C5FA 00                         byte_1B91E:	dc.b 0
0001C5FC 00                         		even
0001C5FC 00                         		even
0001C5FC                            
0001C5FC                            ; ---------------------------------------------------------------------------
0001C5FC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C5FC                            ; ---------------------------------------------------------------------------
0001C5FC                            Map_SS_Glass:
0001C5FC                            	include "_maps\SSglassblock.asm"
0001C5FC                            ; ---------------------------------------------------------------------------
0001C5FC                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C5FC                            ; ---------------------------------------------------------------------------
0001C5FC 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C600 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C604 01                         byte_1B928:	dc.b 1
0001C605 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C60A 01                         byte_1B92E:	dc.b 1
0001C60B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C610 01                         byte_1B934:	dc.b 1
0001C611 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C616 01                         byte_1B93A:	dc.b 1
0001C617 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C61C                            		even
0001C61C                            		even
0001C61C                            
0001C61C                            ; ---------------------------------------------------------------------------
0001C61C                            ; Sprite mappings - special stage "UP" block
0001C61C                            ; ---------------------------------------------------------------------------
0001C61C                            Map_SS_Up:
0001C61C                            	include "_maps\SSUPblock.asm"
0001C61C                            ; ---------------------------------------------------------------------------
0001C61C                            ; Sprite mappings - special stage "UP" block
0001C61C                            ; ---------------------------------------------------------------------------
0001C61C 0000                       		dc.w byte_1B944-Map_SS_Up
0001C61E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C620 01                         byte_1B944:	dc.b 1
0001C621 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C626 01                         byte_1B94A:	dc.b 1
0001C627 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C62C                            		even
0001C62C                            		even
0001C62C                            
0001C62C                            ; ---------------------------------------------------------------------------
0001C62C                            ; Sprite mappings - special stage "DOWN" block
0001C62C                            ; ---------------------------------------------------------------------------
0001C62C                            Map_SS_Down:
0001C62C                            	include "_maps\SSDOWNblock.asm"
0001C62C                            ; ---------------------------------------------------------------------------
0001C62C                            ; Sprite mappings - special stage "DOWN" block
0001C62C                            ; ---------------------------------------------------------------------------
0001C62C 0000                       		dc.w byte_1B954-Map_SS_Down
0001C62E 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C630 01                         byte_1B954:	dc.b 1
0001C631 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C636 01                         byte_1B95A:	dc.b 1
0001C637 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C63C                            		even
0001C63C                            		even
0001C63C                            
0001C63C                            ; ---------------------------------------------------------------------------
0001C63C                            ; Sprite mappings - special stage chaos	emeralds
0001C63C                            ; ---------------------------------------------------------------------------
0001C63C 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C63E 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C640 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C642 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C644 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C646 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C648 01                         byte_1B96C:	dc.b 1
0001C649 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C64E 01                         byte_1B972:	dc.b 1
0001C64F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C654 01                         byte_1B978:	dc.b 1
0001C655 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C65A 01                         byte_1B97E:	dc.b 1
0001C65B F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C660                            		even
0001C660                            ; ===========================================================================
0001C660                            ; ---------------------------------------------------------------------------
0001C660                            ; Object 09 - Sonic (special stage)
0001C660                            ; ---------------------------------------------------------------------------
0001C660                            
0001C660                            Obj09:					; XREF: Obj_Index
0001C660                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C660                            ;		beq.s	Obj09_Normal	; if not, branch
0001C660 6100 0000                  		bsr.w	SS_FixCamera
0001C664                            ;		bra.w	DebugMode
0001C664                            ; ===========================================================================
0001C664                            
0001C664                            Obj09_Normal:
0001C664 7000                       		moveq	#0,d0
0001C666 1028 0024                  		move.b	$24(a0),d0
0001C66A 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C66E 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C672                            ; ===========================================================================
0001C672 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C674 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C676 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C678 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C67A                            ; ===========================================================================
0001C67A                            
0001C67A                            Obj09_Main:				; XREF: Obj09_Index
0001C67A 5428 0024                  		addq.b	#2,$24(a0)
0001C67E 117C 000E 0016             		move.b	#$E,$16(a0)
0001C684 117C 0007 0017             		move.b	#7,$17(a0)
0001C68A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C692 317C 0780 0002             		move.w	#$780,2(a0)
0001C698 117C 0004 0001             		move.b	#4,1(a0)
0001C69E 117C 0000 0018             		move.b	#0,$18(a0)
0001C6A4 117C 0002 001C             		move.b	#2,$1C(a0)
0001C6AA 08E8 0002 0022             		bset	#2,$22(a0)
0001C6B0 08E8 0001 0022             		bset	#1,$22(a0)
0001C6B6                            
0001C6B6                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C6B6                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C6B6                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C6B6                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001C6B6                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001C6B6                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C6B6                            
0001C6B6                            Obj09_NoDebug:
0001C6B6 117C 0000 0030             		move.b	#0,$30(a0)
0001C6BC 7000                       		moveq	#0,d0
0001C6BE 1028 0022                  		move.b	$22(a0),d0
0001C6C2 0240 0002                  		andi.w	#2,d0
0001C6C6 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C6CA 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C6CE 4EBA 8086                  		jsr	LoadSonicDynPLC
0001C6D2 4EF9 0000 E04C             		jmp	DisplaySprite
0001C6D8                            ; ===========================================================================
0001C6D8 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C6DA 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C6DC                            ; ===========================================================================
0001C6DC                            
0001C6DC                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C6DC 6100 0000                  		bsr.w	Obj09_Rise
0001C6E0 6100 0000                  		bsr.w	Obj09_Move
0001C6E4 6100 0000                  		bsr.w	Obj09_Fall
0001C6E8 6000                       		bra.s	Obj09_Display
0001C6EA                            ; ===========================================================================
0001C6EA                            
0001C6EA                            Obj09_InAir:				; XREF: Obj09_Modes
0001C6EA 6100 0000                  		bsr.w	Obj09_Rise
0001C6EE 6100 0000                  		bsr.w	Obj09_Move
0001C6F2 6100 0000                  		bsr.w	Obj09_Fall
0001C6F6                            
0001C6F6                            Obj09_Display:				; XREF: Obj09_OnWall
0001C6F6 6100 0000                  		bsr.w	Obj09_ChkItems
0001C6FA 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C6FE 4EB9 0000 E026             		jsr	SpeedToPos
0001C704 6100 0000                  		bsr.w	SS_FixCamera
0001C708 3038 F780                  		move.w	($FFFFF780).w,d0
0001C70C D078 F782                  		add.w	($FFFFF782).w,d0
0001C710 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C714 4EB9 0001 44B0             		jsr	Sonic_Animate
0001C71A 4E75                       		rts	
0001C71C                            
0001C71C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C71C                            
0001C71C                            
0001C71C                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C71C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C722 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C724 4A78 F784                          tst.w   ($FFFFF784).w
0001C728 6600                               bne.s   @corereverse1
0001C72A 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C72E 6000                               bra.s   Obj09_ChkRight          
0001C730                            
0001C730                            @corereverse1:
0001C730 6100 0000                          bsr.w	Obj09_MoveRight
0001C734                            
0001C734                            Obj09_ChkRight:
0001C734 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C73A 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001C73C 4A78 F784                          tst.w   ($FFFFF784).w
0001C740 6600                               bne.s   @corereverse2
0001C742 6100 0000                  		bsr.w	Obj09_MoveRight
0001C746 6000                               bra.s   Obj09_MoveSpeed 
0001C748                            
0001C748                            @corereverse2:
0001C748 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001C74C                            
0001C74C                            Obj09_MoveSpeed:
0001C74C 1038 F602                  		move.b	($FFFFF602).w,d0
0001C750 0200 000C                  		andi.b	#$C,d0
0001C754 6600                       		bne.s	Obj09_MoveCollision
0001C756 3028 0010                  		move.w	$10(a0),d0
0001C75A 6700                       		beq.s	Obj09_MoveCollision
0001C75C 317C 0000 0010             		move.w	#0,$10(a0)
0001C762                            
0001C762                            Obj09_MoveCollision:
0001C762 1038 F780                  		move.b	($FFFFF780).w,d0
0001C766 0600 0020                  		addi.b	#$20,d0
0001C76A 0200 00C0                  		andi.b	#$C0,d0
0001C76E 4400                       		neg.b	d0
0001C770 4EB9 0000 2D34             		jsr	(CalcSine).l
0001C776 C3E8 0010                  		muls.w	$10(a0),d1
0001C77A D3A8 0008                  		add.l	d1,8(a0)
0001C77E C1E8 0012                  		muls.w	$12(a0),d0
0001C782 D1A8 000C                  		add.l	d0,$C(a0)
0001C786 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C78A 2428 000C                  		move.l	$C(a0),d2
0001C78E 2628 0008                  		move.l	8(a0),d3
0001C792 6100 0000                  		bsr.w	sub_1BCE8
0001C796 6700                       		beq.s	loc_1BAF2
0001C798 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C79C 93A8 0008                  		sub.l	d1,8(a0)
0001C7A0 91A8 000C                  		sub.l	d0,$C(a0)
0001C7A4 317C 0000 0010             		move.w	#0,$10(a0)
0001C7AA 4E75                       		rts	
0001C7AC                            ; ===========================================================================
0001C7AC                            
0001C7AC                            loc_1BAF2:
0001C7AC 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C7B0 4E75                       		rts	
0001C7B2                            ; End of function Obj09_Move
0001C7B2                            
0001C7B2                            
0001C7B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7B2                            
0001C7B2                            
0001C7B2                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C7B2 08E8 0000 0022             		bset	#0,$22(a0)
0001C7B8 4240                               clr.w   d0
0001C7BA 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7BE D040                               add.w   d0,d0
0001C7C0 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C7C6 4468 0010                          neg.w   $10(a0)
0001C7CA 4E75                               rts
0001C7CC                            
0001C7CC                            ; End of function Obj09_MoveLeft
0001C7CC                            
0001C7CC                            
0001C7CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7CC                            
0001C7CC                            
0001C7CC                            Obj09_MoveRight:
0001C7CC 08A8 0000 0022             		bclr	#0,$22(a0)
0001C7D2 4240                               clr.w   d0
0001C7D4 3038 F786                          move.w  ($FFFFF786).w,d0
0001C7D8 D040                               add.w   d0,d0
0001C7DA 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001C7E0 4E75                       		rts
0001C7E2                            
0001C7E2                            ; End of function Obj09_MoveRight
0001C7E2                            
0001C7E2                            ; ---------------------------------------------------------------------------
0001C7E2                            
0001C7E2                            SS_XSpdIndex:
0001C7E2 0032                       		dc.w 50
0001C7E4 0064                       		dc.w 100
0001C7E6 0096                       		dc.w 150
0001C7E8 00C8                       		dc.w 200
0001C7EA 00FA                       		dc.w 250
0001C7EC                            
0001C7EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7EC                            
0001C7EC                            
0001C7EC                            Obj09_Rise:				; XREF: Obj09_OnWall
0001C7EC 0838 0000 F602             		btst	#0,($FFFFF602).w
0001C7F2 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001C7F4 4A78 F784                          tst.w   ($FFFFF784).w
0001C7F8 6600 0000                          bne.w   @corereverse1
0001C7FC 6100 0000                  		bsr.w	Obj09_MoveUp
0001C800 6000                               bra.s   Obj09_NoRise
0001C802                            
0001C802                            @corereverse1:
0001C802 6100 0000                  		bsr.w	Obj09_Falling 
0001C806                                    
0001C806                            Obj09_NoRise:
0001C806 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001C80C 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001C80E 4A78 F784                          tst.w   ($FFFFF784).w
0001C812 6600 0000                          bne.w   @corereverse2
0001C816 6100 0000                  		bsr.w	Obj09_Falling			;	
0001C81A 6000                               bra.s   Obj09_MoveYSpeed
0001C81C                            
0001C81C                            @corereverse2:
0001C81C 6100 0000                  		bsr.w	Obj09_MoveUp
0001C820                            		
0001C820                            Obj09_MoveYSpeed:
0001C820 1038 F602                  		move.b	($FFFFF602).w,d0
0001C824 0200 0003                  		andi.b	#3,d0
0001C828 6600                       		bne.s	Obj09_MoveYCollision
0001C82A 3028 0012                  		move.w	$12(a0),d0
0001C82E 6700                       		beq.s	Obj09_MoveYCollision
0001C830 317C 0000 0012             		move.w	#0,$12(a0)
0001C836                            
0001C836                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001C836 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001C83A 0600 0020                  		addi.b	#$20,d0					;	?
0001C83E 0200 00C0                  		andi.b	#$C0,d0					;	
0001C842 4400                       		neg.b	d0						;	?
0001C844 4EB9 0000 2D34             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001C84A C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001C84E D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001C852 C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001C856 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001C85A 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001C85E 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001C862 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001C866 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001C86A 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001C86E 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001C872 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001C876 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001C87A 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001C880 4E75                       		rts								;	end routine
0001C882                            
0001C882                            Obj09_MoveUp:
0001C882 4240                               clr.w   d0
0001C884 3038 F786                          move.w  ($FFFFF786).w,d0
0001C888 D040                               add.w   d0,d0
0001C88A 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C890 4468 0012                          neg.w   $12(a0)
0001C894 4E75                               rts
0001C896                            
0001C896                            Obj09_Falling:
0001C896 4240                               clr.w   d0
0001C898 3038 F786                          move.w  ($FFFFF786).w,d0
0001C89C D040                               add.w   d0,d0
0001C89E 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001C8A4 4E75                       		rts
0001C8A6                            ; End of function Obj09_Jump
0001C8A6                            
0001C8A6                            ; ---------------------------------------------------------------------------
0001C8A6                            SS_YSpdIndex:
0001C8A6 0080                       		dc.w $80
0001C8A8 0100                       		dc.w $100
0001C8AA 0180                       		dc.w $180
0001C8AC 0200                       		dc.w $200
0001C8AE 0280                       		dc.w $280
0001C8B0                            
0001C8B0                            
0001C8B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8B0                            
0001C8B0                            
0001C8B0                            nullsub_2:				; XREF: Obj09_InAir
0001C8B0 4E75                       		rts	
0001C8B2                            ; End of function nullsub_2
0001C8B2                            
0001C8B2                            ; ===========================================================================
0001C8B2                            ; ---------------------------------------------------------------------------
0001C8B2                            ; unused subroutine to limit Sonic's upward vertical speed
0001C8B2                            ; ---------------------------------------------------------------------------
0001C8B2 323C FC00                  		move.w	#-$400,d1
0001C8B6 B268 0012                  		cmp.w	$12(a0),d1
0001C8BA 6F00                       		ble.s	locret_1BBB4
0001C8BC 1038 F602                  		move.b	($FFFFF602).w,d0
0001C8C0 0200 0070                  		andi.b	#$70,d0
0001C8C4 6600                       		bne.s	locret_1BBB4
0001C8C6 3141 0012                  		move.w	d1,$12(a0)
0001C8CA                            
0001C8CA                            locret_1BBB4:
0001C8CA 4E75                       		rts	
0001C8CC                            ; ---------------------------------------------------------------------------
0001C8CC                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C8CC                            ; ---------------------------------------------------------------------------
0001C8CC                            
0001C8CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8CC                            
0001C8CC                            
0001C8CC                            SS_FixCamera:				; XREF: Obj09
0001C8CC 3428 000C                  		move.w	$C(a0),d2
0001C8D0 3628 0008                  		move.w	8(a0),d3
0001C8D4 3038 F700                  		move.w	($FFFFF700).w,d0
0001C8D8 0443 00A0                  		subi.w	#$A0,d3
0001C8DC 6500                       		bcs.s	loc_1BBCE
0001C8DE 9043                       		sub.w	d3,d0
0001C8E0 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C8E4                            
0001C8E4                            loc_1BBCE:
0001C8E4 3038 F704                  		move.w	($FFFFF704).w,d0
0001C8E8 0442 0070                  		subi.w	#$70,d2
0001C8EC 6500                       		bcs.s	locret_1BBDE
0001C8EE 9042                       		sub.w	d2,d0
0001C8F0 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C8F4                            
0001C8F4                            locret_1BBDE:
0001C8F4 4E75                       		rts	
0001C8F6                            ; End of function SS_FixCamera
0001C8F6                            
0001C8F6                            ; ===========================================================================
0001C8F6                            
0001C8F6                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C8F6 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C8FC 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C902 6600                       		bne.s	loc_1BBF4
0001C904 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C90A                            
0001C90A                            loc_1BBF4:
0001C90A 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C910 6D00                       		blt.s	loc_1BC12
0001C912 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C918                            ;		move.w	#$4000,($FFFFF780).w
0001C918 5428 0024                  		addq.b	#2,$24(a0)
0001C91C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C922                            
0001C922                            loc_1BC12:
0001C922                            ;		move.w	($FFFFF780).w,d0
0001C922                            ;		add.w	($FFFFF782).w,d0
0001C922                            ;		move.w	d0,($FFFFF780).w
0001C922 4EB9 0001 44B0             		jsr	Sonic_Animate
0001C928 4EB9 0001 4756             		jsr	LoadSonicDynPLC
0001C92E 6100 FF9C                  		bsr.w	SS_FixCamera
0001C932 4EF9 0000 E04C             		jmp	DisplaySprite
0001C938                            ; ===========================================================================
0001C938                            
0001C938                            Obj09_Exit2:				; XREF: Obj09_Index
0001C938 5368 0038                  		subq.w	#1,$38(a0)
0001C93C 6600                       		bne.s	loc_1BC40
0001C93E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C944                            
0001C944                            loc_1BC40:
0001C944 4EB9 0001 44B0             		jsr	Sonic_Animate
0001C94A 4EB9 0001 4756             		jsr	LoadSonicDynPLC
0001C950 6100 FF7A                  		bsr.w	SS_FixCamera
0001C954 4EF9 0000 E04C             		jmp	DisplaySprite
0001C95A                            
0001C95A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C95A                            
0001C95A                            
0001C95A                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C95A 2428 000C                  		move.l	$C(a0),d2
0001C95E 2628 0008                  		move.l	8(a0),d3
0001C962 1038 F780                  		move.b	($FFFFF780).w,d0
0001C966 0200 00FC                  		andi.b	#$FC,d0
0001C96A 4EB9 0000 2D34             		jsr	(CalcSine).l
0001C970 3828 0010                  		move.w	$10(a0),d4
0001C974 48C4                       		ext.l	d4
0001C976 E184                       		asl.l	#8,d4
0001C978 C1FC 002A                  		muls.w	#$2A,d0
0001C97C D084                       		add.l	d4,d0
0001C97E 3828 0012                  		move.w	$12(a0),d4
0001C982 48C4                       		ext.l	d4
0001C984 E184                       		asl.l	#8,d4
0001C986 C3FC 002A                  		muls.w	#$2A,d1
0001C98A D284                       		add.l	d4,d1
0001C98C 7A00                       		moveq	#0,d5
0001C98E 3A28 0010                  		move.w	$10(a0),d5
0001C992 6700                       		beq.s	Obj09_NoXFall
0001C994 D680                       		add.l	d0,d3
0001C996 6100 0000                  		bsr.w	sub_1BCE8
0001C99A 6700                       		beq.s	loc_1BCB0
0001C99C 9680                       		sub.l	d0,d3
0001C99E 7000                       		moveq	#0,d0
0001C9A0 3140 0010                  		move.w	d0,$10(a0)
0001C9A4 08A8 0001 0022             		bclr	#1,$22(a0)
0001C9AA                            
0001C9AA                            Obj09_NoXFall
0001C9AA 7C00                       		moveq	#0,d6
0001C9AC 3C28 0012                  		move.w	$12(a0),d6
0001C9B0 6700                       		beq.s	Obj09_NoYFall
0001C9B2 D481                       		add.l	d1,d2
0001C9B4 6100 0000                  		bsr.w	sub_1BCE8
0001C9B8 6700                       		beq.s	loc_1BCC6
0001C9BA 9481                       		sub.l	d1,d2
0001C9BC 7200                       		moveq	#0,d1
0001C9BE 3141 0012                  		move.w	d1,$12(a0)
0001C9C2 4E75                       		rts	
0001C9C4                            ; ===========================================================================
0001C9C4                            
0001C9C4                            loc_1BCB0:
0001C9C4 7C00                       		moveq	#0,d6
0001C9C6 3C28 0012                  		move.w	$12(a0),d6
0001C9CA 6700                       		beq.s	Obj09_NoYFall
0001C9CC D481                       		add.l	d1,d2
0001C9CE 6100 0000                  		bsr.w	sub_1BCE8
0001C9D2 6700                       		beq.s	loc_1BCD4
0001C9D4 9481                       		sub.l	d1,d2
0001C9D6 7200                       		moveq	#0,d1
0001C9D8 3141 0012                  		move.w	d1,$12(a0)
0001C9DC 08A8 0001 0022             		bclr	#1,$22(a0)
0001C9E2                            
0001C9E2                            loc_1BCC6:
0001C9E2 E080                       		asr.l	#8,d0
0001C9E4 E081                       		asr.l	#8,d1
0001C9E6 3140 0010                  		move.w	d0,$10(a0)
0001C9EA 3141 0012                  		move.w	d1,$12(a0)
0001C9EE 4E75                       		rts	
0001C9F0                            ; ===========================================================================
0001C9F0                            
0001C9F0                            loc_1BCD4:
0001C9F0 E080                       		asr.l	#8,d0
0001C9F2 E081                       		asr.l	#8,d1
0001C9F4 3140 0010                  		move.w	d0,$10(a0)
0001C9F8 3141 0012                  		move.w	d1,$12(a0)
0001C9FC 08E8 0001 0022             		bset	#1,$22(a0)
0001CA02 4E75                       		rts	
0001CA04                            
0001CA04                            Obj09_NoYFall:
0001CA04 4E75                       		rts
0001CA06                            ; End of function Obj09_Fall
0001CA06                            
0001CA06                            
0001CA06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA06                            
0001CA06                            
0001CA06                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001CA06 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CA0C 7800                       		moveq	#0,d4
0001CA0E 4842                       		swap	d2
0001CA10 3802                       		move.w	d2,d4
0001CA12 4842                       		swap	d2
0001CA14 0644 0044                  		addi.w	#$44,d4
0001CA18 88FC 0018                  		divu.w	#$18,d4
0001CA1C C8FC 0080                  		mulu.w	#$80,d4
0001CA20 D3C4                       		adda.l	d4,a1
0001CA22 7800                       		moveq	#0,d4
0001CA24 4843                       		swap	d3
0001CA26 3803                       		move.w	d3,d4
0001CA28 4843                       		swap	d3
0001CA2A 0644 0014                  		addi.w	#$14,d4
0001CA2E 88FC 0018                  		divu.w	#$18,d4
0001CA32 D2C4                       		adda.w	d4,a1
0001CA34 7A00                       		moveq	#0,d5
0001CA36 1819                       		move.b	(a1)+,d4
0001CA38 6100                       		bsr.s	sub_1BD30
0001CA3A 1819                       		move.b	(a1)+,d4
0001CA3C 6100                       		bsr.s	sub_1BD30
0001CA3E D2FC 007E                  		adda.w	#$7E,a1
0001CA42 1819                       		move.b	(a1)+,d4
0001CA44 6100                       		bsr.s	sub_1BD30
0001CA46 1819                       		move.b	(a1)+,d4
0001CA48 6100                       		bsr.s	sub_1BD30
0001CA4A 4A05                       		tst.b	d5
0001CA4C 4E75                       		rts	
0001CA4E                            ; End of function sub_1BCE8
0001CA4E                            
0001CA4E                            
0001CA4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA4E                            
0001CA4E                            
0001CA4E                            sub_1BD30:				; XREF: sub_1BCE8
0001CA4E 6700                       		beq.s	locret_1BD44
0001CA50 0C04 0028                  		cmpi.b	#$28,d4
0001CA54 6500                       		blo.s	loc_1BD46
0001CA56 0C04 004B                  		cmpi.b	#$4B,d4
0001CA5A 6400                       		bhs.s	loc_1BD46
0001CA5C 0C04 003A                  		cmpi.b	#$3A,d4
0001CA60 6400                       		bhs.s	locret_1BD44
0001CA62 0C04 002C                  		cmpi.b	#$2C,d4
0001CA66 6400                       		bhs.s	loc_1BD46
0001CA68                            
0001CA68                            locret_1BD44:
0001CA68 4E75                       		rts	
0001CA6A                            ; ===========================================================================
0001CA6A                            
0001CA6A                            loc_1BD46:
0001CA6A 1144 0030                  		move.b	d4,$30(a0)
0001CA6E 2149 0032                  		move.l	a1,$32(a0)
0001CA72 7AFF                       		moveq	#-1,d5
0001CA74 4E75                       		rts	
0001CA76                            ; End of function sub_1BD30
0001CA76                            
0001CA76                            
0001CA76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA76                            
0001CA76                            
0001CA76                            Obj09_ChkItems:				; XREF: Obj09_Display
0001CA76 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CA7C 7800                       		moveq	#0,d4
0001CA7E 3828 000C                  		move.w	$C(a0),d4
0001CA82 0644 0050                  		addi.w	#$50,d4
0001CA86 88FC 0018                  		divu.w	#$18,d4
0001CA8A C8FC 0080                  		mulu.w	#$80,d4
0001CA8E D3C4                       		adda.l	d4,a1
0001CA90 7800                       		moveq	#0,d4
0001CA92 3828 0008                  		move.w	8(a0),d4
0001CA96 0644 0020                  		addi.w	#$20,d4
0001CA9A 88FC 0018                  		divu.w	#$18,d4
0001CA9E D2C4                       		adda.w	d4,a1
0001CAA0 1811                       		move.b	(a1),d4
0001CAA2 6600                       		bne.s	Obj09_ChkCont
0001CAA4 4A28 003A                  		tst.b	$3A(a0)
0001CAA8 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001CAAC 7800                       		moveq	#0,d4
0001CAAE 4E75                       		rts	
0001CAB0                            ; ===========================================================================
0001CAB0                            
0001CAB0                            Obj09_ChkCont:
0001CAB0 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001CAB4 6600                       		bne.s	Obj09_Chk1Up
0001CAB6 6100 F6DE                  		bsr.w	SS_RemoveCollectedItem
0001CABA 6600                       		bne.s	Obj09_GetCont
0001CABC 14BC 0001                  		move.b	#1,(a2)
0001CAC0 2549 0004                  		move.l	a1,4(a2)
0001CAC4                            
0001CAC4                            Obj09_GetCont:
0001CAC4 4EB9 0000 A520             		jsr	CollectRing
0001CACA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001CAD0 6500                       		bcs.s	Obj09_NoCont
0001CAD2 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001CAD8 6600                       		bne.s	Obj09_NoCont
0001CADA 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001CADE 303C 00BF                  		move.w	#$BF,d0
0001CAE2 4EB9 0000 1594             		jsr	(PlaySound).l	; play extra continue sound
0001CAE8                            
0001CAE8                            Obj09_NoCont:
0001CAE8 7800                       		moveq	#0,d4
0001CAEA 4E75                       		rts	
0001CAEC                            ; ===========================================================================
0001CAEC                            
0001CAEC                            Obj09_Chk1Up:
0001CAEC 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001CAF0 6600                       		bne.s	Obj09_ChkEmer
0001CAF2 6100 F6A2                  		bsr.w	SS_RemoveCollectedItem
0001CAF6 6600                       		bne.s	Obj09_Get1Up
0001CAF8 14BC 0003                  		move.b	#3,(a2)
0001CAFC 2549 0004                  		move.l	a1,4(a2)
0001CB00                            
0001CB00                            Obj09_Get1Up:
0001CB00 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001CB04 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001CB08 303C 0088                  		move.w	#$88,d0
0001CB0C 4EB9 0000 1594             		jsr	(PlaySound).l	; play extra life music
0001CB12 7800                       		moveq	#0,d4
0001CB14 4E75                       		rts	
0001CB16                            ; ===========================================================================
0001CB16                            
0001CB16                            Obj09_ChkEmer:
0001CB16 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001CB1A 6500                       		bcs.s	Obj09_UPblock
0001CB1C 0C04 0040                  		cmpi.b	#$40,d4
0001CB20 6200                       		bhi.s	Obj09_UPblock
0001CB22 6100 F672                  		bsr.w	SS_RemoveCollectedItem
0001CB26 6600                       		bne.s	Obj09_GetEmer
0001CB28 14BC 0005                  		move.b	#5,(a2)
0001CB2C 2549 0004                  		move.l	a1,4(a2)
0001CB30                            
0001CB30                            Obj09_GetEmer:
0001CB30 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001CB36 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001CB38 0404 003B                  		subi.b	#$3B,d4
0001CB3C 7000                       		moveq	#0,d0
0001CB3E 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001CB42 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001CB46 1584 0000                  		move.b	d4,(a2,d0.w)
0001CB4A 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001CB4E                            
0001CB4E                            Obj09_NoEmer:
0001CB4E 303C 0093                  		move.w	#$93,d0
0001CB52 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play emerald music
0001CB58 7800                       		moveq	#0,d4
0001CB5A 4E75                       		rts	
0001CB5C                            
0001CB5C                            ; ===========================================================================
0001CB5C                            
0001CB5C                            Obj09_UPblock:
0001CB5C 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001CB60 6600                       		bne.s	Obj09_DOWNblock
0001CB62 6100 F632                  		bsr.w	SS_RemoveCollectedItem
0001CB66 6600                       		bne.s	Obj09_SpeedUp
0001CB68 14BC 0001                  		move.b	#1,(a2)
0001CB6C 2549 0004                  		move.l	a1,4(a2)
0001CB70                            
0001CB70                            Obj09_SpeedUp:
0001CB70 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001CB76 6400                       		bhs.s	Obj09_UPsnd
0001CB78 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001CB7C                            
0001CB7C                            Obj09_UPsnd:
0001CB7C 303C 00A9                  		move.w	#$A9,d0
0001CB80 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play up/down sound
0001CB86 7800                       		moveq	#0,d4
0001CB88 4E75                       		rts	
0001CB8A                            ; ===========================================================================
0001CB8A                            
0001CB8A                            Obj09_DOWNblock:
0001CB8A 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001CB8E 6600                       		bne.s	Obj09_Rblock
0001CB90 6100 F604                  		bsr.w	SS_RemoveCollectedItem
0001CB94 6600                       		bne.s	Obj09_SpeedDown
0001CB96 14BC 0001                  		move.b	#1,(a2)
0001CB9A 2549 0004                  		move.l	a1,4(a2)
0001CB9E                            
0001CB9E                            Obj09_SpeedDown:
0001CB9E 4A78 F786                  		tst.w 	($FFFFF786).w
0001CBA2 6700                       		beq.s	Obj09_DOWNsnd
0001CBA4 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001CBA8                            
0001CBA8                            Obj09_DOWNsnd:
0001CBA8 303C 00A9                  		move.w	#$A9,d0
0001CBAC 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play up/down sound
0001CBB2 7800                       		moveq	#0,d4
0001CBB4 4E75                       		rts	
0001CBB6                            ; ===========================================================================
0001CBB6                            
0001CBB6                            Obj09_Rblock:
0001CBB6 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001CBBA 6600                       		bne.s	Obj09_ChkGhost
0001CBBC 6100 F5D8                  		bsr.w	SS_RemoveCollectedItem
0001CBC0 6600                       		bne.s	Obj09_RevStage
0001CBC2 14BC 0001                  		move.b	#1,(a2)
0001CBC6 2549 0004                  		move.l	a1,4(a2)
0001CBCA                            
0001CBCA                            Obj09_RevStage:
0001CBCA 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001CBD0 103C 00A9                  		move.b	#$A9,d0
0001CBD4 4EB9 0000 159A             		jsr	(PlaySound_Special).l	; play sound
0001CBDA 7800                       		moveq	#0,d4
0001CBDC 4E75                       		rts	
0001CBDE                            
0001CBDE                            ; ===========================================================================
0001CBDE                            
0001CBDE                            Obj09_ChkGhost:
0001CBDE 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001CBE2 6600                       		bne.s	Obj09_ChkGhostTag
0001CBE4 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001CBEA                            
0001CBEA                            Obj09_ChkGhostTag:
0001CBEA 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001CBEE 6600                       		bne.s	Obj09_NoGhost
0001CBF0 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001CBF6 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001CBF8 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001CBFE                            
0001CBFE                            Obj09_NoGhost:
0001CBFE 78FF                       		moveq	#-1,d4
0001CC00 4E75                       		rts	
0001CC02                            ; ===========================================================================
0001CC02                            
0001CC02                            Obj09_MakeGhostSolid:
0001CC02 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001CC08 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001CC0A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CC10 723F                       		moveq	#$3F,d1
0001CC12                            
0001CC12                            Obj09_GhostLoop2:
0001CC12 743F                       		moveq	#$3F,d2
0001CC14                            
0001CC14                            Obj09_GhostLoop:
0001CC14 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001CC18 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001CC1A 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001CC1E                            
0001CC1E                            Obj09_NoReplace:
0001CC1E 5249                       		addq.w	#1,a1
0001CC20 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001CC24 43E9 0040                  		lea	$40(a1),a1
0001CC28 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001CC2C                            
0001CC2C                            Obj09_GhostNotSolid:
0001CC2C 4228 003A                  		clr.b	$3A(a0)
0001CC30 7800                       		moveq	#0,d4
0001CC32 4E75                       		rts	
0001CC34                            ; End of function Obj09_ChkItems
0001CC34                            
0001CC34                            
0001CC34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC34                            
0001CC34                            
0001CC34                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001CC34 1028 0030                  		move.b	$30(a0),d0
0001CC38 6600                       		bne.s	Obj09_GOAL
0001CC3A 5328 0036                  		subq.b	#1,$36(a0)
0001CC3E 6A00                       		bpl.s	loc_1BEA0
0001CC40 117C 0000 0036             		move.b	#0,$36(a0)
0001CC46                            
0001CC46                            loc_1BEA0:
0001CC46 5328 0037                  		subq.b	#1,$37(a0)
0001CC4A 6A00                       		bpl.s	locret_1BEAC
0001CC4C 117C 0000 0037             		move.b	#0,$37(a0)
0001CC52                            
0001CC52                            locret_1BEAC:
0001CC52 4E75                       		rts	
0001CC54                            ; ===========================================================================
0001CC54                            
0001CC54                            ; ===========================================================================
0001CC54                            
0001CC54                            Obj09_GOAL:
0001CC54 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001CC58 6600                       		bne.s	Obj09_ChkGlass
0001CC5A 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001CC5E 303C 00A8                  		move.w	#$A8,d0		; change item
0001CC62 4EB9 0000 159A             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001CC68 4E75                       		rts	
0001CC6A                            ; ===========================================================================
0001CC6A                            
0001CC6A                            ; ===========================================================================
0001CC6A                            
0001CC6A                            Obj09_ChkGlass:
0001CC6A 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001CC6E 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001CC70 0C00 002E                  		cmpi.b	#$2E,d0
0001CC74 6700                       		beq.s	Obj09_Glass
0001CC76 0C00 002F                  		cmpi.b	#$2F,d0
0001CC7A 6700                       		beq.s	Obj09_Glass
0001CC7C 0C00 0030                  		cmpi.b	#$30,d0
0001CC80 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001CC82                            
0001CC82                            Obj09_Glass:
0001CC82 6100 F512                  		bsr.w	SS_RemoveCollectedItem
0001CC86 6600                       		bne.s	Obj09_GlassSnd
0001CC88 14BC 0006                  		move.b	#6,(a2)
0001CC8C 2268 0032                  		movea.l	$32(a0),a1
0001CC90 5389                       		subq.l	#1,a1
0001CC92 2549 0004                  		move.l	a1,4(a2)
0001CC96 1011                       		move.b	(a1),d0
0001CC98 5200                       		addq.b	#1,d0		; change glass type when touched
0001CC9A 0C00 0030                  		cmpi.b	#$30,d0
0001CC9E 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001CCA0 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001CCA2                            
0001CCA2                            Obj09_GlassUpdate:
0001CCA2 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001CCA6                            
0001CCA6                            Obj09_GlassSnd:
0001CCA6 303C 00BA                  		move.w	#$BA,d0
0001CCAA 4EF9 0000 159A             		jmp	(PlaySound_Special).l ;	play glass block sound
0001CCB0                            ; ===========================================================================
0001CCB0                            
0001CCB0                            Obj09_NoGlass:
0001CCB0 4E75                       		rts	
0001CCB2                            ; End of function Obj09_ChkItems2
0001CCB2                            
0001CCB2                            ; ===========================================================================
0001CCB2                            ; ---------------------------------------------------------------------------
0001CCB2                            ; Object 10 - blank
0001CCB2                            ; ---------------------------------------------------------------------------
0001CCB2                            
0001CCB2                            Obj10:					; XREF: Obj_Index
0001CCB2 4E75                       		rts	
0001CCB4                            ; ---------------------------------------------------------------------------
0001CCB4                            ; Subroutine to	animate	level graphics
0001CCB4                            ; ---------------------------------------------------------------------------
0001CCB4                            
0001CCB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCB4                            
0001CCB4                            
0001CCB4                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001CCB4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CCB8 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001CCBA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CCC0 6100 0000                  		bsr.w	AniArt_GiantRing
0001CCC4 7000                       		moveq	#0,d0
0001CCC6 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CCCA D040                       		add.w	d0,d0
0001CCCC 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001CCD0 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001CCD4                            ; ===========================================================================
0001CCD4                            
0001CCD4                            AniArt_Pause:
0001CCD4 4E75                       		rts	
0001CCD6                            ; End of function AniArt_Load
0001CCD6                            
0001CCD6                            ; ===========================================================================
0001CCD6 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001CCDA 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001CCDE 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001CCE2 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001CCE6                            ; ===========================================================================
0001CCE6                            ; ---------------------------------------------------------------------------
0001CCE6                            ; Animated pattern routine - Green Hill
0001CCE6                            ; ---------------------------------------------------------------------------
0001CCE6                            
0001CCE6                            AniArt_GHZ:				; XREF: AniArt_Index
0001CCE6 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CCEA 6A00                       		bpl.s	loc_1C08A
0001CCEC 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001CCF2 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001CCF8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CCFC 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CD00 0240 0001                  		andi.w	#1,d0
0001CD04 6700                       		beq.s	loc_1C078
0001CD06 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001CD0A                            
0001CD0A                            loc_1C078:
0001CD0A 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001CD14 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001CD18 6000 0000                  		bra.w	LoadTiles
0001CD1C                            ; ===========================================================================
0001CD1C                            
0001CD1C                            loc_1C08A:
0001CD1C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CD20 6A00                       		bpl.s	loc_1C0C0
0001CD22 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001CD28 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CD2E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CD32 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CD36 0240 0001                  		andi.w	#1,d0
0001CD3A 6700                       		beq.s	loc_1C0AE
0001CD3C 43E9 0200                  		lea	$200(a1),a1
0001CD40                            
0001CD40                            loc_1C0AE:
0001CD40 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CD4A 323C 000F                  		move.w	#$F,d1
0001CD4E 6000 0000                  		bra.w	LoadTiles
0001CD52                            ; ===========================================================================
0001CD52                            
0001CD52                            loc_1C0C0:
0001CD52 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CD56 6A00                       		bpl.s	locret_1C10C
0001CD58 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CD5E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CD62 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CD66 0240 0003                  		andi.w	#3,d0
0001CD6A 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CD6E 0800 0000                  		btst	#0,d0
0001CD72 6600                       		bne.s	loc_1C0E8
0001CD74 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CD7A                            
0001CD7A                            loc_1C0E8:
0001CD7A EF48                       		lsl.w	#7,d0
0001CD7C 3200                       		move.w	d0,d1
0001CD7E D040                       		add.w	d0,d0
0001CD80 D041                       		add.w	d1,d0
0001CD82 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CD8C 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CD92 43F1 0000                  		lea	(a1,d0.w),a1
0001CD96 323C 000B                  		move.w	#$B,d1
0001CD9A 6100 0000                  		bsr.w	LoadTiles
0001CD9E                            
0001CD9E                            locret_1C10C:
0001CD9E 4E75                       		rts	
0001CDA0                            ; ===========================================================================
0001CDA0 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CDA4                            ; ===========================================================================
0001CDA4                            ; ---------------------------------------------------------------------------
0001CDA4                            ; Animated pattern routine - Marble
0001CDA4                            ; ---------------------------------------------------------------------------
0001CDA4                            
0001CDA4                            AniArt_MZ:				; XREF: AniArt_Index
0001CDA4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CDA8 6A00                       		bpl.s	loc_1C150
0001CDAA 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CDB0 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CDB6 7000                       		moveq	#0,d0
0001CDB8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CDBC 5200                       		addq.b	#1,d0
0001CDBE 0C00 0003                  		cmpi.b	#3,d0
0001CDC2 6600                       		bne.s	loc_1C134
0001CDC4 7000                       		moveq	#0,d0
0001CDC6                            
0001CDC6                            loc_1C134:
0001CDC6 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CDCA C0FC 0100                  		mulu.w	#$100,d0
0001CDCE D2C0                       		adda.w	d0,a1
0001CDD0 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CDDA 323C 0007                  		move.w	#7,d1
0001CDDE 6100 0000                  		bsr.w	LoadTiles
0001CDE2                            
0001CDE2                            loc_1C150:
0001CDE2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CDE6 6A00                       		bpl.s	loc_1C1AE
0001CDE8 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CDEE 7000                       		moveq	#0,d0
0001CDF0 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CDF4 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CDFA EE58                       		ror.w	#7,d0
0001CDFC D8C0                       		adda.w	d0,a4
0001CDFE 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CE08 7600                       		moveq	#0,d3
0001CE0A 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CE0E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CE12 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CE16 343C 0003                  		move.w	#3,d2
0001CE1A                            
0001CE1A                            loc_1C188:
0001CE1A 3003                       		move.w	d3,d0
0001CE1C D040                       		add.w	d0,d0
0001CE1E 0240 001E                  		andi.w	#$1E,d0
0001CE22 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CE28 3033 0000                  		move.w	(a3,d0.w),d0
0001CE2C 47F3 0000                  		lea	(a3,d0.w),a3
0001CE30 224C                       		movea.l	a4,a1
0001CE32 323C 001F                  		move.w	#$1F,d1
0001CE36 4E93                       		jsr	(a3)
0001CE38 5843                       		addq.w	#4,d3
0001CE3A 51CA FFDE                  		dbf	d2,loc_1C188
0001CE3E 4E75                       		rts	
0001CE40                            ; ===========================================================================
0001CE40                            
0001CE40                            loc_1C1AE:
0001CE40 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CE44 6A00 0000                  		bpl.w	locret_1C1EA
0001CE48 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CE4E 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CE54 7000                       		moveq	#0,d0
0001CE56 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CE5A 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CE5E 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CE64 C0FC 00C0                  		mulu.w	#$C0,d0
0001CE68 D2C0                       		adda.w	d0,a1
0001CE6A 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CE74 323C 0005                  		move.w	#5,d1
0001CE78 6000 0000                  		bra.w	LoadTiles
0001CE7C                            ; ===========================================================================
0001CE7C                            
0001CE7C                            locret_1C1EA:
0001CE7C 4E75                       		rts	
0001CE7E                            ; ===========================================================================
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E                            ; Animated pattern routine - Scrap Brain
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E                            
0001CE7E                            AniArt_SBZ:				; XREF: AniArt_Index
0001CE7E 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CE82 6700                       		beq.s	loc_1C1F8
0001CE84 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CE88 6000                       		bra.s	loc_1C250
0001CE8A                            ; ===========================================================================
0001CE8A                            
0001CE8A                            loc_1C1F8:
0001CE8A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CE8E 6A00                       		bpl.s	loc_1C250
0001CE90 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CE96 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CE9C 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CEA6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CEAA 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CEAE 0240 0007                  		andi.w	#7,d0
0001CEB2 6700                       		beq.s	loc_1C234
0001CEB4 5340                       		subq.w	#1,d0
0001CEB6 C0FC 0180                  		mulu.w	#$180,d0
0001CEBA 43F1 0000                  		lea	(a1,d0.w),a1
0001CEBE 323C 000B                  		move.w	#$B,d1
0001CEC2 6000 0000                  		bra.w	LoadTiles
0001CEC6                            ; ===========================================================================
0001CEC6                            
0001CEC6                            loc_1C234:
0001CEC6 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CECC                            
0001CECC                            loc_1C23A:
0001CECC 323C 0005                  		move.w	#5,d1
0001CED0 6100 0000                  		bsr.w	LoadTiles
0001CED4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CEDA 323C 0005                  		move.w	#5,d1
0001CEDE 6000 0000                  		bra.w	LoadTiles
0001CEE2                            ; ===========================================================================
0001CEE2                            
0001CEE2                            loc_1C250:
0001CEE2 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CEE6 6700                       		beq.s	loc_1C25C
0001CEE8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CEEC 6000                       		bra.s	locret_1C2A0
0001CEEE                            ; ===========================================================================
0001CEEE                            
0001CEEE                            loc_1C25C:
0001CEEE 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CEF2 6A00                       		bpl.s	locret_1C2A0
0001CEF4 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CEFA 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CF00 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CF0A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CF0E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CF12 0240 0007                  		andi.w	#7,d0
0001CF16 6700                       		beq.s	loc_1C298
0001CF18 5340                       		subq.w	#1,d0
0001CF1A C0FC 0180                  		mulu.w	#$180,d0
0001CF1E 43F1 0000                  		lea	(a1,d0.w),a1
0001CF22 323C 000B                  		move.w	#$B,d1
0001CF26 6000 0000                  		bra.w	LoadTiles
0001CF2A                            ; ===========================================================================
0001CF2A                            
0001CF2A                            loc_1C298:
0001CF2A 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CF30 609A                       		bra.s	loc_1C23A
0001CF32                            ; ===========================================================================
0001CF32                            
0001CF32                            locret_1C2A0:
0001CF32 4E75                       		rts	
0001CF34                            ; ===========================================================================
0001CF34                            ; ---------------------------------------------------------------------------
0001CF34                            ; Animated pattern routine - ending sequence
0001CF34                            ; ---------------------------------------------------------------------------
0001CF34                            
0001CF34                            AniArt_Ending:				; XREF: AniArt_Index
0001CF34 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CF38 6A00                       		bpl.s	loc_1C2F4
0001CF3A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CF40 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CF46 45F8 9400                  		lea	($FFFF9400).w,a2
0001CF4A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CF4E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CF52 0240 0001                  		andi.w	#1,d0
0001CF56 6700                       		beq.s	loc_1C2CE
0001CF58 43E9 0200                  		lea	$200(a1),a1
0001CF5C 45EA 0200                  		lea	$200(a2),a2
0001CF60                            
0001CF60                            loc_1C2CE:
0001CF60 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CF6A 323C 000F                  		move.w	#$F,d1
0001CF6E 6100 0000                  		bsr.w	LoadTiles
0001CF72 224A                       		movea.l	a2,a1
0001CF74 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CF7E 323C 000F                  		move.w	#$F,d1
0001CF82 6000 0000                  		bra.w	LoadTiles
0001CF86                            ; ===========================================================================
0001CF86                            
0001CF86                            loc_1C2F4:
0001CF86 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CF8A 6A00                       		bpl.s	loc_1C33C
0001CF8C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CF92 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CF96 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CF9A 0240 0007                  		andi.w	#7,d0
0001CF9E 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CFA2 EF48                       		lsl.w	#7,d0
0001CFA4 3200                       		move.w	d0,d1
0001CFA6 D040                       		add.w	d0,d0
0001CFA8 D041                       		add.w	d1,d0
0001CFAA 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CFB4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CFBA 43F1 0000                  		lea	(a1,d0.w),a1
0001CFBE 323C 000B                  		move.w	#$B,d1
0001CFC2 6000 0000                  		bra.w	LoadTiles
0001CFC6                            ; ===========================================================================
0001CFC6 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CFCE                            ; ===========================================================================
0001CFCE                            
0001CFCE                            loc_1C33C:
0001CFCE 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CFD2 6A00                       		bpl.s	loc_1C37A
0001CFD4 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CFDA 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CFDE 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CFE2 0240 0003                  		andi.w	#3,d0
0001CFE6 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CFEA E148                       		lsl.w	#8,d0
0001CFEC D040                       		add.w	d0,d0
0001CFEE 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CFF8 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CFFC 43F1 0000                  		lea	(a1,d0.w),a1
0001D000 323C 000F                  		move.w	#$F,d1
0001D004 6000 0000                  		bra.w	LoadTiles
0001D008                            ; ===========================================================================
0001D008 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D00C                            ; ===========================================================================
0001D00C                            
0001D00C                            loc_1C37A:
0001D00C 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D010 6A00                       		bpl.s	locret_1C3B4
0001D012 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D018 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D01C 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D020 0240 0003                  		andi.w	#3,d0
0001D024 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D028 E148                       		lsl.w	#8,d0
0001D02A D040                       		add.w	d0,d0
0001D02C 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D036 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D03A 43F1 0000                  		lea	(a1,d0.w),a1
0001D03E 323C 000F                  		move.w	#$F,d1
0001D042 6000 0000                  		bra.w	LoadTiles
0001D046                            ; ===========================================================================
0001D046                            
0001D046                            locret_1C3B4:
0001D046 4E75                       		rts	
0001D048                            ; ===========================================================================
0001D048                            
0001D048                            AniArt_none:				; XREF: AniArt_Index
0001D048 4E75                       		rts	
0001D04A                            
0001D04A                            ; ---------------------------------------------------------------------------
0001D04A                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D04A                            ; ---------------------------------------------------------------------------
0001D04A                            
0001D04A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D04A                            
0001D04A                            
0001D04A                            LoadTiles:
0001D04A 2C99                       		move.l	(a1)+,(a6)
0001D04C 2C99                       		move.l	(a1)+,(a6)
0001D04E 2C99                       		move.l	(a1)+,(a6)
0001D050 2C99                       		move.l	(a1)+,(a6)
0001D052 2C99                       		move.l	(a1)+,(a6)
0001D054 2C99                       		move.l	(a1)+,(a6)
0001D056 2C99                       		move.l	(a1)+,(a6)
0001D058 2C99                       		move.l	(a1)+,(a6)
0001D05A 51C9 FFEE                  		dbf	d1,LoadTiles
0001D05E 4E75                       		rts	
0001D060                            ; End of function LoadTiles
0001D060                            
0001D060                            ; ===========================================================================
0001D060                            ; ---------------------------------------------------------------------------
0001D060                            ; Animated pattern routine - more Marble Zone
0001D060                            ; ---------------------------------------------------------------------------
0001D060 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D064 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D068 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D06C 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D070 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D074 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D078 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D07C 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D080                            ; ===========================================================================
0001D080                            
0001D080                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D080 2C91                       		move.l	(a1),(a6)
0001D082 43E9 0010                  		lea	$10(a1),a1
0001D086 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D08A 4E75                       		rts	
0001D08C                            ; ===========================================================================
0001D08C                            
0001D08C                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D08C 2029 0002                  		move.l	2(a1),d0
0001D090 1029 0001                  		move.b	1(a1),d0
0001D094 E098                       		ror.l	#8,d0
0001D096 2C80                       		move.l	d0,(a6)
0001D098 43E9 0010                  		lea	$10(a1),a1
0001D09C 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D0A0 4E75                       		rts	
0001D0A2                            ; ===========================================================================
0001D0A2                            
0001D0A2                            loc_1C410:				; XREF: AniArt_MZextra
0001D0A2 2CA9 0002                  		move.l	2(a1),(a6)
0001D0A6 43E9 0010                  		lea	$10(a1),a1
0001D0AA 51C9 FFF6                  		dbf	d1,loc_1C410
0001D0AE 4E75                       		rts	
0001D0B0                            ; ===========================================================================
0001D0B0                            
0001D0B0                            loc_1C41E:				; XREF: AniArt_MZextra
0001D0B0 2029 0004                  		move.l	4(a1),d0
0001D0B4 1029 0003                  		move.b	3(a1),d0
0001D0B8 E098                       		ror.l	#8,d0
0001D0BA 2C80                       		move.l	d0,(a6)
0001D0BC 43E9 0010                  		lea	$10(a1),a1
0001D0C0 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D0C4 4E75                       		rts	
0001D0C6                            ; ===========================================================================
0001D0C6                            
0001D0C6                            loc_1C434:				; XREF: AniArt_MZextra
0001D0C6 2CA9 0004                  		move.l	4(a1),(a6)
0001D0CA 43E9 0010                  		lea	$10(a1),a1
0001D0CE 51C9 FFF6                  		dbf	d1,loc_1C434
0001D0D2 4E75                       		rts	
0001D0D4                            ; ===========================================================================
0001D0D4                            
0001D0D4                            loc_1C442:				; XREF: AniArt_MZextra
0001D0D4 2029 0006                  		move.l	6(a1),d0
0001D0D8 1029 0005                  		move.b	5(a1),d0
0001D0DC E098                       		ror.l	#8,d0
0001D0DE 2C80                       		move.l	d0,(a6)
0001D0E0 43E9 0010                  		lea	$10(a1),a1
0001D0E4 51C9 FFEE                  		dbf	d1,loc_1C442
0001D0E8 4E75                       		rts	
0001D0EA                            ; ===========================================================================
0001D0EA                            
0001D0EA                            loc_1C458:				; XREF: AniArt_MZextra
0001D0EA 2CA9 0006                  		move.l	6(a1),(a6)
0001D0EE 43E9 0010                  		lea	$10(a1),a1
0001D0F2 51C9 FFF6                  		dbf	d1,loc_1C458
0001D0F6 4E75                       		rts	
0001D0F8                            ; ===========================================================================
0001D0F8                            
0001D0F8                            loc_1C466:				; XREF: AniArt_MZextra
0001D0F8 2029 0008                  		move.l	8(a1),d0
0001D0FC 1029 0007                  		move.b	7(a1),d0
0001D100 E098                       		ror.l	#8,d0
0001D102 2C80                       		move.l	d0,(a6)
0001D104 43E9 0010                  		lea	$10(a1),a1
0001D108 51C9 FFEE                  		dbf	d1,loc_1C466
0001D10C 4E75                       		rts	
0001D10E                            ; ===========================================================================
0001D10E                            
0001D10E                            loc_1C47C:				; XREF: AniArt_MZextra
0001D10E 2CA9 0008                  		move.l	8(a1),(a6)
0001D112 43E9 0010                  		lea	$10(a1),a1
0001D116 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D11A 4E75                       		rts	
0001D11C                            ; ===========================================================================
0001D11C                            
0001D11C                            loc_1C48A:				; XREF: AniArt_MZextra
0001D11C 2029 000A                  		move.l	$A(a1),d0
0001D120 1029 0009                  		move.b	9(a1),d0
0001D124 E098                       		ror.l	#8,d0
0001D126 2C80                       		move.l	d0,(a6)
0001D128 43E9 0010                  		lea	$10(a1),a1
0001D12C 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D130 4E75                       		rts	
0001D132                            ; ===========================================================================
0001D132                            
0001D132                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D132 2CA9 000A                  		move.l	$A(a1),(a6)
0001D136 43E9 0010                  		lea	$10(a1),a1
0001D13A 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D13E 4E75                       		rts	
0001D140                            ; ===========================================================================
0001D140                            
0001D140                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D140 2029 000C                  		move.l	$C(a1),d0
0001D144 1029 000B                  		move.b	$B(a1),d0
0001D148 E098                       		ror.l	#8,d0
0001D14A 2C80                       		move.l	d0,(a6)
0001D14C 43E9 0010                  		lea	$10(a1),a1
0001D150 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D154 4E75                       		rts	
0001D156                            ; ===========================================================================
0001D156                            
0001D156                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D156 2CA9 000C                  		move.l	$C(a1),(a6)
0001D15A 43E9 0010                  		lea	$10(a1),a1
0001D15E 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D162 4E75                       		rts	
0001D164                            ; ===========================================================================
0001D164                            
0001D164                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D164 2029 000C                  		move.l	$C(a1),d0
0001D168 E198                       		rol.l	#8,d0
0001D16A 1011                       		move.b	0(a1),d0
0001D16C 2C80                       		move.l	d0,(a6)
0001D16E 43E9 0010                  		lea	$10(a1),a1
0001D172 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D176 4E75                       		rts	
0001D178                            ; ===========================================================================
0001D178                            
0001D178                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D178 3CA9 000E                  		move.w	$E(a1),(a6)
0001D17C 3C91                       		move.w	0(a1),(a6)
0001D17E 43E9 0010                  		lea	$10(a1),a1
0001D182 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D186 4E75                       		rts	
0001D188                            ; ===========================================================================
0001D188                            
0001D188                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D188 2011                       		move.l	0(a1),d0
0001D18A 1029 000F                  		move.b	$F(a1),d0
0001D18E E098                       		ror.l	#8,d0
0001D190 2C80                       		move.l	d0,(a6)
0001D192 43E9 0010                  		lea	$10(a1),a1
0001D196 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D19A 4E75                       		rts	
0001D19C                            
0001D19C                            ; ---------------------------------------------------------------------------
0001D19C                            ; Animated pattern routine - giant ring
0001D19C                            ; ---------------------------------------------------------------------------
0001D19C                            
0001D19C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D19C                            
0001D19C                            
0001D19C                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D19C 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D1A0 6600                       		bne.s	loc_1C518
0001D1A2 4E75                       		rts	
0001D1A4                            ; ===========================================================================
0001D1A4                            
0001D1A4                            loc_1C518:
0001D1A4 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D1AA 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D1B0 7000                       		moveq	#0,d0
0001D1B2 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D1B6 43F1 0000                  		lea	(a1,d0.w),a1
0001D1BA 0640 8000                  		addi.w	#$8000,d0
0001D1BE E588                       		lsl.l	#2,d0
0001D1C0 E448                       		lsr.w	#2,d0
0001D1C2 0040 4000                  		ori.w	#$4000,d0
0001D1C6 4840                       		swap	d0
0001D1C8 2D40 0004                  		move.l	d0,4(a6)
0001D1CC 323C 000D                  		move.w	#$D,d1
0001D1D0 6000 FE78                  		bra.w	LoadTiles
0001D1D4                            ; End of function AniArt_GiantRing
0001D1D4                            
0001D1D4                            ; ===========================================================================
0001D1D4                            ; ---------------------------------------------------------------------------
0001D1D4                            ; Object 21 - SCORE, TIME, RINGS
0001D1D4                            ; ---------------------------------------------------------------------------
0001D1D4                            
0001D1D4                            Obj21:					; XREF: Obj_Index
0001D1D4 7000                       		moveq	#0,d0
0001D1D6 1028 0024                  		move.b	$24(a0),d0
0001D1DA 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001D1DE 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001D1E2                            ; ===========================================================================
0001D1E2 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001D1E4 0000                       		dc.w Obj21_Flash-Obj21_Index
0001D1E6                            ; ===========================================================================
0001D1E6                            
0001D1E6                            Obj21_Main:				; XREF: Obj21_Main
0001D1E6 5428 0024                  		addq.b	#2,$24(a0)
0001D1EA 317C 0090 0008             		move.w	#$90,8(a0)
0001D1F0 317C 0108 000A             		move.w	#$108,$A(a0)
0001D1F6 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001D1FE 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001D204 117C 0000 0001             		move.b	#0,1(a0)
0001D20A 117C 0000 0018             		move.b	#0,$18(a0)
0001D210                            
0001D210                            Obj21_Flash:				; XREF: Obj21_Main
0001D210 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001D214 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001D216 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001D21A 4EF9 0000 E04C             		jmp	DisplaySprite
0001D220                            ; ===========================================================================
0001D220                            
0001D220                            Obj21_Flash2:
0001D220 7000                       		moveq	#0,d0
0001D222 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001D228 6600                       		bne.s	Obj21_Display
0001D22A 5240                       		addq.w	#1,d0		; make ring counter flash red
0001D22C 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001D232 6600                       		bne.s	Obj21_Display	; if not, branch
0001D234 5440                       		addq.w	#2,d0		; make time counter flash red
0001D236                            
0001D236                            Obj21_Display:
0001D236 1140 001A                  		move.b	d0,$1A(a0)
0001D23A 4EF9 0000 E04C             		jmp	DisplaySprite
0001D240                            ; ===========================================================================
0001D240                            ; ---------------------------------------------------------------------------
0001D240                            ; Sprite mappings - SCORE, TIME, RINGS
0001D240                            ; ---------------------------------------------------------------------------
0001D240                            Map_obj21:
0001D240                            	include "_maps\obj21.asm"
0001D240                            Map_549d:
0001D240 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001D242 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001D244 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001D246 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001D248 09                         Map_549d_8: 	dc.b $9
0001D249 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D24E 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D253 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D258 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D25D A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D262 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D267 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D26C 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D271 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D276 09                         Map_549d_36: 	dc.b $9
0001D277 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D27C 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D281 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D286 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D28B A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D290 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D295 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D29A 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D29F 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D2A4 09                         Map_549d_64: 	dc.b $9
0001D2A5 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D2AA 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D2AF 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D2B4 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D2B9 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D2BE A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D2C3 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D2C8 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D2CD 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D2D2 09                         Map_549d_92: 	dc.b $9
0001D2D3 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001D2D8 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001D2DD 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001D2E2 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001D2E7 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001D2EC A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001D2F1 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001D2F6 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001D2FB 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001D300                            	even
0001D300                            	even
0001D300                            
0001D300                            ; ---------------------------------------------------------------------------
0001D300                            ; Add points subroutine
0001D300                            ; ---------------------------------------------------------------------------
0001D300                            
0001D300                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D300                            
0001D300                            
0001D300                            AddPoints:
0001D300 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001D306 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001D30A 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001D30E D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001D310 223C 000F 423F             		move.l	#999999,d1
0001D316 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001D318 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D31C 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D31E 2481                       		move.l	d1,(a2)
0001D320                            
0001D320                            loc_1C6AC:
0001D320 2013                       		move.l	(a3),d0
0001D322 B092                       		cmp.l	(a2),d0
0001D324 6500 0000                  		bcs.w	locret_1C6B6
0001D328 2480                       		move.l	d0,(a2)
0001D32A                            
0001D32A                            locret_1C6B6:
0001D32A 4E75                       		rts	
0001D32C                            ; End of function AddPoints
0001D32C                            
0001D32C                            ; ---------------------------------------------------------------------------
0001D32C                            ; Subroutine to	update the HUD
0001D32C                            ; ---------------------------------------------------------------------------
0001D32C                            
0001D32C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D32C                            
0001D32C                            
0001D32C                            HudUpdate:
0001D32C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D330 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D334 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D338 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D33A 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D33E 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D344 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D348 6100 0000                  		bsr.w	Hud_Score
0001D34C                            
0001D34C                            Hud_ChkRings:
0001D34C 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D350 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D352 6A00                       		bpl.s	loc_1C6E4
0001D354 6100 0000                  		bsr.w	Hud_LoadZero
0001D358                            
0001D358                            loc_1C6E4:
0001D358 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D35C 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D362 7200                       		moveq	#0,d1
0001D364 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D368 6100 0000                  		bsr.w	Hud_Rings
0001D36C                            
0001D36C                            Hud_ChkTime:
0001D36C 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D370 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D372 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D376 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D378 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D37C 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D382 6700                       		beq.s	TimeOver	; if yes, branch
0001D384 5221                       		addq.b	#1,-(a1)
0001D386 0C11 003C                  		cmpi.b	#60,(a1)
0001D38A 6500                       		bcs.s	Hud_ChkLives
0001D38C 12BC 0000                  		move.b	#0,(a1)
0001D390 5221                       		addq.b	#1,-(a1)
0001D392 0C11 003C                  		cmpi.b	#60,(a1)
0001D396 6500                       		bcs.s	loc_1C734
0001D398 12BC 0000                  		move.b	#0,(a1)
0001D39C 5221                       		addq.b	#1,-(a1)
0001D39E 0C11 0009                  		cmpi.b	#9,(a1)
0001D3A2 6500                       		bcs.s	loc_1C734
0001D3A4 12BC 0009                  		move.b	#9,(a1)
0001D3A8                            
0001D3A8                            loc_1C734:
0001D3A8 203C 5E40 0003             		move.l	#$5E400003,d0
0001D3AE 7200                       		moveq	#0,d1
0001D3B0 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D3B4 6100 0000                  		bsr.w	Hud_Mins
0001D3B8 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D3BE 7200                       		moveq	#0,d1
0001D3C0 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D3C4 6100 0000                  		bsr.w	Hud_Secs
0001D3C8                            
0001D3C8                            Hud_ChkLives:
0001D3C8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D3CC 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D3CE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D3D2 6100 0000                  		bsr.w	Hud_Lives
0001D3D6                            
0001D3D6                            Hud_ChkBonus:
0001D3D6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D3DA 6700                       		beq.s	Hud_End		; if not, branch
0001D3DC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D3E0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D3EA 7200                       		moveq	#0,d1
0001D3EC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D3F0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3F4 7200                       		moveq	#0,d1
0001D3F6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D3FA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D3FE                            
0001D3FE                            Hud_End:
0001D3FE 4E75                       		rts	
0001D400                            ; ===========================================================================
0001D400                            
0001D400                            TimeOver:				; XREF: Hud_ChkTime
0001D400 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D404 41F8 D000                  		lea	($FFFFD000).w,a0
0001D408 2448                       		movea.l	a0,a2
0001D40A 6100 E968                  		bsr.w	KillSonic
0001D40E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D414 4E75                       		rts	
0001D416                            ; ===========================================================================
0001D416                            
0001D416                            HudDebug:				; XREF: HudUpdate
0001D416 6100 0000                  		bsr.w	HudDb_XY
0001D41A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D41E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D420 6A00                       		bpl.s	HudDb_Rings
0001D422 6100 0000                  		bsr.w	Hud_LoadZero
0001D426                            
0001D426                            HudDb_Rings:
0001D426 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D42A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D430 7200                       		moveq	#0,d1
0001D432 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D436 6100 0000                  		bsr.w	Hud_Rings
0001D43A                            
0001D43A                            HudDb_ObjCount:
0001D43A 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D440 7200                       		moveq	#0,d1
0001D442 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D446 6100 0000                  		bsr.w	Hud_Secs
0001D44A 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D44E 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D450 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D454 6100 0000                  		bsr.w	Hud_Lives
0001D458                            
0001D458                            HudDb_ChkBonus:
0001D458 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D45C 6700                       		beq.s	HudDb_End	; if not, branch
0001D45E 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D462 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D46C 7200                       		moveq	#0,d1
0001D46E 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D472 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D476 7200                       		moveq	#0,d1
0001D478 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D47C 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D480                            
0001D480                            HudDb_End:
0001D480 4E75                       		rts	
0001D482                            ; End of function HudUpdate
0001D482                            
0001D482                            ; ---------------------------------------------------------------------------
0001D482                            ; Subroutine to	load "0" on the	HUD
0001D482                            ; ---------------------------------------------------------------------------
0001D482                            
0001D482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D482                            
0001D482                            
0001D482                            Hud_LoadZero:				; XREF: HudUpdate
0001D482 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D48C 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D490 343C 0002                  		move.w	#2,d2
0001D494 6000                       		bra.s	loc_1C83E
0001D496                            ; End of function Hud_LoadZero
0001D496                            
0001D496                            ; ---------------------------------------------------------------------------
0001D496                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D496                            ; ---------------------------------------------------------------------------
0001D496                            
0001D496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D496                            
0001D496                            
0001D496                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D496 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D49C 6100 0000                  		bsr.w	Hud_Lives
0001D4A0 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D4AA 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D4AE 343C 000E                  		move.w	#$E,d2
0001D4B2                            
0001D4B2                            loc_1C83E:				; XREF: Hud_LoadZero
0001D4B2 43FA 0000                  		lea	Art_Hud(pc),a1
0001D4B6                            
0001D4B6                            loc_1C842:
0001D4B6 323C 000F                  		move.w	#$F,d1
0001D4BA 101A                       		move.b	(a2)+,d0
0001D4BC 6B00                       		bmi.s	loc_1C85E
0001D4BE 4880                       		ext.w	d0
0001D4C0 EB48                       		lsl.w	#5,d0
0001D4C2 47F1 0000                  		lea	(a1,d0.w),a3
0001D4C6                            
0001D4C6                            loc_1C852:
0001D4C6 2C9B                       		move.l	(a3)+,(a6)
0001D4C8 51C9 FFFC                  		dbf	d1,loc_1C852
0001D4CC                            
0001D4CC                            loc_1C858:
0001D4CC 51CA FFE8                  		dbf	d2,loc_1C842
0001D4D0                            
0001D4D0 4E75                       		rts	
0001D4D2                            ; ===========================================================================
0001D4D2                            
0001D4D2                            loc_1C85E:
0001D4D2 2CBC 0000 0000             		move.l	#0,(a6)
0001D4D8 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D4DC                            
0001D4DC 60EE                       		bra.s	loc_1C858
0001D4DE                            ; End of function Hud_Base
0001D4DE                            
0001D4DE                            ; ===========================================================================
0001D4DE 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D4EA FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D4EE                            ; ---------------------------------------------------------------------------
0001D4EE                            ; Subroutine to	load debug mode	numbers	patterns
0001D4EE                            ; ---------------------------------------------------------------------------
0001D4EE                            
0001D4EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4EE                            
0001D4EE                            
0001D4EE                            HudDb_XY:				; XREF: HudDebug
0001D4EE 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D4F8 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D4FC 4841                       		swap	d1
0001D4FE 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D502 6100                       		bsr.s	HudDb_XY2
0001D504 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D508 4841                       		swap	d1
0001D50A 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D50E                            ; End of function HudDb_XY
0001D50E                            
0001D50E                            
0001D50E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D50E                            
0001D50E                            
0001D50E                            HudDb_XY2:
0001D50E 7C07                       		moveq	#7,d6
0001D510 43F9 0000 05E2             		lea	(Art_Text).l,a1
0001D516                            
0001D516                            HudDb_XYLoop:
0001D516 E959                       		rol.w	#4,d1
0001D518 3401                       		move.w	d1,d2
0001D51A 0242 000F                  		andi.w	#$F,d2
0001D51E 0C42 000A                  		cmpi.w	#$A,d2
0001D522 6500                       		bcs.s	loc_1C8B2
0001D524 5E42                       		addq.w	#7,d2
0001D526                            
0001D526                            loc_1C8B2:
0001D526 EB4A                       		lsl.w	#5,d2
0001D528 47F1 2000                  		lea	(a1,d2.w),a3
0001D52C 2C9B                       		move.l	(a3)+,(a6)
0001D52E 2C9B                       		move.l	(a3)+,(a6)
0001D530 2C9B                       		move.l	(a3)+,(a6)
0001D532 2C9B                       		move.l	(a3)+,(a6)
0001D534 2C9B                       		move.l	(a3)+,(a6)
0001D536 2C9B                       		move.l	(a3)+,(a6)
0001D538 2C9B                       		move.l	(a3)+,(a6)
0001D53A 2C9B                       		move.l	(a3)+,(a6)
0001D53C 4841                       		swap	d1
0001D53E 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D542                            
0001D542 4E75                       		rts	
0001D544                            ; End of function HudDb_XY2
0001D544                            
0001D544                            ; ---------------------------------------------------------------------------
0001D544                            ; Subroutine to	load rings numbers patterns
0001D544                            ; ---------------------------------------------------------------------------
0001D544                            
0001D544                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D544                            
0001D544                            
0001D544                            Hud_Rings:				; XREF: HudUpdate
0001D544 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D54A 7C02                       		moveq	#2,d6
0001D54C 6000                       		bra.s	Hud_LoadArt
0001D54E                            ; End of function Hud_Rings
0001D54E                            
0001D54E                            ; ---------------------------------------------------------------------------
0001D54E                            ; Subroutine to	load score numbers patterns
0001D54E                            ; ---------------------------------------------------------------------------
0001D54E                            
0001D54E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D54E                            
0001D54E                            
0001D54E                            Hud_Score:				; XREF: HudUpdate
0001D54E 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D554 7C05                       		moveq	#5,d6
0001D556                            
0001D556                            Hud_LoadArt:
0001D556 7800                       		moveq	#0,d4
0001D558 43FA 0000                  		lea	Art_Hud(pc),a1
0001D55C                            
0001D55C                            Hud_ScoreLoop:
0001D55C 7400                       		moveq	#0,d2
0001D55E 261A                       		move.l	(a2)+,d3
0001D560                            
0001D560                            loc_1C8EC:
0001D560 9283                       		sub.l	d3,d1
0001D562 6500                       		bcs.s	loc_1C8F4
0001D564 5242                       		addq.w	#1,d2
0001D566 60F8                       		bra.s	loc_1C8EC
0001D568                            ; ===========================================================================
0001D568                            
0001D568                            loc_1C8F4:
0001D568 D283                       		add.l	d3,d1
0001D56A 4A42                       		tst.w	d2
0001D56C 6700                       		beq.s	loc_1C8FE
0001D56E 383C 0001                  		move.w	#1,d4
0001D572                            
0001D572                            loc_1C8FE:
0001D572 4A44                       		tst.w	d4
0001D574 6700                       		beq.s	loc_1C92C
0001D576 ED4A                       		lsl.w	#6,d2
0001D578 2D40 0004                  		move.l	d0,4(a6)
0001D57C 47F1 2000                  		lea	(a1,d2.w),a3
0001D580 2C9B                       		move.l	(a3)+,(a6)
0001D582 2C9B                       		move.l	(a3)+,(a6)
0001D584 2C9B                       		move.l	(a3)+,(a6)
0001D586 2C9B                       		move.l	(a3)+,(a6)
0001D588 2C9B                       		move.l	(a3)+,(a6)
0001D58A 2C9B                       		move.l	(a3)+,(a6)
0001D58C 2C9B                       		move.l	(a3)+,(a6)
0001D58E 2C9B                       		move.l	(a3)+,(a6)
0001D590 2C9B                       		move.l	(a3)+,(a6)
0001D592 2C9B                       		move.l	(a3)+,(a6)
0001D594 2C9B                       		move.l	(a3)+,(a6)
0001D596 2C9B                       		move.l	(a3)+,(a6)
0001D598 2C9B                       		move.l	(a3)+,(a6)
0001D59A 2C9B                       		move.l	(a3)+,(a6)
0001D59C 2C9B                       		move.l	(a3)+,(a6)
0001D59E 2C9B                       		move.l	(a3)+,(a6)
0001D5A0                            
0001D5A0                            loc_1C92C:
0001D5A0 0680 0040 0000             		addi.l	#$400000,d0
0001D5A6 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D5AA                            
0001D5AA 4E75                       		rts	
0001D5AC                            ; End of function Hud_Score
0001D5AC                            
0001D5AC                            ; ---------------------------------------------------------------------------
0001D5AC                            ; Subroutine to	load countdown numbers on the continue screen
0001D5AC                            ; ---------------------------------------------------------------------------
0001D5AC                            
0001D5AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D5AC                            
0001D5AC                            
0001D5AC                            ContScrCounter:				; XREF: ContinueScreen
0001D5AC 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D5B6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D5BC 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D5C2 7C01                       		moveq	#1,d6
0001D5C4 7800                       		moveq	#0,d4
0001D5C6 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D5CA                            
0001D5CA                            ContScr_Loop:
0001D5CA 7400                       		moveq	#0,d2
0001D5CC 261A                       		move.l	(a2)+,d3
0001D5CE                            
0001D5CE                            loc_1C95A:
0001D5CE 9283                       		sub.l	d3,d1
0001D5D0 6500                       		bcs.s	loc_1C962
0001D5D2 5242                       		addq.w	#1,d2
0001D5D4 60F8                       		bra.s	loc_1C95A
0001D5D6                            ; ===========================================================================
0001D5D6                            
0001D5D6                            loc_1C962:
0001D5D6 D283                       		add.l	d3,d1
0001D5D8 ED4A                       		lsl.w	#6,d2
0001D5DA 47F1 2000                  		lea	(a1,d2.w),a3
0001D5DE 2C9B                       		move.l	(a3)+,(a6)
0001D5E0 2C9B                       		move.l	(a3)+,(a6)
0001D5E2 2C9B                       		move.l	(a3)+,(a6)
0001D5E4 2C9B                       		move.l	(a3)+,(a6)
0001D5E6 2C9B                       		move.l	(a3)+,(a6)
0001D5E8 2C9B                       		move.l	(a3)+,(a6)
0001D5EA 2C9B                       		move.l	(a3)+,(a6)
0001D5EC 2C9B                       		move.l	(a3)+,(a6)
0001D5EE 2C9B                       		move.l	(a3)+,(a6)
0001D5F0 2C9B                       		move.l	(a3)+,(a6)
0001D5F2 2C9B                       		move.l	(a3)+,(a6)
0001D5F4 2C9B                       		move.l	(a3)+,(a6)
0001D5F6 2C9B                       		move.l	(a3)+,(a6)
0001D5F8 2C9B                       		move.l	(a3)+,(a6)
0001D5FA 2C9B                       		move.l	(a3)+,(a6)
0001D5FC 2C9B                       		move.l	(a3)+,(a6)
0001D5FE 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D602                            
0001D602 4E75                       		rts	
0001D604                            ; End of function ContScrCounter
0001D604                            
0001D604                            ; ===========================================================================
0001D604                            ; ---------------------------------------------------------------------------
0001D604                            ; HUD counter sizes
0001D604                            ; ---------------------------------------------------------------------------
0001D604 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D608 0000 2710                  Hud_10000:	dc.l 10000
0001D60C 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D610 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D614 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D618 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D61C                            
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            ; Subroutine to	load time numbers patterns
0001D61C                            ; ---------------------------------------------------------------------------
0001D61C                            
0001D61C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D61C                            
0001D61C                            
0001D61C                            Hud_Mins:				; XREF: Hud_ChkTime
0001D61C 45F9 0001 D618             		lea	(Hud_1).l,a2
0001D622 7C00                       		moveq	#0,d6
0001D624 6000                       		bra.s	loc_1C9BA
0001D626                            ; End of function Hud_Mins
0001D626                            
0001D626                            
0001D626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D626                            
0001D626                            
0001D626                            Hud_Secs:				; XREF: Hud_ChkTime
0001D626 45F9 0001 D614             		lea	(Hud_10).l,a2
0001D62C 7C01                       		moveq	#1,d6
0001D62E                            
0001D62E                            loc_1C9BA:
0001D62E 7800                       		moveq	#0,d4
0001D630 43FA 0000                  		lea	Art_Hud(pc),a1
0001D634                            
0001D634                            Hud_TimeLoop:
0001D634 7400                       		moveq	#0,d2
0001D636 261A                       		move.l	(a2)+,d3
0001D638                            
0001D638                            loc_1C9C4:
0001D638 9283                       		sub.l	d3,d1
0001D63A 6500                       		bcs.s	loc_1C9CC
0001D63C 5242                       		addq.w	#1,d2
0001D63E 60F8                       		bra.s	loc_1C9C4
0001D640                            ; ===========================================================================
0001D640                            
0001D640                            loc_1C9CC:
0001D640 D283                       		add.l	d3,d1
0001D642 4A42                       		tst.w	d2
0001D644 6700                       		beq.s	loc_1C9D6
0001D646 383C 0001                  		move.w	#1,d4
0001D64A                            
0001D64A                            loc_1C9D6:
0001D64A ED4A                       		lsl.w	#6,d2
0001D64C 2D40 0004                  		move.l	d0,4(a6)
0001D650 47F1 2000                  		lea	(a1,d2.w),a3
0001D654 2C9B                       		move.l	(a3)+,(a6)
0001D656 2C9B                       		move.l	(a3)+,(a6)
0001D658 2C9B                       		move.l	(a3)+,(a6)
0001D65A 2C9B                       		move.l	(a3)+,(a6)
0001D65C 2C9B                       		move.l	(a3)+,(a6)
0001D65E 2C9B                       		move.l	(a3)+,(a6)
0001D660 2C9B                       		move.l	(a3)+,(a6)
0001D662 2C9B                       		move.l	(a3)+,(a6)
0001D664 2C9B                       		move.l	(a3)+,(a6)
0001D666 2C9B                       		move.l	(a3)+,(a6)
0001D668 2C9B                       		move.l	(a3)+,(a6)
0001D66A 2C9B                       		move.l	(a3)+,(a6)
0001D66C 2C9B                       		move.l	(a3)+,(a6)
0001D66E 2C9B                       		move.l	(a3)+,(a6)
0001D670 2C9B                       		move.l	(a3)+,(a6)
0001D672 2C9B                       		move.l	(a3)+,(a6)
0001D674 0680 0040 0000             		addi.l	#$400000,d0
0001D67A 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D67E                            
0001D67E 4E75                       		rts	
0001D680                            ; End of function Hud_Secs
0001D680                            
0001D680                            ; ---------------------------------------------------------------------------
0001D680                            ; Subroutine to	load time/ring bonus numbers patterns
0001D680                            ; ---------------------------------------------------------------------------
0001D680                            
0001D680                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D680                            
0001D680                            
0001D680                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D680 45F9 0001 D60C             		lea	(Hud_1000).l,a2
0001D686 7C03                       		moveq	#3,d6
0001D688 7800                       		moveq	#0,d4
0001D68A 43FA 0000                  		lea	Art_Hud(pc),a1
0001D68E                            
0001D68E                            Hud_BonusLoop:
0001D68E 7400                       		moveq	#0,d2
0001D690 261A                       		move.l	(a2)+,d3
0001D692                            
0001D692                            loc_1CA1E:
0001D692 9283                       		sub.l	d3,d1
0001D694 6500                       		bcs.s	loc_1CA26
0001D696 5242                       		addq.w	#1,d2
0001D698 60F8                       		bra.s	loc_1CA1E
0001D69A                            ; ===========================================================================
0001D69A                            
0001D69A                            loc_1CA26:
0001D69A D283                       		add.l	d3,d1
0001D69C 4A42                       		tst.w	d2
0001D69E 6700                       		beq.s	loc_1CA30
0001D6A0 383C 0001                  		move.w	#1,d4
0001D6A4                            
0001D6A4                            loc_1CA30:
0001D6A4 4A44                       		tst.w	d4
0001D6A6 6700                       		beq.s	Hud_ClrBonus
0001D6A8 ED4A                       		lsl.w	#6,d2
0001D6AA 47F1 2000                  		lea	(a1,d2.w),a3
0001D6AE 2C9B                       		move.l	(a3)+,(a6)
0001D6B0 2C9B                       		move.l	(a3)+,(a6)
0001D6B2 2C9B                       		move.l	(a3)+,(a6)
0001D6B4 2C9B                       		move.l	(a3)+,(a6)
0001D6B6 2C9B                       		move.l	(a3)+,(a6)
0001D6B8 2C9B                       		move.l	(a3)+,(a6)
0001D6BA 2C9B                       		move.l	(a3)+,(a6)
0001D6BC 2C9B                       		move.l	(a3)+,(a6)
0001D6BE 2C9B                       		move.l	(a3)+,(a6)
0001D6C0 2C9B                       		move.l	(a3)+,(a6)
0001D6C2 2C9B                       		move.l	(a3)+,(a6)
0001D6C4 2C9B                       		move.l	(a3)+,(a6)
0001D6C6 2C9B                       		move.l	(a3)+,(a6)
0001D6C8 2C9B                       		move.l	(a3)+,(a6)
0001D6CA 2C9B                       		move.l	(a3)+,(a6)
0001D6CC 2C9B                       		move.l	(a3)+,(a6)
0001D6CE                            
0001D6CE                            loc_1CA5A:
0001D6CE 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D6D2                            
0001D6D2 4E75                       		rts	
0001D6D4                            ; ===========================================================================
0001D6D4                            
0001D6D4                            Hud_ClrBonus:
0001D6D4 7A0F                       		moveq	#$F,d5
0001D6D6                            
0001D6D6                            Hud_ClrBonusLoop:
0001D6D6 2CBC 0000 0000             		move.l	#0,(a6)
0001D6DC 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D6E0                            
0001D6E0 60EC                       		bra.s	loc_1CA5A
0001D6E2                            ; End of function Hud_TimeRingBonus
0001D6E2                            
0001D6E2                            ; ---------------------------------------------------------------------------
0001D6E2                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D6E2                            ; ---------------------------------------------------------------------------
0001D6E2                            
0001D6E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6E2                            
0001D6E2                            
0001D6E2                            Hud_Lives:				; XREF: Hud_ChkLives
0001D6E2 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D6E8 7200                       		moveq	#0,d1
0001D6EA 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D6EE 45F9 0001 D614             		lea	(Hud_10).l,a2
0001D6F4 7C01                       		moveq	#1,d6
0001D6F6 7800                       		moveq	#0,d4
0001D6F8 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D6FC                            
0001D6FC                            Hud_LivesLoop:
0001D6FC 2D40 0004                  		move.l	d0,4(a6)
0001D700 7400                       		moveq	#0,d2
0001D702 261A                       		move.l	(a2)+,d3
0001D704                            
0001D704                            loc_1CA90:
0001D704 9283                       		sub.l	d3,d1
0001D706 6500                       		bcs.s	loc_1CA98
0001D708 5242                       		addq.w	#1,d2
0001D70A 60F8                       		bra.s	loc_1CA90
0001D70C                            ; ===========================================================================
0001D70C                            
0001D70C                            loc_1CA98:
0001D70C D283                       		add.l	d3,d1
0001D70E 4A42                       		tst.w	d2
0001D710 6700                       		beq.s	loc_1CAA2
0001D712 383C 0001                  		move.w	#1,d4
0001D716                            
0001D716                            loc_1CAA2:
0001D716 4A44                       		tst.w	d4
0001D718 6700                       		beq.s	Hud_ClrLives
0001D71A                            
0001D71A                            loc_1CAA6:
0001D71A EB4A                       		lsl.w	#5,d2
0001D71C 47F1 2000                  		lea	(a1,d2.w),a3
0001D720 2C9B                       		move.l	(a3)+,(a6)
0001D722 2C9B                       		move.l	(a3)+,(a6)
0001D724 2C9B                       		move.l	(a3)+,(a6)
0001D726 2C9B                       		move.l	(a3)+,(a6)
0001D728 2C9B                       		move.l	(a3)+,(a6)
0001D72A 2C9B                       		move.l	(a3)+,(a6)
0001D72C 2C9B                       		move.l	(a3)+,(a6)
0001D72E 2C9B                       		move.l	(a3)+,(a6)
0001D730                            
0001D730                            loc_1CABC:
0001D730 0680 0040 0000             		addi.l	#$400000,d0
0001D736 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D73A                            
0001D73A 4E75                       		rts	
0001D73C                            ; ===========================================================================
0001D73C                            
0001D73C                            Hud_ClrLives:
0001D73C 4A46                       		tst.w	d6
0001D73E 67DA                       		beq.s	loc_1CAA6
0001D740 7A07                       		moveq	#7,d5
0001D742                            
0001D742                            Hud_ClrLivesLoop:
0001D742 2CBC 0000 0000             		move.l	#0,(a6)
0001D748 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D74C 60E2                       		bra.s	loc_1CABC
0001D74E                            ; End of function Hud_Lives
0001D74E                            
0001D74E                            ; ===========================================================================
0001D74E                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001DA4E                            		even
0001DA4E                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001DB8E                            		even
0001DB8E                            ; ===========================================================================
0001DB8E                            ; ---------------------------------------------------------------------------
0001DB8E                            ; When debug mode is currently in use
0001DB8E                            ; ---------------------------------------------------------------------------
0001DB8E                            
0001DB8E                            DebugMode:				; XREF: Obj01; Obj09
0001DB8E 7000                       		moveq	#0,d0
0001DB90 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001DB94 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001DB98 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001DB9C                            ; ===========================================================================
0001DB9C 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001DB9E 0000                       		dc.w Debug_Skip-Debug_Index
0001DBA0                            ; ===========================================================================
0001DBA0                            
0001DBA0                            Debug_Main:				; XREF: Debug_Index
0001DBA0 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001DBA4 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001DBAA 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001DBB0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001DBB6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001DBBC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001DBC2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001DBC8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001DBCE 117C 0000 001A             		move.b	#0,$1A(a0)
0001DBD4 117C 0000 001C             		move.b	#0,$1C(a0)
0001DBDA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001DBE0 6600                       		bne.s	Debug_Zone	; if not, branch
0001DBE2 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001DBE8 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001DBEE 7006                       		moveq	#6,d0		; use 6th debug	item list
0001DBF0 6000                       		bra.s	Debug_UseList
0001DBF2                            ; ===========================================================================
0001DBF2                            
0001DBF2                            Debug_Zone:
0001DBF2 7000                       		moveq	#0,d0
0001DBF4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DBF8                            
0001DBF8                            Debug_UseList:
0001DBF8 45F9 0000 0000             		lea	(DebugList).l,a2
0001DBFE D040                       		add.w	d0,d0
0001DC00 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DC04 3C1A                       		move.w	(a2)+,d6
0001DC06 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DC0A 6200                       		bhi.s	loc_1CF9E
0001DC0C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001DC12                            
0001DC12                            loc_1CF9E:
0001DC12 6100 0000                  		bsr.w	Debug_ShowItem
0001DC16 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DC1C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001DC22                            
0001DC22                            Debug_Skip:				; XREF: Debug_Index
0001DC22 7006                       		moveq	#6,d0
0001DC24 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001DC2A 6700                       		beq.s	loc_1CFBE
0001DC2C 7000                       		moveq	#0,d0
0001DC2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001DC32                            
0001DC32                            loc_1CFBE:
0001DC32 45F9 0000 0000             		lea	(DebugList).l,a2
0001DC38 D040                       		add.w	d0,d0
0001DC3A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001DC3E 3C1A                       		move.w	(a2)+,d6
0001DC40 6100 0000                  		bsr.w	Debug_Control
0001DC44 4EF9 0000 E04C             		jmp	DisplaySprite
0001DC4A                            
0001DC4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DC4A                            
0001DC4A                            
0001DC4A                            Debug_Control:
0001DC4A 7800                       		moveq	#0,d4
0001DC4C 323C 0001                  		move.w	#1,d1
0001DC50 1838 F605                  		move.b	($FFFFF605).w,d4
0001DC54 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001DC58 6600                       		bne.s	loc_1D018	; if yes, branch
0001DC5A 1038 F604                  		move.b	($FFFFF604).w,d0
0001DC5E 0240 000F                  		andi.w	#$F,d0
0001DC62 6600                       		bne.s	loc_1D000
0001DC64 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001DC6A 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001DC70 6000 0000                  		bra.w	Debug_BackItem
0001DC74                            ; ===========================================================================
0001DC74                            
0001DC74                            loc_1D000:
0001DC74 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001DC78 6600                       		bne.s	loc_1D01C
0001DC7A 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001DC80 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001DC84 6600                       		bne.s	loc_1D018
0001DC86 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001DC8C                            
0001DC8C                            loc_1D018:
0001DC8C 1838 F604                  		move.b	($FFFFF604).w,d4
0001DC90                            
0001DC90                            loc_1D01C:
0001DC90 7200                       		moveq	#0,d1
0001DC92 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001DC96 5241                       		addq.w	#1,d1
0001DC98 4841                       		swap	d1
0001DC9A E881                       		asr.l	#4,d1
0001DC9C 2428 000C                  		move.l	$C(a0),d2
0001DCA0 2628 0008                  		move.l	8(a0),d3
0001DCA4 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001DCA8 6700                       		beq.s	loc_1D03C	; if not, branch
0001DCAA 9481                       		sub.l	d1,d2
0001DCAC 6400                       		bcc.s	loc_1D03C
0001DCAE 7400                       		moveq	#0,d2
0001DCB0                            
0001DCB0                            loc_1D03C:
0001DCB0 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001DCB4 6700                       		beq.s	loc_1D052	; if not, branch
0001DCB6 D481                       		add.l	d1,d2
0001DCB8 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001DCBE 6500                       		bcs.s	loc_1D052
0001DCC0 243C 07FF 0000             		move.l	#$7FF0000,d2
0001DCC6                            
0001DCC6                            loc_1D052:
0001DCC6 0804 0002                  		btst	#2,d4
0001DCCA 6700                       		beq.s	loc_1D05E
0001DCCC 9681                       		sub.l	d1,d3
0001DCCE 6400                       		bcc.s	loc_1D05E
0001DCD0 7600                       		moveq	#0,d3
0001DCD2                            
0001DCD2                            loc_1D05E:
0001DCD2 0804 0003                  		btst	#3,d4
0001DCD6 6700                       		beq.s	loc_1D066
0001DCD8 D681                       		add.l	d1,d3
0001DCDA                            
0001DCDA                            loc_1D066:
0001DCDA 2142 000C                  		move.l	d2,$C(a0)
0001DCDE 2143 0008                  		move.l	d3,8(a0)
0001DCE2                            
0001DCE2                            Debug_BackItem:
0001DCE2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001DCE8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DCEA 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DCF0 6700                       		beq.s	Debug_NextItem	; if not, branch
0001DCF2 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001DCF6 6400                       		bcc.s	Debug_NoLoop
0001DCF8 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001DCFC 6000                       		bra.s	Debug_NoLoop
0001DCFE                            ; ===========================================================================
0001DCFE                            
0001DCFE                            Debug_NextItem:
0001DCFE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001DD04 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001DD06 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001DD0A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001DD0E 6200                       		bhi.s	Debug_NoLoop
0001DD10 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001DD16                            
0001DD16                            Debug_NoLoop:
0001DD16 6000 0000                  		bra.w	Debug_ShowItem
0001DD1A                            ; ===========================================================================
0001DD1A                            
0001DD1A                            Debug_MakeItem:
0001DD1A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DD20 6700                       		beq.s	Debug_Exit	; if not, branch
0001DD22 4EB9 0000 E4D2             		jsr	SingleObjLoad
0001DD28 6600                       		bne.s	Debug_Exit
0001DD2A 3368 0008 0008             		move.w	8(a0),8(a1)
0001DD30 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DD36 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DD3A 1368 0001 0001             		move.b	1(a0),1(a1)
0001DD40 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DD46 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DD4C 7000                       		moveq	#0,d0
0001DD4E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DD52 E748                       		lsl.w	#3,d0
0001DD54 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DD5A 4E75                       		rts	
0001DD5C                            ; ===========================================================================
0001DD5C                            
0001DD5C                            Debug_Exit:
0001DD5C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DD62 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DD64 7000                       		moveq	#0,d0
0001DD66 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DD6A 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DD72 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DD78 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DD7C 3140 000A                  		move.w	d0,$A(a0)
0001DD80 3140 000E                  		move.w	d0,$E(a0)
0001DD84 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DD8A 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DD90 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DD96 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DD98 4278 F780                  		clr.w	($FFFFF780).w
0001DD9C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DDA2 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DDAA 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DDB0 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DDB6 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DDBC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DDC2                            
0001DDC2                            Debug_DoNothing:
0001DDC2 4E75                       		rts	
0001DDC4                            ; End of function Debug_Control
0001DDC4                            
0001DDC4                            
0001DDC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDC4                            
0001DDC4                            
0001DDC4                            Debug_ShowItem:				; XREF: Debug_Main
0001DDC4 7000                       		moveq	#0,d0
0001DDC6 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DDCA E748                       		lsl.w	#3,d0
0001DDCC 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DDD2 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DDD8 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DDDE 4E75                       		rts	
0001DDE0                            ; End of function Debug_ShowItem
0001DDE0                            
0001DDE0                            ; ===========================================================================
0001DDE0                            ; ---------------------------------------------------------------------------
0001DDE0                            ; Debug	list pointers
0001DDE0                            ; ---------------------------------------------------------------------------
0001DDE0                            DebugList:
0001DDE0                            	include "_inc\Debug list pointers.asm"
0001DDE0                            ; ---------------------------------------------------------------------------
0001DDE0                            ; Debug	list pointers
0001DDE0                            ; ---------------------------------------------------------------------------
0001DDE0 0000                       	dc.w Debug_GHZ-DebugList
0001DDE2 0000                       	dc.w Debug_LZ-DebugList
0001DDE4 0000                       	dc.w Debug_MZ-DebugList
0001DDE6 0000                       	dc.w Debug_SLZ-DebugList
0001DDE8 0000                       	dc.w Debug_SYZ-DebugList
0001DDEA 0000                       	dc.w Debug_SBZ-DebugList
0001DDEC 0000                       	dc.w Debug_Ending-DebugList
0001DDEE 0000                       	dc.w Debug_GHZ-DebugList
0001DDEE 0000                       	dc.w Debug_GHZ-DebugList
0001DDF0                            
0001DDF0                            ; ---------------------------------------------------------------------------
0001DDF0                            ; Debug	list - Green Hill
0001DDF0                            ; ---------------------------------------------------------------------------
0001DDF0                            Debug_GHZ:
0001DDF0                            	include "_inc\Debug list - GHZ.asm"
0001DDF0                            ; ---------------------------------------------------------------------------
0001DDF0                            ; Debug	list - Green Hill
0001DDF0                            ; ---------------------------------------------------------------------------
0001DDF0 0010                       	dc.w $10			; number of items in list
0001DDF2 2500 A838                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DDF6 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DDFA 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DDFE 0000 0680                  	dc.b 0,	0, 6, $80
0001DE02 1F00 A030                  	dc.l Map_obj1F+$1F000000
0001DE06 0000 0400                  	dc.b 0,	0, 4, 0
0001DE0A 2200 A2EC                  	dc.l Map_obj22+$22000000
0001DE0E 0000 0444                  	dc.b 0,	0, 4, $44
0001DE12 2B00 B4B2                  	dc.l Map_obj2B+$2B000000
0001DE16 0000 047B                  	dc.b 0,	0, 4, $7B
0001DE1A 3600 D9EE                  	dc.l Map_obj36+$36000000
0001DE1E 0000 051B                  	dc.b 0,	0, 5, $1B
0001DE22 1800 893E                  	dc.l Map_obj18+$18000000
0001DE26 0000 4000                  	dc.b 0,	0, $40,	0
0001DE2A 3B00 DB14                  	dc.l Map_obj3B+$3B000000
0001DE2E 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DE32 4001 01E6                  	dc.l Map_obj40+$40000000
0001DE36 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DE3A 4100 E760                  	dc.l Map_obj41+$41000000
0001DE3E 0000 0523                  	dc.b 0,	0, 5, $23
0001DE42 4200 E986                  	dc.l Map_obj42+$42000000
0001DE46 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DE4A 4400 EC94                  	dc.l Map_obj44+$44000000
0001DE4E 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DE52 1900 8A3E                  	dc.l Map_obj48+$19000000
0001DE56 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DE5A 7901 7C32                  	dc.l Map_obj79+$79000000
0001DE5E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE62 4B00 A878                  	dc.l Map_obj4B+$4B000000
0001DE66 0000 2400                  	dc.b 0,	0, $24,	0
0001DE6A 7D01 7D82                  	dc.l Map_obj7D+$7D000000
0001DE6E 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DE72                            	even
0001DE72                            	even
0001DE72                            
0001DE72                            ; ---------------------------------------------------------------------------
0001DE72                            ; Debug	list - Labyrinth
0001DE72                            ; ---------------------------------------------------------------------------
0001DE72                            Debug_LZ:
0001DE72                            	include "_inc\Debug list - LZ.asm"
0001DE72                            ; ---------------------------------------------------------------------------
0001DE72                            ; Debug	list - Labyrinth
0001DE72                            ; ---------------------------------------------------------------------------
0001DE72 0019                       	dc.w $19
0001DE74 2500 A838                  	dc.l Map_obj25+$25000000
0001DE78 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE7C 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DE80 0000 0680                  	dc.b 0,	0, 6, $80
0001DE84 4100 E760                  	dc.l Map_obj41+$41000000
0001DE88 0000 0523                  	dc.b 0,	0, 5, $23
0001DE8C 2C00 B562                  	dc.l Map_obj2C+$2C000000
0001DE90 0800 2486                  	dc.b 8,	0, $24,	$86
0001DE94 2D00 B756                  	dc.l Map_obj2D+$2D000000
0001DE98 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DE9C 1601 29C0                  	dc.l Map_obj16+$16000000
0001DEA0 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DEA4 1601 29C0                  	dc.l Map_obj16+$16000000
0001DEA8 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DEAC 3300 CC0E                  	dc.l Map_obj33+$33000000
0001DEB0 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DEB4 3200 C7CE                  	dc.l Map_obj32+$32000000
0001DEB8 0000 0513                  	dc.b 0,	0, 5, $13
0001DEBC 3600 D9EE                  	dc.l Map_obj36+$36000000
0001DEC0 0000 051B                  	dc.b 0,	0, 5, $1B
0001DEC4 5201 0AE2                  	dc.l Map_obj52a+$52000000
0001DEC8 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DECC 6101 2BE8                  	dc.l Map_obj61+$61000000
0001DED0 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DED4 6101 2BE8                  	dc.l Map_obj61+$61000000
0001DED8 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DEDC 6101 2BE8                  	dc.l Map_obj61+$61000000
0001DEE0 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DEE4 6201 2D3C                  	dc.l Map_obj62+$62000000
0001DEE8 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DEEC 6101 2BE8                  	dc.l Map_obj61+$61000000
0001DEF0 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DEF4 6101 2BE8                  	dc.l Map_obj61+$61000000
0001DEF8 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DEFC 6301 309A                  	dc.l Map_obj63+$63000000
0001DF00 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DF04 6001 290A                  	dc.l Map_obj60+$60000000
0001DF08 0000 0467                  	dc.b 0,	0, 4, $67
0001DF0C 6401 33E0                  	dc.l Map_obj64+$64000000
0001DF10 8413 8348                  	dc.b $84, $13, $83, $48
0001DF14 6501 3568                  	dc.l Map_obj65+$65000000
0001DF18 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DF1C 6501 3568                  	dc.l Map_obj65+$65000000
0001DF20 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DF24 0B01 1D5A                  	dc.l Map_obj0B+$B000000
0001DF28 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DF2C 0C01 1E2A                  	dc.l Map_obj0C+$C000000
0001DF30 0200 4328                  	dc.b 2,	0, $43,	$28
0001DF34 7901 7C32                  	dc.l Map_obj79+$79000000
0001DF38 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DF3C                            	even
0001DF3C                            	even
0001DF3C                            
0001DF3C                            ; ---------------------------------------------------------------------------
0001DF3C                            ; Debug	list - Marble
0001DF3C                            ; ---------------------------------------------------------------------------
0001DF3C                            Debug_MZ:
0001DF3C                            	include "_inc\Debug list - MZ.asm"
0001DF3C                            ; ---------------------------------------------------------------------------
0001DF3C                            ; Debug	list - Marble
0001DF3C                            ; ---------------------------------------------------------------------------
0001DF3C 0012                       	dc.w $12
0001DF3E 2500 A838                  	dc.l Map_obj25+$25000000
0001DF42 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DF46 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DF4A 0000 0680                  	dc.b 0,	0, 6, $80
0001DF4E 2200 A2EC                  	dc.l Map_obj22+$22000000
0001DF52 0000 0444                  	dc.b 0,	0, 4, $44
0001DF56 3600 D9EE                  	dc.l Map_obj36+$36000000
0001DF5A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DF5E 4100 E760                  	dc.l Map_obj41+$41000000
0001DF62 0000 0523                  	dc.b 0,	0, 5, $23
0001DF66 1300 BC98                  	dc.l Map_obj14+$13000000
0001DF6A 0000 0345                  	dc.b 0,	0, 3, $45
0001DF6E 4600 F346                  	dc.l Map_obj46+$46000000
0001DF72 0000 4000                  	dc.b 0,	0, $40,	0
0001DF76 4C00 FC92                  	dc.l Map_obj4C+$4C000000
0001DF7A 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF7E 4E00 FF76                  	dc.l Map_obj4E+$4E000000
0001DF82 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DF86 3300 CC0E                  	dc.l Map_obj33+$33000000
0001DF8A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF8E 5001 0374                  	dc.l Map_obj50+$50000000
0001DF92 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DF96 5101 0816                  	dc.l Map_obj51+$51000000
0001DF9A 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DF9E 5201 0A8C                  	dc.l Map_obj52+$52000000
0001DFA2 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DFA6 5300 8FD6                  	dc.l Map_obj53+$53000000
0001DFAA 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DFAE 5400 FC58                  	dc.l Map_obj54+$54000000
0001DFB2 0000 8680                  	dc.b 0,	0, $86,	$80
0001DFB6 5501 0C80                  	dc.l Map_obj55+$55000000
0001DFBA 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DFBE 7801 78AC                  	dc.l Map_obj78+$78000000
0001DFC2 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DFC6 7901 7C32                  	dc.l Map_obj79+$79000000
0001DFCA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DFCE                            	even
0001DFCE                            	even
0001DFCE                            
0001DFCE                            ; ---------------------------------------------------------------------------
0001DFCE                            ; Debug	list - Star Light
0001DFCE                            ; ---------------------------------------------------------------------------
0001DFCE                            Debug_SLZ:
0001DFCE                            	include "_inc\Debug list - SLZ.asm"
0001DFCE                            ; ---------------------------------------------------------------------------
0001DFCE                            ; Debug	list - Star Light
0001DFCE                            ; ---------------------------------------------------------------------------
0001DFCE 000F                       	dc.w $F
0001DFD0 2500 A838                  	dc.l Map_obj25+$25000000
0001DFD4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DFD8 2600 AE3E                  	dc.l Map_obj26+$26000000
0001DFDC 0000 0680                  	dc.b 0,	0, 6, $80
0001DFE0 5901 1782                  	dc.l Map_obj59+$59000000
0001DFE4 0000 4000                  	dc.b 0,	0, $40,	0
0001DFE8 5300 8FD6                  	dc.l Map_obj53+$53000000
0001DFEC 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DFF0 1800 899C                  	dc.l Map_obj18b+$18000000
0001DFF4 0000 4000                  	dc.b 0,	0, $40,	0
0001DFF8 5A01 18BC                  	dc.l Map_obj5A+$5A000000
0001DFFC 0000 4000                  	dc.b 0,	0, $40,	0
0001E000 5B01 1A74                  	dc.l Map_obj5B+$5B000000
0001E004 0000 4000                  	dc.b 0,	0, $40,	0
0001E008 5D01 2044                  	dc.l Map_obj5D+$5D000000
0001E00C 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E010 5E01 23D6                  	dc.l Map_obj5E+$5E000000
0001E014 0000 0374                  	dc.b 0,	0, 3, $74
0001E018 4100 E760                  	dc.l Map_obj41+$41000000
0001E01C 0000 0523                  	dc.b 0,	0, 5, $23
0001E020 1300 BC98                  	dc.l Map_obj14+$13000000
0001E024 0000 0480                  	dc.b 0,	0, 4, $80
0001E028 1C00 90E6                  	dc.l Map_obj1C+$1C000000
0001E02C 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E030 5F01 2654                  	dc.l Map_obj5F+$5F000000
0001E034 0000 0400                  	dc.b 0,	0, 4, 0
0001E038 6001 290A                  	dc.l Map_obj60+$60000000
0001E03C 0000 2429                  	dc.b 0,	0, $24,	$29
0001E040 7901 7C32                  	dc.l Map_obj79+$79000000
0001E044 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E048                            	even
0001E048                            	even
0001E048                            
0001E048                            ; ---------------------------------------------------------------------------
0001E048                            ; Debug	list - Spring Yard
0001E048                            ; ---------------------------------------------------------------------------
0001E048                            Debug_SYZ:
0001E048                            	include "_inc\Debug list - SYZ.asm"
0001E048                            ; ---------------------------------------------------------------------------
0001E048                            ; Debug	list - Spring Yard
0001E048                            ; ---------------------------------------------------------------------------
0001E048 000F                       	dc.w $F
0001E04A 2500 A838                  	dc.l Map_obj25+$25000000
0001E04E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E052 2600 AE3E                  	dc.l Map_obj26+$26000000
0001E056 0000 0680                  	dc.b 0,	0, 6, $80
0001E05A 3600 D9EE                  	dc.l Map_obj36+$36000000
0001E05E 0000 051B                  	dc.b 0,	0, 5, $1B
0001E062 4100 E760                  	dc.l Map_obj41+$41000000
0001E066 0000 0523                  	dc.b 0,	0, 5, $23
0001E06A 4300 EBE6                  	dc.l Map_obj43+$43000000
0001E06E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E072 1200 F3C4                  	dc.l Map_obj12+$12000000
0001E076 0000 0000                  	dc.b 0,	0, 0, 0
0001E07A 4700 F540                  	dc.l Map_obj47+$47000000
0001E07E 0000 0380                  	dc.b 0,	0, 3, $80
0001E082 1F00 A030                  	dc.l Map_obj1F+$1F000000
0001E086 0000 0400                  	dc.b 0,	0, 4, 0
0001E08A 2200 A2EC                  	dc.l Map_obj22+$22000000
0001E08E 0000 0444                  	dc.b 0,	0, 4, $44
0001E092 5001 0374                  	dc.l Map_obj50+$50000000
0001E096 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E09A 1800 898A                  	dc.l Map_obj18a+$18000000
0001E09E 0000 4000                  	dc.b 0,	0, $40,	0
0001E0A2 5601 1142                  	dc.l Map_obj56+$56000000
0001E0A6 0000 4000                  	dc.b 0,	0, $40,	0
0001E0AA 3200 C7CE                  	dc.l Map_obj32+$32000000
0001E0AE 0000 0513                  	dc.b 0,	0, 5, $13
0001E0B2 7801 78AC                  	dc.l Map_obj78+$78000000
0001E0B6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E0BA 7901 7C32                  	dc.l Map_obj79+$79000000
0001E0BE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E0C2                            	even
0001E0C2                            	even
0001E0C2                            
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2                            ; Debug	list - Scrap Brain
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2                            Debug_SBZ:
0001E0C2                            	include "_inc\Debug list - SBZ.asm"
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2                            ; Debug	list - Scrap Brain
0001E0C2                            ; ---------------------------------------------------------------------------
0001E0C2 001D                       	dc.w $1D
0001E0C4 2500 A838                  	dc.l Map_obj25+$25000000
0001E0C8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E0CC 2600 AE3E                  	dc.l Map_obj26+$26000000
0001E0D0 0000 0680                  	dc.b 0,	0, 6, $80
0001E0D4 5F01 2654                  	dc.l Map_obj5F+$5F000000
0001E0D8 0000 0400                  	dc.b 0,	0, 4, 0
0001E0DC 6001 290A                  	dc.l Map_obj60+$60000000
0001E0E0 0000 0429                  	dc.b 0,	0, 4, $29
0001E0E4 7801 78AC                  	dc.l Map_obj78+$78000000
0001E0E8 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E0EC 1501 14DE                  	dc.l Map_obj15b+$15000000
0001E0F0 0702 4391                  	dc.b 7,	2, $43,	$91
0001E0F4 6701 61C4                  	dc.l Map_obj67+$67000000
0001E0F8 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E0FC 5201 0A8C                  	dc.l Map_obj52+$52000000
0001E100 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E104 3200 C7CE                  	dc.l Map_obj32+$32000000
0001E108 0000 0513                  	dc.b 0,	0, 5, $13
0001E10C 6901 641E                  	dc.l Map_obj69+$69000000
0001E110 0300 4492                  	dc.b 3,	0, $44,	$92
0001E114 6901 6478                  	dc.l Map_obj69a+$69000000
0001E118 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E11C 6A01 66D6                  	dc.l Map_obj6A+$6A000000
0001E120 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E124 5300 8FD6                  	dc.l Map_obj53+$53000000
0001E128 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E12C 5201 0A8C                  	dc.l Map_obj52+$52000000
0001E130 3903 4460                  	dc.b $39, 3, $44, $60
0001E134 6B01 6AA6                  	dc.l Map_obj6B+$6B000000
0001E138 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E13C 2A00 927C                  	dc.l Map_obj2A+$2A000000
0001E140 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E144 6B01 6AA6                  	dc.l Map_obj6B+$6B000000
0001E148 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E14C 6A01 66D6                  	dc.l Map_obj6A+$6A000000
0001E150 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E154 6B01 6AA6                  	dc.l Map_obj6B+$6B000000
0001E158 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E15C 6A01 66D6                  	dc.l Map_obj6A+$6A000000
0001E160 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E164 6B01 6AA6                  	dc.l Map_obj6B+$6B000000
0001E168 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E16C 6C01 6C68                  	dc.l Map_obj6C+$6C000000
0001E170 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E174 6D00 F036                  	dc.l Map_obj6D+$6D000000
0001E178 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E17C 6D00 F036                  	dc.l Map_obj6D+$6D000000
0001E180 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E184 6E01 6D1E                  	dc.l Map_obj6E+$6E000000
0001E188 0400 047E                  	dc.b 4,	0, 4, $7E
0001E18C 7001 7170                  	dc.l Map_obj70+$70000000
0001E190 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E194 7101 1EEA                  	dc.l Map_obj71+$71000000
0001E198 1100 8680                  	dc.b $11, 0, $86, $80
0001E19C 1E00 973A                  	dc.l Map_obj1E+$1E000000
0001E1A0 0400 2302                  	dc.b 4,	0, $23,	2
0001E1A4 7901 7C32                  	dc.l Map_obj79+$79000000
0001E1A8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E1AC                            	even
0001E1AC                            	even
0001E1AC                            
0001E1AC                            ; ---------------------------------------------------------------------------
0001E1AC                            ; Debug	list - ending sequence / special stage
0001E1AC                            ; ---------------------------------------------------------------------------
0001E1AC                            Debug_Ending:
0001E1AC                            	include "_inc\Debug list - Ending and SS.asm"
0001E1AC                            ; ---------------------------------------------------------------------------
0001E1AC                            ; Debug	list - ending sequence / special stage
0001E1AC                            ; ---------------------------------------------------------------------------
0001E1AC 000D                       	dc.w $D
0001E1AE 2500 A838                  	dc.l Map_obj25+$25000000
0001E1B2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E1B6 4700 F540                  	dc.l Map_obj47+$47000000
0001E1BA 0000 0380                  	dc.b 0,	0, 3, $80
0001E1BE 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E1C2 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001E1C6 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E1CA 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001E1CE 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E1D2 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001E1D6 2800 9D4A                  	dc.l Map_obj28+$28000000
0001E1DA 0D00 0553                  	dc.b $D, 0, 5, $53
0001E1DE 2800 9D4A                  	dc.l Map_obj28+$28000000
0001E1E2 0E00 0553                  	dc.b $E, 0, 5, $53
0001E1E6 2800 9D4A                  	dc.l Map_obj28+$28000000
0001E1EA 0F00 0573                  	dc.b $F, 0, 5, $73
0001E1EE 2800 9D4A                  	dc.l Map_obj28+$28000000
0001E1F2 1000 0573                  	dc.b $10, 0, 5,	$73
0001E1F6 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E1FA 1100 0585                  	dc.b $11, 0, 5,	$85
0001E1FE 2800 9D7A                  	dc.l Map_obj28b+$28000000
0001E202 1200 0593                  	dc.b $12, 0, 5,	$93
0001E206 2800 9D62                  	dc.l Map_obj28a+$28000000
0001E20A 1300 0565                  	dc.b $13, 0, 5,	$65
0001E20E 2800 9D7A                  	dc.l Map_obj28b+$28000000
0001E212 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001E216                            	even
0001E216                            	even
0001E216                            
0001E216                            ; ---------------------------------------------------------------------------
0001E216                            ; Main level load blocks
0001E216                            ; ---------------------------------------------------------------------------
0001E216                            MainLoadBlocks:
0001E216                            	include "_inc\Main level load blocks.asm"
0001E216                            ; ---------------------------------------------------------------------------
0001E216                            ; Main level load blocks
0001E216                            ;
0001E216                            ; ===FORMAT===
0001E216                            ; level	patterns + (1st	PLC num	* 10^6)
0001E216                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001E216                            ; 256x256 mappings
0001E216                            ; blank, music (unused), pal index (unused), pal index
0001E216                            ; ---------------------------------------------------------------------------
0001E216 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001E21A 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001E21E 0000 0000                  	dc.l Blk256_GHZ
0001E222 0081 0404                  	dc.b 0,	$81, 4,	4
0001E226 0000 0000                  	dc.l Nem_LZ|6<<24
0001E22A 0000 0000                  	dc.l Blk16_LZ|7<<24
0001E22E 0000 0000                  	dc.l Blk256_LZ
0001E232 0082 0505                  	dc.b 0,	$82, 5,	5
0001E236 0000 0000                  	dc.l Nem_MZ|8<<24
0001E23A 0000 0000                  	dc.l Blk16_MZ|9<<24
0001E23E 0000 0000                  	dc.l Blk256_MZ
0001E242 0083 0606                  	dc.b 0,	$83, 6,	6
0001E246 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001E24A 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001E24E 0000 0000                  	dc.l Blk256_SLZ
0001E252 0084 0707                  	dc.b 0,	$84, 7,	7
0001E256 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001E25A 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001E25E 0000 0000                  	dc.l Blk256_SYZ
0001E262 0085 0808                  	dc.b 0,	$85, 8,	8
0001E266 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001E26A 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001E26E 0000 0000                  	dc.l Blk256_SBZ
0001E272 0086 0909                  	dc.b 0,	$86, 9,	9
0001E276 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001E27A 0000 0000                  	dc.l Blk16_GHZ
0001E27E 0000 0000                  	dc.l Blk256_GHZ
0001E282 0086 1313                  	dc.b 0,	$86, $13, $13
0001E286                            ; there you go lol
0001E286 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001E28A 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001E28E 0000 0000                  	dc.l Blk256_BHZ
0001E292 009E 1515                  	dc.b 0,	$9E, $15, $15
0001E296                            	even
0001E296                            	even
0001E296                            
0001E296                            ; ---------------------------------------------------------------------------
0001E296                            ; Pattern load cues
0001E296                            ; ---------------------------------------------------------------------------
0001E296                            ArtLoadCues:
0001E296                            	include "_inc\Pattern load cues.asm"
0001E296                            ; ---------------------------------------------------------------------------
0001E296                            ; Pattern load cues - index
0001E296                            ; ---------------------------------------------------------------------------
0001E296 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001E29A 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001E29E 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001E2A2 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001E2A6 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001E2AA 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001E2AE 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001E2B2 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001E2B6 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001E2BA 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001E2BE 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001E2C2 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001E2C6 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001E2CA 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001E2CE 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001E2D2 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001E2D6                            
0001E2D6 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001E2DA 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001E2DC                            ; ---------------------------------------------------------------------------
0001E2DC                            ; Pattern load cues - standard block 1
0001E2DC                            ; ---------------------------------------------------------------------------
0001E2DC 0004                       PLC_Main:	dc.w 4
0001E2DE 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001E2E2 F400                       		dc.w $F400
0001E2E4 0000 0000                  		dc.l Nem_Hud		; HUD
0001E2E8 D940                       		dc.w $D940
0001E2EA 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001E2EE FA80                       		dc.w $FA80
0001E2F0 0000 0000                  		dc.l Nem_Ring		; rings
0001E2F4 F640                       		dc.w $F640
0001E2F6 0000 0000                  		dc.l Nem_Points		; points from enemy
0001E2FA F2E0                       		dc.w $F2E0
0001E2FC                            ; ---------------------------------------------------------------------------
0001E2FC                            ; Pattern load cues - standard block 2
0001E2FC                            ; ---------------------------------------------------------------------------
0001E2FC 0002                       PLC_Main2:	dc.w 2
0001E2FE 0000 0000                  		dc.l Nem_Monitors	; monitors
0001E302 D000                       		dc.w $D000
0001E304 0000 0000                  		dc.l Nem_Shield		; shield
0001E308 A820                       		dc.w $A820
0001E30A 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001E30E AB80                       		dc.w $AB80
0001E310                            ; ---------------------------------------------------------------------------
0001E310                            ; Pattern load cues - explosion
0001E310                            ; ---------------------------------------------------------------------------
0001E310 0000                       PLC_Explode:	dc.w 0
0001E312 0000 0000                  		dc.l Nem_Explode	; explosion
0001E316 B400                       		dc.w $B400
0001E318                            ; ---------------------------------------------------------------------------
0001E318                            ; Pattern load cues - game/time	over
0001E318                            ; ---------------------------------------------------------------------------
0001E318 0000                       PLC_GameOver:	dc.w 0
0001E31A 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001E31E ABC0                       		dc.w $ABC0
0001E320                            ; ---------------------------------------------------------------------------
0001E320                            ; Pattern load cues - Green Hill
0001E320                            ; ---------------------------------------------------------------------------
0001E320 000B                       PLC_GHZ:	dc.w $B
0001E322 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E326 0000                       		dc.w 0
0001E328 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E32C 39A0                       		dc.w $39A0
0001E32E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E332 6B00                       		dc.w $6B00
0001E334 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E338 7A00                       		dc.w $7A00
0001E33A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E33E 8000                       		dc.w $8000
0001E340 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E344 8880                       		dc.w $8880
0001E346 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E34A 8F60                       		dc.w $8F60
0001E34C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E350 9360                       		dc.w $9360
0001E352 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E356 9E00                       		dc.w $9E00
0001E358 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E35C A360                       		dc.w $A360
0001E35E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E362 A460                       		dc.w $A460
0001E364 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E368 A660                       		dc.w $A660
0001E36A 0005                       PLC_GHZ2:	dc.w 5
0001E36C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E370 7000                       		dc.w $7000
0001E372 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E376 71C0                       		dc.w $71C0
0001E378 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E37C 7300                       		dc.w $7300
0001E37E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E382 7540                       		dc.w $7540
0001E384 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E388 A1E0                       		dc.w $A1E0
0001E38A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E38E 6980                       		dc.w $6980
0001E390                            ; ---------------------------------------------------------------------------
0001E390                            ; Pattern load cues - Labyrinth
0001E390                            ; ---------------------------------------------------------------------------
0001E390 000B                       PLC_LZ:		dc.w $B
0001E392 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E396 0000                       		dc.w 0
0001E398 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E39C 3C00                       		dc.w $3C00
0001E39E 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E3A2 3E00                       		dc.w $3E00
0001E3A4 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E3A8 4B20                       		dc.w $4B20
0001E3AA 0000 0000                  		dc.l Nem_Water		; water	surface
0001E3AE 6000                       		dc.w $6000
0001E3B0 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E3B4 6200                       		dc.w $6200
0001E3B6 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E3BA 6500                       		dc.w $6500
0001E3BC 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E3C0 6900                       		dc.w $6900
0001E3C2 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E3C6 7780                       		dc.w $7780
0001E3C8 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E3CC 7880                       		dc.w $7880
0001E3CE 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E3D2 7980                       		dc.w $7980
0001E3D4 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E3D8 94C0                       		dc.w $94C0
0001E3DA 000C                       PLC_LZ2:	dc.w $C
0001E3DC 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E3E0 7BC0                       		dc.w $7BC0
0001E3E2 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E3E6 7CC0                       		dc.w $7CC0
0001E3E8 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E3EC 7EC0                       		dc.w $7EC0
0001E3EE 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E3F2 5D20                       		dc.w $5D20
0001E3F4 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E3F8 8800                       		dc.w $8800
0001E3FA 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E3FE 89E0                       		dc.w $89E0
0001E400 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E404 8CE0                       		dc.w $8CE0
0001E406 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E40A 90C0                       		dc.w $90C0
0001E40C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E410 A1E0                       		dc.w $A1E0
0001E412 0000 0000                  		dc.l Nem_Cork		; cork block
0001E416 A000                       		dc.w $A000
0001E418 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E41C A360                       		dc.w $A360
0001E41E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E422 A460                       		dc.w $A460
0001E424 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E428 A660                       		dc.w $A660
0001E42A                            ; ---------------------------------------------------------------------------
0001E42A                            ; Pattern load cues - Marble
0001E42A                            ; ---------------------------------------------------------------------------
0001E42A 0009                       PLC_MZ:		dc.w 9
0001E42C 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E430 0000                       		dc.w 0
0001E432 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E436 6000                       		dc.w $6000
0001E438 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E43C 68A0                       		dc.w $68A0
0001E43E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E442 7000                       		dc.w $7000
0001E444 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E448 71C0                       		dc.w $71C0
0001E44A 0000 0000                  		dc.l Nem_Lava		; lava
0001E44E 7500                       		dc.w $7500
0001E450 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E454 8880                       		dc.w $8880
0001E456 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E45A 8F60                       		dc.w $8F60
0001E45C 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E460 9700                       		dc.w $9700
0001E462 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E466 9FE0                       		dc.w $9FE0
0001E468 0004                       PLC_MZ2:	dc.w 4
0001E46A 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E46E A260                       		dc.w $A260
0001E470 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E474 A360                       		dc.w $A360
0001E476 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E47A A460                       		dc.w $A460
0001E47C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E480 A660                       		dc.w $A660
0001E482 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E486 5700                       		dc.w $5700
0001E488                            ; ---------------------------------------------------------------------------
0001E488                            ; Pattern load cues - Star Light
0001E488                            ; ---------------------------------------------------------------------------
0001E488 0008                       PLC_SLZ:	dc.w 8
0001E48A 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E48E 0000                       		dc.w 0
0001E490 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E494 8000                       		dc.w $8000
0001E496 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E49A 8520                       		dc.w $8520
0001E49C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E4A0 9000                       		dc.w $9000
0001E4A2 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E4A6 9C00                       		dc.w $9C00
0001E4A8 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E4AC A260                       		dc.w $A260
0001E4AE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E4B2 A360                       		dc.w $A360
0001E4B4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E4B8 A460                       		dc.w $A460
0001E4BA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E4BE A660                       		dc.w $A660
0001E4C0 0005                       PLC_SLZ2:	dc.w 5
0001E4C2 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E4C6 6E80                       		dc.w $6E80
0001E4C8 0000 0000                  		dc.l Nem_Fan		; fan
0001E4CC 7400                       		dc.w $7400
0001E4CE 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E4D2 7980                       		dc.w $7980
0001E4D4 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E4D8 7B80                       		dc.w $7B80
0001E4DA 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E4DE 9B00                       		dc.w $9B00
0001E4E0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E4E4 9E00                       		dc.w $9E00
0001E4E6                            ; ---------------------------------------------------------------------------
0001E4E6                            ; Pattern load cues - Spring Yard
0001E4E6                            ; ---------------------------------------------------------------------------
0001E4E6 0004                       PLC_SYZ:	dc.w 4
0001E4E8 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E4EC 0000                       		dc.w 0
0001E4EE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E4F2 8000                       		dc.w $8000
0001E4F4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E4F8 8880                       		dc.w $8880
0001E4FA 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E4FE 8F60                       		dc.w $8F60
0001E500 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E504 9700                       		dc.w $9700
0001E506 0007                       PLC_SYZ2:	dc.w 7
0001E508 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E50C 7000                       		dc.w $7000
0001E50E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E512 72C0                       		dc.w $72C0
0001E514 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E518 7740                       		dc.w $7740
0001E51A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E51E 9FE0                       		dc.w $9FE0
0001E520 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E524 A1E0                       		dc.w $A1E0
0001E526 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E52A A360                       		dc.w $A360
0001E52C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E530 A460                       		dc.w $A460
0001E532 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E536 A660                       		dc.w $A660
0001E538                            ; ---------------------------------------------------------------------------
0001E538                            ; Pattern load cues - Scrap Brain
0001E538                            ; ---------------------------------------------------------------------------
0001E538 000B                       PLC_SBZ:	dc.w $B
0001E53A 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E53E 0000                       		dc.w 0
0001E540 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E544 5800                       		dc.w $5800
0001E546 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E54A 5D00                       		dc.w $5D00
0001E54C 0000 0000                  		dc.l Nem_Girder		; girder
0001E550 5E00                       		dc.w $5E00
0001E552 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E556 6040                       		dc.w $6040
0001E558 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E55C 6880                       		dc.w $6880
0001E55E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E562 6900                       		dc.w $6900
0001E564 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E568 7220                       		dc.w $7220
0001E56A 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E56E 76A0                       		dc.w $76A0
0001E570 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E574 7B20                       		dc.w $7B20
0001E576 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E57A 7EA0                       		dc.w $7EA0
0001E57C 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E580 9860                       		dc.w $9860
0001E582 000C                       PLC_SBZ2:	dc.w $C
0001E584 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E588 5600                       		dc.w $5600
0001E58A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E58E 8000                       		dc.w $8000
0001E590 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E594 8520                       		dc.w $8520
0001E596 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E59A 8C00                       		dc.w $8C00
0001E59C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E5A0 8DE0                       		dc.w $8DE0
0001E5A2 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E5A6 8FC0                       		dc.w $8FC0
0001E5A8 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E5AC 9240                       		dc.w $9240
0001E5AE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E5B2 7F20                       		dc.w $7F20
0001E5B4 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E5B8 9BE0                       		dc.w $9BE0
0001E5BA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E5BE A1E0                       		dc.w $A1E0
0001E5C0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E5C4 A360                       		dc.w $A360
0001E5C6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E5CA A460                       		dc.w $A460
0001E5CC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E5D0 A660                       		dc.w $A660
0001E5D2                            ; ---------------------------------------------------------------------------
0001E5D2                            ; Pattern load cues - DR. Breen Hill
0001E5D2                            ; ---------------------------------------------------------------------------
0001E5D2 000A                       PLC_BHZ:	dc.w $A
0001E5D4 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001E5D8 0000                       		dc.w 0
0001E5DA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E5DE 6B00                       		dc.w $6B00
0001E5E0 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E5E4 7A00                       		dc.w $7A00
0001E5E6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E5EA 8000                       		dc.w $8000
0001E5EC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E5F0 8880                       		dc.w $8880
0001E5F2 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E5F6 8F60                       		dc.w $8F60
0001E5F8 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E5FC 9360                       		dc.w $9360
0001E5FE 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E602 9E00                       		dc.w $9E00
0001E604 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E608 A360                       		dc.w $A360
0001E60A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E60E A460                       		dc.w $A460
0001E610 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E614 A660                       		dc.w $A660
0001E616 0005                       PLC_BHZ2:	dc.w 5
0001E618 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E61C 7000                       		dc.w $7000
0001E61E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E622 71C0                       		dc.w $71C0
0001E624 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E628 7300                       		dc.w $7300
0001E62A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E62E 7540                       		dc.w $7540
0001E630 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E634 A1E0                       		dc.w $A1E0
0001E636 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E63A 6980                       		dc.w $6980
0001E63C                            ; ---------------------------------------------------------------------------
0001E63C                            ; Pattern load cues - title card
0001E63C                            ; ---------------------------------------------------------------------------
0001E63C 0000                       PLC_TitleCard:	dc.w 0
0001E63E 0000 0000                  		dc.l Nem_TitleCard
0001E642 B000                       		dc.w $B000
0001E644                            ; ---------------------------------------------------------------------------
0001E644                            ; Pattern load cues - act 3 boss
0001E644                            ; ---------------------------------------------------------------------------
0001E644 0005                       PLC_Boss:	dc.w 5
0001E646 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E64A 8000                       		dc.w $8000
0001E64C 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E650 8D80                       		dc.w $8D80
0001E652 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E656 93A0                       		dc.w $93A0
0001E658 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E65C A300                       		dc.w $A300
0001E65E 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E662 A300                       		dc.w $A300
0001E664 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E668 A540                       		dc.w $A540
0001E66A                            ; ---------------------------------------------------------------------------
0001E66A                            ; Pattern load cues - act 1/2 signpost
0001E66A                            ; ---------------------------------------------------------------------------
0001E66A 0002                       PLC_Signpost:	dc.w 2
0001E66C 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E670 D000                       		dc.w $D000
0001E672 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E676 96C0                       		dc.w $96C0
0001E678 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E67C 8C40                       		dc.w $8C40
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E                            ; Pattern load cues - beta special stage warp effect
0001E67E                            ; ---------------------------------------------------------------------------
0001E67E 0000                       PLC_Warp:	dc.w 0
0001E680 0000 0000                  		dc.l Nem_Warp
0001E684 A820                       		dc.w $A820
0001E686                            ; ---------------------------------------------------------------------------
0001E686                            ; Pattern load cues - special stage
0001E686                            ; ---------------------------------------------------------------------------
0001E686 0010                       PLC_SpeStage:	dc.w $10
0001E688 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E68C 0000                       		dc.w 0
0001E68E 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E692 0A20                       		dc.w $A20
0001E694 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E698 2840                       		dc.w $2840
0001E69A 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E69E 4760                       		dc.w $4760
0001E6A0 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E6A4 4A20                       		dc.w $4A20
0001E6A6 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E6AA 4C60                       		dc.w $4C60
0001E6AC 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E6B0 5E00                       		dc.w $5E00
0001E6B2 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E6B6 6E00                       		dc.w $6E00
0001E6B8 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E6BC 7E00                       		dc.w $7E00
0001E6BE 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E6C2 8E00                       		dc.w $8E00
0001E6C4 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E6C8 9E00                       		dc.w $9E00
0001E6CA 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E6CE AE00                       		dc.w $AE00
0001E6D0 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E6D4 BE00                       		dc.w $BE00
0001E6D6 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E6DA EE00                       		dc.w $EE00
0001E6DC 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E6E0 F2E0                       		dc.w $F2E0
0001E6E2 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E6E6 F400                       		dc.w $F400
0001E6E8 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E6EC F520                       		dc.w $F520
0001E6EE 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E6F2 F2E0                       		dc.w $F2E0
0001E6F4 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E6F8 F400                       		dc.w $F400
0001E6FA 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E6FE F520                       		dc.w $F520
0001E700                            ; ---------------------------------------------------------------------------
0001E700                            ; Pattern load cues - GHZ animals
0001E700                            ; ---------------------------------------------------------------------------
0001E700 0001                       PLC_GHZAnimals:	dc.w 1
0001E702 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E706 B000                       		dc.w $B000
0001E708 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E70C B240                       		dc.w $B240
0001E70E                            ; ---------------------------------------------------------------------------
0001E70E                            ; Pattern load cues - LZ animals
0001E70E                            ; ---------------------------------------------------------------------------
0001E70E 0001                       PLC_LZAnimals:	dc.w 1
0001E710 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E714 B000                       		dc.w $B000
0001E716 0000 0000                  		dc.l Nem_Seal		; seal
0001E71A B240                       		dc.w $B240
0001E71C                            ; ---------------------------------------------------------------------------
0001E71C                            ; Pattern load cues - MZ animals
0001E71C                            ; ---------------------------------------------------------------------------
0001E71C 0001                       PLC_MZAnimals:	dc.w 1
0001E71E 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E722 B000                       		dc.w $B000
0001E724 0000 0000                  		dc.l Nem_Seal		; seal
0001E728 B240                       		dc.w $B240
0001E72A                            ; ---------------------------------------------------------------------------
0001E72A                            ; Pattern load cues - SLZ animals
0001E72A                            ; ---------------------------------------------------------------------------
0001E72A 0001                       PLC_SLZAnimals:	dc.w 1
0001E72C 0000 0000                  		dc.l Nem_Pig		; pig
0001E730 B000                       		dc.w $B000
0001E732 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E736 B240                       		dc.w $B240
0001E738                            ; ---------------------------------------------------------------------------
0001E738                            ; Pattern load cues - SYZ animals
0001E738                            ; ---------------------------------------------------------------------------
0001E738 0001                       PLC_SYZAnimals:	dc.w 1
0001E73A 0000 0000                  		dc.l Nem_Pig		; pig
0001E73E B000                       		dc.w $B000
0001E740 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E744 B240                       		dc.w $B240
0001E746                            ; ---------------------------------------------------------------------------
0001E746                            ; Pattern load cues - SBZ animals
0001E746                            ; ---------------------------------------------------------------------------
0001E746 0001                       PLC_SBZAnimals:	dc.w 1
0001E748 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E74C B000                       		dc.w $B000
0001E74E 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E752 B240                       		dc.w $B240
0001E754                            ; ---------------------------------------------------------------------------
0001E754                            ; Pattern load cues - special stage results screen
0001E754                            ; ---------------------------------------------------------------------------
0001E754 0001                       PLC_SpeStResult:dc.w 1
0001E756 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E75A A820                       		dc.w $A820
0001E75C 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E760 AA20                       		dc.w $AA20
0001E762                            ; ---------------------------------------------------------------------------
0001E762                            ; Pattern load cues - ending sequence
0001E762                            ; ---------------------------------------------------------------------------
0001E762 000E                       PLC_Ending:	dc.w $E
0001E764 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E768 0000                       		dc.w 0
0001E76A 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E76E 39A0                       		dc.w $39A0
0001E770 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E774 6B00                       		dc.w $6B00
0001E776 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E77A 7400                       		dc.w $7400
0001E77C 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E780 78A0                       		dc.w $78A0
0001E782 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E786 7C20                       		dc.w $7C20
0001E788 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E78C A480                       		dc.w $A480
0001E78E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E792 AA60                       		dc.w $AA60
0001E794 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E798 ACA0                       		dc.w $ACA0
0001E79A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E79E AE60                       		dc.w $AE60
0001E7A0 0000 0000                  		dc.l Nem_Seal		; seal
0001E7A4 B0A0                       		dc.w $B0A0
0001E7A6 0000 0000                  		dc.l Nem_Pig		; pig
0001E7AA B260                       		dc.w $B260
0001E7AC 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E7B0 B4A0                       		dc.w $B4A0
0001E7B2 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E7B6 B660                       		dc.w $B660
0001E7B8 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E7BC B8A0                       		dc.w $B8A0
0001E7BE                            ; ---------------------------------------------------------------------------
0001E7BE                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E7BE                            ; ---------------------------------------------------------------------------
0001E7BE 0002                       PLC_TryAgain:	dc.w 2
0001E7C0 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E7C4 78A0                       		dc.w $78A0
0001E7C6 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E7CA 7C20                       		dc.w $7C20
0001E7CC 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E7D0 B400                       		dc.w $B400
0001E7D2                            ; ---------------------------------------------------------------------------
0001E7D2                            ; Pattern load cues - Eggman on SBZ 2
0001E7D2                            ; ---------------------------------------------------------------------------
0001E7D2 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E7D4 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E7D8 A300                       		dc.w $A300
0001E7DA 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E7DE 8000                       		dc.w $8000
0001E7E0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E7E4 9400                       		dc.w $9400
0001E7E6                            ; ---------------------------------------------------------------------------
0001E7E6                            ; Pattern load cues - final boss
0001E7E6                            ; ---------------------------------------------------------------------------
0001E7E6 0004                       PLC_FZBoss:	dc.w 4
0001E7E8 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E7EC 7400                       		dc.w $7400
0001E7EE 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E7F2 6000                       		dc.w $6000
0001E7F4 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E7F8 8000                       		dc.w $8000
0001E7FA 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E7FE 8E00                       		dc.w $8E00
0001E800 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E804 A540                       		dc.w $A540
0001E806                            ; ---------------------------------------------------------------------------
0001E806                            ; Pattern load cues - Teto boss
0001E806                            ; ---------------------------------------------------------------------------
0001E806 0002                       PLC_TetoBoss:	dc.w 2
0001E808 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E80C 8000                       		dc.w $8000
0001E80E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E812 93A0                       		dc.w $93A0
0001E814 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E818 9000                       		dc.w $9000
0001E81A                            		even
0001E81A                            		even
0001E81A                            
0001E81A                            		incbin	misc\padding.bin
0001E908                            		even
0001E908                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001ED5E                            		even
0001ED5E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EDF6                            		even
0001EDF6                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EF38                            		even
0001EF38                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EF86                            		even
0001EF86                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F09A                            		even
0001F09A                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FF64                            		even
0001FF64                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
0002406A                            		even
0002406A                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
0002409E                            		even
0002409E                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
0002415C                            		even
0002415C                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024604                            		even
00024604                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024662                            		even
00024662                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00025268                            		even
00025268                            ; ---------------------------------------------------------------------------
00025268                            ; Sprite mappings - Sonic
00025268                            ; ---------------------------------------------------------------------------
00025268                            Map_Sonic:
00025268                            	include "_maps\Sonic.asm"
00025268                            Map_a933:
00025268 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
0002526A 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
0002526C 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
0002526E 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
00025270 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
00025272 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
00025274 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
00025276 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
00025278 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
0002527A 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
0002527C 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
0002527E 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
00025280 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
00025282 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
00025284 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
00025286 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
00025288 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
0002528A 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
0002528C 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
0002528E 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00025290 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
00025292 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
00025294 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
00025296 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
00025298 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
0002529A 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
0002529C 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
0002529E 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
000252A0 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
000252A2 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
000252A4 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
000252A6 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
000252A8 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
000252AA 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
000252AC 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000252AE 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000252B0 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000252B2 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000252B4 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000252B6 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000252B8 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000252BA 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000252BC 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000252BE 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000252C0 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000252C2 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000252C4 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000252C6 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000252C8 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000252CA 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
000252CC 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
000252CE 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
000252D0 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
000252D2 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
000252D4 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
000252D6 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
000252D8 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
000252DA 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
000252DC 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
000252DE 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
000252E0 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
000252E2 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
000252E4 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
000252E6 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
000252E8 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
000252EA 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
000252EC 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
000252EE 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
000252F0 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
000252F2 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
000252F4 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
000252F6 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
000252F8 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
000252FA 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
000252FC 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
000252FE 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
00025300 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
00025302 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
00025304 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
00025306 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
00025308 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
0002530A 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
0002530C 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
0002530E 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00025310 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00025312 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00025314 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00025316 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
00025318 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002531A 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
0002531C 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
0002531E 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00025320 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00025322 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00025324 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00025326 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
00025328 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002532A 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
0002532C 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
0002532E 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00025330 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00025332 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00025334 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00025336 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
00025338 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
0002533A 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
0002533C 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
0002533E 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00025340 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00025342 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00025344 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
00025346 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
00025348 00                         Map_a933_E0: 	dc.b $0
00025349 02                         Map_a933_E1: 	dc.b $2
0002534A ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
0002534F 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00025354 03                         Map_a933_EC: 	dc.b $3
00025355 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002535A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002535F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025364 03                         Map_a933_FC: 	dc.b $3
00025365 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002536A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002536F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025374 03                         Map_a933_10C: 	dc.b $3
00025375 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002537A FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
0002537F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025384 03                         Map_a933_11C: 	dc.b $3
00025385 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002538A 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
0002538F 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00025394 04                         Map_a933_12C: 	dc.b $4
00025395 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
0002539A FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
0002539F FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000253A4 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000253A9 02                         Map_a933_141: 	dc.b $2
000253AA EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000253AF FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000253B4 02                         Map_a933_14C: 	dc.b $2
000253B5 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000253BA FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000253BF 04                         Map_a933_157: 	dc.b $4
000253C0 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000253C5 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000253CA FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
000253CF 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
000253D4 02                         Map_a933_16C: 	dc.b $2
000253D5 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
000253DA EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
000253DF 03                         Map_a933_177: 	dc.b $3
000253E0 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
000253E5 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
000253EA 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
000253EF 05                         Map_a933_187: 	dc.b $5
000253F0 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000253F5 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
000253FA FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
000253FF 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025404 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00025409 06                         Map_a933_1A1: 	dc.b $6
0002540A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002540F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025414 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025419 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002541E FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025423 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00025428 04                         Map_a933_1C0: 	dc.b $4
00025429 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002542E ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025433 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00025438 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002543D 05                         Map_a933_1D5: 	dc.b $5
0002543E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025443 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00025448 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
0002544D 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025452 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00025457 04                         Map_a933_1EF: 	dc.b $4
00025458 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002545D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025462 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00025467 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
0002546C 05                         Map_a933_204: 	dc.b $5
0002546D ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025472 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025477 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
0002547C FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00025481 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00025486 04                         Map_a933_21E: 	dc.b $4
00025487 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
0002548C EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025491 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00025496 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002549B 02                         Map_a933_233: 	dc.b $2
0002549C F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000254A1 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000254A6 02                         Map_a933_23E: 	dc.b $2
000254A7 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000254AC F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000254B1 04                         Map_a933_249: 	dc.b $4
000254B2 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000254B7 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000254BC FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000254C1 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000254C6 02                         Map_a933_25E: 	dc.b $2
000254C7 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000254CC F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000254D1 03                         Map_a933_269: 	dc.b $3
000254D2 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000254D7 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000254DC F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000254E1 06                         Map_a933_279: 	dc.b $6
000254E2 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000254E7 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
000254EC F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
000254F1 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
000254F6 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
000254FB FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00025500 06                         Map_a933_298: 	dc.b $6
00025501 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025506 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
0002550B EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00025510 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025515 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002551A 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002551F 04                         Map_a933_2B7: 	dc.b $4
00025520 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025525 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002552A EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002552F 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025534 05                         Map_a933_2CC: 	dc.b $5
00025535 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002553A ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002553F F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025544 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00025549 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
0002554E 04                         Map_a933_2E6: 	dc.b $4
0002554F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025554 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00025559 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002555E 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025563 05                         Map_a933_2FB: 	dc.b $5
00025564 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025569 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
0002556E F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025573 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025578 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
0002557D 02                         Map_a933_315: 	dc.b $2
0002557E EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025583 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025588 02                         Map_a933_320: 	dc.b $2
00025589 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002558E FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025593 02                         Map_a933_32B: 	dc.b $2
00025594 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025599 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002559E 02                         Map_a933_336: 	dc.b $2
0002559F EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000255A4 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000255A9 04                         Map_a933_341: 	dc.b $4
000255AA EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000255AF EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000255B4 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000255B9 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000255BE 03                         Map_a933_356: 	dc.b $3
000255BF EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000255C4 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000255C9 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000255CE 04                         Map_a933_366: 	dc.b $4
000255CF EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000255D4 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000255D9 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000255DE FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000255E3 03                         Map_a933_37B: 	dc.b $3
000255E4 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000255E9 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000255EE FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000255F3 02                         Map_a933_38B: 	dc.b $2
000255F4 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000255F9 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000255FE 02                         Map_a933_396: 	dc.b $2
000255FF F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025604 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025609 02                         Map_a933_3A1: 	dc.b $2
0002560A F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002560F F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025614 02                         Map_a933_3AC: 	dc.b $2
00025615 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002561A F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002561F 04                         Map_a933_3B7: 	dc.b $4
00025620 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025625 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002562A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002562F 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025634 02                         Map_a933_3CC: 	dc.b $2
00025635 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002563A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002563F 04                         Map_a933_3D7: 	dc.b $4
00025640 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025645 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002564A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002564F 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025654 02                         Map_a933_3EC: 	dc.b $2
00025655 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002565A EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002565F 01                         Map_a933_3F7: 	dc.b $1
00025660 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025665 01                         Map_a933_3FD: 	dc.b $1
00025666 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002566B 01                         Map_a933_403: 	dc.b $1
0002566C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025671 01                         Map_a933_409: 	dc.b $1
00025672 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025677 01                         Map_a933_40F: 	dc.b $1
00025678 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002567D 02                         Map_a933_415: 	dc.b $2
0002567E F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025683 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00025688 01                         Map_a933_420: 	dc.b $1
00025689 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002568E 02                         Map_a933_426: 	dc.b $2
0002568F EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025694 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00025699 01                         Map_a933_431: 	dc.b $1
0002569A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002569F 02                         Map_a933_437: 	dc.b $2
000256A0 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000256A5 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000256AA 04                         Map_a933_442: 	dc.b $4
000256AB ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000256B0 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000256B5 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000256BA 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000256BF 06                         Map_a933_457: 	dc.b $6
000256C0 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000256C5 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000256CA 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000256CF 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000256D4 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000256D9 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000256DE 02                         Map_a933_476: 	dc.b $2
000256DF 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000256E4 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000256E9 02                         Map_a933_481: 	dc.b $2
000256EA 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000256EF EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000256F4 04                         Map_a933_48C: 	dc.b $4
000256F5 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000256FA F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000256FF 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025704 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025709 02                         Map_a933_4A1: 	dc.b $2
0002570A F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002570F F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025714 03                         Map_a933_4AC: 	dc.b $3
00025715 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002571A FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002571F 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025724 04                         Map_a933_4BC: 	dc.b $4
00025725 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002572A F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002572F 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025734 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025739 02                         Map_a933_4D1: 	dc.b $2
0002573A EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002573F 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00025744 04                         Map_a933_4DC: 	dc.b $4
00025745 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002574A 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002574F F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025754 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025759 04                         Map_a933_4F1: 	dc.b $4
0002575A F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002575F 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025764 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025769 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002576E 05                         Map_a933_506: 	dc.b $5
0002576F E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025774 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025779 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002577E 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025783 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025788 05                         Map_a933_520: 	dc.b $5
00025789 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002578E E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00025793 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025798 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002579D 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000257A2 02                         Map_a933_53A: 	dc.b $2
000257A3 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000257A8 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000257AD 03                         Map_a933_545: 	dc.b $3
000257AE EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000257B3 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000257B8 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000257BD 02                         Map_a933_555: 	dc.b $2
000257BE ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000257C3 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000257C8 03                         Map_a933_560: 	dc.b $3
000257C9 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000257CE 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000257D3 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000257D8 02                         Map_a933_570: 	dc.b $2
000257D9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000257DE FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000257E3 03                         Map_a933_57B: 	dc.b $3
000257E4 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000257E9 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000257EE E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000257F3 03                         Map_a933_58B: 	dc.b $3
000257F4 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000257F9 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000257FE F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025803 05                         Map_a933_59B: 	dc.b $5
00025804 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025809 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002580E F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025813 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025818 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002581D 05                         Map_a933_5B5: 	dc.b $5
0002581E E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025823 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025828 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002582D 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025832 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025837 02                         Map_a933_5CF: 	dc.b $2
00025838 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002583D F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025842 03                         Map_a933_5DA: 	dc.b $3
00025843 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025848 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002584D 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025852 01                         Map_a933_5EA: 	dc.b $1
00025853 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025858 01                         Map_a933_5F0: 	dc.b $1
00025859 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002585E 01                         Map_a933_5F6: 	dc.b $1
0002585F F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025864 04                         Map_a933_5FC: 	dc.b $4
00025865 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002586A F705 0808 04               	dc.b $F7, $5, $8, $8, $4
0002586F 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025874 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025879 03                         Map_a933_611: 	dc.b $3
0002587A F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
0002587F FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025884 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025889 03                         Map_a933_621: 	dc.b $3
0002588A F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002588F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00025894 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025899 03                         Map_a933_631: 	dc.b $3
0002589A EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002589F FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000258A4 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000258A9 02                         Map_a933_641: 	dc.b $2
000258AA F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000258AF F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000258B4 02                         Map_a933_64C: 	dc.b $2
000258B5 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000258BA EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000258BF 03                         Map_a933_657: 	dc.b $3
000258C0 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000258C5 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000258CA 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000258CF 02                         Map_a933_667: 	dc.b $2
000258D0 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000258D5 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000258DA 04                         Map_a933_672: 	dc.b $4
000258DB ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000258E0 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000258E5 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000258EA 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000258EF 00                         Map_a933_687: 	dc.b $0
000258F0 00                         Map_a933_688: 	dc.b $0
000258F1 00                         Map_a933_689: 	dc.b $0
000258F2 00                         Map_a933_68A: 	dc.b $0
000258F3 02                         Map_a933_68B: 	dc.b $2
000258F4 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000258F9 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000258FE 00                         Map_a933_696: 	dc.b $0
000258FF 02                         Map_a933_697: 	dc.b $2
00025900 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025905 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002590A 00                         Map_a933_6A2: 	dc.b $0
0002590B 00                         Map_a933_6A3: 	dc.b $0
0002590C 00                         Map_a933_6A4: 	dc.b $0
0002590D 02                         Map_a933_6A5: 	dc.b $2
0002590E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025913 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025918 00                         Map_a933_6B0: 	dc.b $0
00025919 02                         Map_a933_6B1: 	dc.b $2
0002591A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002591F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025924 00                         Map_a933_6BC: 	dc.b $0
00025925 00                         Map_a933_6BD: 	dc.b $0
00025926 00                         Map_a933_6BE: 	dc.b $0
00025927 02                         Map_a933_6BF: 	dc.b $2
00025928 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002592D EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025932 00                         Map_a933_6CA: 	dc.b $0
00025933 02                         Map_a933_6CB: 	dc.b $2
00025934 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025939 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002593E 00                         Map_a933_6D6: 	dc.b $0
00025940 00                         	even
00025940 00                         	even
00025940                            
00025940                            ; ---------------------------------------------------------------------------
00025940                            ; Uncompressed graphics	loading	array for Sonic
00025940                            ; ---------------------------------------------------------------------------
00025940                            SonicDynPLC:
00025940                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025940                            DPLC_33c5:
00025940 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00025942 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00025944 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00025946 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
00025948 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
0002594A 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
0002594C 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
0002594E 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00025950 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00025952 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00025954 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00025956 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
00025958 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
0002595A 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
0002595C 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
0002595E 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00025960 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00025962 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00025964 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
00025966 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
00025968 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
0002596A 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
0002596C 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
0002596E 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00025970 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00025972 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00025974 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
00025976 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
00025978 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
0002597A 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
0002597C 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
0002597E 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00025980 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00025982 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00025984 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00025986 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
00025988 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
0002598A 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
0002598C 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
0002598E 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00025990 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00025992 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00025994 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00025996 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
00025998 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
0002599A 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
0002599C 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
0002599E 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
000259A0 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
000259A2 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
000259A4 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
000259A6 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
000259A8 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
000259AA 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
000259AC 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000259AE 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000259B0 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000259B2 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000259B4 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000259B6 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000259B8 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000259BA 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
000259BC 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
000259BE 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
000259C0 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
000259C2 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
000259C4 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
000259C6 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
000259C8 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
000259CA 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
000259CC 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
000259CE 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
000259D0 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
000259D2 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
000259D4 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
000259D6 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
000259D8 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
000259DA 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
000259DC 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
000259DE 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
000259E0 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
000259E2 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
000259E4 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
000259E6 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
000259E8 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
000259EA 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
000259EC 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
000259EE 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
000259F0 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
000259F2 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
000259F4 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
000259F6 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
000259F8 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
000259FA 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
000259FC 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
000259FE 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
00025A00 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
00025A02 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
00025A04 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
00025A06 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
00025A08 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
00025A0A 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
00025A0C 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00025A0E 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00025A10 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00025A12 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00025A14 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00025A16 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
00025A18 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
00025A1A 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
00025A1C 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00025A1E 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00025A20 00                         DPLC_33c5_E0: 	dc.b $0
00025A21 02                         DPLC_33c5_E1: 	dc.b $2
00025A22 F000                       	dc.b $F0, $0
00025A24 1010                       	dc.b $10, $10
00025A26 03                         DPLC_33c5_E6: 	dc.b $3
00025A27 5012                       	dc.b $50, $12
00025A29 5018                       	dc.b $50, $18
00025A2B 201E                       	dc.b $20, $1E
00025A2D 03                         DPLC_33c5_ED: 	dc.b $3
00025A2E 5021                       	dc.b $50, $21
00025A30 5018                       	dc.b $50, $18
00025A32 201E                       	dc.b $20, $1E
00025A34 03                         DPLC_33c5_F4: 	dc.b $3
00025A35 5021                       	dc.b $50, $21
00025A37 5018                       	dc.b $50, $18
00025A39 2027                       	dc.b $20, $27
00025A3B 03                         DPLC_33c5_FB: 	dc.b $3
00025A3C 802A                       	dc.b $80, $2A
00025A3E 2033                       	dc.b $20, $33
00025A40 2036                       	dc.b $20, $36
00025A42 04                         DPLC_33c5_102: 	dc.b $4
00025A43 7039                       	dc.b $70, $39
00025A45 5041                       	dc.b $50, $41
00025A47 5047                       	dc.b $50, $47
00025A49 104D                       	dc.b $10, $4D
00025A4B 02                         DPLC_33c5_10B: 	dc.b $2
00025A4C 7039                       	dc.b $70, $39
00025A4E B04F                       	dc.b $B0, $4F
00025A50 02                         DPLC_33c5_110: 	dc.b $2
00025A51 505B                       	dc.b $50, $5B
00025A53 8061                       	dc.b $80, $61
00025A55 04                         DPLC_33c5_115: 	dc.b $4
00025A56 505B                       	dc.b $50, $5B
00025A58 506A                       	dc.b $50, $6A
00025A5A 5070                       	dc.b $50, $70
00025A5C 1076                       	dc.b $10, $76
00025A5E 02                         DPLC_33c5_11E: 	dc.b $2
00025A5F F4F0                       	dc.b $F4, $F0
00025A61 1500                       	dc.b $15, $0
00025A63 03                         DPLC_33c5_123: 	dc.b $3
00025A64 7039                       	dc.b $70, $39
00025A66 3078                       	dc.b $30, $78
00025A68 507C                       	dc.b $50, $7C
00025A6A 05                         DPLC_33c5_12A: 	dc.b $5
00025A6B 5082                       	dc.b $50, $82
00025A6D 5088                       	dc.b $50, $88
00025A6F 208E                       	dc.b $20, $8E
00025A71 5091                       	dc.b $50, $91
00025A73 0097                       	dc.b $0, $97
00025A75 06                         DPLC_33c5_135: 	dc.b $6
00025A76 5082                       	dc.b $50, $82
00025A78 1098                       	dc.b $10, $98
00025A7A 309A                       	dc.b $30, $9A
00025A7C 509E                       	dc.b $50, $9E
00025A7E 30A4                       	dc.b $30, $A4
00025A80 00A8                       	dc.b $0, $A8
00025A82 04                         DPLC_33c5_142: 	dc.b $4
00025A83 50A9                       	dc.b $50, $A9
00025A85 10AF                       	dc.b $10, $AF
00025A87 70B1                       	dc.b $70, $B1
00025A89 20B9                       	dc.b $20, $B9
00025A8B 05                         DPLC_33c5_14B: 	dc.b $5
00025A8C 50BC                       	dc.b $50, $BC
00025A8E 30C2                       	dc.b $30, $C2
00025A90 70C6                       	dc.b $70, $C6
00025A92 20CE                       	dc.b $20, $CE
00025A94 10D1                       	dc.b $10, $D1
00025A96 04                         DPLC_33c5_156: 	dc.b $4
00025A97 50BC                       	dc.b $50, $BC
00025A99 10D3                       	dc.b $10, $D3
00025A9B 70D5                       	dc.b $70, $D5
00025A9D 20DD                       	dc.b $20, $DD
00025A9F 05                         DPLC_33c5_15F: 	dc.b $5
00025AA0 5082                       	dc.b $50, $82
00025AA2 1098                       	dc.b $10, $98
00025AA4 008E                       	dc.b $0, $8E
00025AA6 70E0                       	dc.b $70, $E0
00025AA8 20E8                       	dc.b $20, $E8
00025AAA 04                         DPLC_33c5_16A: 	dc.b $4
00025AAB 70EB                       	dc.b $70, $EB
00025AAD 50F3                       	dc.b $50, $F3
00025AAF 10F9                       	dc.b $10, $F9
00025AB1 50FB                       	dc.b $50, $FB
00025AB3 02                         DPLC_33c5_173: 	dc.b $2
00025AB4 70EB                       	dc.b $70, $EB
00025AB6 B101                       	dc.b $B1, $1
00025AB8 02                         DPLC_33c5_178: 	dc.b $2
00025AB9 510D                       	dc.b $51, $D
00025ABB 8113                       	dc.b $81, $13
00025ABD 04                         DPLC_33c5_17D: 	dc.b $4
00025ABE 510D                       	dc.b $51, $D
00025AC0 511C                       	dc.b $51, $1C
00025AC2 1122                       	dc.b $11, $22
00025AC4 5124                       	dc.b $51, $24
00025AC6 02                         DPLC_33c5_186: 	dc.b $2
00025AC7 510D                       	dc.b $51, $D
00025AC9 B12A                       	dc.b $B1, $2A
00025ACB 03                         DPLC_33c5_18B: 	dc.b $3
00025ACC 70EB                       	dc.b $70, $EB
00025ACE 0101                       	dc.b $1, $1
00025AD0 8136                       	dc.b $81, $36
00025AD2 06                         DPLC_33c5_192: 	dc.b $6
00025AD3 513F                       	dc.b $51, $3F
00025AD5 1145                       	dc.b $11, $45
00025AD7 1147                       	dc.b $11, $47
00025AD9 8149                       	dc.b $81, $49
00025ADB 0152                       	dc.b $1, $52
00025ADD 0153                       	dc.b $1, $53
00025ADF 06                         DPLC_33c5_19F: 	dc.b $6
00025AE0 513F                       	dc.b $51, $3F
00025AE2 2154                       	dc.b $21, $54
00025AE4 1157                       	dc.b $11, $57
00025AE6 1159                       	dc.b $11, $59
00025AE8 815B                       	dc.b $81, $5B
00025AEA 0152                       	dc.b $1, $52
00025AEC 04                         DPLC_33c5_1AC: 	dc.b $4
00025AED 5164                       	dc.b $51, $64
00025AEF 116A                       	dc.b $11, $6A
00025AF1 816C                       	dc.b $81, $6C
00025AF3 1175                       	dc.b $11, $75
00025AF5 05                         DPLC_33c5_1B5: 	dc.b $5
00025AF6 5177                       	dc.b $51, $77
00025AF8 217D                       	dc.b $21, $7D
00025AFA 1180                       	dc.b $11, $80
00025AFC 7182                       	dc.b $71, $82
00025AFE 218A                       	dc.b $21, $8A
00025B00 04                         DPLC_33c5_1C0: 	dc.b $4
00025B01 5177                       	dc.b $51, $77
00025B03 118D                       	dc.b $11, $8D
00025B05 818F                       	dc.b $81, $8F
00025B07 1198                       	dc.b $11, $98
00025B09 05                         DPLC_33c5_1C9: 	dc.b $5
00025B0A 513F                       	dc.b $51, $3F
00025B0C 819A                       	dc.b $81, $9A
00025B0E 1159                       	dc.b $11, $59
00025B10 11A3                       	dc.b $11, $A3
00025B12 0152                       	dc.b $1, $52
00025B14 02                         DPLC_33c5_1D4: 	dc.b $2
00025B15 51A5                       	dc.b $51, $A5
00025B17 B1AB                       	dc.b $B1, $AB
00025B19 02                         DPLC_33c5_1D9: 	dc.b $2
00025B1A 505B                       	dc.b $50, $5B
00025B1C B1B7                       	dc.b $B1, $B7
00025B1E 02                         DPLC_33c5_1DE: 	dc.b $2
00025B1F 51A5                       	dc.b $51, $A5
00025B21 B1C3                       	dc.b $B1, $C3
00025B23 02                         DPLC_33c5_1E3: 	dc.b $2
00025B24 505B                       	dc.b $50, $5B
00025B26 B1CF                       	dc.b $B1, $CF
00025B28 04                         DPLC_33c5_1E8: 	dc.b $4
00025B29 51DB                       	dc.b $51, $DB
00025B2B 11E1                       	dc.b $11, $E1
00025B2D B1E3                       	dc.b $B1, $E3
00025B2F 01EF                       	dc.b $1, $EF
00025B31 03                         DPLC_33c5_1F1: 	dc.b $3
00025B32 51F0                       	dc.b $51, $F0
00025B34 11F6                       	dc.b $11, $F6
00025B36 B1F8                       	dc.b $B1, $F8
00025B38 04                         DPLC_33c5_1F8: 	dc.b $4
00025B39 51DB                       	dc.b $51, $DB
00025B3B 1204                       	dc.b $12, $4
00025B3D B206                       	dc.b $B2, $6
00025B3F 01EF                       	dc.b $1, $EF
00025B41 03                         DPLC_33c5_201: 	dc.b $3
00025B42 51F0                       	dc.b $51, $F0
00025B44 11F6                       	dc.b $11, $F6
00025B46 B212                       	dc.b $B2, $12
00025B48 02                         DPLC_33c5_208: 	dc.b $2
00025B49 521E                       	dc.b $52, $1E
00025B4B B224                       	dc.b $B2, $24
00025B4D 02                         DPLC_33c5_20D: 	dc.b $2
00025B4E 510D                       	dc.b $51, $D
00025B50 B230                       	dc.b $B2, $30
00025B52 02                         DPLC_33c5_212: 	dc.b $2
00025B53 521E                       	dc.b $52, $1E
00025B55 B23C                       	dc.b $B2, $3C
00025B57 02                         DPLC_33c5_217: 	dc.b $2
00025B58 510D                       	dc.b $51, $D
00025B5A B248                       	dc.b $B2, $48
00025B5C 04                         DPLC_33c5_21C: 	dc.b $4
00025B5D 5254                       	dc.b $52, $54
00025B5F 125A                       	dc.b $12, $5A
00025B61 B25C                       	dc.b $B2, $5C
00025B63 0268                       	dc.b $2, $68
00025B65 02                         DPLC_33c5_225: 	dc.b $2
00025B66 7269                       	dc.b $72, $69
00025B68 B271                       	dc.b $B2, $71
00025B6A 04                         DPLC_33c5_22A: 	dc.b $4
00025B6B 5254                       	dc.b $52, $54
00025B6D 127D                       	dc.b $12, $7D
00025B6F B27F                       	dc.b $B2, $7F
00025B71 0268                       	dc.b $2, $68
00025B73 02                         DPLC_33c5_233: 	dc.b $2
00025B74 7269                       	dc.b $72, $69
00025B76 B28B                       	dc.b $B2, $8B
00025B78 01                         DPLC_33c5_238: 	dc.b $1
00025B79 F297                       	dc.b $F2, $97
00025B7B 01                         DPLC_33c5_23B: 	dc.b $1
00025B7C F2A7                       	dc.b $F2, $A7
00025B7E 01                         DPLC_33c5_23E: 	dc.b $1
00025B7F F2B7                       	dc.b $F2, $B7
00025B81 01                         DPLC_33c5_241: 	dc.b $1
00025B82 F2C7                       	dc.b $F2, $C7
00025B84 01                         DPLC_33c5_244: 	dc.b $1
00025B85 F2D7                       	dc.b $F2, $D7
00025B87 02                         DPLC_33c5_247: 	dc.b $2
00025B88 B2E7                       	dc.b $B2, $E7
00025B8A 22F3                       	dc.b $22, $F3
00025B8C 01                         DPLC_33c5_24C: 	dc.b $1
00025B8D F2F6                       	dc.b $F2, $F6
00025B8F 02                         DPLC_33c5_24F: 	dc.b $2
00025B90 B306                       	dc.b $B3, $6
00025B92 2312                       	dc.b $23, $12
00025B94 01                         DPLC_33c5_254: 	dc.b $1
00025B95 F315                       	dc.b $F3, $15
00025B97 02                         DPLC_33c5_257: 	dc.b $2
00025B98 5325                       	dc.b $53, $25
00025B9A B32B                       	dc.b $B3, $2B
00025B9C 04                         DPLC_33c5_25C: 	dc.b $4
00025B9D 5337                       	dc.b $53, $37
00025B9F 733D                       	dc.b $73, $3D
00025BA1 1345                       	dc.b $13, $45
00025BA3 0347                       	dc.b $3, $47
00025BA5 02                         DPLC_33c5_265: 	dc.b $2
00025BA6 D348                       	dc.b $D3, $48
00025BA8 34EC                       	dc.b $34, $EC
00025BAA 02                         DPLC_33c5_26A: 	dc.b $2
00025BAB F528                       	dc.b $F5, $28
00025BAD 0538                       	dc.b $5, $38
00025BAF 02                         DPLC_33c5_26F: 	dc.b $2
00025BB0 F539                       	dc.b $F5, $39
00025BB2 0549                       	dc.b $5, $49
00025BB4 02                         DPLC_33c5_274: 	dc.b $2
00025BB5 E356                       	dc.b $E3, $56
00025BB7 054A                       	dc.b $5, $4A
00025BB9 01                         DPLC_33c5_279: 	dc.b $1
00025BBA 8365                       	dc.b $83, $65
00025BBC 03                         DPLC_33c5_27C: 	dc.b $3
00025BBD 736E                       	dc.b $73, $6E
00025BBF 0376                       	dc.b $3, $76
00025BC1 3377                       	dc.b $33, $77
00025BC3 02                         DPLC_33c5_283: 	dc.b $2
00025BC4 E37B                       	dc.b $E3, $7B
00025BC6 054A                       	dc.b $5, $4A
00025BC8 01                         DPLC_33c5_288: 	dc.b $1
00025BC9 D561                       	dc.b $D5, $61
00025BCB 04                         DPLC_33c5_28B: 	dc.b $4
00025BCC B399                       	dc.b $B3, $99
00025BCE 33A5                       	dc.b $33, $A5
00025BD0 03A9                       	dc.b $3, $A9
00025BD2 03AA                       	dc.b $3, $AA
00025BD4 04                         DPLC_33c5_294: 	dc.b $4
00025BD5 B3AB                       	dc.b $B3, $AB
00025BD7 33B7                       	dc.b $33, $B7
00025BD9 03BB                       	dc.b $3, $BB
00025BDB 03BC                       	dc.b $3, $BC
00025BDD 05                         DPLC_33c5_29D: 	dc.b $5
00025BDE 83BD                       	dc.b $83, $BD
00025BE0 13C6                       	dc.b $13, $C6
00025BE2 53C8                       	dc.b $53, $C8
00025BE4 13CE                       	dc.b $13, $CE
00025BE6 03D0                       	dc.b $3, $D0
00025BE8 05                         DPLC_33c5_2A8: 	dc.b $5
00025BE9 83D1                       	dc.b $83, $D1
00025BEB 13DA                       	dc.b $13, $DA
00025BED 53C8                       	dc.b $53, $C8
00025BEF 13CE                       	dc.b $13, $CE
00025BF1 03D0                       	dc.b $3, $D0
00025BF3 02                         DPLC_33c5_2B3: 	dc.b $2
00025BF4 83DC                       	dc.b $83, $DC
00025BF6 73E5                       	dc.b $73, $E5
00025BF8 03                         DPLC_33c5_2B8: 	dc.b $3
00025BF9 83ED                       	dc.b $83, $ED
00025BFB 23F6                       	dc.b $23, $F6
00025BFD 13F9                       	dc.b $13, $F9
00025BFF 02                         DPLC_33c5_2BF: 	dc.b $2
00025C00 83FB                       	dc.b $83, $FB
00025C02 7404                       	dc.b $74, $4
00025C04 03                         DPLC_33c5_2C4: 	dc.b $3
00025C05 83ED                       	dc.b $83, $ED
00025C07 240C                       	dc.b $24, $C
00025C09 140F                       	dc.b $14, $F
00025C0B 02                         DPLC_33c5_2CB: 	dc.b $2
00025C0C 5411                       	dc.b $54, $11
00025C0E B417                       	dc.b $B4, $17
00025C10 03                         DPLC_33c5_2D0: 	dc.b $3
00025C11 8423                       	dc.b $84, $23
00025C13 342C                       	dc.b $34, $2C
00025C15 0430                       	dc.b $4, $30
00025C17 03                         DPLC_33c5_2D7: 	dc.b $3
00025C18 7431                       	dc.b $74, $31
00025C1A 1439                       	dc.b $14, $39
00025C1C B43B                       	dc.b $B4, $3B
00025C1E 05                         DPLC_33c5_2DE: 	dc.b $5
00025C1F 7447                       	dc.b $74, $47
00025C21 144F                       	dc.b $14, $4F
00025C23 5451                       	dc.b $54, $51
00025C25 3457                       	dc.b $34, $57
00025C27 045B                       	dc.b $4, $5B
00025C29 05                         DPLC_33c5_2E9: 	dc.b $5
00025C2A 745C                       	dc.b $74, $5C
00025C2C 144F                       	dc.b $14, $4F
00025C2E 5464                       	dc.b $54, $64
00025C30 3457                       	dc.b $34, $57
00025C32 045B                       	dc.b $4, $5B
00025C34 02                         DPLC_33c5_2F4: 	dc.b $2
00025C35 246A                       	dc.b $24, $6A
00025C37 F46D                       	dc.b $F4, $6D
00025C39 03                         DPLC_33c5_2F9: 	dc.b $3
00025C3A 247D                       	dc.b $24, $7D
00025C3C B480                       	dc.b $B4, $80
00025C3E 248C                       	dc.b $24, $8C
00025C40 01                         DPLC_33c5_300: 	dc.b $1
00025C41 B48F                       	dc.b $B4, $8F
00025C43 01                         DPLC_33c5_303: 	dc.b $1
00025C44 549B                       	dc.b $54, $9B
00025C46 01                         DPLC_33c5_306: 	dc.b $1
00025C47 14A1                       	dc.b $14, $A1
00025C49 02                         DPLC_33c5_309: 	dc.b $2
00025C4A E356                       	dc.b $E3, $56
00025C4C 054A                       	dc.b $5, $4A
00025C4E 03                         DPLC_33c5_30E: 	dc.b $3
00025C4F 736E                       	dc.b $73, $6E
00025C51 0376                       	dc.b $3, $76
00025C53 3377                       	dc.b $33, $77
00025C55 03                         DPLC_33c5_315: 	dc.b $3
00025C56 B4A3                       	dc.b $B4, $A3
00025C58 14AF                       	dc.b $14, $AF
00025C5A 34B1                       	dc.b $34, $B1
00025C5C 03                         DPLC_33c5_31C: 	dc.b $3
00025C5D 54B5                       	dc.b $54, $B5
00025C5F B4BB                       	dc.b $B4, $BB
00025C61 1074                       	dc.b $10, $74
00025C63 02                         DPLC_33c5_323: 	dc.b $2
00025C64 F4C7                       	dc.b $F4, $C7
00025C66 24D7                       	dc.b $24, $D7
00025C68 02                         DPLC_33c5_328: 	dc.b $2
00025C69 F4DA                       	dc.b $F4, $DA
00025C6B 14EA                       	dc.b $14, $EA
00025C6D 02                         DPLC_33c5_32D: 	dc.b $2
00025C6E F502                       	dc.b $F5, $2
00025C70 2512                       	dc.b $25, $12
00025C72 02                         DPLC_33c5_332: 	dc.b $2
00025C73 F515                       	dc.b $F5, $15
00025C75 2525                       	dc.b $25, $25
00025C77 02                         DPLC_33c5_337: 	dc.b $2
00025C78 F54B                       	dc.b $F5, $4B
00025C7A 755B                       	dc.b $75, $5B
00025C7C 00                         DPLC_33c5_33C: 	dc.b $0
00025C7D 00                         DPLC_33c5_33D: 	dc.b $0
00025C7E 00                         DPLC_33c5_33E: 	dc.b $0
00025C7F 00                         DPLC_33c5_33F: 	dc.b $0
00025C80 02                         DPLC_33c5_340: 	dc.b $2
00025C81 F4DA                       	dc.b $F4, $DA
00025C83 14EA                       	dc.b $14, $EA
00025C85 00                         DPLC_33c5_345: 	dc.b $0
00025C86 02                         DPLC_33c5_346: 	dc.b $2
00025C87 F4DA                       	dc.b $F4, $DA
00025C89 14EA                       	dc.b $14, $EA
00025C8B 00                         DPLC_33c5_34B: 	dc.b $0
00025C8C 00                         DPLC_33c5_34C: 	dc.b $0
00025C8D 00                         DPLC_33c5_34D: 	dc.b $0
00025C8E 02                         DPLC_33c5_34E: 	dc.b $2
00025C8F F4DA                       	dc.b $F4, $DA
00025C91 14EA                       	dc.b $14, $EA
00025C93 00                         DPLC_33c5_353: 	dc.b $0
00025C94 02                         DPLC_33c5_354: 	dc.b $2
00025C95 F4DA                       	dc.b $F4, $DA
00025C97 14EA                       	dc.b $14, $EA
00025C99 00                         DPLC_33c5_359: 	dc.b $0
00025C9A 00                         DPLC_33c5_35A: 	dc.b $0
00025C9B 00                         DPLC_33c5_35B: 	dc.b $0
00025C9C 02                         DPLC_33c5_35C: 	dc.b $2
00025C9D F4DA                       	dc.b $F4, $DA
00025C9F 14EA                       	dc.b $14, $EA
00025CA1 00                         DPLC_33c5_361: 	dc.b $0
00025CA2 02                         DPLC_33c5_362: 	dc.b $2
00025CA3 F4DA                       	dc.b $F4, $DA
00025CA5 14EA                       	dc.b $14, $EA
00025CA7 00                         DPLC_33c5_367: 	dc.b $0
00025CA8                            	even
00025CA8                            	even
00025CA8                            
00025CA8                            ; ---------------------------------------------------------------------------
00025CA8                            ; Uncompressed graphics	- Sonic
00025CA8                            ; ---------------------------------------------------------------------------
00025CA8                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030A88                            		even
00030A88                            ; ---------------------------------------------------------------------------
00030A88                            ; Compressed graphics - various
00030A88                            ; ---------------------------------------------------------------------------
00030A88                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030B8C                            		even
00030B8C                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030BC6                            		even
00030BC6                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00030D5C                            		even
00030D5C                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030EA4                            		even
00030EA4                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030FAE                            		even
00030FAE                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00031000                            		even
00031000                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00031248                            		even
00031248                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000313CE                            		even
000313CE                            ; ---------------------------------------------------------------------------
000313CE                            ; Sprite mappings - walls of the special stage
000313CE                            ; ---------------------------------------------------------------------------
000313CE                            Map_SSWalls:
000313CE                            	include "_maps\SSwalls.asm"
000313CE                            ; ---------------------------------------------------------------------------
000313CE                            ; Sprite mappings - walls of the special stage
000313CE                            ; ---------------------------------------------------------------------------
000313CE 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
000313D2 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
000313D6 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000313DA 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000313DE 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
000313E2 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
000313E6 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
000313EA 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
000313EE 01                         byte_2C584:	dc.b 1
000313EF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000313F4 01                         byte_2C58A:	dc.b 1
000313F5 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000313FA 01                         byte_2C590:	dc.b 1
000313FB F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00031400 01                         byte_2C596:	dc.b 1
00031401 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00031406 01                         byte_2C59C:	dc.b 1
00031407 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0003140C 01                         byte_2C5A2:	dc.b 1
0003140D F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00031412 01                         byte_2C5A8:	dc.b 1
00031413 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00031418 01                         byte_2C5AE:	dc.b 1
00031419 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0003141E 01                         byte_2C5B4:	dc.b 1
0003141F F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00031424 01                         byte_2C5BA:	dc.b 1
00031425 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003142A 01                         byte_2C5C0:	dc.b 1
0003142B F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00031430 01                         byte_2C5C6:	dc.b 1
00031431 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00031436 01                         byte_2C5CC:	dc.b 1
00031437 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003143C 01                         byte_2C5D2:	dc.b 1
0003143D F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00031442 01                         byte_2C5D8:	dc.b 1
00031443 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00031448 01                         byte_2C5DE:	dc.b 1
00031449 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0003144E                            		even
0003144E                            		even
0003144E                            ; ---------------------------------------------------------------------------
0003144E                            ; Compressed graphics - special stage
0003144E                            ; ---------------------------------------------------------------------------
0003144E                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031D86                            		even
00031D86                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031ED4                            		even
00031ED4                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00033366                            		even
00033366                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00033666                            		even
00033666                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00033B5A                            		even
00033B5A                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00033C48                            		even
00033C48                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00033D18                            		even
00033D18                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033E0E                            		even
00033E0E                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033E6C                            		even
00033E6C                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033EFE                            		even
00033EFE                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033FC0                            		even
00033FC0                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003408E                            		even
0003408E                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003415A                            		even
0003415A                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00034222                            		even
00034222                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000342EC                            		even
000342EC                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000343BC                            		even
000343BC                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000345B0                            		even
000345B0                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00034718                            		even
00034718                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000347C8                            		even
000347C8                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000348A2                            		even
000348A2                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00034926                            		even
00034926                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034AA4                            		even
00034AA4                            ; ---------------------------------------------------------------------------
00034AA4                            ; Compressed graphics - GHZ stuff
00034AA4                            ; ---------------------------------------------------------------------------
00034AA4                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034AEE                            		even
00034AEE                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00034C08                            		even
00034C08                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00034CF4                            		even
00034CF4                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034D3C                            		even
00034D3C                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034EDA                            		even
00034EDA                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034F96                            		even
00034F96                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
000351AA                            		even
000351AA                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000352D6                            		even
000352D6                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00035404                            		even
00035404                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
000354A2                            		even
000354A2                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00035502                            		even
00035502                            ; ---------------------------------------------------------------------------
00035502                            ; Compressed graphics - LZ stuff
00035502                            ; ---------------------------------------------------------------------------
00035502                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00035626                            		even
00035626                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035E1A                            		even
00035E1A                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035F9A                            		even
00035F9A                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00036104                            		even
00036104                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003675A                            		even
0003675A                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036810                            		even
00036810                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000368B2                            		even
000368B2                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036A0E                            		even
00036A0E                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036A72                            		even
00036A72                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036BC4                            		even
00036BC4                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000370A6                            		even
000370A6                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00037216                            		even
00037216                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
000374CE                            		even
000374CE                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00037606                            		even
00037606                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037730                            		even
00037730                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037840                            		even
00037840                            ; ---------------------------------------------------------------------------
00037840                            ; Compressed graphics - MZ stuff
00037840                            ; ---------------------------------------------------------------------------
00037840                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037ACE                            		even
00037ACE                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037B8C                            		even
00037B8C                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00037C44                            		even
00037C44                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037C98                            		even
00037C98                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037F76                            		even
00037F76                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003888C                            		even
0003888C                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000389F0                            		even
000389F0                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038A78                            		even
00038A78                            ; ---------------------------------------------------------------------------
00038A78                            ; Compressed graphics - SLZ stuff
00038A78                            ; ---------------------------------------------------------------------------
00038A78                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038CB4                            		even
00038CB4                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038DFA                            		even
00038DFA                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003903E                            		even
0003903E                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000390A0                            		even
000390A0                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00039182                            		even
00039182                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00039364                            		even
00039364                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00039470                            		even
00039470                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00039514                            		even
00039514                            ; ---------------------------------------------------------------------------
00039514                            ; Compressed graphics - SYZ stuff
00039514                            ; ---------------------------------------------------------------------------
00039514                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003967E                            		even
0003967E                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000396E0                            		even
000396E0                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000397C2                            		even
000397C2                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00039A50                            		even
00039A50                            ; ---------------------------------------------------------------------------
00039A50                            ; Compressed graphics - SBZ stuff
00039A50                            ; ---------------------------------------------------------------------------
00039A50                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039AA4                            		even
00039AA4                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00039D40                            		even
00039D40                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039F44                            		even
00039F44                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003A0E2                            		even
0003A0E2                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003A412                            		even
0003A412                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A5F0                            		even
0003A5F0                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A648                            		even
0003A648                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A812 00                         		even
0003A812                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A910                            		even
0003A910                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003AA9C                            		even
0003AA9C                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003AAEC                            		even
0003AAEC                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003AB44                            		even
0003AB44                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003AC40                            		even
0003AC40                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003AD56                            		even
0003AD56                            ; ---------------------------------------------------------------------------
0003AD56                            ; Compressed graphics - enemies
0003AD56                            ; ---------------------------------------------------------------------------
0003AD56                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003B1C4 00                         		even
0003B1C4                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003B36E 00                         		even
0003B36E                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B730 00                         		even
0003B730                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B918                            		even
0003B918                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003BAD0 00                         		even
0003BAD0                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003BC1A                            		even
0003BC1A                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BEA4                            		even
0003BEA4                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C4C8                            		even
0003C4C8                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C6BE                            		even
0003C6BE                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003CCDC                            		even
0003CCDC                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003D0DC 00                         		even
0003D0DC                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003D3D8                            		even
0003D3D8                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D620                            		even
0003D620                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D8B8                            		even
0003D8B8                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003DA96                            		even
0003DA96                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003DC24                            		even
0003DC24                            ; ---------------------------------------------------------------------------
0003DC24                            ; Compressed graphics - various
0003DC24                            ; ---------------------------------------------------------------------------
0003DC24                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003E154                            		even
0003E154                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003E24A                            		even
0003E24A                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003E350                            		even
0003E350                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003E444                            		even
0003E444                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E988                            		even
0003E988                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EFEE                            		even
0003EFEE                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003F09E                            		even
0003F09E                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003F230                            		even
0003F230                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003F344                            		even
0003F344                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003F416                            		even
0003F416                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F892                            		even
0003F892                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F952                            		even
0003F952                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003FAC6                            		even
0003FAC6                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003FDC8                            		even
0003FDC8                            ; ---------------------------------------------------------------------------
0003FDC8                            ; Compressed graphics - continue screen
0003FDC8                            ; ---------------------------------------------------------------------------
0003FDC8                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00040078                            		even
00040078                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
000402B2                            		even
000402B2                            ; ---------------------------------------------------------------------------
000402B2                            ; Compressed graphics - animals
000402B2                            ; ---------------------------------------------------------------------------
000402B2                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0004040A                            		even
0004040A                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
00040566                            		even
00040566                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000406E2                            		even
000406E2                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000407FE                            		even
000407FE                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040934                            		even
00040934                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040A6E                            		even
00040A6E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040BCA                            		even
00040BCA                            ; ---------------------------------------------------------------------------
00040BCA                            ; Compressed graphics - primary patterns and block mappings
00040BCA                            ; ---------------------------------------------------------------------------
00040BCA                            Blk16_GHZ:	incbin	map16\ghz.bin
000414DE                            		even
000414DE                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042DEC                            		even
00042DEC                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0004416C                            		even
0004416C                            Blk256_GHZ:	incbin	map256\ghz.bin
000465A6                            		even
000465A6                            Blk16_LZ:	incbin	map16\lz.bin
00046CE0                            		even
00046CE0                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00049134                            		even
00049134                            Blk256_LZ:	incbin	map256\lz.bin
0004BAB4                            		even
0004BAB4                            Blk16_MZ:	incbin	map16\mz.bin
0004C21C                            		even
0004C21C                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004EB58                            		even
0004EB58                            Blk256_MZ:	incbin	map256\mz.bin
0005036E                            		even
0005036E                            Blk16_SLZ:	incbin	map16\slz.bin
00050A38                            		even
00050A38                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0005298C                            		even
0005298C                            Blk256_SLZ:	incbin	map256\slz.bin
00053006                            		even
00053006                            Blk16_SYZ:	incbin	map16\syz.bin
00053C2C                            		even
00053C2C                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000581BE                            		even
000581BE                            Blk256_SYZ:	incbin	map256\syz.bin
0005A21A                            		even
0005A21A                            Blk16_SBZ:	incbin	map16\sbz.bin
0005B162                            		even
0005B162                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005DB26                            		even
0005DB26                            Blk256_SBZ:	incbin	map256\sbz.bin
0006061C                            		even
0006061C                            Blk16_BHZ:	incbin	map16\bhz.bin
00060EAA                            		even
00060EAA                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
00063CA8                            		even
00063CA8                            Blk256_BHZ:	incbin	map256\bhz.bin
000658D6                            		even
000658D6                            ; ---------------------------------------------------------------------------
000658D6                            ; Compressed graphics - bosses and ending sequence
000658D6                            ; ---------------------------------------------------------------------------
000658D6                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000660F0 00                         		even
000660F0                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
0006673E                            		even
0006673E                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
000667B8                            		even
000667B8                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00066AA2                            		even
00066AA2                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00067326                            		even
00067326                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006807C 00                         		even
0006807C                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
000687E4                            		even
000687E4                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00068D64                            		even
00068D64                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00068E84                            		even
00068E84                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00069082                            		even
00069082                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006A260                            		even
0006A260                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006ABA4                            		even
0006ABA4                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006AF7A                            		even
0006AF7A                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006B50A                            		even
0006B50A                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006B792                            		even
0006B792                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006BD80 00                         		even
0006BD80                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006C008                            		even
0006C008                            		incbin	misc\padding2.bin
0006C10C                            		even
0006C10C                            ; ---------------------------------------------------------------------------
0006C10C                            ; Collision data
0006C10C                            ; ---------------------------------------------------------------------------
0006C10C                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006C20C                            		even
0006C20C                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0006D20C                            		even
0006D20C                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0006E20C                            		even
0006E20C                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006E3C4 00                         		even
0006E3C4                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006E52C                            		even
0006E52C                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006E6BC 00                         		even
0006E6BC                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
0006E8B0                            		even
0006E8B0                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006EAB6                            		even
0006EAB6                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
0006ED54                            		even
0006ED54                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
0006EEE0                            		even
0006EEE0                            ; ---------------------------------------------------------------------------
0006EEE0                            ; Special layouts
0006EEE0                            ; ---------------------------------------------------------------------------
0006EEE0                            SS_1:		incbin	sslayout\1.bin
0006F128                            		even
0006F128                            SS_2:		incbin	sslayout\2.bin
0006F4E0                            		even
0006F4E0                            SS_3:		incbin	sslayout\3.bin
0006F83C                            		even
0006F83C                            SS_4:		incbin	sslayout\4.bin
0006FD16                            		even
0006FD16                            SS_5:		incbin	sslayout\5.bin
000701C6                            		even
000701C6                            SS_6:		incbin	sslayout\6.bin
000704B8                            		even
000704B8                            ; ---------------------------------------------------------------------------
000704B8                            ; Animated uncompressed graphics
000704B8                            ; ---------------------------------------------------------------------------
000704B8                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000706B8                            		even
000706B8                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00070AB8                            		even
00070AB8                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00070F38                            		even
00070F38                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00071238                            		even
00071238                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00071838                            		even
00071838                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00071B38                            		even
00071B38                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000725B8                            		even
000725B8                            
000725B8                            ; ---------------------------------------------------------------------------
000725B8                            ; Level	layout index
000725B8                            ; ---------------------------------------------------------------------------
000725B8 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000725BE 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000725C4 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000725CA 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000725D0 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000725D6 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000725DC 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000725E2 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000725E8 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000725EE 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000725F4 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000725FA 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00072600 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072606 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0007260C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00072612 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00072618 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0007261E 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00072624 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0007262A 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00072630 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00072636 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0007263C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00072642 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00072648 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007264E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00072654 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0007265A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00072660 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
00072666 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
0007266C 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
00072672 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00072678                            
00072678                            Level_GHZ1:	incbin	levels\ghz1.bin
0007276A                            		even
0007276A 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0007276E                            Level_GHZ2:	incbin	levels\ghz2.bin
00072836                            		even
00072836 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0007283A                            Level_GHZ3:	incbin	levels\ghz3.bin
0007295C                            		even
0007295C                            Level_GHZbg:	incbin	levels\ghzbg.bin
0007297E                            		even
0007297E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00072982 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00072986                            
00072986                            Level_LZ1:	incbin	levels\lz1.bin
00072A88                            		even
00072A88                            Level_LZbg:	incbin	levels\lzbg.bin
00072B8A                            		even
00072B8A 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00072B8E                            Level_LZ2:	incbin	levels\lz2.bin
00072C28                            		even
00072C28 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00072C2C                            Level_LZ3:	incbin	levels\lz3.bin
00072D46                            		even
00072D46 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00072D4A                            Level_SBZ3:	incbin	levels\sbz3.bin
00072E04                            		even
00072E04 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00072E08                            
00072E08                            Level_MZ1:	incbin	levels\mz1.bin
00072EA6                            		even
00072EA6                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00072F20                            		even
00072F20                            Level_MZ2:	incbin	levels\mz2.bin
00072FC4                            		even
00072FC4                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00073056                            		even
00073056 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0007305A                            Level_MZ3:	incbin	levels\mz3.bin
0007313C                            		even
0007313C                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000731E0 00                         		even
000731E0 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000731E4 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000731E8                            
000731E8                            Level_SLZ1:	incbin	levels\slz1.bin
000732FA                            		even
000732FA                            Level_SLZbg:	incbin	levels\slzbg.bin
00073314                            		even
00073314                            Level_SLZ2:	incbin	levels\slz2.bin
00073404                            		even
00073404                            Level_SLZ3:	incbin	levels\slz3.bin
0007351E                            		even
0007351E 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00073522                            
00073522                            Level_SYZ1:	incbin	levels\syz1.bin
000735DE 00                         		even
000735DE                            Level_SYZbg:	incbin	levels\syzbg.bin
00073618                            		even
00073618 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0007361C                            Level_SYZ2:	incbin	levels\syz2.bin
00073720                            		even
00073720 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00073724                            Level_SYZ3:	incbin	levels\syz3.bin
0007387E 00                         		even
0007387E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00073882 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00073886                            
00073886                            Level_SBZ1:	incbin	levels\sbz1.bin
000739A8                            		even
000739A8                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000739E6                            		even
000739E6                            Level_SBZ2:	incbin	levels\sbz2.bin
00073B28                            		even
00073B28                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00073C92                            		even
00073C92 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00073C96 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00073C9A                            Level_End:	incbin	levels\ending.bin
00073CCA 00                         		even
00073CCA 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00073CCE                            Level_BHZ1:	incbin	levels\bhz1.bin
00073DC0                            		even
00073DC0                            
00073DC0                            Level_BHZ2:	incbin	levels\bhz2.bin
00073E88                            		even
00073E88                            
00073E88                            Level_BHZ3:	incbin	levels\bhz3.bin
00073FAA                            		even
00073FAA                            Level_BHZbg:	incbin	levels\bhzbg.bin
000740AC                            		even
000740AC                            ; ---------------------------------------------------------------------------
000740AC                            ; Animated uncompressed giant ring graphics
000740AC                            ; ---------------------------------------------------------------------------
000740AC                            Art_BigRing:	incbin	artunc\bigring.bin
00074CEC                            		even
00074CEC                            
00074CEC                            		incbin	misc\padding3.bin
00074D88                            		even
00074D88                            
00074D88                            ; ---------------------------------------------------------------------------
00074D88                            ; Sprite locations index
00074D88                            ; ---------------------------------------------------------------------------
00074D88 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D8C 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D90 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D94 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D98 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074D9C 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DA0 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DA4 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DA8 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DAC 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DB0 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DB4 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DB8 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DBC 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DC0 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DC4 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DC8 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DCC 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DD0 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DD4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DD8 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DDC 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DE0 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DE4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DE8 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DEC 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DF0 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DF4 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DF8 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074DFC 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074E00 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074E04 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00074E08                            ObjPos_LZxpf_Index:
00074E08 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00074E0C 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00074E10 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00074E14 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00074E18                            
00074E18                            ObjPos_SBZ1pf_Index:
00074E18 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00074E1C 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00074E20 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00074E24 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00074E28 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00074E2E                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
000756D4                            		even
000756D4                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0007599E                            		even
0007599E                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007636A                            		even
0007636A                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00076712                            		even
00076712                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00076A48                            		even
00076A48                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00076F5E                            		even
00076F5E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000773F6                            		even
000773F6                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00077428                            		even
00077428                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007745A                            		even
0007745A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007748C                            		even
0007748C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000774BE                            		even
000774BE                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00077508                            		even
00077508                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00077546                            		even
00077546                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00077840                            		even
00077840                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00077CEA                            		even
00077CEA                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00078260                            		even
00078260                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007828A                            		even
0007828A                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
000786F2                            		even
000786F2                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00078CD4                            		even
00078CD4                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00079346                            		even
00079346                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000798B0                            		even
000798B0                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00079EB6                            		even
00079EB6                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007A5F4                            		even
0007A5F4                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007ACD2                            		even
0007ACD2                            ObjPos_FZ:	incbin	objpos\fz.bin
0007AD1A                            		even
0007AD1A                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007AD4C                            		even
0007AD4C                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007AD7E                            		even
0007AD7E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007ADB0                            		even
0007ADB0                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007ADE2                            		even
0007ADE2                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007AE14                            		even
0007AE14                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007AE4C                            		even
0007AE4C                            ObjPos_End:	incbin	objpos\ending.bin
0007AFA8                            		even
0007AFA8                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007B5BA                            		even
0007B5BA                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007BB7E                            		even
0007BB7E                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
0007C238                            		even
0007C238 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007C23E                            ; ---------------------------------------------------------------------------
0007C23E                            		incbin	misc\padding4.bin
0007C868                            		even
0007C868                            
0007C868 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007C86C 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0
0007C870 0000 0000                  Go_MusicIndex:	dc.l MusicIndex-4		; XREF: Sound_Music
0007C874 0000 0000                  Go_MusicIndex80:	dc.l MusicIndex80-4		; XREF: Sound_Music
0007C878 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_SFX
0007C87C 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_Music
0007C880 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007C884                            ; ---------------------------------------------------------------------------
0007C884                            ; PSG instruments used in music
0007C884                            ; ---------------------------------------------------------------------------
0007C884 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007C890 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007C89C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007C8A8                            
0007C8A8 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
0007C8B8 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
0007C8BF                            
0007C8BF 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
0007C8C6                            
0007C8C6 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
0007C8D6 80                                     dc.b    $80
0007C8D7                            
0007C8D7 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
0007C8E2                            
0007C8E2 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
0007C8F2 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
0007C902 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
0007C90C                            
0007C90C 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
0007C91B                            
0007C91B 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0007C92B 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
0007C937                            
0007C937 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
0007C947 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
0007C957 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
0007C95F                            
0007C95F 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
0007C96F 80                                     dc.b    $80
0007C970                            
0007C970 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0007C978                            ; ---------------------------------------------------------------------------
0007C978                            ; Music	Pointers
0007C978                            ; ---------------------------------------------------------------------------
0007C978                            MusicIndex:	
0007C978 0000 0000                  		dc.l Music9F ; test
0007C97C 0000 0000                  		dc.l Music92 ; test
0007C980                            
0007C980                            MusicIndex80:
0007C980 0000 0000 0000 0000        		dc.l Music81, Music82
0007C988 0000 0000 0000 0000        		dc.l Music83, Music84
0007C990 0000 0000 0000 0000        		dc.l Music85, Music86
0007C998 0000 0000 0000 0000        		dc.l Music87, Music88
0007C9A0 0000 0000 0000 0000        		dc.l Music89, Music8A
0007C9A8 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007C9B0 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007C9B8 0000 0000 0000 0000        		dc.l Music8F, Music90
0007C9C0 0000 0000 0000 0000        		dc.l Music91, Music92
0007C9C8 0000 0000 0000 0000        		dc.l Music93, Music94
0007C9D0 0000 0000 0000 0000        		dc.l Music95, Music96
0007C9D8 0000 0000 0000 0000        		dc.l Music97, Music98
0007C9E0 0000 0000 0000 0000        		dc.l Music99, Music9A
0007C9E8 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007C9F0 0000 0000 0000 0000        		dc.l Music9D, Music9E
0007C9F8 0000 0000                  		dc.l Music9F
0007C9FC                            ; ---------------------------------------------------------------------------
0007C9FC                            ; Type of sound	being played ($00 = music; $70 = normal	sound effect)
0007C9FC                            ; ---------------------------------------------------------------------------
0007C9FC                            SoundTypes:			
0007C9FC 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $01
0007CA0B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $10
0007CA1B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $20
0007CA2B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $30
0007CA3B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $40
0007CA4B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $50
0007CA5B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $60
0007CA6B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $70
0007CA7B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $80
0007CA8B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
0007CA9B 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
0007CAAB 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
0007CABB 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
0007CACB 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $D0
0007CADB 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $E0
0007CAEB 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $F0
0007CAFA                            		even
0007CAFA                            
0007CAFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CAFA                            
0007CAFA                            
0007CAFA                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0007CAFA                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
0007CAFA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
0007CB00 6700                       		beq.s	@main
0007CB02 7000                       		moveq	#0,d0			; PAL song timer "optimization"
0007CB04 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
0007CB08 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
0007CB0C 4840                       		swap	d0
0007CB0E 4A40                       		tst.w	d0
0007CB10 6600                       		bne.s	@main
0007CB12 6100 0000                  		bsr.w	@main
0007CB16                            @main:
0007CB16 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007CB1E 4E71                       		nop
0007CB20 4E71                       		nop
0007CB22 4E71                       		nop
0007CB24                            ; loc_71B5A:
0007CB24                            @wait:
0007CB24 0839 0000 00A1 1100        		btst	#0,($A11100).l
0007CB2C 66F6                       		bne.s	@wait
0007CB2E                            
0007CB2E 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0007CB36 6700                       		beq.s	loc_71B82
0007CB38 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CB40 4E71                       		nop
0007CB42 4E71                       		nop
0007CB44 4E71                       		nop
0007CB46 4E71                       		nop
0007CB48 4E71                       		nop
0007CB4A 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
0007CB4C                            ; ===========================================================================
0007CB4C                            
0007CB4C                            loc_71B82:
0007CB4C 4DF9 00FF F000             		lea	($FFF000).l,a6
0007CB52 422E 000E                  		clr.b	$E(a6)
0007CB56 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007CB5A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007CB5E 532E 0001                  		subq.b	#1,1(a6)
0007CB62 6600                       		bne.s	loc_71B9E
0007CB64 4EBA 0000                  		jsr	sub_7260C(pc)
0007CB68                            
0007CB68                            loc_71B9E:
0007CB68 102E 0004                  		move.b	4(a6),d0
0007CB6C 6700                       		beq.s	loc_71BA8
0007CB6E 4EBA 0000                  		jsr	sub_72504(pc)
0007CB72                            
0007CB72                            loc_71BA8:
0007CB72 4A2E 0024                  		tst.b	$24(a6)
0007CB76 6700                       		beq.s	loc_71BB2
0007CB78 4EBA 0000                  		jsr	sub_7267C(pc)
0007CB7C                            
0007CB7C                            loc_71BB2:
0007CB7C 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007CB80 6700                       		beq.s	loc_71BBC	; if not, branch
0007CB82 4EBA 0000                  		jsr	Sound_Play(pc)
0007CB86                            
0007CB86                            loc_71BBC:
0007CB86 4BEE 0040                  		lea	$40(a6),a5
0007CB8A 4A15                       		tst.b	(a5)
0007CB8C 6A00                       		bpl.s	loc_71BD4
0007CB8E 4EBA 0000                  		jsr	sub_71C4E(pc)
0007CB92                            
0007CB92                            loc_71BD4:
0007CB92 422E 0008                  		clr.b	8(a6)
0007CB96 7E05                       		moveq	#5,d7
0007CB98                            
0007CB98                            loc_71BDA:
0007CB98 DAFC 0030                  		adda.w	#$30,a5
0007CB9C 4A15                       		tst.b	(a5)
0007CB9E 6A00                       		bpl.s	loc_71BE6
0007CBA0 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CBA4                            
0007CBA4                            loc_71BE6:
0007CBA4 51CF FFF2                  		dbf	d7,loc_71BDA
0007CBA8                            
0007CBA8 7E02                       		moveq	#2,d7
0007CBAA                            
0007CBAA                            loc_71BEC:
0007CBAA DAFC 0030                  		adda.w	#$30,a5
0007CBAE 4A15                       		tst.b	(a5)
0007CBB0 6A00                       		bpl.s	loc_71BF8
0007CBB2 4EBA 0000                  		jsr	sub_72850(pc)
0007CBB6                            
0007CBB6                            loc_71BF8:
0007CBB6 51CF FFF2                  		dbf	d7,loc_71BEC
0007CBBA                            
0007CBBA 1D7C 0080 000E             		move.b	#$80,$E(a6)
0007CBC0 7E02                       		moveq	#2,d7
0007CBC2                            
0007CBC2                            loc_71C04:
0007CBC2 DAFC 0030                  		adda.w	#$30,a5
0007CBC6 4A15                       		tst.b	(a5)
0007CBC8 6A00                       		bpl.s	loc_71C10
0007CBCA 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CBCE                            
0007CBCE                            loc_71C10:
0007CBCE 51CF FFF2                  		dbf	d7,loc_71C04
0007CBD2                            
0007CBD2 7E02                       		moveq	#2,d7
0007CBD4                            
0007CBD4                            loc_71C16:
0007CBD4 DAFC 0030                  		adda.w	#$30,a5
0007CBD8 4A15                       		tst.b	(a5)
0007CBDA 6A00                       		bpl.s	loc_71C22
0007CBDC 4EBA 0000                  		jsr	sub_72850(pc)
0007CBE0                            
0007CBE0                            loc_71C22:
0007CBE0 51CF FFF2                  		dbf	d7,loc_71C16
0007CBE4 1D7C 0040 000E             		move.b	#$40,$E(a6)
0007CBEA DAFC 0030                  		adda.w	#$30,a5
0007CBEE 4A15                       		tst.b	(a5)
0007CBF0 6A00                       		bpl.s	loc_71C38
0007CBF2 4EBA 0000                  		jsr	sub_71CCA(pc)
0007CBF6                            
0007CBF6                            loc_71C38:
0007CBF6 DAFC 0030                  		adda.w	#$30,a5
0007CBFA 4A15                       		tst.b	(a5)
0007CBFC 6A00                       		bpl.s	loc_71C44
0007CBFE 4EBA 0000                  		jsr	sub_72850(pc)
0007CC02                            
0007CC02                            loc_71C44:
0007CC02 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007CC0A 4E75                       		rts	
0007CC0C                            ; End of function sub_71B4C
0007CC0C                            
0007CC0C                            
0007CC0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC0C                            
0007CC0C                            
0007CC0C                            sub_71C4E:				; XREF: sub_71B4C
0007CC0C 532D 000E                  		subq.b	#1,$E(a5)
0007CC10 6600                       		bne.s	locret_71CAA
0007CC12 1D7C 0080 0008             		move.b	#$80,8(a6)
0007CC18 286D 0004                  		movea.l	4(a5),a4
0007CC1C                            
0007CC1C                            loc_71C5E:
0007CC1C 7A00                       		moveq	#0,d5
0007CC1E 1A1C                       		move.b	(a4)+,d5
0007CC20 0C05 00E0                  		cmpi.b	#-$20,d5
0007CC24 6500                       		bcs.s	loc_71C6E
0007CC26 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CC2A 60F0                       		bra.s	loc_71C5E
0007CC2C                            ; ===========================================================================
0007CC2C                            
0007CC2C                            loc_71C6E:
0007CC2C 4A05                       		tst.b	d5
0007CC2E 6A00                       		bpl.s	loc_71C84
0007CC30 1B45 0010                  		move.b	d5,$10(a5)
0007CC34 1A1C                       		move.b	(a4)+,d5
0007CC36 6A00                       		bpl.s	loc_71C84
0007CC38 534C                       		subq.w	#1,a4
0007CC3A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CC40 6000                       		bra.s	loc_71C88
0007CC42                            ; ===========================================================================
0007CC42                            
0007CC42                            loc_71C84:
0007CC42 4EBA 0000                  		jsr	sub_71D40(pc)
0007CC46                            
0007CC46                            loc_71C88:
0007CC46 2B4C 0004                  		move.l	a4,4(a5)
0007CC4A 0815 0002                  		btst	#2,(a5)
0007CC4E 6600                       		bne.s	locret_71CAA
0007CC50 7000                       		moveq	#0,d0
0007CC52 102D 0010                  		move.b	$10(a5),d0
0007CC56 0C00 0080                  		cmpi.b	#$80,d0
0007CC5A 6700                       		beq.s	locret_71CAA
0007CC5C 0800 0003                  		btst	#3,d0
0007CC60 6600                       		bne.s	loc_71CAC
0007CC62 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0007CC68                            
0007CC68                            locret_71CAA:
0007CC68 4E75                       		rts	
0007CC6A                            ; ===========================================================================
0007CC6A                            
0007CC6A                            loc_71CAC:
0007CC6A 0400 0088                  		subi.b	#$88,d0
0007CC6E 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007CC72 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0007CC78 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0007CC80 4E75                       		rts	
0007CC82                            ; End of function sub_71C4E
0007CC82                            
0007CC82                            ; ===========================================================================
0007CC82 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0007CC88                            
0007CC88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CC88                            
0007CC88                            
0007CC88                            sub_71CCA:				; XREF: sub_71B4C
0007CC88 532D 000E                  		subq.b	#1,$E(a5)
0007CC8C 6600                       		bne.s	loc_71CE0
0007CC8E 0895 0004                  		bclr	#4,(a5)
0007CC92 4EBA 0000                  		jsr	sub_71CEC(pc)
0007CC96 4EBA 0000                  		jsr	sub_71E18(pc)
0007CC9A 6000 0000                  		bra.w	loc_726E2
0007CC9E                            ; ===========================================================================
0007CC9E                            
0007CC9E                            loc_71CE0:
0007CC9E 4EBA 0000                  		jsr	sub_71D9E(pc)
0007CCA2 4EBA 0000                  		jsr	sub_71DC6(pc)
0007CCA6 6000 0000                  		bra.w	loc_71E24
0007CCAA                            ; End of function sub_71CCA
0007CCAA                            
0007CCAA                            
0007CCAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CCAA                            
0007CCAA                            
0007CCAA                            sub_71CEC:				; XREF: sub_71CCA
0007CCAA 286D 0004                  		movea.l	4(a5),a4
0007CCAE 0895 0001                  		bclr	#1,(a5)
0007CCB2                            
0007CCB2                            loc_71CF4:
0007CCB2 7A00                       		moveq	#0,d5
0007CCB4 1A1C                       		move.b	(a4)+,d5
0007CCB6 0C05 00E0                  		cmpi.b	#-$20,d5
0007CCBA 6500                       		bcs.s	loc_71D04
0007CCBC 4EBA 0000                  		jsr	sub_72A5A(pc)
0007CCC0 60F0                       		bra.s	loc_71CF4
0007CCC2                            ; ===========================================================================
0007CCC2                            
0007CCC2                            loc_71D04:
0007CCC2 4EBA 0000                  		jsr	sub_726FE(pc)
0007CCC6 4A05                       		tst.b	d5
0007CCC8 6A00                       		bpl.s	loc_71D1A
0007CCCA 4EBA 0000                  		jsr	sub_71D22(pc)
0007CCCE 1A1C                       		move.b	(a4)+,d5
0007CCD0 6A00                       		bpl.s	loc_71D1A
0007CCD2 534C                       		subq.w	#1,a4
0007CCD4 6000 0000                  		bra.w	sub_71D60
0007CCD8                            ; ===========================================================================
0007CCD8                            
0007CCD8                            loc_71D1A:
0007CCD8 4EBA 0000                  		jsr	sub_71D40(pc)
0007CCDC 6000 0000                  		bra.w	sub_71D60
0007CCE0                            ; End of function sub_71CEC
0007CCE0                            
0007CCE0                            
0007CCE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CCE0                            
0007CCE0                            
0007CCE0                            sub_71D22:				; XREF: sub_71CEC
0007CCE0 0405 0080                  		subi.b	#$80,d5
0007CCE4 6700                       		beq.s	loc_71D58
0007CCE6 DA2D 0008                  		add.b	8(a5),d5
0007CCEA 0245 007F                  		andi.w	#$7F,d5
0007CCEE E34D                       		lsl.w	#1,d5
0007CCF0 41FA 0000                  		lea	word_72790(pc),a0
0007CCF4 3C30 5000                  		move.w	(a0,d5.w),d6
0007CCF8 3B46 0010                  		move.w	d6,$10(a5)
0007CCFC 4E75                       		rts	
0007CCFE                            ; End of function sub_71D22
0007CCFE                            
0007CCFE                            
0007CCFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CCFE                            
0007CCFE                            
0007CCFE                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007CCFE 1005                       		move.b	d5,d0
0007CD00 122D 0002                  		move.b	2(a5),d1
0007CD04                            
0007CD04                            loc_71D46:
0007CD04 5301                       		subq.b	#1,d1
0007CD06 6700                       		beq.s	loc_71D4E
0007CD08 D005                       		add.b	d5,d0
0007CD0A 60F8                       		bra.s	loc_71D46
0007CD0C                            ; ===========================================================================
0007CD0C                            
0007CD0C                            loc_71D4E:
0007CD0C 1B40 000F                  		move.b	d0,$F(a5)
0007CD10 1B40 000E                  		move.b	d0,$E(a5)
0007CD14 4E75                       		rts	
0007CD16                            ; End of function sub_71D40
0007CD16                            
0007CD16                            ; ===========================================================================
0007CD16                            
0007CD16                            loc_71D58:				; XREF: sub_71D22
0007CD16 08D5 0001                  		bset	#1,(a5)
0007CD1A 426D 0010                  		clr.w	$10(a5)
0007CD1E                            
0007CD1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD1E                            
0007CD1E                            
0007CD1E                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0007CD1E 2B4C 0004                  		move.l	a4,4(a5)
0007CD22 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007CD28 0815 0004                  		btst	#4,(a5)
0007CD2C 6600                       		bne.s	locret_71D9C
0007CD2E 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007CD34 422D 000C                  		clr.b	$C(a5)
0007CD38 0815 0003                  		btst	#3,(a5)
0007CD3C 6700                       		beq.s	locret_71D9C
0007CD3E 206D 0014                  		movea.l	$14(a5),a0
0007CD42 1B58 0018                  		move.b	(a0)+,$18(a5)
0007CD46 1B58 0019                  		move.b	(a0)+,$19(a5)
0007CD4A 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007CD4E 1018                       		move.b	(a0)+,d0
0007CD50 E208                       		lsr.b	#1,d0
0007CD52 1B40 001B                  		move.b	d0,$1B(a5)
0007CD56 426D 001C                  		clr.w	$1C(a5)
0007CD5A                            
0007CD5A                            locret_71D9C:
0007CD5A 4E75                       		rts	
0007CD5C                            ; End of function sub_71D60
0007CD5C                            
0007CD5C                            
0007CD5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD5C                            
0007CD5C                            
0007CD5C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007CD5C 4A2D 0012                  		tst.b	$12(a5)
0007CD60 6700                       		beq.s	locret_71DC4
0007CD62 532D 0012                  		subq.b	#1,$12(a5)
0007CD66 6600                       		bne.s	locret_71DC4
0007CD68 08D5 0001                  		bset	#1,(a5)
0007CD6C 4A2D 0001                  		tst.b	1(a5)
0007CD70 6B00 0000                  		bmi.w	loc_71DBE
0007CD74 4EBA 0000                  		jsr	sub_726FE(pc)
0007CD78 584F                       		addq.w	#4,sp
0007CD7A 4E75                       		rts	
0007CD7C                            ; ===========================================================================
0007CD7C                            
0007CD7C                            loc_71DBE:
0007CD7C 4EBA 0000                  		jsr	sub_729A0(pc)
0007CD80 584F                       		addq.w	#4,sp
0007CD82                            
0007CD82                            locret_71DC4:
0007CD82 4E75                       		rts	
0007CD84                            ; End of function sub_71D9E
0007CD84                            
0007CD84                            
0007CD84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CD84                            
0007CD84                            
0007CD84                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007CD84 584F                       		addq.w	#4,sp
0007CD86 0815 0003                  		btst	#3,(a5)
0007CD8A 6700                       		beq.s	locret_71E16
0007CD8C 4A2D 0018                  		tst.b	$18(a5)
0007CD90 6700                       		beq.s	loc_71DDA
0007CD92 532D 0018                  		subq.b	#1,$18(a5)
0007CD96 4E75                       		rts	
0007CD98                            ; ===========================================================================
0007CD98                            
0007CD98                            loc_71DDA:
0007CD98 532D 0019                  		subq.b	#1,$19(a5)
0007CD9C 6700                       		beq.s	loc_71DE2
0007CD9E 4E75                       		rts	
0007CDA0                            ; ===========================================================================
0007CDA0                            
0007CDA0                            loc_71DE2:
0007CDA0 206D 0014                  		movea.l	$14(a5),a0
0007CDA4 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007CDAA 4A2D 001B                  		tst.b	$1B(a5)
0007CDAE 6600                       		bne.s	loc_71DFE
0007CDB0 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007CDB6 442D 001A                  		neg.b	$1A(a5)
0007CDBA 4E75                       		rts	
0007CDBC                            ; ===========================================================================
0007CDBC                            
0007CDBC                            loc_71DFE:
0007CDBC 532D 001B                  		subq.b	#1,$1B(a5)
0007CDC0 1C2D 001A                  		move.b	$1A(a5),d6
0007CDC4 4886                       		ext.w	d6
0007CDC6 DC6D 001C                  		add.w	$1C(a5),d6
0007CDCA 3B46 001C                  		move.w	d6,$1C(a5)
0007CDCE DC6D 0010                  		add.w	$10(a5),d6
0007CDD2 594F                       		subq.w	#4,sp
0007CDD4                            
0007CDD4                            locret_71E16:
0007CDD4 4E75                       		rts	
0007CDD6                            ; End of function sub_71DC6
0007CDD6                            
0007CDD6                            
0007CDD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CDD6                            
0007CDD6                            
0007CDD6                            sub_71E18:				; XREF: sub_71CCA
0007CDD6 0815 0001                  		btst	#1,(a5)
0007CDDA 6600                       		bne.s	locret_71E48
0007CDDC 3C2D 0010                  		move.w	$10(a5),d6
0007CDE0 6700                       		beq.s	loc_71E4A
0007CDE2                            
0007CDE2                            loc_71E24:				; XREF: sub_71CCA
0007CDE2 102D 001E                  		move.b	$1E(a5),d0
0007CDE6 4880                       		ext.w	d0
0007CDE8 DC40                       		add.w	d0,d6
0007CDEA 0815 0002                  		btst	#2,(a5)
0007CDEE 6600                       		bne.s	locret_71E48
0007CDF0 3206                       		move.w	d6,d1
0007CDF2 E049                       		lsr.w	#8,d1
0007CDF4 103C 00A4                  		move.b	#-$5C,d0
0007CDF8 4EBA 0000                  		jsr	sub_72722(pc)
0007CDFC 1206                       		move.b	d6,d1
0007CDFE 103C 00A0                  		move.b	#-$60,d0
0007CE02 4EBA 0000                  		jsr	sub_72722(pc)
0007CE06                            
0007CE06                            locret_71E48:
0007CE06 4E75                       		rts	
0007CE08                            ; ===========================================================================
0007CE08                            
0007CE08                            loc_71E4A:
0007CE08 08D5 0001                  		bset	#1,(a5)
0007CE0C 4E75                       		rts	
0007CE0E                            ; End of function sub_71E18
0007CE0E                            
0007CE0E                            ; ===========================================================================
0007CE0E                            
0007CE0E                            loc_71E50:				; XREF: sub_71B4C
0007CE0E 6B00                       		bmi.s	loc_71E94
0007CE10 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007CE16 6700 0000                  		beq.w	loc_71EFE
0007CE1A 1D7C 0002 0003             		move.b	#2,3(a6)
0007CE20 7602                       		moveq	#2,d3
0007CE22 103C 00B4                  		move.b	#-$4C,d0
0007CE26 7200                       		moveq	#0,d1
0007CE28                            
0007CE28                            loc_71E6A:
0007CE28 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE2C 4EBA 0000                  		jsr	sub_72764(pc)
0007CE30 5200                       		addq.b	#1,d0
0007CE32 51CB FFF4                  		dbf	d3,loc_71E6A
0007CE36                            
0007CE36 7602                       		moveq	#2,d3
0007CE38 7028                       		moveq	#$28,d0
0007CE3A                            
0007CE3A                            loc_71E7C:
0007CE3A 1203                       		move.b	d3,d1
0007CE3C 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE40 5801                       		addq.b	#4,d1
0007CE42 4EBA 0000                  		jsr	sub_7272E(pc)
0007CE46 51CB FFF2                  		dbf	d3,loc_71E7C
0007CE4A                            
0007CE4A 4EBA 0000                  		jsr	sub_729B6(pc)
0007CE4E 6000 FDB2                  		bra.w	loc_71C44
0007CE52                            ; ===========================================================================
0007CE52                            
0007CE52                            loc_71E94:				; XREF: loc_71E50
0007CE52 422E 0003                  		clr.b	3(a6)
0007CE56 7630                       		moveq	#$30,d3
0007CE58 4BEE 0040                  		lea	$40(a6),a5
0007CE5C 7806                       		moveq	#6,d4
0007CE5E                            
0007CE5E                            loc_71EA0:
0007CE5E 0815 0007                  		btst	#7,(a5)
0007CE62 6700                       		beq.s	loc_71EB8
0007CE64 0815 0002                  		btst	#2,(a5)
0007CE68 6600                       		bne.s	loc_71EB8
0007CE6A 103C 00B4                  		move.b	#-$4C,d0
0007CE6E 122D 000A                  		move.b	$A(a5),d1
0007CE72 4EBA 0000                  		jsr	sub_72722(pc)
0007CE76                            
0007CE76                            loc_71EB8:
0007CE76 DAC3                       		adda.w	d3,a5
0007CE78 51CC FFE4                  		dbf	d4,loc_71EA0
0007CE7C                            
0007CE7C 4BEE 0220                  		lea	$220(a6),a5
0007CE80 7802                       		moveq	#2,d4
0007CE82                            
0007CE82                            loc_71EC4:
0007CE82 0815 0007                  		btst	#7,(a5)
0007CE86 6700                       		beq.s	loc_71EDC
0007CE88 0815 0002                  		btst	#2,(a5)
0007CE8C 6600                       		bne.s	loc_71EDC
0007CE8E 103C 00B4                  		move.b	#-$4C,d0
0007CE92 122D 000A                  		move.b	$A(a5),d1
0007CE96 4EBA 0000                  		jsr	sub_72722(pc)
0007CE9A                            
0007CE9A                            loc_71EDC:
0007CE9A DAC3                       		adda.w	d3,a5
0007CE9C 51CC FFE4                  		dbf	d4,loc_71EC4
0007CEA0                            
0007CEA0 4BEE 0340                  		lea	$340(a6),a5
0007CEA4 0815 0007                  		btst	#7,(a5)
0007CEA8 6700                       		beq.s	loc_71EFE
0007CEAA 0815 0002                  		btst	#2,(a5)
0007CEAE 6600                       		bne.s	loc_71EFE
0007CEB0 103C 00B4                  		move.b	#-$4C,d0
0007CEB4 122D 000A                  		move.b	$A(a5),d1
0007CEB8 4EBA 0000                  		jsr	sub_72722(pc)
0007CEBC                            
0007CEBC                            loc_71EFE:
0007CEBC 6000 FD44                  		bra.w	loc_71C44
0007CEC0                            
0007CEC0                            ; ---------------------------------------------------------------------------
0007CEC0                            ; Subroutine to	play a sound or	music track
0007CEC0                            ; ---------------------------------------------------------------------------
0007CEC0                            
0007CEC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CEC0                            
0007CEC0                            
0007CEC0                            Sound_Play:				; XREF: sub_71B4C
0007CEC0 2079 0007 C868             		movea.l	(Go_SoundTypes).l,a0
0007CEC6 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007CECA 1616                       		move.b	0(a6),d3
0007CECC 7802                       		moveq	#2,d4
0007CECE                            
0007CECE                            loc_71F12:
0007CECE 1011                       		move.b	(a1),d0		; move track number to d0
0007CED0 1200                       		move.b	d0,d1
0007CED2 4219                       		clr.b	(a1)+
0007CED4 0400 0081                  		subi.b	#$81,d0
0007CED8 6500                       		bcs.s	loc_71F3E
0007CEDA                            ; ===========================================================================
0007CEDA                            
0007CEDA                            loc_71F2C:
0007CEDA 1430 0000                  		move.b	(a0,d0.w),d2
0007CEDE B403                       		cmp.b	d3,d2
0007CEE0 6500                       		bcs.s	loc_71F3E
0007CEE2 1602                       		move.b	d2,d3
0007CEE4 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0007CEE8                            
0007CEE8                            loc_71F3E:
0007CEE8 51CC FFE4                  		dbf	d4,loc_71F12
0007CEEC                            
0007CEEC 4A03                       		tst.b	d3
0007CEEE 6B00                       		bmi.s	Sound_ChkValue
0007CEF0 1C83                       		move.b	d3,0(a6)
0007CEF2                            ; End of function Sound_Play
0007CEF2                            
0007CEF2                            
0007CEF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007CEF2                            
0007CEF2                            ; no checks if you play something fucked up it's your fault
0007CEF2                            Sound_ChkValue:				; XREF: sub_71B4C
0007CEF2 7E00                       		moveq	#0,d7
0007CEF4 1E2E 0009                  		move.b	9(a6),d7
0007CEF8                            		
0007CEF8 6700 0000                  		beq.w	Sound_E4
0007CEFC 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007CF02 0C07 00A0                  		cmpi.b	#$A0,d7
0007CF06 6500 0000                  		blo.w	Sound_Music	; music	$81-$9F
0007CF0A                            		
0007CF0A 0C07 00D0                  		cmpi.b	#$D0,d7
0007CF0E 6700 0000                  		beq.w	Sound_D0
0007CF12 0C07 00E0                  		cmpi.b	#$E0,d7
0007CF16 6500 0000                  		blo.w	Sound_SFX	; sound	$A0-$CF
0007CF1A                            		
0007CF1A                            		; falls to command
0007CF1A                            ; ===========================================================================
0007CF1A                            
0007CF1A                            Sound_Command				; XREF: Sound_ChkValue
0007CF1A 0407 00E0                  		subi.b	#$E0,d7
0007CF1E E54F                       		lsl.w	#2,d7
0007CF20 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0007CF24                            ; ===========================================================================
0007CF24                            
0007CF24                            Sound_ExIndex:
0007CF24 6000 0000                  		bra.w	Sound_E0
0007CF28                            ; ===========================================================================
0007CF28 6000 0000                  		bra.w	Sound_E1
0007CF2C                            ; ===========================================================================
0007CF2C 6000 0000                  		bra.w	Sound_E2
0007CF30                            ; ===========================================================================
0007CF30 6000 0000                  		bra.w	Sound_E3
0007CF34                            ; ===========================================================================
0007CF34 6000 0000                  		bra.w	Sound_E4
0007CF38                            ; ===========================================================================
0007CF38 6000 0000                  		bra.w	Sound_E5
0007CF3C                            ; ===========================================================================
0007CF3C                            ; ---------------------------------------------------------------------------
0007CF3C                            ; Play "Say-gaa" PCM sound
0007CF3C                            ; ---------------------------------------------------------------------------
0007CF3C                            
0007CF3C                            Sound_E1:				  
0007CF3C 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007CF44 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007CF4C 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
0007CF50 51C8 FFFE                  		dbf	d0,*
0007CF54 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007CF5A 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0007CF60 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007CF68                            PlayPCM_Loop:	  
0007CF68 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007CF6E 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0007CF72 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007CF76 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007CF78 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007CF7A 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007CF7E 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007CF84 4EB8 13E6                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007CF88 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007CF8E 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0007CF90 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0007CF92                            return_PlayPCM: 
0007CF92 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
0007CF9A 584F                       		addq.w	#4,sp 
0007CF9C 4E75                       		rts
0007CF9E                            		
0007CF9E                            ; ---------------------------------------------------------------------------
0007CF9E                            ; Play you are an idiot pcm sound
0007CF9E                            ; since the sfx already crashes the game forever load it here :V
0007CF9E                            ; ---------------------------------------------------------------------------
0007CF9E                            
0007CF9E                            Sound_E5: 
0007CF9E 4EB8 14C2                  		jsr	ClearScreen
0007CFA2 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
0007CFAA 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
0007CFB2                            
0007CFB2                            		;control port on a5
0007CFB2 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
0007CFB8 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007CFBE 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
0007CFC2 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
0007CFC6 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
0007CFCA                            		
0007CFCA 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007CFCE                            		
0007CFCE 2ABC 4000 0000             		move.l	#$40000000,(a5)
0007CFD4 41F9 0002 4662             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0007CFDA 4EB8 163E                  		jsr	NemDec
0007CFDE 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CFE4 41F9 0002 4604             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0007CFEA 303C 0000                  		move.w	#0,d0
0007CFEE 4EB8 191C                  		jsr	EniDec
0007CFF2 43F9 00FF 0000             		lea	($FF0000).l,a1
0007CFF8 203C 4304 0003             		move.l	#$43040003,d0
0007CFFE 7223                       		moveq	#35,d1
0007D000 740D                       		moveq	#13,d2
0007D002 4EB8 161E                  		jsr	ShowVDPGraphics
0007D006 7014                       		moveq	#20,d0
0007D008 4EB8 22E2                  		jsr	PalLoad2	; load pallet
0007D00C                            
0007D00C                            
0007D00C 4BF9 00C0 0004             		lea	($C00004).l,a5
0007D012 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
0007D016 7600                       		moveq	#0,d3				; make @palett jump to @start when done
0007D018 6000                       		bra.s	@palett
0007D01A                            @start:
0007D01A 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007D020 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
0007D026 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
0007D02E                            @loop:
0007D02E 44D5                       		move.w	(a5),ccr
0007D030 6B00                       		bmi.s	@vblank
0007D032                            
0007D032 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D038 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D03C 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D040 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D042 66EA                       		bne.s	@loop				; if not zero, loop
0007D044 60D4                       		bra.s	@start
0007D046                            @vblank:
0007D046 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
0007D04C 6700                       		beq.s	@palett
0007D04E 5238 FE24                  		addq.b	#1,($FFFFFE24).w
0007D052                            @loop_vblank:
0007D052 44D5                       		move.w	(a5),ccr
0007D054 6AD8                       		bpl.s	@loop
0007D056                            
0007D056 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007D05C 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007D060 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
0007D064 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
0007D066 66EA                       		bne.s	@loop_vblank			; if not zero, loop
0007D068 60B0                       		bra.s	@start
0007D06A                            @palett:
0007D06A 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
0007D070                            
0007D070 4238 FE24                  		clr.b	($FFFFFE24).w
0007D074 4638 FE25                  		not.b	($FFFFFE25).w
0007D078 6700                       		beq.s	@not_black
0007D07A 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
0007D080 6000                       		bra.s	@merge
0007D082                            	@not_black:
0007D082 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007D088                            	@merge:
0007D088 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007D08C 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
0007D090 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
0007D094 3A9F                       		move.w	(sp)+,(a5)
0007D096                            		
0007D096 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
0007D09A 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
0007D09E 4A83                       		tst.l	d3
0007D0A0 66B0                       		bne.s	@loop_vblank
0007D0A2 6000 FF76                  		bra.w	@start
0007D0A6                            ; ===========================================================================
0007D0A6                            ; ---------------------------------------------------------------------------
0007D0A6                            ; Play music track $81-$9F
0007D0A6                            ; ---------------------------------------------------------------------------
0007D0A6                            
0007D0A6                            Sound_Music:				; XREF: Sound_ChkValue
0007D0A6 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007D0AA 6600                       		bne.s	loc_72024	; if not, branch
0007D0AC 4A2E 0027                  		tst.b	$27(a6)
0007D0B0 6600 0000                  		bne.w	loc_721B6
0007D0B4 4BEE 0040                  		lea	$40(a6),a5
0007D0B8 7009                       		moveq	#9,d0
0007D0BA                            
0007D0BA                            loc_71FE6:
0007D0BA 0895 0002                  		bclr	#2,(a5)
0007D0BE DAFC 0030                  		adda.w	#$30,a5
0007D0C2 51C8 FFF6                  		dbf	d0,loc_71FE6
0007D0C6                            
0007D0C6 4BEE 0220                  		lea	$220(a6),a5
0007D0CA 7005                       		moveq	#5,d0
0007D0CC                            
0007D0CC                            loc_71FF8:
0007D0CC 0895 0007                  		bclr	#7,(a5)
0007D0D0 DAFC 0030                  		adda.w	#$30,a5
0007D0D4 51C8 FFF6                  		dbf	d0,loc_71FF8
0007D0D8 4216                       		clr.b	0(a6)
0007D0DA 204E                       		movea.l	a6,a0
0007D0DC 43EE 03A0                  		lea	$3A0(a6),a1
0007D0E0 303C 0087                  		move.w	#$87,d0
0007D0E4                            
0007D0E4                            loc_72012:
0007D0E4 22D8                       		move.l	(a0)+,(a1)+
0007D0E6 51C8 FFFC                  		dbf	d0,loc_72012
0007D0EA                            
0007D0EA 1D7C 0080 0027             		move.b	#$80,$27(a6)
0007D0F0 4216                       		clr.b	0(a6)
0007D0F2 6000                       		bra.s	loc_7202C
0007D0F4                            ; ===========================================================================
0007D0F4                            
0007D0F4                            loc_72024:
0007D0F4 422E 0027                  		clr.b	$27(a6)
0007D0F8 422E 0026                  		clr.b	$26(a6)
0007D0FC                            
0007D0FC                            loc_7202C:
0007D0FC 4EBA 0000                  		jsr	sub_725CA(pc)
0007D100 2879 0007 C87C             		movea.l	(off_719A0).l,a4
0007D106 0C07 0080                  		cmpi.b	#$80,d7
0007D10A 6500                       		blo.s	@zeroindex
0007D10C                            		
0007D10C 0407 0080                  		subi.b	#$80,d7
0007D110 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007D116 2879 0007 C874             		movea.l	(Go_MusicIndex80).l,a4
0007D11C 6000                       		bra.s @continue
0007D11E                            	@zeroindex:
0007D11E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0007D124 2879 0007 C870             		movea.l	(Go_MusicIndex).l,a4
0007D12A                            	@continue:
0007D12A E54F                       		lsl.w	#2,d7
0007D12C 2874 7000                  		movea.l	(a4,d7.w),a4
0007D130 7000                       		moveq	#0,d0
0007D132 3014                       		move.w	(a4),d0
0007D134 D08C                       		add.l	a4,d0
0007D136 2D40 0018                  		move.l	d0,$18(a6)
0007D13A 102C 0005                  		move.b	5(a4),d0
0007D13E 1D40 0028                  		move.b	d0,$28(a6)
0007D142 4A2E 002A                  		tst.b	$2A(a6)
0007D146 6700                       		beq.s	loc_72068
0007D148 102E 0029                  		move.b	$29(a6),d0
0007D14C                            
0007D14C                            loc_72068:
0007D14C 1D40 0002                  		move.b	d0,2(a6)
0007D150 1D40 0001                  		move.b	d0,1(a6)
0007D154 7200                       		moveq	#0,d1
0007D156 264C                       		movea.l	a4,a3
0007D158 5C4C                       		addq.w	#6,a4
0007D15A 7E00                       		moveq	#0,d7
0007D15C 1E2B 0002                  		move.b	2(a3),d7
0007D160 6700 0000                  		beq.w	loc_72114
0007D164 5307                       		subq.b	#1,d7
0007D166 123C 00C0                  		move.b	#-$40,d1
0007D16A 182B 0004                  		move.b	4(a3),d4
0007D16E 7C30                       		moveq	#$30,d6
0007D170 1A3C 0001                  		move.b	#1,d5
0007D174 43EE 0040                  		lea	$40(a6),a1
0007D178 45FA 0000                  		lea	byte_721BA(pc),a2
0007D17C                            
0007D17C                            loc_72098:
0007D17C 08D1 0007                  		bset	#7,(a1)
0007D180 135A 0001                  		move.b	(a2)+,1(a1)
0007D184 1344 0002                  		move.b	d4,2(a1)
0007D188 1346 000D                  		move.b	d6,$D(a1)
0007D18C 1341 000A                  		move.b	d1,$A(a1)
0007D190 1345 000E                  		move.b	d5,$E(a1)
0007D194 7000                       		moveq	#0,d0
0007D196 301C                       		move.w	(a4)+,d0
0007D198 D08B                       		add.l	a3,d0
0007D19A 2340 0004                  		move.l	d0,4(a1)
0007D19E 335C 0008                  		move.w	(a4)+,8(a1)
0007D1A2 D2C6                       		adda.w	d6,a1
0007D1A4 51CF FFD6                  		dbf	d7,loc_72098
0007D1A8 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0007D1AE 6600                       		bne.s	loc_720D8
0007D1B0 702B                       		moveq	#$2B,d0
0007D1B2 7200                       		moveq	#0,d1
0007D1B4 4EBA 0000                  		jsr	sub_7272E(pc)
0007D1B8 6000 0000                  		bra.w	loc_72114
0007D1BC                            ; ===========================================================================
0007D1BC                            
0007D1BC                            loc_720D8:
0007D1BC 7028                       		moveq	#$28,d0
0007D1BE 7206                       		moveq	#6,d1
0007D1C0 4EBA 0000                  		jsr	sub_7272E(pc)
0007D1C4 103C 0042                  		move.b	#$42,d0
0007D1C8 727F                       		moveq	#$7F,d1
0007D1CA 4EBA 0000                  		jsr	sub_72764(pc)
0007D1CE 103C 004A                  		move.b	#$4A,d0
0007D1D2 727F                       		moveq	#$7F,d1
0007D1D4 4EBA 0000                  		jsr	sub_72764(pc)
0007D1D8 103C 0046                  		move.b	#$46,d0
0007D1DC 727F                       		moveq	#$7F,d1
0007D1DE 4EBA 0000                  		jsr	sub_72764(pc)
0007D1E2 103C 004E                  		move.b	#$4E,d0
0007D1E6 727F                       		moveq	#$7F,d1
0007D1E8 4EBA 0000                  		jsr	sub_72764(pc)
0007D1EC 103C 00B6                  		move.b	#-$4A,d0
0007D1F0 123C 00C0                  		move.b	#-$40,d1
0007D1F4 4EBA 0000                  		jsr	sub_72764(pc)
0007D1F8                            
0007D1F8                            loc_72114:
0007D1F8 7E00                       		moveq	#0,d7
0007D1FA 1E2B 0003                  		move.b	3(a3),d7
0007D1FE 6700                       		beq.s	loc_72154
0007D200 5307                       		subq.b	#1,d7
0007D202 43EE 0190                  		lea	$190(a6),a1
0007D206 45FA 0000                  		lea	byte_721C2(pc),a2
0007D20A                            
0007D20A                            loc_72126:
0007D20A 08D1 0007                  		bset	#7,(a1)
0007D20E 135A 0001                  		move.b	(a2)+,1(a1)
0007D212 1344 0002                  		move.b	d4,2(a1)
0007D216 1346 000D                  		move.b	d6,$D(a1)
0007D21A 1345 000E                  		move.b	d5,$E(a1)
0007D21E 7000                       		moveq	#0,d0
0007D220 301C                       		move.w	(a4)+,d0
0007D222 D08B                       		add.l	a3,d0
0007D224 2340 0004                  		move.l	d0,4(a1)
0007D228 335C 0008                  		move.w	(a4)+,8(a1)
0007D22C 101C                       		move.b	(a4)+,d0
0007D22E 135C 000B                  		move.b	(a4)+,$B(a1)
0007D232 D2C6                       		adda.w	d6,a1
0007D234 51CF FFD4                  		dbf	d7,loc_72126
0007D238                            
0007D238                            loc_72154:
0007D238 43EE 0220                  		lea	$220(a6),a1
0007D23C 7E05                       		moveq	#5,d7
0007D23E                            
0007D23E                            loc_7215A:
0007D23E 4A11                       		tst.b	(a1)
0007D240 6A00 0000                  		bpl.w	loc_7217C
0007D244 7000                       		moveq	#0,d0
0007D246 1029 0001                  		move.b	1(a1),d0
0007D24A 6B00                       		bmi.s	loc_7216E
0007D24C 5500                       		subq.b	#2,d0
0007D24E E508                       		lsl.b	#2,d0
0007D250 6000                       		bra.s	loc_72170
0007D252                            ; ===========================================================================
0007D252                            
0007D252                            loc_7216E:
0007D252 E608                       		lsr.b	#3,d0
0007D254                            
0007D254                            loc_72170:
0007D254 41FA 0000                  		lea	dword_722CC(pc),a0
0007D258 2070 0000                  		movea.l	(a0,d0.w),a0
0007D25C 08D0 0002                  		bset	#2,(a0)
0007D260                            
0007D260                            loc_7217C:
0007D260 D2C6                       		adda.w	d6,a1
0007D262 51CF FFDA                  		dbf	d7,loc_7215A
0007D266                            
0007D266 4A6E 0340                  		tst.w	$340(a6)
0007D26A 6A00                       		bpl.s	loc_7218E
0007D26C 08EE 0002 0100             		bset	#2,$100(a6)
0007D272                            
0007D272                            loc_7218E:
0007D272 4A6E 0370                  		tst.w	$370(a6)
0007D276 6A00                       		bpl.s	loc_7219A
0007D278 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D27E                            
0007D27E                            loc_7219A:
0007D27E 4BEE 0070                  		lea	$70(a6),a5
0007D282 7805                       		moveq	#5,d4
0007D284                            
0007D284                            loc_721A0:
0007D284 4EBA 0000                  		jsr	sub_726FE(pc)
0007D288 DAC6                       		adda.w	d6,a5
0007D28A 51CC FFF8                  		dbf	d4,loc_721A0
0007D28E 7802                       		moveq	#2,d4
0007D290                            
0007D290                            loc_721AC:
0007D290 4EBA 0000                  		jsr	sub_729A0(pc)
0007D294 DAC6                       		adda.w	d6,a5
0007D296 51CC FFF8                  		dbf	d4,loc_721AC
0007D29A                            
0007D29A                            loc_721B6:
0007D29A 584F                       		addq.w	#4,sp
0007D29C 4E75                       		rts	
0007D29E                            ; ===========================================================================
0007D29E 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0007D2A6                            		even
0007D2A6 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0007D2AA                            		even
0007D2AA                            ; ===========================================================================
0007D2AA                            ; ---------------------------------------------------------------------------
0007D2AA                            ; Play normal sound effect
0007D2AA                            ; ---------------------------------------------------------------------------
0007D2AA                            
0007D2AA                            Sound_SFX:				; XREF: Sound_ChkValue
0007D2AA 4A2E 0027                  		tst.b	$27(a6)
0007D2AE 6600 0000                  		bne.w	loc_722C6
0007D2B2 4A2E 0004                  		tst.b	4(a6)
0007D2B6 6600 0000                  		bne.w	loc_722C6
0007D2BA 4A2E 0024                  		tst.b	$24(a6)
0007D2BE 6600 0000                  		bne.w	loc_722C6
0007D2C2 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0007D2C6 6600                       		bne.s	Sound_notB5	; if not, branch
0007D2C8 4A2E 002B                  		tst.b	$2B(a6)
0007D2CC 6600                       		bne.s	loc_721EE
0007D2CE 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0007D2D2                            
0007D2D2                            loc_721EE:
0007D2D2 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0007D2D8                            
0007D2D8                            Sound_notB5:
0007D2D8 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0007D2DC 6600                       		bne.s	Sound_notA7	; if not, branch
0007D2DE 4A2E 002C                  		tst.b	$2C(a6)
0007D2E2 6600 0000                  		bne.w	locret_722C4
0007D2E6 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0007D2EC                            
0007D2EC                            Sound_notA7:
0007D2EC 2079 0007 C878             		movea.l	(Go_SoundIndex).l,a0
0007D2F2 0407 00A0                  		subi.b	#$A0,d7
0007D2F6 E54F                       		lsl.w	#2,d7
0007D2F8 2670 7000                  		movea.l	(a0,d7.w),a3
0007D2FC 224B                       		movea.l	a3,a1
0007D2FE 7200                       		moveq	#0,d1
0007D300 3219                       		move.w	(a1)+,d1
0007D302 D28B                       		add.l	a3,d1
0007D304 1A19                       		move.b	(a1)+,d5
0007D306 1E19                       		move.b	(a1)+,d7
0007D308 5307                       		subq.b	#1,d7
0007D30A 7C30                       		moveq	#$30,d6
0007D30C                            
0007D30C                            loc_72228:
0007D30C 7600                       		moveq	#0,d3
0007D30E 1629 0001                  		move.b	1(a1),d3
0007D312 1803                       		move.b	d3,d4
0007D314 6B00                       		bmi.s	loc_72244
0007D316 5543                       		subq.w	#2,d3
0007D318 E54B                       		lsl.w	#2,d3
0007D31A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D31E 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D322 08D5 0002                  		bset	#2,(a5)
0007D326 6000                       		bra.s	loc_7226E
0007D328                            ; ===========================================================================
0007D328                            
0007D328                            loc_72244:
0007D328 E64B                       		lsr.w	#3,d3
0007D32A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007D32E 2A75 3000                  		movea.l	(a5,d3.w),a5
0007D332 08D5 0002                  		bset	#2,(a5)
0007D336 0C04 00C0                  		cmpi.b	#$C0,d4
0007D33A 6600                       		bne.s	loc_7226E
0007D33C 1004                       		move.b	d4,d0
0007D33E 0000 001F                  		ori.b	#$1F,d0
0007D342 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D348 0840 0005                  		bchg	#5,d0
0007D34C 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D352                            
0007D352                            loc_7226E:
0007D352 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007D356 244D                       		movea.l	a5,a2
0007D358 700B                       		moveq	#$B,d0
0007D35A                            
0007D35A                            loc_72276:
0007D35A 429A                       		clr.l	(a2)+
0007D35C 51C8 FFFC                  		dbf	d0,loc_72276
0007D360                            
0007D360 3A99                       		move.w	(a1)+,(a5)
0007D362 1B45 0002                  		move.b	d5,2(a5)
0007D366 7000                       		moveq	#0,d0
0007D368 3019                       		move.w	(a1)+,d0
0007D36A D08B                       		add.l	a3,d0
0007D36C 2B40 0004                  		move.l	d0,4(a5)
0007D370 3B59 0008                  		move.w	(a1)+,8(a5)
0007D374 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D37A 1B46 000D                  		move.b	d6,$D(a5)
0007D37E 4A04                       		tst.b	d4
0007D380 6B00                       		bmi.s	loc_722A8
0007D382 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D388 2B41 0020                  		move.l	d1,$20(a5)
0007D38C                            
0007D38C                            loc_722A8:
0007D38C 51CF FF7E                  		dbf	d7,loc_72228
0007D390                            
0007D390 4A2E 0250                  		tst.b	$250(a6)
0007D394 6A00                       		bpl.s	loc_722B8
0007D396 08EE 0002 0340             		bset	#2,$340(a6)
0007D39C                            
0007D39C                            loc_722B8:
0007D39C 4A2E 0310                  		tst.b	$310(a6)
0007D3A0 6A00                       		bpl.s	locret_722C4
0007D3A2 08EE 0002 0370             		bset	#2,$370(a6)
0007D3A8                            
0007D3A8                            locret_722C4:
0007D3A8 4E75                       		rts	
0007D3AA                            ; ===========================================================================
0007D3AA                            
0007D3AA                            loc_722C6:
0007D3AA 4216                       		clr.b	0(a6)
0007D3AC 4E75                       		rts	
0007D3AE                            ; ===========================================================================
0007D3AE 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0007D3B2 0000 0000                  		dc.l 0
0007D3B6 00FF F100                  		dc.l $FFF100
0007D3BA 00FF F130                  		dc.l $FFF130
0007D3BE 00FF F190                  		dc.l $FFF190
0007D3C2 00FF F1C0                  		dc.l $FFF1C0
0007D3C6 00FF F1F0                  		dc.l $FFF1F0
0007D3CA 00FF F1F0                  		dc.l $FFF1F0
0007D3CE 00FF F220                  dword_722EC:	dc.l $FFF220
0007D3D2 0000 0000                  		dc.l 0
0007D3D6 00FF F250                  		dc.l $FFF250
0007D3DA 00FF F280                  		dc.l $FFF280
0007D3DE 00FF F2B0                  		dc.l $FFF2B0
0007D3E2 00FF F2E0                  		dc.l $FFF2E0
0007D3E6 00FF F310                  		dc.l $FFF310
0007D3EA 00FF F310                  		dc.l $FFF310
0007D3EE                            ; ===========================================================================
0007D3EE                            ; ---------------------------------------------------------------------------
0007D3EE                            ; Play GHZ waterfall sound
0007D3EE                            ; ---------------------------------------------------------------------------
0007D3EE                            
0007D3EE                            Sound_D0:				; XREF: Sound_ChkValue
0007D3EE 4A2E 0027                  		tst.b	$27(a6)
0007D3F2 6600 0000                  		bne.w	locret_723C6
0007D3F6 4A2E 0004                  		tst.b	4(a6)
0007D3FA 6600 0000                  		bne.w	locret_723C6
0007D3FE 4A2E 0024                  		tst.b	$24(a6)
0007D402 6600 0000                  		bne.w	locret_723C6
0007D406 2079 0007 C86C             		movea.l	(Go_SoundD0).l,a0
0007D40C 0407 00D0                  		subi.b	#$D0,d7
0007D410 E54F                       		lsl.w	#2,d7
0007D412 2670 7000                  		movea.l	(a0,d7.w),a3
0007D416 224B                       		movea.l	a3,a1
0007D418 7000                       		moveq	#0,d0
0007D41A 3019                       		move.w	(a1)+,d0
0007D41C D08B                       		add.l	a3,d0
0007D41E 2D40 0020                  		move.l	d0,$20(a6)
0007D422 1A19                       		move.b	(a1)+,d5
0007D424 1E19                       		move.b	(a1)+,d7
0007D426 5307                       		subq.b	#1,d7
0007D428 7C30                       		moveq	#$30,d6
0007D42A                            
0007D42A                            loc_72348:
0007D42A 1829 0001                  		move.b	1(a1),d4
0007D42E 6B00                       		bmi.s	loc_7235A
0007D430 08EE 0002 0100             		bset	#2,$100(a6)
0007D436 4BEE 0340                  		lea	$340(a6),a5
0007D43A 6000                       		bra.s	loc_72364
0007D43C                            ; ===========================================================================
0007D43C                            
0007D43C                            loc_7235A:
0007D43C 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007D442 4BEE 0370                  		lea	$370(a6),a5
0007D446                            
0007D446                            loc_72364:
0007D446 244D                       		movea.l	a5,a2
0007D448 700B                       		moveq	#$B,d0
0007D44A                            
0007D44A                            loc_72368:
0007D44A 429A                       		clr.l	(a2)+
0007D44C 51C8 FFFC                  		dbf	d0,loc_72368
0007D450                            
0007D450 3A99                       		move.w	(a1)+,(a5)
0007D452 1B45 0002                  		move.b	d5,2(a5)
0007D456 7000                       		moveq	#0,d0
0007D458 3019                       		move.w	(a1)+,d0
0007D45A D08B                       		add.l	a3,d0
0007D45C 2B40 0004                  		move.l	d0,4(a5)
0007D460 3B59 0008                  		move.w	(a1)+,8(a5)
0007D464 1B7C 0001 000E             		move.b	#1,$E(a5)
0007D46A 1B46 000D                  		move.b	d6,$D(a5)
0007D46E 4A04                       		tst.b	d4
0007D470 6B00                       		bmi.s	loc_72396
0007D472 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007D478                            
0007D478                            loc_72396:
0007D478 51CF FFB0                  		dbf	d7,loc_72348
0007D47C                            
0007D47C 4A2E 0250                  		tst.b	$250(a6)
0007D480 6A00                       		bpl.s	loc_723A6
0007D482 08EE 0002 0340             		bset	#2,$340(a6)
0007D488                            
0007D488                            loc_723A6:
0007D488 4A2E 0310                  		tst.b	$310(a6)
0007D48C 6A00                       		bpl.s	locret_723C6
0007D48E 08EE 0002 0370             		bset	#2,$370(a6)
0007D494 0004 001F                  		ori.b	#$1F,d4
0007D498 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D49E 0844 0005                  		bchg	#5,d4
0007D4A2 13C4 00C0 0011             		move.b	d4,($C00011).l
0007D4A8                            
0007D4A8                            locret_723C6:
0007D4A8 4E75                       		rts	
0007D4AA                            ; End of function Sound_ChkValue
0007D4AA                            
0007D4AA                            ; ===========================================================================
0007D4AA 00FF F100                  		dc.l $FFF100
0007D4AE 00FF F1F0                  		dc.l $FFF1F0
0007D4B2 00FF F250                  		dc.l $FFF250
0007D4B6 00FF F310                  		dc.l $FFF310
0007D4BA 00FF F340                  		dc.l $FFF340
0007D4BE 00FF F370                  		dc.l $FFF370
0007D4C2                            
0007D4C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D4C2                            
0007D4C2                            
0007D4C2                            Snd_FadeOut1:				; XREF: Sound_E0
0007D4C2 4216                       		clr.b	0(a6)
0007D4C4 4BEE 0220                  		lea	$220(a6),a5
0007D4C8 7E05                       		moveq	#5,d7
0007D4CA                            
0007D4CA                            loc_723EA:
0007D4CA 4A15                       		tst.b	(a5)
0007D4CC 6A00 0000                  		bpl.w	loc_72472
0007D4D0 0895 0007                  		bclr	#7,(a5)
0007D4D4 7600                       		moveq	#0,d3
0007D4D6 162D 0001                  		move.b	1(a5),d3
0007D4DA 6B00                       		bmi.s	loc_7243C
0007D4DC 4EBA 0000                  		jsr	sub_726FE(pc)
0007D4E0 0C03 0004                  		cmpi.b	#4,d3
0007D4E4 6600                       		bne.s	loc_72416
0007D4E6 4A2E 0340                  		tst.b	$340(a6)
0007D4EA 6A00                       		bpl.s	loc_72416
0007D4EC 4BEE 0340                  		lea	$340(a6),a5
0007D4F0 226E 0020                  		movea.l	$20(a6),a1
0007D4F4 6000                       		bra.s	loc_72428
0007D4F6                            ; ===========================================================================
0007D4F6                            
0007D4F6                            loc_72416:
0007D4F6 5503                       		subq.b	#2,d3
0007D4F8 E50B                       		lsl.b	#2,d3
0007D4FA 41FA FEB2                  		lea	dword_722CC(pc),a0
0007D4FE 264D                       		movea.l	a5,a3
0007D500 2A70 3000                  		movea.l	(a0,d3.w),a5
0007D504 226E 0018                  		movea.l	$18(a6),a1
0007D508                            
0007D508                            loc_72428:
0007D508 0895 0002                  		bclr	#2,(a5)
0007D50C 08D5 0001                  		bset	#1,(a5)
0007D510 102D 000B                  		move.b	$B(a5),d0
0007D514 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D518 2A4B                       		movea.l	a3,a5
0007D51A 6000                       		bra.s	loc_72472
0007D51C                            ; ===========================================================================
0007D51C                            
0007D51C                            loc_7243C:
0007D51C 4EBA 0000                  		jsr	sub_729A0(pc)
0007D520 41EE 0370                  		lea	$370(a6),a0
0007D524 0C03 00E0                  		cmpi.b	#$E0,d3
0007D528 6700                       		beq.s	loc_7245A
0007D52A 0C03 00C0                  		cmpi.b	#$C0,d3
0007D52E 6700                       		beq.s	loc_7245A
0007D530 E60B                       		lsr.b	#3,d3
0007D532 41FA FE7A                  		lea	dword_722CC(pc),a0
0007D536 2070 3000                  		movea.l	(a0,d3.w),a0
0007D53A                            
0007D53A                            loc_7245A:
0007D53A 0890 0002                  		bclr	#2,(a0)
0007D53E 08D0 0001                  		bset	#1,(a0)
0007D542 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007D548 6600                       		bne.s	loc_72472
0007D54A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007D552                            
0007D552                            loc_72472:
0007D552 DAFC 0030                  		adda.w	#$30,a5
0007D556 51CF FF72                  		dbf	d7,loc_723EA
0007D55A                            
0007D55A 4E75                       		rts	
0007D55C                            ; End of function Snd_FadeOut1
0007D55C                            
0007D55C                            
0007D55C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D55C                            
0007D55C                            
0007D55C                            Snd_FadeOut2:				; XREF: Sound_E0
0007D55C 4BEE 0340                  		lea	$340(a6),a5
0007D560 4A15                       		tst.b	(a5)
0007D562 6A00                       		bpl.s	loc_724AE
0007D564 0895 0007                  		bclr	#7,(a5)
0007D568 0815 0002                  		btst	#2,(a5)
0007D56C 6600                       		bne.s	loc_724AE
0007D56E 4EBA 0000                  		jsr	loc_7270A(pc)
0007D572 4BEE 0100                  		lea	$100(a6),a5
0007D576 0895 0002                  		bclr	#2,(a5)
0007D57A 08D5 0001                  		bset	#1,(a5)
0007D57E 4A15                       		tst.b	(a5)
0007D580 6A00                       		bpl.s	loc_724AE
0007D582 226E 0018                  		movea.l	$18(a6),a1
0007D586 102D 000B                  		move.b	$B(a5),d0
0007D58A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007D58E                            
0007D58E                            loc_724AE:
0007D58E 4BEE 0370                  		lea	$370(a6),a5
0007D592 4A15                       		tst.b	(a5)
0007D594 6A00                       		bpl.s	locret_724E4
0007D596 0895 0007                  		bclr	#7,(a5)
0007D59A 0815 0002                  		btst	#2,(a5)
0007D59E 6600                       		bne.s	locret_724E4
0007D5A0 4EBA 0000                  		jsr	loc_729A6(pc)
0007D5A4 4BEE 01F0                  		lea	$1F0(a6),a5
0007D5A8 0895 0002                  		bclr	#2,(a5)
0007D5AC 08D5 0001                  		bset	#1,(a5)
0007D5B0 4A15                       		tst.b	(a5)
0007D5B2 6A00                       		bpl.s	locret_724E4
0007D5B4 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0007D5BA 6600                       		bne.s	locret_724E4
0007D5BC 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0007D5C4                            
0007D5C4                            locret_724E4:
0007D5C4 4E75                       		rts	
0007D5C6                            ; End of function Snd_FadeOut2
0007D5C6                            
0007D5C6                            ; ===========================================================================
0007D5C6                            ; ---------------------------------------------------------------------------
0007D5C6                            ; Fade out music
0007D5C6                            ; ---------------------------------------------------------------------------
0007D5C6                            
0007D5C6                            Sound_E0:				; XREF: Sound_ExIndex
0007D5C6 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0007D5CA 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0007D5CE 1D7C 0003 0006             		move.b	#3,6(a6)
0007D5D4 1D7C 0028 0004             		move.b	#$28,4(a6)
0007D5DA 422E 0040                  		clr.b	$40(a6)
0007D5DE 422E 002A                  		clr.b	$2A(a6)
0007D5E2 4E75                       		rts	
0007D5E4                            
0007D5E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D5E4                            
0007D5E4                            
0007D5E4                            sub_72504:				; XREF: sub_71B4C
0007D5E4 102E 0006                  		move.b	6(a6),d0
0007D5E8 6700                       		beq.s	loc_72510
0007D5EA 532E 0006                  		subq.b	#1,6(a6)
0007D5EE 4E75                       		rts	
0007D5F0                            ; ===========================================================================
0007D5F0                            
0007D5F0                            loc_72510:
0007D5F0 532E 0004                  		subq.b	#1,4(a6)
0007D5F4 6700 0000                  		beq.w	Sound_E4
0007D5F8 1D7C 0003 0006             		move.b	#3,6(a6)
0007D5FE 4BEE 0070                  		lea	$70(a6),a5
0007D602 7E05                       		moveq	#5,d7
0007D604                            
0007D604                            loc_72524:
0007D604 4A15                       		tst.b	(a5)
0007D606 6A00                       		bpl.s	loc_72538
0007D608 522D 0009                  		addq.b	#1,9(a5)
0007D60C 6A00                       		bpl.s	loc_72534
0007D60E 0895 0007                  		bclr	#7,(a5)
0007D612 6000                       		bra.s	loc_72538
0007D614                            ; ===========================================================================
0007D614                            
0007D614                            loc_72534:
0007D614 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D618                            
0007D618                            loc_72538:
0007D618 DAFC 0030                  		adda.w	#$30,a5
0007D61C 51CF FFE6                  		dbf	d7,loc_72524
0007D620                            
0007D620 7E02                       		moveq	#2,d7
0007D622                            
0007D622                            loc_72542:
0007D622 4A15                       		tst.b	(a5)
0007D624 6A00                       		bpl.s	loc_72560
0007D626 522D 0009                  		addq.b	#1,9(a5)
0007D62A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0007D630 6500                       		bcs.s	loc_72558
0007D632 0895 0007                  		bclr	#7,(a5)
0007D636 6000                       		bra.s	loc_72560
0007D638                            ; ===========================================================================
0007D638                            
0007D638                            loc_72558:
0007D638 1C2D 0009                  		move.b	9(a5),d6
0007D63C 4EBA 0000                  		jsr	sub_7296A(pc)
0007D640                            
0007D640                            loc_72560:
0007D640 DAFC 0030                  		adda.w	#$30,a5
0007D644 51CF FFDC                  		dbf	d7,loc_72542
0007D648                            
0007D648 4E75                       		rts	
0007D64A                            ; End of function sub_72504
0007D64A                            
0007D64A                            
0007D64A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D64A                            
0007D64A                            
0007D64A                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007D64A 7602                       		moveq	#2,d3
0007D64C 7028                       		moveq	#$28,d0
0007D64E                            
0007D64E                            loc_7256E:
0007D64E 1203                       		move.b	d3,d1
0007D650 4EBA 0000                  		jsr	sub_7272E(pc)
0007D654 5801                       		addq.b	#4,d1
0007D656 4EBA 0000                  		jsr	sub_7272E(pc)
0007D65A 51CB FFF2                  		dbf	d3,loc_7256E
0007D65E                            
0007D65E 7040                       		moveq	#$40,d0
0007D660 727F                       		moveq	#$7F,d1
0007D662 7802                       		moveq	#2,d4
0007D664                            
0007D664                            loc_72584:
0007D664 7603                       		moveq	#3,d3
0007D666                            
0007D666                            loc_72586:
0007D666 4EBA 0000                  		jsr	sub_7272E(pc)
0007D66A 4EBA 0000                  		jsr	sub_72764(pc)
0007D66E 5840                       		addq.w	#4,d0
0007D670 51CB FFF4                  		dbf	d3,loc_72586
0007D674                            
0007D674 0400 000F                  		subi.b	#$F,d0
0007D678 51CC FFEA                  		dbf	d4,loc_72584
0007D67C                            
0007D67C 4E75                       		rts	
0007D67E                            ; End of function sub_7256A
0007D67E                            
0007D67E                            ; ===========================================================================
0007D67E                            ; ---------------------------------------------------------------------------
0007D67E                            ; Stop music
0007D67E                            ; ---------------------------------------------------------------------------
0007D67E                            
0007D67E                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007D67E 702B                       		moveq	#$2B,d0
0007D680 123C 0080                  		move.b	#$80,d1
0007D684 4EBA 0000                  		jsr	sub_7272E(pc)
0007D688 7027                       		moveq	#$27,d0
0007D68A 7200                       		moveq	#0,d1
0007D68C 4EBA 0000                  		jsr	sub_7272E(pc)
0007D690 204E                       		movea.l	a6,a0
0007D692 303C 00E3                  		move.w	#$E3,d0
0007D696                            
0007D696                            loc_725B6:
0007D696 4298                       		clr.l	(a0)+
0007D698 51C8 FFFC                  		dbf	d0,loc_725B6
0007D69C                            
0007D69C 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0007D6A2 4EBA FFA6                  		jsr	sub_7256A(pc)
0007D6A6 6000 0000                  		bra.w	sub_729B6
0007D6AA                            
0007D6AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6AA                            
0007D6AA                            
0007D6AA                            sub_725CA:				; XREF: Sound_ChkValue
0007D6AA 204E                       		movea.l	a6,a0
0007D6AC 1216                       		move.b	0(a6),d1
0007D6AE 142E 0027                  		move.b	$27(a6),d2
0007D6B2 162E 002A                  		move.b	$2A(a6),d3
0007D6B6 182E 0026                  		move.b	$26(a6),d4
0007D6BA 3A2E 000A                  		move.w	$A(a6),d5
0007D6BE 303C 0087                  		move.w	#$87,d0
0007D6C2                            
0007D6C2                            loc_725E4:
0007D6C2 4298                       		clr.l	(a0)+
0007D6C4 51C8 FFFC                  		dbf	d0,loc_725E4
0007D6C8                            
0007D6C8 1C81                       		move.b	d1,0(a6)
0007D6CA 1D42 0027                  		move.b	d2,$27(a6)
0007D6CE 1D43 002A                  		move.b	d3,$2A(a6)
0007D6D2 1D44 0026                  		move.b	d4,$26(a6)
0007D6D6 3D45 000A                  		move.w	d5,$A(a6)
0007D6DA 1D7C 0080 0009             		move.b	#$80,9(a6)
0007D6E0 4EBA FF68                  		jsr	sub_7256A(pc)
0007D6E4 6000 0000                  		bra.w	sub_729B6
0007D6E8                            ; End of function sub_725CA
0007D6E8                            
0007D6E8                            
0007D6E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D6E8                            
0007D6E8                            
0007D6E8                            sub_7260C:				; XREF: sub_71B4C
0007D6E8 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007D6EE 41EE 004E                  		lea	$4E(a6),a0
0007D6F2 7030                       		moveq	#$30,d0
0007D6F4 7209                       		moveq	#9,d1
0007D6F6                            
0007D6F6                            loc_7261A:
0007D6F6 5210                       		addq.b	#1,(a0)
0007D6F8 D0C0                       		adda.w	d0,a0
0007D6FA 51C9 FFFA                  		dbf	d1,loc_7261A
0007D6FE                            
0007D6FE 4E75                       		rts	
0007D700                            ; End of function sub_7260C
0007D700                            
0007D700                            ; ===========================================================================
0007D700                            ; ---------------------------------------------------------------------------
0007D700                            ; Speed	up music
0007D700                            ; ---------------------------------------------------------------------------
0007D700                            
0007D700                            Sound_E2:				; XREF: Sound_ExIndex
0007D700 4A2E 0027                  		tst.b	$27(a6)
0007D704 6600                       		bne.s	loc_7263E
0007D706 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007D70C 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0007D712 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0007D718 4E75                       		rts	
0007D71A                            ; ===========================================================================
0007D71A                            
0007D71A                            loc_7263E:
0007D71A 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007D720 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007D726 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007D72C 4E75                       		rts	
0007D72E                            ; ===========================================================================
0007D72E                            ; ---------------------------------------------------------------------------
0007D72E                            ; Change music back to normal speed
0007D72E                            ; ---------------------------------------------------------------------------
0007D72E                            
0007D72E                            Sound_E3:				; XREF: Sound_ExIndex
0007D72E 4A2E 0027                  		tst.b	$27(a6)
0007D732 6600                       		bne.s	loc_7266A
0007D734 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007D73A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0007D740 422E 002A                  		clr.b	$2A(a6)
0007D744 4E75                       		rts	
0007D746                            ; ===========================================================================
0007D746                            
0007D746                            loc_7266A:
0007D746 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007D74C 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007D752 422E 03CA                  		clr.b	$3CA(a6)
0007D756 4E75                       		rts	
0007D758                            
0007D758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D758                            
0007D758                            
0007D758                            sub_7267C:				; XREF: sub_71B4C
0007D758 4A2E 0025                  		tst.b	$25(a6)
0007D75C 6700                       		beq.s	loc_72688
0007D75E 532E 0025                  		subq.b	#1,$25(a6)
0007D762 4E75                       		rts	
0007D764                            ; ===========================================================================
0007D764                            
0007D764                            loc_72688:
0007D764 4A2E 0026                  		tst.b	$26(a6)
0007D768 6700                       		beq.s	loc_726D6
0007D76A 532E 0026                  		subq.b	#1,$26(a6)
0007D76E 1D7C 0002 0025             		move.b	#2,$25(a6)
0007D774 4BEE 0070                  		lea	$70(a6),a5
0007D778 7E05                       		moveq	#5,d7
0007D77A                            
0007D77A                            loc_7269E:
0007D77A 4A15                       		tst.b	(a5)
0007D77C 6A00                       		bpl.s	loc_726AA
0007D77E 532D 0009                  		subq.b	#1,9(a5)
0007D782 4EBA 0000                  		jsr	sub_72CB4(pc)
0007D786                            
0007D786                            loc_726AA:
0007D786 DAFC 0030                  		adda.w	#$30,a5
0007D78A 51CF FFEE                  		dbf	d7,loc_7269E
0007D78E 7E02                       		moveq	#2,d7
0007D790                            
0007D790                            loc_726B4:
0007D790 4A15                       		tst.b	(a5)
0007D792 6A00                       		bpl.s	loc_726CC
0007D794 532D 0009                  		subq.b	#1,9(a5)
0007D798 1C2D 0009                  		move.b	9(a5),d6
0007D79C 0C06 0010                  		cmpi.b	#$10,d6
0007D7A0 6500                       		bcs.s	loc_726C8
0007D7A2 7C0F                       		moveq	#$F,d6
0007D7A4                            
0007D7A4                            loc_726C8:
0007D7A4 4EBA 0000                  		jsr	sub_7296A(pc)
0007D7A8                            
0007D7A8                            loc_726CC:
0007D7A8 DAFC 0030                  		adda.w	#$30,a5
0007D7AC 51CF FFE2                  		dbf	d7,loc_726B4
0007D7B0 4E75                       		rts	
0007D7B2                            ; ===========================================================================
0007D7B2                            
0007D7B2                            loc_726D6:
0007D7B2 08AE 0002 0040             		bclr	#2,$40(a6)
0007D7B8 422E 0024                  		clr.b	$24(a6)
0007D7BC 4E75                       		rts	
0007D7BE                            ; End of function sub_7267C
0007D7BE                            
0007D7BE                            ; ===========================================================================
0007D7BE                            
0007D7BE                            loc_726E2:				; XREF: sub_71CCA
0007D7BE 0815 0001                  		btst	#1,(a5)
0007D7C2 6600                       		bne.s	locret_726FC
0007D7C4 0815 0002                  		btst	#2,(a5)
0007D7C8 6600                       		bne.s	locret_726FC
0007D7CA 7028                       		moveq	#$28,d0
0007D7CC 122D 0001                  		move.b	1(a5),d1
0007D7D0 0001 00F0                  		ori.b	#-$10,d1
0007D7D4 6000 0000                  		bra.w	sub_7272E
0007D7D8                            ; ===========================================================================
0007D7D8                            
0007D7D8                            locret_726FC:
0007D7D8 4E75                       		rts	
0007D7DA                            
0007D7DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7DA                            
0007D7DA                            
0007D7DA                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0007D7DA 0815 0004                  		btst	#4,(a5)
0007D7DE 6600                       		bne.s	locret_72714
0007D7E0 0815 0002                  		btst	#2,(a5)
0007D7E4 6600                       		bne.s	locret_72714
0007D7E6                            
0007D7E6                            loc_7270A:				; XREF: Snd_FadeOut2
0007D7E6 7028                       		moveq	#$28,d0
0007D7E8 122D 0001                  		move.b	1(a5),d1
0007D7EC 6000 0000                  		bra.w	sub_7272E
0007D7F0                            ; ===========================================================================
0007D7F0                            
0007D7F0                            locret_72714:
0007D7F0 4E75                       		rts	
0007D7F2                            ; End of function sub_726FE
0007D7F2                            
0007D7F2                            ; ===========================================================================
0007D7F2                            
0007D7F2                            loc_72716:				; XREF: sub_72A5A
0007D7F2 0815 0002                  		btst	#2,(a5)
0007D7F6 6600                       		bne.s	locret_72720
0007D7F8 6000 0000                  		bra.w	sub_72722
0007D7FC                            ; ===========================================================================
0007D7FC                            
0007D7FC                            locret_72720:
0007D7FC 4E75                       		rts	
0007D7FE                            
0007D7FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D7FE                            
0007D7FE                            
0007D7FE                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007D7FE 082D 0002 0001             		btst	#2,1(a5)
0007D804 6600                       		bne.s	loc_7275A
0007D806 D02D 0001                  		add.b	1(a5),d0
0007D80A                            ; End of function sub_72722
0007D80A                            
0007D80A                            
0007D80A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D80A                            
0007D80A                            
0007D80A                            sub_7272E:				; XREF: loc_71E6A
0007D80A 1439 00A0 4000             		move.b	($A04000).l,d2
0007D810 0802 0007                  		btst	#7,d2
0007D814 66F4                       		bne.s	sub_7272E
0007D816 13C0 00A0 4000             		move.b	d0,($A04000).l
0007D81C 4E71                       		nop	
0007D81E 4E71                       		nop	
0007D820 4E71                       		nop	
0007D822                            
0007D822                            loc_72746:
0007D822 1439 00A0 4000             		move.b	($A04000).l,d2
0007D828 0802 0007                  		btst	#7,d2
0007D82C 66F4                       		bne.s	loc_72746
0007D82E                            
0007D82E 13C1 00A0 4001             		move.b	d1,($A04001).l
0007D834 4E75                       		rts	
0007D836                            ; End of function sub_7272E
0007D836                            
0007D836                            ; ===========================================================================
0007D836                            
0007D836                            loc_7275A:				; XREF: sub_72722
0007D836 142D 0001                  		move.b	1(a5),d2
0007D83A 0882 0002                  		bclr	#2,d2
0007D83E D002                       		add.b	d2,d0
0007D840                            
0007D840                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D840                            
0007D840                            
0007D840                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0007D840 1439 00A0 4000             		move.b	($A04000).l,d2
0007D846 0802 0007                  		btst	#7,d2
0007D84A 66F4                       		bne.s	sub_72764
0007D84C 13C0 00A0 4002             		move.b	d0,($A04002).l
0007D852 4E71                       		nop	
0007D854 4E71                       		nop	
0007D856 4E71                       		nop	
0007D858                            
0007D858                            loc_7277C:
0007D858 1439 00A0 4000             		move.b	($A04000).l,d2
0007D85E 0802 0007                  		btst	#7,d2
0007D862 66F4                       		bne.s	loc_7277C
0007D864                            
0007D864 13C1 00A0 4003             		move.b	d1,($A04003).l
0007D86A 4E75                       		rts	
0007D86C                            ; End of function sub_72764
0007D86C                            
0007D86C                            ; ===========================================================================
0007D86C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007D87E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007D890 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007D8A0 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007D8B0 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007D8C0 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007D8D0 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007D8E0 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007D8F0 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007D900 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007D910 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007D920 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007D92C                            
0007D92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D92C                            
0007D92C                            
0007D92C                            sub_72850:				; XREF: sub_71B4C
0007D92C 532D 000E                  		subq.b	#1,$E(a5)
0007D930 6600                       		bne.s	loc_72866
0007D932 0895 0004                  		bclr	#4,(a5)
0007D936 4EBA 0000                  		jsr	sub_72878(pc)
0007D93A 4EBA 0000                  		jsr	sub_728DC(pc)
0007D93E 6000 0000                  		bra.w	loc_7292E
0007D942                            ; ===========================================================================
0007D942                            
0007D942                            loc_72866:
0007D942 4EBA F418                  		jsr	sub_71D9E(pc)
0007D946 4EBA 0000                  		jsr	sub_72926(pc)
0007D94A 4EBA F438                  		jsr	sub_71DC6(pc)
0007D94E 4EBA 0000                  		jsr	sub_728E2(pc)
0007D952 4E75                       		rts	
0007D954                            ; End of function sub_72850
0007D954                            
0007D954                            
0007D954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D954                            
0007D954                            
0007D954                            sub_72878:				; XREF: sub_72850
0007D954 0895 0001                  		bclr	#1,(a5)
0007D958 286D 0004                  		movea.l	4(a5),a4
0007D95C                            
0007D95C                            loc_72880:
0007D95C 7A00                       		moveq	#0,d5
0007D95E 1A1C                       		move.b	(a4)+,d5
0007D960 0C05 00E0                  		cmpi.b	#$E0,d5
0007D964 6500                       		bcs.s	loc_72890
0007D966 4EBA 0000                  		jsr	sub_72A5A(pc)
0007D96A 60F0                       		bra.s	loc_72880
0007D96C                            ; ===========================================================================
0007D96C                            
0007D96C                            loc_72890:
0007D96C 4A05                       		tst.b	d5
0007D96E 6A00                       		bpl.s	loc_728A4
0007D970 4EBA 0000                  		jsr	sub_728AC(pc)
0007D974 1A1C                       		move.b	(a4)+,d5
0007D976 4A05                       		tst.b	d5
0007D978 6A00                       		bpl.s	loc_728A4
0007D97A 534C                       		subq.w	#1,a4
0007D97C 6000 F3A0                  		bra.w	sub_71D60
0007D980                            ; ===========================================================================
0007D980                            
0007D980                            loc_728A4:
0007D980 4EBA F37C                  		jsr	sub_71D40(pc)
0007D984 6000 F398                  		bra.w	sub_71D60
0007D988                            ; End of function sub_72878
0007D988                            
0007D988                            
0007D988                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D988                            
0007D988                            
0007D988                            sub_728AC:				; XREF: sub_72878
0007D988 0405 0081                  		subi.b	#$81,d5
0007D98C 6500                       		bcs.s	loc_728CA
0007D98E DA2D 0008                  		add.b	8(a5),d5
0007D992 0245 007F                  		andi.w	#$7F,d5
0007D996 E34D                       		lsl.w	#1,d5
0007D998 41FA 0000                  		lea	word_729CE(pc),a0
0007D99C 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007D9A2 6000 F37A                  		bra.w	sub_71D60
0007D9A6                            ; ===========================================================================
0007D9A6                            
0007D9A6                            loc_728CA:
0007D9A6 08D5 0001                  		bset	#1,(a5)
0007D9AA 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007D9B0 4EBA F36C                  		jsr	sub_71D60(pc)
0007D9B4 6000 0000                  		bra.w	sub_729A0
0007D9B8                            ; End of function sub_728AC
0007D9B8                            
0007D9B8                            
0007D9B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D9B8                            
0007D9B8                            
0007D9B8                            sub_728DC:				; XREF: sub_72850
0007D9B8 3C2D 0010                  		move.w	$10(a5),d6
0007D9BC 6B00                       		bmi.s	loc_72920
0007D9BE                            ; End of function sub_728DC
0007D9BE                            
0007D9BE                            
0007D9BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007D9BE                            
0007D9BE                            
0007D9BE                            sub_728E2:				; XREF: sub_72850
0007D9BE 102D 001E                  		move.b	$1E(a5),d0
0007D9C2 4880                       		ext.w	d0
0007D9C4 DC40                       		add.w	d0,d6
0007D9C6 0815 0002                  		btst	#2,(a5)
0007D9CA 6600                       		bne.s	locret_7291E
0007D9CC 0815 0001                  		btst	#1,(a5)
0007D9D0 6600                       		bne.s	locret_7291E
0007D9D2 102D 0001                  		move.b	1(a5),d0
0007D9D6 0C00 00E0                  		cmpi.b	#$E0,d0
0007D9DA 6600                       		bne.s	loc_72904
0007D9DC 103C 00C0                  		move.b	#$C0,d0
0007D9E0                            
0007D9E0                            loc_72904:
0007D9E0 3206                       		move.w	d6,d1
0007D9E2 0201 000F                  		andi.b	#$F,d1
0007D9E6 8001                       		or.b	d1,d0
0007D9E8 E84E                       		lsr.w	#4,d6
0007D9EA 0206 003F                  		andi.b	#$3F,d6
0007D9EE 13C0 00C0 0011             		move.b	d0,($C00011).l
0007D9F4 13C6 00C0 0011             		move.b	d6,($C00011).l
0007D9FA                            
0007D9FA                            locret_7291E:
0007D9FA 4E75                       		rts	
0007D9FC                            ; End of function sub_728E2
0007D9FC                            
0007D9FC                            ; ===========================================================================
0007D9FC                            
0007D9FC                            loc_72920:				; XREF: sub_728DC
0007D9FC 08D5 0001                  		bset	#1,(a5)
0007DA00 4E75                       		rts	
0007DA02                            
0007DA02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA02                            
0007DA02                            
0007DA02                            sub_72926:				; XREF: sub_72850
0007DA02 4A2D 000B                  		tst.b	$B(a5)
0007DA06 6700 0000                  		beq.w	locret_7298A
0007DA0A                            
0007DA0A                            loc_7292E:				; XREF: sub_72850
0007DA0A 1C2D 0009                  		move.b	9(a5),d6
0007DA0E 7000                       		moveq	#0,d0
0007DA10 102D 000B                  		move.b	$B(a5),d0
0007DA14 6700                       		beq.s	sub_7296A
0007DA16 2079 0007 C880             		movea.l	(Go_PSGIndex).l,a0
0007DA1C 5340                       		subq.w	#1,d0
0007DA1E E548                       		lsl.w	#2,d0
0007DA20 2070 0000                  		movea.l	(a0,d0.w),a0
0007DA24 102D 000C                  		move.b	$C(a5),d0
0007DA28 1030 0000                  		move.b	(a0,d0.w),d0
0007DA2C 522D 000C                  		addq.b	#1,$C(a5)
0007DA30 0800 0007                  		btst	#7,d0
0007DA34 6700                       		beq.s	loc_72960
0007DA36 0C00 0080                  		cmpi.b	#$80,d0
0007DA3A 6700                       		beq.s	loc_7299A
0007DA3C                            
0007DA3C                            loc_72960:
0007DA3C DC40                       		add.w	d0,d6
0007DA3E 0C06 0010                  		cmpi.b	#$10,d6
0007DA42 6500                       		bcs.s	sub_7296A
0007DA44 7C0F                       		moveq	#$F,d6
0007DA46                            ; End of function sub_72926
0007DA46                            
0007DA46                            
0007DA46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA46                            
0007DA46                            
0007DA46                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007DA46 0815 0001                  		btst	#1,(a5)
0007DA4A 6600                       		bne.s	locret_7298A
0007DA4C 0815 0002                  		btst	#2,(a5)
0007DA50 6600                       		bne.s	locret_7298A
0007DA52 0815 0004                  		btst	#4,(a5)
0007DA56 6600                       		bne.s	loc_7298C
0007DA58                            
0007DA58                            loc_7297C:
0007DA58 8C2D 0001                  		or.b	1(a5),d6
0007DA5C 0606 0010                  		addi.b	#$10,d6
0007DA60 13C6 00C0 0011             		move.b	d6,($C00011).l
0007DA66                            
0007DA66                            locret_7298A:
0007DA66 4E75                       		rts	
0007DA68                            ; ===========================================================================
0007DA68                            
0007DA68                            loc_7298C:
0007DA68 4A2D 0013                  		tst.b	$13(a5)
0007DA6C 67EA                       		beq.s	loc_7297C
0007DA6E 4A2D 0012                  		tst.b	$12(a5)
0007DA72 66E4                       		bne.s	loc_7297C
0007DA74 4E75                       		rts	
0007DA76                            ; End of function sub_7296A
0007DA76                            
0007DA76                            ; ===========================================================================
0007DA76                            
0007DA76                            loc_7299A:				; XREF: sub_72926
0007DA76 532D 000C                  		subq.b	#1,$C(a5)
0007DA7A 4E75                       		rts	
0007DA7C                            
0007DA7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA7C                            
0007DA7C                            
0007DA7C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007DA7C 0815 0002                  		btst	#2,(a5)
0007DA80 6600                       		bne.s	locret_729B4
0007DA82                            
0007DA82                            loc_729A6:				; XREF: Snd_FadeOut2
0007DA82 102D 0001                  		move.b	1(a5),d0
0007DA86 0000 001F                  		ori.b	#$1F,d0
0007DA8A 13C0 00C0 0011             		move.b	d0,($C00011).l
0007DA90                            
0007DA90                            locret_729B4:
0007DA90 4E75                       		rts	
0007DA92                            ; End of function sub_729A0
0007DA92                            
0007DA92                            
0007DA92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DA92                            
0007DA92                            
0007DA92                            sub_729B6:				; XREF: loc_71E7C
0007DA92 41F9 00C0 0011             		lea	($C00011).l,a0
0007DA98 10BC 009F                  		move.b	#$9F,(a0)
0007DA9C 10BC 00BF                  		move.b	#$BF,(a0)
0007DAA0 10BC 00DF                  		move.b	#$DF,(a0)
0007DAA4 10BC 00FF                  		move.b	#$FF,(a0)
0007DAA8 4E75                       		rts	
0007DAAA                            ; End of function sub_729B6
0007DAAA                            
0007DAAA                            ; ===========================================================================
0007DAAA 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007DABC 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007DACE 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007DAE2 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0007DAF6 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0007DB0A 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007DB1E 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0007DB32 0011 0000                  		dc.w $11, 0
0007DB36                            
0007DB36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DB36                            
0007DB36                            
0007DB36                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007DB36 0445 00E0                  		subi.w	#$E0,d5
0007DB3A E54D                       		lsl.w	#2,d5
0007DB3C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0007DB40                            ; End of function sub_72A5A
0007DB40                            
0007DB40                            ; ===========================================================================
0007DB40                            
0007DB40                            loc_72A64:
0007DB40 6000 0000                  		bra.w	loc_72ACC
0007DB44                            ; ===========================================================================
0007DB44 6000 0000                  		bra.w	loc_72AEC
0007DB48                            ; ===========================================================================
0007DB48 6000 0000                  		bra.w	loc_72AF2
0007DB4C                            ; ===========================================================================
0007DB4C 6000 0000                  		bra.w	loc_72AF8
0007DB50                            ; ===========================================================================
0007DB50 6000 0000                  		bra.w	loc_72B14
0007DB54                            ; ===========================================================================
0007DB54 6000 0000                  		bra.w	loc_72B9E
0007DB58                            ; ===========================================================================
0007DB58 6000 0000                  		bra.w	loc_72BA4
0007DB5C                            ; ===========================================================================
0007DB5C 6000 0000                  		bra.w	loc_72BAE
0007DB60                            ; ===========================================================================
0007DB60 6000 0000                  		bra.w	loc_72BB4
0007DB64                            ; ===========================================================================
0007DB64 6000 0000                  		bra.w	loc_72BBE
0007DB68                            ; ===========================================================================
0007DB68 6000 0000                  		bra.w	loc_72BC6
0007DB6C                            ; ===========================================================================
0007DB6C 6000 0000                  		bra.w	loc_72BD0
0007DB70                            ; ===========================================================================
0007DB70 6000 0000                  		bra.w	loc_72BE6
0007DB74                            ; ===========================================================================
0007DB74 6000 0000                  		bra.w	loc_72BEE
0007DB78                            ; ===========================================================================
0007DB78 6000 0000                  		bra.w	loc_72BF4
0007DB7C                            ; ===========================================================================
0007DB7C 6000 0000                  		bra.w	loc_72C26
0007DB80                            ; ===========================================================================
0007DB80 6000 0000                  		bra.w	loc_72D30
0007DB84                            ; ===========================================================================
0007DB84 6000 0000                  		bra.w	loc_72D52
0007DB88                            ; ===========================================================================
0007DB88 6000 0000                  		bra.w	loc_72D58
0007DB8C                            ; ===========================================================================
0007DB8C 6000 0000                  		bra.w	loc_72E06
0007DB90                            ; ===========================================================================
0007DB90 6000 0000                  		bra.w	loc_72E20
0007DB94                            ; ===========================================================================
0007DB94 6000 0000                  		bra.w	loc_72E26
0007DB98                            ; ===========================================================================
0007DB98 6000 0000                  		bra.w	loc_72E2C
0007DB9C                            ; ===========================================================================
0007DB9C 6000 0000                  		bra.w	loc_72E38
0007DBA0                            ; ===========================================================================
0007DBA0 6000 0000                  		bra.w	loc_72E52
0007DBA4                            ; ===========================================================================
0007DBA4 6000 0000                  		bra.w	loc_72E64
0007DBA8                            ; ===========================================================================
0007DBA8                            
0007DBA8                            loc_72ACC:				; XREF: loc_72A64
0007DBA8 121C                       		move.b	(a4)+,d1
0007DBAA 4A2D 0001                  		tst.b	1(a5)
0007DBAE 6B00                       		bmi.s	locret_72AEA
0007DBB0 102D 000A                  		move.b	$A(a5),d0
0007DBB4 0200 0037                  		andi.b	#$37,d0
0007DBB8 8200                       		or.b	d0,d1
0007DBBA 1B41 000A                  		move.b	d1,$A(a5)
0007DBBE 103C 00B4                  		move.b	#$B4,d0
0007DBC2 6000 FC2E                  		bra.w	loc_72716
0007DBC6                            ; ===========================================================================
0007DBC6                            
0007DBC6                            locret_72AEA:
0007DBC6 4E75                       		rts	
0007DBC8                            ; ===========================================================================
0007DBC8                            
0007DBC8                            loc_72AEC:				; XREF: loc_72A64
0007DBC8 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007DBCC 4E75                       		rts	
0007DBCE                            ; ===========================================================================
0007DBCE                            
0007DBCE                            loc_72AF2:				; XREF: loc_72A64
0007DBCE 1D5C 0007                  		move.b	(a4)+,7(a6)
0007DBD2 4E75                       		rts	
0007DBD4                            ; ===========================================================================
0007DBD4                            
0007DBD4                            loc_72AF8:				; XREF: loc_72A64
0007DBD4 7000                       		moveq	#0,d0
0007DBD6 102D 000D                  		move.b	$D(a5),d0
0007DBDA 2875 0000                  		movea.l	(a5,d0.w),a4
0007DBDE 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0007DBE6 544C                       		addq.w	#2,a4
0007DBE8 5800                       		addq.b	#4,d0
0007DBEA 1B40 000D                  		move.b	d0,$D(a5)
0007DBEE 4E75                       		rts	
0007DBF0                            ; ===========================================================================
0007DBF0                            
0007DBF0                            loc_72B14:				; XREF: loc_72A64
0007DBF0 204E                       		movea.l	a6,a0
0007DBF2 43EE 03A0                  		lea	$3A0(a6),a1
0007DBF6 303C 0087                  		move.w	#$87,d0
0007DBFA                            
0007DBFA                            loc_72B1E:
0007DBFA 20D9                       		move.l	(a1)+,(a0)+
0007DBFC 51C8 FFFC                  		dbf	d0,loc_72B1E
0007DC00                            
0007DC00 08EE 0002 0040             		bset	#2,$40(a6)
0007DC06 264D                       		movea.l	a5,a3
0007DC08 1C3C 0028                  		move.b	#$28,d6
0007DC0C 9C2E 0026                  		sub.b	$26(a6),d6
0007DC10 7E05                       		moveq	#5,d7
0007DC12 4BEE 0070                  		lea	$70(a6),a5
0007DC16                            
0007DC16                            loc_72B3A:
0007DC16 0815 0007                  		btst	#7,(a5)
0007DC1A 6700                       		beq.s	loc_72B5C
0007DC1C 08D5 0001                  		bset	#1,(a5)
0007DC20 DD2D 0009                  		add.b	d6,9(a5)
0007DC24 0815 0002                  		btst	#2,(a5)
0007DC28 6600                       		bne.s	loc_72B5C
0007DC2A 7000                       		moveq	#0,d0
0007DC2C 102D 000B                  		move.b	$B(a5),d0
0007DC30 226E 0018                  		movea.l	$18(a6),a1
0007DC34 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DC38                            
0007DC38                            loc_72B5C:
0007DC38 DAFC 0030                  		adda.w	#$30,a5
0007DC3C 51CF FFD8                  		dbf	d7,loc_72B3A
0007DC40                            
0007DC40 7E02                       		moveq	#2,d7
0007DC42                            
0007DC42                            loc_72B66:
0007DC42 0815 0007                  		btst	#7,(a5)
0007DC46 6700                       		beq.s	loc_72B78
0007DC48 08D5 0001                  		bset	#1,(a5)
0007DC4C 4EBA FE2E                  		jsr	sub_729A0(pc)
0007DC50 DD2D 0009                  		add.b	d6,9(a5)
0007DC54                            
0007DC54                            loc_72B78:
0007DC54 DAFC 0030                  		adda.w	#$30,a5
0007DC58 51CF FFE8                  		dbf	d7,loc_72B66
0007DC5C 2A4B                       		movea.l	a3,a5
0007DC5E 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007DC64 1D7C 0028 0026             		move.b	#$28,$26(a6)
0007DC6A 422E 0027                  		clr.b	$27(a6)
0007DC6E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007DC76 504F                       		addq.w	#8,sp
0007DC78 4E75                       		rts	
0007DC7A                            ; ===========================================================================
0007DC7A                            
0007DC7A                            loc_72B9E:				; XREF: loc_72A64
0007DC7A 1B5C 0002                  		move.b	(a4)+,2(a5)
0007DC7E 4E75                       		rts	
0007DC80                            ; ===========================================================================
0007DC80                            
0007DC80                            loc_72BA4:				; XREF: loc_72A64
0007DC80 101C                       		move.b	(a4)+,d0
0007DC82 D12D 0009                  		add.b	d0,9(a5)
0007DC86 6000 0000                  		bra.w	sub_72CB4
0007DC8A                            ; ===========================================================================
0007DC8A                            
0007DC8A                            loc_72BAE:				; XREF: loc_72A64
0007DC8A 08D5 0004                  		bset	#4,(a5)
0007DC8E 4E75                       		rts	
0007DC90                            ; ===========================================================================
0007DC90                            
0007DC90                            loc_72BB4:				; XREF: loc_72A64
0007DC90 1B54 0012                  		move.b	(a4),$12(a5)
0007DC94 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007DC98 4E75                       		rts	
0007DC9A                            ; ===========================================================================
0007DC9A                            
0007DC9A                            loc_72BBE:				; XREF: loc_72A64
0007DC9A 101C                       		move.b	(a4)+,d0
0007DC9C D12D 0008                  		add.b	d0,8(a5)
0007DCA0 4E75                       		rts	
0007DCA2                            ; ===========================================================================
0007DCA2                            
0007DCA2                            loc_72BC6:				; XREF: loc_72A64
0007DCA2 1D54 0002                  		move.b	(a4),2(a6)
0007DCA6 1D5C 0001                  		move.b	(a4)+,1(a6)
0007DCAA 4E75                       		rts	
0007DCAC                            ; ===========================================================================
0007DCAC                            
0007DCAC                            loc_72BD0:				; XREF: loc_72A64
0007DCAC 41EE 0040                  		lea	$40(a6),a0
0007DCB0 101C                       		move.b	(a4)+,d0
0007DCB2 7230                       		moveq	#$30,d1
0007DCB4 7409                       		moveq	#9,d2
0007DCB6                            
0007DCB6                            loc_72BDA:
0007DCB6 1140 0002                  		move.b	d0,2(a0)
0007DCBA D0C1                       		adda.w	d1,a0
0007DCBC 51CA FFF8                  		dbf	d2,loc_72BDA
0007DCC0                            
0007DCC0 4E75                       		rts	
0007DCC2                            ; ===========================================================================
0007DCC2                            
0007DCC2                            loc_72BE6:				; XREF: loc_72A64
0007DCC2 101C                       		move.b	(a4)+,d0
0007DCC4 D12D 0009                  		add.b	d0,9(a5)
0007DCC8 4E75                       		rts	
0007DCCA                            ; ===========================================================================
0007DCCA                            
0007DCCA                            loc_72BEE:				; XREF: loc_72A64
0007DCCA 422E 002C                  		clr.b	$2C(a6)
0007DCCE 4E75                       		rts	
0007DCD0                            ; ===========================================================================
0007DCD0                            
0007DCD0                            loc_72BF4:				; XREF: loc_72A64
0007DCD0 0895 0007                  		bclr	#7,(a5)
0007DCD4 0895 0004                  		bclr	#4,(a5)
0007DCD8 4EBA FB00                  		jsr	sub_726FE(pc)
0007DCDC 4A2E 0250                  		tst.b	$250(a6)
0007DCE0 6B00                       		bmi.s	loc_72C22
0007DCE2 264D                       		movea.l	a5,a3
0007DCE4 4BEE 0100                  		lea	$100(a6),a5
0007DCE8 226E 0018                  		movea.l	$18(a6),a1
0007DCEC 0895 0002                  		bclr	#2,(a5)
0007DCF0 08D5 0001                  		bset	#1,(a5)
0007DCF4 102D 000B                  		move.b	$B(a5),d0
0007DCF8 4EBA 0000                  		jsr	sub_72C4E(pc)
0007DCFC 2A4B                       		movea.l	a3,a5
0007DCFE                            
0007DCFE                            loc_72C22:
0007DCFE 504F                       		addq.w	#8,sp
0007DD00 4E75                       		rts	
0007DD02                            ; ===========================================================================
0007DD02                            
0007DD02                            loc_72C26:				; XREF: loc_72A64
0007DD02 7000                       		moveq	#0,d0
0007DD04 101C                       		move.b	(a4)+,d0
0007DD06 1B40 000B                  		move.b	d0,$B(a5)
0007DD0A 0815 0002                  		btst	#2,(a5)
0007DD0E 6600 0000                  		bne.w	locret_72CAA
0007DD12 226E 0018                  		movea.l	$18(a6),a1
0007DD16 4A2E 000E                  		tst.b	$E(a6)
0007DD1A 6700                       		beq.s	sub_72C4E
0007DD1C 226D 0020                  		movea.l	$20(a5),a1
0007DD20 4A2E 000E                  		tst.b	$E(a6)
0007DD24 6B00                       		bmi.s	sub_72C4E
0007DD26 226E 0020                  		movea.l	$20(a6),a1
0007DD2A                            
0007DD2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DD2A                            
0007DD2A                            
0007DD2A                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0007DD2A 5340                       		subq.w	#1,d0
0007DD2C 6B00                       		bmi.s	loc_72C5C
0007DD2E 323C 0019                  		move.w	#$19,d1
0007DD32                            
0007DD32                            loc_72C56:
0007DD32 D2C1                       		adda.w	d1,a1
0007DD34 51C8 FFFC                  		dbf	d0,loc_72C56
0007DD38                            
0007DD38                            loc_72C5C:
0007DD38 1219                       		move.b	(a1)+,d1
0007DD3A 1B41 001F                  		move.b	d1,$1F(a5)
0007DD3E 1801                       		move.b	d1,d4
0007DD40 103C 00B0                  		move.b	#$B0,d0
0007DD44 4EBA FAB8                  		jsr	sub_72722(pc)
0007DD48 45FA 0000                  		lea	byte_72D18(pc),a2
0007DD4C 7613                       		moveq	#$13,d3
0007DD4E                            
0007DD4E                            loc_72C72:
0007DD4E 101A                       		move.b	(a2)+,d0
0007DD50 1219                       		move.b	(a1)+,d1
0007DD52 4EBA FAAA                  		jsr	sub_72722(pc)
0007DD56 51CB FFF6                  		dbf	d3,loc_72C72
0007DD5A 7A03                       		moveq	#3,d5
0007DD5C 0244 0007                  		andi.w	#7,d4
0007DD60 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0007DD64 162D 0009                  		move.b	9(a5),d3
0007DD68                            
0007DD68                            loc_72C8C:
0007DD68 101A                       		move.b	(a2)+,d0
0007DD6A 1219                       		move.b	(a1)+,d1
0007DD6C E20C                       		lsr.b	#1,d4
0007DD6E 6400                       		bcc.s	loc_72C96
0007DD70 D203                       		add.b	d3,d1
0007DD72                            
0007DD72                            loc_72C96:
0007DD72 4EBA FA8A                  		jsr	sub_72722(pc)
0007DD76 51CD FFF0                  		dbf	d5,loc_72C8C
0007DD7A 103C 00B4                  		move.b	#$B4,d0
0007DD7E 122D 000A                  		move.b	$A(a5),d1
0007DD82 4EBA FA7A                  		jsr	sub_72722(pc)
0007DD86                            
0007DD86                            locret_72CAA:
0007DD86 4E75                       		rts	
0007DD88                            ; End of function sub_72C4E
0007DD88                            
0007DD88                            ; ===========================================================================
0007DD88 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007DD90                            
0007DD90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007DD90                            
0007DD90                            
0007DD90                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007DD90 0815 0002                  		btst	#2,(a5)
0007DD94 6600                       		bne.s	locret_72D16
0007DD96 7000                       		moveq	#0,d0
0007DD98 102D 000B                  		move.b	$B(a5),d0
0007DD9C 226E 0018                  		movea.l	$18(a6),a1
0007DDA0 4A2E 000E                  		tst.b	$E(a6)
0007DDA4 6700                       		beq.s	loc_72CD8
0007DDA6 226E 0020                  		movea.l	$20(a6),a1
0007DDAA 4A2E 000E                  		tst.b	$E(a6)
0007DDAE 6B00                       		bmi.s	loc_72CD8
0007DDB0 226E 0020                  		movea.l	$20(a6),a1
0007DDB4                            
0007DDB4                            loc_72CD8:
0007DDB4 5340                       		subq.w	#1,d0
0007DDB6 6B00                       		bmi.s	loc_72CE6
0007DDB8 323C 0019                  		move.w	#$19,d1
0007DDBC                            
0007DDBC                            loc_72CE0:
0007DDBC D2C1                       		adda.w	d1,a1
0007DDBE 51C8 FFFC                  		dbf	d0,loc_72CE0
0007DDC2                            
0007DDC2                            loc_72CE6:
0007DDC2 D2FC 0015                  		adda.w	#$15,a1
0007DDC6 45FA 0000                  		lea	byte_72D2C(pc),a2
0007DDCA 102D 001F                  		move.b	$1F(a5),d0
0007DDCE 0240 0007                  		andi.w	#7,d0
0007DDD2 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0007DDD6 162D 0009                  		move.b	9(a5),d3
0007DDDA 6B00                       		bmi.s	locret_72D16
0007DDDC 7A03                       		moveq	#3,d5
0007DDDE                            
0007DDDE                            loc_72D02:
0007DDDE 101A                       		move.b	(a2)+,d0
0007DDE0 1219                       		move.b	(a1)+,d1
0007DDE2 E20C                       		lsr.b	#1,d4
0007DDE4 6400                       		bcc.s	loc_72D12
0007DDE6 D203                       		add.b	d3,d1
0007DDE8 6500                       		bcs.s	loc_72D12
0007DDEA 4EBA FA12                  		jsr	sub_72722(pc)
0007DDEE                            
0007DDEE                            loc_72D12:
0007DDEE 51CD FFEE                  		dbf	d5,loc_72D02
0007DDF2                            
0007DDF2                            locret_72D16:
0007DDF2 4E75                       		rts	
0007DDF4                            ; End of function sub_72CB4
0007DDF4                            
0007DDF4                            ; ===========================================================================
0007DDF4 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007DDFE 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0007DE08 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007DE0C                            ; ===========================================================================
0007DE0C                            
0007DE0C                            loc_72D30:				; XREF: loc_72A64
0007DE0C 08D5 0003                  		bset	#3,(a5)
0007DE10 2B4C 0014                  		move.l	a4,$14(a5)
0007DE14 1B5C 0018                  		move.b	(a4)+,$18(a5)
0007DE18 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007DE1C 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007DE20 101C                       		move.b	(a4)+,d0
0007DE22 E208                       		lsr.b	#1,d0
0007DE24 1B40 001B                  		move.b	d0,$1B(a5)
0007DE28 426D 001C                  		clr.w	$1C(a5)
0007DE2C 4E75                       		rts	
0007DE2E                            ; ===========================================================================
0007DE2E                            
0007DE2E                            loc_72D52:				; XREF: loc_72A64
0007DE2E 08D5 0003                  		bset	#3,(a5)
0007DE32 4E75                       		rts	
0007DE34                            ; ===========================================================================
0007DE34                            
0007DE34                            loc_72D58:				; XREF: loc_72A64
0007DE34 0895 0007                  		bclr	#7,(a5)
0007DE38 0895 0004                  		bclr	#4,(a5)
0007DE3C 4A2D 0001                  		tst.b	1(a5)
0007DE40 6B00                       		bmi.s	loc_72D74
0007DE42 4A2E 0008                  		tst.b	8(a6)
0007DE46 6B00 0000                  		bmi.w	loc_72E02
0007DE4A 4EBA F98E                  		jsr	sub_726FE(pc)
0007DE4E 6000                       		bra.s	loc_72D78
0007DE50                            ; ===========================================================================
0007DE50                            
0007DE50                            loc_72D74:
0007DE50 4EBA FC2A                  		jsr	sub_729A0(pc)
0007DE54                            
0007DE54                            loc_72D78:
0007DE54 4A2E 000E                  		tst.b	$E(a6)
0007DE58 6A00 0000                  		bpl.w	loc_72E02
0007DE5C 4216                       		clr.b	0(a6)
0007DE5E 7000                       		moveq	#0,d0
0007DE60 102D 0001                  		move.b	1(a5),d0
0007DE64 6B00                       		bmi.s	loc_72DCC
0007DE66 41FA F546                  		lea	dword_722CC(pc),a0
0007DE6A 264D                       		movea.l	a5,a3
0007DE6C 0C00 0004                  		cmpi.b	#4,d0
0007DE70 6600                       		bne.s	loc_72DA8
0007DE72 4A2E 0340                  		tst.b	$340(a6)
0007DE76 6A00                       		bpl.s	loc_72DA8
0007DE78 4BEE 0340                  		lea	$340(a6),a5
0007DE7C 226E 0020                  		movea.l	$20(a6),a1
0007DE80 6000                       		bra.s	loc_72DB8
0007DE82                            ; ===========================================================================
0007DE82                            
0007DE82                            loc_72DA8:
0007DE82 5500                       		subq.b	#2,d0
0007DE84 E508                       		lsl.b	#2,d0
0007DE86 2A70 0000                  		movea.l	(a0,d0.w),a5
0007DE8A 4A15                       		tst.b	(a5)
0007DE8C 6A00                       		bpl.s	loc_72DC8
0007DE8E 226E 0018                  		movea.l	$18(a6),a1
0007DE92                            
0007DE92                            loc_72DB8:
0007DE92 0895 0002                  		bclr	#2,(a5)
0007DE96 08D5 0001                  		bset	#1,(a5)
0007DE9A 102D 000B                  		move.b	$B(a5),d0
0007DE9E 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007DEA2                            
0007DEA2                            loc_72DC8:
0007DEA2 2A4B                       		movea.l	a3,a5
0007DEA4 6000                       		bra.s	loc_72E02
0007DEA6                            ; ===========================================================================
0007DEA6                            
0007DEA6                            loc_72DCC:
0007DEA6 41EE 0370                  		lea	$370(a6),a0
0007DEAA 4A10                       		tst.b	(a0)
0007DEAC 6A00                       		bpl.s	loc_72DE0
0007DEAE 0C00 00E0                  		cmpi.b	#$E0,d0
0007DEB2 6700                       		beq.s	loc_72DEA
0007DEB4 0C00 00C0                  		cmpi.b	#$C0,d0
0007DEB8 6700                       		beq.s	loc_72DEA
0007DEBA                            
0007DEBA                            loc_72DE0:
0007DEBA 41FA F4F2                  		lea	dword_722CC(pc),a0
0007DEBE E608                       		lsr.b	#3,d0
0007DEC0 2070 0000                  		movea.l	(a0,d0.w),a0
0007DEC4                            
0007DEC4                            loc_72DEA:
0007DEC4 0890 0002                  		bclr	#2,(a0)
0007DEC8 08D0 0001                  		bset	#1,(a0)
0007DECC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007DED2 6600                       		bne.s	loc_72E02
0007DED4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007DEDC                            
0007DEDC                            loc_72E02:
0007DEDC 504F                       		addq.w	#8,sp
0007DEDE 4E75                       		rts	
0007DEE0                            ; ===========================================================================
0007DEE0                            
0007DEE0                            loc_72E06:				; XREF: loc_72A64
0007DEE0 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0007DEE6 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0007DEEA 0815 0002                  		btst	#2,(a5)
0007DEEE 6600                       		bne.s	locret_72E1E
0007DEF0 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0007DEF8                            
0007DEF8                            locret_72E1E:
0007DEF8 4E75                       		rts	
0007DEFA                            ; ===========================================================================
0007DEFA                            
0007DEFA                            loc_72E20:				; XREF: loc_72A64
0007DEFA 0895 0003                  		bclr	#3,(a5)
0007DEFE 4E75                       		rts	
0007DF00                            ; ===========================================================================
0007DF00                            
0007DF00                            loc_72E26:				; XREF: loc_72A64
0007DF00 1B5C 000B                  		move.b	(a4)+,$B(a5)
0007DF04 4E75                       		rts	
0007DF06                            ; ===========================================================================
0007DF06                            
0007DF06                            loc_72E2C:				; XREF: loc_72A64
0007DF06 101C                       		move.b	(a4)+,d0
0007DF08 E148                       		lsl.w	#8,d0
0007DF0A 101C                       		move.b	(a4)+,d0
0007DF0C D8C0                       		adda.w	d0,a4
0007DF0E 534C                       		subq.w	#1,a4
0007DF10 4E75                       		rts	
0007DF12                            ; ===========================================================================
0007DF12                            
0007DF12                            loc_72E38:				; XREF: loc_72A64
0007DF12 7000                       		moveq	#0,d0
0007DF14 101C                       		move.b	(a4)+,d0
0007DF16 121C                       		move.b	(a4)+,d1
0007DF18 4A35 0024                  		tst.b	$24(a5,d0.w)
0007DF1C 6600                       		bne.s	loc_72E48
0007DF1E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0007DF22                            
0007DF22                            loc_72E48:
0007DF22 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0007DF26 66DE                       		bne.s	loc_72E2C
0007DF28 544C                       		addq.w	#2,a4
0007DF2A 4E75                       		rts	
0007DF2C                            ; ===========================================================================
0007DF2C                            
0007DF2C                            loc_72E52:				; XREF: loc_72A64
0007DF2C 7000                       		moveq	#0,d0
0007DF2E 102D 000D                  		move.b	$D(a5),d0
0007DF32 5900                       		subq.b	#4,d0
0007DF34 2B8C 0000                  		move.l	a4,(a5,d0.w)
0007DF38 1B40 000D                  		move.b	d0,$D(a5)
0007DF3C 60C8                       		bra.s	loc_72E2C
0007DF3E                            ; ===========================================================================
0007DF3E                            
0007DF3E                            loc_72E64:				; XREF: loc_72A64
0007DF3E 103C 0088                  		move.b	#$88,d0
0007DF42 123C 000F                  		move.b	#$F,d1
0007DF46 4EBA F8C2                  		jsr	sub_7272E(pc)
0007DF4A 103C 008C                  		move.b	#$8C,d0
0007DF4E 123C 000F                  		move.b	#$F,d1
0007DF52 6000 F8B6                  		bra.w	sub_7272E
0007DF56                            ; ===========================================================================
0007DF56                            Kos_Z80:	incbin	sound\z80_1.bin
0007E006 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0007E008 21                         		dc.b $21
0007E009 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007E00B                            		incbin	sound\z80_2.bin
0007F6B6                            		even
0007F6B6                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
00085EB6                            		even
00085EB6                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008F754                            		even
0008F754                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00093374 00                         		even
00093374                            Music84:	include	sound\music84.asm ; Star Light Act 1
00093374                            music84_Header:
00093374 =00000001                  smpsHeaderStartSong = 1
00093374 0000                       	smpsHeaderVoice     music84_Voices
00093376 0603                       	smpsHeaderChan      $06, $03
00093378 0205                       	smpsHeaderTempo     $02, $05
0009337A                            
0009337E 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00093382 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00093386 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0009338A 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0009338E 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00093392 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00093398 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0009339E 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000933A4                            
000933A4                            ; FM1 Data
000933A4                            music84_FM1:
000933A4 E0C0                       	smpsPan             panCenter, $00
000933A8 E107                       	smpsAlterNote       $07
000933AA 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000933AE E106                       	smpsAlterNote       $06
000933B0 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000933B4 E10B                       	smpsAlterNote       $0B
000933B6 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000933BC E10C                       	smpsAlterNote       $0C
000933BE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000933C1 E10B                       	smpsAlterNote       $0B
000933C3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000933C6 E109                       	smpsAlterNote       $09
000933C8 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000933CD E108                       	smpsAlterNote       $08
000933CF 8001                       	dc.b	nRst, $01
000933D1 E10B                       	smpsAlterNote       $0B
000933D3 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000933D9 E107                       	smpsAlterNote       $07
000933DB 9B03                       	dc.b	nD2, $03
000933DD                            
000933DD                            music84_Jump04:
000933DD E107                       	smpsAlterNote       $07
000933DF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000933E3 E10B                       	smpsAlterNote       $0B
000933E5 A202 8001                  	dc.b	nA2, $02, nRst, $01
000933E9 E107                       	smpsAlterNote       $07
000933EB 9B03                       	dc.b	nD2, $03
000933ED E11A                       	smpsAlterNote       $1A
000933EF A301                       	dc.b	nBb2, $01
000933F1 E1F2                       	smpsAlterNote       $F2
000933F3 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000933F6 E1FF                       	smpsAlterNote       $FF
000933F8 E701                       	dc.b	smpsNoAttack, $01
000933FA E111                       	smpsAlterNote       $11
000933FC E701                       	dc.b	smpsNoAttack, $01
000933FE E106                       	smpsAlterNote       $06
00093400 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093403 E107                       	smpsAlterNote       $07
00093405 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093409 E108                       	smpsAlterNote       $08
0009340B 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00093413 E109                       	smpsAlterNote       $09
00093415 A003                       	dc.b	nG2, $03
00093417 E10C                       	smpsAlterNote       $0C
00093419 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009341D E1FD                       	smpsAlterNote       $FD
0009341F A401                       	dc.b	nB2, $01
00093421 E109                       	smpsAlterNote       $09
00093423 E701                       	dc.b	smpsNoAttack, $01
00093425 E106                       	smpsAlterNote       $06
00093427 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0009342A E109                       	smpsAlterNote       $09
0009342C A007                       	dc.b	nG2, $07
0009342E E108                       	smpsAlterNote       $08
00093430 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093434 E107                       	smpsAlterNote       $07
00093436 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0009343C E10B                       	smpsAlterNote       $0B
0009343E A203 8001                  	dc.b	nA2, $03, nRst, $01
00093442 E107                       	smpsAlterNote       $07
00093444 9B03                       	dc.b	nD2, $03
00093446 E11A                       	smpsAlterNote       $1A
00093448 A301                       	dc.b	nBb2, $01
0009344A E1F9                       	smpsAlterNote       $F9
0009344C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009344F E107                       	smpsAlterNote       $07
00093451 E701                       	dc.b	smpsNoAttack, $01
00093453 E111                       	smpsAlterNote       $11
00093455 E701                       	dc.b	smpsNoAttack, $01
00093457 E106                       	smpsAlterNote       $06
00093459 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0009345E E107                       	smpsAlterNote       $07
00093460 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093468 E1EC                       	smpsAlterNote       $EC
0009346A A101                       	dc.b	nAb2, $01
0009346C E108                       	smpsAlterNote       $08
0009346E E701                       	dc.b	smpsNoAttack, $01
00093470 E116                       	smpsAlterNote       $16
00093472 E701                       	dc.b	smpsNoAttack, $01
00093474 E1F5                       	smpsAlterNote       $F5
00093476 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093479 E10B                       	smpsAlterNote       $0B
0009347B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0009347F E107                       	smpsAlterNote       $07
00093481 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093487 E109                       	smpsAlterNote       $09
00093489 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0009348D E10B                       	smpsAlterNote       $0B
0009348F 9603                       	dc.b	nA1, $03
00093491 E107                       	smpsAlterNote       $07
00093493 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093499 E10B                       	smpsAlterNote       $0B
0009349B A203 8001                  	dc.b	nA2, $03, nRst, $01
0009349F E107                       	smpsAlterNote       $07
000934A1 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000934A5 E11A                       	smpsAlterNote       $1A
000934A7 A301                       	dc.b	nBb2, $01
000934A9 E1F9                       	smpsAlterNote       $F9
000934AB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000934AE E107                       	smpsAlterNote       $07
000934B0 E701                       	dc.b	smpsNoAttack, $01
000934B2 E1FB                       	smpsAlterNote       $FB
000934B4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000934B7 E106                       	smpsAlterNote       $06
000934B9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000934BD E107                       	smpsAlterNote       $07
000934BF 9B03                       	dc.b	nD2, $03
000934C1 E108                       	smpsAlterNote       $08
000934C3 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000934C9 E109                       	smpsAlterNote       $09
000934CB A002 8001                  	dc.b	nG2, $02, nRst, $01
000934CF E10C                       	smpsAlterNote       $0C
000934D1 A303                       	dc.b	nBb2, $03
000934D3 E1F0                       	smpsAlterNote       $F0
000934D5 A401                       	dc.b	nB2, $01
000934D7 E1FD                       	smpsAlterNote       $FD
000934D9 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000934DE E106                       	smpsAlterNote       $06
000934E0 8001                       	dc.b	nRst, $01
000934E2 E109                       	smpsAlterNote       $09
000934E4 A006 8001                  	dc.b	nG2, $06, nRst, $01
000934E8 E108                       	smpsAlterNote       $08
000934EA 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000934EE E107                       	smpsAlterNote       $07
000934F0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000934F6 E10B                       	smpsAlterNote       $0B
000934F8 A203                       	dc.b	nA2, $03
000934FA E107                       	smpsAlterNote       $07
000934FC 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093500 E1F2                       	smpsAlterNote       $F2
00093502 A401                       	dc.b	nB2, $01
00093504 E1FF                       	smpsAlterNote       $FF
00093506 E701                       	dc.b	smpsNoAttack, $01
00093508 E107                       	smpsAlterNote       $07
0009350A E701                       	dc.b	smpsNoAttack, $01
0009350C E1FB                       	smpsAlterNote       $FB
0009350E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093511 E106                       	smpsAlterNote       $06
00093513 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093517 E107                       	smpsAlterNote       $07
00093519 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00093523 E117                       	smpsAlterNote       $17
00093525 A001                       	dc.b	nG2, $01
00093527 E1FA                       	smpsAlterNote       $FA
00093529 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009352C E108                       	smpsAlterNote       $08
0009352E E701                       	dc.b	smpsNoAttack, $01
00093530 E1E7                       	smpsAlterNote       $E7
00093532 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093535 E103                       	smpsAlterNote       $03
00093537 E701                       	dc.b	smpsNoAttack, $01
00093539 E10B                       	smpsAlterNote       $0B
0009353B E702                       	dc.b	smpsNoAttack, $02
0009353D E107                       	smpsAlterNote       $07
0009353F 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00093547 E106                       	smpsAlterNote       $06
00093549 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0009354F E10C                       	smpsAlterNote       $0C
00093551 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00093557 E109                       	smpsAlterNote       $09
00093559 9E03                       	dc.b	nF2, $03
0009355B E10C                       	smpsAlterNote       $0C
0009355D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093561 E1EA                       	smpsAlterNote       $EA
00093563 A201                       	dc.b	nA2, $01
00093565 E106                       	smpsAlterNote       $06
00093567 E701                       	dc.b	smpsNoAttack, $01
00093569 E1E2                       	smpsAlterNote       $E2
0009356B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009356E E1F0                       	smpsAlterNote       $F0
00093570 E701                       	dc.b	smpsNoAttack, $01
00093572 E10C                       	smpsAlterNote       $0C
00093574 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093580 E116                       	smpsAlterNote       $16
00093582 9C01                       	dc.b	nEb2, $01
00093584 E105                       	smpsAlterNote       $05
00093586 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093589 E1F1                       	smpsAlterNote       $F1
0009358B E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0009358E E1FF                       	smpsAlterNote       $FF
00093590 E701                       	dc.b	smpsNoAttack, $01
00093592 E109                       	smpsAlterNote       $09
00093594 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093598 E10C                       	smpsAlterNote       $0C
0009359A 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000935A6 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000935AC E109                       	smpsAlterNote       $09
000935AE 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000935B2 E10C                       	smpsAlterNote       $0C
000935B4 9703                       	dc.b	nBb1, $03
000935B6 E11A                       	smpsAlterNote       $1A
000935B8 A101                       	dc.b	nAb2, $01
000935BA E1FB                       	smpsAlterNote       $FB
000935BC E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000935BF E10A                       	smpsAlterNote       $0A
000935C1 E701                       	dc.b	smpsNoAttack, $01
000935C3 E1E8                       	smpsAlterNote       $E8
000935C5 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000935C8 E106                       	smpsAlterNote       $06
000935CA E701                       	dc.b	smpsNoAttack, $01
000935CC E10C                       	smpsAlterNote       $0C
000935CE E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000935DA E1F9                       	smpsAlterNote       $F9
000935DC 9D01                       	dc.b	nE2, $01
000935DE E108                       	smpsAlterNote       $08
000935E0 E701                       	dc.b	smpsNoAttack, $01
000935E2 E1F6                       	smpsAlterNote       $F6
000935E4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000935E7 E109                       	smpsAlterNote       $09
000935E9 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000935ED E10C                       	smpsAlterNote       $0C
000935EF 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000935FB E108                       	smpsAlterNote       $08
000935FD 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093603 E106                       	smpsAlterNote       $06
00093605 A403 8001                  	dc.b	nB2, $03, nRst, $01
00093609 E108                       	smpsAlterNote       $08
0009360B 9D03                       	dc.b	nE2, $03
0009360D E1EB                       	smpsAlterNote       $EB
0009360F A801                       	dc.b	nEb3, $01
00093611 E109                       	smpsAlterNote       $09
00093613 E701                       	dc.b	smpsNoAttack, $01
00093615 E1FA                       	smpsAlterNote       $FA
00093617 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0009361A E108                       	smpsAlterNote       $08
0009361C E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00093628 E1E9                       	smpsAlterNote       $E9
0009362A A301                       	dc.b	nBb2, $01
0009362C E107                       	smpsAlterNote       $07
0009362E E701                       	dc.b	smpsNoAttack, $01
00093630 E1F0                       	smpsAlterNote       $F0
00093632 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093635 E1F7                       	smpsAlterNote       $F7
00093637 E701                       	dc.b	smpsNoAttack, $01
00093639 E107                       	smpsAlterNote       $07
0009363B E701                       	dc.b	smpsNoAttack, $01
0009363D E106                       	smpsAlterNote       $06
0009363F E701                       	dc.b	smpsNoAttack, $01
00093641 E108                       	smpsAlterNote       $08
00093643 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00093649 E106                       	smpsAlterNote       $06
0009364B A403 8001                  	dc.b	nB2, $03, nRst, $01
0009364F E108                       	smpsAlterNote       $08
00093651 9D03                       	dc.b	nE2, $03
00093653 E10B                       	smpsAlterNote       $0B
00093655 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0009365D E108                       	smpsAlterNote       $08
0009365F 9D03                       	dc.b	nE2, $03
00093661 E10B                       	smpsAlterNote       $0B
00093663 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093667 E113                       	smpsAlterNote       $13
00093669 A001                       	dc.b	nG2, $01
0009366B E118                       	smpsAlterNote       $18
0009366D E701                       	dc.b	smpsNoAttack, $01
0009366F E1E9                       	smpsAlterNote       $E9
00093671 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093674 E1F3                       	smpsAlterNote       $F3
00093676 E701                       	dc.b	smpsNoAttack, $01
00093678 E1FD                       	smpsAlterNote       $FD
0009367A E701                       	dc.b	smpsNoAttack, $01
0009367C E102                       	smpsAlterNote       $02
0009367E E701                       	dc.b	smpsNoAttack, $01
00093680 E107                       	smpsAlterNote       $07
00093682 8001                       	dc.b	nRst, $01
00093684 E10B                       	smpsAlterNote       $0B
00093686 9603                       	dc.b	nA1, $03
00093688 E10C                       	smpsAlterNote       $0C
0009368A 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00093690 E10B                       	smpsAlterNote       $0B
00093692 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0009369E 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000936A4 E107                       	smpsAlterNote       $07
000936A6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000936AC E10B                       	smpsAlterNote       $0B
000936AE A203                       	dc.b	nA2, $03
000936B0 E107                       	smpsAlterNote       $07
000936B2 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000936B6 E1F2                       	smpsAlterNote       $F2
000936B8 A401                       	dc.b	nB2, $01
000936BA E1FF                       	smpsAlterNote       $FF
000936BC E701                       	dc.b	smpsNoAttack, $01
000936BE E107                       	smpsAlterNote       $07
000936C0 E701                       	dc.b	smpsNoAttack, $01
000936C2 E1FB                       	smpsAlterNote       $FB
000936C4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000936C7 E106                       	smpsAlterNote       $06
000936C9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000936CD E107                       	smpsAlterNote       $07
000936CF 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000936D3 E108                       	smpsAlterNote       $08
000936D5 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000936DB E109                       	smpsAlterNote       $09
000936DD A003 8001                  	dc.b	nG2, $03, nRst, $01
000936E1 E10C                       	smpsAlterNote       $0C
000936E3 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000936E7 E1F0                       	smpsAlterNote       $F0
000936E9 A401                       	dc.b	nB2, $01
000936EB E109                       	smpsAlterNote       $09
000936ED E701                       	dc.b	smpsNoAttack, $01
000936EF E106                       	smpsAlterNote       $06
000936F1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000936F4 E109                       	smpsAlterNote       $09
000936F6 A007                       	dc.b	nG2, $07
000936F8 E108                       	smpsAlterNote       $08
000936FA 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000936FE E107                       	smpsAlterNote       $07
00093700 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093706 E10B                       	smpsAlterNote       $0B
00093708 A202 8001                  	dc.b	nA2, $02, nRst, $01
0009370C E107                       	smpsAlterNote       $07
0009370E 9B03                       	dc.b	nD2, $03
00093710 E11A                       	smpsAlterNote       $1A
00093712 A301                       	dc.b	nBb2, $01
00093714 E1F2                       	smpsAlterNote       $F2
00093716 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093719 E1FF                       	smpsAlterNote       $FF
0009371B E701                       	dc.b	smpsNoAttack, $01
0009371D E111                       	smpsAlterNote       $11
0009371F E701                       	dc.b	smpsNoAttack, $01
00093721 E106                       	smpsAlterNote       $06
00093723 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093726 E107                       	smpsAlterNote       $07
00093728 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093734 E117                       	smpsAlterNote       $17
00093736 A001                       	dc.b	nG2, $01
00093738 E1FA                       	smpsAlterNote       $FA
0009373A E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009373D E116                       	smpsAlterNote       $16
0009373F E701                       	dc.b	smpsNoAttack, $01
00093741 E1F5                       	smpsAlterNote       $F5
00093743 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093746 E103                       	smpsAlterNote       $03
00093748 E701                       	dc.b	smpsNoAttack, $01
0009374A E10B                       	smpsAlterNote       $0B
0009374C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093750 E107                       	smpsAlterNote       $07
00093752 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093758 E109                       	smpsAlterNote       $09
0009375A 9E03                       	dc.b	nF2, $03
0009375C E10B                       	smpsAlterNote       $0B
0009375E 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093762 E107                       	smpsAlterNote       $07
00093764 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0009376A E10B                       	smpsAlterNote       $0B
0009376C A203 8001                  	dc.b	nA2, $03, nRst, $01
00093770 E107                       	smpsAlterNote       $07
00093772 9B03                       	dc.b	nD2, $03
00093774 E11A                       	smpsAlterNote       $1A
00093776 A301                       	dc.b	nBb2, $01
00093778 E1F9                       	smpsAlterNote       $F9
0009377A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0009377D E107                       	smpsAlterNote       $07
0009377F E701                       	dc.b	smpsNoAttack, $01
00093781 E111                       	smpsAlterNote       $11
00093783 E701                       	dc.b	smpsNoAttack, $01
00093785 E106                       	smpsAlterNote       $06
00093787 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0009378C E107                       	smpsAlterNote       $07
0009378E 9B03                       	dc.b	nD2, $03
00093790 E108                       	smpsAlterNote       $08
00093792 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093798 E109                       	smpsAlterNote       $09
0009379A A003                       	dc.b	nG2, $03
0009379C E10C                       	smpsAlterNote       $0C
0009379E A303 8001                  	dc.b	nBb2, $03, nRst, $01
000937A2 E1FD                       	smpsAlterNote       $FD
000937A4 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000937A9 E106                       	smpsAlterNote       $06
000937AB 8001                       	dc.b	nRst, $01
000937AD E109                       	smpsAlterNote       $09
000937AF A006 8001                  	dc.b	nG2, $06, nRst, $01
000937B3 E108                       	smpsAlterNote       $08
000937B5 9C03                       	dc.b	nEb2, $03
000937B7 E107                       	smpsAlterNote       $07
000937B9 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000937BF E10B                       	smpsAlterNote       $0B
000937C1 A203 8001                  	dc.b	nA2, $03, nRst, $01
000937C5 E107                       	smpsAlterNote       $07
000937C7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000937CB E11A                       	smpsAlterNote       $1A
000937CD A301                       	dc.b	nBb2, $01
000937CF E1F9                       	smpsAlterNote       $F9
000937D1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000937D4 E107                       	smpsAlterNote       $07
000937D6 E701                       	dc.b	smpsNoAttack, $01
000937D8 E1FB                       	smpsAlterNote       $FB
000937DA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000937DD E106                       	smpsAlterNote       $06
000937DF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000937E3 E107                       	smpsAlterNote       $07
000937E5 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000937ED E1EC                       	smpsAlterNote       $EC
000937EF A101                       	dc.b	nAb2, $01
000937F1 E108                       	smpsAlterNote       $08
000937F3 E701                       	dc.b	smpsNoAttack, $01
000937F5 E1E7                       	smpsAlterNote       $E7
000937F7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000937FA E1F5                       	smpsAlterNote       $F5
000937FC E701                       	dc.b	smpsNoAttack, $01
000937FE E10B                       	smpsAlterNote       $0B
00093800 E702                       	dc.b	smpsNoAttack, $02
00093802 E107                       	smpsAlterNote       $07
00093804 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0009380A E106                       	smpsAlterNote       $06
0009380C 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093812 E10C                       	smpsAlterNote       $0C
00093814 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0009381C E109                       	smpsAlterNote       $09
0009381E 9E03                       	dc.b	nF2, $03
00093820 E10C                       	smpsAlterNote       $0C
00093822 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093826 E1EA                       	smpsAlterNote       $EA
00093828 A201                       	dc.b	nA2, $01
0009382A E106                       	smpsAlterNote       $06
0009382C E701                       	dc.b	smpsNoAttack, $01
0009382E E114                       	smpsAlterNote       $14
00093830 E701                       	dc.b	smpsNoAttack, $01
00093832 E1F0                       	smpsAlterNote       $F0
00093834 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093837 E10C                       	smpsAlterNote       $0C
00093839 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093845 9703                       	dc.b	nBb1, $03
00093847 E116                       	smpsAlterNote       $16
00093849 9C01                       	dc.b	nEb2, $01
0009384B E105                       	smpsAlterNote       $05
0009384D E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093850 E113                       	smpsAlterNote       $13
00093852 E701                       	dc.b	smpsNoAttack, $01
00093854 E1FF                       	smpsAlterNote       $FF
00093856 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093859 E109                       	smpsAlterNote       $09
0009385B E703                       	dc.b	smpsNoAttack, $03
0009385D E10C                       	smpsAlterNote       $0C
0009385F 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0009386B 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093873 E109                       	smpsAlterNote       $09
00093875 9E03                       	dc.b	nF2, $03
00093877 E10C                       	smpsAlterNote       $0C
00093879 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0009387D E1EC                       	smpsAlterNote       $EC
0009387F A201                       	dc.b	nA2, $01
00093881 E10A                       	smpsAlterNote       $0A
00093883 E701                       	dc.b	smpsNoAttack, $01
00093885 E1E8                       	smpsAlterNote       $E8
00093887 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0009388A E1F7                       	smpsAlterNote       $F7
0009388C E701                       	dc.b	smpsNoAttack, $01
0009388E E10C                       	smpsAlterNote       $0C
00093890 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0009389C E1EA                       	smpsAlterNote       $EA
0009389E 9D01                       	dc.b	nE2, $01
000938A0 E108                       	smpsAlterNote       $08
000938A2 E701                       	dc.b	smpsNoAttack, $01
000938A4 E1F6                       	smpsAlterNote       $F6
000938A6 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000938A9 E105                       	smpsAlterNote       $05
000938AB E701                       	dc.b	smpsNoAttack, $01
000938AD E109                       	smpsAlterNote       $09
000938AF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000938B3 E10C                       	smpsAlterNote       $0C
000938B5 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000938C1 E108                       	smpsAlterNote       $08
000938C3 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000938C9 E106                       	smpsAlterNote       $06
000938CB A403 8001                  	dc.b	nB2, $03, nRst, $01
000938CF E108                       	smpsAlterNote       $08
000938D1 9D03                       	dc.b	nE2, $03
000938D3 E1EB                       	smpsAlterNote       $EB
000938D5 A801                       	dc.b	nEb3, $01
000938D7 E109                       	smpsAlterNote       $09
000938D9 E701                       	dc.b	smpsNoAttack, $01
000938DB E1EB                       	smpsAlterNote       $EB
000938DD E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000938E0 E108                       	smpsAlterNote       $08
000938E2 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000938EE E1E9                       	smpsAlterNote       $E9
000938F0 A301                       	dc.b	nBb2, $01
000938F2 E1F8                       	smpsAlterNote       $F8
000938F4 E701                       	dc.b	smpsNoAttack, $01
000938F6 E116                       	smpsAlterNote       $16
000938F8 E701                       	dc.b	smpsNoAttack, $01
000938FA E1F7                       	smpsAlterNote       $F7
000938FC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000938FF E107                       	smpsAlterNote       $07
00093901 E701                       	dc.b	smpsNoAttack, $01
00093903 E1EE                       	smpsAlterNote       $EE
00093905 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093908 E106                       	smpsAlterNote       $06
0009390A 8001                       	dc.b	nRst, $01
0009390C E108                       	smpsAlterNote       $08
0009390E 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00093914 E106                       	smpsAlterNote       $06
00093916 A402 8001                  	dc.b	nB2, $02, nRst, $01
0009391A E108                       	smpsAlterNote       $08
0009391C 9D03                       	dc.b	nE2, $03
0009391E E10B                       	smpsAlterNote       $0B
00093920 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00093926 E108                       	smpsAlterNote       $08
00093928 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0009392C E10B                       	smpsAlterNote       $0B
0009392E 9603                       	dc.b	nA1, $03
00093930 E10E                       	smpsAlterNote       $0E
00093932 A001                       	dc.b	nG2, $01
00093934 E118                       	smpsAlterNote       $18
00093936 E701                       	dc.b	smpsNoAttack, $01
00093938 E1E9                       	smpsAlterNote       $E9
0009393A E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0009393D E1EE                       	smpsAlterNote       $EE
0009393F E701                       	dc.b	smpsNoAttack, $01
00093941 E1F8                       	smpsAlterNote       $F8
00093943 E701                       	dc.b	smpsNoAttack, $01
00093945 E102                       	smpsAlterNote       $02
00093947 E701                       	dc.b	smpsNoAttack, $01
00093949 E107                       	smpsAlterNote       $07
0009394B 8001                       	dc.b	nRst, $01
0009394D E10B                       	smpsAlterNote       $0B
0009394F 9603                       	dc.b	nA1, $03
00093951 E10C                       	smpsAlterNote       $0C
00093953 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00093959 E10B                       	smpsAlterNote       $0B
0009395B 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00093967 8001 9603                  	dc.b	nRst, $01, nA1, $03
0009396B E10C                       	smpsAlterNote       $0C
0009396D 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00093979 8001                       	dc.b	nRst, $01
0009397B E10B                       	smpsAlterNote       $0B
0009397D 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093985 E107                       	smpsAlterNote       $07
00093987 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0009398B E10B                       	smpsAlterNote       $0B
0009398D 9603                       	dc.b	nA1, $03
0009398F E109                       	smpsAlterNote       $09
00093991 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093995 E108                       	smpsAlterNote       $08
00093997 9D06                       	dc.b	nE2, $06
00093999 E107                       	smpsAlterNote       $07
0009399B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0009399F E106                       	smpsAlterNote       $06
000939A1 9903                       	dc.b	nC2, $03
000939A3 E10C                       	smpsAlterNote       $0C
000939A5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000939A9 E10B                       	smpsAlterNote       $0B
000939AB 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000939B7 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000939C1 E10C                       	smpsAlterNote       $0C
000939C3 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000939CF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000939DB 8001                       	dc.b	nRst, $01
000939DD E10B                       	smpsAlterNote       $0B
000939DF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000939EB 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000939F7 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00093A03 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093A0D E10C                       	smpsAlterNote       $0C
00093A0F 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00093A1B E10B                       	smpsAlterNote       $0B
00093A1D 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00093A25 E107                       	smpsAlterNote       $07
00093A27 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00093A2B E10B                       	smpsAlterNote       $0B
00093A2D 9603                       	dc.b	nA1, $03
00093A2F E109                       	smpsAlterNote       $09
00093A31 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00093A35 E108                       	smpsAlterNote       $08
00093A37 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00093A3B E107                       	smpsAlterNote       $07
00093A3D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093A41 E106                       	smpsAlterNote       $06
00093A43 9903                       	dc.b	nC2, $03
00093A45 E10C                       	smpsAlterNote       $0C
00093A47 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093A4B E10B                       	smpsAlterNote       $0B
00093A4D 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093A59 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093A63 E10C                       	smpsAlterNote       $0C
00093A65 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00093A71 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00093A7D 8001                       	dc.b	nRst, $01
00093A7F E10B                       	smpsAlterNote       $0B
00093A81 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093A8D 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00093A97 E10C                       	smpsAlterNote       $0C
00093A99 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093AA5 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00093AB1 E10B                       	smpsAlterNote       $0B
00093AB3 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00093ABF 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00093AC9 E10C                       	smpsAlterNote       $0C
00093ACB 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093AD7 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00093AE3 E10B                       	smpsAlterNote       $0B
00093AE5 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00093AF1 8001                       	dc.b	nRst, $01
00093AF3 E1EC                       	smpsAlterNote       $EC
00093AF5 A101                       	dc.b	nAb2, $01
00093AF7 E1FA                       	smpsAlterNote       $FA
00093AF9 E701                       	dc.b	smpsNoAttack, $01
00093AFB E116                       	smpsAlterNote       $16
00093AFD E701                       	dc.b	smpsNoAttack, $01
00093AFF E1F5                       	smpsAlterNote       $F5
00093B01 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093B04 E10B                       	smpsAlterNote       $0B
00093B06 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00093B12 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00093B1E E107                       	smpsAlterNote       $07
00093B20 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093B26 E10B                       	smpsAlterNote       $0B
00093B28 A203                       	dc.b	nA2, $03
00093B2A E107                       	smpsAlterNote       $07
00093B2C 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093B30 E1F3                       	smpsAlterNote       $F3
00093B32 A401                       	dc.b	nB2, $01
00093B34 E102                       	smpsAlterNote       $02
00093B36 E701                       	dc.b	smpsNoAttack, $01
00093B38 E109                       	smpsAlterNote       $09
00093B3A E701                       	dc.b	smpsNoAttack, $01
00093B3C E102                       	smpsAlterNote       $02
00093B3E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B41 E106                       	smpsAlterNote       $06
00093B43 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093B47 E107                       	smpsAlterNote       $07
00093B49 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093B4D E108                       	smpsAlterNote       $08
00093B4F 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00093B55 E109                       	smpsAlterNote       $09
00093B57 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093B5B E1F2                       	smpsAlterNote       $F2
00093B5D A401                       	dc.b	nB2, $01
00093B5F E1FF                       	smpsAlterNote       $FF
00093B61 E701                       	dc.b	smpsNoAttack, $01
00093B63 E111                       	smpsAlterNote       $11
00093B65 E701                       	dc.b	smpsNoAttack, $01
00093B67 E1FB                       	smpsAlterNote       $FB
00093B69 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093B6C E106                       	smpsAlterNote       $06
00093B6E E702                       	dc.b	smpsNoAttack, $02
00093B70 E109                       	smpsAlterNote       $09
00093B72 A007                       	dc.b	nG2, $07
00093B74 E108                       	smpsAlterNote       $08
00093B76 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00093B7A E107                       	smpsAlterNote       $07
00093B7C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093B82 E10B                       	smpsAlterNote       $0B
00093B84 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093B88 E107                       	smpsAlterNote       $07
00093B8A 9B03                       	dc.b	nD2, $03
00093B8C E11A                       	smpsAlterNote       $1A
00093B8E A301                       	dc.b	nBb2, $01
00093B90 E1F2                       	smpsAlterNote       $F2
00093B92 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093B95 E1FF                       	smpsAlterNote       $FF
00093B97 E701                       	dc.b	smpsNoAttack, $01
00093B99 E111                       	smpsAlterNote       $11
00093B9B E701                       	dc.b	smpsNoAttack, $01
00093B9D E106                       	smpsAlterNote       $06
00093B9F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093BA2 E107                       	smpsAlterNote       $07
00093BA4 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00093BB0 E117                       	smpsAlterNote       $17
00093BB2 A001                       	dc.b	nG2, $01
00093BB4 E1FA                       	smpsAlterNote       $FA
00093BB6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00093BB9 E116                       	smpsAlterNote       $16
00093BBB E701                       	dc.b	smpsNoAttack, $01
00093BBD E1F5                       	smpsAlterNote       $F5
00093BBF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093BC2 E103                       	smpsAlterNote       $03
00093BC4 E701                       	dc.b	smpsNoAttack, $01
00093BC6 E10B                       	smpsAlterNote       $0B
00093BC8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00093BCC E107                       	smpsAlterNote       $07
00093BCE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093BD4 E109                       	smpsAlterNote       $09
00093BD6 9E03                       	dc.b	nF2, $03
00093BD8 E10B                       	smpsAlterNote       $0B
00093BDA 9603 8001                  	dc.b	nA1, $03, nRst, $01
00093BDE E107                       	smpsAlterNote       $07
00093BE0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00093BE6 E10B                       	smpsAlterNote       $0B
00093BE8 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093BEC E107                       	smpsAlterNote       $07
00093BEE 9B03                       	dc.b	nD2, $03
00093BF0 E11A                       	smpsAlterNote       $1A
00093BF2 A301                       	dc.b	nBb2, $01
00093BF4 E1F9                       	smpsAlterNote       $F9
00093BF6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093BF9 E1FF                       	smpsAlterNote       $FF
00093BFB E701                       	dc.b	smpsNoAttack, $01
00093BFD E111                       	smpsAlterNote       $11
00093BFF E701                       	dc.b	smpsNoAttack, $01
00093C01 E106                       	smpsAlterNote       $06
00093C03 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093C06 E107                       	smpsAlterNote       $07
00093C08 9B03                       	dc.b	nD2, $03
00093C0A E108                       	smpsAlterNote       $08
00093C0C 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00093C12 E109                       	smpsAlterNote       $09
00093C14 A003                       	dc.b	nG2, $03
00093C16 E1F0                       	smpsAlterNote       $F0
00093C18 A501                       	dc.b	nC3, $01
00093C1A E106                       	smpsAlterNote       $06
00093C1C E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00093C20 E109                       	smpsAlterNote       $09
00093C22 A006 8001                  	dc.b	nG2, $06, nRst, $01
00093C26 E108                       	smpsAlterNote       $08
00093C28 9C03                       	dc.b	nEb2, $03
00093C2A E107                       	smpsAlterNote       $07
00093C2C 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00093C32 E10B                       	smpsAlterNote       $0B
00093C34 A203 8001                  	dc.b	nA2, $03, nRst, $01
00093C38 E107                       	smpsAlterNote       $07
00093C3A 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093C3E E11A                       	smpsAlterNote       $1A
00093C40 A301                       	dc.b	nBb2, $01
00093C42 E1F9                       	smpsAlterNote       $F9
00093C44 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093C47 E107                       	smpsAlterNote       $07
00093C49 E701                       	dc.b	smpsNoAttack, $01
00093C4B E1FB                       	smpsAlterNote       $FB
00093C4D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093C50 E106                       	smpsAlterNote       $06
00093C52 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093C56 E107                       	smpsAlterNote       $07
00093C58 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00093C60 E1EC                       	smpsAlterNote       $EC
00093C62 A101                       	dc.b	nAb2, $01
00093C64 E108                       	smpsAlterNote       $08
00093C66 E701                       	dc.b	smpsNoAttack, $01
00093C68 E1E7                       	smpsAlterNote       $E7
00093C6A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00093C6D E1F5                       	smpsAlterNote       $F5
00093C6F E701                       	dc.b	smpsNoAttack, $01
00093C71 E10B                       	smpsAlterNote       $0B
00093C73 E702                       	dc.b	smpsNoAttack, $02
00093C75 E107                       	smpsAlterNote       $07
00093C77 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00093C7D E106                       	smpsAlterNote       $06
00093C7F 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00093C85 E10C                       	smpsAlterNote       $0C
00093C87 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00093C8F E109                       	smpsAlterNote       $09
00093C91 9E03                       	dc.b	nF2, $03
00093C93 E10C                       	smpsAlterNote       $0C
00093C95 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093C99 E1EA                       	smpsAlterNote       $EA
00093C9B A201                       	dc.b	nA2, $01
00093C9D E106                       	smpsAlterNote       $06
00093C9F E701                       	dc.b	smpsNoAttack, $01
00093CA1 E114                       	smpsAlterNote       $14
00093CA3 E701                       	dc.b	smpsNoAttack, $01
00093CA5 E1F0                       	smpsAlterNote       $F0
00093CA7 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093CAA E10C                       	smpsAlterNote       $0C
00093CAC E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00093CB8 9703                       	dc.b	nBb1, $03
00093CBA E116                       	smpsAlterNote       $16
00093CBC 9C01                       	dc.b	nEb2, $01
00093CBE E105                       	smpsAlterNote       $05
00093CC0 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093CC3 E113                       	smpsAlterNote       $13
00093CC5 E701                       	dc.b	smpsNoAttack, $01
00093CC7 E1FF                       	smpsAlterNote       $FF
00093CC9 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093CCC E109                       	smpsAlterNote       $09
00093CCE E703                       	dc.b	smpsNoAttack, $03
00093CD0 E10C                       	smpsAlterNote       $0C
00093CD2 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00093CDE 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00093CE6 E109                       	smpsAlterNote       $09
00093CE8 9E03                       	dc.b	nF2, $03
00093CEA E10C                       	smpsAlterNote       $0C
00093CEC 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093CF0 E1EA                       	smpsAlterNote       $EA
00093CF2 A201                       	dc.b	nA2, $01
00093CF4 E106                       	smpsAlterNote       $06
00093CF6 E701                       	dc.b	smpsNoAttack, $01
00093CF8 E1E2                       	smpsAlterNote       $E2
00093CFA E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00093CFD E1F0                       	smpsAlterNote       $F0
00093CFF E701                       	dc.b	smpsNoAttack, $01
00093D01 E10C                       	smpsAlterNote       $0C
00093D03 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00093D0F E116                       	smpsAlterNote       $16
00093D11 9C01                       	dc.b	nEb2, $01
00093D13 E105                       	smpsAlterNote       $05
00093D15 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00093D18 E1F1                       	smpsAlterNote       $F1
00093D1A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00093D1D E1FF                       	smpsAlterNote       $FF
00093D1F E701                       	dc.b	smpsNoAttack, $01
00093D21 E109                       	smpsAlterNote       $09
00093D23 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093D27 E10C                       	smpsAlterNote       $0C
00093D29 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00093D35 E106                       	smpsAlterNote       $06
00093D37 9903                       	dc.b	nC2, $03
00093D39 E107                       	smpsAlterNote       $07
00093D3B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D3F E109                       	smpsAlterNote       $09
00093D41 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00093D47 E107                       	smpsAlterNote       $07
00093D49 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093D4D E108                       	smpsAlterNote       $08
00093D4F 9D03                       	dc.b	nE2, $03
00093D51 E10B                       	smpsAlterNote       $0B
00093D53 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00093D59 E109                       	smpsAlterNote       $09
00093D5B 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00093D61 E10C                       	smpsAlterNote       $0C
00093D63 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00093D69 E106                       	smpsAlterNote       $06
00093D6B 9903                       	dc.b	nC2, $03
00093D6D E11A                       	smpsAlterNote       $1A
00093D6F A301                       	dc.b	nBb2, $01
00093D71 E1F9                       	smpsAlterNote       $F9
00093D73 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093D76 E1FF                       	smpsAlterNote       $FF
00093D78 E701                       	dc.b	smpsNoAttack, $01
00093D7A E111                       	smpsAlterNote       $11
00093D7C E701                       	dc.b	smpsNoAttack, $01
00093D7E E106                       	smpsAlterNote       $06
00093D80 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00093D87 E109                       	smpsAlterNote       $09
00093D89 A003                       	dc.b	nG2, $03
00093D8B E106                       	smpsAlterNote       $06
00093D8D 9907                       	dc.b	nC2, $07
00093D8F E107                       	smpsAlterNote       $07
00093D91 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00093D99 E10B                       	smpsAlterNote       $0B
00093D9B A203                       	dc.b	nA2, $03
00093D9D E107                       	smpsAlterNote       $07
00093D9F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093DA3 E1F2                       	smpsAlterNote       $F2
00093DA5 A401                       	dc.b	nB2, $01
00093DA7 E1F9                       	smpsAlterNote       $F9
00093DA9 E701                       	dc.b	smpsNoAttack, $01
00093DAB E107                       	smpsAlterNote       $07
00093DAD E701                       	dc.b	smpsNoAttack, $01
00093DAF E1FB                       	smpsAlterNote       $FB
00093DB1 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093DB4 E106                       	smpsAlterNote       $06
00093DB6 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093DBA E107                       	smpsAlterNote       $07
00093DBC 9B03                       	dc.b	nD2, $03
00093DBE E108                       	smpsAlterNote       $08
00093DC0 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093DC6 E109                       	smpsAlterNote       $09
00093DC8 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093DCC E1F2                       	smpsAlterNote       $F2
00093DCE A401                       	dc.b	nB2, $01
00093DD0 E1F9                       	smpsAlterNote       $F9
00093DD2 E701                       	dc.b	smpsNoAttack, $01
00093DD4 E107                       	smpsAlterNote       $07
00093DD6 E701                       	dc.b	smpsNoAttack, $01
00093DD8 E1FB                       	smpsAlterNote       $FB
00093DDA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093DDD E106                       	smpsAlterNote       $06
00093DDF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093DE3 E108                       	smpsAlterNote       $08
00093DE5 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00093DE9 E10C                       	smpsAlterNote       $0C
00093DEB A302 8001                  	dc.b	nBb2, $02, nRst, $01
00093DEF E107                       	smpsAlterNote       $07
00093DF1 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093DF7 E10B                       	smpsAlterNote       $0B
00093DF9 A203                       	dc.b	nA2, $03
00093DFB E107                       	smpsAlterNote       $07
00093DFD 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093E01 E1F2                       	smpsAlterNote       $F2
00093E03 A401                       	dc.b	nB2, $01
00093E05 E1FF                       	smpsAlterNote       $FF
00093E07 E701                       	dc.b	smpsNoAttack, $01
00093E09 E107                       	smpsAlterNote       $07
00093E0B E701                       	dc.b	smpsNoAttack, $01
00093E0D E1FB                       	smpsAlterNote       $FB
00093E0F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093E12 E106                       	smpsAlterNote       $06
00093E14 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00093E18 E107                       	smpsAlterNote       $07
00093E1A 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00093E1E E108                       	smpsAlterNote       $08
00093E20 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00093E26 E109                       	smpsAlterNote       $09
00093E28 A003 8001                  	dc.b	nG2, $03, nRst, $01
00093E2C E1F2                       	smpsAlterNote       $F2
00093E2E A401                       	dc.b	nB2, $01
00093E30 E1FF                       	smpsAlterNote       $FF
00093E32 E701                       	dc.b	smpsNoAttack, $01
00093E34 E111                       	smpsAlterNote       $11
00093E36 E701                       	dc.b	smpsNoAttack, $01
00093E38 E1FB                       	smpsAlterNote       $FB
00093E3A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00093E3D E106                       	smpsAlterNote       $06
00093E3F E702                       	dc.b	smpsNoAttack, $02
00093E41 E108                       	smpsAlterNote       $08
00093E43 9C07                       	dc.b	nEb2, $07
00093E45 E10C                       	smpsAlterNote       $0C
00093E47 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093E4B E107                       	smpsAlterNote       $07
00093E4D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00093E53 E10B                       	smpsAlterNote       $0B
00093E55 A202 8001                  	dc.b	nA2, $02, nRst, $01
00093E59 E107                       	smpsAlterNote       $07
00093E5B 9B03                       	dc.b	nD2, $03
00093E5D E11A                       	smpsAlterNote       $1A
00093E5F A301                       	dc.b	nBb2, $01
00093E61 E1F2                       	smpsAlterNote       $F2
00093E63 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E66 E1FF                       	smpsAlterNote       $FF
00093E68 E701                       	dc.b	smpsNoAttack, $01
00093E6A E111                       	smpsAlterNote       $11
00093E6C E701                       	dc.b	smpsNoAttack, $01
00093E6E E106                       	smpsAlterNote       $06
00093E70 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093E73 E107                       	smpsAlterNote       $07
00093E75 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093E79 E108                       	smpsAlterNote       $08
00093E7B 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00093E83 E109                       	smpsAlterNote       $09
00093E85 A003                       	dc.b	nG2, $03
00093E87 E11A                       	smpsAlterNote       $1A
00093E89 A301                       	dc.b	nBb2, $01
00093E8B E1F2                       	smpsAlterNote       $F2
00093E8D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00093E90 E1FF                       	smpsAlterNote       $FF
00093E92 E701                       	dc.b	smpsNoAttack, $01
00093E94 E111                       	smpsAlterNote       $11
00093E96 E701                       	dc.b	smpsNoAttack, $01
00093E98 E106                       	smpsAlterNote       $06
00093E9A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00093E9D E108                       	smpsAlterNote       $08
00093E9F 9C07                       	dc.b	nEb2, $07
00093EA1 E10C                       	smpsAlterNote       $0C
00093EA3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00093EA7 E107                       	smpsAlterNote       $07
00093EA9 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00093EB5 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00093EBF E108                       	smpsAlterNote       $08
00093EC1 9C06                       	dc.b	nEb2, $06
00093EC3 E10C                       	smpsAlterNote       $0C
00093EC5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00093EC9 E108                       	smpsAlterNote       $08
00093ECB 9C03                       	dc.b	nEb2, $03
00093ECD E109                       	smpsAlterNote       $09
00093ECF A003 8001                  	dc.b	nG2, $03, nRst, $01
00093ED3 E10C                       	smpsAlterNote       $0C
00093ED5 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00093EDD E107                       	smpsAlterNote       $07
00093EDF 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00093EE3 F6F4 F8                    	smpsJump            music84_Jump04
00093EE6                            
00093EE6                            ; FM2 Data
00093EE6                            music84_FM2:
00093EE6 E0C0                       	smpsPan             panCenter, $00
00093EEA E10B                       	smpsAlterNote       $0B
00093EEC C603 8007                  	dc.b	nA5, $03, nRst, $07
00093EF0 E109                       	smpsAlterNote       $09
00093EF2 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00093EF6 E108                       	smpsAlterNote       $08
00093EF8 C103 8004                  	dc.b	nE5, $03, nRst, $04
00093EFE E080                       	smpsPan             panLeft, $00
00093F00 E10C                       	smpsAlterNote       $0C
00093F02 E6F9                       	smpsAlterVol        $F9
00093F04 C703                       	dc.b	nBb5, $03
00093F06 E10B                       	smpsAlterNote       $0B
00093F08 C603 8001                  	dc.b	nA5, $03, nRst, $01
00093F0C E109                       	smpsAlterNote       $09
00093F0E C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00093F14 E108                       	smpsAlterNote       $08
00093F16 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093F1A E106                       	smpsAlterNote       $06
00093F1C BD03                       	dc.b	nC5, $03
00093F1E E10B                       	smpsAlterNote       $0B
00093F20 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00093F26 E0C0                       	smpsPan             panCenter, $00
00093F28 E107                       	smpsAlterNote       $07
00093F2A E606                       	smpsAlterVol        $06
00093F2C BF03                       	dc.b	nD5, $03
00093F2E                            
00093F2E                            music84_Jump03:
00093F2E E108                       	smpsAlterNote       $08
00093F30 C103 8001                  	dc.b	nE5, $03, nRst, $01
00093F34 E109                       	smpsAlterNote       $09
00093F36 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00093F3C E10B                       	smpsAlterNote       $0B
00093F3E C607                       	dc.b	nA5, $07
00093F40 E107                       	smpsAlterNote       $07
00093F42 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093F46 E106                       	smpsAlterNote       $06
00093F48 C90D                       	dc.b	nC6, $0D
00093F4A E100                       	smpsAlterNote       $00
00093F4C E701                       	dc.b	smpsNoAttack, $01
00093F4E E1FF                       	smpsAlterNote       $FF
00093F50 E701                       	dc.b	smpsNoAttack, $01
00093F52 E103                       	smpsAlterNote       $03
00093F54 E701                       	dc.b	smpsNoAttack, $01
00093F56 E109                       	smpsAlterNote       $09
00093F58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F5C E106                       	smpsAlterNote       $06
00093F5E E701                       	dc.b	smpsNoAttack, $01
00093F60 E100                       	smpsAlterNote       $00
00093F62 E701                       	dc.b	smpsNoAttack, $01
00093F64 E10C                       	smpsAlterNote       $0C
00093F66 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00093F6A E10B                       	smpsAlterNote       $0B
00093F6C C603                       	dc.b	nA5, $03
00093F6E E109                       	smpsAlterNote       $09
00093F70 C403 8001                  	dc.b	nG5, $03, nRst, $01
00093F74 E10B                       	smpsAlterNote       $0B
00093F76 C60D                       	dc.b	nA5, $0D
00093F78 E105                       	smpsAlterNote       $05
00093F7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F7E E10B                       	smpsAlterNote       $0B
00093F80 E701                       	dc.b	smpsNoAttack, $01
00093F82 E10E                       	smpsAlterNote       $0E
00093F84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093F88 E108                       	smpsAlterNote       $08
00093F8A E701                       	dc.b	smpsNoAttack, $01
00093F8C E104                       	smpsAlterNote       $04
00093F8E E701                       	dc.b	smpsNoAttack, $01
00093F90 E105                       	smpsAlterNote       $05
00093F92 E701                       	dc.b	smpsNoAttack, $01
00093F94 E10B                       	smpsAlterNote       $0B
00093F96 E701                       	dc.b	smpsNoAttack, $01
00093F98 E10F                       	smpsAlterNote       $0F
00093F9A E701                       	dc.b	smpsNoAttack, $01
00093F9C E10B                       	smpsAlterNote       $0B
00093F9E E701                       	dc.b	smpsNoAttack, $01
00093FA0 E108                       	smpsAlterNote       $08
00093FA2 E701                       	dc.b	smpsNoAttack, $01
00093FA4 E104                       	smpsAlterNote       $04
00093FA6 E701                       	dc.b	smpsNoAttack, $01
00093FA8 E108                       	smpsAlterNote       $08
00093FAA E701                       	dc.b	smpsNoAttack, $01
00093FAC E10E                       	smpsAlterNote       $0E
00093FAE E701                       	dc.b	smpsNoAttack, $01
00093FB0 E10F                       	smpsAlterNote       $0F
00093FB2 E701                       	dc.b	smpsNoAttack, $01
00093FB4 E10B                       	smpsAlterNote       $0B
00093FB6 E701                       	dc.b	smpsNoAttack, $01
00093FB8 E105                       	smpsAlterNote       $05
00093FBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FBE E108                       	smpsAlterNote       $08
00093FC0 E701                       	dc.b	smpsNoAttack, $01
00093FC2 E10E                       	smpsAlterNote       $0E
00093FC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FC8 E108                       	smpsAlterNote       $08
00093FCA E701                       	dc.b	smpsNoAttack, $01
00093FCC E105                       	smpsAlterNote       $05
00093FCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00093FD2 E10B                       	smpsAlterNote       $0B
00093FD4 E701                       	dc.b	smpsNoAttack, $01
00093FD6 E10F                       	smpsAlterNote       $0F
00093FD8 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00093FDC E107                       	smpsAlterNote       $07
00093FDE BF03 8001                  	dc.b	nD5, $03, nRst, $01
00093FE2 E108                       	smpsAlterNote       $08
00093FE4 C103                       	dc.b	nE5, $03
00093FE6 E109                       	smpsAlterNote       $09
00093FE8 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00093FF0 E10B                       	smpsAlterNote       $0B
00093FF2 C606 8001                  	dc.b	nA5, $06, nRst, $01
00093FF6 E107                       	smpsAlterNote       $07
00093FF8 BF03                       	dc.b	nD5, $03
00093FFA E106                       	smpsAlterNote       $06
00093FFC C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00094000 E107                       	smpsAlterNote       $07
00094002 CB03                       	dc.b	nD6, $03
00094004 E10C                       	smpsAlterNote       $0C
00094006 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009400A E10B                       	smpsAlterNote       $0B
0009400C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094010 E109                       	smpsAlterNote       $09
00094012 C404                       	dc.b	nG5, $04
00094014 E10B                       	smpsAlterNote       $0B
00094016 C60D                       	dc.b	nA5, $0D
00094018 E108                       	smpsAlterNote       $08
0009401A E701                       	dc.b	smpsNoAttack, $01
0009401C E104                       	smpsAlterNote       $04
0009401E E701                       	dc.b	smpsNoAttack, $01
00094020 E108                       	smpsAlterNote       $08
00094022 E701                       	dc.b	smpsNoAttack, $01
00094024 E10B                       	smpsAlterNote       $0B
00094026 E701                       	dc.b	smpsNoAttack, $01
00094028 E10F                       	smpsAlterNote       $0F
0009402A E701                       	dc.b	smpsNoAttack, $01
0009402C E10B                       	smpsAlterNote       $0B
0009402E E701                       	dc.b	smpsNoAttack, $01
00094030 E105                       	smpsAlterNote       $05
00094032 E701                       	dc.b	smpsNoAttack, $01
00094034 E104                       	smpsAlterNote       $04
00094036 E701                       	dc.b	smpsNoAttack, $01
00094038 E108                       	smpsAlterNote       $08
0009403A E701                       	dc.b	smpsNoAttack, $01
0009403C E10E                       	smpsAlterNote       $0E
0009403E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094042 E10B                       	smpsAlterNote       $0B
00094044 E701                       	dc.b	smpsNoAttack, $01
00094046 E105                       	smpsAlterNote       $05
00094048 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009404C E10B                       	smpsAlterNote       $0B
0009404E E701                       	dc.b	smpsNoAttack, $01
00094050 E10E                       	smpsAlterNote       $0E
00094052 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094056 E108                       	smpsAlterNote       $08
00094058 E701                       	dc.b	smpsNoAttack, $01
0009405A E104                       	smpsAlterNote       $04
0009405C E701                       	dc.b	smpsNoAttack, $01
0009405E E105                       	smpsAlterNote       $05
00094060 E701                       	dc.b	smpsNoAttack, $01
00094062 E10B                       	smpsAlterNote       $0B
00094064 E701                       	dc.b	smpsNoAttack, $01
00094066 E10F                       	smpsAlterNote       $0F
00094068 E701                       	dc.b	smpsNoAttack, $01
0009406A E10B                       	smpsAlterNote       $0B
0009406C E701                       	dc.b	smpsNoAttack, $01
0009406E E108                       	smpsAlterNote       $08
00094070 E701                       	dc.b	smpsNoAttack, $01
00094072 E105                       	smpsAlterNote       $05
00094074 8001                       	dc.b	nRst, $01
00094076 E109                       	smpsAlterNote       $09
00094078 C401                       	dc.b	nG5, $01
0009407A E10B                       	smpsAlterNote       $0B
0009407C E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00094085 E109                       	smpsAlterNote       $09
00094087 C404 8001                  	dc.b	nG5, $04, nRst, $01
0009408B E10B                       	smpsAlterNote       $0B
0009408D C604 8001                  	dc.b	nA5, $04, nRst, $01
00094091 E107                       	smpsAlterNote       $07
00094093 BF0D                       	dc.b	nD5, $0D
00094095 E101                       	smpsAlterNote       $01
00094097 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009409B E104                       	smpsAlterNote       $04
0009409D E701                       	dc.b	smpsNoAttack, $01
0009409F E10A                       	smpsAlterNote       $0A
000940A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940A5 E104                       	smpsAlterNote       $04
000940A7 E701                       	dc.b	smpsNoAttack, $01
000940A9 E101                       	smpsAlterNote       $01
000940AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940AF E107                       	smpsAlterNote       $07
000940B1 E701                       	dc.b	smpsNoAttack, $01
000940B3 E10B                       	smpsAlterNote       $0B
000940B5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000940B9 E108                       	smpsAlterNote       $08
000940BB C101                       	dc.b	nE5, $01
000940BD E109                       	smpsAlterNote       $09
000940BF E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000940C4 E10B                       	smpsAlterNote       $0B
000940C6 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000940CE E108                       	smpsAlterNote       $08
000940D0 CD06                       	dc.b	nE6, $06
000940D2 E109                       	smpsAlterNote       $09
000940D4 CE07                       	dc.b	nF6, $07
000940D6 E108                       	smpsAlterNote       $08
000940D8 CD03 8001                  	dc.b	nE6, $03, nRst, $01
000940DC E106                       	smpsAlterNote       $06
000940DE C903                       	dc.b	nC6, $03
000940E0 E109                       	smpsAlterNote       $09
000940E2 C403 8001                  	dc.b	nG5, $03, nRst, $01
000940E6 E10C                       	smpsAlterNote       $0C
000940E8 C70D                       	dc.b	nBb5, $0D
000940EA E106                       	smpsAlterNote       $06
000940EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940F0 E109                       	smpsAlterNote       $09
000940F2 E701                       	dc.b	smpsNoAttack, $01
000940F4 E10F                       	smpsAlterNote       $0F
000940F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000940FA E109                       	smpsAlterNote       $09
000940FC E701                       	dc.b	smpsNoAttack, $01
000940FE E106                       	smpsAlterNote       $06
00094100 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094104 E10C                       	smpsAlterNote       $0C
00094106 E701                       	dc.b	smpsNoAttack, $01
00094108 E110                       	smpsAlterNote       $10
0009410A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009410E E10B                       	smpsAlterNote       $0B
00094110 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00094114 E105                       	smpsAlterNote       $05
00094116 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009411A E10B                       	smpsAlterNote       $0B
0009411C E701                       	dc.b	smpsNoAttack, $01
0009411E E10E                       	smpsAlterNote       $0E
00094120 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094124 E108                       	smpsAlterNote       $08
00094126 E701                       	dc.b	smpsNoAttack, $01
00094128 E104                       	smpsAlterNote       $04
0009412A E701                       	dc.b	smpsNoAttack, $01
0009412C E105                       	smpsAlterNote       $05
0009412E E701                       	dc.b	smpsNoAttack, $01
00094130 E10B                       	smpsAlterNote       $0B
00094132 E701                       	dc.b	smpsNoAttack, $01
00094134 E10F                       	smpsAlterNote       $0F
00094136 E701                       	dc.b	smpsNoAttack, $01
00094138 E10B                       	smpsAlterNote       $0B
0009413A E701                       	dc.b	smpsNoAttack, $01
0009413C E108                       	smpsAlterNote       $08
0009413E E701                       	dc.b	smpsNoAttack, $01
00094140 E104                       	smpsAlterNote       $04
00094142 E701                       	dc.b	smpsNoAttack, $01
00094144 E108                       	smpsAlterNote       $08
00094146 E701                       	dc.b	smpsNoAttack, $01
00094148 E10E                       	smpsAlterNote       $0E
0009414A E701                       	dc.b	smpsNoAttack, $01
0009414C E10F                       	smpsAlterNote       $0F
0009414E E701                       	dc.b	smpsNoAttack, $01
00094150 E10B                       	smpsAlterNote       $0B
00094152 E701                       	dc.b	smpsNoAttack, $01
00094154 E105                       	smpsAlterNote       $05
00094156 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009415A E108                       	smpsAlterNote       $08
0009415C E701                       	dc.b	smpsNoAttack, $01
0009415E E10E                       	smpsAlterNote       $0E
00094160 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094164 E108                       	smpsAlterNote       $08
00094166 E701                       	dc.b	smpsNoAttack, $01
00094168 E105                       	smpsAlterNote       $05
0009416A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009416E E10B                       	smpsAlterNote       $0B
00094170 E701                       	dc.b	smpsNoAttack, $01
00094172 E10F                       	smpsAlterNote       $0F
00094174 E701                       	dc.b	smpsNoAttack, $01
00094176 E10E                       	smpsAlterNote       $0E
00094178 E701                       	dc.b	smpsNoAttack, $01
0009417A E108                       	smpsAlterNote       $08
0009417C E701                       	dc.b	smpsNoAttack, $01
0009417E E104                       	smpsAlterNote       $04
00094180 E701                       	dc.b	smpsNoAttack, $01
00094182 E108                       	smpsAlterNote       $08
00094184 E701                       	dc.b	smpsNoAttack, $01
00094186 E10E                       	smpsAlterNote       $0E
00094188 E701                       	dc.b	smpsNoAttack, $01
0009418A E10F                       	smpsAlterNote       $0F
0009418C E701                       	dc.b	smpsNoAttack, $01
0009418E E10B                       	smpsAlterNote       $0B
00094190 E701                       	dc.b	smpsNoAttack, $01
00094192 E105                       	smpsAlterNote       $05
00094194 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094198 E108                       	smpsAlterNote       $08
0009419A E701                       	dc.b	smpsNoAttack, $01
0009419C E10E                       	smpsAlterNote       $0E
0009419E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000941A2 E108                       	smpsAlterNote       $08
000941A4 E701                       	dc.b	smpsNoAttack, $01
000941A6 E105                       	smpsAlterNote       $05
000941A8 E701                       	dc.b	smpsNoAttack, $01
000941AA E10B                       	smpsAlterNote       $0B
000941AC C60D                       	dc.b	nA5, $0D
000941AE E108                       	smpsAlterNote       $08
000941B0 E701                       	dc.b	smpsNoAttack, $01
000941B2 E104                       	smpsAlterNote       $04
000941B4 E701                       	dc.b	smpsNoAttack, $01
000941B6 E105                       	smpsAlterNote       $05
000941B8 E701                       	dc.b	smpsNoAttack, $01
000941BA E10B                       	smpsAlterNote       $0B
000941BC E701                       	dc.b	smpsNoAttack, $01
000941BE E10F                       	smpsAlterNote       $0F
000941C0 E701                       	dc.b	smpsNoAttack, $01
000941C2 E10B                       	smpsAlterNote       $0B
000941C4 E701                       	dc.b	smpsNoAttack, $01
000941C6 E108                       	smpsAlterNote       $08
000941C8 E701                       	dc.b	smpsNoAttack, $01
000941CA E104                       	smpsAlterNote       $04
000941CC E701                       	dc.b	smpsNoAttack, $01
000941CE E108                       	smpsAlterNote       $08
000941D0 E701                       	dc.b	smpsNoAttack, $01
000941D2 E10E                       	smpsAlterNote       $0E
000941D4 E701                       	dc.b	smpsNoAttack, $01
000941D6 E10F                       	smpsAlterNote       $0F
000941D8 E701                       	dc.b	smpsNoAttack, $01
000941DC E109                       	smpsAlterNote       $09
000941DE E6FF                       	smpsAlterVol        $FF
000941E0 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000941EA E108                       	smpsAlterNote       $08
000941EC C103 800E                  	dc.b	nE5, $03, nRst, $0E
000941F2 E107                       	smpsAlterNote       $07
000941F4 E601                       	smpsAlterVol        $01
000941F6 BF03                       	dc.b	nD5, $03
000941F8 E108                       	smpsAlterNote       $08
000941FA C103 8001                  	dc.b	nE5, $03, nRst, $01
000941FE E109                       	smpsAlterNote       $09
00094200 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00094206 E10B                       	smpsAlterNote       $0B
00094208 C606 8001                  	dc.b	nA5, $06, nRst, $01
0009420C E107                       	smpsAlterNote       $07
0009420E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094212 E106                       	smpsAlterNote       $06
00094214 C90D                       	dc.b	nC6, $0D
00094216 E103                       	smpsAlterNote       $03
00094218 E701                       	dc.b	smpsNoAttack, $01
0009421A E1FF                       	smpsAlterNote       $FF
0009421C E701                       	dc.b	smpsNoAttack, $01
0009421E E103                       	smpsAlterNote       $03
00094220 E701                       	dc.b	smpsNoAttack, $01
00094222 E109                       	smpsAlterNote       $09
00094224 E701                       	dc.b	smpsNoAttack, $01
00094226 E10A                       	smpsAlterNote       $0A
00094228 E701                       	dc.b	smpsNoAttack, $01
0009422A E106                       	smpsAlterNote       $06
0009422C E701                       	dc.b	smpsNoAttack, $01
0009422E E100                       	smpsAlterNote       $00
00094230 E701                       	dc.b	smpsNoAttack, $01
00094232 E10C                       	smpsAlterNote       $0C
00094234 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00094238 E10B                       	smpsAlterNote       $0B
0009423A C603                       	dc.b	nA5, $03
0009423C E109                       	smpsAlterNote       $09
0009423E C403 8001                  	dc.b	nG5, $03, nRst, $01
00094242 E10B                       	smpsAlterNote       $0B
00094244 C60D                       	dc.b	nA5, $0D
00094246 E105                       	smpsAlterNote       $05
00094248 E701                       	dc.b	smpsNoAttack, $01
0009424A E104                       	smpsAlterNote       $04
0009424C E701                       	dc.b	smpsNoAttack, $01
0009424E E108                       	smpsAlterNote       $08
00094250 E701                       	dc.b	smpsNoAttack, $01
00094252 E10E                       	smpsAlterNote       $0E
00094254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094258 E10B                       	smpsAlterNote       $0B
0009425A E701                       	dc.b	smpsNoAttack, $01
0009425C E105                       	smpsAlterNote       $05
0009425E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094262 E10B                       	smpsAlterNote       $0B
00094264 E701                       	dc.b	smpsNoAttack, $01
00094266 E10E                       	smpsAlterNote       $0E
00094268 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009426C E108                       	smpsAlterNote       $08
0009426E E701                       	dc.b	smpsNoAttack, $01
00094270 E104                       	smpsAlterNote       $04
00094272 E701                       	dc.b	smpsNoAttack, $01
00094274 E105                       	smpsAlterNote       $05
00094276 E701                       	dc.b	smpsNoAttack, $01
00094278 E10B                       	smpsAlterNote       $0B
0009427A E701                       	dc.b	smpsNoAttack, $01
0009427C E10F                       	smpsAlterNote       $0F
0009427E E701                       	dc.b	smpsNoAttack, $01
00094280 E10B                       	smpsAlterNote       $0B
00094282 E701                       	dc.b	smpsNoAttack, $01
00094284 E108                       	smpsAlterNote       $08
00094286 E701                       	dc.b	smpsNoAttack, $01
00094288 E104                       	smpsAlterNote       $04
0009428A E701                       	dc.b	smpsNoAttack, $01
0009428C E108                       	smpsAlterNote       $08
0009428E E701                       	dc.b	smpsNoAttack, $01
00094290 E10E                       	smpsAlterNote       $0E
00094292 E701                       	dc.b	smpsNoAttack, $01
00094294 E10F                       	smpsAlterNote       $0F
00094296 E701                       	dc.b	smpsNoAttack, $01
00094298 E10B                       	smpsAlterNote       $0B
0009429A E701                       	dc.b	smpsNoAttack, $01
0009429C E105                       	smpsAlterNote       $05
0009429E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942A2 E108                       	smpsAlterNote       $08
000942A4 E701                       	dc.b	smpsNoAttack, $01
000942A6 E10E                       	smpsAlterNote       $0E
000942A8 E701                       	dc.b	smpsNoAttack, $01
000942AA E10F                       	smpsAlterNote       $0F
000942AC 800F                       	dc.b	nRst, $0F
000942AE E107                       	smpsAlterNote       $07
000942B0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000942B4 E108                       	smpsAlterNote       $08
000942B6 C103                       	dc.b	nE5, $03
000942B8 E109                       	smpsAlterNote       $09
000942BA C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000942C0 E10B                       	smpsAlterNote       $0B
000942C2 C606 8001                  	dc.b	nA5, $06, nRst, $01
000942C6 E107                       	smpsAlterNote       $07
000942C8 BF03                       	dc.b	nD5, $03
000942CA E106                       	smpsAlterNote       $06
000942CC C90E                       	dc.b	nC6, $0E
000942CE E107                       	smpsAlterNote       $07
000942D0 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000942D4 E10C                       	smpsAlterNote       $0C
000942D6 C704                       	dc.b	nBb5, $04
000942D8 E10B                       	smpsAlterNote       $0B
000942DA C604 8001                  	dc.b	nA5, $04, nRst, $01
000942DE E109                       	smpsAlterNote       $09
000942E0 C404                       	dc.b	nG5, $04
000942E2 E10B                       	smpsAlterNote       $0B
000942E4 C60D                       	dc.b	nA5, $0D
000942E6 E108                       	smpsAlterNote       $08
000942E8 E701                       	dc.b	smpsNoAttack, $01
000942EA E105                       	smpsAlterNote       $05
000942EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000942F0 E10B                       	smpsAlterNote       $0B
000942F2 E701                       	dc.b	smpsNoAttack, $01
000942F4 E10F                       	smpsAlterNote       $0F
000942F6 E701                       	dc.b	smpsNoAttack, $01
000942F8 E10E                       	smpsAlterNote       $0E
000942FA E701                       	dc.b	smpsNoAttack, $01
000942FC E108                       	smpsAlterNote       $08
000942FE E701                       	dc.b	smpsNoAttack, $01
00094300 E104                       	smpsAlterNote       $04
00094302 E701                       	dc.b	smpsNoAttack, $01
00094304 E108                       	smpsAlterNote       $08
00094306 E701                       	dc.b	smpsNoAttack, $01
00094308 E10B                       	smpsAlterNote       $0B
0009430A E701                       	dc.b	smpsNoAttack, $01
0009430C E10F                       	smpsAlterNote       $0F
0009430E E701                       	dc.b	smpsNoAttack, $01
00094310 E10B                       	smpsAlterNote       $0B
00094312 E701                       	dc.b	smpsNoAttack, $01
00094314 E105                       	smpsAlterNote       $05
00094316 E701                       	dc.b	smpsNoAttack, $01
00094318 E104                       	smpsAlterNote       $04
0009431A E701                       	dc.b	smpsNoAttack, $01
0009431C E108                       	smpsAlterNote       $08
0009431E E701                       	dc.b	smpsNoAttack, $01
00094320 E10E                       	smpsAlterNote       $0E
00094322 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094326 E10B                       	smpsAlterNote       $0B
00094328 E701                       	dc.b	smpsNoAttack, $01
0009432A E105                       	smpsAlterNote       $05
0009432C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094330 E10B                       	smpsAlterNote       $0B
00094332 E701                       	dc.b	smpsNoAttack, $01
00094334 E10E                       	smpsAlterNote       $0E
00094336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009433A E108                       	smpsAlterNote       $08
0009433C E701                       	dc.b	smpsNoAttack, $01
0009433E E105                       	smpsAlterNote       $05
00094340 8001                       	dc.b	nRst, $01
00094342 E109                       	smpsAlterNote       $09
00094344 C402                       	dc.b	nG5, $02
00094346 E10B                       	smpsAlterNote       $0B
00094348 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094351 E109                       	smpsAlterNote       $09
00094353 C404                       	dc.b	nG5, $04
00094355 E10B                       	smpsAlterNote       $0B
00094357 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009435B E107                       	smpsAlterNote       $07
0009435D BF0D                       	dc.b	nD5, $0D
0009435F E101                       	smpsAlterNote       $01
00094361 E701                       	dc.b	smpsNoAttack, $01
00094363 E100                       	smpsAlterNote       $00
00094365 E701                       	dc.b	smpsNoAttack, $01
00094367 E104                       	smpsAlterNote       $04
00094369 E701                       	dc.b	smpsNoAttack, $01
0009436B E10A                       	smpsAlterNote       $0A
0009436D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094371 E107                       	smpsAlterNote       $07
00094373 E701                       	dc.b	smpsNoAttack, $01
00094375 E101                       	smpsAlterNote       $01
00094377 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009437B E107                       	smpsAlterNote       $07
0009437D E701                       	dc.b	smpsNoAttack, $01
0009437F E10A                       	smpsAlterNote       $0A
00094381 E701                       	dc.b	smpsNoAttack, $01
00094383 E10B                       	smpsAlterNote       $0B
00094385 8001                       	dc.b	nRst, $01
00094387 E108                       	smpsAlterNote       $08
00094389 C101                       	dc.b	nE5, $01
0009438B E109                       	smpsAlterNote       $09
0009438D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00094392 E10B                       	smpsAlterNote       $0B
00094394 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0009439C E108                       	smpsAlterNote       $08
0009439E CD06 8001                  	dc.b	nE6, $06, nRst, $01
000943A2 E109                       	smpsAlterNote       $09
000943A4 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000943A8 E108                       	smpsAlterNote       $08
000943AA CD02 8001                  	dc.b	nE6, $02, nRst, $01
000943AE E106                       	smpsAlterNote       $06
000943B0 C903                       	dc.b	nC6, $03
000943B2 E109                       	smpsAlterNote       $09
000943B4 C403 8001                  	dc.b	nG5, $03, nRst, $01
000943B8 E10C                       	smpsAlterNote       $0C
000943BA C70D                       	dc.b	nBb5, $0D
000943BC E109                       	smpsAlterNote       $09
000943BE E701                       	dc.b	smpsNoAttack, $01
000943C0 E105                       	smpsAlterNote       $05
000943C2 E701                       	dc.b	smpsNoAttack, $01
000943C4 E109                       	smpsAlterNote       $09
000943C6 E701                       	dc.b	smpsNoAttack, $01
000943C8 E10F                       	smpsAlterNote       $0F
000943CA E701                       	dc.b	smpsNoAttack, $01
000943CC E110                       	smpsAlterNote       $10
000943CE E701                       	dc.b	smpsNoAttack, $01
000943D0 E10C                       	smpsAlterNote       $0C
000943D2 E701                       	dc.b	smpsNoAttack, $01
000943D4 E106                       	smpsAlterNote       $06
000943D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943DA E109                       	smpsAlterNote       $09
000943DC E701                       	dc.b	smpsNoAttack, $01
000943DE E10F                       	smpsAlterNote       $0F
000943E0 E701                       	dc.b	smpsNoAttack, $01
000943E2 E110                       	smpsAlterNote       $10
000943E4 8001                       	dc.b	nRst, $01
000943E6 E10B                       	smpsAlterNote       $0B
000943E8 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000943EE E105                       	smpsAlterNote       $05
000943F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943F4 E108                       	smpsAlterNote       $08
000943F6 E701                       	dc.b	smpsNoAttack, $01
000943F8 E10E                       	smpsAlterNote       $0E
000943FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000943FE E108                       	smpsAlterNote       $08
00094400 E701                       	dc.b	smpsNoAttack, $01
00094402 E105                       	smpsAlterNote       $05
00094404 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094408 E10B                       	smpsAlterNote       $0B
0009440A E701                       	dc.b	smpsNoAttack, $01
0009440C E10F                       	smpsAlterNote       $0F
0009440E E701                       	dc.b	smpsNoAttack, $01
00094410 E10E                       	smpsAlterNote       $0E
00094412 E701                       	dc.b	smpsNoAttack, $01
00094414 E108                       	smpsAlterNote       $08
00094416 E701                       	dc.b	smpsNoAttack, $01
00094418 E104                       	smpsAlterNote       $04
0009441A E701                       	dc.b	smpsNoAttack, $01
0009441C E108                       	smpsAlterNote       $08
0009441E E701                       	dc.b	smpsNoAttack, $01
00094420 E10B                       	smpsAlterNote       $0B
00094422 E701                       	dc.b	smpsNoAttack, $01
00094424 E10F                       	smpsAlterNote       $0F
00094426 E701                       	dc.b	smpsNoAttack, $01
00094428 E10B                       	smpsAlterNote       $0B
0009442A E701                       	dc.b	smpsNoAttack, $01
0009442C E105                       	smpsAlterNote       $05
0009442E E701                       	dc.b	smpsNoAttack, $01
00094430 E104                       	smpsAlterNote       $04
00094432 E701                       	dc.b	smpsNoAttack, $01
00094434 E108                       	smpsAlterNote       $08
00094436 E701                       	dc.b	smpsNoAttack, $01
00094438 E10E                       	smpsAlterNote       $0E
0009443A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009443E E10B                       	smpsAlterNote       $0B
00094440 E701                       	dc.b	smpsNoAttack, $01
00094442 E105                       	smpsAlterNote       $05
00094444 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094448 E10B                       	smpsAlterNote       $0B
0009444A E701                       	dc.b	smpsNoAttack, $01
0009444C E10E                       	smpsAlterNote       $0E
0009444E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094452 E108                       	smpsAlterNote       $08
00094454 E701                       	dc.b	smpsNoAttack, $01
00094456 E104                       	smpsAlterNote       $04
00094458 E701                       	dc.b	smpsNoAttack, $01
0009445A E105                       	smpsAlterNote       $05
0009445C E701                       	dc.b	smpsNoAttack, $01
0009445E E10B                       	smpsAlterNote       $0B
00094460 E701                       	dc.b	smpsNoAttack, $01
00094462 E10F                       	smpsAlterNote       $0F
00094464 E701                       	dc.b	smpsNoAttack, $01
00094466 E10B                       	smpsAlterNote       $0B
00094468 E701                       	dc.b	smpsNoAttack, $01
0009446A E108                       	smpsAlterNote       $08
0009446C E701                       	dc.b	smpsNoAttack, $01
0009446E E104                       	smpsAlterNote       $04
00094470 E701                       	dc.b	smpsNoAttack, $01
00094472 E108                       	smpsAlterNote       $08
00094474 E701                       	dc.b	smpsNoAttack, $01
00094476 E10E                       	smpsAlterNote       $0E
00094478 E701                       	dc.b	smpsNoAttack, $01
0009447A E10F                       	smpsAlterNote       $0F
0009447C E701                       	dc.b	smpsNoAttack, $01
0009447E E10B                       	smpsAlterNote       $0B
00094480 E701                       	dc.b	smpsNoAttack, $01
00094482 E105                       	smpsAlterNote       $05
00094484 E701                       	dc.b	smpsNoAttack, $01
00094486 E10B                       	smpsAlterNote       $0B
00094488 C60E                       	dc.b	nA5, $0E
0009448A E105                       	smpsAlterNote       $05
0009448C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094490 E10B                       	smpsAlterNote       $0B
00094492 E701                       	dc.b	smpsNoAttack, $01
00094494 E10E                       	smpsAlterNote       $0E
00094496 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009449A E108                       	smpsAlterNote       $08
0009449C E701                       	dc.b	smpsNoAttack, $01
0009449E E104                       	smpsAlterNote       $04
000944A0 E701                       	dc.b	smpsNoAttack, $01
000944A2 E105                       	smpsAlterNote       $05
000944A4 E701                       	dc.b	smpsNoAttack, $01
000944A6 E10B                       	smpsAlterNote       $0B
000944A8 E701                       	dc.b	smpsNoAttack, $01
000944AA E10F                       	smpsAlterNote       $0F
000944AC E701                       	dc.b	smpsNoAttack, $01
000944AE E10B                       	smpsAlterNote       $0B
000944B0 E701                       	dc.b	smpsNoAttack, $01
000944B2 E108                       	smpsAlterNote       $08
000944B4 E701                       	dc.b	smpsNoAttack, $01
000944B6 E104                       	smpsAlterNote       $04
000944B8 E701                       	dc.b	smpsNoAttack, $01
000944BA E108                       	smpsAlterNote       $08
000944BC E701                       	dc.b	smpsNoAttack, $01
000944BE E10E                       	smpsAlterNote       $0E
000944C0 E701                       	dc.b	smpsNoAttack, $01
000944C2 E10F                       	smpsAlterNote       $0F
000944C4 E701                       	dc.b	smpsNoAttack, $01
000944C6 E10B                       	smpsAlterNote       $0B
000944C8 E701                       	dc.b	smpsNoAttack, $01
000944CA E105                       	smpsAlterNote       $05
000944CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944D0 E108                       	smpsAlterNote       $08
000944D2 E701                       	dc.b	smpsNoAttack, $01
000944D4 E10E                       	smpsAlterNote       $0E
000944D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944DA E108                       	smpsAlterNote       $08
000944DC E701                       	dc.b	smpsNoAttack, $01
000944DE E105                       	smpsAlterNote       $05
000944E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000944E4 E10B                       	smpsAlterNote       $0B
000944E6 E701                       	dc.b	smpsNoAttack, $01
000944E8 E10F                       	smpsAlterNote       $0F
000944EA E701                       	dc.b	smpsNoAttack, $01
000944EC E10E                       	smpsAlterNote       $0E
000944EE E701                       	dc.b	smpsNoAttack, $01
000944F0 E108                       	smpsAlterNote       $08
000944F2 E701                       	dc.b	smpsNoAttack, $01
000944F4 E104                       	smpsAlterNote       $04
000944F6 E701                       	dc.b	smpsNoAttack, $01
000944F8 E108                       	smpsAlterNote       $08
000944FA E701                       	dc.b	smpsNoAttack, $01
000944FC E10E                       	smpsAlterNote       $0E
000944FE E701                       	dc.b	smpsNoAttack, $01
00094500 E10F                       	smpsAlterNote       $0F
00094502 E701                       	dc.b	smpsNoAttack, $01
00094504 E10B                       	smpsAlterNote       $0B
00094506 E701                       	dc.b	smpsNoAttack, $01
00094508 E105                       	smpsAlterNote       $05
0009450A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009450E E108                       	smpsAlterNote       $08
00094510 E701                       	dc.b	smpsNoAttack, $01
00094512 E10E                       	smpsAlterNote       $0E
00094514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094518 E108                       	smpsAlterNote       $08
0009451A E701                       	dc.b	smpsNoAttack, $01
0009451C E105                       	smpsAlterNote       $05
0009451E E701                       	dc.b	smpsNoAttack, $01
00094522 E10B                       	smpsAlterNote       $0B
00094524 E6FD                       	smpsAlterVol        $FD
00094526 C604 8001                  	dc.b	nA5, $04, nRst, $01
0009452A E109                       	smpsAlterNote       $09
0009452C C404                       	dc.b	nG5, $04
0009452E E10B                       	smpsAlterNote       $0B
00094530 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094534 E107                       	smpsAlterNote       $07
00094536 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0009453C E10B                       	smpsAlterNote       $0B
0009453E C604                       	dc.b	nA5, $04
00094540 E109                       	smpsAlterNote       $09
00094542 C404 8001                  	dc.b	nG5, $04, nRst, $01
00094546 E10B                       	smpsAlterNote       $0B
00094548 C604                       	dc.b	nA5, $04
0009454A E108                       	smpsAlterNote       $08
0009454C C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00094554 E106                       	smpsAlterNote       $06
00094556 C904 8001                  	dc.b	nC6, $04, nRst, $01
0009455A E10C                       	smpsAlterNote       $0C
0009455C C704                       	dc.b	nBb5, $04
0009455E E10B                       	smpsAlterNote       $0B
00094560 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094564 E109                       	smpsAlterNote       $09
00094566 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00094570 E10B                       	smpsAlterNote       $0B
00094572 C60D                       	dc.b	nA5, $0D
00094574 E108                       	smpsAlterNote       $08
00094576 E701                       	dc.b	smpsNoAttack, $01
00094578 E104                       	smpsAlterNote       $04
0009457A E701                       	dc.b	smpsNoAttack, $01
0009457C E108                       	smpsAlterNote       $08
0009457E E701                       	dc.b	smpsNoAttack, $01
00094580 E10E                       	smpsAlterNote       $0E
00094582 E701                       	dc.b	smpsNoAttack, $01
00094584 E10F                       	smpsAlterNote       $0F
00094586 E701                       	dc.b	smpsNoAttack, $01
00094588 E10B                       	smpsAlterNote       $0B
0009458A E701                       	dc.b	smpsNoAttack, $01
0009458C E105                       	smpsAlterNote       $05
0009458E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094592 E108                       	smpsAlterNote       $08
00094594 E701                       	dc.b	smpsNoAttack, $01
00094596 E10E                       	smpsAlterNote       $0E
00094598 E701                       	dc.b	smpsNoAttack, $01
0009459A E10F                       	smpsAlterNote       $0F
0009459C 8001                       	dc.b	nRst, $01
0009459E E109                       	smpsAlterNote       $09
000945A0 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000945A6 E108                       	smpsAlterNote       $08
000945A8 C10D                       	dc.b	nE5, $0D
000945AA E102                       	smpsAlterNote       $02
000945AC E701                       	dc.b	smpsNoAttack, $01
000945AE E101                       	smpsAlterNote       $01
000945B0 E701                       	dc.b	smpsNoAttack, $01
000945B2 E105                       	smpsAlterNote       $05
000945B4 E701                       	dc.b	smpsNoAttack, $01
000945B6 E10B                       	smpsAlterNote       $0B
000945B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945BC E108                       	smpsAlterNote       $08
000945BE E701                       	dc.b	smpsNoAttack, $01
000945C0 E102                       	smpsAlterNote       $02
000945C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945C6 E108                       	smpsAlterNote       $08
000945C8 E701                       	dc.b	smpsNoAttack, $01
000945CA E10B                       	smpsAlterNote       $0B
000945CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000945D0 E105                       	smpsAlterNote       $05
000945D2 E701                       	dc.b	smpsNoAttack, $01
000945D4 E101                       	smpsAlterNote       $01
000945D6 E701                       	dc.b	smpsNoAttack, $01
000945D8 E102                       	smpsAlterNote       $02
000945DA E701                       	dc.b	smpsNoAttack, $01
000945DC E108                       	smpsAlterNote       $08
000945DE E701                       	dc.b	smpsNoAttack, $01
000945E0 E10C                       	smpsAlterNote       $0C
000945E2 E701                       	dc.b	smpsNoAttack, $01
000945E4 E108                       	smpsAlterNote       $08
000945E6 E701                       	dc.b	smpsNoAttack, $01
000945E8 E105                       	smpsAlterNote       $05
000945EA E701                       	dc.b	smpsNoAttack, $01
000945EC E101                       	smpsAlterNote       $01
000945EE E701                       	dc.b	smpsNoAttack, $01
000945F0 E105                       	smpsAlterNote       $05
000945F2 E701                       	dc.b	smpsNoAttack, $01
000945F4 E10B                       	smpsAlterNote       $0B
000945F6 E701                       	dc.b	smpsNoAttack, $01
000945F8 E10C                       	smpsAlterNote       $0C
000945FA E701                       	dc.b	smpsNoAttack, $01
000945FC E108                       	smpsAlterNote       $08
000945FE E701                       	dc.b	smpsNoAttack, $01
00094600 E102                       	smpsAlterNote       $02
00094602 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094606 E105                       	smpsAlterNote       $05
00094608 E701                       	dc.b	smpsNoAttack, $01
0009460A E10B                       	smpsAlterNote       $0B
0009460C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094610 E105                       	smpsAlterNote       $05
00094612 E701                       	dc.b	smpsNoAttack, $01
00094614 E102                       	smpsAlterNote       $02
00094616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009461A E108                       	smpsAlterNote       $08
0009461C E701                       	dc.b	smpsNoAttack, $01
0009461E E10C                       	smpsAlterNote       $0C
00094620 E701                       	dc.b	smpsNoAttack, $01
00094622 E10B                       	smpsAlterNote       $0B
00094624 E701                       	dc.b	smpsNoAttack, $01
00094626 E105                       	smpsAlterNote       $05
00094628 E701                       	dc.b	smpsNoAttack, $01
0009462A E101                       	smpsAlterNote       $01
0009462C E701                       	dc.b	smpsNoAttack, $01
0009462E E105                       	smpsAlterNote       $05
00094630 E701                       	dc.b	smpsNoAttack, $01
00094632 E108                       	smpsAlterNote       $08
00094634 E701                       	dc.b	smpsNoAttack, $01
00094636 E10C                       	smpsAlterNote       $0C
00094638 E701                       	dc.b	smpsNoAttack, $01
0009463A E108                       	smpsAlterNote       $08
0009463C E701                       	dc.b	smpsNoAttack, $01
0009463E E102                       	smpsAlterNote       $02
00094640 E701                       	dc.b	smpsNoAttack, $01
00094642 E101                       	smpsAlterNote       $01
00094644 E701                       	dc.b	smpsNoAttack, $01
00094646 E105                       	smpsAlterNote       $05
00094648 E701                       	dc.b	smpsNoAttack, $01
0009464A E10B                       	smpsAlterNote       $0B
0009464C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094650 E108                       	smpsAlterNote       $08
00094652 E701                       	dc.b	smpsNoAttack, $01
00094654 E102                       	smpsAlterNote       $02
00094656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009465A E108                       	smpsAlterNote       $08
0009465C E701                       	dc.b	smpsNoAttack, $01
0009465E E10B                       	smpsAlterNote       $0B
00094660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094664 E105                       	smpsAlterNote       $05
00094666 E701                       	dc.b	smpsNoAttack, $01
00094668 E101                       	smpsAlterNote       $01
0009466A E701                       	dc.b	smpsNoAttack, $01
0009466C E102                       	smpsAlterNote       $02
0009466E E701                       	dc.b	smpsNoAttack, $01
00094670 E108                       	smpsAlterNote       $08
00094672 E701                       	dc.b	smpsNoAttack, $01
00094674 E10C                       	smpsAlterNote       $0C
00094676 E701                       	dc.b	smpsNoAttack, $01
00094678 E108                       	smpsAlterNote       $08
0009467A E701                       	dc.b	smpsNoAttack, $01
0009467C E105                       	smpsAlterNote       $05
0009467E E701                       	dc.b	smpsNoAttack, $01
00094680 E101                       	smpsAlterNote       $01
00094682 E701                       	dc.b	smpsNoAttack, $01
00094684 E105                       	smpsAlterNote       $05
00094686 E701                       	dc.b	smpsNoAttack, $01
00094688 E10B                       	smpsAlterNote       $0B
0009468A E701                       	dc.b	smpsNoAttack, $01
0009468C E10C                       	smpsAlterNote       $0C
0009468E E701                       	dc.b	smpsNoAttack, $01
00094690 E108                       	smpsAlterNote       $08
00094692 E701                       	dc.b	smpsNoAttack, $01
00094694 E102                       	smpsAlterNote       $02
00094696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009469A E105                       	smpsAlterNote       $05
0009469C E701                       	dc.b	smpsNoAttack, $01
0009469E E10B                       	smpsAlterNote       $0B
000946A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946A4 E105                       	smpsAlterNote       $05
000946A6 E701                       	dc.b	smpsNoAttack, $01
000946A8 E101                       	smpsAlterNote       $01
000946AA E701                       	dc.b	smpsNoAttack, $01
000946AC E102                       	smpsAlterNote       $02
000946AE E701                       	dc.b	smpsNoAttack, $01
000946B0 E108                       	smpsAlterNote       $08
000946B2 E701                       	dc.b	smpsNoAttack, $01
000946B4 E10C                       	smpsAlterNote       $0C
000946B6 E701                       	dc.b	smpsNoAttack, $01
000946B8 E108                       	smpsAlterNote       $08
000946BA E701                       	dc.b	smpsNoAttack, $01
000946BC E105                       	smpsAlterNote       $05
000946BE E701                       	dc.b	smpsNoAttack, $01
000946C0 E101                       	smpsAlterNote       $01
000946C2 E701                       	dc.b	smpsNoAttack, $01
000946C4 E105                       	smpsAlterNote       $05
000946C6 E701                       	dc.b	smpsNoAttack, $01
000946C8 E10B                       	smpsAlterNote       $0B
000946CA E701                       	dc.b	smpsNoAttack, $01
000946CC E10C                       	smpsAlterNote       $0C
000946CE E701                       	dc.b	smpsNoAttack, $01
000946D0 E108                       	smpsAlterNote       $08
000946D2 E701                       	dc.b	smpsNoAttack, $01
000946D4 E102                       	smpsAlterNote       $02
000946D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946DA E105                       	smpsAlterNote       $05
000946DC E701                       	dc.b	smpsNoAttack, $01
000946DE E10B                       	smpsAlterNote       $0B
000946E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946E4 E105                       	smpsAlterNote       $05
000946E6 E701                       	dc.b	smpsNoAttack, $01
000946E8 E102                       	smpsAlterNote       $02
000946EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000946EE E108                       	smpsAlterNote       $08
000946F0 E701                       	dc.b	smpsNoAttack, $01
000946F2 E10C                       	smpsAlterNote       $0C
000946F4 E701                       	dc.b	smpsNoAttack, $01
000946F6 E10B                       	smpsAlterNote       $0B
000946F8 E701                       	dc.b	smpsNoAttack, $01
000946FA E105                       	smpsAlterNote       $05
000946FC E701                       	dc.b	smpsNoAttack, $01
000946FE E101                       	smpsAlterNote       $01
00094700 E701                       	dc.b	smpsNoAttack, $01
00094702 E105                       	smpsAlterNote       $05
00094704 E701                       	dc.b	smpsNoAttack, $01
00094706 E108                       	smpsAlterNote       $08
00094708 E701                       	dc.b	smpsNoAttack, $01
0009470A E10C                       	smpsAlterNote       $0C
0009470C E701                       	dc.b	smpsNoAttack, $01
00094710 E10B                       	smpsAlterNote       $0B
00094712 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094716 E109                       	smpsAlterNote       $09
00094718 C404                       	dc.b	nG5, $04
0009471A E10B                       	smpsAlterNote       $0B
0009471C C604 8001                  	dc.b	nA5, $04, nRst, $01
00094720 E107                       	smpsAlterNote       $07
00094722 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00094728 E10B                       	smpsAlterNote       $0B
0009472A C604                       	dc.b	nA5, $04
0009472C E109                       	smpsAlterNote       $09
0009472E C404 8001                  	dc.b	nG5, $04, nRst, $01
00094732 E10B                       	smpsAlterNote       $0B
00094734 C604                       	dc.b	nA5, $04
00094736 E108                       	smpsAlterNote       $08
00094738 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0009473E E106                       	smpsAlterNote       $06
00094740 C904 8001                  	dc.b	nC6, $04, nRst, $01
00094744 E10C                       	smpsAlterNote       $0C
00094746 C704                       	dc.b	nBb5, $04
00094748 E10B                       	smpsAlterNote       $0B
0009474A C604 8001                  	dc.b	nA5, $04, nRst, $01
0009474E E109                       	smpsAlterNote       $09
00094750 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0009475A E10B                       	smpsAlterNote       $0B
0009475C C60D                       	dc.b	nA5, $0D
0009475E E108                       	smpsAlterNote       $08
00094760 E701                       	dc.b	smpsNoAttack, $01
00094762 E104                       	smpsAlterNote       $04
00094764 E701                       	dc.b	smpsNoAttack, $01
00094766 E108                       	smpsAlterNote       $08
00094768 E701                       	dc.b	smpsNoAttack, $01
0009476A E10B                       	smpsAlterNote       $0B
0009476C E701                       	dc.b	smpsNoAttack, $01
0009476E E10F                       	smpsAlterNote       $0F
00094770 E701                       	dc.b	smpsNoAttack, $01
00094772 E10B                       	smpsAlterNote       $0B
00094774 E701                       	dc.b	smpsNoAttack, $01
00094776 E105                       	smpsAlterNote       $05
00094778 E701                       	dc.b	smpsNoAttack, $01
0009477A E104                       	smpsAlterNote       $04
0009477C E701                       	dc.b	smpsNoAttack, $01
0009477E E108                       	smpsAlterNote       $08
00094780 E701                       	dc.b	smpsNoAttack, $01
00094782 E10E                       	smpsAlterNote       $0E
00094784 E701                       	dc.b	smpsNoAttack, $01
00094786 E10F                       	smpsAlterNote       $0F
00094788 8001                       	dc.b	nRst, $01
0009478A E109                       	smpsAlterNote       $09
0009478C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00094792 E108                       	smpsAlterNote       $08
00094794 C10D                       	dc.b	nE5, $0D
00094796 E105                       	smpsAlterNote       $05
00094798 E701                       	dc.b	smpsNoAttack, $01
0009479A E101                       	smpsAlterNote       $01
0009479C E701                       	dc.b	smpsNoAttack, $01
0009479E E105                       	smpsAlterNote       $05
000947A0 E701                       	dc.b	smpsNoAttack, $01
000947A2 E10B                       	smpsAlterNote       $0B
000947A4 E701                       	dc.b	smpsNoAttack, $01
000947A6 E10C                       	smpsAlterNote       $0C
000947A8 E701                       	dc.b	smpsNoAttack, $01
000947AA E108                       	smpsAlterNote       $08
000947AC E701                       	dc.b	smpsNoAttack, $01
000947AE E102                       	smpsAlterNote       $02
000947B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947B4 E105                       	smpsAlterNote       $05
000947B6 E701                       	dc.b	smpsNoAttack, $01
000947B8 E10B                       	smpsAlterNote       $0B
000947BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947BE E105                       	smpsAlterNote       $05
000947C0 E701                       	dc.b	smpsNoAttack, $01
000947C2 E102                       	smpsAlterNote       $02
000947C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947C8 E108                       	smpsAlterNote       $08
000947CA E701                       	dc.b	smpsNoAttack, $01
000947CC E10C                       	smpsAlterNote       $0C
000947CE E701                       	dc.b	smpsNoAttack, $01
000947D0 E10B                       	smpsAlterNote       $0B
000947D2 E701                       	dc.b	smpsNoAttack, $01
000947D4 E105                       	smpsAlterNote       $05
000947D6 E701                       	dc.b	smpsNoAttack, $01
000947D8 E101                       	smpsAlterNote       $01
000947DA E701                       	dc.b	smpsNoAttack, $01
000947DC E105                       	smpsAlterNote       $05
000947DE E701                       	dc.b	smpsNoAttack, $01
000947E0 E108                       	smpsAlterNote       $08
000947E2 E701                       	dc.b	smpsNoAttack, $01
000947E4 E10C                       	smpsAlterNote       $0C
000947E6 E701                       	dc.b	smpsNoAttack, $01
000947E8 E108                       	smpsAlterNote       $08
000947EA E701                       	dc.b	smpsNoAttack, $01
000947EC E102                       	smpsAlterNote       $02
000947EE E701                       	dc.b	smpsNoAttack, $01
000947F0 E101                       	smpsAlterNote       $01
000947F2 E701                       	dc.b	smpsNoAttack, $01
000947F4 E105                       	smpsAlterNote       $05
000947F6 E701                       	dc.b	smpsNoAttack, $01
000947F8 E10B                       	smpsAlterNote       $0B
000947FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000947FE E108                       	smpsAlterNote       $08
00094800 E701                       	dc.b	smpsNoAttack, $01
00094802 E102                       	smpsAlterNote       $02
00094804 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094808 E108                       	smpsAlterNote       $08
0009480A E701                       	dc.b	smpsNoAttack, $01
0009480C E10B                       	smpsAlterNote       $0B
0009480E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094812 E105                       	smpsAlterNote       $05
00094814 E701                       	dc.b	smpsNoAttack, $01
00094816 E101                       	smpsAlterNote       $01
00094818 E701                       	dc.b	smpsNoAttack, $01
0009481A E102                       	smpsAlterNote       $02
0009481C E701                       	dc.b	smpsNoAttack, $01
0009481E E108                       	smpsAlterNote       $08
00094820 E701                       	dc.b	smpsNoAttack, $01
00094822 E10C                       	smpsAlterNote       $0C
00094824 E701                       	dc.b	smpsNoAttack, $01
00094826 E108                       	smpsAlterNote       $08
00094828 E701                       	dc.b	smpsNoAttack, $01
0009482A E105                       	smpsAlterNote       $05
0009482C E701                       	dc.b	smpsNoAttack, $01
0009482E E101                       	smpsAlterNote       $01
00094830 E701                       	dc.b	smpsNoAttack, $01
00094832 E105                       	smpsAlterNote       $05
00094834 E701                       	dc.b	smpsNoAttack, $01
00094836 E10B                       	smpsAlterNote       $0B
00094838 E701                       	dc.b	smpsNoAttack, $01
0009483A E10C                       	smpsAlterNote       $0C
0009483C E701                       	dc.b	smpsNoAttack, $01
0009483E E108                       	smpsAlterNote       $08
00094840 E701                       	dc.b	smpsNoAttack, $01
00094842 E102                       	smpsAlterNote       $02
00094844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094848 E108                       	smpsAlterNote       $08
0009484A E701                       	dc.b	smpsNoAttack, $01
0009484C E10B                       	smpsAlterNote       $0B
0009484E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094852 E105                       	smpsAlterNote       $05
00094854 E701                       	dc.b	smpsNoAttack, $01
00094856 E101                       	smpsAlterNote       $01
00094858 E701                       	dc.b	smpsNoAttack, $01
0009485A E102                       	smpsAlterNote       $02
0009485C E701                       	dc.b	smpsNoAttack, $01
0009485E E108                       	smpsAlterNote       $08
00094860 E701                       	dc.b	smpsNoAttack, $01
00094862 E10C                       	smpsAlterNote       $0C
00094864 E701                       	dc.b	smpsNoAttack, $01
00094866 E108                       	smpsAlterNote       $08
00094868 E701                       	dc.b	smpsNoAttack, $01
0009486A E105                       	smpsAlterNote       $05
0009486C E701                       	dc.b	smpsNoAttack, $01
0009486E E101                       	smpsAlterNote       $01
00094870 E701                       	dc.b	smpsNoAttack, $01
00094872 E105                       	smpsAlterNote       $05
00094874 E701                       	dc.b	smpsNoAttack, $01
00094876 E10B                       	smpsAlterNote       $0B
00094878 E701                       	dc.b	smpsNoAttack, $01
0009487A E10C                       	smpsAlterNote       $0C
0009487C E701                       	dc.b	smpsNoAttack, $01
0009487E E108                       	smpsAlterNote       $08
00094880 E701                       	dc.b	smpsNoAttack, $01
00094882 E102                       	smpsAlterNote       $02
00094884 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094888 E105                       	smpsAlterNote       $05
0009488A E701                       	dc.b	smpsNoAttack, $01
0009488C E10B                       	smpsAlterNote       $0B
0009488E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094892 E105                       	smpsAlterNote       $05
00094894 E701                       	dc.b	smpsNoAttack, $01
00094896 E102                       	smpsAlterNote       $02
00094898 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009489C E108                       	smpsAlterNote       $08
0009489E E701                       	dc.b	smpsNoAttack, $01
000948A0 E10C                       	smpsAlterNote       $0C
000948A2 E701                       	dc.b	smpsNoAttack, $01
000948A4 E10B                       	smpsAlterNote       $0B
000948A6 E701                       	dc.b	smpsNoAttack, $01
000948A8 E105                       	smpsAlterNote       $05
000948AA E701                       	dc.b	smpsNoAttack, $01
000948AC E101                       	smpsAlterNote       $01
000948AE E701                       	dc.b	smpsNoAttack, $01
000948B0 E105                       	smpsAlterNote       $05
000948B2 E701                       	dc.b	smpsNoAttack, $01
000948B4 E108                       	smpsAlterNote       $08
000948B6 E701                       	dc.b	smpsNoAttack, $01
000948B8 E10C                       	smpsAlterNote       $0C
000948BA E701                       	dc.b	smpsNoAttack, $01
000948BC E108                       	smpsAlterNote       $08
000948BE E701                       	dc.b	smpsNoAttack, $01
000948C0 E102                       	smpsAlterNote       $02
000948C2 E701                       	dc.b	smpsNoAttack, $01
000948C4 E101                       	smpsAlterNote       $01
000948C6 E701                       	dc.b	smpsNoAttack, $01
000948C8 E105                       	smpsAlterNote       $05
000948CA E701                       	dc.b	smpsNoAttack, $01
000948CC E10B                       	smpsAlterNote       $0B
000948CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948D2 E108                       	smpsAlterNote       $08
000948D4 E701                       	dc.b	smpsNoAttack, $01
000948D6 E102                       	smpsAlterNote       $02
000948D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948DC E108                       	smpsAlterNote       $08
000948DE E701                       	dc.b	smpsNoAttack, $01
000948E0 E10B                       	smpsAlterNote       $0B
000948E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000948E6 E105                       	smpsAlterNote       $05
000948E8 E701                       	dc.b	smpsNoAttack, $01
000948EA E102                       	smpsAlterNote       $02
000948EC 8001                       	dc.b	nRst, $01
000948EE E107                       	smpsAlterNote       $07
000948F0 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000948F4 E108                       	smpsAlterNote       $08
000948F6 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000948FA E102                       	smpsAlterNote       $02
000948FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094900 E108                       	smpsAlterNote       $08
00094902 E701                       	dc.b	smpsNoAttack, $01
00094904 E10B                       	smpsAlterNote       $0B
00094906 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009490A E105                       	smpsAlterNote       $05
0009490C E701                       	dc.b	smpsNoAttack, $01
0009490E E101                       	smpsAlterNote       $01
00094910 E701                       	dc.b	smpsNoAttack, $01
00094912 E102                       	smpsAlterNote       $02
00094914 E701                       	dc.b	smpsNoAttack, $01
00094916 E108                       	smpsAlterNote       $08
00094918 E701                       	dc.b	smpsNoAttack, $01
0009491A E10C                       	smpsAlterNote       $0C
0009491C E701                       	dc.b	smpsNoAttack, $01
0009491E E108                       	smpsAlterNote       $08
00094920 E701                       	dc.b	smpsNoAttack, $01
00094922 E105                       	smpsAlterNote       $05
00094924 E701                       	dc.b	smpsNoAttack, $01
00094926 E101                       	smpsAlterNote       $01
00094928 E701                       	dc.b	smpsNoAttack, $01
0009492A E105                       	smpsAlterNote       $05
0009492C E701                       	dc.b	smpsNoAttack, $01
0009492E E10B                       	smpsAlterNote       $0B
00094930 E701                       	dc.b	smpsNoAttack, $01
00094932 E10C                       	smpsAlterNote       $0C
00094934 E701                       	dc.b	smpsNoAttack, $01
00094936 E108                       	smpsAlterNote       $08
00094938 E701                       	dc.b	smpsNoAttack, $01
0009493A E102                       	smpsAlterNote       $02
0009493C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094940 E105                       	smpsAlterNote       $05
00094942 E701                       	dc.b	smpsNoAttack, $01
00094944 E10B                       	smpsAlterNote       $0B
00094946 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009494A E105                       	smpsAlterNote       $05
0009494C E701                       	dc.b	smpsNoAttack, $01
0009494E E102                       	smpsAlterNote       $02
00094950 E701                       	dc.b	smpsNoAttack, $01
00094952 E109                       	smpsAlterNote       $09
00094954 C40A C207                  	dc.b	nG5, $0A, nF5, $07
00094958 E108                       	smpsAlterNote       $08
0009495A C10D                       	dc.b	nE5, $0D
0009495C E105                       	smpsAlterNote       $05
0009495E E701                       	dc.b	smpsNoAttack, $01
00094960 E101                       	smpsAlterNote       $01
00094962 E701                       	dc.b	smpsNoAttack, $01
00094964 E102                       	smpsAlterNote       $02
00094966 E701                       	dc.b	smpsNoAttack, $01
00094968 E108                       	smpsAlterNote       $08
0009496A E701                       	dc.b	smpsNoAttack, $01
0009496C E10C                       	smpsAlterNote       $0C
0009496E E701                       	dc.b	smpsNoAttack, $01
00094970 E108                       	smpsAlterNote       $08
00094972 E701                       	dc.b	smpsNoAttack, $01
00094974 E105                       	smpsAlterNote       $05
00094976 E701                       	dc.b	smpsNoAttack, $01
00094978 E101                       	smpsAlterNote       $01
0009497A E701                       	dc.b	smpsNoAttack, $01
0009497C E105                       	smpsAlterNote       $05
0009497E E701                       	dc.b	smpsNoAttack, $01
00094980 E10B                       	smpsAlterNote       $0B
00094982 E701                       	dc.b	smpsNoAttack, $01
00094984 E10C                       	smpsAlterNote       $0C
00094986 E701                       	dc.b	smpsNoAttack, $01
00094988 E108                       	smpsAlterNote       $08
0009498A E701                       	dc.b	smpsNoAttack, $01
0009498C E102                       	smpsAlterNote       $02
0009498E E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00094996 E10B                       	smpsAlterNote       $0B
00094998 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0009499C E10C                       	smpsAlterNote       $0C
0009499E BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000949A2 E10B                       	smpsAlterNote       $0B
000949A4 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000949AA E107                       	smpsAlterNote       $07
000949AC BF03                       	dc.b	nD5, $03
000949AE E108                       	smpsAlterNote       $08
000949B0 C103 8001                  	dc.b	nE5, $03, nRst, $01
000949B4 E109                       	smpsAlterNote       $09
000949B6 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000949BC E10B                       	smpsAlterNote       $0B
000949BE C606 8001                  	dc.b	nA5, $06, nRst, $01
000949C2 E107                       	smpsAlterNote       $07
000949C4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000949C8 E106                       	smpsAlterNote       $06
000949CA C90D                       	dc.b	nC6, $0D
000949CC E103                       	smpsAlterNote       $03
000949CE E701                       	dc.b	smpsNoAttack, $01
000949D0 E1FF                       	smpsAlterNote       $FF
000949D2 E701                       	dc.b	smpsNoAttack, $01
000949D4 E103                       	smpsAlterNote       $03
000949D6 E701                       	dc.b	smpsNoAttack, $01
000949D8 E109                       	smpsAlterNote       $09
000949DA E701                       	dc.b	smpsNoAttack, $01
000949DC E10A                       	smpsAlterNote       $0A
000949DE E701                       	dc.b	smpsNoAttack, $01
000949E0 E106                       	smpsAlterNote       $06
000949E2 E701                       	dc.b	smpsNoAttack, $01
000949E4 E100                       	smpsAlterNote       $00
000949E6 E701                       	dc.b	smpsNoAttack, $01
000949E8 E10C                       	smpsAlterNote       $0C
000949EA C703 8001                  	dc.b	nBb5, $03, nRst, $01
000949EE E10B                       	smpsAlterNote       $0B
000949F0 C603                       	dc.b	nA5, $03
000949F2 E109                       	smpsAlterNote       $09
000949F4 C403 8001                  	dc.b	nG5, $03, nRst, $01
000949F8 E10B                       	smpsAlterNote       $0B
000949FA C60D                       	dc.b	nA5, $0D
000949FC E105                       	smpsAlterNote       $05
000949FE E701                       	dc.b	smpsNoAttack, $01
00094A00 E104                       	smpsAlterNote       $04
00094A02 E701                       	dc.b	smpsNoAttack, $01
00094A04 E108                       	smpsAlterNote       $08
00094A06 E701                       	dc.b	smpsNoAttack, $01
00094A08 E10E                       	smpsAlterNote       $0E
00094A0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A0E E10B                       	smpsAlterNote       $0B
00094A10 E701                       	dc.b	smpsNoAttack, $01
00094A12 E105                       	smpsAlterNote       $05
00094A14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A18 E10B                       	smpsAlterNote       $0B
00094A1A E701                       	dc.b	smpsNoAttack, $01
00094A1C E10E                       	smpsAlterNote       $0E
00094A1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A22 E108                       	smpsAlterNote       $08
00094A24 E701                       	dc.b	smpsNoAttack, $01
00094A26 E104                       	smpsAlterNote       $04
00094A28 E701                       	dc.b	smpsNoAttack, $01
00094A2A E105                       	smpsAlterNote       $05
00094A2C E701                       	dc.b	smpsNoAttack, $01
00094A2E E10B                       	smpsAlterNote       $0B
00094A30 E701                       	dc.b	smpsNoAttack, $01
00094A32 E10F                       	smpsAlterNote       $0F
00094A34 E701                       	dc.b	smpsNoAttack, $01
00094A36 E10B                       	smpsAlterNote       $0B
00094A38 E701                       	dc.b	smpsNoAttack, $01
00094A3A E108                       	smpsAlterNote       $08
00094A3C E701                       	dc.b	smpsNoAttack, $01
00094A3E E104                       	smpsAlterNote       $04
00094A40 E701                       	dc.b	smpsNoAttack, $01
00094A42 E108                       	smpsAlterNote       $08
00094A44 E701                       	dc.b	smpsNoAttack, $01
00094A46 E10E                       	smpsAlterNote       $0E
00094A48 E701                       	dc.b	smpsNoAttack, $01
00094A4A E10F                       	smpsAlterNote       $0F
00094A4C E701                       	dc.b	smpsNoAttack, $01
00094A4E E10B                       	smpsAlterNote       $0B
00094A50 E701                       	dc.b	smpsNoAttack, $01
00094A52 E105                       	smpsAlterNote       $05
00094A54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094A58 E108                       	smpsAlterNote       $08
00094A5A E701                       	dc.b	smpsNoAttack, $01
00094A5C E10E                       	smpsAlterNote       $0E
00094A5E E701                       	dc.b	smpsNoAttack, $01
00094A60 E10F                       	smpsAlterNote       $0F
00094A62 800F                       	dc.b	nRst, $0F
00094A64 E107                       	smpsAlterNote       $07
00094A66 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00094A6A E108                       	smpsAlterNote       $08
00094A6C C103                       	dc.b	nE5, $03
00094A6E E109                       	smpsAlterNote       $09
00094A70 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00094A76 E10B                       	smpsAlterNote       $0B
00094A78 C607                       	dc.b	nA5, $07
00094A7A E107                       	smpsAlterNote       $07
00094A7C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094A80 E106                       	smpsAlterNote       $06
00094A82 C90D                       	dc.b	nC6, $0D
00094A84 E107                       	smpsAlterNote       $07
00094A86 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00094A8A E10C                       	smpsAlterNote       $0C
00094A8C C704                       	dc.b	nBb5, $04
00094A8E E10B                       	smpsAlterNote       $0B
00094A90 C604 8001                  	dc.b	nA5, $04, nRst, $01
00094A94 E109                       	smpsAlterNote       $09
00094A96 C404                       	dc.b	nG5, $04
00094A98 E10B                       	smpsAlterNote       $0B
00094A9A C60D                       	dc.b	nA5, $0D
00094A9C E108                       	smpsAlterNote       $08
00094A9E E701                       	dc.b	smpsNoAttack, $01
00094AA0 E105                       	smpsAlterNote       $05
00094AA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AA6 E10B                       	smpsAlterNote       $0B
00094AA8 E701                       	dc.b	smpsNoAttack, $01
00094AAA E10F                       	smpsAlterNote       $0F
00094AAC E701                       	dc.b	smpsNoAttack, $01
00094AAE E10E                       	smpsAlterNote       $0E
00094AB0 E701                       	dc.b	smpsNoAttack, $01
00094AB2 E108                       	smpsAlterNote       $08
00094AB4 E701                       	dc.b	smpsNoAttack, $01
00094AB6 E104                       	smpsAlterNote       $04
00094AB8 E701                       	dc.b	smpsNoAttack, $01
00094ABA E108                       	smpsAlterNote       $08
00094ABC E701                       	dc.b	smpsNoAttack, $01
00094ABE E10B                       	smpsAlterNote       $0B
00094AC0 E701                       	dc.b	smpsNoAttack, $01
00094AC2 E10F                       	smpsAlterNote       $0F
00094AC4 E701                       	dc.b	smpsNoAttack, $01
00094AC6 E10B                       	smpsAlterNote       $0B
00094AC8 E701                       	dc.b	smpsNoAttack, $01
00094ACA E105                       	smpsAlterNote       $05
00094ACC E701                       	dc.b	smpsNoAttack, $01
00094ACE E104                       	smpsAlterNote       $04
00094AD0 E701                       	dc.b	smpsNoAttack, $01
00094AD2 E108                       	smpsAlterNote       $08
00094AD4 E701                       	dc.b	smpsNoAttack, $01
00094AD6 E10E                       	smpsAlterNote       $0E
00094AD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094ADC E10B                       	smpsAlterNote       $0B
00094ADE E701                       	dc.b	smpsNoAttack, $01
00094AE0 E105                       	smpsAlterNote       $05
00094AE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AE6 E10B                       	smpsAlterNote       $0B
00094AE8 E701                       	dc.b	smpsNoAttack, $01
00094AEA E10E                       	smpsAlterNote       $0E
00094AEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094AF0 E108                       	smpsAlterNote       $08
00094AF2 E701                       	dc.b	smpsNoAttack, $01
00094AF4 E105                       	smpsAlterNote       $05
00094AF6 8001                       	dc.b	nRst, $01
00094AF8 E109                       	smpsAlterNote       $09
00094AFA C401 8001                  	dc.b	nG5, $01, nRst, $01
00094AFE E10B                       	smpsAlterNote       $0B
00094B00 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00094B08 E109                       	smpsAlterNote       $09
00094B0A C404                       	dc.b	nG5, $04
00094B0C E10B                       	smpsAlterNote       $0B
00094B0E C604 8001                  	dc.b	nA5, $04, nRst, $01
00094B12 E107                       	smpsAlterNote       $07
00094B14 BF0D                       	dc.b	nD5, $0D
00094B16 E101                       	smpsAlterNote       $01
00094B18 E701                       	dc.b	smpsNoAttack, $01
00094B1A E100                       	smpsAlterNote       $00
00094B1C E701                       	dc.b	smpsNoAttack, $01
00094B1E E104                       	smpsAlterNote       $04
00094B20 E701                       	dc.b	smpsNoAttack, $01
00094B22 E10A                       	smpsAlterNote       $0A
00094B24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B28 E107                       	smpsAlterNote       $07
00094B2A E701                       	dc.b	smpsNoAttack, $01
00094B2C E101                       	smpsAlterNote       $01
00094B2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B32 E107                       	smpsAlterNote       $07
00094B34 E701                       	dc.b	smpsNoAttack, $01
00094B36 E10A                       	smpsAlterNote       $0A
00094B38 E701                       	dc.b	smpsNoAttack, $01
00094B3A E10B                       	smpsAlterNote       $0B
00094B3C 8001                       	dc.b	nRst, $01
00094B3E E108                       	smpsAlterNote       $08
00094B40 8001                       	dc.b	nRst, $01
00094B42 E109                       	smpsAlterNote       $09
00094B44 8001 C401                  	dc.b	nRst, $01, nG5, $01
00094B48 E10B                       	smpsAlterNote       $0B
00094B4A C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00094B52 E108                       	smpsAlterNote       $08
00094B54 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00094B58 E109                       	smpsAlterNote       $09
00094B5A CE06 8001                  	dc.b	nF6, $06, nRst, $01
00094B5E E108                       	smpsAlterNote       $08
00094B60 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00094B64 E106                       	smpsAlterNote       $06
00094B66 C903                       	dc.b	nC6, $03
00094B68 E109                       	smpsAlterNote       $09
00094B6A C403 8001                  	dc.b	nG5, $03, nRst, $01
00094B6E E10C                       	smpsAlterNote       $0C
00094B70 C70D                       	dc.b	nBb5, $0D
00094B72 E109                       	smpsAlterNote       $09
00094B74 E701                       	dc.b	smpsNoAttack, $01
00094B76 E105                       	smpsAlterNote       $05
00094B78 E701                       	dc.b	smpsNoAttack, $01
00094B7A E109                       	smpsAlterNote       $09
00094B7C E701                       	dc.b	smpsNoAttack, $01
00094B7E E10F                       	smpsAlterNote       $0F
00094B80 E701                       	dc.b	smpsNoAttack, $01
00094B82 E110                       	smpsAlterNote       $10
00094B84 E701                       	dc.b	smpsNoAttack, $01
00094B86 E10C                       	smpsAlterNote       $0C
00094B88 E701                       	dc.b	smpsNoAttack, $01
00094B8A E106                       	smpsAlterNote       $06
00094B8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094B90 E109                       	smpsAlterNote       $09
00094B92 E701                       	dc.b	smpsNoAttack, $01
00094B94 E10F                       	smpsAlterNote       $0F
00094B96 E701                       	dc.b	smpsNoAttack, $01
00094B98 E110                       	smpsAlterNote       $10
00094B9A 8001                       	dc.b	nRst, $01
00094B9C E10B                       	smpsAlterNote       $0B
00094B9E C606 8001                  	dc.b	nA5, $06, nRst, $01
00094BA2 E109                       	smpsAlterNote       $09
00094BA4 C40D                       	dc.b	nG5, $0D
00094BA6 E103                       	smpsAlterNote       $03
00094BA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BAC E106                       	smpsAlterNote       $06
00094BAE E701                       	dc.b	smpsNoAttack, $01
00094BB0 E10C                       	smpsAlterNote       $0C
00094BB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BB6 E106                       	smpsAlterNote       $06
00094BB8 E701                       	dc.b	smpsNoAttack, $01
00094BBA E103                       	smpsAlterNote       $03
00094BBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094BC0 E109                       	smpsAlterNote       $09
00094BC2 E701                       	dc.b	smpsNoAttack, $01
00094BC4 E10D                       	smpsAlterNote       $0D
00094BC6 E701                       	dc.b	smpsNoAttack, $01
00094BC8 E10C                       	smpsAlterNote       $0C
00094BCA E701                       	dc.b	smpsNoAttack, $01
00094BCC E106                       	smpsAlterNote       $06
00094BCE E701                       	dc.b	smpsNoAttack, $01
00094BD0 E102                       	smpsAlterNote       $02
00094BD2 E701                       	dc.b	smpsNoAttack, $01
00094BD4 E103                       	smpsAlterNote       $03
00094BD6 8001                       	dc.b	nRst, $01
00094BD8 E10B                       	smpsAlterNote       $0B
00094BDA C60D                       	dc.b	nA5, $0D
00094BDC E108                       	smpsAlterNote       $08
00094BDE E701                       	dc.b	smpsNoAttack, $01
00094BE0 E104                       	smpsAlterNote       $04
00094BE2 E701                       	dc.b	smpsNoAttack, $01
00094BE4 E108                       	smpsAlterNote       $08
00094BE6 E701                       	dc.b	smpsNoAttack, $01
00094BE8 E10B                       	smpsAlterNote       $0B
00094BEA E701                       	dc.b	smpsNoAttack, $01
00094BEC E10F                       	smpsAlterNote       $0F
00094BEE E701                       	dc.b	smpsNoAttack, $01
00094BF0 E10B                       	smpsAlterNote       $0B
00094BF2 E701                       	dc.b	smpsNoAttack, $01
00094BF4 E105                       	smpsAlterNote       $05
00094BF6 E701                       	dc.b	smpsNoAttack, $01
00094BF8 E104                       	smpsAlterNote       $04
00094BFA E701                       	dc.b	smpsNoAttack, $01
00094BFC E108                       	smpsAlterNote       $08
00094BFE E701                       	dc.b	smpsNoAttack, $01
00094C00 E10E                       	smpsAlterNote       $0E
00094C02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C06 E10B                       	smpsAlterNote       $0B
00094C08 E701                       	dc.b	smpsNoAttack, $01
00094C0A E105                       	smpsAlterNote       $05
00094C0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C10 E10C                       	smpsAlterNote       $0C
00094C12 C70E                       	dc.b	nBb5, $0E
00094C14 E106                       	smpsAlterNote       $06
00094C16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C1A E10C                       	smpsAlterNote       $0C
00094C1C E701                       	dc.b	smpsNoAttack, $01
00094C1E E10F                       	smpsAlterNote       $0F
00094C20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094C24 E109                       	smpsAlterNote       $09
00094C26 E701                       	dc.b	smpsNoAttack, $01
00094C28 E105                       	smpsAlterNote       $05
00094C2A E701                       	dc.b	smpsNoAttack, $01
00094C2C E106                       	smpsAlterNote       $06
00094C2E E701                       	dc.b	smpsNoAttack, $01
00094C30 E10C                       	smpsAlterNote       $0C
00094C32 E701                       	dc.b	smpsNoAttack, $01
00094C34 E110                       	smpsAlterNote       $10
00094C36 E701                       	dc.b	smpsNoAttack, $01
00094C38 E10C                       	smpsAlterNote       $0C
00094C3A E701                       	dc.b	smpsNoAttack, $01
00094C3C E109                       	smpsAlterNote       $09
00094C3E E701                       	dc.b	smpsNoAttack, $01
00094C40 E105                       	smpsAlterNote       $05
00094C42 E701                       	dc.b	smpsNoAttack, $01
00094C44 E106                       	smpsAlterNote       $06
00094C46 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00094C4A E107                       	smpsAlterNote       $07
00094C4C CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00094C51 E108                       	smpsAlterNote       $08
00094C53 CD0D                       	dc.b	nE6, $0D
00094C55 E107                       	smpsAlterNote       $07
00094C57 CB0D                       	dc.b	nD6, $0D
00094C59 E104                       	smpsAlterNote       $04
00094C5B E701                       	dc.b	smpsNoAttack, $01
00094C5D E100                       	smpsAlterNote       $00
00094C5F E701                       	dc.b	smpsNoAttack, $01
00094C61 E101                       	smpsAlterNote       $01
00094C63 E701                       	dc.b	smpsNoAttack, $01
00094C65 E107                       	smpsAlterNote       $07
00094C67 E701                       	dc.b	smpsNoAttack, $01
00094C69 E10B                       	smpsAlterNote       $0B
00094C6B E701                       	dc.b	smpsNoAttack, $01
00094C6D E107                       	smpsAlterNote       $07
00094C6F E701                       	dc.b	smpsNoAttack, $01
00094C71 E104                       	smpsAlterNote       $04
00094C73 E701                       	dc.b	smpsNoAttack, $01
00094C75 E100                       	smpsAlterNote       $00
00094C77 E701                       	dc.b	smpsNoAttack, $01
00094C79 E104                       	smpsAlterNote       $04
00094C7B E701                       	dc.b	smpsNoAttack, $01
00094C7D E10A                       	smpsAlterNote       $0A
00094C7F E701                       	dc.b	smpsNoAttack, $01
00094C81 E10B                       	smpsAlterNote       $0B
00094C83 E701                       	dc.b	smpsNoAttack, $01
00094C85 E108                       	smpsAlterNote       $08
00094C87 CC0D                       	dc.b	nEb6, $0D
00094C89 E105                       	smpsAlterNote       $05
00094C8B E701                       	dc.b	smpsNoAttack, $01
00094C8D E101                       	smpsAlterNote       $01
00094C8F E701                       	dc.b	smpsNoAttack, $01
00094C91 E102                       	smpsAlterNote       $02
00094C93 E701                       	dc.b	smpsNoAttack, $01
00094C95 E108                       	smpsAlterNote       $08
00094C97 E701                       	dc.b	smpsNoAttack, $01
00094C99 E106                       	smpsAlterNote       $06
00094C9B C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00094CA7 8001                       	dc.b	nRst, $01
00094CA9 E107                       	smpsAlterNote       $07
00094CAB CB0D                       	dc.b	nD6, $0D
00094CAD E104                       	smpsAlterNote       $04
00094CAF E701                       	dc.b	smpsNoAttack, $01
00094CB1 E100                       	smpsAlterNote       $00
00094CB3 E701                       	dc.b	smpsNoAttack, $01
00094CB5 E104                       	smpsAlterNote       $04
00094CB7 E701                       	dc.b	smpsNoAttack, $01
00094CB9 E107                       	smpsAlterNote       $07
00094CBB E701                       	dc.b	smpsNoAttack, $01
00094CBD E10B                       	smpsAlterNote       $0B
00094CBF E701                       	dc.b	smpsNoAttack, $01
00094CC1 E107                       	smpsAlterNote       $07
00094CC3 E701                       	dc.b	smpsNoAttack, $01
00094CC5 E101                       	smpsAlterNote       $01
00094CC7 E701                       	dc.b	smpsNoAttack, $01
00094CC9 E100                       	smpsAlterNote       $00
00094CCB E701                       	dc.b	smpsNoAttack, $01
00094CCD E104                       	smpsAlterNote       $04
00094CCF E701                       	dc.b	smpsNoAttack, $01
00094CD1 E10A                       	smpsAlterNote       $0A
00094CD3 E701                       	dc.b	smpsNoAttack, $01
00094CD5 E10B                       	smpsAlterNote       $0B
00094CD7 8001                       	dc.b	nRst, $01
00094CD9 E109                       	smpsAlterNote       $09
00094CDB CE0A                       	dc.b	nF6, $0A
00094CDD E108                       	smpsAlterNote       $08
00094CDF CC07                       	dc.b	nEb6, $07
00094CE1 E106                       	smpsAlterNote       $06
00094CE3 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00094CEF E107                       	smpsAlterNote       $07
00094CF1 CB0D                       	dc.b	nD6, $0D
00094CF3 E101                       	smpsAlterNote       $01
00094CF5 E701                       	dc.b	smpsNoAttack, $01
00094CF7 E100                       	smpsAlterNote       $00
00094CF9 E701                       	dc.b	smpsNoAttack, $01
00094CFB E104                       	smpsAlterNote       $04
00094CFD E701                       	dc.b	smpsNoAttack, $01
00094CFF E10A                       	smpsAlterNote       $0A
00094D01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D05 E107                       	smpsAlterNote       $07
00094D07 E701                       	dc.b	smpsNoAttack, $01
00094D09 E101                       	smpsAlterNote       $01
00094D0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D0F E107                       	smpsAlterNote       $07
00094D11 E701                       	dc.b	smpsNoAttack, $01
00094D13 E10A                       	smpsAlterNote       $0A
00094D15 E701                       	dc.b	smpsNoAttack, $01
00094D17 E10B                       	smpsAlterNote       $0B
00094D19 8001                       	dc.b	nRst, $01
00094D1B E108                       	smpsAlterNote       $08
00094D1D CC0D                       	dc.b	nEb6, $0D
00094D1F E102                       	smpsAlterNote       $02
00094D21 E701                       	dc.b	smpsNoAttack, $01
00094D23 E101                       	smpsAlterNote       $01
00094D25 E701                       	dc.b	smpsNoAttack, $01
00094D27 E105                       	smpsAlterNote       $05
00094D29 E701                       	dc.b	smpsNoAttack, $01
00094D2B E108                       	smpsAlterNote       $08
00094D2D 8001                       	dc.b	nRst, $01
00094D2F E106                       	smpsAlterNote       $06
00094D31 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00094D3D 8001                       	dc.b	nRst, $01
00094D3F E107                       	smpsAlterNote       $07
00094D41 CB0D                       	dc.b	nD6, $0D
00094D43 E101                       	smpsAlterNote       $01
00094D45 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D49 E104                       	smpsAlterNote       $04
00094D4B E701                       	dc.b	smpsNoAttack, $01
00094D4D E10A                       	smpsAlterNote       $0A
00094D4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D53 E104                       	smpsAlterNote       $04
00094D55 E701                       	dc.b	smpsNoAttack, $01
00094D57 E101                       	smpsAlterNote       $01
00094D59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094D5D E107                       	smpsAlterNote       $07
00094D5F E701                       	dc.b	smpsNoAttack, $01
00094D61 E10B                       	smpsAlterNote       $0B
00094D63 E701                       	dc.b	smpsNoAttack, $01
00094D65 E10A                       	smpsAlterNote       $0A
00094D67 E701                       	dc.b	smpsNoAttack, $01
00094D69 E104                       	smpsAlterNote       $04
00094D6B E701                       	dc.b	smpsNoAttack, $01
00094D6D E100                       	smpsAlterNote       $00
00094D6F E701                       	dc.b	smpsNoAttack, $01
00094D71 E101                       	smpsAlterNote       $01
00094D73 801C                       	dc.b	nRst, $1C
00094D77 E107                       	smpsAlterNote       $07
00094D79 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00094D7D E603                       	smpsAlterVol        $03
00094D7F F6F1 AD                    	smpsJump            music84_Jump03
00094D82                            
00094D82                            ; FM3 Data
00094D82                            music84_FM3:
00094D82 E0C0                       	smpsPan             panCenter, $00
00094D86 E109                       	smpsAlterNote       $09
00094D88 C203 8007                  	dc.b	nF5, $03, nRst, $07
00094D8C E108                       	smpsAlterNote       $08
00094D8E C103 800B                  	dc.b	nE5, $03, nRst, $0B
00094D92 E10B                       	smpsAlterNote       $0B
00094D94 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00094D9A E040                       	smpsPan             panRight, $00
00094D9C E110                       	smpsAlterNote       $10
00094D9E E6F9                       	smpsAlterVol        $F9
00094DA0 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00094DA4 E10F                       	smpsAlterNote       $0F
00094DA6 C603                       	dc.b	nA5, $03
00094DA8 E10D                       	smpsAlterNote       $0D
00094DAA C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00094DB0 E10C                       	smpsAlterNote       $0C
00094DB2 C103 8001                  	dc.b	nE5, $03, nRst, $01
00094DB6 E10A                       	smpsAlterNote       $0A
00094DB8 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00094DBC E10F                       	smpsAlterNote       $0F
00094DBE BA01 8001                  	dc.b	nA4, $01, nRst, $01
00094DC2 E0C0                       	smpsPan             panCenter, $00
00094DC6 E109                       	smpsAlterNote       $09
00094DC8 E609                       	smpsAlterVol        $09
00094DCA B603                       	dc.b	nF4, $03
00094DCC                            
00094DCC                            music84_Jump02:
00094DCC E70A                       	dc.b	smpsNoAttack, $0A
00094DCE E103                       	smpsAlterNote       $03
00094DD0 E701                       	dc.b	smpsNoAttack, $01
00094DD2 E102                       	smpsAlterNote       $02
00094DD4 E701                       	dc.b	smpsNoAttack, $01
00094DD6 E106                       	smpsAlterNote       $06
00094DD8 E701                       	dc.b	smpsNoAttack, $01
00094DDA E10C                       	smpsAlterNote       $0C
00094DDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DE0 E109                       	smpsAlterNote       $09
00094DE2 E701                       	dc.b	smpsNoAttack, $01
00094DE4 E103                       	smpsAlterNote       $03
00094DE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094DEA E109                       	smpsAlterNote       $09
00094DEC E701                       	dc.b	smpsNoAttack, $01
00094DEE E10C                       	smpsAlterNote       $0C
00094DF0 E701                       	dc.b	smpsNoAttack, $01
00094DF2 E10D                       	smpsAlterNote       $0D
00094DF4 8001                       	dc.b	nRst, $01
00094DF6 E109                       	smpsAlterNote       $09
00094DF8 B80D                       	dc.b	nG4, $0D
00094DFA E103                       	smpsAlterNote       $03
00094DFC E701                       	dc.b	smpsNoAttack, $01
00094DFE E102                       	smpsAlterNote       $02
00094E00 E701                       	dc.b	smpsNoAttack, $01
00094E02 E106                       	smpsAlterNote       $06
00094E04 E701                       	dc.b	smpsNoAttack, $01
00094E06 E10C                       	smpsAlterNote       $0C
00094E08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E0C E109                       	smpsAlterNote       $09
00094E0E E701                       	dc.b	smpsNoAttack, $01
00094E10 E103                       	smpsAlterNote       $03
00094E12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E16 E109                       	smpsAlterNote       $09
00094E18 E701                       	dc.b	smpsNoAttack, $01
00094E1A E10C                       	smpsAlterNote       $0C
00094E1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E20 E106                       	smpsAlterNote       $06
00094E22 E701                       	dc.b	smpsNoAttack, $01
00094E24 E102                       	smpsAlterNote       $02
00094E26 E701                       	dc.b	smpsNoAttack, $01
00094E28 E103                       	smpsAlterNote       $03
00094E2A E701                       	dc.b	smpsNoAttack, $01
00094E2C E109                       	smpsAlterNote       $09
00094E2E E701                       	dc.b	smpsNoAttack, $01
00094E30 E10D                       	smpsAlterNote       $0D
00094E32 E701                       	dc.b	smpsNoAttack, $01
00094E34 E109                       	smpsAlterNote       $09
00094E36 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00094E3A E10B                       	smpsAlterNote       $0B
00094E3C BA0D                       	dc.b	nA4, $0D
00094E3E E105                       	smpsAlterNote       $05
00094E40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E44 E108                       	smpsAlterNote       $08
00094E46 E701                       	dc.b	smpsNoAttack, $01
00094E48 E10E                       	smpsAlterNote       $0E
00094E4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E4E E108                       	smpsAlterNote       $08
00094E50 E701                       	dc.b	smpsNoAttack, $01
00094E52 E104                       	smpsAlterNote       $04
00094E54 E701                       	dc.b	smpsNoAttack, $01
00094E56 E105                       	smpsAlterNote       $05
00094E58 E701                       	dc.b	smpsNoAttack, $01
00094E5A E10B                       	smpsAlterNote       $0B
00094E5C E701                       	dc.b	smpsNoAttack, $01
00094E5E E10F                       	smpsAlterNote       $0F
00094E60 E701                       	dc.b	smpsNoAttack, $01
00094E62 E10B                       	smpsAlterNote       $0B
00094E64 E701                       	dc.b	smpsNoAttack, $01
00094E66 E108                       	smpsAlterNote       $08
00094E68 E701                       	dc.b	smpsNoAttack, $01
00094E6A E104                       	smpsAlterNote       $04
00094E6C E701                       	dc.b	smpsNoAttack, $01
00094E6E E108                       	smpsAlterNote       $08
00094E70 E701                       	dc.b	smpsNoAttack, $01
00094E72 E10E                       	smpsAlterNote       $0E
00094E74 E701                       	dc.b	smpsNoAttack, $01
00094E76 E10F                       	smpsAlterNote       $0F
00094E78 E701                       	dc.b	smpsNoAttack, $01
00094E7A E10B                       	smpsAlterNote       $0B
00094E7C E701                       	dc.b	smpsNoAttack, $01
00094E7E E105                       	smpsAlterNote       $05
00094E80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E84 E108                       	smpsAlterNote       $08
00094E86 E701                       	dc.b	smpsNoAttack, $01
00094E88 E10E                       	smpsAlterNote       $0E
00094E8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E8E E108                       	smpsAlterNote       $08
00094E90 E701                       	dc.b	smpsNoAttack, $01
00094E92 E105                       	smpsAlterNote       $05
00094E94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094E98 E10B                       	smpsAlterNote       $0B
00094E9A E701                       	dc.b	smpsNoAttack, $01
00094E9C E10F                       	smpsAlterNote       $0F
00094E9E E701                       	dc.b	smpsNoAttack, $01
00094EA0 E10E                       	smpsAlterNote       $0E
00094EA2 E701                       	dc.b	smpsNoAttack, $01
00094EA4 E108                       	smpsAlterNote       $08
00094EA6 E701                       	dc.b	smpsNoAttack, $01
00094EA8 E104                       	smpsAlterNote       $04
00094EAA E701                       	dc.b	smpsNoAttack, $01
00094EAC E105                       	smpsAlterNote       $05
00094EAE 8001                       	dc.b	nRst, $01
00094EB0 E108                       	smpsAlterNote       $08
00094EB2 B50A                       	dc.b	nE4, $0A
00094EB4 E109                       	smpsAlterNote       $09
00094EB6 B60D                       	dc.b	nF4, $0D
00094EB8 E106                       	smpsAlterNote       $06
00094EBA E701                       	dc.b	smpsNoAttack, $01
00094EBC E103                       	smpsAlterNote       $03
00094EBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EC2 E109                       	smpsAlterNote       $09
00094EC4 E701                       	dc.b	smpsNoAttack, $01
00094EC6 E10D                       	smpsAlterNote       $0D
00094EC8 E701                       	dc.b	smpsNoAttack, $01
00094ECA E10C                       	smpsAlterNote       $0C
00094ECC E701                       	dc.b	smpsNoAttack, $01
00094ECE E106                       	smpsAlterNote       $06
00094ED0 E701                       	dc.b	smpsNoAttack, $01
00094ED2 E102                       	smpsAlterNote       $02
00094ED4 E701                       	dc.b	smpsNoAttack, $01
00094ED6 E106                       	smpsAlterNote       $06
00094ED8 E701                       	dc.b	smpsNoAttack, $01
00094EDA E109                       	smpsAlterNote       $09
00094EDC E701                       	dc.b	smpsNoAttack, $01
00094EDE E10D                       	smpsAlterNote       $0D
00094EE0 E701                       	dc.b	smpsNoAttack, $01
00094EE2 E109                       	smpsAlterNote       $09
00094EE4 B80D                       	dc.b	nG4, $0D
00094EE6 E106                       	smpsAlterNote       $06
00094EE8 E701                       	dc.b	smpsNoAttack, $01
00094EEA E103                       	smpsAlterNote       $03
00094EEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094EF0 E109                       	smpsAlterNote       $09
00094EF2 E701                       	dc.b	smpsNoAttack, $01
00094EF4 E10D                       	smpsAlterNote       $0D
00094EF6 E701                       	dc.b	smpsNoAttack, $01
00094EF8 E10C                       	smpsAlterNote       $0C
00094EFA E701                       	dc.b	smpsNoAttack, $01
00094EFC E106                       	smpsAlterNote       $06
00094EFE E701                       	dc.b	smpsNoAttack, $01
00094F00 E102                       	smpsAlterNote       $02
00094F02 E701                       	dc.b	smpsNoAttack, $01
00094F04 E106                       	smpsAlterNote       $06
00094F06 E701                       	dc.b	smpsNoAttack, $01
00094F08 E109                       	smpsAlterNote       $09
00094F0A E701                       	dc.b	smpsNoAttack, $01
00094F0C E10D                       	smpsAlterNote       $0D
00094F0E E701                       	dc.b	smpsNoAttack, $01
00094F10 E109                       	smpsAlterNote       $09
00094F12 E701                       	dc.b	smpsNoAttack, $01
00094F14 E103                       	smpsAlterNote       $03
00094F16 E701                       	dc.b	smpsNoAttack, $01
00094F18 E102                       	smpsAlterNote       $02
00094F1A E701                       	dc.b	smpsNoAttack, $01
00094F1C E106                       	smpsAlterNote       $06
00094F1E E701                       	dc.b	smpsNoAttack, $01
00094F20 E10C                       	smpsAlterNote       $0C
00094F22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F26 E109                       	smpsAlterNote       $09
00094F28 E701                       	dc.b	smpsNoAttack, $01
00094F2A E10B                       	smpsAlterNote       $0B
00094F2C BA0D                       	dc.b	nA4, $0D
00094F2E E108                       	smpsAlterNote       $08
00094F30 E701                       	dc.b	smpsNoAttack, $01
00094F32 E104                       	smpsAlterNote       $04
00094F34 E701                       	dc.b	smpsNoAttack, $01
00094F36 E108                       	smpsAlterNote       $08
00094F38 E701                       	dc.b	smpsNoAttack, $01
00094F3A E10B                       	smpsAlterNote       $0B
00094F3C E701                       	dc.b	smpsNoAttack, $01
00094F3E E10F                       	smpsAlterNote       $0F
00094F40 E701                       	dc.b	smpsNoAttack, $01
00094F42 E10B                       	smpsAlterNote       $0B
00094F44 E701                       	dc.b	smpsNoAttack, $01
00094F46 E105                       	smpsAlterNote       $05
00094F48 E701                       	dc.b	smpsNoAttack, $01
00094F4A E104                       	smpsAlterNote       $04
00094F4C E701                       	dc.b	smpsNoAttack, $01
00094F4E E108                       	smpsAlterNote       $08
00094F50 E701                       	dc.b	smpsNoAttack, $01
00094F52 E10E                       	smpsAlterNote       $0E
00094F54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F58 E10B                       	smpsAlterNote       $0B
00094F5A E701                       	dc.b	smpsNoAttack, $01
00094F5C E105                       	smpsAlterNote       $05
00094F5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F62 E10B                       	smpsAlterNote       $0B
00094F64 E701                       	dc.b	smpsNoAttack, $01
00094F66 E10E                       	smpsAlterNote       $0E
00094F68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094F6C E108                       	smpsAlterNote       $08
00094F6E E701                       	dc.b	smpsNoAttack, $01
00094F70 E104                       	smpsAlterNote       $04
00094F72 E701                       	dc.b	smpsNoAttack, $01
00094F74 E105                       	smpsAlterNote       $05
00094F76 E701                       	dc.b	smpsNoAttack, $01
00094F78 E10B                       	smpsAlterNote       $0B
00094F7A E701                       	dc.b	smpsNoAttack, $01
00094F7C E10F                       	smpsAlterNote       $0F
00094F7E E701                       	dc.b	smpsNoAttack, $01
00094F80 E10B                       	smpsAlterNote       $0B
00094F82 E701                       	dc.b	smpsNoAttack, $01
00094F84 E108                       	smpsAlterNote       $08
00094F86 E701                       	dc.b	smpsNoAttack, $01
00094F88 E105                       	smpsAlterNote       $05
00094F8A 8001                       	dc.b	nRst, $01
00094F8C E109                       	smpsAlterNote       $09
00094F8E B609 8001                  	dc.b	nF4, $09, nRst, $01
00094F92 E108                       	smpsAlterNote       $08
00094F94 B506 8001                  	dc.b	nE4, $06, nRst, $01
00094F98 E107                       	smpsAlterNote       $07
00094F9A B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00094F9E E108                       	smpsAlterNote       $08
00094FA0 B502 8001                  	dc.b	nE4, $02, nRst, $01
00094FA4 E109                       	smpsAlterNote       $09
00094FA6 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00094FAC E10B                       	smpsAlterNote       $0B
00094FAE BA0D                       	dc.b	nA4, $0D
00094FB0 E108                       	smpsAlterNote       $08
00094FB2 E701                       	dc.b	smpsNoAttack, $01
00094FB4 E104                       	smpsAlterNote       $04
00094FB6 E701                       	dc.b	smpsNoAttack, $01
00094FB8 E108                       	smpsAlterNote       $08
00094FBA E701                       	dc.b	smpsNoAttack, $01
00094FBC E10E                       	smpsAlterNote       $0E
00094FBE E701                       	dc.b	smpsNoAttack, $01
00094FC0 E10F                       	smpsAlterNote       $0F
00094FC2 E701                       	dc.b	smpsNoAttack, $01
00094FC4 E10B                       	smpsAlterNote       $0B
00094FC6 E701                       	dc.b	smpsNoAttack, $01
00094FC8 E105                       	smpsAlterNote       $05
00094FCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FCE E108                       	smpsAlterNote       $08
00094FD0 E701                       	dc.b	smpsNoAttack, $01
00094FD2 E10E                       	smpsAlterNote       $0E
00094FD4 E701                       	dc.b	smpsNoAttack, $01
00094FD6 E10F                       	smpsAlterNote       $0F
00094FD8 8001                       	dc.b	nRst, $01
00094FDA E109                       	smpsAlterNote       $09
00094FDC C20D                       	dc.b	nF5, $0D
00094FDE E103                       	smpsAlterNote       $03
00094FE0 E701                       	dc.b	smpsNoAttack, $01
00094FE2 E102                       	smpsAlterNote       $02
00094FE4 E701                       	dc.b	smpsNoAttack, $01
00094FE6 E106                       	smpsAlterNote       $06
00094FE8 E701                       	dc.b	smpsNoAttack, $01
00094FEA E10C                       	smpsAlterNote       $0C
00094FEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FF0 E109                       	smpsAlterNote       $09
00094FF2 E701                       	dc.b	smpsNoAttack, $01
00094FF4 E103                       	smpsAlterNote       $03
00094FF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00094FFA E109                       	smpsAlterNote       $09
00094FFC E701                       	dc.b	smpsNoAttack, $01
00094FFE E10C                       	smpsAlterNote       $0C
00095000 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095004 E106                       	smpsAlterNote       $06
00095006 E701                       	dc.b	smpsNoAttack, $01
00095008 E102                       	smpsAlterNote       $02
0009500A E701                       	dc.b	smpsNoAttack, $01
0009500C E103                       	smpsAlterNote       $03
0009500E E701                       	dc.b	smpsNoAttack, $01
00095010 E109                       	smpsAlterNote       $09
00095012 E701                       	dc.b	smpsNoAttack, $01
00095014 E10D                       	smpsAlterNote       $0D
00095016 E701                       	dc.b	smpsNoAttack, $01
00095018 E109                       	smpsAlterNote       $09
0009501A E701                       	dc.b	smpsNoAttack, $01
0009501C E106                       	smpsAlterNote       $06
0009501E E701                       	dc.b	smpsNoAttack, $01
00095020 E102                       	smpsAlterNote       $02
00095022 E701                       	dc.b	smpsNoAttack, $01
00095024 E106                       	smpsAlterNote       $06
00095026 E701                       	dc.b	smpsNoAttack, $01
00095028 E10C                       	smpsAlterNote       $0C
0009502A E701                       	dc.b	smpsNoAttack, $01
0009502C E10D                       	smpsAlterNote       $0D
0009502E E701                       	dc.b	smpsNoAttack, $01
00095030 E109                       	smpsAlterNote       $09
00095032 E701                       	dc.b	smpsNoAttack, $01
00095034 E103                       	smpsAlterNote       $03
00095036 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009503A E106                       	smpsAlterNote       $06
0009503C E701                       	dc.b	smpsNoAttack, $01
0009503E E10C                       	smpsAlterNote       $0C
00095040 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095044 E106                       	smpsAlterNote       $06
00095046 E701                       	dc.b	smpsNoAttack, $01
00095048 E103                       	smpsAlterNote       $03
0009504A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009504E E109                       	smpsAlterNote       $09
00095050 E701                       	dc.b	smpsNoAttack, $01
00095052 E10D                       	smpsAlterNote       $0D
00095054 E701                       	dc.b	smpsNoAttack, $01
00095056 E10C                       	smpsAlterNote       $0C
00095058 E701                       	dc.b	smpsNoAttack, $01
0009505A E106                       	smpsAlterNote       $06
0009505C E701                       	dc.b	smpsNoAttack, $01
0009505E E102                       	smpsAlterNote       $02
00095060 E701                       	dc.b	smpsNoAttack, $01
00095062 E106                       	smpsAlterNote       $06
00095064 E701                       	dc.b	smpsNoAttack, $01
00095066 E109                       	smpsAlterNote       $09
00095068 E701                       	dc.b	smpsNoAttack, $01
0009506A E10D                       	smpsAlterNote       $0D
0009506C E701                       	dc.b	smpsNoAttack, $01
0009506E E109                       	smpsAlterNote       $09
00095070 E701                       	dc.b	smpsNoAttack, $01
00095072 E103                       	smpsAlterNote       $03
00095074 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095078 E109                       	smpsAlterNote       $09
0009507A C206                       	dc.b	nF5, $06
0009507C E108                       	smpsAlterNote       $08
0009507E C10E                       	dc.b	nE5, $0E
00095080 E102                       	smpsAlterNote       $02
00095082 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095086 E108                       	smpsAlterNote       $08
00095088 E701                       	dc.b	smpsNoAttack, $01
0009508A E10B                       	smpsAlterNote       $0B
0009508C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095090 E105                       	smpsAlterNote       $05
00095092 E701                       	dc.b	smpsNoAttack, $01
00095094 E101                       	smpsAlterNote       $01
00095096 E701                       	dc.b	smpsNoAttack, $01
00095098 E102                       	smpsAlterNote       $02
0009509A E701                       	dc.b	smpsNoAttack, $01
0009509C E108                       	smpsAlterNote       $08
0009509E E701                       	dc.b	smpsNoAttack, $01
000950A0 E10C                       	smpsAlterNote       $0C
000950A2 E701                       	dc.b	smpsNoAttack, $01
000950A4 E107                       	smpsAlterNote       $07
000950A6 BF0E                       	dc.b	nD5, $0E
000950A8 E101                       	smpsAlterNote       $01
000950AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950AE E107                       	smpsAlterNote       $07
000950B0 E701                       	dc.b	smpsNoAttack, $01
000950B2 E10A                       	smpsAlterNote       $0A
000950B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950B8 E104                       	smpsAlterNote       $04
000950BA E701                       	dc.b	smpsNoAttack, $01
000950BC E100                       	smpsAlterNote       $00
000950BE E701                       	dc.b	smpsNoAttack, $01
000950C0 E104                       	smpsAlterNote       $04
000950C2 E701                       	dc.b	smpsNoAttack, $01
000950C4 E107                       	smpsAlterNote       $07
000950C6 E701                       	dc.b	smpsNoAttack, $01
000950C8 E10B                       	smpsAlterNote       $0B
000950CA E701                       	dc.b	smpsNoAttack, $01
000950CC E107                       	smpsAlterNote       $07
000950CE E701                       	dc.b	smpsNoAttack, $01
000950D0 E101                       	smpsAlterNote       $01
000950D2 E701                       	dc.b	smpsNoAttack, $01
000950D4 E100                       	smpsAlterNote       $00
000950D6 E701                       	dc.b	smpsNoAttack, $01
000950D8 E104                       	smpsAlterNote       $04
000950DA E701                       	dc.b	smpsNoAttack, $01
000950DC E10A                       	smpsAlterNote       $0A
000950DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950E2 E107                       	smpsAlterNote       $07
000950E4 E701                       	dc.b	smpsNoAttack, $01
000950E6 E101                       	smpsAlterNote       $01
000950E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950EC E107                       	smpsAlterNote       $07
000950EE E701                       	dc.b	smpsNoAttack, $01
000950F0 E10A                       	smpsAlterNote       $0A
000950F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000950F6 E104                       	smpsAlterNote       $04
000950F8 E701                       	dc.b	smpsNoAttack, $01
000950FA E100                       	smpsAlterNote       $00
000950FC E701                       	dc.b	smpsNoAttack, $01
000950FE E101                       	smpsAlterNote       $01
00095100 E701                       	dc.b	smpsNoAttack, $01
00095102 E107                       	smpsAlterNote       $07
00095104 E701                       	dc.b	smpsNoAttack, $01
00095106 E10B                       	smpsAlterNote       $0B
00095108 E701                       	dc.b	smpsNoAttack, $01
0009510A E107                       	smpsAlterNote       $07
0009510C E701                       	dc.b	smpsNoAttack, $01
0009510E E104                       	smpsAlterNote       $04
00095110 E701                       	dc.b	smpsNoAttack, $01
00095112 E100                       	smpsAlterNote       $00
00095114 E701                       	dc.b	smpsNoAttack, $01
00095116 E104                       	smpsAlterNote       $04
00095118 E701                       	dc.b	smpsNoAttack, $01
0009511A E10A                       	smpsAlterNote       $0A
0009511C E701                       	dc.b	smpsNoAttack, $01
0009511E E10B                       	smpsAlterNote       $0B
00095120 E701                       	dc.b	smpsNoAttack, $01
00095122 E107                       	smpsAlterNote       $07
00095124 E701                       	dc.b	smpsNoAttack, $01
00095126 E101                       	smpsAlterNote       $01
00095128 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009512C E104                       	smpsAlterNote       $04
0009512E E701                       	dc.b	smpsNoAttack, $01
00095130 E10A                       	smpsAlterNote       $0A
00095132 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095136 E104                       	smpsAlterNote       $04
00095138 E701                       	dc.b	smpsNoAttack, $01
0009513A E101                       	smpsAlterNote       $01
0009513C E701                       	dc.b	smpsNoAttack, $01
00095140 E107                       	smpsAlterNote       $07
00095142 E6FF                       	smpsAlterVol        $FF
00095144 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00095150 8004                       	dc.b	nRst, $04
00095154 E109                       	smpsAlterNote       $09
00095156 E602                       	smpsAlterVol        $02
00095158 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0009515E E108                       	smpsAlterNote       $08
00095160 B502 8001                  	dc.b	nE4, $02, nRst, $01
00095164 E109                       	smpsAlterNote       $09
00095166 B60D                       	dc.b	nF4, $0D
00095168 E106                       	smpsAlterNote       $06
0009516A E701                       	dc.b	smpsNoAttack, $01
0009516C E102                       	smpsAlterNote       $02
0009516E E701                       	dc.b	smpsNoAttack, $01
00095170 E106                       	smpsAlterNote       $06
00095172 E701                       	dc.b	smpsNoAttack, $01
00095174 E109                       	smpsAlterNote       $09
00095176 E701                       	dc.b	smpsNoAttack, $01
00095178 E10D                       	smpsAlterNote       $0D
0009517A E701                       	dc.b	smpsNoAttack, $01
0009517C E109                       	smpsAlterNote       $09
0009517E E701                       	dc.b	smpsNoAttack, $01
00095180 E103                       	smpsAlterNote       $03
00095182 E701                       	dc.b	smpsNoAttack, $01
00095184 E102                       	smpsAlterNote       $02
00095186 E701                       	dc.b	smpsNoAttack, $01
00095188 E106                       	smpsAlterNote       $06
0009518A E701                       	dc.b	smpsNoAttack, $01
0009518C E10C                       	smpsAlterNote       $0C
0009518E E701                       	dc.b	smpsNoAttack, $01
00095190 E10D                       	smpsAlterNote       $0D
00095192 8001                       	dc.b	nRst, $01
00095194 E109                       	smpsAlterNote       $09
00095196 B80D                       	dc.b	nG4, $0D
00095198 E106                       	smpsAlterNote       $06
0009519A E701                       	dc.b	smpsNoAttack, $01
0009519C E102                       	smpsAlterNote       $02
0009519E E701                       	dc.b	smpsNoAttack, $01
000951A0 E106                       	smpsAlterNote       $06
000951A2 E701                       	dc.b	smpsNoAttack, $01
000951A4 E10C                       	smpsAlterNote       $0C
000951A6 E701                       	dc.b	smpsNoAttack, $01
000951A8 E10D                       	smpsAlterNote       $0D
000951AA E701                       	dc.b	smpsNoAttack, $01
000951AC E109                       	smpsAlterNote       $09
000951AE E701                       	dc.b	smpsNoAttack, $01
000951B0 E103                       	smpsAlterNote       $03
000951B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951B6 E106                       	smpsAlterNote       $06
000951B8 E701                       	dc.b	smpsNoAttack, $01
000951BA E10C                       	smpsAlterNote       $0C
000951BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951C0 E106                       	smpsAlterNote       $06
000951C2 E701                       	dc.b	smpsNoAttack, $01
000951C4 E103                       	smpsAlterNote       $03
000951C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000951CA E109                       	smpsAlterNote       $09
000951CC E701                       	dc.b	smpsNoAttack, $01
000951CE E10D                       	smpsAlterNote       $0D
000951D0 E701                       	dc.b	smpsNoAttack, $01
000951D2 E10C                       	smpsAlterNote       $0C
000951D4 E701                       	dc.b	smpsNoAttack, $01
000951D6 E109                       	smpsAlterNote       $09
000951D8 8001                       	dc.b	nRst, $01
000951DA E10B                       	smpsAlterNote       $0B
000951DC BA03                       	dc.b	nA4, $03
000951DE E10C                       	smpsAlterNote       $0C
000951E0 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000951E4 E10B                       	smpsAlterNote       $0B
000951E6 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000951EC E10C                       	smpsAlterNote       $0C
000951EE C703 8001                  	dc.b	nBb5, $03, nRst, $01
000951F2 E10B                       	smpsAlterNote       $0B
000951F4 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000951FA E10C                       	smpsAlterNote       $0C
000951FC D303                       	dc.b	nBb6, $03
000951FE E10B                       	smpsAlterNote       $0B
00095200 D20D                       	dc.b	nA6, $0D
00095202 E108                       	smpsAlterNote       $08
00095204 E701                       	dc.b	smpsNoAttack, $01
00095206 E104                       	smpsAlterNote       $04
00095208 E701                       	dc.b	smpsNoAttack, $01
0009520A E105                       	smpsAlterNote       $05
0009520C E701                       	dc.b	smpsNoAttack, $01
0009520E E10B                       	smpsAlterNote       $0B
00095210 E701                       	dc.b	smpsNoAttack, $01
00095212 E10F                       	smpsAlterNote       $0F
00095214 E701                       	dc.b	smpsNoAttack, $01
00095216 E10B                       	smpsAlterNote       $0B
00095218 E701                       	dc.b	smpsNoAttack, $01
0009521A E108                       	smpsAlterNote       $08
0009521C E701                       	dc.b	smpsNoAttack, $01
0009521E E104                       	smpsAlterNote       $04
00095220 E701                       	dc.b	smpsNoAttack, $01
00095222 E108                       	smpsAlterNote       $08
00095224 E701                       	dc.b	smpsNoAttack, $01
00095226 E10E                       	smpsAlterNote       $0E
00095228 E701                       	dc.b	smpsNoAttack, $01
0009522A E10F                       	smpsAlterNote       $0F
0009522C E701                       	dc.b	smpsNoAttack, $01
0009522E E10B                       	smpsAlterNote       $0B
00095230 E701                       	dc.b	smpsNoAttack, $01
00095232 E105                       	smpsAlterNote       $05
00095234 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0009523A E109                       	smpsAlterNote       $09
0009523C CE07                       	dc.b	nF6, $07
0009523E E108                       	smpsAlterNote       $08
00095240 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095244 E109                       	smpsAlterNote       $09
00095246 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0009524A E108                       	smpsAlterNote       $08
0009524C CC0D                       	dc.b	nEb6, $0D
0009524E E102                       	smpsAlterNote       $02
00095250 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095254 E108                       	smpsAlterNote       $08
00095256 E701                       	dc.b	smpsNoAttack, $01
00095258 E10B                       	smpsAlterNote       $0B
0009525A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009525E E105                       	smpsAlterNote       $05
00095260 E701                       	dc.b	smpsNoAttack, $01
00095262 E101                       	smpsAlterNote       $01
00095264 E701                       	dc.b	smpsNoAttack, $01
00095266 E102                       	smpsAlterNote       $02
00095268 E701                       	dc.b	smpsNoAttack, $01
0009526A E108                       	smpsAlterNote       $08
0009526C E701                       	dc.b	smpsNoAttack, $01
0009526E E10C                       	smpsAlterNote       $0C
00095270 E701                       	dc.b	smpsNoAttack, $01
00095272 E108                       	smpsAlterNote       $08
00095274 E701                       	dc.b	smpsNoAttack, $01
00095276 E105                       	smpsAlterNote       $05
00095278 E701                       	dc.b	smpsNoAttack, $01
0009527A E101                       	smpsAlterNote       $01
0009527C E701                       	dc.b	smpsNoAttack, $01
0009527E E105                       	smpsAlterNote       $05
00095280 E701                       	dc.b	smpsNoAttack, $01
00095282 E10B                       	smpsAlterNote       $0B
00095284 E701                       	dc.b	smpsNoAttack, $01
00095286 E10C                       	smpsAlterNote       $0C
00095288 E701                       	dc.b	smpsNoAttack, $01
0009528A E108                       	smpsAlterNote       $08
0009528C E701                       	dc.b	smpsNoAttack, $01
0009528E E107                       	smpsAlterNote       $07
00095290 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0009529A E10B                       	smpsAlterNote       $0B
0009529C C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000952A6 E109                       	smpsAlterNote       $09
000952A8 C203                       	dc.b	nF5, $03
000952AA E108                       	smpsAlterNote       $08
000952AC C103 8001                  	dc.b	nE5, $03, nRst, $01
000952B0 E109                       	smpsAlterNote       $09
000952B2 C20D                       	dc.b	nF5, $0D
000952B4 E108                       	smpsAlterNote       $08
000952B6 C10E                       	dc.b	nE5, $0E
000952B8 E107                       	smpsAlterNote       $07
000952BA BF0D                       	dc.b	nD5, $0D
000952BC E104                       	smpsAlterNote       $04
000952BE E701                       	dc.b	smpsNoAttack, $01
000952C0 E100                       	smpsAlterNote       $00
000952C2 E701                       	dc.b	smpsNoAttack, $01
000952C4 E104                       	smpsAlterNote       $04
000952C6 E701                       	dc.b	smpsNoAttack, $01
000952C8 E107                       	smpsAlterNote       $07
000952CA E701                       	dc.b	smpsNoAttack, $01
000952CC E10B                       	smpsAlterNote       $0B
000952CE E701                       	dc.b	smpsNoAttack, $01
000952D0 E107                       	smpsAlterNote       $07
000952D2 E701                       	dc.b	smpsNoAttack, $01
000952D4 E101                       	smpsAlterNote       $01
000952D6 E701                       	dc.b	smpsNoAttack, $01
000952D8 E100                       	smpsAlterNote       $00
000952DA E701                       	dc.b	smpsNoAttack, $01
000952DC E104                       	smpsAlterNote       $04
000952DE E701                       	dc.b	smpsNoAttack, $01
000952E0 E10A                       	smpsAlterNote       $0A
000952E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952E6 E107                       	smpsAlterNote       $07
000952E8 E701                       	dc.b	smpsNoAttack, $01
000952EA E101                       	smpsAlterNote       $01
000952EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952F0 E107                       	smpsAlterNote       $07
000952F2 E701                       	dc.b	smpsNoAttack, $01
000952F4 E10A                       	smpsAlterNote       $0A
000952F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000952FA E104                       	smpsAlterNote       $04
000952FC E701                       	dc.b	smpsNoAttack, $01
000952FE E100                       	smpsAlterNote       $00
00095300 E701                       	dc.b	smpsNoAttack, $01
00095302 E101                       	smpsAlterNote       $01
00095304 E701                       	dc.b	smpsNoAttack, $01
00095306 E107                       	smpsAlterNote       $07
00095308 E701                       	dc.b	smpsNoAttack, $01
0009530A E10B                       	smpsAlterNote       $0B
0009530C E701                       	dc.b	smpsNoAttack, $01
0009530E E107                       	smpsAlterNote       $07
00095310 E701                       	dc.b	smpsNoAttack, $01
00095312 E104                       	smpsAlterNote       $04
00095314 E701                       	dc.b	smpsNoAttack, $01
00095316 E100                       	smpsAlterNote       $00
00095318 E701                       	dc.b	smpsNoAttack, $01
0009531A E104                       	smpsAlterNote       $04
0009531C E701                       	dc.b	smpsNoAttack, $01
0009531E E10A                       	smpsAlterNote       $0A
00095320 E701                       	dc.b	smpsNoAttack, $01
00095322 E10B                       	smpsAlterNote       $0B
00095324 E701                       	dc.b	smpsNoAttack, $01
00095326 E107                       	smpsAlterNote       $07
00095328 E701                       	dc.b	smpsNoAttack, $01
0009532A E101                       	smpsAlterNote       $01
0009532C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095330 E104                       	smpsAlterNote       $04
00095332 E701                       	dc.b	smpsNoAttack, $01
00095334 E10A                       	smpsAlterNote       $0A
00095336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009533A E104                       	smpsAlterNote       $04
0009533C E701                       	dc.b	smpsNoAttack, $01
0009533E E101                       	smpsAlterNote       $01
00095340 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095344 E107                       	smpsAlterNote       $07
00095346 E701                       	dc.b	smpsNoAttack, $01
00095348 E10B                       	smpsAlterNote       $0B
0009534A E701                       	dc.b	smpsNoAttack, $01
0009534C E10A                       	smpsAlterNote       $0A
0009534E E701                       	dc.b	smpsNoAttack, $01
00095350 E104                       	smpsAlterNote       $04
00095352 E701                       	dc.b	smpsNoAttack, $01
00095354 E100                       	smpsAlterNote       $00
00095356 E701                       	dc.b	smpsNoAttack, $01
00095358 E104                       	smpsAlterNote       $04
0009535A E701                       	dc.b	smpsNoAttack, $01
0009535C E107                       	smpsAlterNote       $07
0009535E E701                       	dc.b	smpsNoAttack, $01
00095360 E10B                       	smpsAlterNote       $0B
00095362 E701                       	dc.b	smpsNoAttack, $01
00095364 E107                       	smpsAlterNote       $07
00095366 E701                       	dc.b	smpsNoAttack, $01
00095368 E101                       	smpsAlterNote       $01
0009536A E701                       	dc.b	smpsNoAttack, $01
0009536C E100                       	smpsAlterNote       $00
0009536E E701                       	dc.b	smpsNoAttack, $01
00095370 E104                       	smpsAlterNote       $04
00095372 E701                       	dc.b	smpsNoAttack, $01
00095374 E10A                       	smpsAlterNote       $0A
00095376 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009537A E107                       	smpsAlterNote       $07
0009537C E701                       	dc.b	smpsNoAttack, $01
0009537E E101                       	smpsAlterNote       $01
00095380 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095384 E107                       	smpsAlterNote       $07
00095386 E701                       	dc.b	smpsNoAttack, $01
00095388 E10A                       	smpsAlterNote       $0A
0009538A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009538E E104                       	smpsAlterNote       $04
00095390 E701                       	dc.b	smpsNoAttack, $01
00095392 E100                       	smpsAlterNote       $00
00095394 E701                       	dc.b	smpsNoAttack, $01
00095396 E101                       	smpsAlterNote       $01
00095398 E701                       	dc.b	smpsNoAttack, $01
0009539A E107                       	smpsAlterNote       $07
0009539C E701                       	dc.b	smpsNoAttack, $01
0009539E E10B                       	smpsAlterNote       $0B
000953A0 E701                       	dc.b	smpsNoAttack, $01
000953A2 E107                       	smpsAlterNote       $07
000953A4 E701                       	dc.b	smpsNoAttack, $01
000953A6 E104                       	smpsAlterNote       $04
000953A8 E701                       	dc.b	smpsNoAttack, $01
000953AA E100                       	smpsAlterNote       $00
000953AC E701                       	dc.b	smpsNoAttack, $01
000953AE E101                       	smpsAlterNote       $01
000953B0 8001                       	dc.b	nRst, $01
000953B2 E109                       	smpsAlterNote       $09
000953B4 C20D                       	dc.b	nF5, $0D
000953B6 E106                       	smpsAlterNote       $06
000953B8 E701                       	dc.b	smpsNoAttack, $01
000953BA E102                       	smpsAlterNote       $02
000953BC E701                       	dc.b	smpsNoAttack, $01
000953BE E106                       	smpsAlterNote       $06
000953C0 E701                       	dc.b	smpsNoAttack, $01
000953C2 E10C                       	smpsAlterNote       $0C
000953C4 E701                       	dc.b	smpsNoAttack, $01
000953C6 E10D                       	smpsAlterNote       $0D
000953C8 E701                       	dc.b	smpsNoAttack, $01
000953CA E109                       	smpsAlterNote       $09
000953CC E701                       	dc.b	smpsNoAttack, $01
000953CE E103                       	smpsAlterNote       $03
000953D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953D4 E106                       	smpsAlterNote       $06
000953D6 E701                       	dc.b	smpsNoAttack, $01
000953D8 E10C                       	smpsAlterNote       $0C
000953DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953DE E106                       	smpsAlterNote       $06
000953E0 E701                       	dc.b	smpsNoAttack, $01
000953E2 E103                       	smpsAlterNote       $03
000953E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000953E8 E109                       	smpsAlterNote       $09
000953EA E701                       	dc.b	smpsNoAttack, $01
000953EC E10D                       	smpsAlterNote       $0D
000953EE E701                       	dc.b	smpsNoAttack, $01
000953F0 E10C                       	smpsAlterNote       $0C
000953F2 E701                       	dc.b	smpsNoAttack, $01
000953F4 E109                       	smpsAlterNote       $09
000953F6 8001                       	dc.b	nRst, $01
000953F8 E108                       	smpsAlterNote       $08
000953FA C10D                       	dc.b	nE5, $0D
000953FC E109                       	smpsAlterNote       $09
000953FE C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00095402 E108                       	smpsAlterNote       $08
00095404 C10D                       	dc.b	nE5, $0D
00095406 E102                       	smpsAlterNote       $02
00095408 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009540C E105                       	smpsAlterNote       $05
0009540E E701                       	dc.b	smpsNoAttack, $01
00095410 E108                       	smpsAlterNote       $08
00095412 8001                       	dc.b	nRst, $01
00095414 E107                       	smpsAlterNote       $07
00095416 BF0D                       	dc.b	nD5, $0D
00095418 E108                       	smpsAlterNote       $08
0009541A C107                       	dc.b	nE5, $07
0009541C E109                       	smpsAlterNote       $09
0009541E C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00095424 E10B                       	smpsAlterNote       $0B
00095426 C603                       	dc.b	nA5, $03
00095428 E10C                       	smpsAlterNote       $0C
0009542A C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00095430 E10B                       	smpsAlterNote       $0B
00095432 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00095438 E109                       	smpsAlterNote       $09
0009543A D003                       	dc.b	nG6, $03
0009543C E108                       	smpsAlterNote       $08
0009543E CD02 8001                  	dc.b	nE6, $02, nRst, $01
00095442 E10B                       	smpsAlterNote       $0B
00095444 C601 8001                  	dc.b	nA5, $01, nRst, $01
00095448 E108                       	smpsAlterNote       $08
0009544A C102                       	dc.b	nE5, $02
0009544E E10C                       	smpsAlterNote       $0C
00095450 E6FB                       	smpsAlterVol        $FB
00095452 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0009545E 8001                       	dc.b	nRst, $01
00095460 E10B                       	smpsAlterNote       $0B
00095462 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0009546A E107                       	smpsAlterNote       $07
0009546C A706 8001                  	dc.b	nD3, $06, nRst, $01
00095470 E10B                       	smpsAlterNote       $0B
00095472 A203                       	dc.b	nA2, $03
00095474 E109                       	smpsAlterNote       $09
00095476 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0009547A E108                       	smpsAlterNote       $08
0009547C A906                       	dc.b	nE3, $06
0009547E E107                       	smpsAlterNote       $07
00095480 A703 8001                  	dc.b	nD3, $03, nRst, $01
00095484 E106                       	smpsAlterNote       $06
00095486 A503                       	dc.b	nC3, $03
00095488 E10C                       	smpsAlterNote       $0C
0009548A A303 8001                  	dc.b	nBb2, $03, nRst, $01
0009548E E10B                       	smpsAlterNote       $0B
00095490 A203 8004                  	dc.b	nA2, $03, nRst, $04
00095494 E11B                       	smpsAlterNote       $1B
00095496 C401                       	dc.b	nG5, $01
00095498 E1F4                       	smpsAlterNote       $F4
0009549A E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0009549D E106                       	smpsAlterNote       $06
0009549F E701                       	dc.b	smpsNoAttack, $01
000954A1 E10F                       	smpsAlterNote       $0F
000954A3 E701                       	dc.b	smpsNoAttack, $01
000954A5 E1E4                       	smpsAlterNote       $E4
000954A7 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000954AA E1F6                       	smpsAlterNote       $F6
000954AC E701                       	dc.b	smpsNoAttack, $01
000954AE E108                       	smpsAlterNote       $08
000954B0 E701                       	dc.b	smpsNoAttack, $01
000954B2 E10B                       	smpsAlterNote       $0B
000954B4 E706                       	dc.b	smpsNoAttack, $06
000954B6 E105                       	smpsAlterNote       $05
000954B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954BC E108                       	smpsAlterNote       $08
000954BE E701                       	dc.b	smpsNoAttack, $01
000954C0 E10E                       	smpsAlterNote       $0E
000954C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954C6 E108                       	smpsAlterNote       $08
000954C8 E701                       	dc.b	smpsNoAttack, $01
000954CA E105                       	smpsAlterNote       $05
000954CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000954D0 E10B                       	smpsAlterNote       $0B
000954D2 E701                       	dc.b	smpsNoAttack, $01
000954D4 E10F                       	smpsAlterNote       $0F
000954D6 E701                       	dc.b	smpsNoAttack, $01
000954D8 E10E                       	smpsAlterNote       $0E
000954DA E701                       	dc.b	smpsNoAttack, $01
000954DC E108                       	smpsAlterNote       $08
000954DE E701                       	dc.b	smpsNoAttack, $01
000954E0 E104                       	smpsAlterNote       $04
000954E2 E701                       	dc.b	smpsNoAttack, $01
000954E4 E108                       	smpsAlterNote       $08
000954E6 E701                       	dc.b	smpsNoAttack, $01
000954E8 E10B                       	smpsAlterNote       $0B
000954EA E701                       	dc.b	smpsNoAttack, $01
000954EC E10F                       	smpsAlterNote       $0F
000954EE E701                       	dc.b	smpsNoAttack, $01
000954F0 E10B                       	smpsAlterNote       $0B
000954F2 E701                       	dc.b	smpsNoAttack, $01
000954F4 E105                       	smpsAlterNote       $05
000954F6 E701                       	dc.b	smpsNoAttack, $01
000954F8 E104                       	smpsAlterNote       $04
000954FA E701                       	dc.b	smpsNoAttack, $01
000954FC E108                       	smpsAlterNote       $08
000954FE E701                       	dc.b	smpsNoAttack, $01
00095500 E10E                       	smpsAlterNote       $0E
00095502 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095506 E10B                       	smpsAlterNote       $0B
00095508 E701                       	dc.b	smpsNoAttack, $01
0009550A E105                       	smpsAlterNote       $05
0009550C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095510 E10B                       	smpsAlterNote       $0B
00095512 E701                       	dc.b	smpsNoAttack, $01
00095514 E10E                       	smpsAlterNote       $0E
00095516 E701                       	dc.b	smpsNoAttack, $01
00095518 E10F                       	smpsAlterNote       $0F
0009551A 8001                       	dc.b	nRst, $01
0009551C E109                       	smpsAlterNote       $09
0009551E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00095524 E108                       	smpsAlterNote       $08
00095526 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009552A E109                       	smpsAlterNote       $09
0009552C C202                       	dc.b	nF5, $02
0009552E E108                       	smpsAlterNote       $08
00095530 C102                       	dc.b	nE5, $02
00095532 E107                       	smpsAlterNote       $07
00095534 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00095538 E108                       	smpsAlterNote       $08
0009553A C101 8001                  	dc.b	nE5, $01, nRst, $01
0009553E E107                       	smpsAlterNote       $07
00095540 BF02                       	dc.b	nD5, $02
00095542 E106                       	smpsAlterNote       $06
00095544 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00095548 E107                       	smpsAlterNote       $07
0009554A BF01 8001                  	dc.b	nD5, $01, nRst, $01
0009554E E106                       	smpsAlterNote       $06
00095550 BD02                       	dc.b	nC5, $02
00095552 E10C                       	smpsAlterNote       $0C
00095554 BB02                       	dc.b	nBb4, $02
00095556 E106                       	smpsAlterNote       $06
00095558 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0009555C E10C                       	smpsAlterNote       $0C
0009555E BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00095562 E10B                       	smpsAlterNote       $0B
00095564 BA02                       	dc.b	nA4, $02
00095566 E10C                       	smpsAlterNote       $0C
00095568 BB02                       	dc.b	nBb4, $02
0009556A E10B                       	smpsAlterNote       $0B
0009556C BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00095576 E108                       	smpsAlterNote       $08
00095578 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00095580 E107                       	smpsAlterNote       $07
00095582 BE02                       	dc.b	nCs5, $02
00095584 E10B                       	smpsAlterNote       $0B
00095586 BA02                       	dc.b	nA4, $02
00095588 E109                       	smpsAlterNote       $09
0009558A B802 8001                  	dc.b	nG4, $02, nRst, $01
0009558E E108                       	smpsAlterNote       $08
00095590 B501 8001                  	dc.b	nE4, $01, nRst, $01
00095594 E10B                       	smpsAlterNote       $0B
00095596 AE02                       	dc.b	nA3, $02
00095598 E10C                       	smpsAlterNote       $0C
0009559A A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000955A6 E10B                       	smpsAlterNote       $0B
000955A8 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000955B0 E107                       	smpsAlterNote       $07
000955B2 A706 8001                  	dc.b	nD3, $06, nRst, $01
000955B6 E10B                       	smpsAlterNote       $0B
000955B8 A203                       	dc.b	nA2, $03
000955BA E109                       	smpsAlterNote       $09
000955BC AA03 8001                  	dc.b	nF3, $03, nRst, $01
000955C0 E108                       	smpsAlterNote       $08
000955C2 A906 8001                  	dc.b	nE3, $06, nRst, $01
000955C6 E107                       	smpsAlterNote       $07
000955C8 A702 8001                  	dc.b	nD3, $02, nRst, $01
000955CC E106                       	smpsAlterNote       $06
000955CE A503                       	dc.b	nC3, $03
000955D0 E10C                       	smpsAlterNote       $0C
000955D2 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000955D8 E107                       	smpsAlterNote       $07
000955DA B20D                       	dc.b	nCs4, $0D
000955DC E104                       	smpsAlterNote       $04
000955DE E701                       	dc.b	smpsNoAttack, $01
000955E0 E100                       	smpsAlterNote       $00
000955E2 E701                       	dc.b	smpsNoAttack, $01
000955E4 E104                       	smpsAlterNote       $04
000955E6 E701                       	dc.b	smpsNoAttack, $01
000955E8 E10A                       	smpsAlterNote       $0A
000955EA E701                       	dc.b	smpsNoAttack, $01
000955EC E10B                       	smpsAlterNote       $0B
000955EE E701                       	dc.b	smpsNoAttack, $01
000955F0 E107                       	smpsAlterNote       $07
000955F2 E701                       	dc.b	smpsNoAttack, $01
000955F4 E101                       	smpsAlterNote       $01
000955F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000955FA E104                       	smpsAlterNote       $04
000955FC E701                       	dc.b	smpsNoAttack, $01
000955FE E10A                       	smpsAlterNote       $0A
00095600 E701                       	dc.b	smpsNoAttack, $01
00095602 E10B                       	smpsAlterNote       $0B
00095604 8001                       	dc.b	nRst, $01
00095606 E107                       	smpsAlterNote       $07
00095608 B30D                       	dc.b	nD4, $0D
0009560A E104                       	smpsAlterNote       $04
0009560C E701                       	dc.b	smpsNoAttack, $01
0009560E E100                       	smpsAlterNote       $00
00095610 E701                       	dc.b	smpsNoAttack, $01
00095612 E104                       	smpsAlterNote       $04
00095614 E701                       	dc.b	smpsNoAttack, $01
00095616 E10A                       	smpsAlterNote       $0A
00095618 E701                       	dc.b	smpsNoAttack, $01
0009561A E10B                       	smpsAlterNote       $0B
0009561C E701                       	dc.b	smpsNoAttack, $01
0009561E E107                       	smpsAlterNote       $07
00095620 E701                       	dc.b	smpsNoAttack, $01
00095622 E101                       	smpsAlterNote       $01
00095624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095628 E104                       	smpsAlterNote       $04
0009562A E701                       	dc.b	smpsNoAttack, $01
0009562C E10A                       	smpsAlterNote       $0A
0009562E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095632 E104                       	smpsAlterNote       $04
00095634 E701                       	dc.b	smpsNoAttack, $01
00095636 E101                       	smpsAlterNote       $01
00095638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009563C E107                       	smpsAlterNote       $07
0009563E E701                       	dc.b	smpsNoAttack, $01
00095640 E10B                       	smpsAlterNote       $0B
00095642 E701                       	dc.b	smpsNoAttack, $01
00095644 E10A                       	smpsAlterNote       $0A
00095646 E701                       	dc.b	smpsNoAttack, $01
00095648 E107                       	smpsAlterNote       $07
0009564A 8001                       	dc.b	nRst, $01
0009564C E108                       	smpsAlterNote       $08
0009564E B50D                       	dc.b	nE4, $0D
00095650 E102                       	smpsAlterNote       $02
00095652 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095656 E105                       	smpsAlterNote       $05
00095658 E701                       	dc.b	smpsNoAttack, $01
0009565A E10B                       	smpsAlterNote       $0B
0009565C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095660 E105                       	smpsAlterNote       $05
00095662 E701                       	dc.b	smpsNoAttack, $01
00095664 E102                       	smpsAlterNote       $02
00095666 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009566A E108                       	smpsAlterNote       $08
0009566C E701                       	dc.b	smpsNoAttack, $01
0009566E E10C                       	smpsAlterNote       $0C
00095670 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095674 E107                       	smpsAlterNote       $07
00095676 B30D                       	dc.b	nD4, $0D
00095678 E101                       	smpsAlterNote       $01
0009567A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009567E E104                       	smpsAlterNote       $04
00095680 E701                       	dc.b	smpsNoAttack, $01
00095682 E10A                       	smpsAlterNote       $0A
00095684 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095688 E104                       	smpsAlterNote       $04
0009568A E701                       	dc.b	smpsNoAttack, $01
0009568C E101                       	smpsAlterNote       $01
0009568E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095692 E107                       	smpsAlterNote       $07
00095694 E701                       	dc.b	smpsNoAttack, $01
00095696 E10B                       	smpsAlterNote       $0B
00095698 E701                       	dc.b	smpsNoAttack, $01
0009569A E10A                       	smpsAlterNote       $0A
0009569C E701                       	dc.b	smpsNoAttack, $01
0009569E E104                       	smpsAlterNote       $04
000956A0 E701                       	dc.b	smpsNoAttack, $01
000956A2 E100                       	smpsAlterNote       $00
000956A4 E701                       	dc.b	smpsNoAttack, $01
000956A6 E104                       	smpsAlterNote       $04
000956A8 E701                       	dc.b	smpsNoAttack, $01
000956AA E107                       	smpsAlterNote       $07
000956AC E701                       	dc.b	smpsNoAttack, $01
000956AE E10B                       	smpsAlterNote       $0B
000956B0 E701                       	dc.b	smpsNoAttack, $01
000956B2 E107                       	smpsAlterNote       $07
000956B4 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000956B8 E101                       	smpsAlterNote       $01
000956BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956BE E107                       	smpsAlterNote       $07
000956C0 E701                       	dc.b	smpsNoAttack, $01
000956C2 E10A                       	smpsAlterNote       $0A
000956C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956C8 E104                       	smpsAlterNote       $04
000956CA E701                       	dc.b	smpsNoAttack, $01
000956CC E100                       	smpsAlterNote       $00
000956CE E701                       	dc.b	smpsNoAttack, $01
000956D0 E101                       	smpsAlterNote       $01
000956D2 E701                       	dc.b	smpsNoAttack, $01
000956D4 E107                       	smpsAlterNote       $07
000956D6 E701                       	dc.b	smpsNoAttack, $01
000956D8 E10B                       	smpsAlterNote       $0B
000956DA E701                       	dc.b	smpsNoAttack, $01
000956DC E107                       	smpsAlterNote       $07
000956DE B30E                       	dc.b	nD4, $0E
000956E0 E101                       	smpsAlterNote       $01
000956E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956E6 E107                       	smpsAlterNote       $07
000956E8 E701                       	dc.b	smpsNoAttack, $01
000956EA E10A                       	smpsAlterNote       $0A
000956EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000956F0 E104                       	smpsAlterNote       $04
000956F2 E701                       	dc.b	smpsNoAttack, $01
000956F4 E100                       	smpsAlterNote       $00
000956F6 E701                       	dc.b	smpsNoAttack, $01
000956F8 E101                       	smpsAlterNote       $01
000956FA E701                       	dc.b	smpsNoAttack, $01
000956FC E107                       	smpsAlterNote       $07
000956FE E701                       	dc.b	smpsNoAttack, $01
00095700 E10B                       	smpsAlterNote       $0B
00095702 E701                       	dc.b	smpsNoAttack, $01
00095704 E107                       	smpsAlterNote       $07
00095706 E701                       	dc.b	smpsNoAttack, $01
00095708 E104                       	smpsAlterNote       $04
0009570A E701                       	dc.b	smpsNoAttack, $01
0009570C E100                       	smpsAlterNote       $00
0009570E E701                       	dc.b	smpsNoAttack, $01
00095710 E104                       	smpsAlterNote       $04
00095712 E701                       	dc.b	smpsNoAttack, $01
00095714 E10A                       	smpsAlterNote       $0A
00095716 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009571A E107                       	smpsAlterNote       $07
0009571C E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00095720 E104                       	smpsAlterNote       $04
00095722 E701                       	dc.b	smpsNoAttack, $01
00095724 E100                       	smpsAlterNote       $00
00095726 E701                       	dc.b	smpsNoAttack, $01
00095728 E101                       	smpsAlterNote       $01
0009572A E701                       	dc.b	smpsNoAttack, $01
0009572C E107                       	smpsAlterNote       $07
0009572E E701                       	dc.b	smpsNoAttack, $01
00095730 E10B                       	smpsAlterNote       $0B
00095732 E701                       	dc.b	smpsNoAttack, $01
00095734 E107                       	smpsAlterNote       $07
00095736 E701                       	dc.b	smpsNoAttack, $01
00095738 E104                       	smpsAlterNote       $04
0009573A E701                       	dc.b	smpsNoAttack, $01
0009573C E100                       	smpsAlterNote       $00
0009573E E701                       	dc.b	smpsNoAttack, $01
00095740 E104                       	smpsAlterNote       $04
00095742 E701                       	dc.b	smpsNoAttack, $01
00095744 E10A                       	smpsAlterNote       $0A
00095746 E701                       	dc.b	smpsNoAttack, $01
00095748 E10B                       	smpsAlterNote       $0B
0009574A E701                       	dc.b	smpsNoAttack, $01
0009574E E6FF                       	smpsAlterVol        $FF
00095750 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0009575C 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00095764 E109                       	smpsAlterNote       $09
00095766 E601                       	smpsAlterVol        $01
00095768 B60D                       	dc.b	nF4, $0D
0009576A E106                       	smpsAlterNote       $06
0009576C E701                       	dc.b	smpsNoAttack, $01
0009576E E102                       	smpsAlterNote       $02
00095770 E701                       	dc.b	smpsNoAttack, $01
00095772 E106                       	smpsAlterNote       $06
00095774 E701                       	dc.b	smpsNoAttack, $01
00095776 E109                       	smpsAlterNote       $09
00095778 E701                       	dc.b	smpsNoAttack, $01
0009577A E10D                       	smpsAlterNote       $0D
0009577C E701                       	dc.b	smpsNoAttack, $01
0009577E E109                       	smpsAlterNote       $09
00095780 E701                       	dc.b	smpsNoAttack, $01
00095782 E103                       	smpsAlterNote       $03
00095784 E701                       	dc.b	smpsNoAttack, $01
00095786 E102                       	smpsAlterNote       $02
00095788 E701                       	dc.b	smpsNoAttack, $01
0009578A E106                       	smpsAlterNote       $06
0009578C E701                       	dc.b	smpsNoAttack, $01
0009578E E10C                       	smpsAlterNote       $0C
00095790 E701                       	dc.b	smpsNoAttack, $01
00095792 E10D                       	smpsAlterNote       $0D
00095794 8001                       	dc.b	nRst, $01
00095796 E109                       	smpsAlterNote       $09
00095798 B80D                       	dc.b	nG4, $0D
0009579A E106                       	smpsAlterNote       $06
0009579C E701                       	dc.b	smpsNoAttack, $01
0009579E E102                       	smpsAlterNote       $02
000957A0 E701                       	dc.b	smpsNoAttack, $01
000957A2 E106                       	smpsAlterNote       $06
000957A4 E701                       	dc.b	smpsNoAttack, $01
000957A6 E109                       	smpsAlterNote       $09
000957A8 E701                       	dc.b	smpsNoAttack, $01
000957AA E10D                       	smpsAlterNote       $0D
000957AC E701                       	dc.b	smpsNoAttack, $01
000957AE E109                       	smpsAlterNote       $09
000957B0 E701                       	dc.b	smpsNoAttack, $01
000957B2 E103                       	smpsAlterNote       $03
000957B4 E701                       	dc.b	smpsNoAttack, $01
000957B6 E102                       	smpsAlterNote       $02
000957B8 E701                       	dc.b	smpsNoAttack, $01
000957BA E106                       	smpsAlterNote       $06
000957BC E701                       	dc.b	smpsNoAttack, $01
000957BE E10C                       	smpsAlterNote       $0C
000957C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957C4 E106                       	smpsAlterNote       $06
000957C6 E701                       	dc.b	smpsNoAttack, $01
000957C8 E103                       	smpsAlterNote       $03
000957CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957CE E109                       	smpsAlterNote       $09
000957D0 E701                       	dc.b	smpsNoAttack, $01
000957D2 E10D                       	smpsAlterNote       $0D
000957D4 E701                       	dc.b	smpsNoAttack, $01
000957D6 E10C                       	smpsAlterNote       $0C
000957D8 E701                       	dc.b	smpsNoAttack, $01
000957DA E109                       	smpsAlterNote       $09
000957DC 8001                       	dc.b	nRst, $01
000957DE E10B                       	smpsAlterNote       $0B
000957E0 BA0D                       	dc.b	nA4, $0D
000957E2 E105                       	smpsAlterNote       $05
000957E4 E701                       	dc.b	smpsNoAttack, $01
000957E6 E104                       	smpsAlterNote       $04
000957E8 E701                       	dc.b	smpsNoAttack, $01
000957EA E108                       	smpsAlterNote       $08
000957EC E701                       	dc.b	smpsNoAttack, $01
000957EE E10E                       	smpsAlterNote       $0E
000957F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957F4 E10B                       	smpsAlterNote       $0B
000957F6 E701                       	dc.b	smpsNoAttack, $01
000957F8 E105                       	smpsAlterNote       $05
000957FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000957FE E10B                       	smpsAlterNote       $0B
00095800 E701                       	dc.b	smpsNoAttack, $01
00095802 E10E                       	smpsAlterNote       $0E
00095804 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095808 E108                       	smpsAlterNote       $08
0009580A E701                       	dc.b	smpsNoAttack, $01
0009580C E104                       	smpsAlterNote       $04
0009580E E701                       	dc.b	smpsNoAttack, $01
00095810 E105                       	smpsAlterNote       $05
00095812 E701                       	dc.b	smpsNoAttack, $01
00095814 E10B                       	smpsAlterNote       $0B
00095816 E701                       	dc.b	smpsNoAttack, $01
00095818 E10F                       	smpsAlterNote       $0F
0009581A E701                       	dc.b	smpsNoAttack, $01
0009581C E10B                       	smpsAlterNote       $0B
0009581E E701                       	dc.b	smpsNoAttack, $01
00095820 E108                       	smpsAlterNote       $08
00095822 E701                       	dc.b	smpsNoAttack, $01
00095824 E104                       	smpsAlterNote       $04
00095826 E701                       	dc.b	smpsNoAttack, $01
00095828 E108                       	smpsAlterNote       $08
0009582A E701                       	dc.b	smpsNoAttack, $01
0009582C E10E                       	smpsAlterNote       $0E
0009582E E701                       	dc.b	smpsNoAttack, $01
00095830 E10F                       	smpsAlterNote       $0F
00095832 E701                       	dc.b	smpsNoAttack, $01
00095834 E10B                       	smpsAlterNote       $0B
00095836 E701                       	dc.b	smpsNoAttack, $01
00095838 E105                       	smpsAlterNote       $05
0009583A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009583E E108                       	smpsAlterNote       $08
00095840 E701                       	dc.b	smpsNoAttack, $01
00095842 E10E                       	smpsAlterNote       $0E
00095844 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095848 E108                       	smpsAlterNote       $08
0009584A E701                       	dc.b	smpsNoAttack, $01
0009584C E105                       	smpsAlterNote       $05
0009584E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095852 E108                       	smpsAlterNote       $08
00095854 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00095858 E109                       	smpsAlterNote       $09
0009585A B60D                       	dc.b	nF4, $0D
0009585C E103                       	smpsAlterNote       $03
0009585E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095862 E106                       	smpsAlterNote       $06
00095864 E701                       	dc.b	smpsNoAttack, $01
00095866 E10C                       	smpsAlterNote       $0C
00095868 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009586C E106                       	smpsAlterNote       $06
0009586E E701                       	dc.b	smpsNoAttack, $01
00095870 E103                       	smpsAlterNote       $03
00095872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095876 E109                       	smpsAlterNote       $09
00095878 E701                       	dc.b	smpsNoAttack, $01
0009587A E10D                       	smpsAlterNote       $0D
0009587C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095880 E109                       	smpsAlterNote       $09
00095882 B80D                       	dc.b	nG4, $0D
00095884 E103                       	smpsAlterNote       $03
00095886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009588A E109                       	smpsAlterNote       $09
0009588C E701                       	dc.b	smpsNoAttack, $01
0009588E E10C                       	smpsAlterNote       $0C
00095890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095894 E106                       	smpsAlterNote       $06
00095896 E701                       	dc.b	smpsNoAttack, $01
00095898 E102                       	smpsAlterNote       $02
0009589A E701                       	dc.b	smpsNoAttack, $01
0009589C E103                       	smpsAlterNote       $03
0009589E E701                       	dc.b	smpsNoAttack, $01
000958A0 E109                       	smpsAlterNote       $09
000958A2 E701                       	dc.b	smpsNoAttack, $01
000958A4 E10D                       	smpsAlterNote       $0D
000958A6 E701                       	dc.b	smpsNoAttack, $01
000958A8 E109                       	smpsAlterNote       $09
000958AA E701                       	dc.b	smpsNoAttack, $01
000958AC E106                       	smpsAlterNote       $06
000958AE E701                       	dc.b	smpsNoAttack, $01
000958B0 E102                       	smpsAlterNote       $02
000958B2 E701                       	dc.b	smpsNoAttack, $01
000958B4 E106                       	smpsAlterNote       $06
000958B6 E701                       	dc.b	smpsNoAttack, $01
000958B8 E10C                       	smpsAlterNote       $0C
000958BA E701                       	dc.b	smpsNoAttack, $01
000958BC E10D                       	smpsAlterNote       $0D
000958BE E701                       	dc.b	smpsNoAttack, $01
000958C0 E109                       	smpsAlterNote       $09
000958C2 E701                       	dc.b	smpsNoAttack, $01
000958C4 E10B                       	smpsAlterNote       $0B
000958C6 BA0D                       	dc.b	nA4, $0D
000958C8 E108                       	smpsAlterNote       $08
000958CA E701                       	dc.b	smpsNoAttack, $01
000958CC E105                       	smpsAlterNote       $05
000958CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000958D2 E10B                       	smpsAlterNote       $0B
000958D4 E701                       	dc.b	smpsNoAttack, $01
000958D6 E10F                       	smpsAlterNote       $0F
000958D8 E701                       	dc.b	smpsNoAttack, $01
000958DA E10E                       	smpsAlterNote       $0E
000958DC E701                       	dc.b	smpsNoAttack, $01
000958DE E108                       	smpsAlterNote       $08
000958E0 E701                       	dc.b	smpsNoAttack, $01
000958E2 E104                       	smpsAlterNote       $04
000958E4 E701                       	dc.b	smpsNoAttack, $01
000958E6 E108                       	smpsAlterNote       $08
000958E8 E701                       	dc.b	smpsNoAttack, $01
000958EA E10B                       	smpsAlterNote       $0B
000958EC E701                       	dc.b	smpsNoAttack, $01
000958EE E10F                       	smpsAlterNote       $0F
000958F0 E701                       	dc.b	smpsNoAttack, $01
000958F2 E10B                       	smpsAlterNote       $0B
000958F4 E701                       	dc.b	smpsNoAttack, $01
000958F6 E105                       	smpsAlterNote       $05
000958F8 E701                       	dc.b	smpsNoAttack, $01
000958FA E104                       	smpsAlterNote       $04
000958FC E701                       	dc.b	smpsNoAttack, $01
000958FE E108                       	smpsAlterNote       $08
00095900 E701                       	dc.b	smpsNoAttack, $01
00095902 E10E                       	smpsAlterNote       $0E
00095904 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095908 E10B                       	smpsAlterNote       $0B
0009590A E701                       	dc.b	smpsNoAttack, $01
0009590C E105                       	smpsAlterNote       $05
0009590E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095912 E10B                       	smpsAlterNote       $0B
00095914 E701                       	dc.b	smpsNoAttack, $01
00095916 E10E                       	smpsAlterNote       $0E
00095918 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009591C E108                       	smpsAlterNote       $08
0009591E E701                       	dc.b	smpsNoAttack, $01
00095920 E105                       	smpsAlterNote       $05
00095922 8001                       	dc.b	nRst, $01
00095924 E109                       	smpsAlterNote       $09
00095926 B60A                       	dc.b	nF4, $0A
00095928 E108                       	smpsAlterNote       $08
0009592A B507                       	dc.b	nE4, $07
0009592C E107                       	smpsAlterNote       $07
0009592E B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00095932 E108                       	smpsAlterNote       $08
00095934 B503                       	dc.b	nE4, $03
00095936 E109                       	smpsAlterNote       $09
00095938 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00095940 E10B                       	smpsAlterNote       $0B
00095942 BA0D                       	dc.b	nA4, $0D
00095944 E108                       	smpsAlterNote       $08
00095946 E701                       	dc.b	smpsNoAttack, $01
00095948 E104                       	smpsAlterNote       $04
0009594A E701                       	dc.b	smpsNoAttack, $01
0009594C E108                       	smpsAlterNote       $08
0009594E E701                       	dc.b	smpsNoAttack, $01
00095950 E10B                       	smpsAlterNote       $0B
00095952 E701                       	dc.b	smpsNoAttack, $01
00095954 E10F                       	smpsAlterNote       $0F
00095956 E701                       	dc.b	smpsNoAttack, $01
00095958 E10B                       	smpsAlterNote       $0B
0009595A E701                       	dc.b	smpsNoAttack, $01
0009595C E105                       	smpsAlterNote       $05
0009595E E701                       	dc.b	smpsNoAttack, $01
00095960 E104                       	smpsAlterNote       $04
00095962 E701                       	dc.b	smpsNoAttack, $01
00095964 E108                       	smpsAlterNote       $08
00095966 E701                       	dc.b	smpsNoAttack, $01
00095968 E10E                       	smpsAlterNote       $0E
0009596A E701                       	dc.b	smpsNoAttack, $01
0009596C E10F                       	smpsAlterNote       $0F
0009596E 8001                       	dc.b	nRst, $01
00095970 E109                       	smpsAlterNote       $09
00095972 C20D                       	dc.b	nF5, $0D
00095974 E106                       	smpsAlterNote       $06
00095976 E701                       	dc.b	smpsNoAttack, $01
00095978 E102                       	smpsAlterNote       $02
0009597A E701                       	dc.b	smpsNoAttack, $01
0009597C E106                       	smpsAlterNote       $06
0009597E E701                       	dc.b	smpsNoAttack, $01
00095980 E109                       	smpsAlterNote       $09
00095982 E701                       	dc.b	smpsNoAttack, $01
00095984 E10D                       	smpsAlterNote       $0D
00095986 E701                       	dc.b	smpsNoAttack, $01
00095988 E109                       	smpsAlterNote       $09
0009598A E701                       	dc.b	smpsNoAttack, $01
0009598C E103                       	smpsAlterNote       $03
0009598E E701                       	dc.b	smpsNoAttack, $01
00095990 E102                       	smpsAlterNote       $02
00095992 E701                       	dc.b	smpsNoAttack, $01
00095994 E106                       	smpsAlterNote       $06
00095996 E701                       	dc.b	smpsNoAttack, $01
00095998 E10C                       	smpsAlterNote       $0C
0009599A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009599E E109                       	smpsAlterNote       $09
000959A0 E701                       	dc.b	smpsNoAttack, $01
000959A2 E103                       	smpsAlterNote       $03
000959A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959A8 E109                       	smpsAlterNote       $09
000959AA E701                       	dc.b	smpsNoAttack, $01
000959AC E10C                       	smpsAlterNote       $0C
000959AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959B2 E106                       	smpsAlterNote       $06
000959B4 E701                       	dc.b	smpsNoAttack, $01
000959B6 E102                       	smpsAlterNote       $02
000959B8 E701                       	dc.b	smpsNoAttack, $01
000959BA E103                       	smpsAlterNote       $03
000959BC E701                       	dc.b	smpsNoAttack, $01
000959BE E109                       	smpsAlterNote       $09
000959C0 E701                       	dc.b	smpsNoAttack, $01
000959C2 E10D                       	smpsAlterNote       $0D
000959C4 E701                       	dc.b	smpsNoAttack, $01
000959C6 E109                       	smpsAlterNote       $09
000959C8 E701                       	dc.b	smpsNoAttack, $01
000959CA E106                       	smpsAlterNote       $06
000959CC E701                       	dc.b	smpsNoAttack, $01
000959CE E102                       	smpsAlterNote       $02
000959D0 E701                       	dc.b	smpsNoAttack, $01
000959D2 E106                       	smpsAlterNote       $06
000959D4 E701                       	dc.b	smpsNoAttack, $01
000959D6 E10C                       	smpsAlterNote       $0C
000959D8 E701                       	dc.b	smpsNoAttack, $01
000959DA E10D                       	smpsAlterNote       $0D
000959DC E701                       	dc.b	smpsNoAttack, $01
000959DE E109                       	smpsAlterNote       $09
000959E0 E701                       	dc.b	smpsNoAttack, $01
000959E2 E103                       	smpsAlterNote       $03
000959E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959E8 E106                       	smpsAlterNote       $06
000959EA E701                       	dc.b	smpsNoAttack, $01
000959EC E10C                       	smpsAlterNote       $0C
000959EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959F2 E106                       	smpsAlterNote       $06
000959F4 E701                       	dc.b	smpsNoAttack, $01
000959F6 E103                       	smpsAlterNote       $03
000959F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000959FC E109                       	smpsAlterNote       $09
000959FE E701                       	dc.b	smpsNoAttack, $01
00095A00 E10D                       	smpsAlterNote       $0D
00095A02 E701                       	dc.b	smpsNoAttack, $01
00095A04 E10C                       	smpsAlterNote       $0C
00095A06 E701                       	dc.b	smpsNoAttack, $01
00095A08 E106                       	smpsAlterNote       $06
00095A0A E701                       	dc.b	smpsNoAttack, $01
00095A0C E103                       	smpsAlterNote       $03
00095A0E 8001                       	dc.b	nRst, $01
00095A10 E109                       	smpsAlterNote       $09
00095A12 C206 8001                  	dc.b	nF5, $06, nRst, $01
00095A18 E10C                       	smpsAlterNote       $0C
00095A1A E601                       	smpsAlterVol        $01
00095A1C BB0D                       	dc.b	nBb4, $0D
00095A1E E106                       	smpsAlterNote       $06
00095A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A24 E109                       	smpsAlterNote       $09
00095A26 E701                       	dc.b	smpsNoAttack, $01
00095A28 E10F                       	smpsAlterNote       $0F
00095A2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A2E E109                       	smpsAlterNote       $09
00095A30 E701                       	dc.b	smpsNoAttack, $01
00095A32 E106                       	smpsAlterNote       $06
00095A34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A38 E10C                       	smpsAlterNote       $0C
00095A3A E701                       	dc.b	smpsNoAttack, $01
00095A3C E110                       	smpsAlterNote       $10
00095A3E E701                       	dc.b	smpsNoAttack, $01
00095A40 E10F                       	smpsAlterNote       $0F
00095A42 E701                       	dc.b	smpsNoAttack, $01
00095A44 E109                       	smpsAlterNote       $09
00095A46 E701                       	dc.b	smpsNoAttack, $01
00095A48 E105                       	smpsAlterNote       $05
00095A4A E701                       	dc.b	smpsNoAttack, $01
00095A4C E106                       	smpsAlterNote       $06
00095A4E 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00095A52 E103                       	smpsAlterNote       $03
00095A54 E701                       	dc.b	smpsNoAttack, $01
00095A56 E1FF                       	smpsAlterNote       $FF
00095A58 E701                       	dc.b	smpsNoAttack, $01
00095A5A E103                       	smpsAlterNote       $03
00095A5C E701                       	dc.b	smpsNoAttack, $01
00095A5E E106                       	smpsAlterNote       $06
00095A60 E701                       	dc.b	smpsNoAttack, $01
00095A62 E10A                       	smpsAlterNote       $0A
00095A64 E701                       	dc.b	smpsNoAttack, $01
00095A66 E106                       	smpsAlterNote       $06
00095A68 E701                       	dc.b	smpsNoAttack, $01
00095A6A E100                       	smpsAlterNote       $00
00095A6C E701                       	dc.b	smpsNoAttack, $01
00095A6E E1FF                       	smpsAlterNote       $FF
00095A70 E701                       	dc.b	smpsNoAttack, $01
00095A72 E103                       	smpsAlterNote       $03
00095A74 E701                       	dc.b	smpsNoAttack, $01
00095A76 E109                       	smpsAlterNote       $09
00095A78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A7C E106                       	smpsAlterNote       $06
00095A7E E701                       	dc.b	smpsNoAttack, $01
00095A80 E100                       	smpsAlterNote       $00
00095A82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A86 E107                       	smpsAlterNote       $07
00095A88 BF0E                       	dc.b	nD5, $0E
00095A8A E101                       	smpsAlterNote       $01
00095A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A90 E107                       	smpsAlterNote       $07
00095A92 E701                       	dc.b	smpsNoAttack, $01
00095A94 E10A                       	smpsAlterNote       $0A
00095A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095A9A E104                       	smpsAlterNote       $04
00095A9C E701                       	dc.b	smpsNoAttack, $01
00095A9E E100                       	smpsAlterNote       $00
00095AA0 E701                       	dc.b	smpsNoAttack, $01
00095AA2 E101                       	smpsAlterNote       $01
00095AA4 E701                       	dc.b	smpsNoAttack, $01
00095AA6 E107                       	smpsAlterNote       $07
00095AA8 E701                       	dc.b	smpsNoAttack, $01
00095AAA E10B                       	smpsAlterNote       $0B
00095AAC E701                       	dc.b	smpsNoAttack, $01
00095AAE E107                       	smpsAlterNote       $07
00095AB0 E701                       	dc.b	smpsNoAttack, $01
00095AB2 E104                       	smpsAlterNote       $04
00095AB4 E701                       	dc.b	smpsNoAttack, $01
00095AB6 E100                       	smpsAlterNote       $00
00095AB8 E701                       	dc.b	smpsNoAttack, $01
00095ABA E101                       	smpsAlterNote       $01
00095ABC 8001                       	dc.b	nRst, $01
00095ABE E108                       	smpsAlterNote       $08
00095AC0 C10C                       	dc.b	nE5, $0C
00095AC2 E109                       	smpsAlterNote       $09
00095AC4 C201 8001                  	dc.b	nF5, $01, nRst, $01
00095AC8 E10A                       	smpsAlterNote       $0A
00095ACA 8001                       	dc.b	nRst, $01
00095ACC E109                       	smpsAlterNote       $09
00095ACE C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00095AD2 E106                       	smpsAlterNote       $06
00095AD4 E701                       	dc.b	smpsNoAttack, $01
00095AD6 E102                       	smpsAlterNote       $02
00095AD8 E701                       	dc.b	smpsNoAttack, $01
00095ADA E103                       	smpsAlterNote       $03
00095ADC E701                       	dc.b	smpsNoAttack, $01
00095ADE E109                       	smpsAlterNote       $09
00095AE0 E701                       	dc.b	smpsNoAttack, $01
00095AE2 E10D                       	smpsAlterNote       $0D
00095AE4 E701                       	dc.b	smpsNoAttack, $01
00095AE6 E109                       	smpsAlterNote       $09
00095AE8 E701                       	dc.b	smpsNoAttack, $01
00095AEA E106                       	smpsAlterNote       $06
00095AEC E701                       	dc.b	smpsNoAttack, $01
00095AEE E102                       	smpsAlterNote       $02
00095AF0 E701                       	dc.b	smpsNoAttack, $01
00095AF2 E106                       	smpsAlterNote       $06
00095AF4 E701                       	dc.b	smpsNoAttack, $01
00095AF6 E10C                       	smpsAlterNote       $0C
00095AF8 E701                       	dc.b	smpsNoAttack, $01
00095AFA E10D                       	smpsAlterNote       $0D
00095AFC E701                       	dc.b	smpsNoAttack, $01
00095AFE E109                       	smpsAlterNote       $09
00095B00 C40D                       	dc.b	nG5, $0D
00095B02 E106                       	smpsAlterNote       $06
00095B04 E701                       	dc.b	smpsNoAttack, $01
00095B06 E102                       	smpsAlterNote       $02
00095B08 E701                       	dc.b	smpsNoAttack, $01
00095B0A E103                       	smpsAlterNote       $03
00095B0C E701                       	dc.b	smpsNoAttack, $01
00095B0E E109                       	smpsAlterNote       $09
00095B10 E701                       	dc.b	smpsNoAttack, $01
00095B12 E108                       	smpsAlterNote       $08
00095B14 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00095B20 E109                       	smpsAlterNote       $09
00095B22 C20D                       	dc.b	nF5, $0D
00095B24 E106                       	smpsAlterNote       $06
00095B26 E701                       	dc.b	smpsNoAttack, $01
00095B28 E102                       	smpsAlterNote       $02
00095B2A E701                       	dc.b	smpsNoAttack, $01
00095B2C E106                       	smpsAlterNote       $06
00095B2E E701                       	dc.b	smpsNoAttack, $01
00095B30 E109                       	smpsAlterNote       $09
00095B32 E701                       	dc.b	smpsNoAttack, $01
00095B34 E10D                       	smpsAlterNote       $0D
00095B36 E701                       	dc.b	smpsNoAttack, $01
00095B38 E109                       	smpsAlterNote       $09
00095B3A E701                       	dc.b	smpsNoAttack, $01
00095B3C E103                       	smpsAlterNote       $03
00095B3E E701                       	dc.b	smpsNoAttack, $01
00095B40 E102                       	smpsAlterNote       $02
00095B42 E701                       	dc.b	smpsNoAttack, $01
00095B44 E106                       	smpsAlterNote       $06
00095B46 E701                       	dc.b	smpsNoAttack, $01
00095B48 E10C                       	smpsAlterNote       $0C
00095B4A E701                       	dc.b	smpsNoAttack, $01
00095B4C E10D                       	smpsAlterNote       $0D
00095B4E 8001                       	dc.b	nRst, $01
00095B50 E112                       	smpsAlterNote       $12
00095B52 C401                       	dc.b	nG5, $01
00095B54 E1EB                       	smpsAlterNote       $EB
00095B56 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00095B59 E1FD                       	smpsAlterNote       $FD
00095B5B E701                       	dc.b	smpsNoAttack, $01
00095B5D E10F                       	smpsAlterNote       $0F
00095B5F E701                       	dc.b	smpsNoAttack, $01
00095B61 E118                       	smpsAlterNote       $18
00095B63 E701                       	dc.b	smpsNoAttack, $01
00095B65 E1ED                       	smpsAlterNote       $ED
00095B67 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00095B6A E1FF                       	smpsAlterNote       $FF
00095B6C E701                       	dc.b	smpsNoAttack, $01
00095B6E E10B                       	smpsAlterNote       $0B
00095B70 E703                       	dc.b	smpsNoAttack, $03
00095B72 E109                       	smpsAlterNote       $09
00095B74 C407                       	dc.b	nG5, $07
00095B76 E108                       	smpsAlterNote       $08
00095B78 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00095B84 E109                       	smpsAlterNote       $09
00095B86 C20D                       	dc.b	nF5, $0D
00095B88 E103                       	smpsAlterNote       $03
00095B8A E701                       	dc.b	smpsNoAttack, $01
00095B8C E102                       	smpsAlterNote       $02
00095B8E E701                       	dc.b	smpsNoAttack, $01
00095B90 E106                       	smpsAlterNote       $06
00095B92 E701                       	dc.b	smpsNoAttack, $01
00095B94 E10C                       	smpsAlterNote       $0C
00095B96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095B9A E109                       	smpsAlterNote       $09
00095B9C E701                       	dc.b	smpsNoAttack, $01
00095B9E E103                       	smpsAlterNote       $03
00095BA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BA4 E109                       	smpsAlterNote       $09
00095BA6 E701                       	dc.b	smpsNoAttack, $01
00095BA8 E10C                       	smpsAlterNote       $0C
00095BAA E701                       	dc.b	smpsNoAttack, $01
00095BAC E10D                       	smpsAlterNote       $0D
00095BAE 8001                       	dc.b	nRst, $01
00095BB0 E10B                       	smpsAlterNote       $0B
00095BB2 C609 8001                  	dc.b	nA5, $09, nRst, $01
00095BB6 E109                       	smpsAlterNote       $09
00095BB8 B806 8001                  	dc.b	nG4, $06, nRst, $01
00095BBC E108                       	smpsAlterNote       $08
00095BBE C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00095BCA 8001                       	dc.b	nRst, $01
00095BCC E109                       	smpsAlterNote       $09
00095BCE C20D                       	dc.b	nF5, $0D
00095BD0 E103                       	smpsAlterNote       $03
00095BD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BD6 E106                       	smpsAlterNote       $06
00095BD8 E701                       	dc.b	smpsNoAttack, $01
00095BDA E10C                       	smpsAlterNote       $0C
00095BDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BE0 E106                       	smpsAlterNote       $06
00095BE2 E701                       	dc.b	smpsNoAttack, $01
00095BE4 E103                       	smpsAlterNote       $03
00095BE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095BEA E109                       	smpsAlterNote       $09
00095BEC E701                       	dc.b	smpsNoAttack, $01
00095BEE E10D                       	smpsAlterNote       $0D
00095BF0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095BF6 E108                       	smpsAlterNote       $08
00095BF8 E6FF                       	smpsAlterVol        $FF
00095BFA A806                       	dc.b	nEb3, $06
00095BFC E10C                       	smpsAlterNote       $0C
00095BFE A303 8001                  	dc.b	nBb2, $03, nRst, $01
00095C02 E108                       	smpsAlterNote       $08
00095C04 A803                       	dc.b	nEb3, $03
00095C06 E109                       	smpsAlterNote       $09
00095C08 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00095C0C E10C                       	smpsAlterNote       $0C
00095C0E AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00095C18 E109                       	smpsAlterNote       $09
00095C1A E602                       	smpsAlterVol        $02
00095C1C B604                       	dc.b	nF4, $04
00095C1E E602                       	smpsAlterVol        $02
00095C20 F6F1 AA                    	smpsJump            music84_Jump02
00095C23                            
00095C23                            ; FM4 Data
00095C23                            music84_FM4:
00095C25 E040                       	smpsPan             panRight, $00
00095C27 8003                       	dc.b	nRst, $03
00095C29 E10F                       	smpsAlterNote       $0F
00095C2B C603 8008                  	dc.b	nA5, $03, nRst, $08
00095C2F E10D                       	smpsAlterNote       $0D
00095C31 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00095C35 E10C                       	smpsAlterNote       $0C
00095C37 C103 8004                  	dc.b	nE5, $03, nRst, $04
00095C3D E6FE                       	smpsAlterVol        $FE
00095C3F E110                       	smpsAlterNote       $10
00095C41 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00095C45 E10F                       	smpsAlterNote       $0F
00095C47 C602 8001                  	dc.b	nA5, $02, nRst, $01
00095C4B E10D                       	smpsAlterNote       $0D
00095C4D C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00095C56 E10C                       	smpsAlterNote       $0C
00095C58 C103                       	dc.b	nE5, $03
00095C5A E10A                       	smpsAlterNote       $0A
00095C5C BD03 8001                  	dc.b	nC5, $03, nRst, $01
00095C62 03                         	dc.b	$03
00095C63                            
00095C63                            music84_Jump01:
00095C63 E10B                       	smpsAlterNote       $0B
00095C65 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095C69 E10C                       	smpsAlterNote       $0C
00095C6B C102 8001                  	dc.b	nE5, $02, nRst, $01
00095C6F E10D                       	smpsAlterNote       $0D
00095C71 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00095C7B E10B                       	smpsAlterNote       $0B
00095C7D BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095C81 E107                       	smpsAlterNote       $07
00095C83 E701                       	dc.b	smpsNoAttack, $01
00095C85 E103                       	smpsAlterNote       $03
00095C87 E701                       	dc.b	smpsNoAttack, $01
00095C89 E104                       	smpsAlterNote       $04
00095C8B E701                       	dc.b	smpsNoAttack, $01
00095C8D E10A                       	smpsAlterNote       $0A
00095C8F E701                       	dc.b	smpsNoAttack, $01
00095C91 E10E                       	smpsAlterNote       $0E
00095C93 E701                       	dc.b	smpsNoAttack, $01
00095C95 E10A                       	smpsAlterNote       $0A
00095C97 E701                       	dc.b	smpsNoAttack, $01
00095C99 E107                       	smpsAlterNote       $07
00095C9B E701                       	dc.b	smpsNoAttack, $01
00095C9D E104                       	smpsAlterNote       $04
00095C9F 8001                       	dc.b	nRst, $01
00095CA1 E110                       	smpsAlterNote       $10
00095CA3 C703                       	dc.b	nBb5, $03
00095CA5 E10F                       	smpsAlterNote       $0F
00095CA7 C603 8001                  	dc.b	nA5, $03, nRst, $01
00095CAB E10D                       	smpsAlterNote       $0D
00095CAD C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00095CB3 E10C                       	smpsAlterNote       $0C
00095CB5 E701                       	dc.b	smpsNoAttack, $01
00095CB7 E108                       	smpsAlterNote       $08
00095CB9 E701                       	dc.b	smpsNoAttack, $01
00095CBB E10C                       	smpsAlterNote       $0C
00095CBD E701                       	dc.b	smpsNoAttack, $01
00095CBF E10F                       	smpsAlterNote       $0F
00095CC1 E701                       	dc.b	smpsNoAttack, $01
00095CC3 E113                       	smpsAlterNote       $13
00095CC5 E701                       	dc.b	smpsNoAttack, $01
00095CC7 E10F                       	smpsAlterNote       $0F
00095CC9 E701                       	dc.b	smpsNoAttack, $01
00095CCB E109                       	smpsAlterNote       $09
00095CCD E701                       	dc.b	smpsNoAttack, $01
00095CCF E108                       	smpsAlterNote       $08
00095CD1 E701                       	dc.b	smpsNoAttack, $01
00095CD3 E10C                       	smpsAlterNote       $0C
00095CD5 E701                       	dc.b	smpsNoAttack, $01
00095CD7 E112                       	smpsAlterNote       $12
00095CD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CDD E10C                       	smpsAlterNote       $0C
00095CDF E701                       	dc.b	smpsNoAttack, $01
00095CE1 E109                       	smpsAlterNote       $09
00095CE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095CE7 E10F                       	smpsAlterNote       $0F
00095CE9 E701                       	dc.b	smpsNoAttack, $01
00095CEB E113                       	smpsAlterNote       $13
00095CED E701                       	dc.b	smpsNoAttack, $01
00095CEF E112                       	smpsAlterNote       $12
00095CF1 E701                       	dc.b	smpsNoAttack, $01
00095CF3 E10C                       	smpsAlterNote       $0C
00095CF5 E701                       	dc.b	smpsNoAttack, $01
00095CF7 E108                       	smpsAlterNote       $08
00095CF9 E701                       	dc.b	smpsNoAttack, $01
00095CFB E10C                       	smpsAlterNote       $0C
00095CFD E701                       	dc.b	smpsNoAttack, $01
00095CFF E10F                       	smpsAlterNote       $0F
00095D01 E701                       	dc.b	smpsNoAttack, $01
00095D03 E113                       	smpsAlterNote       $13
00095D05 E701                       	dc.b	smpsNoAttack, $01
00095D07 E10F                       	smpsAlterNote       $0F
00095D09 E701                       	dc.b	smpsNoAttack, $01
00095D0B E109                       	smpsAlterNote       $09
00095D0D E701                       	dc.b	smpsNoAttack, $01
00095D0F E108                       	smpsAlterNote       $08
00095D11 E701                       	dc.b	smpsNoAttack, $01
00095D13 E10C                       	smpsAlterNote       $0C
00095D15 E701                       	dc.b	smpsNoAttack, $01
00095D17 E112                       	smpsAlterNote       $12
00095D19 E701                       	dc.b	smpsNoAttack, $01
00095D1B E113                       	smpsAlterNote       $13
00095D1D 800F                       	dc.b	nRst, $0F
00095D1F E10B                       	smpsAlterNote       $0B
00095D21 BF03                       	dc.b	nD5, $03
00095D23 E10C                       	smpsAlterNote       $0C
00095D25 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095D29 E10D                       	smpsAlterNote       $0D
00095D2B C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00095D33 E10B                       	smpsAlterNote       $0B
00095D35 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00095D3F E110                       	smpsAlterNote       $10
00095D41 C704                       	dc.b	nBb5, $04
00095D43 E10F                       	smpsAlterNote       $0F
00095D45 C604 8001                  	dc.b	nA5, $04, nRst, $01
00095D49 E10D                       	smpsAlterNote       $0D
00095D4B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00095D51 E109                       	smpsAlterNote       $09
00095D53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D57 E10F                       	smpsAlterNote       $0F
00095D59 E701                       	dc.b	smpsNoAttack, $01
00095D5B E112                       	smpsAlterNote       $12
00095D5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D61 E10C                       	smpsAlterNote       $0C
00095D63 E701                       	dc.b	smpsNoAttack, $01
00095D65 E108                       	smpsAlterNote       $08
00095D67 E701                       	dc.b	smpsNoAttack, $01
00095D69 E109                       	smpsAlterNote       $09
00095D6B E701                       	dc.b	smpsNoAttack, $01
00095D6D E10F                       	smpsAlterNote       $0F
00095D6F E701                       	dc.b	smpsNoAttack, $01
00095D71 E113                       	smpsAlterNote       $13
00095D73 E701                       	dc.b	smpsNoAttack, $01
00095D75 E10F                       	smpsAlterNote       $0F
00095D77 E701                       	dc.b	smpsNoAttack, $01
00095D79 E10C                       	smpsAlterNote       $0C
00095D7B E701                       	dc.b	smpsNoAttack, $01
00095D7D E108                       	smpsAlterNote       $08
00095D7F E701                       	dc.b	smpsNoAttack, $01
00095D81 E10C                       	smpsAlterNote       $0C
00095D83 E701                       	dc.b	smpsNoAttack, $01
00095D85 E112                       	smpsAlterNote       $12
00095D87 E701                       	dc.b	smpsNoAttack, $01
00095D89 E113                       	smpsAlterNote       $13
00095D8B E701                       	dc.b	smpsNoAttack, $01
00095D8D E10F                       	smpsAlterNote       $0F
00095D8F E701                       	dc.b	smpsNoAttack, $01
00095D91 E109                       	smpsAlterNote       $09
00095D93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095D97 E10C                       	smpsAlterNote       $0C
00095D99 E701                       	dc.b	smpsNoAttack, $01
00095D9B E112                       	smpsAlterNote       $12
00095D9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095DA1 E10C                       	smpsAlterNote       $0C
00095DA3 E701                       	dc.b	smpsNoAttack, $01
00095DA5 E109                       	smpsAlterNote       $09
00095DA7 E701                       	dc.b	smpsNoAttack, $01
00095DA9 E10D                       	smpsAlterNote       $0D
00095DAB C401 8001                  	dc.b	nG5, $01, nRst, $01
00095DAF E10F                       	smpsAlterNote       $0F
00095DB1 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00095DBB E10D                       	smpsAlterNote       $0D
00095DBD C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00095DC3 E10B                       	smpsAlterNote       $0B
00095DC5 BF0D                       	dc.b	nD5, $0D
00095DC7 E108                       	smpsAlterNote       $08
00095DC9 E701                       	dc.b	smpsNoAttack, $01
00095DCB E104                       	smpsAlterNote       $04
00095DCD E701                       	dc.b	smpsNoAttack, $01
00095DCF E108                       	smpsAlterNote       $08
00095DD1 E701                       	dc.b	smpsNoAttack, $01
00095DD3 E10B                       	smpsAlterNote       $0B
00095DD5 E701                       	dc.b	smpsNoAttack, $01
00095DD7 E10F                       	smpsAlterNote       $0F
00095DD9 E701                       	dc.b	smpsNoAttack, $01
00095DDB E10B                       	smpsAlterNote       $0B
00095DDD E701                       	dc.b	smpsNoAttack, $01
00095DDF E105                       	smpsAlterNote       $05
00095DE1 E701                       	dc.b	smpsNoAttack, $01
00095DE3 E104                       	smpsAlterNote       $04
00095DE5 E701                       	dc.b	smpsNoAttack, $01
00095DE7 E108                       	smpsAlterNote       $08
00095DE9 E701                       	dc.b	smpsNoAttack, $01
00095DEB E10E                       	smpsAlterNote       $0E
00095DED E701                       	dc.b	smpsNoAttack, $01
00095DEF E10F                       	smpsAlterNote       $0F
00095DF1 8001                       	dc.b	nRst, $01
00095DF3 E10C                       	smpsAlterNote       $0C
00095DF5 C101                       	dc.b	nE5, $01
00095DF7 E10D                       	smpsAlterNote       $0D
00095DF9 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00095DFF E10F                       	smpsAlterNote       $0F
00095E01 C606 8001                  	dc.b	nA5, $06, nRst, $01
00095E05 E10C                       	smpsAlterNote       $0C
00095E07 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00095E0B E10D                       	smpsAlterNote       $0D
00095E0D CE06 8001                  	dc.b	nF6, $06, nRst, $01
00095E11 E10C                       	smpsAlterNote       $0C
00095E13 CD03                       	dc.b	nE6, $03
00095E15 E10A                       	smpsAlterNote       $0A
00095E17 C903 8001                  	dc.b	nC6, $03, nRst, $01
00095E1B E10D                       	smpsAlterNote       $0D
00095E1D C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00095E25 E109                       	smpsAlterNote       $09
00095E27 E701                       	dc.b	smpsNoAttack, $01
00095E29 E10D                       	smpsAlterNote       $0D
00095E2B E701                       	dc.b	smpsNoAttack, $01
00095E2D E110                       	smpsAlterNote       $10
00095E2F E701                       	dc.b	smpsNoAttack, $01
00095E31 E114                       	smpsAlterNote       $14
00095E33 E701                       	dc.b	smpsNoAttack, $01
00095E35 E110                       	smpsAlterNote       $10
00095E37 E701                       	dc.b	smpsNoAttack, $01
00095E39 E10A                       	smpsAlterNote       $0A
00095E3B E701                       	dc.b	smpsNoAttack, $01
00095E3D E109                       	smpsAlterNote       $09
00095E3F E701                       	dc.b	smpsNoAttack, $01
00095E41 E10D                       	smpsAlterNote       $0D
00095E43 E701                       	dc.b	smpsNoAttack, $01
00095E45 E113                       	smpsAlterNote       $13
00095E47 E701                       	dc.b	smpsNoAttack, $01
00095E49 E114                       	smpsAlterNote       $14
00095E4B 8001                       	dc.b	nRst, $01
00095E4D E10F                       	smpsAlterNote       $0F
00095E4F C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00095E55 E10C                       	smpsAlterNote       $0C
00095E57 E701                       	dc.b	smpsNoAttack, $01
00095E59 E108                       	smpsAlterNote       $08
00095E5B E701                       	dc.b	smpsNoAttack, $01
00095E5D E10C                       	smpsAlterNote       $0C
00095E5F E701                       	dc.b	smpsNoAttack, $01
00095E61 E112                       	smpsAlterNote       $12
00095E63 E701                       	dc.b	smpsNoAttack, $01
00095E65 E113                       	smpsAlterNote       $13
00095E67 E701                       	dc.b	smpsNoAttack, $01
00095E69 E10F                       	smpsAlterNote       $0F
00095E6B E701                       	dc.b	smpsNoAttack, $01
00095E6D E109                       	smpsAlterNote       $09
00095E6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E73 E10C                       	smpsAlterNote       $0C
00095E75 E701                       	dc.b	smpsNoAttack, $01
00095E77 E112                       	smpsAlterNote       $12
00095E79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E7D E10C                       	smpsAlterNote       $0C
00095E7F E701                       	dc.b	smpsNoAttack, $01
00095E81 E109                       	smpsAlterNote       $09
00095E83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095E87 E10F                       	smpsAlterNote       $0F
00095E89 E701                       	dc.b	smpsNoAttack, $01
00095E8B E113                       	smpsAlterNote       $13
00095E8D E701                       	dc.b	smpsNoAttack, $01
00095E8F E112                       	smpsAlterNote       $12
00095E91 E701                       	dc.b	smpsNoAttack, $01
00095E93 E10C                       	smpsAlterNote       $0C
00095E95 E701                       	dc.b	smpsNoAttack, $01
00095E97 E108                       	smpsAlterNote       $08
00095E99 E701                       	dc.b	smpsNoAttack, $01
00095E9B E10C                       	smpsAlterNote       $0C
00095E9D E701                       	dc.b	smpsNoAttack, $01
00095E9F E10F                       	smpsAlterNote       $0F
00095EA1 E701                       	dc.b	smpsNoAttack, $01
00095EA3 E113                       	smpsAlterNote       $13
00095EA5 E701                       	dc.b	smpsNoAttack, $01
00095EA7 E10F                       	smpsAlterNote       $0F
00095EA9 E701                       	dc.b	smpsNoAttack, $01
00095EAB E109                       	smpsAlterNote       $09
00095EAD E701                       	dc.b	smpsNoAttack, $01
00095EAF E108                       	smpsAlterNote       $08
00095EB1 E701                       	dc.b	smpsNoAttack, $01
00095EB3 E10C                       	smpsAlterNote       $0C
00095EB5 E701                       	dc.b	smpsNoAttack, $01
00095EB7 E112                       	smpsAlterNote       $12
00095EB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EBD E10F                       	smpsAlterNote       $0F
00095EBF E701                       	dc.b	smpsNoAttack, $01
00095EC1 E109                       	smpsAlterNote       $09
00095EC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EC7 E10F                       	smpsAlterNote       $0F
00095EC9 E701                       	dc.b	smpsNoAttack, $01
00095ECB E113                       	smpsAlterNote       $13
00095ECD E701                       	dc.b	smpsNoAttack, $01
00095ECF E112                       	smpsAlterNote       $12
00095ED1 E701                       	dc.b	smpsNoAttack, $01
00095ED3 E10C                       	smpsAlterNote       $0C
00095ED5 E701                       	dc.b	smpsNoAttack, $01
00095ED7 E108                       	smpsAlterNote       $08
00095ED9 E701                       	dc.b	smpsNoAttack, $01
00095EDB E10C                       	smpsAlterNote       $0C
00095EDD E701                       	dc.b	smpsNoAttack, $01
00095EDF E10F                       	smpsAlterNote       $0F
00095EE1 E701                       	dc.b	smpsNoAttack, $01
00095EE3 E113                       	smpsAlterNote       $13
00095EE5 E701                       	dc.b	smpsNoAttack, $01
00095EE7 E10F                       	smpsAlterNote       $0F
00095EE9 E701                       	dc.b	smpsNoAttack, $01
00095EEB E109                       	smpsAlterNote       $09
00095EED E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095EF1 E10F                       	smpsAlterNote       $0F
00095EF3 C60D                       	dc.b	nA5, $0D
00095EF5 E109                       	smpsAlterNote       $09
00095EF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095EFB E10C                       	smpsAlterNote       $0C
00095EFD E701                       	dc.b	smpsNoAttack, $01
00095EFF E112                       	smpsAlterNote       $12
00095F01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F05 E10C                       	smpsAlterNote       $0C
00095F07 E701                       	dc.b	smpsNoAttack, $01
00095F09 E109                       	smpsAlterNote       $09
00095F0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F0F E10F                       	smpsAlterNote       $0F
00095F11 E701                       	dc.b	smpsNoAttack, $01
00095F13 E113                       	smpsAlterNote       $13
00095F15 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00095F1B E10D                       	smpsAlterNote       $0D
00095F1D C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00095F25 E10C                       	smpsAlterNote       $0C
00095F27 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00095F2D E6FF                       	smpsAlterVol        $FF
00095F2F E10B                       	smpsAlterNote       $0B
00095F31 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00095F35 E10C                       	smpsAlterNote       $0C
00095F37 C103                       	dc.b	nE5, $03
00095F39 E10D                       	smpsAlterNote       $0D
00095F3B C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00095F45 E10B                       	smpsAlterNote       $0B
00095F47 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00095F4B E107                       	smpsAlterNote       $07
00095F4D E701                       	dc.b	smpsNoAttack, $01
00095F4F E104                       	smpsAlterNote       $04
00095F51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F55 E10A                       	smpsAlterNote       $0A
00095F57 E701                       	dc.b	smpsNoAttack, $01
00095F59 E10D                       	smpsAlterNote       $0D
00095F5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095F5F E107                       	smpsAlterNote       $07
00095F61 E701                       	dc.b	smpsNoAttack, $01
00095F63 E104                       	smpsAlterNote       $04
00095F65 8001                       	dc.b	nRst, $01
00095F67 E110                       	smpsAlterNote       $10
00095F69 C703                       	dc.b	nBb5, $03
00095F6B E10F                       	smpsAlterNote       $0F
00095F6D C603 8001                  	dc.b	nA5, $03, nRst, $01
00095F71 E10D                       	smpsAlterNote       $0D
00095F73 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00095F77 E10C                       	smpsAlterNote       $0C
00095F79 E701                       	dc.b	smpsNoAttack, $01
00095F7B E108                       	smpsAlterNote       $08
00095F7D E701                       	dc.b	smpsNoAttack, $01
00095F7F E109                       	smpsAlterNote       $09
00095F81 E701                       	dc.b	smpsNoAttack, $01
00095F83 E10F                       	smpsAlterNote       $0F
00095F85 E701                       	dc.b	smpsNoAttack, $01
00095F87 E113                       	smpsAlterNote       $13
00095F89 E701                       	dc.b	smpsNoAttack, $01
00095F8B E10F                       	smpsAlterNote       $0F
00095F8D E701                       	dc.b	smpsNoAttack, $01
00095F8F E10C                       	smpsAlterNote       $0C
00095F91 E701                       	dc.b	smpsNoAttack, $01
00095F93 E108                       	smpsAlterNote       $08
00095F95 E701                       	dc.b	smpsNoAttack, $01
00095F97 E10C                       	smpsAlterNote       $0C
00095F99 E701                       	dc.b	smpsNoAttack, $01
00095F9B E112                       	smpsAlterNote       $12
00095F9D E701                       	dc.b	smpsNoAttack, $01
00095F9F E113                       	smpsAlterNote       $13
00095FA1 E701                       	dc.b	smpsNoAttack, $01
00095FA3 E10F                       	smpsAlterNote       $0F
00095FA5 E701                       	dc.b	smpsNoAttack, $01
00095FA7 E109                       	smpsAlterNote       $09
00095FA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FAD E10C                       	smpsAlterNote       $0C
00095FAF E701                       	dc.b	smpsNoAttack, $01
00095FB1 E112                       	smpsAlterNote       $12
00095FB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FB7 E10C                       	smpsAlterNote       $0C
00095FB9 E701                       	dc.b	smpsNoAttack, $01
00095FBB E109                       	smpsAlterNote       $09
00095FBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00095FC1 E10F                       	smpsAlterNote       $0F
00095FC3 E701                       	dc.b	smpsNoAttack, $01
00095FC5 E113                       	smpsAlterNote       $13
00095FC7 E701                       	dc.b	smpsNoAttack, $01
00095FC9 E112                       	smpsAlterNote       $12
00095FCB E701                       	dc.b	smpsNoAttack, $01
00095FCD E10C                       	smpsAlterNote       $0C
00095FCF E701                       	dc.b	smpsNoAttack, $01
00095FD1 E108                       	smpsAlterNote       $08
00095FD3 E701                       	dc.b	smpsNoAttack, $01
00095FD5 E10C                       	smpsAlterNote       $0C
00095FD7 E701                       	dc.b	smpsNoAttack, $01
00095FD9 E10F                       	smpsAlterNote       $0F
00095FDB E701                       	dc.b	smpsNoAttack, $01
00095FDD E113                       	smpsAlterNote       $13
00095FDF E701                       	dc.b	smpsNoAttack, $01
00095FE1 E10F                       	smpsAlterNote       $0F
00095FE3 BA03 8001                  	dc.b	nA4, $03, nRst, $01
00095FE7 E110                       	smpsAlterNote       $10
00095FE9 BB03                       	dc.b	nBb4, $03
00095FEB E10F                       	smpsAlterNote       $0F
00095FED BA06 8001                  	dc.b	nA4, $06, nRst, $01
00095FF1 E10B                       	smpsAlterNote       $0B
00095FF3 BF03                       	dc.b	nD5, $03
00095FF5 E10C                       	smpsAlterNote       $0C
00095FF7 C103 8001                  	dc.b	nE5, $03, nRst, $01
00095FFB E10D                       	smpsAlterNote       $0D
00095FFD C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00096007 E10B                       	smpsAlterNote       $0B
00096009 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00096015 E110                       	smpsAlterNote       $10
00096017 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009601B E10F                       	smpsAlterNote       $0F
0009601D C604                       	dc.b	nA5, $04
0009601F E10D                       	smpsAlterNote       $0D
00096021 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00096027 E109                       	smpsAlterNote       $09
00096029 E701                       	dc.b	smpsNoAttack, $01
0009602B E108                       	smpsAlterNote       $08
0009602D E701                       	dc.b	smpsNoAttack, $01
0009602F E10C                       	smpsAlterNote       $0C
00096031 E701                       	dc.b	smpsNoAttack, $01
00096033 E112                       	smpsAlterNote       $12
00096035 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096039 E10F                       	smpsAlterNote       $0F
0009603B E701                       	dc.b	smpsNoAttack, $01
0009603D E109                       	smpsAlterNote       $09
0009603F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096043 E10F                       	smpsAlterNote       $0F
00096045 E701                       	dc.b	smpsNoAttack, $01
00096047 E112                       	smpsAlterNote       $12
00096049 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009604D E10C                       	smpsAlterNote       $0C
0009604F E701                       	dc.b	smpsNoAttack, $01
00096051 E108                       	smpsAlterNote       $08
00096053 E701                       	dc.b	smpsNoAttack, $01
00096055 E109                       	smpsAlterNote       $09
00096057 E701                       	dc.b	smpsNoAttack, $01
00096059 E10F                       	smpsAlterNote       $0F
0009605B E701                       	dc.b	smpsNoAttack, $01
0009605D E113                       	smpsAlterNote       $13
0009605F E701                       	dc.b	smpsNoAttack, $01
00096061 E10F                       	smpsAlterNote       $0F
00096063 E701                       	dc.b	smpsNoAttack, $01
00096065 E10C                       	smpsAlterNote       $0C
00096067 E701                       	dc.b	smpsNoAttack, $01
00096069 E108                       	smpsAlterNote       $08
0009606B E701                       	dc.b	smpsNoAttack, $01
0009606D E10C                       	smpsAlterNote       $0C
0009606F E701                       	dc.b	smpsNoAttack, $01
00096071 E112                       	smpsAlterNote       $12
00096073 E701                       	dc.b	smpsNoAttack, $01
00096075 E113                       	smpsAlterNote       $13
00096077 E701                       	dc.b	smpsNoAttack, $01
00096079 E10F                       	smpsAlterNote       $0F
0009607B E701                       	dc.b	smpsNoAttack, $01
0009607D E109                       	smpsAlterNote       $09
0009607F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096083 E10C                       	smpsAlterNote       $0C
00096085 E701                       	dc.b	smpsNoAttack, $01
00096087 E112                       	smpsAlterNote       $12
00096089 E701                       	dc.b	smpsNoAttack, $01
0009608B E113                       	smpsAlterNote       $13
0009608D 8001                       	dc.b	nRst, $01
0009608F E10F                       	smpsAlterNote       $0F
00096091 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0009609D C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000960A5 E10D                       	smpsAlterNote       $0D
000960A7 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000960AD E10B                       	smpsAlterNote       $0B
000960AF BF0D                       	dc.b	nD5, $0D
000960B1 E108                       	smpsAlterNote       $08
000960B3 E701                       	dc.b	smpsNoAttack, $01
000960B5 E104                       	smpsAlterNote       $04
000960B7 E701                       	dc.b	smpsNoAttack, $01
000960B9 E105                       	smpsAlterNote       $05
000960BB E701                       	dc.b	smpsNoAttack, $01
000960BD E10B                       	smpsAlterNote       $0B
000960BF E701                       	dc.b	smpsNoAttack, $01
000960C1 E10F                       	smpsAlterNote       $0F
000960C3 E701                       	dc.b	smpsNoAttack, $01
000960C5 E10B                       	smpsAlterNote       $0B
000960C7 E701                       	dc.b	smpsNoAttack, $01
000960C9 E108                       	smpsAlterNote       $08
000960CB E701                       	dc.b	smpsNoAttack, $01
000960CD E104                       	smpsAlterNote       $04
000960CF E701                       	dc.b	smpsNoAttack, $01
000960D1 E108                       	smpsAlterNote       $08
000960D3 E701                       	dc.b	smpsNoAttack, $01
000960D5 E10E                       	smpsAlterNote       $0E
000960D7 E701                       	dc.b	smpsNoAttack, $01
000960D9 E10F                       	smpsAlterNote       $0F
000960DB E701                       	dc.b	smpsNoAttack, $01
000960DD E10C                       	smpsAlterNote       $0C
000960DF C101                       	dc.b	nE5, $01
000960E1 E10D                       	smpsAlterNote       $0D
000960E3 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000960EB E10F                       	smpsAlterNote       $0F
000960ED C607                       	dc.b	nA5, $07
000960EF E10C                       	smpsAlterNote       $0C
000960F1 CD07                       	dc.b	nE6, $07
000960F3 E10D                       	smpsAlterNote       $0D
000960F5 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000960F9 E10C                       	smpsAlterNote       $0C
000960FB CD03                       	dc.b	nE6, $03
000960FD E10A                       	smpsAlterNote       $0A
000960FF C903 8001                  	dc.b	nC6, $03, nRst, $01
00096103 E10D                       	smpsAlterNote       $0D
00096105 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0009610B E10A                       	smpsAlterNote       $0A
0009610D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096111 E110                       	smpsAlterNote       $10
00096113 E701                       	dc.b	smpsNoAttack, $01
00096115 E114                       	smpsAlterNote       $14
00096117 E701                       	dc.b	smpsNoAttack, $01
00096119 E113                       	smpsAlterNote       $13
0009611B E701                       	dc.b	smpsNoAttack, $01
0009611D E10D                       	smpsAlterNote       $0D
0009611F E701                       	dc.b	smpsNoAttack, $01
00096121 E109                       	smpsAlterNote       $09
00096123 E701                       	dc.b	smpsNoAttack, $01
00096125 E10D                       	smpsAlterNote       $0D
00096127 E701                       	dc.b	smpsNoAttack, $01
00096129 E110                       	smpsAlterNote       $10
0009612B E701                       	dc.b	smpsNoAttack, $01
0009612D E114                       	smpsAlterNote       $14
0009612F E701                       	dc.b	smpsNoAttack, $01
00096131 E10F                       	smpsAlterNote       $0F
00096133 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00096137 E10C                       	smpsAlterNote       $0C
00096139 E701                       	dc.b	smpsNoAttack, $01
0009613B E108                       	smpsAlterNote       $08
0009613D E701                       	dc.b	smpsNoAttack, $01
0009613F E10C                       	smpsAlterNote       $0C
00096141 E701                       	dc.b	smpsNoAttack, $01
00096143 E10F                       	smpsAlterNote       $0F
00096145 E701                       	dc.b	smpsNoAttack, $01
00096147 E113                       	smpsAlterNote       $13
00096149 E701                       	dc.b	smpsNoAttack, $01
0009614B E10F                       	smpsAlterNote       $0F
0009614D E701                       	dc.b	smpsNoAttack, $01
0009614F E109                       	smpsAlterNote       $09
00096151 E701                       	dc.b	smpsNoAttack, $01
00096153 E108                       	smpsAlterNote       $08
00096155 E701                       	dc.b	smpsNoAttack, $01
00096157 E10C                       	smpsAlterNote       $0C
00096159 E701                       	dc.b	smpsNoAttack, $01
0009615B E112                       	smpsAlterNote       $12
0009615D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096161 E10F                       	smpsAlterNote       $0F
00096163 E701                       	dc.b	smpsNoAttack, $01
00096165 E109                       	smpsAlterNote       $09
00096167 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009616B E10F                       	smpsAlterNote       $0F
0009616D E701                       	dc.b	smpsNoAttack, $01
0009616F E112                       	smpsAlterNote       $12
00096171 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096175 E10C                       	smpsAlterNote       $0C
00096177 E701                       	dc.b	smpsNoAttack, $01
00096179 E108                       	smpsAlterNote       $08
0009617B E701                       	dc.b	smpsNoAttack, $01
0009617D E109                       	smpsAlterNote       $09
0009617F E701                       	dc.b	smpsNoAttack, $01
00096181 E10F                       	smpsAlterNote       $0F
00096183 E701                       	dc.b	smpsNoAttack, $01
00096185 E113                       	smpsAlterNote       $13
00096187 E701                       	dc.b	smpsNoAttack, $01
00096189 E10F                       	smpsAlterNote       $0F
0009618B E701                       	dc.b	smpsNoAttack, $01
0009618D E10C                       	smpsAlterNote       $0C
0009618F E701                       	dc.b	smpsNoAttack, $01
00096191 E108                       	smpsAlterNote       $08
00096193 E701                       	dc.b	smpsNoAttack, $01
00096195 E10C                       	smpsAlterNote       $0C
00096197 E701                       	dc.b	smpsNoAttack, $01
00096199 E112                       	smpsAlterNote       $12
0009619B E701                       	dc.b	smpsNoAttack, $01
0009619D E113                       	smpsAlterNote       $13
0009619F E701                       	dc.b	smpsNoAttack, $01
000961A1 E10F                       	smpsAlterNote       $0F
000961A3 E701                       	dc.b	smpsNoAttack, $01
000961A5 E109                       	smpsAlterNote       $09
000961A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961AB E10C                       	smpsAlterNote       $0C
000961AD E701                       	dc.b	smpsNoAttack, $01
000961AF E112                       	smpsAlterNote       $12
000961B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961B5 E10C                       	smpsAlterNote       $0C
000961B7 E701                       	dc.b	smpsNoAttack, $01
000961B9 E109                       	smpsAlterNote       $09
000961BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961BF E10F                       	smpsAlterNote       $0F
000961C1 E701                       	dc.b	smpsNoAttack, $01
000961C3 E113                       	smpsAlterNote       $13
000961C5 E701                       	dc.b	smpsNoAttack, $01
000961C7 E112                       	smpsAlterNote       $12
000961C9 E701                       	dc.b	smpsNoAttack, $01
000961CB E10C                       	smpsAlterNote       $0C
000961CD E701                       	dc.b	smpsNoAttack, $01
000961CF E109                       	smpsAlterNote       $09
000961D1 8001                       	dc.b	nRst, $01
000961D3 E10F                       	smpsAlterNote       $0F
000961D5 C60D                       	dc.b	nA5, $0D
000961D7 E10C                       	smpsAlterNote       $0C
000961D9 E701                       	dc.b	smpsNoAttack, $01
000961DB E108                       	smpsAlterNote       $08
000961DD E701                       	dc.b	smpsNoAttack, $01
000961DF E10C                       	smpsAlterNote       $0C
000961E1 E701                       	dc.b	smpsNoAttack, $01
000961E3 E112                       	smpsAlterNote       $12
000961E5 E701                       	dc.b	smpsNoAttack, $01
000961E7 E113                       	smpsAlterNote       $13
000961E9 E701                       	dc.b	smpsNoAttack, $01
000961EB E10F                       	smpsAlterNote       $0F
000961ED E701                       	dc.b	smpsNoAttack, $01
000961EF E109                       	smpsAlterNote       $09
000961F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961F5 E10C                       	smpsAlterNote       $0C
000961F7 E701                       	dc.b	smpsNoAttack, $01
000961F9 E112                       	smpsAlterNote       $12
000961FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000961FF E10C                       	smpsAlterNote       $0C
00096201 E701                       	dc.b	smpsNoAttack, $01
00096203 E109                       	smpsAlterNote       $09
00096205 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096209 E10F                       	smpsAlterNote       $0F
0009620B E701                       	dc.b	smpsNoAttack, $01
0009620D E113                       	smpsAlterNote       $13
0009620F E701                       	dc.b	smpsNoAttack, $01
00096211 E112                       	smpsAlterNote       $12
00096213 E701                       	dc.b	smpsNoAttack, $01
00096215 E10C                       	smpsAlterNote       $0C
00096217 E701                       	dc.b	smpsNoAttack, $01
00096219 E108                       	smpsAlterNote       $08
0009621B E701                       	dc.b	smpsNoAttack, $01
0009621D E10C                       	smpsAlterNote       $0C
0009621F E701                       	dc.b	smpsNoAttack, $01
00096221 E10F                       	smpsAlterNote       $0F
00096223 E701                       	dc.b	smpsNoAttack, $01
00096225 E113                       	smpsAlterNote       $13
00096227 E701                       	dc.b	smpsNoAttack, $01
00096229 E10F                       	smpsAlterNote       $0F
0009622B E701                       	dc.b	smpsNoAttack, $01
0009622D E109                       	smpsAlterNote       $09
0009622F E701                       	dc.b	smpsNoAttack, $01
00096231 E108                       	smpsAlterNote       $08
00096233 E701                       	dc.b	smpsNoAttack, $01
00096235 E10C                       	smpsAlterNote       $0C
00096237 E701                       	dc.b	smpsNoAttack, $01
00096239 E112                       	smpsAlterNote       $12
0009623B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009623F E10F                       	smpsAlterNote       $0F
00096241 E701                       	dc.b	smpsNoAttack, $01
00096243 E109                       	smpsAlterNote       $09
00096245 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096249 E10F                       	smpsAlterNote       $0F
0009624B E701                       	dc.b	smpsNoAttack, $01
0009624D E112                       	smpsAlterNote       $12
0009624F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096253 E10C                       	smpsAlterNote       $0C
00096255 E701                       	dc.b	smpsNoAttack, $01
00096257 E108                       	smpsAlterNote       $08
00096259 E701                       	dc.b	smpsNoAttack, $01
0009625B E10C                       	smpsAlterNote       $0C
0009625D E701                       	dc.b	smpsNoAttack, $01
0009625F E10F                       	smpsAlterNote       $0F
00096261 E701                       	dc.b	smpsNoAttack, $01
00096263 E113                       	smpsAlterNote       $13
00096265 E701                       	dc.b	smpsNoAttack, $01
00096267 E10F                       	smpsAlterNote       $0F
00096269 E701                       	dc.b	smpsNoAttack, $01
0009626B E109                       	smpsAlterNote       $09
0009626D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096273 E601                       	smpsAlterVol        $01
00096275 E10F                       	smpsAlterNote       $0F
00096277 C604                       	dc.b	nA5, $04
00096279 E10D                       	smpsAlterNote       $0D
0009627B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096281 E10B                       	smpsAlterNote       $0B
00096283 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0009628B E10F                       	smpsAlterNote       $0F
0009628D C604 8001                  	dc.b	nA5, $04, nRst, $01
00096291 E10D                       	smpsAlterNote       $0D
00096293 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00096299 E10C                       	smpsAlterNote       $0C
0009629B C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000962A1 E10A                       	smpsAlterNote       $0A
000962A3 C904 8001                  	dc.b	nC6, $04, nRst, $01
000962A7 E110                       	smpsAlterNote       $10
000962A9 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000962AD E10F                       	smpsAlterNote       $0F
000962AF C604                       	dc.b	nA5, $04
000962B1 E10D                       	smpsAlterNote       $0D
000962B3 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000962BF E109                       	smpsAlterNote       $09
000962C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962C5 E10F                       	smpsAlterNote       $0F
000962C7 E701                       	dc.b	smpsNoAttack, $01
000962C9 E112                       	smpsAlterNote       $12
000962CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000962CF E10C                       	smpsAlterNote       $0C
000962D1 E701                       	dc.b	smpsNoAttack, $01
000962D3 E108                       	smpsAlterNote       $08
000962D5 E701                       	dc.b	smpsNoAttack, $01
000962D7 E10C                       	smpsAlterNote       $0C
000962D9 E701                       	dc.b	smpsNoAttack, $01
000962DB E10F                       	smpsAlterNote       $0F
000962DD E701                       	dc.b	smpsNoAttack, $01
000962DF E113                       	smpsAlterNote       $13
000962E1 E701                       	dc.b	smpsNoAttack, $01
000962E3 E10D                       	smpsAlterNote       $0D
000962E5 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000962EB E10C                       	smpsAlterNote       $0C
000962ED C10D                       	dc.b	nE5, $0D
000962EF E109                       	smpsAlterNote       $09
000962F1 E701                       	dc.b	smpsNoAttack, $01
000962F3 E105                       	smpsAlterNote       $05
000962F5 E701                       	dc.b	smpsNoAttack, $01
000962F7 E106                       	smpsAlterNote       $06
000962F9 E701                       	dc.b	smpsNoAttack, $01
000962FB E10C                       	smpsAlterNote       $0C
000962FD E701                       	dc.b	smpsNoAttack, $01
000962FF E110                       	smpsAlterNote       $10
00096301 E701                       	dc.b	smpsNoAttack, $01
00096303 E10C                       	smpsAlterNote       $0C
00096305 E701                       	dc.b	smpsNoAttack, $01
00096307 E109                       	smpsAlterNote       $09
00096309 E701                       	dc.b	smpsNoAttack, $01
0009630B E105                       	smpsAlterNote       $05
0009630D E701                       	dc.b	smpsNoAttack, $01
0009630F E109                       	smpsAlterNote       $09
00096311 E701                       	dc.b	smpsNoAttack, $01
00096313 E10F                       	smpsAlterNote       $0F
00096315 E701                       	dc.b	smpsNoAttack, $01
00096317 E110                       	smpsAlterNote       $10
00096319 E701                       	dc.b	smpsNoAttack, $01
0009631B E10C                       	smpsAlterNote       $0C
0009631D E701                       	dc.b	smpsNoAttack, $01
0009631F E106                       	smpsAlterNote       $06
00096321 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096325 E109                       	smpsAlterNote       $09
00096327 E701                       	dc.b	smpsNoAttack, $01
00096329 E10F                       	smpsAlterNote       $0F
0009632B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009632F E109                       	smpsAlterNote       $09
00096331 E701                       	dc.b	smpsNoAttack, $01
00096333 E106                       	smpsAlterNote       $06
00096335 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096339 E10C                       	smpsAlterNote       $0C
0009633B E701                       	dc.b	smpsNoAttack, $01
0009633D E110                       	smpsAlterNote       $10
0009633F E701                       	dc.b	smpsNoAttack, $01
00096341 E10F                       	smpsAlterNote       $0F
00096343 E701                       	dc.b	smpsNoAttack, $01
00096345 E109                       	smpsAlterNote       $09
00096347 E701                       	dc.b	smpsNoAttack, $01
00096349 E105                       	smpsAlterNote       $05
0009634B E701                       	dc.b	smpsNoAttack, $01
0009634D E109                       	smpsAlterNote       $09
0009634F E701                       	dc.b	smpsNoAttack, $01
00096351 E10C                       	smpsAlterNote       $0C
00096353 E701                       	dc.b	smpsNoAttack, $01
00096355 E110                       	smpsAlterNote       $10
00096357 E701                       	dc.b	smpsNoAttack, $01
00096359 E10C                       	smpsAlterNote       $0C
0009635B E701                       	dc.b	smpsNoAttack, $01
0009635D E106                       	smpsAlterNote       $06
0009635F E701                       	dc.b	smpsNoAttack, $01
00096361 E105                       	smpsAlterNote       $05
00096363 E701                       	dc.b	smpsNoAttack, $01
00096365 E109                       	smpsAlterNote       $09
00096367 E701                       	dc.b	smpsNoAttack, $01
00096369 E10F                       	smpsAlterNote       $0F
0009636B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009636F E10C                       	smpsAlterNote       $0C
00096371 E701                       	dc.b	smpsNoAttack, $01
00096373 E106                       	smpsAlterNote       $06
00096375 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096379 E10C                       	smpsAlterNote       $0C
0009637B E701                       	dc.b	smpsNoAttack, $01
0009637D E10F                       	smpsAlterNote       $0F
0009637F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096383 E109                       	smpsAlterNote       $09
00096385 E701                       	dc.b	smpsNoAttack, $01
00096387 E105                       	smpsAlterNote       $05
00096389 E701                       	dc.b	smpsNoAttack, $01
0009638B E106                       	smpsAlterNote       $06
0009638D E701                       	dc.b	smpsNoAttack, $01
0009638F E10C                       	smpsAlterNote       $0C
00096391 E701                       	dc.b	smpsNoAttack, $01
00096393 E110                       	smpsAlterNote       $10
00096395 E701                       	dc.b	smpsNoAttack, $01
00096397 E10C                       	smpsAlterNote       $0C
00096399 E701                       	dc.b	smpsNoAttack, $01
0009639B E109                       	smpsAlterNote       $09
0009639D E701                       	dc.b	smpsNoAttack, $01
0009639F E105                       	smpsAlterNote       $05
000963A1 E701                       	dc.b	smpsNoAttack, $01
000963A3 E109                       	smpsAlterNote       $09
000963A5 E701                       	dc.b	smpsNoAttack, $01
000963A7 E10F                       	smpsAlterNote       $0F
000963A9 E701                       	dc.b	smpsNoAttack, $01
000963AB E110                       	smpsAlterNote       $10
000963AD E701                       	dc.b	smpsNoAttack, $01
000963AF E10C                       	smpsAlterNote       $0C
000963B1 E701                       	dc.b	smpsNoAttack, $01
000963B3 E106                       	smpsAlterNote       $06
000963B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963B9 E109                       	smpsAlterNote       $09
000963BB E701                       	dc.b	smpsNoAttack, $01
000963BD E10F                       	smpsAlterNote       $0F
000963BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963C3 E109                       	smpsAlterNote       $09
000963C5 E701                       	dc.b	smpsNoAttack, $01
000963C7 E106                       	smpsAlterNote       $06
000963C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000963CD E10C                       	smpsAlterNote       $0C
000963CF E701                       	dc.b	smpsNoAttack, $01
000963D1 E110                       	smpsAlterNote       $10
000963D3 E701                       	dc.b	smpsNoAttack, $01
000963D5 E10F                       	smpsAlterNote       $0F
000963D7 E701                       	dc.b	smpsNoAttack, $01
000963D9 E109                       	smpsAlterNote       $09
000963DB E701                       	dc.b	smpsNoAttack, $01
000963DD E105                       	smpsAlterNote       $05
000963DF E701                       	dc.b	smpsNoAttack, $01
000963E1 E109                       	smpsAlterNote       $09
000963E3 E701                       	dc.b	smpsNoAttack, $01
000963E5 E10C                       	smpsAlterNote       $0C
000963E7 E701                       	dc.b	smpsNoAttack, $01
000963E9 E110                       	smpsAlterNote       $10
000963EB E701                       	dc.b	smpsNoAttack, $01
000963ED E10C                       	smpsAlterNote       $0C
000963EF E701                       	dc.b	smpsNoAttack, $01
000963F1 E106                       	smpsAlterNote       $06
000963F3 E701                       	dc.b	smpsNoAttack, $01
000963F5 E105                       	smpsAlterNote       $05
000963F7 E701                       	dc.b	smpsNoAttack, $01
000963F9 E109                       	smpsAlterNote       $09
000963FB E701                       	dc.b	smpsNoAttack, $01
000963FD E10F                       	smpsAlterNote       $0F
000963FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096403 E109                       	smpsAlterNote       $09
00096405 E701                       	dc.b	smpsNoAttack, $01
00096407 E106                       	smpsAlterNote       $06
00096409 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009640D E10C                       	smpsAlterNote       $0C
0009640F E701                       	dc.b	smpsNoAttack, $01
00096411 E110                       	smpsAlterNote       $10
00096413 E701                       	dc.b	smpsNoAttack, $01
00096415 E10F                       	smpsAlterNote       $0F
00096417 E701                       	dc.b	smpsNoAttack, $01
00096419 E109                       	smpsAlterNote       $09
0009641B E701                       	dc.b	smpsNoAttack, $01
0009641D E105                       	smpsAlterNote       $05
0009641F E701                       	dc.b	smpsNoAttack, $01
00096421 E109                       	smpsAlterNote       $09
00096423 E701                       	dc.b	smpsNoAttack, $01
00096425 E10C                       	smpsAlterNote       $0C
00096427 E701                       	dc.b	smpsNoAttack, $01
00096429 E110                       	smpsAlterNote       $10
0009642B E701                       	dc.b	smpsNoAttack, $01
0009642D E10C                       	smpsAlterNote       $0C
0009642F E701                       	dc.b	smpsNoAttack, $01
00096431 E106                       	smpsAlterNote       $06
00096433 E701                       	dc.b	smpsNoAttack, $01
00096435 E105                       	smpsAlterNote       $05
00096437 E701                       	dc.b	smpsNoAttack, $01
00096439 E109                       	smpsAlterNote       $09
0009643B E701                       	dc.b	smpsNoAttack, $01
0009643D E10F                       	smpsAlterNote       $0F
0009643F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096443 E10C                       	smpsAlterNote       $0C
00096445 E701                       	dc.b	smpsNoAttack, $01
00096447 E106                       	smpsAlterNote       $06
00096449 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009644D E10C                       	smpsAlterNote       $0C
0009644F E701                       	dc.b	smpsNoAttack, $01
00096451 E10F                       	smpsAlterNote       $0F
00096453 E701                       	dc.b	smpsNoAttack, $01
00096455 E110                       	smpsAlterNote       $10
00096457 8001                       	dc.b	nRst, $01
00096459 E10F                       	smpsAlterNote       $0F
0009645B C604                       	dc.b	nA5, $04
0009645D E10D                       	smpsAlterNote       $0D
0009645F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00096465 E10B                       	smpsAlterNote       $0B
00096467 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0009646D E10F                       	smpsAlterNote       $0F
0009646F C604 8001                  	dc.b	nA5, $04, nRst, $01
00096473 E10D                       	smpsAlterNote       $0D
00096475 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0009647B E10C                       	smpsAlterNote       $0C
0009647D C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
00096483 E10A                       	smpsAlterNote       $0A
00096485 C904                       	dc.b	nC6, $04
00096487 E110                       	smpsAlterNote       $10
00096489 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0009648D E10F                       	smpsAlterNote       $0F
0009648F C604                       	dc.b	nA5, $04
00096491 E10D                       	smpsAlterNote       $0D
00096493 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0009649F E109                       	smpsAlterNote       $09
000964A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964A5 E10F                       	smpsAlterNote       $0F
000964A7 E701                       	dc.b	smpsNoAttack, $01
000964A9 E112                       	smpsAlterNote       $12
000964AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964AF E10C                       	smpsAlterNote       $0C
000964B1 E701                       	dc.b	smpsNoAttack, $01
000964B3 E108                       	smpsAlterNote       $08
000964B5 E701                       	dc.b	smpsNoAttack, $01
000964B7 E109                       	smpsAlterNote       $09
000964B9 E701                       	dc.b	smpsNoAttack, $01
000964BB E10F                       	smpsAlterNote       $0F
000964BD E701                       	dc.b	smpsNoAttack, $01
000964BF E113                       	smpsAlterNote       $13
000964C1 E701                       	dc.b	smpsNoAttack, $01
000964C3 E10D                       	smpsAlterNote       $0D
000964C5 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000964CB E10C                       	smpsAlterNote       $0C
000964CD C10D                       	dc.b	nE5, $0D
000964CF E109                       	smpsAlterNote       $09
000964D1 E701                       	dc.b	smpsNoAttack, $01
000964D3 E106                       	smpsAlterNote       $06
000964D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000964D9 E10C                       	smpsAlterNote       $0C
000964DB E701                       	dc.b	smpsNoAttack, $01
000964DD E110                       	smpsAlterNote       $10
000964DF E701                       	dc.b	smpsNoAttack, $01
000964E1 E10F                       	smpsAlterNote       $0F
000964E3 E701                       	dc.b	smpsNoAttack, $01
000964E5 E109                       	smpsAlterNote       $09
000964E7 E701                       	dc.b	smpsNoAttack, $01
000964E9 E105                       	smpsAlterNote       $05
000964EB E701                       	dc.b	smpsNoAttack, $01
000964ED E109                       	smpsAlterNote       $09
000964EF E701                       	dc.b	smpsNoAttack, $01
000964F1 E10C                       	smpsAlterNote       $0C
000964F3 E701                       	dc.b	smpsNoAttack, $01
000964F5 E110                       	smpsAlterNote       $10
000964F7 E701                       	dc.b	smpsNoAttack, $01
000964F9 E10C                       	smpsAlterNote       $0C
000964FB E701                       	dc.b	smpsNoAttack, $01
000964FD E106                       	smpsAlterNote       $06
000964FF E701                       	dc.b	smpsNoAttack, $01
00096501 E105                       	smpsAlterNote       $05
00096503 E701                       	dc.b	smpsNoAttack, $01
00096505 E109                       	smpsAlterNote       $09
00096507 E701                       	dc.b	smpsNoAttack, $01
00096509 E10F                       	smpsAlterNote       $0F
0009650B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009650F E10C                       	smpsAlterNote       $0C
00096511 E701                       	dc.b	smpsNoAttack, $01
00096513 E106                       	smpsAlterNote       $06
00096515 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096519 E10C                       	smpsAlterNote       $0C
0009651B E701                       	dc.b	smpsNoAttack, $01
0009651D E10F                       	smpsAlterNote       $0F
0009651F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096523 E109                       	smpsAlterNote       $09
00096525 E701                       	dc.b	smpsNoAttack, $01
00096527 E105                       	smpsAlterNote       $05
00096529 E701                       	dc.b	smpsNoAttack, $01
0009652B E106                       	smpsAlterNote       $06
0009652D E701                       	dc.b	smpsNoAttack, $01
0009652F E10C                       	smpsAlterNote       $0C
00096531 E701                       	dc.b	smpsNoAttack, $01
00096533 E110                       	smpsAlterNote       $10
00096535 E701                       	dc.b	smpsNoAttack, $01
00096537 E10C                       	smpsAlterNote       $0C
00096539 E701                       	dc.b	smpsNoAttack, $01
0009653B E109                       	smpsAlterNote       $09
0009653D E701                       	dc.b	smpsNoAttack, $01
0009653F E105                       	smpsAlterNote       $05
00096541 E701                       	dc.b	smpsNoAttack, $01
00096543 E109                       	smpsAlterNote       $09
00096545 E701                       	dc.b	smpsNoAttack, $01
00096547 E10F                       	smpsAlterNote       $0F
00096549 E701                       	dc.b	smpsNoAttack, $01
0009654B E110                       	smpsAlterNote       $10
0009654D E701                       	dc.b	smpsNoAttack, $01
0009654F E10C                       	smpsAlterNote       $0C
00096551 E701                       	dc.b	smpsNoAttack, $01
00096553 E106                       	smpsAlterNote       $06
00096555 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096559 E109                       	smpsAlterNote       $09
0009655B E701                       	dc.b	smpsNoAttack, $01
0009655D E10F                       	smpsAlterNote       $0F
0009655F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096563 E109                       	smpsAlterNote       $09
00096565 E701                       	dc.b	smpsNoAttack, $01
00096567 E106                       	smpsAlterNote       $06
00096569 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009656D E10C                       	smpsAlterNote       $0C
0009656F E701                       	dc.b	smpsNoAttack, $01
00096571 E110                       	smpsAlterNote       $10
00096573 E701                       	dc.b	smpsNoAttack, $01
00096575 E10F                       	smpsAlterNote       $0F
00096577 E701                       	dc.b	smpsNoAttack, $01
00096579 E109                       	smpsAlterNote       $09
0009657B E701                       	dc.b	smpsNoAttack, $01
0009657D E105                       	smpsAlterNote       $05
0009657F E701                       	dc.b	smpsNoAttack, $01
00096581 E109                       	smpsAlterNote       $09
00096583 E701                       	dc.b	smpsNoAttack, $01
00096585 E10F                       	smpsAlterNote       $0F
00096587 E701                       	dc.b	smpsNoAttack, $01
00096589 E110                       	smpsAlterNote       $10
0009658B E701                       	dc.b	smpsNoAttack, $01
0009658D E10C                       	smpsAlterNote       $0C
0009658F E701                       	dc.b	smpsNoAttack, $01
00096591 E106                       	smpsAlterNote       $06
00096593 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096597 E109                       	smpsAlterNote       $09
00096599 E701                       	dc.b	smpsNoAttack, $01
0009659B E10F                       	smpsAlterNote       $0F
0009659D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965A1 E109                       	smpsAlterNote       $09
000965A3 E701                       	dc.b	smpsNoAttack, $01
000965A5 E106                       	smpsAlterNote       $06
000965A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965AB E10C                       	smpsAlterNote       $0C
000965AD E701                       	dc.b	smpsNoAttack, $01
000965AF E110                       	smpsAlterNote       $10
000965B1 E701                       	dc.b	smpsNoAttack, $01
000965B3 E10F                       	smpsAlterNote       $0F
000965B5 E701                       	dc.b	smpsNoAttack, $01
000965B7 E109                       	smpsAlterNote       $09
000965B9 E701                       	dc.b	smpsNoAttack, $01
000965BB E105                       	smpsAlterNote       $05
000965BD E701                       	dc.b	smpsNoAttack, $01
000965BF E109                       	smpsAlterNote       $09
000965C1 E701                       	dc.b	smpsNoAttack, $01
000965C3 E10C                       	smpsAlterNote       $0C
000965C5 E701                       	dc.b	smpsNoAttack, $01
000965C7 E110                       	smpsAlterNote       $10
000965C9 E701                       	dc.b	smpsNoAttack, $01
000965CB E10C                       	smpsAlterNote       $0C
000965CD E701                       	dc.b	smpsNoAttack, $01
000965CF E106                       	smpsAlterNote       $06
000965D1 E701                       	dc.b	smpsNoAttack, $01
000965D3 E105                       	smpsAlterNote       $05
000965D5 E701                       	dc.b	smpsNoAttack, $01
000965D7 E109                       	smpsAlterNote       $09
000965D9 E701                       	dc.b	smpsNoAttack, $01
000965DB E10F                       	smpsAlterNote       $0F
000965DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965E1 E10C                       	smpsAlterNote       $0C
000965E3 E701                       	dc.b	smpsNoAttack, $01
000965E5 E106                       	smpsAlterNote       $06
000965E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965EB E10C                       	smpsAlterNote       $0C
000965ED E701                       	dc.b	smpsNoAttack, $01
000965EF E10F                       	smpsAlterNote       $0F
000965F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000965F5 E109                       	smpsAlterNote       $09
000965F7 E701                       	dc.b	smpsNoAttack, $01
000965F9 E105                       	smpsAlterNote       $05
000965FB E701                       	dc.b	smpsNoAttack, $01
000965FD E106                       	smpsAlterNote       $06
000965FF E701                       	dc.b	smpsNoAttack, $01
00096601 E10C                       	smpsAlterNote       $0C
00096603 E701                       	dc.b	smpsNoAttack, $01
00096605 E110                       	smpsAlterNote       $10
00096607 E701                       	dc.b	smpsNoAttack, $01
00096609 E10C                       	smpsAlterNote       $0C
0009660B E701                       	dc.b	smpsNoAttack, $01
0009660D E109                       	smpsAlterNote       $09
0009660F E701                       	dc.b	smpsNoAttack, $01
00096611 E105                       	smpsAlterNote       $05
00096613 E701                       	dc.b	smpsNoAttack, $01
00096615 E109                       	smpsAlterNote       $09
00096617 E701                       	dc.b	smpsNoAttack, $01
00096619 E10F                       	smpsAlterNote       $0F
0009661B E701                       	dc.b	smpsNoAttack, $01
0009661D E110                       	smpsAlterNote       $10
0009661F E701                       	dc.b	smpsNoAttack, $01
00096621 E10C                       	smpsAlterNote       $0C
00096623 E701                       	dc.b	smpsNoAttack, $01
00096625 E106                       	smpsAlterNote       $06
00096627 E701                       	dc.b	smpsNoAttack, $01
00096629 E10B                       	smpsAlterNote       $0B
0009662B BF02                       	dc.b	nD5, $02
0009662D E10C                       	smpsAlterNote       $0C
0009662F C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00096635 E109                       	smpsAlterNote       $09
00096637 E701                       	dc.b	smpsNoAttack, $01
00096639 E105                       	smpsAlterNote       $05
0009663B E701                       	dc.b	smpsNoAttack, $01
0009663D E109                       	smpsAlterNote       $09
0009663F E701                       	dc.b	smpsNoAttack, $01
00096641 E10F                       	smpsAlterNote       $0F
00096643 E701                       	dc.b	smpsNoAttack, $01
00096645 E110                       	smpsAlterNote       $10
00096647 E701                       	dc.b	smpsNoAttack, $01
00096649 E10C                       	smpsAlterNote       $0C
0009664B E701                       	dc.b	smpsNoAttack, $01
0009664D E106                       	smpsAlterNote       $06
0009664F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096653 E109                       	smpsAlterNote       $09
00096655 E701                       	dc.b	smpsNoAttack, $01
00096657 E10F                       	smpsAlterNote       $0F
00096659 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009665D E109                       	smpsAlterNote       $09
0009665F E701                       	dc.b	smpsNoAttack, $01
00096661 E106                       	smpsAlterNote       $06
00096663 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096667 E10C                       	smpsAlterNote       $0C
00096669 E701                       	dc.b	smpsNoAttack, $01
0009666B E110                       	smpsAlterNote       $10
0009666D E701                       	dc.b	smpsNoAttack, $01
0009666F E10F                       	smpsAlterNote       $0F
00096671 E701                       	dc.b	smpsNoAttack, $01
00096673 E109                       	smpsAlterNote       $09
00096675 E701                       	dc.b	smpsNoAttack, $01
00096677 E105                       	smpsAlterNote       $05
00096679 E701                       	dc.b	smpsNoAttack, $01
0009667B E109                       	smpsAlterNote       $09
0009667D E701                       	dc.b	smpsNoAttack, $01
0009667F E10C                       	smpsAlterNote       $0C
00096681 E701                       	dc.b	smpsNoAttack, $01
00096683 E110                       	smpsAlterNote       $10
00096685 E701                       	dc.b	smpsNoAttack, $01
00096687 E10C                       	smpsAlterNote       $0C
00096689 E701                       	dc.b	smpsNoAttack, $01
0009668B E106                       	smpsAlterNote       $06
0009668D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096691 E10D                       	smpsAlterNote       $0D
00096693 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0009669B E10C                       	smpsAlterNote       $0C
0009669D C10D                       	dc.b	nE5, $0D
0009669F E106                       	smpsAlterNote       $06
000966A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966A5 E109                       	smpsAlterNote       $09
000966A7 E701                       	dc.b	smpsNoAttack, $01
000966A9 E10F                       	smpsAlterNote       $0F
000966AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966AF E109                       	smpsAlterNote       $09
000966B1 E701                       	dc.b	smpsNoAttack, $01
000966B3 E106                       	smpsAlterNote       $06
000966B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000966B9 E10C                       	smpsAlterNote       $0C
000966BB E701                       	dc.b	smpsNoAttack, $01
000966BD E110                       	smpsAlterNote       $10
000966BF E701                       	dc.b	smpsNoAttack, $01
000966C1 E10F                       	smpsAlterNote       $0F
000966C3 E701                       	dc.b	smpsNoAttack, $01
000966C5 E109                       	smpsAlterNote       $09
000966C7 E701                       	dc.b	smpsNoAttack, $01
000966C9 E105                       	smpsAlterNote       $05
000966CB E701                       	dc.b	smpsNoAttack, $01
000966CD E106                       	smpsAlterNote       $06
000966CF 800F                       	dc.b	nRst, $0F
000966D3 E6FF                       	smpsAlterVol        $FF
000966D5 E10F                       	smpsAlterNote       $0F
000966D7 BA01                       	dc.b	nA4, $01
000966D9 E110                       	smpsAlterNote       $10
000966DB BB02                       	dc.b	nBb4, $02
000966DD E10F                       	smpsAlterNote       $0F
000966DF BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000966E5 E10B                       	smpsAlterNote       $0B
000966E7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000966EB E10C                       	smpsAlterNote       $0C
000966ED C103                       	dc.b	nE5, $03
000966EF E10D                       	smpsAlterNote       $0D
000966F1 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000966FB E10B                       	smpsAlterNote       $0B
000966FD BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00096701 E104                       	smpsAlterNote       $04
00096703 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096707 E10A                       	smpsAlterNote       $0A
00096709 E701                       	dc.b	smpsNoAttack, $01
0009670B E10D                       	smpsAlterNote       $0D
0009670D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096711 E107                       	smpsAlterNote       $07
00096713 E701                       	dc.b	smpsNoAttack, $01
00096715 E104                       	smpsAlterNote       $04
00096717 8001                       	dc.b	nRst, $01
00096719 E110                       	smpsAlterNote       $10
0009671B C703                       	dc.b	nBb5, $03
0009671D E10F                       	smpsAlterNote       $0F
0009671F C603 8001                  	dc.b	nA5, $03, nRst, $01
00096723 E10D                       	smpsAlterNote       $0D
00096725 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00096729 E10C                       	smpsAlterNote       $0C
0009672B E701                       	dc.b	smpsNoAttack, $01
0009672D E108                       	smpsAlterNote       $08
0009672F E701                       	dc.b	smpsNoAttack, $01
00096731 E109                       	smpsAlterNote       $09
00096733 E701                       	dc.b	smpsNoAttack, $01
00096735 E10F                       	smpsAlterNote       $0F
00096737 E701                       	dc.b	smpsNoAttack, $01
00096739 E113                       	smpsAlterNote       $13
0009673B E701                       	dc.b	smpsNoAttack, $01
0009673D E10F                       	smpsAlterNote       $0F
0009673F E701                       	dc.b	smpsNoAttack, $01
00096741 E10C                       	smpsAlterNote       $0C
00096743 E701                       	dc.b	smpsNoAttack, $01
00096745 E108                       	smpsAlterNote       $08
00096747 E701                       	dc.b	smpsNoAttack, $01
00096749 E10C                       	smpsAlterNote       $0C
0009674B E701                       	dc.b	smpsNoAttack, $01
0009674D E112                       	smpsAlterNote       $12
0009674F E701                       	dc.b	smpsNoAttack, $01
00096751 E113                       	smpsAlterNote       $13
00096753 E701                       	dc.b	smpsNoAttack, $01
00096755 E10F                       	smpsAlterNote       $0F
00096757 E701                       	dc.b	smpsNoAttack, $01
00096759 E109                       	smpsAlterNote       $09
0009675B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009675F E10C                       	smpsAlterNote       $0C
00096761 E701                       	dc.b	smpsNoAttack, $01
00096763 E112                       	smpsAlterNote       $12
00096765 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096769 E10C                       	smpsAlterNote       $0C
0009676B E701                       	dc.b	smpsNoAttack, $01
0009676D E109                       	smpsAlterNote       $09
0009676F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096773 E10F                       	smpsAlterNote       $0F
00096775 E701                       	dc.b	smpsNoAttack, $01
00096777 E113                       	smpsAlterNote       $13
00096779 E701                       	dc.b	smpsNoAttack, $01
0009677B E112                       	smpsAlterNote       $12
0009677D E701                       	dc.b	smpsNoAttack, $01
0009677F E10C                       	smpsAlterNote       $0C
00096781 E701                       	dc.b	smpsNoAttack, $01
00096783 E108                       	smpsAlterNote       $08
00096785 E701                       	dc.b	smpsNoAttack, $01
00096787 E10C                       	smpsAlterNote       $0C
00096789 E701                       	dc.b	smpsNoAttack, $01
0009678B E10F                       	smpsAlterNote       $0F
0009678D E701                       	dc.b	smpsNoAttack, $01
0009678F E113                       	smpsAlterNote       $13
00096791 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00096795 E10B                       	smpsAlterNote       $0B
00096797 BF03                       	dc.b	nD5, $03
00096799 E10C                       	smpsAlterNote       $0C
0009679B C103 8001                  	dc.b	nE5, $03, nRst, $01
0009679F E10D                       	smpsAlterNote       $0D
000967A1 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000967AB E10B                       	smpsAlterNote       $0B
000967AD BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000967B9 E110                       	smpsAlterNote       $10
000967BB C704 8001                  	dc.b	nBb5, $04, nRst, $01
000967BF E10F                       	smpsAlterNote       $0F
000967C1 C604                       	dc.b	nA5, $04
000967C3 E10D                       	smpsAlterNote       $0D
000967C5 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000967CB E109                       	smpsAlterNote       $09
000967CD E701                       	dc.b	smpsNoAttack, $01
000967CF E108                       	smpsAlterNote       $08
000967D1 E701                       	dc.b	smpsNoAttack, $01
000967D3 E10C                       	smpsAlterNote       $0C
000967D5 E701                       	dc.b	smpsNoAttack, $01
000967D7 E112                       	smpsAlterNote       $12
000967D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967DD E10F                       	smpsAlterNote       $0F
000967DF E701                       	dc.b	smpsNoAttack, $01
000967E1 E109                       	smpsAlterNote       $09
000967E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967E7 E10F                       	smpsAlterNote       $0F
000967E9 E701                       	dc.b	smpsNoAttack, $01
000967EB E112                       	smpsAlterNote       $12
000967ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000967F1 E10C                       	smpsAlterNote       $0C
000967F3 E701                       	dc.b	smpsNoAttack, $01
000967F5 E108                       	smpsAlterNote       $08
000967F7 E701                       	dc.b	smpsNoAttack, $01
000967F9 E109                       	smpsAlterNote       $09
000967FB E701                       	dc.b	smpsNoAttack, $01
000967FD E10F                       	smpsAlterNote       $0F
000967FF E701                       	dc.b	smpsNoAttack, $01
00096801 E113                       	smpsAlterNote       $13
00096803 E701                       	dc.b	smpsNoAttack, $01
00096805 E10F                       	smpsAlterNote       $0F
00096807 E701                       	dc.b	smpsNoAttack, $01
00096809 E10C                       	smpsAlterNote       $0C
0009680B E701                       	dc.b	smpsNoAttack, $01
0009680D E108                       	smpsAlterNote       $08
0009680F E701                       	dc.b	smpsNoAttack, $01
00096811 E10C                       	smpsAlterNote       $0C
00096813 E701                       	dc.b	smpsNoAttack, $01
00096815 E112                       	smpsAlterNote       $12
00096817 E701                       	dc.b	smpsNoAttack, $01
00096819 E113                       	smpsAlterNote       $13
0009681B E701                       	dc.b	smpsNoAttack, $01
0009681D E10F                       	smpsAlterNote       $0F
0009681F E701                       	dc.b	smpsNoAttack, $01
00096821 E109                       	smpsAlterNote       $09
00096823 E701                       	dc.b	smpsNoAttack, $01
00096825 E10D                       	smpsAlterNote       $0D
00096827 C402                       	dc.b	nG5, $02
00096829 E10F                       	smpsAlterNote       $0F
0009682B C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00096835 E10D                       	smpsAlterNote       $0D
00096837 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0009683D E10B                       	smpsAlterNote       $0B
0009683F BF0D                       	dc.b	nD5, $0D
00096841 E108                       	smpsAlterNote       $08
00096843 E701                       	dc.b	smpsNoAttack, $01
00096845 E104                       	smpsAlterNote       $04
00096847 E701                       	dc.b	smpsNoAttack, $01
00096849 E105                       	smpsAlterNote       $05
0009684B E701                       	dc.b	smpsNoAttack, $01
0009684D E10B                       	smpsAlterNote       $0B
0009684F E701                       	dc.b	smpsNoAttack, $01
00096851 E10F                       	smpsAlterNote       $0F
00096853 E701                       	dc.b	smpsNoAttack, $01
00096855 E10B                       	smpsAlterNote       $0B
00096857 E701                       	dc.b	smpsNoAttack, $01
00096859 E108                       	smpsAlterNote       $08
0009685B E701                       	dc.b	smpsNoAttack, $01
0009685D E104                       	smpsAlterNote       $04
0009685F E701                       	dc.b	smpsNoAttack, $01
00096861 E108                       	smpsAlterNote       $08
00096863 E701                       	dc.b	smpsNoAttack, $01
00096865 E10E                       	smpsAlterNote       $0E
00096867 E701                       	dc.b	smpsNoAttack, $01
00096869 E10F                       	smpsAlterNote       $0F
0009686B E701                       	dc.b	smpsNoAttack, $01
0009686D E10C                       	smpsAlterNote       $0C
0009686F C101                       	dc.b	nE5, $01
00096871 E10D                       	smpsAlterNote       $0D
00096873 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0009687B E10F                       	smpsAlterNote       $0F
0009687D C607                       	dc.b	nA5, $07
0009687F E10C                       	smpsAlterNote       $0C
00096881 CD07                       	dc.b	nE6, $07
00096883 E10D                       	smpsAlterNote       $0D
00096885 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00096889 E10C                       	smpsAlterNote       $0C
0009688B CD03                       	dc.b	nE6, $03
0009688D E10A                       	smpsAlterNote       $0A
0009688F C903 8001                  	dc.b	nC6, $03, nRst, $01
00096893 E10D                       	smpsAlterNote       $0D
00096895 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0009689B E10A                       	smpsAlterNote       $0A
0009689D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968A1 E110                       	smpsAlterNote       $10
000968A3 E701                       	dc.b	smpsNoAttack, $01
000968A5 E114                       	smpsAlterNote       $14
000968A7 E701                       	dc.b	smpsNoAttack, $01
000968A9 E113                       	smpsAlterNote       $13
000968AB E701                       	dc.b	smpsNoAttack, $01
000968AD E10D                       	smpsAlterNote       $0D
000968AF E701                       	dc.b	smpsNoAttack, $01
000968B1 E109                       	smpsAlterNote       $09
000968B3 E701                       	dc.b	smpsNoAttack, $01
000968B5 E10D                       	smpsAlterNote       $0D
000968B7 E701                       	dc.b	smpsNoAttack, $01
000968B9 E110                       	smpsAlterNote       $10
000968BB E701                       	dc.b	smpsNoAttack, $01
000968BD E114                       	smpsAlterNote       $14
000968BF E701                       	dc.b	smpsNoAttack, $01
000968C1 E10F                       	smpsAlterNote       $0F
000968C3 C607                       	dc.b	nA5, $07
000968C5 E10D                       	smpsAlterNote       $0D
000968C7 C40D                       	dc.b	nG5, $0D
000968C9 E10A                       	smpsAlterNote       $0A
000968CB E701                       	dc.b	smpsNoAttack, $01
000968CD E106                       	smpsAlterNote       $06
000968CF E701                       	dc.b	smpsNoAttack, $01
000968D1 E10A                       	smpsAlterNote       $0A
000968D3 E701                       	dc.b	smpsNoAttack, $01
000968D5 E10D                       	smpsAlterNote       $0D
000968D7 E701                       	dc.b	smpsNoAttack, $01
000968D9 E111                       	smpsAlterNote       $11
000968DB E701                       	dc.b	smpsNoAttack, $01
000968DD E10D                       	smpsAlterNote       $0D
000968DF E701                       	dc.b	smpsNoAttack, $01
000968E1 E107                       	smpsAlterNote       $07
000968E3 E701                       	dc.b	smpsNoAttack, $01
000968E5 E106                       	smpsAlterNote       $06
000968E7 E701                       	dc.b	smpsNoAttack, $01
000968E9 E10A                       	smpsAlterNote       $0A
000968EB E701                       	dc.b	smpsNoAttack, $01
000968ED E110                       	smpsAlterNote       $10
000968EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968F3 E10D                       	smpsAlterNote       $0D
000968F5 E701                       	dc.b	smpsNoAttack, $01
000968F7 E107                       	smpsAlterNote       $07
000968F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000968FD E10F                       	smpsAlterNote       $0F
000968FF C60E                       	dc.b	nA5, $0E
00096901 E109                       	smpsAlterNote       $09
00096903 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096907 E10F                       	smpsAlterNote       $0F
00096909 E701                       	dc.b	smpsNoAttack, $01
0009690B E112                       	smpsAlterNote       $12
0009690D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096911 E10C                       	smpsAlterNote       $0C
00096913 E701                       	dc.b	smpsNoAttack, $01
00096915 E108                       	smpsAlterNote       $08
00096917 E701                       	dc.b	smpsNoAttack, $01
00096919 E109                       	smpsAlterNote       $09
0009691B E701                       	dc.b	smpsNoAttack, $01
0009691D E10F                       	smpsAlterNote       $0F
0009691F E701                       	dc.b	smpsNoAttack, $01
00096921 E113                       	smpsAlterNote       $13
00096923 E701                       	dc.b	smpsNoAttack, $01
00096925 E10F                       	smpsAlterNote       $0F
00096927 E701                       	dc.b	smpsNoAttack, $01
00096929 E10C                       	smpsAlterNote       $0C
0009692B E701                       	dc.b	smpsNoAttack, $01
0009692D E108                       	smpsAlterNote       $08
0009692F E701                       	dc.b	smpsNoAttack, $01
00096931 E109                       	smpsAlterNote       $09
00096933 8001                       	dc.b	nRst, $01
00096935 E110                       	smpsAlterNote       $10
00096937 C70D                       	dc.b	nBb5, $0D
00096939 E10D                       	smpsAlterNote       $0D
0009693B E701                       	dc.b	smpsNoAttack, $01
0009693D E109                       	smpsAlterNote       $09
0009693F E701                       	dc.b	smpsNoAttack, $01
00096941 E10D                       	smpsAlterNote       $0D
00096943 E701                       	dc.b	smpsNoAttack, $01
00096945 E113                       	smpsAlterNote       $13
00096947 E701                       	dc.b	smpsNoAttack, $01
00096949 E114                       	smpsAlterNote       $14
0009694B E701                       	dc.b	smpsNoAttack, $01
0009694D E110                       	smpsAlterNote       $10
0009694F E701                       	dc.b	smpsNoAttack, $01
00096951 E10A                       	smpsAlterNote       $0A
00096953 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096957 E10D                       	smpsAlterNote       $0D
00096959 E701                       	dc.b	smpsNoAttack, $01
0009695B E113                       	smpsAlterNote       $13
0009695D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096961 E10D                       	smpsAlterNote       $0D
00096963 E701                       	dc.b	smpsNoAttack, $01
00096965 E10A                       	smpsAlterNote       $0A
00096967 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00096971 E10B                       	smpsAlterNote       $0B
00096973 8001                       	dc.b	nRst, $01
00096975 E10C                       	smpsAlterNote       $0C
00096977 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0009697B E10B                       	smpsAlterNote       $0B
0009697D CB0D                       	dc.b	nD6, $0D
0009697F E105                       	smpsAlterNote       $05
00096981 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096985 E108                       	smpsAlterNote       $08
00096987 E701                       	dc.b	smpsNoAttack, $01
00096989 E10E                       	smpsAlterNote       $0E
0009698B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009698F E108                       	smpsAlterNote       $08
00096991 E701                       	dc.b	smpsNoAttack, $01
00096993 E105                       	smpsAlterNote       $05
00096995 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096999 E10B                       	smpsAlterNote       $0B
0009699B E701                       	dc.b	smpsNoAttack, $01
0009699D E10F                       	smpsAlterNote       $0F
0009699F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000969A3 E10C                       	smpsAlterNote       $0C
000969A5 CC0D                       	dc.b	nEb6, $0D
000969A7 E106                       	smpsAlterNote       $06
000969A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969AD E109                       	smpsAlterNote       $09
000969AF E701                       	dc.b	smpsNoAttack, $01
000969B1 E10C                       	smpsAlterNote       $0C
000969B3 8001                       	dc.b	nRst, $01
000969B5 E10A                       	smpsAlterNote       $0A
000969B7 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000969C3 CB0E                       	dc.b	nD6, $0E
000969C5 E105                       	smpsAlterNote       $05
000969C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969CB E10B                       	smpsAlterNote       $0B
000969CD E701                       	dc.b	smpsNoAttack, $01
000969CF E10E                       	smpsAlterNote       $0E
000969D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000969D5 E108                       	smpsAlterNote       $08
000969D7 E701                       	dc.b	smpsNoAttack, $01
000969D9 E104                       	smpsAlterNote       $04
000969DB E701                       	dc.b	smpsNoAttack, $01
000969DD E105                       	smpsAlterNote       $05
000969DF E701                       	dc.b	smpsNoAttack, $01
000969E1 E10B                       	smpsAlterNote       $0B
000969E3 E701                       	dc.b	smpsNoAttack, $01
000969E5 E10F                       	smpsAlterNote       $0F
000969E7 E701                       	dc.b	smpsNoAttack, $01
000969E9 E10D                       	smpsAlterNote       $0D
000969EB CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000969EF E10C                       	smpsAlterNote       $0C
000969F1 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
000969F5 E10A                       	smpsAlterNote       $0A
000969F7 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00096A03 CB0D                       	dc.b	nD6, $0D
00096A05 E108                       	smpsAlterNote       $08
00096A07 E701                       	dc.b	smpsNoAttack, $01
00096A09 E104                       	smpsAlterNote       $04
00096A0B E701                       	dc.b	smpsNoAttack, $01
00096A0D E105                       	smpsAlterNote       $05
00096A0F E701                       	dc.b	smpsNoAttack, $01
00096A11 E10B                       	smpsAlterNote       $0B
00096A13 E701                       	dc.b	smpsNoAttack, $01
00096A15 E10F                       	smpsAlterNote       $0F
00096A17 E701                       	dc.b	smpsNoAttack, $01
00096A19 E10B                       	smpsAlterNote       $0B
00096A1B E701                       	dc.b	smpsNoAttack, $01
00096A1D E108                       	smpsAlterNote       $08
00096A1F E701                       	dc.b	smpsNoAttack, $01
00096A21 E104                       	smpsAlterNote       $04
00096A23 E701                       	dc.b	smpsNoAttack, $01
00096A25 E108                       	smpsAlterNote       $08
00096A27 E701                       	dc.b	smpsNoAttack, $01
00096A29 E10E                       	smpsAlterNote       $0E
00096A2B E701                       	dc.b	smpsNoAttack, $01
00096A2D E10F                       	smpsAlterNote       $0F
00096A2F E701                       	dc.b	smpsNoAttack, $01
00096A31 E10C                       	smpsAlterNote       $0C
00096A33 CC0D                       	dc.b	nEb6, $0D
00096A35 E109                       	smpsAlterNote       $09
00096A37 E701                       	dc.b	smpsNoAttack, $01
00096A39 E105                       	smpsAlterNote       $05
00096A3B E701                       	dc.b	smpsNoAttack, $01
00096A3D E106                       	smpsAlterNote       $06
00096A3F E701                       	dc.b	smpsNoAttack, $01
00096A41 E10C                       	smpsAlterNote       $0C
00096A43 E701                       	dc.b	smpsNoAttack, $01
00096A45 E10A                       	smpsAlterNote       $0A
00096A47 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00096A53 CB0D                       	dc.b	nD6, $0D
00096A55 E108                       	smpsAlterNote       $08
00096A57 E701                       	dc.b	smpsNoAttack, $01
00096A59 E104                       	smpsAlterNote       $04
00096A5B E701                       	dc.b	smpsNoAttack, $01
00096A5D E108                       	smpsAlterNote       $08
00096A5F E701                       	dc.b	smpsNoAttack, $01
00096A61 E10B                       	smpsAlterNote       $0B
00096A63 E701                       	dc.b	smpsNoAttack, $01
00096A65 E10F                       	smpsAlterNote       $0F
00096A67 E701                       	dc.b	smpsNoAttack, $01
00096A69 E10B                       	smpsAlterNote       $0B
00096A6B E701                       	dc.b	smpsNoAttack, $01
00096A6D E105                       	smpsAlterNote       $05
00096A6F E701                       	dc.b	smpsNoAttack, $01
00096A71 E104                       	smpsAlterNote       $04
00096A73 E701                       	dc.b	smpsNoAttack, $01
00096A75 E108                       	smpsAlterNote       $08
00096A77 E701                       	dc.b	smpsNoAttack, $01
00096A79 E10E                       	smpsAlterNote       $0E
00096A7B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096A7F E10B                       	smpsAlterNote       $0B
00096A81 E701                       	dc.b	smpsNoAttack, $01
00096A83 E105                       	smpsAlterNote       $05
00096A85 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00096A8D 03                         	dc.b	$03
00096A8E E601                       	smpsAlterVol        $01
00096A90 F6F1 D1                    	smpsJump            music84_Jump01
00096A93                            
00096A93                            ; FM5 Data
00096A93                            music84_FM5:
00096A95 E080                       	smpsPan             panLeft, $00
00096A97 8003                       	dc.b	nRst, $03
00096A99 E10D                       	smpsAlterNote       $0D
00096A9B C203 8008                  	dc.b	nF5, $03, nRst, $08
00096A9F E10C                       	smpsAlterNote       $0C
00096AA1 C103 800A                  	dc.b	nE5, $03, nRst, $0A
00096AA5 E10F                       	smpsAlterNote       $0F
00096AA7 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00096AAD E6FE                       	smpsAlterVol        $FE
00096AAF C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00096AB5 E10D                       	smpsAlterNote       $0D
00096AB7 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00096ABD E10C                       	smpsAlterNote       $0C
00096ABF C102 8001                  	dc.b	nE5, $02, nRst, $01
00096AC3 E10A                       	smpsAlterNote       $0A
00096AC5 BD01 8001                  	dc.b	nC5, $01, nRst, $01
00096ACB 03                         	dc.b	$03
00096ACC                            
00096ACC                            music84_Jump00:
00096ACC 8004                       	dc.b	nRst, $04
00096ACE E602                       	smpsAlterVol        $02
00096AD0 E10D                       	smpsAlterNote       $0D
00096AD2 B60D                       	dc.b	nF4, $0D
00096AD4 E107                       	smpsAlterNote       $07
00096AD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096ADA E10A                       	smpsAlterNote       $0A
00096ADC E701                       	dc.b	smpsNoAttack, $01
00096ADE E110                       	smpsAlterNote       $10
00096AE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AE4 E10A                       	smpsAlterNote       $0A
00096AE6 E701                       	dc.b	smpsNoAttack, $01
00096AE8 E107                       	smpsAlterNote       $07
00096AEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096AEE E10D                       	smpsAlterNote       $0D
00096AF0 E701                       	dc.b	smpsNoAttack, $01
00096AF2 E111                       	smpsAlterNote       $11
00096AF4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096AF8 E10D                       	smpsAlterNote       $0D
00096AFA B80D                       	dc.b	nG4, $0D
00096AFC E107                       	smpsAlterNote       $07
00096AFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B02 E10A                       	smpsAlterNote       $0A
00096B04 E701                       	dc.b	smpsNoAttack, $01
00096B06 E110                       	smpsAlterNote       $10
00096B08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B0C E10A                       	smpsAlterNote       $0A
00096B0E E701                       	dc.b	smpsNoAttack, $01
00096B10 E107                       	smpsAlterNote       $07
00096B12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B16 E10D                       	smpsAlterNote       $0D
00096B18 E701                       	dc.b	smpsNoAttack, $01
00096B1A E111                       	smpsAlterNote       $11
00096B1C E701                       	dc.b	smpsNoAttack, $01
00096B1E E110                       	smpsAlterNote       $10
00096B20 E701                       	dc.b	smpsNoAttack, $01
00096B22 E10A                       	smpsAlterNote       $0A
00096B24 E701                       	dc.b	smpsNoAttack, $01
00096B26 E106                       	smpsAlterNote       $06
00096B28 E701                       	dc.b	smpsNoAttack, $01
00096B2A E10A                       	smpsAlterNote       $0A
00096B2C E701                       	dc.b	smpsNoAttack, $01
00096B2E E10D                       	smpsAlterNote       $0D
00096B30 E701                       	dc.b	smpsNoAttack, $01
00096B32 E111                       	smpsAlterNote       $11
00096B34 E701                       	dc.b	smpsNoAttack, $01
00096B36 E10D                       	smpsAlterNote       $0D
00096B38 E701                       	dc.b	smpsNoAttack, $01
00096B3A E10F                       	smpsAlterNote       $0F
00096B3C BA0E                       	dc.b	nA4, $0E
00096B3E E109                       	smpsAlterNote       $09
00096B40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B44 E10F                       	smpsAlterNote       $0F
00096B46 E701                       	dc.b	smpsNoAttack, $01
00096B48 E112                       	smpsAlterNote       $12
00096B4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B4E E10C                       	smpsAlterNote       $0C
00096B50 E701                       	dc.b	smpsNoAttack, $01
00096B52 E108                       	smpsAlterNote       $08
00096B54 E701                       	dc.b	smpsNoAttack, $01
00096B56 E109                       	smpsAlterNote       $09
00096B58 E701                       	dc.b	smpsNoAttack, $01
00096B5A E10F                       	smpsAlterNote       $0F
00096B5C E701                       	dc.b	smpsNoAttack, $01
00096B5E E113                       	smpsAlterNote       $13
00096B60 E701                       	dc.b	smpsNoAttack, $01
00096B62 E10F                       	smpsAlterNote       $0F
00096B64 E701                       	dc.b	smpsNoAttack, $01
00096B66 E109                       	smpsAlterNote       $09
00096B68 E701                       	dc.b	smpsNoAttack, $01
00096B6A E108                       	smpsAlterNote       $08
00096B6C E701                       	dc.b	smpsNoAttack, $01
00096B6E E10C                       	smpsAlterNote       $0C
00096B70 E701                       	dc.b	smpsNoAttack, $01
00096B72 E112                       	smpsAlterNote       $12
00096B74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B78 E10F                       	smpsAlterNote       $0F
00096B7A E701                       	dc.b	smpsNoAttack, $01
00096B7C E109                       	smpsAlterNote       $09
00096B7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B82 E10F                       	smpsAlterNote       $0F
00096B84 E701                       	dc.b	smpsNoAttack, $01
00096B86 E112                       	smpsAlterNote       $12
00096B88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096B8C E10C                       	smpsAlterNote       $0C
00096B8E E701                       	dc.b	smpsNoAttack, $01
00096B90 E108                       	smpsAlterNote       $08
00096B92 E701                       	dc.b	smpsNoAttack, $01
00096B94 E109                       	smpsAlterNote       $09
00096B96 E701                       	dc.b	smpsNoAttack, $01
00096B98 E10F                       	smpsAlterNote       $0F
00096B9A E701                       	dc.b	smpsNoAttack, $01
00096B9C E113                       	smpsAlterNote       $13
00096B9E E701                       	dc.b	smpsNoAttack, $01
00096BA0 E10F                       	smpsAlterNote       $0F
00096BA2 E701                       	dc.b	smpsNoAttack, $01
00096BA4 E10C                       	smpsAlterNote       $0C
00096BA6 E701                       	dc.b	smpsNoAttack, $01
00096BA8 E108                       	smpsAlterNote       $08
00096BAA E701                       	dc.b	smpsNoAttack, $01
00096BAC E109                       	smpsAlterNote       $09
00096BAE 8001                       	dc.b	nRst, $01
00096BB0 E10C                       	smpsAlterNote       $0C
00096BB2 B50A                       	dc.b	nE4, $0A
00096BB4 E10D                       	smpsAlterNote       $0D
00096BB6 B60D                       	dc.b	nF4, $0D
00096BB8 E10A                       	smpsAlterNote       $0A
00096BBA E701                       	dc.b	smpsNoAttack, $01
00096BBC E106                       	smpsAlterNote       $06
00096BBE E701                       	dc.b	smpsNoAttack, $01
00096BC0 E107                       	smpsAlterNote       $07
00096BC2 E701                       	dc.b	smpsNoAttack, $01
00096BC4 E10D                       	smpsAlterNote       $0D
00096BC6 E701                       	dc.b	smpsNoAttack, $01
00096BC8 E111                       	smpsAlterNote       $11
00096BCA E701                       	dc.b	smpsNoAttack, $01
00096BCC E10D                       	smpsAlterNote       $0D
00096BCE E701                       	dc.b	smpsNoAttack, $01
00096BD0 E10A                       	smpsAlterNote       $0A
00096BD2 E701                       	dc.b	smpsNoAttack, $01
00096BD4 E106                       	smpsAlterNote       $06
00096BD6 E701                       	dc.b	smpsNoAttack, $01
00096BD8 E10A                       	smpsAlterNote       $0A
00096BDA E701                       	dc.b	smpsNoAttack, $01
00096BDC E110                       	smpsAlterNote       $10
00096BDE E701                       	dc.b	smpsNoAttack, $01
00096BE0 E111                       	smpsAlterNote       $11
00096BE2 E701                       	dc.b	smpsNoAttack, $01
00096BE4 E10D                       	smpsAlterNote       $0D
00096BE6 B80D                       	dc.b	nG4, $0D
00096BE8 E10A                       	smpsAlterNote       $0A
00096BEA E701                       	dc.b	smpsNoAttack, $01
00096BEC E106                       	smpsAlterNote       $06
00096BEE E701                       	dc.b	smpsNoAttack, $01
00096BF0 E107                       	smpsAlterNote       $07
00096BF2 E701                       	dc.b	smpsNoAttack, $01
00096BF4 E10D                       	smpsAlterNote       $0D
00096BF6 E701                       	dc.b	smpsNoAttack, $01
00096BF8 E111                       	smpsAlterNote       $11
00096BFA E701                       	dc.b	smpsNoAttack, $01
00096BFC E10D                       	smpsAlterNote       $0D
00096BFE E701                       	dc.b	smpsNoAttack, $01
00096C00 E10A                       	smpsAlterNote       $0A
00096C02 E701                       	dc.b	smpsNoAttack, $01
00096C04 E106                       	smpsAlterNote       $06
00096C06 E701                       	dc.b	smpsNoAttack, $01
00096C08 E10A                       	smpsAlterNote       $0A
00096C0A E701                       	dc.b	smpsNoAttack, $01
00096C0C E110                       	smpsAlterNote       $10
00096C0E E701                       	dc.b	smpsNoAttack, $01
00096C10 E111                       	smpsAlterNote       $11
00096C12 E701                       	dc.b	smpsNoAttack, $01
00096C14 E10D                       	smpsAlterNote       $0D
00096C16 E701                       	dc.b	smpsNoAttack, $01
00096C18 E107                       	smpsAlterNote       $07
00096C1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C1E E10A                       	smpsAlterNote       $0A
00096C20 E701                       	dc.b	smpsNoAttack, $01
00096C22 E110                       	smpsAlterNote       $10
00096C24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C28 E10D                       	smpsAlterNote       $0D
00096C2A 8001                       	dc.b	nRst, $01
00096C2C E10F                       	smpsAlterNote       $0F
00096C2E BA0D                       	dc.b	nA4, $0D
00096C30 E10C                       	smpsAlterNote       $0C
00096C32 E701                       	dc.b	smpsNoAttack, $01
00096C34 E108                       	smpsAlterNote       $08
00096C36 E701                       	dc.b	smpsNoAttack, $01
00096C38 E10C                       	smpsAlterNote       $0C
00096C3A E701                       	dc.b	smpsNoAttack, $01
00096C3C E112                       	smpsAlterNote       $12
00096C3E E701                       	dc.b	smpsNoAttack, $01
00096C40 E113                       	smpsAlterNote       $13
00096C42 E701                       	dc.b	smpsNoAttack, $01
00096C44 E10F                       	smpsAlterNote       $0F
00096C46 E701                       	dc.b	smpsNoAttack, $01
00096C48 E109                       	smpsAlterNote       $09
00096C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C4E E10C                       	smpsAlterNote       $0C
00096C50 E701                       	dc.b	smpsNoAttack, $01
00096C52 E112                       	smpsAlterNote       $12
00096C54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C58 E10C                       	smpsAlterNote       $0C
00096C5A E701                       	dc.b	smpsNoAttack, $01
00096C5C E109                       	smpsAlterNote       $09
00096C5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096C62 E10F                       	smpsAlterNote       $0F
00096C64 E701                       	dc.b	smpsNoAttack, $01
00096C66 E113                       	smpsAlterNote       $13
00096C68 E701                       	dc.b	smpsNoAttack, $01
00096C6A E112                       	smpsAlterNote       $12
00096C6C E701                       	dc.b	smpsNoAttack, $01
00096C6E E10C                       	smpsAlterNote       $0C
00096C70 E701                       	dc.b	smpsNoAttack, $01
00096C72 E108                       	smpsAlterNote       $08
00096C74 E701                       	dc.b	smpsNoAttack, $01
00096C76 E10C                       	smpsAlterNote       $0C
00096C78 E701                       	dc.b	smpsNoAttack, $01
00096C7A E10F                       	smpsAlterNote       $0F
00096C7C E701                       	dc.b	smpsNoAttack, $01
00096C7E E113                       	smpsAlterNote       $13
00096C80 E701                       	dc.b	smpsNoAttack, $01
00096C82 E10F                       	smpsAlterNote       $0F
00096C84 E701                       	dc.b	smpsNoAttack, $01
00096C86 E109                       	smpsAlterNote       $09
00096C88 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096C8C E10D                       	smpsAlterNote       $0D
00096C8E B609 8001                  	dc.b	nF4, $09, nRst, $01
00096C92 E10C                       	smpsAlterNote       $0C
00096C94 B506 8001                  	dc.b	nE4, $06, nRst, $01
00096C98 E10B                       	smpsAlterNote       $0B
00096C9A B30D                       	dc.b	nD4, $0D
00096C9C E10C                       	smpsAlterNote       $0C
00096C9E B503 8001                  	dc.b	nE4, $03, nRst, $01
00096CA2 E10D                       	smpsAlterNote       $0D
00096CA4 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00096CAC E109                       	smpsAlterNote       $09
00096CAE E701                       	dc.b	smpsNoAttack, $01
00096CB0 E108                       	smpsAlterNote       $08
00096CB2 E701                       	dc.b	smpsNoAttack, $01
00096CB4 E10C                       	smpsAlterNote       $0C
00096CB6 E701                       	dc.b	smpsNoAttack, $01
00096CB8 E112                       	smpsAlterNote       $12
00096CBA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CBE E10F                       	smpsAlterNote       $0F
00096CC0 E701                       	dc.b	smpsNoAttack, $01
00096CC2 E109                       	smpsAlterNote       $09
00096CC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CC8 E10F                       	smpsAlterNote       $0F
00096CCA E701                       	dc.b	smpsNoAttack, $01
00096CCC E112                       	smpsAlterNote       $12
00096CCE E701                       	dc.b	smpsNoAttack, $01
00096CD0 E113                       	smpsAlterNote       $13
00096CD2 8001                       	dc.b	nRst, $01
00096CD4 E10D                       	smpsAlterNote       $0D
00096CD6 C20D                       	dc.b	nF5, $0D
00096CD8 E107                       	smpsAlterNote       $07
00096CDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CDE E10A                       	smpsAlterNote       $0A
00096CE0 E701                       	dc.b	smpsNoAttack, $01
00096CE2 E110                       	smpsAlterNote       $10
00096CE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CE8 E10A                       	smpsAlterNote       $0A
00096CEA E701                       	dc.b	smpsNoAttack, $01
00096CEC E107                       	smpsAlterNote       $07
00096CEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096CF2 E10D                       	smpsAlterNote       $0D
00096CF4 E701                       	dc.b	smpsNoAttack, $01
00096CF6 E111                       	smpsAlterNote       $11
00096CF8 E701                       	dc.b	smpsNoAttack, $01
00096CFA E110                       	smpsAlterNote       $10
00096CFC E701                       	dc.b	smpsNoAttack, $01
00096CFE E10A                       	smpsAlterNote       $0A
00096D00 E701                       	dc.b	smpsNoAttack, $01
00096D02 E106                       	smpsAlterNote       $06
00096D04 E701                       	dc.b	smpsNoAttack, $01
00096D06 E10A                       	smpsAlterNote       $0A
00096D08 E701                       	dc.b	smpsNoAttack, $01
00096D0A E10D                       	smpsAlterNote       $0D
00096D0C E701                       	dc.b	smpsNoAttack, $01
00096D0E E111                       	smpsAlterNote       $11
00096D10 E701                       	dc.b	smpsNoAttack, $01
00096D12 E10D                       	smpsAlterNote       $0D
00096D14 E701                       	dc.b	smpsNoAttack, $01
00096D16 E107                       	smpsAlterNote       $07
00096D18 E701                       	dc.b	smpsNoAttack, $01
00096D1A E106                       	smpsAlterNote       $06
00096D1C E701                       	dc.b	smpsNoAttack, $01
00096D1E E10A                       	smpsAlterNote       $0A
00096D20 E701                       	dc.b	smpsNoAttack, $01
00096D22 E110                       	smpsAlterNote       $10
00096D24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D28 E10D                       	smpsAlterNote       $0D
00096D2A E701                       	dc.b	smpsNoAttack, $01
00096D2C E107                       	smpsAlterNote       $07
00096D2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D32 E10D                       	smpsAlterNote       $0D
00096D34 E701                       	dc.b	smpsNoAttack, $01
00096D36 E110                       	smpsAlterNote       $10
00096D38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D3C E10A                       	smpsAlterNote       $0A
00096D3E E701                       	dc.b	smpsNoAttack, $01
00096D40 E106                       	smpsAlterNote       $06
00096D42 E701                       	dc.b	smpsNoAttack, $01
00096D44 E107                       	smpsAlterNote       $07
00096D46 E701                       	dc.b	smpsNoAttack, $01
00096D48 E10D                       	smpsAlterNote       $0D
00096D4A E701                       	dc.b	smpsNoAttack, $01
00096D4C E111                       	smpsAlterNote       $11
00096D4E E701                       	dc.b	smpsNoAttack, $01
00096D50 E10D                       	smpsAlterNote       $0D
00096D52 E701                       	dc.b	smpsNoAttack, $01
00096D54 E10A                       	smpsAlterNote       $0A
00096D56 E701                       	dc.b	smpsNoAttack, $01
00096D58 E106                       	smpsAlterNote       $06
00096D5A E701                       	dc.b	smpsNoAttack, $01
00096D5C E10A                       	smpsAlterNote       $0A
00096D5E E701                       	dc.b	smpsNoAttack, $01
00096D60 E110                       	smpsAlterNote       $10
00096D62 E701                       	dc.b	smpsNoAttack, $01
00096D64 E111                       	smpsAlterNote       $11
00096D66 E701                       	dc.b	smpsNoAttack, $01
00096D68 E10D                       	smpsAlterNote       $0D
00096D6A E701                       	dc.b	smpsNoAttack, $01
00096D6C E107                       	smpsAlterNote       $07
00096D6E E701                       	dc.b	smpsNoAttack, $01
00096D70 E10D                       	smpsAlterNote       $0D
00096D72 C207                       	dc.b	nF5, $07
00096D74 E10C                       	smpsAlterNote       $0C
00096D76 C10D                       	dc.b	nE5, $0D
00096D78 E109                       	smpsAlterNote       $09
00096D7A E701                       	dc.b	smpsNoAttack, $01
00096D7C E106                       	smpsAlterNote       $06
00096D7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096D82 E10C                       	smpsAlterNote       $0C
00096D84 E701                       	dc.b	smpsNoAttack, $01
00096D86 E110                       	smpsAlterNote       $10
00096D88 E701                       	dc.b	smpsNoAttack, $01
00096D8A E10F                       	smpsAlterNote       $0F
00096D8C E701                       	dc.b	smpsNoAttack, $01
00096D8E E109                       	smpsAlterNote       $09
00096D90 E701                       	dc.b	smpsNoAttack, $01
00096D92 E105                       	smpsAlterNote       $05
00096D94 E701                       	dc.b	smpsNoAttack, $01
00096D96 E109                       	smpsAlterNote       $09
00096D98 E701                       	dc.b	smpsNoAttack, $01
00096D9A E10C                       	smpsAlterNote       $0C
00096D9C E701                       	dc.b	smpsNoAttack, $01
00096D9E E110                       	smpsAlterNote       $10
00096DA0 E701                       	dc.b	smpsNoAttack, $01
00096DA2 E10B                       	smpsAlterNote       $0B
00096DA4 BF0D                       	dc.b	nD5, $0D
00096DA6 E108                       	smpsAlterNote       $08
00096DA8 E701                       	dc.b	smpsNoAttack, $01
00096DAA E105                       	smpsAlterNote       $05
00096DAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DB0 E10B                       	smpsAlterNote       $0B
00096DB2 E701                       	dc.b	smpsNoAttack, $01
00096DB4 E10F                       	smpsAlterNote       $0F
00096DB6 E701                       	dc.b	smpsNoAttack, $01
00096DB8 E10E                       	smpsAlterNote       $0E
00096DBA E701                       	dc.b	smpsNoAttack, $01
00096DBC E108                       	smpsAlterNote       $08
00096DBE E701                       	dc.b	smpsNoAttack, $01
00096DC0 E104                       	smpsAlterNote       $04
00096DC2 E701                       	dc.b	smpsNoAttack, $01
00096DC4 E108                       	smpsAlterNote       $08
00096DC6 E701                       	dc.b	smpsNoAttack, $01
00096DC8 E10E                       	smpsAlterNote       $0E
00096DCA E701                       	dc.b	smpsNoAttack, $01
00096DCC E10F                       	smpsAlterNote       $0F
00096DCE E701                       	dc.b	smpsNoAttack, $01
00096DD0 E10B                       	smpsAlterNote       $0B
00096DD2 E701                       	dc.b	smpsNoAttack, $01
00096DD4 E105                       	smpsAlterNote       $05
00096DD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DDA E108                       	smpsAlterNote       $08
00096DDC E701                       	dc.b	smpsNoAttack, $01
00096DDE E10E                       	smpsAlterNote       $0E
00096DE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DE4 E108                       	smpsAlterNote       $08
00096DE6 E701                       	dc.b	smpsNoAttack, $01
00096DE8 E105                       	smpsAlterNote       $05
00096DEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096DEE E10B                       	smpsAlterNote       $0B
00096DF0 E701                       	dc.b	smpsNoAttack, $01
00096DF2 E10F                       	smpsAlterNote       $0F
00096DF4 E701                       	dc.b	smpsNoAttack, $01
00096DF6 E10E                       	smpsAlterNote       $0E
00096DF8 E701                       	dc.b	smpsNoAttack, $01
00096DFA E108                       	smpsAlterNote       $08
00096DFC E701                       	dc.b	smpsNoAttack, $01
00096DFE E104                       	smpsAlterNote       $04
00096E00 E701                       	dc.b	smpsNoAttack, $01
00096E02 E108                       	smpsAlterNote       $08
00096E04 E701                       	dc.b	smpsNoAttack, $01
00096E06 E10B                       	smpsAlterNote       $0B
00096E08 E701                       	dc.b	smpsNoAttack, $01
00096E0A E10F                       	smpsAlterNote       $0F
00096E0C E701                       	dc.b	smpsNoAttack, $01
00096E0E E10B                       	smpsAlterNote       $0B
00096E10 E701                       	dc.b	smpsNoAttack, $01
00096E12 E105                       	smpsAlterNote       $05
00096E14 E701                       	dc.b	smpsNoAttack, $01
00096E16 E104                       	smpsAlterNote       $04
00096E18 E701                       	dc.b	smpsNoAttack, $01
00096E1A E108                       	smpsAlterNote       $08
00096E1C E701                       	dc.b	smpsNoAttack, $01
00096E1E E10E                       	smpsAlterNote       $0E
00096E20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E24 E10B                       	smpsAlterNote       $0B
00096E26 E701                       	dc.b	smpsNoAttack, $01
00096E28 E105                       	smpsAlterNote       $05
00096E2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E2E E10B                       	smpsAlterNote       $0B
00096E30 E701                       	dc.b	smpsNoAttack, $01
00096E32 E10E                       	smpsAlterNote       $0E
00096E34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E38 E108                       	smpsAlterNote       $08
00096E3A E701                       	dc.b	smpsNoAttack, $01
00096E3C E105                       	smpsAlterNote       $05
00096E3E 8001                       	dc.b	nRst, $01
00096E42 E601                       	smpsAlterVol        $01
00096E44 E10B                       	smpsAlterNote       $0B
00096E46 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00096E52 8004                       	dc.b	nRst, $04
00096E56 E6FF                       	smpsAlterVol        $FF
00096E58 E10D                       	smpsAlterNote       $0D
00096E5A B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
00096E62 E10C                       	smpsAlterNote       $0C
00096E64 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00096E69 E10D                       	smpsAlterNote       $0D
00096E6B B60D                       	dc.b	nF4, $0D
00096E6D E10A                       	smpsAlterNote       $0A
00096E6F E701                       	dc.b	smpsNoAttack, $01
00096E71 E106                       	smpsAlterNote       $06
00096E73 E701                       	dc.b	smpsNoAttack, $01
00096E75 E10A                       	smpsAlterNote       $0A
00096E77 E701                       	dc.b	smpsNoAttack, $01
00096E79 E110                       	smpsAlterNote       $10
00096E7B E701                       	dc.b	smpsNoAttack, $01
00096E7D E111                       	smpsAlterNote       $11
00096E7F E701                       	dc.b	smpsNoAttack, $01
00096E81 E10D                       	smpsAlterNote       $0D
00096E83 E701                       	dc.b	smpsNoAttack, $01
00096E85 E107                       	smpsAlterNote       $07
00096E87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096E8B E10A                       	smpsAlterNote       $0A
00096E8D E701                       	dc.b	smpsNoAttack, $01
00096E8F E110                       	smpsAlterNote       $10
00096E91 E701                       	dc.b	smpsNoAttack, $01
00096E93 E111                       	smpsAlterNote       $11
00096E95 8001                       	dc.b	nRst, $01
00096E97 E10D                       	smpsAlterNote       $0D
00096E99 B80D                       	dc.b	nG4, $0D
00096E9B E10A                       	smpsAlterNote       $0A
00096E9D E701                       	dc.b	smpsNoAttack, $01
00096E9F E106                       	smpsAlterNote       $06
00096EA1 E701                       	dc.b	smpsNoAttack, $01
00096EA3 E10A                       	smpsAlterNote       $0A
00096EA5 E701                       	dc.b	smpsNoAttack, $01
00096EA7 E110                       	smpsAlterNote       $10
00096EA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EAD E10D                       	smpsAlterNote       $0D
00096EAF E701                       	dc.b	smpsNoAttack, $01
00096EB1 E107                       	smpsAlterNote       $07
00096EB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EB7 E10D                       	smpsAlterNote       $0D
00096EB9 E701                       	dc.b	smpsNoAttack, $01
00096EBB E110                       	smpsAlterNote       $10
00096EBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096EC1 E10A                       	smpsAlterNote       $0A
00096EC3 E701                       	dc.b	smpsNoAttack, $01
00096EC5 E106                       	smpsAlterNote       $06
00096EC7 E701                       	dc.b	smpsNoAttack, $01
00096EC9 E107                       	smpsAlterNote       $07
00096ECB E701                       	dc.b	smpsNoAttack, $01
00096ECD E10D                       	smpsAlterNote       $0D
00096ECF E701                       	dc.b	smpsNoAttack, $01
00096ED1 E111                       	smpsAlterNote       $11
00096ED3 E701                       	dc.b	smpsNoAttack, $01
00096ED5 E10D                       	smpsAlterNote       $0D
00096ED7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00096EDB E10F                       	smpsAlterNote       $0F
00096EDD BA02 8001                  	dc.b	nA4, $02, nRst, $01
00096EE1 E110                       	smpsAlterNote       $10
00096EE3 BB03                       	dc.b	nBb4, $03
00096EE5 E10F                       	smpsAlterNote       $0F
00096EE7 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00096EED E110                       	smpsAlterNote       $10
00096EEF C703 8001                  	dc.b	nBb5, $03, nRst, $01
00096EF3 E10F                       	smpsAlterNote       $0F
00096EF5 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00096EFB E110                       	smpsAlterNote       $10
00096EFD D302 8001                  	dc.b	nBb6, $02, nRst, $01
00096F01 E10F                       	smpsAlterNote       $0F
00096F03 D20D                       	dc.b	nA6, $0D
00096F05 E10C                       	smpsAlterNote       $0C
00096F07 E701                       	dc.b	smpsNoAttack, $01
00096F09 E108                       	smpsAlterNote       $08
00096F0B E701                       	dc.b	smpsNoAttack, $01
00096F0D E10C                       	smpsAlterNote       $0C
00096F0F E701                       	dc.b	smpsNoAttack, $01
00096F11 E10F                       	smpsAlterNote       $0F
00096F13 E701                       	dc.b	smpsNoAttack, $01
00096F15 E113                       	smpsAlterNote       $13
00096F17 E701                       	dc.b	smpsNoAttack, $01
00096F19 E10F                       	smpsAlterNote       $0F
00096F1B E701                       	dc.b	smpsNoAttack, $01
00096F1D E109                       	smpsAlterNote       $09
00096F1F E701                       	dc.b	smpsNoAttack, $01
00096F21 E108                       	smpsAlterNote       $08
00096F23 E701                       	dc.b	smpsNoAttack, $01
00096F25 E10C                       	smpsAlterNote       $0C
00096F27 E701                       	dc.b	smpsNoAttack, $01
00096F29 E112                       	smpsAlterNote       $12
00096F2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F2F E10F                       	smpsAlterNote       $0F
00096F31 E701                       	dc.b	smpsNoAttack, $01
00096F33 E109                       	smpsAlterNote       $09
00096F35 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00096F3B E10D                       	smpsAlterNote       $0D
00096F3D CE07                       	dc.b	nF6, $07
00096F3F E10C                       	smpsAlterNote       $0C
00096F41 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00096F45 E10D                       	smpsAlterNote       $0D
00096F47 CE03                       	dc.b	nF6, $03
00096F49 E10C                       	smpsAlterNote       $0C
00096F4B CC0D                       	dc.b	nEb6, $0D
00096F4D E109                       	smpsAlterNote       $09
00096F4F E701                       	dc.b	smpsNoAttack, $01
00096F51 E106                       	smpsAlterNote       $06
00096F53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F57 E10C                       	smpsAlterNote       $0C
00096F59 E701                       	dc.b	smpsNoAttack, $01
00096F5B E110                       	smpsAlterNote       $10
00096F5D E701                       	dc.b	smpsNoAttack, $01
00096F5F E10F                       	smpsAlterNote       $0F
00096F61 E701                       	dc.b	smpsNoAttack, $01
00096F63 E109                       	smpsAlterNote       $09
00096F65 E701                       	dc.b	smpsNoAttack, $01
00096F67 E105                       	smpsAlterNote       $05
00096F69 E701                       	dc.b	smpsNoAttack, $01
00096F6B E109                       	smpsAlterNote       $09
00096F6D E701                       	dc.b	smpsNoAttack, $01
00096F6F E10C                       	smpsAlterNote       $0C
00096F71 E701                       	dc.b	smpsNoAttack, $01
00096F73 E110                       	smpsAlterNote       $10
00096F75 E701                       	dc.b	smpsNoAttack, $01
00096F77 E10C                       	smpsAlterNote       $0C
00096F79 E701                       	dc.b	smpsNoAttack, $01
00096F7B E106                       	smpsAlterNote       $06
00096F7D E701                       	dc.b	smpsNoAttack, $01
00096F7F E105                       	smpsAlterNote       $05
00096F81 E701                       	dc.b	smpsNoAttack, $01
00096F83 E109                       	smpsAlterNote       $09
00096F85 E701                       	dc.b	smpsNoAttack, $01
00096F87 E10F                       	smpsAlterNote       $0F
00096F89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096F8D E10C                       	smpsAlterNote       $0C
00096F8F E701                       	dc.b	smpsNoAttack, $01
00096F91 E10B                       	smpsAlterNote       $0B
00096F93 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
00096F9D E10F                       	smpsAlterNote       $0F
00096F9F C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00096FA9 E10D                       	smpsAlterNote       $0D
00096FAB C203                       	dc.b	nF5, $03
00096FAD E10C                       	smpsAlterNote       $0C
00096FAF C103 8001                  	dc.b	nE5, $03, nRst, $01
00096FB3 E10D                       	smpsAlterNote       $0D
00096FB5 C20D                       	dc.b	nF5, $0D
00096FB7 E10C                       	smpsAlterNote       $0C
00096FB9 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
00096FBD E10B                       	smpsAlterNote       $0B
00096FBF BF0D                       	dc.b	nD5, $0D
00096FC1 E108                       	smpsAlterNote       $08
00096FC3 E701                       	dc.b	smpsNoAttack, $01
00096FC5 E104                       	smpsAlterNote       $04
00096FC7 E701                       	dc.b	smpsNoAttack, $01
00096FC9 E108                       	smpsAlterNote       $08
00096FCB E701                       	dc.b	smpsNoAttack, $01
00096FCD E10E                       	smpsAlterNote       $0E
00096FCF E701                       	dc.b	smpsNoAttack, $01
00096FD1 E10F                       	smpsAlterNote       $0F
00096FD3 E701                       	dc.b	smpsNoAttack, $01
00096FD5 E10B                       	smpsAlterNote       $0B
00096FD7 E701                       	dc.b	smpsNoAttack, $01
00096FD9 E105                       	smpsAlterNote       $05
00096FDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FDF E108                       	smpsAlterNote       $08
00096FE1 E701                       	dc.b	smpsNoAttack, $01
00096FE3 E10E                       	smpsAlterNote       $0E
00096FE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FE9 E108                       	smpsAlterNote       $08
00096FEB E701                       	dc.b	smpsNoAttack, $01
00096FED E105                       	smpsAlterNote       $05
00096FEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00096FF3 E10B                       	smpsAlterNote       $0B
00096FF5 E701                       	dc.b	smpsNoAttack, $01
00096FF7 E10F                       	smpsAlterNote       $0F
00096FF9 E701                       	dc.b	smpsNoAttack, $01
00096FFB E10E                       	smpsAlterNote       $0E
00096FFD E701                       	dc.b	smpsNoAttack, $01
00096FFF E108                       	smpsAlterNote       $08
00097001 E701                       	dc.b	smpsNoAttack, $01
00097003 E104                       	smpsAlterNote       $04
00097005 E701                       	dc.b	smpsNoAttack, $01
00097007 E108                       	smpsAlterNote       $08
00097009 E701                       	dc.b	smpsNoAttack, $01
0009700B E10B                       	smpsAlterNote       $0B
0009700D E701                       	dc.b	smpsNoAttack, $01
0009700F E10F                       	smpsAlterNote       $0F
00097011 E701                       	dc.b	smpsNoAttack, $01
00097013 E10B                       	smpsAlterNote       $0B
00097015 E701                       	dc.b	smpsNoAttack, $01
00097017 E105                       	smpsAlterNote       $05
00097019 E701                       	dc.b	smpsNoAttack, $01
0009701B E104                       	smpsAlterNote       $04
0009701D E701                       	dc.b	smpsNoAttack, $01
0009701F E108                       	smpsAlterNote       $08
00097021 E701                       	dc.b	smpsNoAttack, $01
00097023 E10E                       	smpsAlterNote       $0E
00097025 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097029 E10B                       	smpsAlterNote       $0B
0009702B E701                       	dc.b	smpsNoAttack, $01
0009702D E105                       	smpsAlterNote       $05
0009702F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097033 E10B                       	smpsAlterNote       $0B
00097035 E701                       	dc.b	smpsNoAttack, $01
00097037 E10E                       	smpsAlterNote       $0E
00097039 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009703D E108                       	smpsAlterNote       $08
0009703F E701                       	dc.b	smpsNoAttack, $01
00097041 E104                       	smpsAlterNote       $04
00097043 E701                       	dc.b	smpsNoAttack, $01
00097045 E105                       	smpsAlterNote       $05
00097047 E701                       	dc.b	smpsNoAttack, $01
00097049 E10B                       	smpsAlterNote       $0B
0009704B E701                       	dc.b	smpsNoAttack, $01
0009704D E10F                       	smpsAlterNote       $0F
0009704F E701                       	dc.b	smpsNoAttack, $01
00097051 E10B                       	smpsAlterNote       $0B
00097053 E701                       	dc.b	smpsNoAttack, $01
00097055 E108                       	smpsAlterNote       $08
00097057 E701                       	dc.b	smpsNoAttack, $01
00097059 E104                       	smpsAlterNote       $04
0009705B E701                       	dc.b	smpsNoAttack, $01
0009705D E108                       	smpsAlterNote       $08
0009705F E701                       	dc.b	smpsNoAttack, $01
00097061 E10E                       	smpsAlterNote       $0E
00097063 E701                       	dc.b	smpsNoAttack, $01
00097065 E10F                       	smpsAlterNote       $0F
00097067 E701                       	dc.b	smpsNoAttack, $01
00097069 E10B                       	smpsAlterNote       $0B
0009706B E701                       	dc.b	smpsNoAttack, $01
0009706D E105                       	smpsAlterNote       $05
0009706F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097073 E108                       	smpsAlterNote       $08
00097075 E701                       	dc.b	smpsNoAttack, $01
00097077 E10E                       	smpsAlterNote       $0E
00097079 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009707D E108                       	smpsAlterNote       $08
0009707F E701                       	dc.b	smpsNoAttack, $01
00097081 E105                       	smpsAlterNote       $05
00097083 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097087 E10B                       	smpsAlterNote       $0B
00097089 E701                       	dc.b	smpsNoAttack, $01
0009708B E10F                       	smpsAlterNote       $0F
0009708D E701                       	dc.b	smpsNoAttack, $01
0009708F E10E                       	smpsAlterNote       $0E
00097091 E701                       	dc.b	smpsNoAttack, $01
00097093 E108                       	smpsAlterNote       $08
00097095 E701                       	dc.b	smpsNoAttack, $01
00097097 E104                       	smpsAlterNote       $04
00097099 E701                       	dc.b	smpsNoAttack, $01
0009709B E108                       	smpsAlterNote       $08
0009709D E701                       	dc.b	smpsNoAttack, $01
0009709F E10B                       	smpsAlterNote       $0B
000970A1 E701                       	dc.b	smpsNoAttack, $01
000970A3 E10F                       	smpsAlterNote       $0F
000970A5 E701                       	dc.b	smpsNoAttack, $01
000970A7 E10B                       	smpsAlterNote       $0B
000970A9 E701                       	dc.b	smpsNoAttack, $01
000970AB E105                       	smpsAlterNote       $05
000970AD E701                       	dc.b	smpsNoAttack, $01
000970AF E104                       	smpsAlterNote       $04
000970B1 E701                       	dc.b	smpsNoAttack, $01
000970B3 E105                       	smpsAlterNote       $05
000970B5 8001                       	dc.b	nRst, $01
000970B7 E10D                       	smpsAlterNote       $0D
000970B9 C20D                       	dc.b	nF5, $0D
000970BB E107                       	smpsAlterNote       $07
000970BD E701                       	dc.b	smpsNoAttack, $01
000970BF E106                       	smpsAlterNote       $06
000970C1 E701                       	dc.b	smpsNoAttack, $01
000970C3 E10A                       	smpsAlterNote       $0A
000970C5 E701                       	dc.b	smpsNoAttack, $01
000970C7 E110                       	smpsAlterNote       $10
000970C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970CD E10D                       	smpsAlterNote       $0D
000970CF E701                       	dc.b	smpsNoAttack, $01
000970D1 E107                       	smpsAlterNote       $07
000970D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970D7 E10D                       	smpsAlterNote       $0D
000970D9 E701                       	dc.b	smpsNoAttack, $01
000970DB E110                       	smpsAlterNote       $10
000970DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000970E1 E10A                       	smpsAlterNote       $0A
000970E3 E701                       	dc.b	smpsNoAttack, $01
000970E5 E106                       	smpsAlterNote       $06
000970E7 E701                       	dc.b	smpsNoAttack, $01
000970E9 E107                       	smpsAlterNote       $07
000970EB E701                       	dc.b	smpsNoAttack, $01
000970ED E10D                       	smpsAlterNote       $0D
000970EF E701                       	dc.b	smpsNoAttack, $01
000970F1 E111                       	smpsAlterNote       $11
000970F3 E701                       	dc.b	smpsNoAttack, $01
000970F5 E10D                       	smpsAlterNote       $0D
000970F7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000970FB E10C                       	smpsAlterNote       $0C
000970FD C10D                       	dc.b	nE5, $0D
000970FF E10D                       	smpsAlterNote       $0D
00097101 C20A                       	dc.b	nF5, $0A
00097103 E10C                       	smpsAlterNote       $0C
00097105 C10E                       	dc.b	nE5, $0E
00097107 E106                       	smpsAlterNote       $06
00097109 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009710D E10C                       	smpsAlterNote       $0C
0009710F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097113 E10B                       	smpsAlterNote       $0B
00097115 BF0D                       	dc.b	nD5, $0D
00097117 E10C                       	smpsAlterNote       $0C
00097119 C107                       	dc.b	nE5, $07
0009711B E10D                       	smpsAlterNote       $0D
0009711D C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00097127 E110                       	smpsAlterNote       $10
00097129 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0009712F E10F                       	smpsAlterNote       $0F
00097131 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00097139 E10D                       	smpsAlterNote       $0D
0009713B D003                       	dc.b	nG6, $03
0009713F E0C0                       	smpsPan             panCenter, $00
00097141 E6FF                       	smpsAlterVol        $FF
00097143 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0009714F 8001                       	dc.b	nRst, $01
00097151 E10C                       	smpsAlterNote       $0C
00097153 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0009715D E604                       	smpsAlterVol        $04
0009715F E10B                       	smpsAlterNote       $0B
00097161 B306 8001                  	dc.b	nD4, $06, nRst, $01
00097165 E10F                       	smpsAlterNote       $0F
00097167 AE03                       	dc.b	nA3, $03
00097169 E10D                       	smpsAlterNote       $0D
0009716B B603 8001                  	dc.b	nF4, $03, nRst, $01
0009716F E10C                       	smpsAlterNote       $0C
00097171 B506 8001                  	dc.b	nE4, $06, nRst, $01
00097175 E10B                       	smpsAlterNote       $0B
00097177 B302 8001                  	dc.b	nD4, $02, nRst, $01
0009717B E10A                       	smpsAlterNote       $0A
0009717D B103                       	dc.b	nC4, $03
0009717F E110                       	smpsAlterNote       $10
00097181 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00097185 E10F                       	smpsAlterNote       $0F
00097187 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0009718B E080                       	smpsPan             panLeft, $00
0009718D 01                         	dc.b	$01
00097190 E6FB                       	smpsAlterVol        $FB
00097192 E1E4                       	smpsAlterNote       $E4
00097194 C501                       	dc.b	nAb5, $01
00097196 E1F4                       	smpsAlterNote       $F4
00097198 E701                       	dc.b	smpsNoAttack, $01
0009719A E104                       	smpsAlterNote       $04
0009719C E701                       	dc.b	smpsNoAttack, $01
0009719E E114                       	smpsAlterNote       $14
000971A0 E701                       	dc.b	smpsNoAttack, $01
000971A2 E11C                       	smpsAlterNote       $1C
000971A4 E701                       	dc.b	smpsNoAttack, $01
000971A6 E1EF                       	smpsAlterNote       $EF
000971A8 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000971AB E1FF                       	smpsAlterNote       $FF
000971AD E701                       	dc.b	smpsNoAttack, $01
000971AF E10F                       	smpsAlterNote       $0F
000971B1 C606                       	dc.b	nA5, $06
000971B3 E109                       	smpsAlterNote       $09
000971B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971B9 E10F                       	smpsAlterNote       $0F
000971BB E701                       	dc.b	smpsNoAttack, $01
000971BD E112                       	smpsAlterNote       $12
000971BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971C3 E10C                       	smpsAlterNote       $0C
000971C5 E701                       	dc.b	smpsNoAttack, $01
000971C7 E108                       	smpsAlterNote       $08
000971C9 E701                       	dc.b	smpsNoAttack, $01
000971CB E109                       	smpsAlterNote       $09
000971CD E701                       	dc.b	smpsNoAttack, $01
000971CF E10F                       	smpsAlterNote       $0F
000971D1 E701                       	dc.b	smpsNoAttack, $01
000971D3 E113                       	smpsAlterNote       $13
000971D5 E701                       	dc.b	smpsNoAttack, $01
000971D7 E10F                       	smpsAlterNote       $0F
000971D9 E701                       	dc.b	smpsNoAttack, $01
000971DB E10C                       	smpsAlterNote       $0C
000971DD E701                       	dc.b	smpsNoAttack, $01
000971DF E108                       	smpsAlterNote       $08
000971E1 E701                       	dc.b	smpsNoAttack, $01
000971E3 E10C                       	smpsAlterNote       $0C
000971E5 E701                       	dc.b	smpsNoAttack, $01
000971E7 E112                       	smpsAlterNote       $12
000971E9 E701                       	dc.b	smpsNoAttack, $01
000971EB E113                       	smpsAlterNote       $13
000971ED E701                       	dc.b	smpsNoAttack, $01
000971EF E10F                       	smpsAlterNote       $0F
000971F1 E701                       	dc.b	smpsNoAttack, $01
000971F3 E109                       	smpsAlterNote       $09
000971F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000971F9 E10C                       	smpsAlterNote       $0C
000971FB E701                       	dc.b	smpsNoAttack, $01
000971FD E112                       	smpsAlterNote       $12
000971FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097203 E10C                       	smpsAlterNote       $0C
00097205 E701                       	dc.b	smpsNoAttack, $01
00097207 E109                       	smpsAlterNote       $09
00097209 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009720D E10F                       	smpsAlterNote       $0F
0009720F E701                       	dc.b	smpsNoAttack, $01
00097211 E113                       	smpsAlterNote       $13
00097213 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00097217 E10D                       	smpsAlterNote       $0D
00097219 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0009721F E10C                       	smpsAlterNote       $0C
00097221 C102 8001                  	dc.b	nE5, $02, nRst, $01
00097225 E10D                       	smpsAlterNote       $0D
00097227 C201 8001                  	dc.b	nF5, $01, nRst, $01
0009722B E10C                       	smpsAlterNote       $0C
0009722D C102                       	dc.b	nE5, $02
0009722F E10B                       	smpsAlterNote       $0B
00097231 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00097235 E10C                       	smpsAlterNote       $0C
00097237 C101 8001                  	dc.b	nE5, $01, nRst, $01
0009723B E10B                       	smpsAlterNote       $0B
0009723D BF02                       	dc.b	nD5, $02
0009723F E10A                       	smpsAlterNote       $0A
00097241 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0009724B E110                       	smpsAlterNote       $10
0009724D BB02                       	dc.b	nBb4, $02
0009724F E10A                       	smpsAlterNote       $0A
00097251 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00097255 E110                       	smpsAlterNote       $10
00097257 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0009725B E10F                       	smpsAlterNote       $0F
0009725D BA01 8001                  	dc.b	nA4, $01, nRst, $01
00097261 E110                       	smpsAlterNote       $10
00097263 BB02                       	dc.b	nBb4, $02
00097265 E10F                       	smpsAlterNote       $0F
00097267 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00097271 E10C                       	smpsAlterNote       $0C
00097273 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0009727B E10B                       	smpsAlterNote       $0B
0009727D BE01 8001                  	dc.b	nCs5, $01, nRst, $01
00097281 E10F                       	smpsAlterNote       $0F
00097283 BA02                       	dc.b	nA4, $02
00097287 E0C0                       	smpsPan             panCenter, $00
00097289 E601                       	smpsAlterVol        $01
0009728B E109                       	smpsAlterNote       $09
0009728D AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
00097299 E108                       	smpsAlterNote       $08
0009729B A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000972A1 E107                       	smpsAlterNote       $07
000972A3 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000972A9 E109                       	smpsAlterNote       $09
000972AB B603 8001                  	dc.b	nF4, $03, nRst, $01
000972AF E108                       	smpsAlterNote       $08
000972B1 B506 8001                  	dc.b	nE4, $06, nRst, $01
000972B5 E107                       	smpsAlterNote       $07
000972B7 B302 8001                  	dc.b	nD4, $02, nRst, $01
000972BB E106                       	smpsAlterNote       $06
000972BD B103                       	dc.b	nC4, $03
000972BF E10C                       	smpsAlterNote       $0C
000972C1 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000972C7 E080                       	smpsPan             panLeft, $00
000972C9 07                         	dc.b	$07
000972CA E6FE                       	smpsAlterVol        $FE
000972CC E10B                       	smpsAlterNote       $0B
000972CE B20D                       	dc.b	nCs4, $0D
000972D0 E105                       	smpsAlterNote       $05
000972D2 E701                       	dc.b	smpsNoAttack, $01
000972D4 E104                       	smpsAlterNote       $04
000972D6 E701                       	dc.b	smpsNoAttack, $01
000972D8 E108                       	smpsAlterNote       $08
000972DA E701                       	dc.b	smpsNoAttack, $01
000972DC E10E                       	smpsAlterNote       $0E
000972DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972E2 E10B                       	smpsAlterNote       $0B
000972E4 E701                       	dc.b	smpsNoAttack, $01
000972E6 E105                       	smpsAlterNote       $05
000972E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000972EC E10B                       	smpsAlterNote       $0B
000972EE E701                       	dc.b	smpsNoAttack, $01
000972F0 E10E                       	smpsAlterNote       $0E
000972F2 E701                       	dc.b	smpsNoAttack, $01
000972F4 E10F                       	smpsAlterNote       $0F
000972F6 8001                       	dc.b	nRst, $01
000972F8 E10B                       	smpsAlterNote       $0B
000972FA B30D                       	dc.b	nD4, $0D
000972FC E105                       	smpsAlterNote       $05
000972FE E701                       	dc.b	smpsNoAttack, $01
00097300 E104                       	smpsAlterNote       $04
00097302 E701                       	dc.b	smpsNoAttack, $01
00097304 E108                       	smpsAlterNote       $08
00097306 E701                       	dc.b	smpsNoAttack, $01
00097308 E10E                       	smpsAlterNote       $0E
0009730A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009730E E10B                       	smpsAlterNote       $0B
00097310 E701                       	dc.b	smpsNoAttack, $01
00097312 E105                       	smpsAlterNote       $05
00097314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097318 E10B                       	smpsAlterNote       $0B
0009731A E701                       	dc.b	smpsNoAttack, $01
0009731C E10E                       	smpsAlterNote       $0E
0009731E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097322 E108                       	smpsAlterNote       $08
00097324 E701                       	dc.b	smpsNoAttack, $01
00097326 E104                       	smpsAlterNote       $04
00097328 E701                       	dc.b	smpsNoAttack, $01
0009732A E105                       	smpsAlterNote       $05
0009732C E701                       	dc.b	smpsNoAttack, $01
0009732E E10B                       	smpsAlterNote       $0B
00097330 E701                       	dc.b	smpsNoAttack, $01
00097332 E10F                       	smpsAlterNote       $0F
00097334 E701                       	dc.b	smpsNoAttack, $01
00097336 E10B                       	smpsAlterNote       $0B
00097338 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009733C E10C                       	smpsAlterNote       $0C
0009733E B50D                       	dc.b	nE4, $0D
00097340 E106                       	smpsAlterNote       $06
00097342 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097346 E10C                       	smpsAlterNote       $0C
00097348 E701                       	dc.b	smpsNoAttack, $01
0009734A E10F                       	smpsAlterNote       $0F
0009734C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097350 E109                       	smpsAlterNote       $09
00097352 E701                       	dc.b	smpsNoAttack, $01
00097354 E105                       	smpsAlterNote       $05
00097356 E701                       	dc.b	smpsNoAttack, $01
00097358 E106                       	smpsAlterNote       $06
0009735A E701                       	dc.b	smpsNoAttack, $01
0009735C E10C                       	smpsAlterNote       $0C
0009735E E701                       	dc.b	smpsNoAttack, $01
00097360 E110                       	smpsAlterNote       $10
00097362 E701                       	dc.b	smpsNoAttack, $01
00097364 E10B                       	smpsAlterNote       $0B
00097366 B30E                       	dc.b	nD4, $0E
00097368 E105                       	smpsAlterNote       $05
0009736A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009736E E10B                       	smpsAlterNote       $0B
00097370 E701                       	dc.b	smpsNoAttack, $01
00097372 E10E                       	smpsAlterNote       $0E
00097374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097378 E108                       	smpsAlterNote       $08
0009737A E701                       	dc.b	smpsNoAttack, $01
0009737C E104                       	smpsAlterNote       $04
0009737E E701                       	dc.b	smpsNoAttack, $01
00097380 E105                       	smpsAlterNote       $05
00097382 E701                       	dc.b	smpsNoAttack, $01
00097384 E10B                       	smpsAlterNote       $0B
00097386 E701                       	dc.b	smpsNoAttack, $01
00097388 E10F                       	smpsAlterNote       $0F
0009738A E701                       	dc.b	smpsNoAttack, $01
0009738C E10B                       	smpsAlterNote       $0B
0009738E E701                       	dc.b	smpsNoAttack, $01
00097390 E108                       	smpsAlterNote       $08
00097392 E701                       	dc.b	smpsNoAttack, $01
00097394 E104                       	smpsAlterNote       $04
00097396 E701                       	dc.b	smpsNoAttack, $01
00097398 E108                       	smpsAlterNote       $08
0009739A E701                       	dc.b	smpsNoAttack, $01
0009739C E10E                       	smpsAlterNote       $0E
0009739E E701                       	dc.b	smpsNoAttack, $01
000973A0 E10F                       	smpsAlterNote       $0F
000973A2 E701                       	dc.b	smpsNoAttack, $01
000973A4 E10B                       	smpsAlterNote       $0B
000973A6 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000973AA E108                       	smpsAlterNote       $08
000973AC E701                       	dc.b	smpsNoAttack, $01
000973AE E105                       	smpsAlterNote       $05
000973B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973B4 E10B                       	smpsAlterNote       $0B
000973B6 E701                       	dc.b	smpsNoAttack, $01
000973B8 E10F                       	smpsAlterNote       $0F
000973BA E701                       	dc.b	smpsNoAttack, $01
000973BC E10E                       	smpsAlterNote       $0E
000973BE E701                       	dc.b	smpsNoAttack, $01
000973C0 E108                       	smpsAlterNote       $08
000973C2 E701                       	dc.b	smpsNoAttack, $01
000973C4 E104                       	smpsAlterNote       $04
000973C6 E701                       	dc.b	smpsNoAttack, $01
000973C8 E108                       	smpsAlterNote       $08
000973CA E701                       	dc.b	smpsNoAttack, $01
000973CC E10B                       	smpsAlterNote       $0B
000973CE E701                       	dc.b	smpsNoAttack, $01
000973D0 E10F                       	smpsAlterNote       $0F
000973D2 E701                       	dc.b	smpsNoAttack, $01
000973D4 E10B                       	smpsAlterNote       $0B
000973D6 B30D                       	dc.b	nD4, $0D
000973D8 E108                       	smpsAlterNote       $08
000973DA E701                       	dc.b	smpsNoAttack, $01
000973DC E105                       	smpsAlterNote       $05
000973DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000973E2 E10B                       	smpsAlterNote       $0B
000973E4 E701                       	dc.b	smpsNoAttack, $01
000973E6 E10F                       	smpsAlterNote       $0F
000973E8 E701                       	dc.b	smpsNoAttack, $01
000973EA E10E                       	smpsAlterNote       $0E
000973EC E701                       	dc.b	smpsNoAttack, $01
000973EE E108                       	smpsAlterNote       $08
000973F0 E701                       	dc.b	smpsNoAttack, $01
000973F2 E104                       	smpsAlterNote       $04
000973F4 E701                       	dc.b	smpsNoAttack, $01
000973F6 E108                       	smpsAlterNote       $08
000973F8 E701                       	dc.b	smpsNoAttack, $01
000973FA E10B                       	smpsAlterNote       $0B
000973FC E701                       	dc.b	smpsNoAttack, $01
000973FE E10F                       	smpsAlterNote       $0F
00097400 E701                       	dc.b	smpsNoAttack, $01
00097402 E10B                       	smpsAlterNote       $0B
00097404 E701                       	dc.b	smpsNoAttack, $01
00097406 E105                       	smpsAlterNote       $05
00097408 E701                       	dc.b	smpsNoAttack, $01
0009740A E104                       	smpsAlterNote       $04
0009740C E701                       	dc.b	smpsNoAttack, $01
0009740E E108                       	smpsAlterNote       $08
00097410 E701                       	dc.b	smpsNoAttack, $01
00097412 E10E                       	smpsAlterNote       $0E
00097414 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097418 E10B                       	smpsAlterNote       $0B
0009741A 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0009741E E108                       	smpsAlterNote       $08
00097420 E701                       	dc.b	smpsNoAttack, $01
00097422 E104                       	smpsAlterNote       $04
00097424 E701                       	dc.b	smpsNoAttack, $01
00097426 E108                       	smpsAlterNote       $08
00097428 E701                       	dc.b	smpsNoAttack, $01
0009742A E10B                       	smpsAlterNote       $0B
0009742C E701                       	dc.b	smpsNoAttack, $01
00097430 E0C0                       	smpsPan             panCenter, $00
00097432 E601                       	smpsAlterVol        $01
00097434 E108                       	smpsAlterNote       $08
00097436 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00097442 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0009744A E080                       	smpsPan             panLeft, $00
0009744C 07                         	dc.b	$07
0009744D E6FF                       	smpsAlterVol        $FF
0009744F E10D                       	smpsAlterNote       $0D
00097451 B60D                       	dc.b	nF4, $0D
00097453 E10A                       	smpsAlterNote       $0A
00097455 E701                       	dc.b	smpsNoAttack, $01
00097457 E106                       	smpsAlterNote       $06
00097459 E701                       	dc.b	smpsNoAttack, $01
0009745B E10A                       	smpsAlterNote       $0A
0009745D E701                       	dc.b	smpsNoAttack, $01
0009745F E110                       	smpsAlterNote       $10
00097461 E701                       	dc.b	smpsNoAttack, $01
00097463 E111                       	smpsAlterNote       $11
00097465 E701                       	dc.b	smpsNoAttack, $01
00097467 E10D                       	smpsAlterNote       $0D
00097469 E701                       	dc.b	smpsNoAttack, $01
0009746B E107                       	smpsAlterNote       $07
0009746D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097471 E10A                       	smpsAlterNote       $0A
00097473 E701                       	dc.b	smpsNoAttack, $01
00097475 E110                       	smpsAlterNote       $10
00097477 E701                       	dc.b	smpsNoAttack, $01
00097479 E111                       	smpsAlterNote       $11
0009747B 8001                       	dc.b	nRst, $01
0009747D E10D                       	smpsAlterNote       $0D
0009747F B80D                       	dc.b	nG4, $0D
00097481 E10A                       	smpsAlterNote       $0A
00097483 E701                       	dc.b	smpsNoAttack, $01
00097485 E106                       	smpsAlterNote       $06
00097487 E701                       	dc.b	smpsNoAttack, $01
00097489 E10A                       	smpsAlterNote       $0A
0009748B E701                       	dc.b	smpsNoAttack, $01
0009748D E110                       	smpsAlterNote       $10
0009748F E701                       	dc.b	smpsNoAttack, $01
00097491 E111                       	smpsAlterNote       $11
00097493 E701                       	dc.b	smpsNoAttack, $01
00097495 E10D                       	smpsAlterNote       $0D
00097497 E701                       	dc.b	smpsNoAttack, $01
00097499 E107                       	smpsAlterNote       $07
0009749B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009749F E10D                       	smpsAlterNote       $0D
000974A1 E701                       	dc.b	smpsNoAttack, $01
000974A3 E110                       	smpsAlterNote       $10
000974A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974A9 E10A                       	smpsAlterNote       $0A
000974AB E701                       	dc.b	smpsNoAttack, $01
000974AD E106                       	smpsAlterNote       $06
000974AF E701                       	dc.b	smpsNoAttack, $01
000974B1 E107                       	smpsAlterNote       $07
000974B3 E701                       	dc.b	smpsNoAttack, $01
000974B5 E10D                       	smpsAlterNote       $0D
000974B7 E701                       	dc.b	smpsNoAttack, $01
000974B9 E111                       	smpsAlterNote       $11
000974BB E701                       	dc.b	smpsNoAttack, $01
000974BD E10D                       	smpsAlterNote       $0D
000974BF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000974C3 E10F                       	smpsAlterNote       $0F
000974C5 BA0D                       	dc.b	nA4, $0D
000974C7 E109                       	smpsAlterNote       $09
000974C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974CD E10C                       	smpsAlterNote       $0C
000974CF E701                       	dc.b	smpsNoAttack, $01
000974D1 E112                       	smpsAlterNote       $12
000974D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974D7 E10C                       	smpsAlterNote       $0C
000974D9 E701                       	dc.b	smpsNoAttack, $01
000974DB E109                       	smpsAlterNote       $09
000974DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000974E1 E10F                       	smpsAlterNote       $0F
000974E3 E701                       	dc.b	smpsNoAttack, $01
000974E5 E113                       	smpsAlterNote       $13
000974E7 E701                       	dc.b	smpsNoAttack, $01
000974E9 E112                       	smpsAlterNote       $12
000974EB E701                       	dc.b	smpsNoAttack, $01
000974ED E10C                       	smpsAlterNote       $0C
000974EF E701                       	dc.b	smpsNoAttack, $01
000974F1 E108                       	smpsAlterNote       $08
000974F3 E701                       	dc.b	smpsNoAttack, $01
000974F5 E10C                       	smpsAlterNote       $0C
000974F7 E701                       	dc.b	smpsNoAttack, $01
000974F9 E10F                       	smpsAlterNote       $0F
000974FB E701                       	dc.b	smpsNoAttack, $01
000974FD E113                       	smpsAlterNote       $13
000974FF E701                       	dc.b	smpsNoAttack, $01
00097501 E10F                       	smpsAlterNote       $0F
00097503 E701                       	dc.b	smpsNoAttack, $01
00097505 E109                       	smpsAlterNote       $09
00097507 E701                       	dc.b	smpsNoAttack, $01
00097509 E108                       	smpsAlterNote       $08
0009750B E701                       	dc.b	smpsNoAttack, $01
0009750D E10C                       	smpsAlterNote       $0C
0009750F E701                       	dc.b	smpsNoAttack, $01
00097511 E112                       	smpsAlterNote       $12
00097513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097517 E10F                       	smpsAlterNote       $0F
00097519 E701                       	dc.b	smpsNoAttack, $01
0009751B E109                       	smpsAlterNote       $09
0009751D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097521 E10F                       	smpsAlterNote       $0F
00097523 E701                       	dc.b	smpsNoAttack, $01
00097525 E112                       	smpsAlterNote       $12
00097527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009752B E10C                       	smpsAlterNote       $0C
0009752D E701                       	dc.b	smpsNoAttack, $01
0009752F E108                       	smpsAlterNote       $08
00097531 E701                       	dc.b	smpsNoAttack, $01
00097533 E109                       	smpsAlterNote       $09
00097535 E701                       	dc.b	smpsNoAttack, $01
00097537 E10C                       	smpsAlterNote       $0C
00097539 B50A                       	dc.b	nE4, $0A
0009753B E10D                       	smpsAlterNote       $0D
0009753D B60E                       	dc.b	nF4, $0E
0009753F E107                       	smpsAlterNote       $07
00097541 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097545 E10D                       	smpsAlterNote       $0D
00097547 E701                       	dc.b	smpsNoAttack, $01
00097549 E110                       	smpsAlterNote       $10
0009754B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009754F E10A                       	smpsAlterNote       $0A
00097551 E701                       	dc.b	smpsNoAttack, $01
00097553 E106                       	smpsAlterNote       $06
00097555 E701                       	dc.b	smpsNoAttack, $01
00097557 E107                       	smpsAlterNote       $07
00097559 E701                       	dc.b	smpsNoAttack, $01
0009755B E10D                       	smpsAlterNote       $0D
0009755D E701                       	dc.b	smpsNoAttack, $01
0009755F E111                       	smpsAlterNote       $11
00097561 E701                       	dc.b	smpsNoAttack, $01
00097563 E10D                       	smpsAlterNote       $0D
00097565 B80D                       	dc.b	nG4, $0D
00097567 E10A                       	smpsAlterNote       $0A
00097569 E701                       	dc.b	smpsNoAttack, $01
0009756B E107                       	smpsAlterNote       $07
0009756D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097571 E10D                       	smpsAlterNote       $0D
00097573 E701                       	dc.b	smpsNoAttack, $01
00097575 E111                       	smpsAlterNote       $11
00097577 E701                       	dc.b	smpsNoAttack, $01
00097579 E110                       	smpsAlterNote       $10
0009757B E701                       	dc.b	smpsNoAttack, $01
0009757D E10A                       	smpsAlterNote       $0A
0009757F E701                       	dc.b	smpsNoAttack, $01
00097581 E106                       	smpsAlterNote       $06
00097583 E701                       	dc.b	smpsNoAttack, $01
00097585 E10A                       	smpsAlterNote       $0A
00097587 E701                       	dc.b	smpsNoAttack, $01
00097589 E10D                       	smpsAlterNote       $0D
0009758B E701                       	dc.b	smpsNoAttack, $01
0009758D E111                       	smpsAlterNote       $11
0009758F E701                       	dc.b	smpsNoAttack, $01
00097591 E10D                       	smpsAlterNote       $0D
00097593 E701                       	dc.b	smpsNoAttack, $01
00097595 E107                       	smpsAlterNote       $07
00097597 E701                       	dc.b	smpsNoAttack, $01
00097599 E106                       	smpsAlterNote       $06
0009759B E701                       	dc.b	smpsNoAttack, $01
0009759D E10A                       	smpsAlterNote       $0A
0009759F E701                       	dc.b	smpsNoAttack, $01
000975A1 E110                       	smpsAlterNote       $10
000975A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975A7 E10D                       	smpsAlterNote       $0D
000975A9 E701                       	dc.b	smpsNoAttack, $01
000975AB E10F                       	smpsAlterNote       $0F
000975AD BA0D                       	dc.b	nA4, $0D
000975AF E10C                       	smpsAlterNote       $0C
000975B1 E701                       	dc.b	smpsNoAttack, $01
000975B3 E108                       	smpsAlterNote       $08
000975B5 E701                       	dc.b	smpsNoAttack, $01
000975B7 E109                       	smpsAlterNote       $09
000975B9 E701                       	dc.b	smpsNoAttack, $01
000975BB E10F                       	smpsAlterNote       $0F
000975BD E701                       	dc.b	smpsNoAttack, $01
000975BF E113                       	smpsAlterNote       $13
000975C1 E701                       	dc.b	smpsNoAttack, $01
000975C3 E10F                       	smpsAlterNote       $0F
000975C5 E701                       	dc.b	smpsNoAttack, $01
000975C7 E10C                       	smpsAlterNote       $0C
000975C9 E701                       	dc.b	smpsNoAttack, $01
000975CB E108                       	smpsAlterNote       $08
000975CD E701                       	dc.b	smpsNoAttack, $01
000975CF E10C                       	smpsAlterNote       $0C
000975D1 E701                       	dc.b	smpsNoAttack, $01
000975D3 E112                       	smpsAlterNote       $12
000975D5 E701                       	dc.b	smpsNoAttack, $01
000975D7 E113                       	smpsAlterNote       $13
000975D9 E701                       	dc.b	smpsNoAttack, $01
000975DB E10F                       	smpsAlterNote       $0F
000975DD E701                       	dc.b	smpsNoAttack, $01
000975DF E109                       	smpsAlterNote       $09
000975E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975E5 E10C                       	smpsAlterNote       $0C
000975E7 E701                       	dc.b	smpsNoAttack, $01
000975E9 E112                       	smpsAlterNote       $12
000975EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975EF E10C                       	smpsAlterNote       $0C
000975F1 E701                       	dc.b	smpsNoAttack, $01
000975F3 E109                       	smpsAlterNote       $09
000975F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000975F9 E10F                       	smpsAlterNote       $0F
000975FB E701                       	dc.b	smpsNoAttack, $01
000975FD E113                       	smpsAlterNote       $13
000975FF E701                       	dc.b	smpsNoAttack, $01
00097601 E112                       	smpsAlterNote       $12
00097603 E701                       	dc.b	smpsNoAttack, $01
00097605 E10C                       	smpsAlterNote       $0C
00097607 E701                       	dc.b	smpsNoAttack, $01
00097609 E109                       	smpsAlterNote       $09
0009760B 8001                       	dc.b	nRst, $01
0009760D E10D                       	smpsAlterNote       $0D
0009760F B60A                       	dc.b	nF4, $0A
00097611 E10C                       	smpsAlterNote       $0C
00097613 B506 8001                  	dc.b	nE4, $06, nRst, $01
00097617 E10B                       	smpsAlterNote       $0B
00097619 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0009761D E10C                       	smpsAlterNote       $0C
0009761F B503                       	dc.b	nE4, $03
00097621 E10D                       	smpsAlterNote       $0D
00097623 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0009762D E10C                       	smpsAlterNote       $0C
0009762F E701                       	dc.b	smpsNoAttack, $01
00097631 E108                       	smpsAlterNote       $08
00097633 E701                       	dc.b	smpsNoAttack, $01
00097635 E10C                       	smpsAlterNote       $0C
00097637 E701                       	dc.b	smpsNoAttack, $01
00097639 E112                       	smpsAlterNote       $12
0009763B E701                       	dc.b	smpsNoAttack, $01
0009763D E113                       	smpsAlterNote       $13
0009763F E701                       	dc.b	smpsNoAttack, $01
00097641 E10F                       	smpsAlterNote       $0F
00097643 E701                       	dc.b	smpsNoAttack, $01
00097645 E109                       	smpsAlterNote       $09
00097647 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009764B E10C                       	smpsAlterNote       $0C
0009764D E701                       	dc.b	smpsNoAttack, $01
0009764F E112                       	smpsAlterNote       $12
00097651 E701                       	dc.b	smpsNoAttack, $01
00097653 E113                       	smpsAlterNote       $13
00097655 8001                       	dc.b	nRst, $01
00097657 E10D                       	smpsAlterNote       $0D
00097659 C20D                       	dc.b	nF5, $0D
0009765B E10A                       	smpsAlterNote       $0A
0009765D E701                       	dc.b	smpsNoAttack, $01
0009765F E106                       	smpsAlterNote       $06
00097661 E701                       	dc.b	smpsNoAttack, $01
00097663 E10A                       	smpsAlterNote       $0A
00097665 E701                       	dc.b	smpsNoAttack, $01
00097667 E110                       	smpsAlterNote       $10
00097669 E701                       	dc.b	smpsNoAttack, $01
0009766B E111                       	smpsAlterNote       $11
0009766D E701                       	dc.b	smpsNoAttack, $01
0009766F E10D                       	smpsAlterNote       $0D
00097671 E701                       	dc.b	smpsNoAttack, $01
00097673 E107                       	smpsAlterNote       $07
00097675 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097679 E10A                       	smpsAlterNote       $0A
0009767B E701                       	dc.b	smpsNoAttack, $01
0009767D E110                       	smpsAlterNote       $10
0009767F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097683 E10A                       	smpsAlterNote       $0A
00097685 E701                       	dc.b	smpsNoAttack, $01
00097687 E107                       	smpsAlterNote       $07
00097689 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009768D E10D                       	smpsAlterNote       $0D
0009768F E701                       	dc.b	smpsNoAttack, $01
00097691 E111                       	smpsAlterNote       $11
00097693 E701                       	dc.b	smpsNoAttack, $01
00097695 E110                       	smpsAlterNote       $10
00097697 E701                       	dc.b	smpsNoAttack, $01
00097699 E10A                       	smpsAlterNote       $0A
0009769B E701                       	dc.b	smpsNoAttack, $01
0009769D E106                       	smpsAlterNote       $06
0009769F E701                       	dc.b	smpsNoAttack, $01
000976A1 E10A                       	smpsAlterNote       $0A
000976A3 E701                       	dc.b	smpsNoAttack, $01
000976A5 E10D                       	smpsAlterNote       $0D
000976A7 E701                       	dc.b	smpsNoAttack, $01
000976A9 E111                       	smpsAlterNote       $11
000976AB E701                       	dc.b	smpsNoAttack, $01
000976AD E10D                       	smpsAlterNote       $0D
000976AF E701                       	dc.b	smpsNoAttack, $01
000976B1 E107                       	smpsAlterNote       $07
000976B3 E701                       	dc.b	smpsNoAttack, $01
000976B5 E106                       	smpsAlterNote       $06
000976B7 E701                       	dc.b	smpsNoAttack, $01
000976B9 E10A                       	smpsAlterNote       $0A
000976BB E701                       	dc.b	smpsNoAttack, $01
000976BD E110                       	smpsAlterNote       $10
000976BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976C3 E10D                       	smpsAlterNote       $0D
000976C5 E701                       	dc.b	smpsNoAttack, $01
000976C7 E107                       	smpsAlterNote       $07
000976C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976CD E10D                       	smpsAlterNote       $0D
000976CF E701                       	dc.b	smpsNoAttack, $01
000976D1 E110                       	smpsAlterNote       $10
000976D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000976D7 E10A                       	smpsAlterNote       $0A
000976D9 E701                       	dc.b	smpsNoAttack, $01
000976DB E106                       	smpsAlterNote       $06
000976DD E701                       	dc.b	smpsNoAttack, $01
000976DF E107                       	smpsAlterNote       $07
000976E1 E701                       	dc.b	smpsNoAttack, $01
000976E3 E10D                       	smpsAlterNote       $0D
000976E5 E701                       	dc.b	smpsNoAttack, $01
000976E7 E111                       	smpsAlterNote       $11
000976E9 E701                       	dc.b	smpsNoAttack, $01
000976EB E10D                       	smpsAlterNote       $0D
000976ED E701                       	dc.b	smpsNoAttack, $01
000976EF E10A                       	smpsAlterNote       $0A
000976F1 E701                       	dc.b	smpsNoAttack, $01
000976F3 E107                       	smpsAlterNote       $07
000976F5 8001                       	dc.b	nRst, $01
000976F7 E10D                       	smpsAlterNote       $0D
000976F9 C206 8001                  	dc.b	nF5, $06, nRst, $01
000976FF E601                       	smpsAlterVol        $01
00097701 E110                       	smpsAlterNote       $10
00097703 BB0D                       	dc.b	nBb4, $0D
00097705 E10A                       	smpsAlterNote       $0A
00097707 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009770B E110                       	smpsAlterNote       $10
0009770D E701                       	dc.b	smpsNoAttack, $01
0009770F E113                       	smpsAlterNote       $13
00097711 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097715 E10D                       	smpsAlterNote       $0D
00097717 E701                       	dc.b	smpsNoAttack, $01
00097719 E109                       	smpsAlterNote       $09
0009771B E701                       	dc.b	smpsNoAttack, $01
0009771D E10A                       	smpsAlterNote       $0A
0009771F E701                       	dc.b	smpsNoAttack, $01
00097721 E110                       	smpsAlterNote       $10
00097723 E701                       	dc.b	smpsNoAttack, $01
00097725 E114                       	smpsAlterNote       $14
00097727 E701                       	dc.b	smpsNoAttack, $01
00097729 E110                       	smpsAlterNote       $10
0009772B E701                       	dc.b	smpsNoAttack, $01
0009772D E10D                       	smpsAlterNote       $0D
0009772F E701                       	dc.b	smpsNoAttack, $01
00097731 E109                       	smpsAlterNote       $09
00097733 E701                       	dc.b	smpsNoAttack, $01
00097735 E10A                       	smpsAlterNote       $0A
00097737 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0009773B E107                       	smpsAlterNote       $07
0009773D E701                       	dc.b	smpsNoAttack, $01
0009773F E103                       	smpsAlterNote       $03
00097741 E701                       	dc.b	smpsNoAttack, $01
00097743 E107                       	smpsAlterNote       $07
00097745 E701                       	dc.b	smpsNoAttack, $01
00097747 E10D                       	smpsAlterNote       $0D
00097749 E701                       	dc.b	smpsNoAttack, $01
0009774B E10E                       	smpsAlterNote       $0E
0009774D E701                       	dc.b	smpsNoAttack, $01
0009774F E10A                       	smpsAlterNote       $0A
00097751 E701                       	dc.b	smpsNoAttack, $01
00097753 E104                       	smpsAlterNote       $04
00097755 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097759 E107                       	smpsAlterNote       $07
0009775B E701                       	dc.b	smpsNoAttack, $01
0009775D E10D                       	smpsAlterNote       $0D
0009775F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097763 E107                       	smpsAlterNote       $07
00097765 E701                       	dc.b	smpsNoAttack, $01
00097767 E104                       	smpsAlterNote       $04
00097769 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009776D E10B                       	smpsAlterNote       $0B
0009776F BF0D                       	dc.b	nD5, $0D
00097771 E108                       	smpsAlterNote       $08
00097773 E701                       	dc.b	smpsNoAttack, $01
00097775 E105                       	smpsAlterNote       $05
00097777 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009777B E10B                       	smpsAlterNote       $0B
0009777D E701                       	dc.b	smpsNoAttack, $01
0009777F E10F                       	smpsAlterNote       $0F
00097781 E701                       	dc.b	smpsNoAttack, $01
00097783 E10E                       	smpsAlterNote       $0E
00097785 E701                       	dc.b	smpsNoAttack, $01
00097787 E108                       	smpsAlterNote       $08
00097789 E701                       	dc.b	smpsNoAttack, $01
0009778B E104                       	smpsAlterNote       $04
0009778D E701                       	dc.b	smpsNoAttack, $01
0009778F E108                       	smpsAlterNote       $08
00097791 E701                       	dc.b	smpsNoAttack, $01
00097793 E10B                       	smpsAlterNote       $0B
00097795 E701                       	dc.b	smpsNoAttack, $01
00097797 E10F                       	smpsAlterNote       $0F
00097799 E701                       	dc.b	smpsNoAttack, $01
0009779B E10B                       	smpsAlterNote       $0B
0009779D E701                       	dc.b	smpsNoAttack, $01
0009779F E105                       	smpsAlterNote       $05
000977A1 E701                       	dc.b	smpsNoAttack, $01
000977A3 E104                       	smpsAlterNote       $04
000977A5 E701                       	dc.b	smpsNoAttack, $01
000977A7 E105                       	smpsAlterNote       $05
000977A9 8001                       	dc.b	nRst, $01
000977AB E10C                       	smpsAlterNote       $0C
000977AD C10C                       	dc.b	nE5, $0C
000977AF E10D                       	smpsAlterNote       $0D
000977B1 C201                       	dc.b	nF5, $01
000977B3 E10E                       	smpsAlterNote       $0E
000977B5 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000977B9 E10D                       	smpsAlterNote       $0D
000977BB C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000977BF E10A                       	smpsAlterNote       $0A
000977C1 E701                       	dc.b	smpsNoAttack, $01
000977C3 E106                       	smpsAlterNote       $06
000977C5 E701                       	dc.b	smpsNoAttack, $01
000977C7 E10A                       	smpsAlterNote       $0A
000977C9 E701                       	dc.b	smpsNoAttack, $01
000977CB E10D                       	smpsAlterNote       $0D
000977CD E701                       	dc.b	smpsNoAttack, $01
000977CF E111                       	smpsAlterNote       $11
000977D1 E701                       	dc.b	smpsNoAttack, $01
000977D3 E10D                       	smpsAlterNote       $0D
000977D5 E701                       	dc.b	smpsNoAttack, $01
000977D7 E107                       	smpsAlterNote       $07
000977D9 E701                       	dc.b	smpsNoAttack, $01
000977DB E106                       	smpsAlterNote       $06
000977DD E701                       	dc.b	smpsNoAttack, $01
000977DF E10A                       	smpsAlterNote       $0A
000977E1 E701                       	dc.b	smpsNoAttack, $01
000977E3 E110                       	smpsAlterNote       $10
000977E5 E701                       	dc.b	smpsNoAttack, $01
000977E7 E111                       	smpsAlterNote       $11
000977E9 8001                       	dc.b	nRst, $01
000977EB E10D                       	smpsAlterNote       $0D
000977ED C40D                       	dc.b	nG5, $0D
000977EF E10A                       	smpsAlterNote       $0A
000977F1 E701                       	dc.b	smpsNoAttack, $01
000977F3 E106                       	smpsAlterNote       $06
000977F5 E701                       	dc.b	smpsNoAttack, $01
000977F7 E10A                       	smpsAlterNote       $0A
000977F9 E701                       	dc.b	smpsNoAttack, $01
000977FB E10D                       	smpsAlterNote       $0D
000977FD E701                       	dc.b	smpsNoAttack, $01
000977FF E10C                       	smpsAlterNote       $0C
00097801 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009780D 8001                       	dc.b	nRst, $01
0009780F E10D                       	smpsAlterNote       $0D
00097811 C20D                       	dc.b	nF5, $0D
00097813 E10A                       	smpsAlterNote       $0A
00097815 E701                       	dc.b	smpsNoAttack, $01
00097817 E106                       	smpsAlterNote       $06
00097819 E701                       	dc.b	smpsNoAttack, $01
0009781B E10A                       	smpsAlterNote       $0A
0009781D E701                       	dc.b	smpsNoAttack, $01
0009781F E110                       	smpsAlterNote       $10
00097821 E701                       	dc.b	smpsNoAttack, $01
00097823 E111                       	smpsAlterNote       $11
00097825 E701                       	dc.b	smpsNoAttack, $01
00097827 E10D                       	smpsAlterNote       $0D
00097829 E701                       	dc.b	smpsNoAttack, $01
0009782B E107                       	smpsAlterNote       $07
0009782D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097831 E10A                       	smpsAlterNote       $0A
00097833 E701                       	dc.b	smpsNoAttack, $01
00097835 E110                       	smpsAlterNote       $10
00097837 E701                       	dc.b	smpsNoAttack, $01
00097839 E111                       	smpsAlterNote       $11
0009783B 8001                       	dc.b	nRst, $01
0009783D E10F                       	smpsAlterNote       $0F
0009783F C60A                       	dc.b	nA5, $0A
00097841 E10D                       	smpsAlterNote       $0D
00097843 C406 8001                  	dc.b	nG5, $06, nRst, $01
00097847 E10C                       	smpsAlterNote       $0C
00097849 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00097855 8001                       	dc.b	nRst, $01
00097857 E10D                       	smpsAlterNote       $0D
00097859 C20D                       	dc.b	nF5, $0D
0009785B E107                       	smpsAlterNote       $07
0009785D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097861 E10A                       	smpsAlterNote       $0A
00097863 E701                       	dc.b	smpsNoAttack, $01
00097865 E110                       	smpsAlterNote       $10
00097867 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009786B E10A                       	smpsAlterNote       $0A
0009786D E701                       	dc.b	smpsNoAttack, $01
0009786F E107                       	smpsAlterNote       $07
00097871 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097875 E10D                       	smpsAlterNote       $0D
00097877 E701                       	dc.b	smpsNoAttack, $01
00097879 E111                       	smpsAlterNote       $11
0009787B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009787F E10D                       	smpsAlterNote       $0D
00097881 C40D                       	dc.b	nG5, $0D
00097883 E107                       	smpsAlterNote       $07
00097885 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097889 E10A                       	smpsAlterNote       $0A
0009788B E701                       	dc.b	smpsNoAttack, $01
0009788D E10D                       	smpsAlterNote       $0D
0009788F 8001                       	dc.b	nRst, $01
00097891 E10C                       	smpsAlterNote       $0C
00097893 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009789F E10D                       	smpsAlterNote       $0D
000978A1 C20E                       	dc.b	nF5, $0E
000978A3 E107                       	smpsAlterNote       $07
000978A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000978A9 E10D                       	smpsAlterNote       $0D
000978AB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000978B1 E0C0                       	smpsPan             panCenter, $00
000978B3 E603                       	smpsAlterVol        $03
000978B5 E108                       	smpsAlterNote       $08
000978B7 B406                       	dc.b	nEb4, $06
000978B9 E10C                       	smpsAlterNote       $0C
000978BB AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000978BF E108                       	smpsAlterNote       $08
000978C1 B403                       	dc.b	nEb4, $03
000978C3 E109                       	smpsAlterNote       $09
000978C5 B803 8001                  	dc.b	nG4, $03, nRst, $01
000978C9 E10C                       	smpsAlterNote       $0C
000978CB BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000978D3 03                         	dc.b	$03
000978D4 E6FD                       	smpsAlterVol        $FD
000978D6 F6F1 F4                    	smpsJump            music84_Jump00
000978D9                            
000978D9                            ; PSG1 Data
000978D9                            music84_PSG1:
000978D9 E1FD                       	smpsAlterNote       $FD
000978DB EC04                       	smpsPSGAlterVol     $04
000978DD 9203                       	dc.b	nF1, $03
000978DF E1FE                       	smpsAlterNote       $FE
000978E1 9603                       	dc.b	nA1, $03
000978E3 EC04                       	smpsPSGAlterVol     $04
000978E5 E701                       	dc.b	smpsNoAttack, $01
000978E7 E1FF                       	smpsAlterNote       $FF
000978E9 ECFC                       	smpsPSGAlterVol     $FC
000978EB 9B03                       	dc.b	nD2, $03
000978ED E1FD                       	smpsAlterNote       $FD
000978EF 9403                       	dc.b	nG1, $03
000978F1 EC04                       	smpsPSGAlterVol     $04
000978F3 E701                       	dc.b	smpsNoAttack, $01
000978F5 E1FE                       	smpsAlterNote       $FE
000978F7 ECFC                       	smpsPSGAlterVol     $FC
000978F9 9703                       	dc.b	nBb1, $03
000978FB E1FF                       	smpsAlterNote       $FF
000978FD 9B03                       	dc.b	nD2, $03
000978FF EC04                       	smpsPSGAlterVol     $04
00097901 E701                       	dc.b	smpsNoAttack, $01
00097903 E1FE                       	smpsAlterNote       $FE
00097905 ECFC                       	smpsPSGAlterVol     $FC
00097907 A002                       	dc.b	nG2, $02
00097909 EC04                       	smpsPSGAlterVol     $04
0009790B E701                       	dc.b	smpsNoAttack, $01
0009790D E1FF                       	smpsAlterNote       $FF
0009790F ECFC                       	smpsPSGAlterVol     $FC
00097911 A203                       	dc.b	nA2, $03
00097913 EC0B                       	smpsPSGAlterVol     $0B
00097915 800A                       	dc.b	nRst, $0A
00097917 E105                       	smpsAlterNote       $05
00097919 01                         	dc.b	$01
0009791A E1FC                       	smpsAlterNote       $FC
0009791C 01                         	dc.b	$01
0009791D E105                       	smpsAlterNote       $05
0009791F 01                         	dc.b	$01
00097920 E1FD                       	smpsAlterNote       $FD
00097922 01                         	dc.b	$01
00097923 E105                       	smpsAlterNote       $05
00097925 01                         	dc.b	$01
00097926 E1FD                       	smpsAlterNote       $FD
00097928 01                         	dc.b	$01
00097929 E1FA                       	smpsAlterNote       $FA
0009792B 01                         	dc.b	$01
0009792C E1FC                       	smpsAlterNote       $FC
0009792E 01                         	dc.b	$01
0009792F E105                       	smpsAlterNote       $05
00097931 01                         	dc.b	$01
00097932 E108                       	smpsAlterNote       $08
00097934 0101                       	dc.b	$01, $01
00097936 E105                       	smpsAlterNote       $05
00097938 01                         	dc.b	$01
00097939 E1FA                       	smpsAlterNote       $FA
0009793B 0101                       	dc.b	$01, $01
0009793D E1FD                       	smpsAlterNote       $FD
0009793F 01                         	dc.b	$01
00097940 E105                       	smpsAlterNote       $05
00097942 01                         	dc.b	$01
00097943 E108                       	smpsAlterNote       $08
00097945 01                         	dc.b	$01
00097946 E105                       	smpsAlterNote       $05
00097948 01                         	dc.b	$01
00097949 E1FC                       	smpsAlterNote       $FC
0009794B 01                         	dc.b	$01
0009794C E105                       	smpsAlterNote       $05
0009794E 01                         	dc.b	$01
0009794F E1FD                       	smpsAlterNote       $FD
00097951 01                         	dc.b	$01
00097952                            
00097952                            music84_Jump07:
00097952 E105                       	smpsAlterNote       $05
00097954 8001                       	dc.b	nRst, $01
00097956 E1FD                       	smpsAlterNote       $FD
00097958 01                         	dc.b	$01
00097959 E1FA                       	smpsAlterNote       $FA
0009795B 01                         	dc.b	$01
0009795C E1FC                       	smpsAlterNote       $FC
0009795E 01                         	dc.b	$01
0009795F E1FD                       	smpsAlterNote       $FD
00097961 ECF5                       	smpsPSGAlterVol     $F5
00097963 9206                       	dc.b	nF1, $06
00097965 EC04                       	smpsPSGAlterVol     $04
00097967 E701                       	dc.b	smpsNoAttack, $01
00097969 EC07                       	smpsPSGAlterVol     $07
0009796B 8003                       	dc.b	nRst, $03
0009796D ECF5                       	smpsPSGAlterVol     $F5
0009796F 9206                       	dc.b	nF1, $06
00097971 EC04                       	smpsPSGAlterVol     $04
00097973 E701                       	dc.b	smpsNoAttack, $01
00097975 EC07                       	smpsPSGAlterVol     $07
00097977 8006                       	dc.b	nRst, $06
00097979 E100                       	smpsAlterNote       $00
0009797B 01                         	dc.b	$01
0009797C E104                       	smpsAlterNote       $04
0009797E 01                         	dc.b	$01
0009797F E100                       	smpsAlterNote       $00
00097981 01                         	dc.b	$01
00097982 E1FB                       	smpsAlterNote       $FB
00097984 01                         	dc.b	$01
00097985 E1FD                       	smpsAlterNote       $FD
00097987 ECF5                       	smpsPSGAlterVol     $F5
00097989 9406                       	dc.b	nG1, $06
0009798B EC04                       	smpsPSGAlterVol     $04
0009798D E701                       	dc.b	smpsNoAttack, $01
0009798F EC07                       	smpsPSGAlterVol     $07
00097991 8003                       	dc.b	nRst, $03
00097993 ECF5                       	smpsPSGAlterVol     $F5
00097995 9407                       	dc.b	nG1, $07
00097997 EC0B                       	smpsPSGAlterVol     $0B
00097999 8006                       	dc.b	nRst, $06
0009799B E100                       	smpsAlterNote       $00
0009799D 01                         	dc.b	$01
0009799E E103                       	smpsAlterNote       $03
000979A0 0101                       	dc.b	$01, $01
000979A2 E1FD                       	smpsAlterNote       $FD
000979A4 01                         	dc.b	$01
000979A5 ECF5                       	smpsPSGAlterVol     $F5
000979A7 9207                       	dc.b	nF1, $07
000979A9 EC0B                       	smpsPSGAlterVol     $0B
000979AB 8004                       	dc.b	nRst, $04
000979AD ECF5                       	smpsPSGAlterVol     $F5
000979AF 9206                       	dc.b	nF1, $06
000979B1 EC04                       	smpsPSGAlterVol     $04
000979B3 E701                       	dc.b	smpsNoAttack, $01
000979B5 EC07                       	smpsPSGAlterVol     $07
000979B7 8006                       	dc.b	nRst, $06
000979B9 E103                       	smpsAlterNote       $03
000979BB 01                         	dc.b	$01
000979BC E104                       	smpsAlterNote       $04
000979BE 01                         	dc.b	$01
000979BF E100                       	smpsAlterNote       $00
000979C1 01                         	dc.b	$01
000979C2 E1FA                       	smpsAlterNote       $FA
000979C4 01                         	dc.b	$01
000979C5 E1FD                       	smpsAlterNote       $FD
000979C7 ECF5                       	smpsPSGAlterVol     $F5
000979C9 9206                       	dc.b	nF1, $06
000979CB EC04                       	smpsPSGAlterVol     $04
000979CD E701                       	dc.b	smpsNoAttack, $01
000979CF EC07                       	smpsPSGAlterVol     $07
000979D1 8003                       	dc.b	nRst, $03
000979D3 ECF5                       	smpsPSGAlterVol     $F5
000979D5 9106                       	dc.b	nE1, $06
000979D7 EC04                       	smpsPSGAlterVol     $04
000979D9 E701                       	dc.b	smpsNoAttack, $01
000979DB EC07                       	smpsPSGAlterVol     $07
000979DD 8006                       	dc.b	nRst, $06
000979DF E100                       	smpsAlterNote       $00
000979E1 01                         	dc.b	$01
000979E2 E104                       	smpsAlterNote       $04
000979E4 01                         	dc.b	$01
000979E5 E100                       	smpsAlterNote       $00
000979E7 01                         	dc.b	$01
000979E8 E1FD                       	smpsAlterNote       $FD
000979EA 01                         	dc.b	$01
000979EB ECF5                       	smpsPSGAlterVol     $F5
000979ED 9206                       	dc.b	nF1, $06
000979EF EC04                       	smpsPSGAlterVol     $04
000979F1 E701                       	dc.b	smpsNoAttack, $01
000979F3 EC07                       	smpsPSGAlterVol     $07
000979F5 8003                       	dc.b	nRst, $03
000979F7 ECF5                       	smpsPSGAlterVol     $F5
000979F9 9207                       	dc.b	nF1, $07
000979FB EC0B                       	smpsPSGAlterVol     $0B
000979FD 8007                       	dc.b	nRst, $07
000979FF E103                       	smpsAlterNote       $03
00097A01 0101                       	dc.b	$01, $01
00097A03 E1FD                       	smpsAlterNote       $FD
00097A05 01                         	dc.b	$01
00097A06 E1FB                       	smpsAlterNote       $FB
00097A08 01                         	dc.b	$01
00097A09 E1FD                       	smpsAlterNote       $FD
00097A0B ECF5                       	smpsPSGAlterVol     $F5
00097A0D 9406                       	dc.b	nG1, $06
00097A0F EC0B                       	smpsPSGAlterVol     $0B
00097A11 8004                       	dc.b	nRst, $04
00097A13 ECF5                       	smpsPSGAlterVol     $F5
00097A15 9406                       	dc.b	nG1, $06
00097A17 EC04                       	smpsPSGAlterVol     $04
00097A19 E701                       	dc.b	smpsNoAttack, $01
00097A1B EC07                       	smpsPSGAlterVol     $07
00097A1D 8006                       	dc.b	nRst, $06
00097A1F E100                       	smpsAlterNote       $00
00097A21 01                         	dc.b	$01
00097A22 E104                       	smpsAlterNote       $04
00097A24 01                         	dc.b	$01
00097A25 E100                       	smpsAlterNote       $00
00097A27 01                         	dc.b	$01
00097A28 E1F9                       	smpsAlterNote       $F9
00097A2A 01                         	dc.b	$01
00097A2B E1FD                       	smpsAlterNote       $FD
00097A2D ECF5                       	smpsPSGAlterVol     $F5
00097A2F 9206                       	dc.b	nF1, $06
00097A31 EC04                       	smpsPSGAlterVol     $04
00097A33 E701                       	dc.b	smpsNoAttack, $01
00097A35 EC07                       	smpsPSGAlterVol     $07
00097A37 8003                       	dc.b	nRst, $03
00097A39 ECF5                       	smpsPSGAlterVol     $F5
00097A3B 9207                       	dc.b	nF1, $07
00097A3D EC0B                       	smpsPSGAlterVol     $0B
00097A3F 8006                       	dc.b	nRst, $06
00097A41 E100                       	smpsAlterNote       $00
00097A43 01                         	dc.b	$01
00097A44 E104                       	smpsAlterNote       $04
00097A46 01                         	dc.b	$01
00097A47 E103                       	smpsAlterNote       $03
00097A49 01                         	dc.b	$01
00097A4A E1FD                       	smpsAlterNote       $FD
00097A4C 01                         	dc.b	$01
00097A4D ECF5                       	smpsPSGAlterVol     $F5
00097A4F 9207                       	dc.b	nF1, $07
00097A51 EC0B                       	smpsPSGAlterVol     $0B
00097A53 8004                       	dc.b	nRst, $04
00097A55 ECF5                       	smpsPSGAlterVol     $F5
00097A57 9206                       	dc.b	nF1, $06
00097A59 EC0B                       	smpsPSGAlterVol     $0B
00097A5B 8007                       	dc.b	nRst, $07
00097A5D E103                       	smpsAlterNote       $03
00097A5F 0101                       	dc.b	$01, $01
00097A61 E100                       	smpsAlterNote       $00
00097A63 01                         	dc.b	$01
00097A64 E1FA                       	smpsAlterNote       $FA
00097A66 01                         	dc.b	$01
00097A67 E1FD                       	smpsAlterNote       $FD
00097A69 ECF5                       	smpsPSGAlterVol     $F5
00097A6B 9206                       	dc.b	nF1, $06
00097A6D EC04                       	smpsPSGAlterVol     $04
00097A6F E701                       	dc.b	smpsNoAttack, $01
00097A71 EC07                       	smpsPSGAlterVol     $07
00097A73 8003                       	dc.b	nRst, $03
00097A75 ECF5                       	smpsPSGAlterVol     $F5
00097A77 9206                       	dc.b	nF1, $06
00097A79 EC04                       	smpsPSGAlterVol     $04
00097A7B E701                       	dc.b	smpsNoAttack, $01
00097A7D EC07                       	smpsPSGAlterVol     $07
00097A7F 8006                       	dc.b	nRst, $06
00097A81 E100                       	smpsAlterNote       $00
00097A83 01                         	dc.b	$01
00097A84 E104                       	smpsAlterNote       $04
00097A86 01                         	dc.b	$01
00097A87 E100                       	smpsAlterNote       $00
00097A89 01                         	dc.b	$01
00097A8A E1FD                       	smpsAlterNote       $FD
00097A8C 01                         	dc.b	$01
00097A8D ECF5                       	smpsPSGAlterVol     $F5
00097A8F 9206                       	dc.b	nF1, $06
00097A91 EC04                       	smpsPSGAlterVol     $04
00097A93 E701                       	dc.b	smpsNoAttack, $01
00097A95 EC07                       	smpsPSGAlterVol     $07
00097A97 8003                       	dc.b	nRst, $03
00097A99 ECF5                       	smpsPSGAlterVol     $F5
00097A9B 9207                       	dc.b	nF1, $07
00097A9D EC0B                       	smpsPSGAlterVol     $0B
00097A9F 8007                       	dc.b	nRst, $07
00097AA1 E103                       	smpsAlterNote       $03
00097AA3 0101                       	dc.b	$01, $01
00097AA5 E1FD                       	smpsAlterNote       $FD
00097AA7 01                         	dc.b	$01
00097AA8 E1FA                       	smpsAlterNote       $FA
00097AAA 01                         	dc.b	$01
00097AAB E1FD                       	smpsAlterNote       $FD
00097AAD ECF5                       	smpsPSGAlterVol     $F5
00097AAF 9206                       	dc.b	nF1, $06
00097AB1 EC0B                       	smpsPSGAlterVol     $0B
00097AB3 8004                       	dc.b	nRst, $04
00097AB5 ECF5                       	smpsPSGAlterVol     $F5
00097AB7 9206                       	dc.b	nF1, $06
00097AB9 EC04                       	smpsPSGAlterVol     $04
00097ABB E701                       	dc.b	smpsNoAttack, $01
00097ABD EC07                       	smpsPSGAlterVol     $07
00097ABF 8006                       	dc.b	nRst, $06
00097AC1 E103                       	smpsAlterNote       $03
00097AC3 01                         	dc.b	$01
00097AC4 E104                       	smpsAlterNote       $04
00097AC6 01                         	dc.b	$01
00097AC7 E100                       	smpsAlterNote       $00
00097AC9 01                         	dc.b	$01
00097ACA E1FA                       	smpsAlterNote       $FA
00097ACC 01                         	dc.b	$01
00097ACD E1FD                       	smpsAlterNote       $FD
00097ACF ECF5                       	smpsPSGAlterVol     $F5
00097AD1 9206                       	dc.b	nF1, $06
00097AD3 EC04                       	smpsPSGAlterVol     $04
00097AD5 E701                       	dc.b	smpsNoAttack, $01
00097AD7 EC07                       	smpsPSGAlterVol     $07
00097AD9 8003                       	dc.b	nRst, $03
00097ADB ECF5                       	smpsPSGAlterVol     $F5
00097ADD 9206                       	dc.b	nF1, $06
00097ADF EC04                       	smpsPSGAlterVol     $04
00097AE1 E701                       	dc.b	smpsNoAttack, $01
00097AE3 EC07                       	smpsPSGAlterVol     $07
00097AE5 8006                       	dc.b	nRst, $06
00097AE7 E100                       	smpsAlterNote       $00
00097AE9 01                         	dc.b	$01
00097AEA E104                       	smpsAlterNote       $04
00097AEC 01                         	dc.b	$01
00097AED E103                       	smpsAlterNote       $03
00097AEF 01                         	dc.b	$01
00097AF0 E1FD                       	smpsAlterNote       $FD
00097AF2 01                         	dc.b	$01
00097AF3 ECF5                       	smpsPSGAlterVol     $F5
00097AF5 9107                       	dc.b	nE1, $07
00097AF7 EC0B                       	smpsPSGAlterVol     $0B
00097AF9 8004                       	dc.b	nRst, $04
00097AFB ECF5                       	smpsPSGAlterVol     $F5
00097AFD 9106                       	dc.b	nE1, $06
00097AFF EC0B                       	smpsPSGAlterVol     $0B
00097B01 8007                       	dc.b	nRst, $07
00097B03 E103                       	smpsAlterNote       $03
00097B05 0101                       	dc.b	$01, $01
00097B07 E100                       	smpsAlterNote       $00
00097B09 01                         	dc.b	$01
00097B0A E1FA                       	smpsAlterNote       $FA
00097B0C 01                         	dc.b	$01
00097B0D E1FD                       	smpsAlterNote       $FD
00097B0F ECF5                       	smpsPSGAlterVol     $F5
00097B11 9106                       	dc.b	nE1, $06
00097B13 EC04                       	smpsPSGAlterVol     $04
00097B15 E701                       	dc.b	smpsNoAttack, $01
00097B17 EC07                       	smpsPSGAlterVol     $07
00097B19 8003                       	dc.b	nRst, $03
00097B1B ECF5                       	smpsPSGAlterVol     $F5
00097B1D 9106                       	dc.b	nE1, $06
00097B1F EC04                       	smpsPSGAlterVol     $04
00097B21 E701                       	dc.b	smpsNoAttack, $01
00097B23 EC07                       	smpsPSGAlterVol     $07
00097B25 8006                       	dc.b	nRst, $06
00097B27 E100                       	smpsAlterNote       $00
00097B29 01                         	dc.b	$01
00097B2A E104                       	smpsAlterNote       $04
00097B2C 01                         	dc.b	$01
00097B2D E100                       	smpsAlterNote       $00
00097B2F 01                         	dc.b	$01
00097B30 E1FA                       	smpsAlterNote       $FA
00097B32 01                         	dc.b	$01
00097B33 E1FD                       	smpsAlterNote       $FD
00097B35 ECF5                       	smpsPSGAlterVol     $F5
00097B37 9106                       	dc.b	nE1, $06
00097B39 EC04                       	smpsPSGAlterVol     $04
00097B3B E701                       	dc.b	smpsNoAttack, $01
00097B3D EC07                       	smpsPSGAlterVol     $07
00097B3F 8003                       	dc.b	nRst, $03
00097B41 ECF5                       	smpsPSGAlterVol     $F5
00097B43 9107 9106                  	dc.b	nE1, $07, nE1, $06
00097B47 EC04                       	smpsPSGAlterVol     $04
00097B49 E701                       	dc.b	smpsNoAttack, $01
00097B4B ECFC                       	smpsPSGAlterVol     $FC
00097B4D 9103 9103                  	dc.b	nE1, $03, nE1, $03
00097B51 EC04                       	smpsPSGAlterVol     $04
00097B53 E701                       	dc.b	smpsNoAttack, $01
00097B55 ECFC                       	smpsPSGAlterVol     $FC
00097B57 9106                       	dc.b	nE1, $06
00097B59 EC04                       	smpsPSGAlterVol     $04
00097B5B E701                       	dc.b	smpsNoAttack, $01
00097B5D EC07                       	smpsPSGAlterVol     $07
00097B5F 8006                       	dc.b	nRst, $06
00097B61 E100                       	smpsAlterNote       $00
00097B63 01                         	dc.b	$01
00097B64 E104                       	smpsAlterNote       $04
00097B66 01                         	dc.b	$01
00097B67 E100                       	smpsAlterNote       $00
00097B69 01                         	dc.b	$01
00097B6A E1FA                       	smpsAlterNote       $FA
00097B6C 01                         	dc.b	$01
00097B6D E1F9                       	smpsAlterNote       $F9
00097B6F 01                         	dc.b	$01
00097B70 E1FD                       	smpsAlterNote       $FD
00097B72 01                         	dc.b	$01
00097B73 E103                       	smpsAlterNote       $03
00097B75 01                         	dc.b	$01
00097B76 E104                       	smpsAlterNote       $04
00097B78 01                         	dc.b	$01
00097B79 E100                       	smpsAlterNote       $00
00097B7B 01                         	dc.b	$01
00097B7C E1FA                       	smpsAlterNote       $FA
00097B7E 0101                       	dc.b	$01, $01
00097B80 E1FD                       	smpsAlterNote       $FD
00097B82 ECF5                       	smpsPSGAlterVol     $F5
00097B84 9206                       	dc.b	nF1, $06
00097B86 EC04                       	smpsPSGAlterVol     $04
00097B88 E701                       	dc.b	smpsNoAttack, $01
00097B8A EC07                       	smpsPSGAlterVol     $07
00097B8C 8003                       	dc.b	nRst, $03
00097B8E ECF5                       	smpsPSGAlterVol     $F5
00097B90 9206                       	dc.b	nF1, $06
00097B92 EC04                       	smpsPSGAlterVol     $04
00097B94 E701                       	dc.b	smpsNoAttack, $01
00097B96 EC07                       	smpsPSGAlterVol     $07
00097B98 8006                       	dc.b	nRst, $06
00097B9A E100                       	smpsAlterNote       $00
00097B9C 01                         	dc.b	$01
00097B9D E104                       	smpsAlterNote       $04
00097B9F 01                         	dc.b	$01
00097BA0 E103                       	smpsAlterNote       $03
00097BA2 01                         	dc.b	$01
00097BA3 E1FD                       	smpsAlterNote       $FD
00097BA5 01                         	dc.b	$01
00097BA6 ECF5                       	smpsPSGAlterVol     $F5
00097BA8 9407                       	dc.b	nG1, $07
00097BAA EC0B                       	smpsPSGAlterVol     $0B
00097BAC 8004                       	dc.b	nRst, $04
00097BAE ECF5                       	smpsPSGAlterVol     $F5
00097BB0 9406                       	dc.b	nG1, $06
00097BB2 EC0B                       	smpsPSGAlterVol     $0B
00097BB4 8007                       	dc.b	nRst, $07
00097BB6 E103                       	smpsAlterNote       $03
00097BB8 0101                       	dc.b	$01, $01
00097BBA E1FD                       	smpsAlterNote       $FD
00097BBC 01                         	dc.b	$01
00097BBD E1F9                       	smpsAlterNote       $F9
00097BBF 01                         	dc.b	$01
00097BC0 E1FD                       	smpsAlterNote       $FD
00097BC2 ECF5                       	smpsPSGAlterVol     $F5
00097BC4 9206                       	dc.b	nF1, $06
00097BC6 EC04                       	smpsPSGAlterVol     $04
00097BC8 E701                       	dc.b	smpsNoAttack, $01
00097BCA EC07                       	smpsPSGAlterVol     $07
00097BCC 8003                       	dc.b	nRst, $03
00097BCE ECF5                       	smpsPSGAlterVol     $F5
00097BD0 9206                       	dc.b	nF1, $06
00097BD2 EC04                       	smpsPSGAlterVol     $04
00097BD4 E701                       	dc.b	smpsNoAttack, $01
00097BD6 EC07                       	smpsPSGAlterVol     $07
00097BD8 8006                       	dc.b	nRst, $06
00097BDA E100                       	smpsAlterNote       $00
00097BDC 01                         	dc.b	$01
00097BDD E104                       	smpsAlterNote       $04
00097BDF 01                         	dc.b	$01
00097BE0 E100                       	smpsAlterNote       $00
00097BE2 01                         	dc.b	$01
00097BE3 E1FA                       	smpsAlterNote       $FA
00097BE5 01                         	dc.b	$01
00097BE6 E1FD                       	smpsAlterNote       $FD
00097BE8 ECF5                       	smpsPSGAlterVol     $F5
00097BEA 9206                       	dc.b	nF1, $06
00097BEC EC04                       	smpsPSGAlterVol     $04
00097BEE E701                       	dc.b	smpsNoAttack, $01
00097BF0 EC07                       	smpsPSGAlterVol     $07
00097BF2 8003                       	dc.b	nRst, $03
00097BF4 ECF5                       	smpsPSGAlterVol     $F5
00097BF6 9107                       	dc.b	nE1, $07
00097BF8 EC0B                       	smpsPSGAlterVol     $0B
00097BFA 8006                       	dc.b	nRst, $06
00097BFC E100                       	smpsAlterNote       $00
00097BFE 01                         	dc.b	$01
00097BFF E103                       	smpsAlterNote       $03
00097C01 0101                       	dc.b	$01, $01
00097C03 E1FD                       	smpsAlterNote       $FD
00097C05 01                         	dc.b	$01
00097C06 ECF5                       	smpsPSGAlterVol     $F5
00097C08 9207                       	dc.b	nF1, $07
00097C0A EC0B                       	smpsPSGAlterVol     $0B
00097C0C 8004                       	dc.b	nRst, $04
00097C0E ECF5                       	smpsPSGAlterVol     $F5
00097C10 9206                       	dc.b	nF1, $06
00097C12 EC04                       	smpsPSGAlterVol     $04
00097C14 E701                       	dc.b	smpsNoAttack, $01
00097C16 EC07                       	smpsPSGAlterVol     $07
00097C18 8006                       	dc.b	nRst, $06
00097C1A E103                       	smpsAlterNote       $03
00097C1C 01                         	dc.b	$01
00097C1D E104                       	smpsAlterNote       $04
00097C1F 01                         	dc.b	$01
00097C20 E100                       	smpsAlterNote       $00
00097C22 01                         	dc.b	$01
00097C23 E1FB                       	smpsAlterNote       $FB
00097C25 01                         	dc.b	$01
00097C26 E1FD                       	smpsAlterNote       $FD
00097C28 ECF5                       	smpsPSGAlterVol     $F5
00097C2A 9406                       	dc.b	nG1, $06
00097C2C EC04                       	smpsPSGAlterVol     $04
00097C2E E701                       	dc.b	smpsNoAttack, $01
00097C30 EC07                       	smpsPSGAlterVol     $07
00097C32 8003                       	dc.b	nRst, $03
00097C34 ECF5                       	smpsPSGAlterVol     $F5
00097C36 9406                       	dc.b	nG1, $06
00097C38 EC04                       	smpsPSGAlterVol     $04
00097C3A E701                       	dc.b	smpsNoAttack, $01
00097C3C EC07                       	smpsPSGAlterVol     $07
00097C3E 8006                       	dc.b	nRst, $06
00097C40 E100                       	smpsAlterNote       $00
00097C42 01                         	dc.b	$01
00097C43 E104                       	smpsAlterNote       $04
00097C45 01                         	dc.b	$01
00097C46 E100                       	smpsAlterNote       $00
00097C48 01                         	dc.b	$01
00097C49 E1FD                       	smpsAlterNote       $FD
00097C4B 01                         	dc.b	$01
00097C4C ECF5                       	smpsPSGAlterVol     $F5
00097C4E 9206                       	dc.b	nF1, $06
00097C50 EC04                       	smpsPSGAlterVol     $04
00097C52 E701                       	dc.b	smpsNoAttack, $01
00097C54 EC07                       	smpsPSGAlterVol     $07
00097C56 8003                       	dc.b	nRst, $03
00097C58 ECF5                       	smpsPSGAlterVol     $F5
00097C5A 9207                       	dc.b	nF1, $07
00097C5C EC0B                       	smpsPSGAlterVol     $0B
00097C5E 8007                       	dc.b	nRst, $07
00097C60 E103                       	smpsAlterNote       $03
00097C62 0101                       	dc.b	$01, $01
00097C64 E1FD                       	smpsAlterNote       $FD
00097C66 01                         	dc.b	$01
00097C67 E1FA                       	smpsAlterNote       $FA
00097C69 01                         	dc.b	$01
00097C6A E1FD                       	smpsAlterNote       $FD
00097C6C ECF5                       	smpsPSGAlterVol     $F5
00097C6E 9206                       	dc.b	nF1, $06
00097C70 EC0B                       	smpsPSGAlterVol     $0B
00097C72 8004                       	dc.b	nRst, $04
00097C74 ECF5                       	smpsPSGAlterVol     $F5
00097C76 9206                       	dc.b	nF1, $06
00097C78 EC04                       	smpsPSGAlterVol     $04
00097C7A E701                       	dc.b	smpsNoAttack, $01
00097C7C EC07                       	smpsPSGAlterVol     $07
00097C7E 8006                       	dc.b	nRst, $06
00097C80 E100                       	smpsAlterNote       $00
00097C82 01                         	dc.b	$01
00097C83 E104                       	smpsAlterNote       $04
00097C85 01                         	dc.b	$01
00097C86 E100                       	smpsAlterNote       $00
00097C88 01                         	dc.b	$01
00097C89 E1FA                       	smpsAlterNote       $FA
00097C8B 01                         	dc.b	$01
00097C8C E1FD                       	smpsAlterNote       $FD
00097C8E ECF5                       	smpsPSGAlterVol     $F5
00097C90 9206                       	dc.b	nF1, $06
00097C92 EC04                       	smpsPSGAlterVol     $04
00097C94 E704                       	dc.b	smpsNoAttack, $04
00097C96 ECFC                       	smpsPSGAlterVol     $FC
00097C98 9207                       	dc.b	nF1, $07
00097C9A EC0B                       	smpsPSGAlterVol     $0B
00097C9C 8006                       	dc.b	nRst, $06
00097C9E E100                       	smpsAlterNote       $00
00097CA0 01                         	dc.b	$01
00097CA1 E104                       	smpsAlterNote       $04
00097CA3 01                         	dc.b	$01
00097CA4 E103                       	smpsAlterNote       $03
00097CA6 01                         	dc.b	$01
00097CA7 E1FD                       	smpsAlterNote       $FD
00097CA9 01                         	dc.b	$01
00097CAA ECF5                       	smpsPSGAlterVol     $F5
00097CAC 9207                       	dc.b	nF1, $07
00097CAE EC0B                       	smpsPSGAlterVol     $0B
00097CB0 8004                       	dc.b	nRst, $04
00097CB2 ECF5                       	smpsPSGAlterVol     $F5
00097CB4 9206                       	dc.b	nF1, $06
00097CB6 EC0B                       	smpsPSGAlterVol     $0B
00097CB8 8007                       	dc.b	nRst, $07
00097CBA E103                       	smpsAlterNote       $03
00097CBC 0101                       	dc.b	$01, $01
00097CBE E100                       	smpsAlterNote       $00
00097CC0 01                         	dc.b	$01
00097CC1 E1FA                       	smpsAlterNote       $FA
00097CC3 01                         	dc.b	$01
00097CC4 E1FD                       	smpsAlterNote       $FD
00097CC6 ECF5                       	smpsPSGAlterVol     $F5
00097CC8 9206                       	dc.b	nF1, $06
00097CCA EC04                       	smpsPSGAlterVol     $04
00097CCC E704                       	dc.b	smpsNoAttack, $04
00097CCE ECFC                       	smpsPSGAlterVol     $FC
00097CD0 9206                       	dc.b	nF1, $06
00097CD2 EC04                       	smpsPSGAlterVol     $04
00097CD4 E701                       	dc.b	smpsNoAttack, $01
00097CD6 EC07                       	smpsPSGAlterVol     $07
00097CD8 8006                       	dc.b	nRst, $06
00097CDA E100                       	smpsAlterNote       $00
00097CDC 01                         	dc.b	$01
00097CDD E104                       	smpsAlterNote       $04
00097CDF 01                         	dc.b	$01
00097CE0 E100                       	smpsAlterNote       $00
00097CE2 01                         	dc.b	$01
00097CE3 E1FD                       	smpsAlterNote       $FD
00097CE5 01                         	dc.b	$01
00097CE6 ECF5                       	smpsPSGAlterVol     $F5
00097CE8 9206                       	dc.b	nF1, $06
00097CEA EC04                       	smpsPSGAlterVol     $04
00097CEC E701                       	dc.b	smpsNoAttack, $01
00097CEE EC07                       	smpsPSGAlterVol     $07
00097CF0 8003                       	dc.b	nRst, $03
00097CF2 ECF5                       	smpsPSGAlterVol     $F5
00097CF4 9207                       	dc.b	nF1, $07
00097CF6 EC0B                       	smpsPSGAlterVol     $0B
00097CF8 8007                       	dc.b	nRst, $07
00097CFA E103                       	smpsAlterNote       $03
00097CFC 0101                       	dc.b	$01, $01
00097CFE E1FD                       	smpsAlterNote       $FD
00097D00 01                         	dc.b	$01
00097D01 E1FA                       	smpsAlterNote       $FA
00097D03 01                         	dc.b	$01
00097D04 E1FD                       	smpsAlterNote       $FD
00097D06 ECF5                       	smpsPSGAlterVol     $F5
00097D08 9106                       	dc.b	nE1, $06
00097D0A EC0B                       	smpsPSGAlterVol     $0B
00097D0C 8004                       	dc.b	nRst, $04
00097D0E ECF5                       	smpsPSGAlterVol     $F5
00097D10 9106                       	dc.b	nE1, $06
00097D12 EC04                       	smpsPSGAlterVol     $04
00097D14 E701                       	dc.b	smpsNoAttack, $01
00097D16 EC07                       	smpsPSGAlterVol     $07
00097D18 8006                       	dc.b	nRst, $06
00097D1A E100                       	smpsAlterNote       $00
00097D1C 01                         	dc.b	$01
00097D1D E104                       	smpsAlterNote       $04
00097D1F 01                         	dc.b	$01
00097D20 E100                       	smpsAlterNote       $00
00097D22 01                         	dc.b	$01
00097D23 E1FA                       	smpsAlterNote       $FA
00097D25 01                         	dc.b	$01
00097D26 E1FD                       	smpsAlterNote       $FD
00097D28 ECF5                       	smpsPSGAlterVol     $F5
00097D2A 9106                       	dc.b	nE1, $06
00097D2C EC04                       	smpsPSGAlterVol     $04
00097D2E E701                       	dc.b	smpsNoAttack, $01
00097D30 EC07                       	smpsPSGAlterVol     $07
00097D32 8003                       	dc.b	nRst, $03
00097D34 ECF5                       	smpsPSGAlterVol     $F5
00097D36 9106                       	dc.b	nE1, $06
00097D38 EC04                       	smpsPSGAlterVol     $04
00097D3A E701                       	dc.b	smpsNoAttack, $01
00097D3C EC07                       	smpsPSGAlterVol     $07
00097D3E 8006                       	dc.b	nRst, $06
00097D40 E100                       	smpsAlterNote       $00
00097D42 01                         	dc.b	$01
00097D43 E104                       	smpsAlterNote       $04
00097D45 01                         	dc.b	$01
00097D46 E103                       	smpsAlterNote       $03
00097D48 01                         	dc.b	$01
00097D49 E1FD                       	smpsAlterNote       $FD
00097D4B 01                         	dc.b	$01
00097D4C ECF5                       	smpsPSGAlterVol     $F5
00097D4E 9107                       	dc.b	nE1, $07
00097D50 EC0B                       	smpsPSGAlterVol     $0B
00097D52 8004                       	dc.b	nRst, $04
00097D54 ECF5                       	smpsPSGAlterVol     $F5
00097D56 9106                       	dc.b	nE1, $06
00097D58 EC0B                       	smpsPSGAlterVol     $0B
00097D5A 8007                       	dc.b	nRst, $07
00097D5C E103                       	smpsAlterNote       $03
00097D5E 0101                       	dc.b	$01, $01
00097D60 E100                       	smpsAlterNote       $00
00097D62 01                         	dc.b	$01
00097D63 E1FA                       	smpsAlterNote       $FA
00097D65 01                         	dc.b	$01
00097D66 E1FD                       	smpsAlterNote       $FD
00097D68 ECF5                       	smpsPSGAlterVol     $F5
00097D6A 9106                       	dc.b	nE1, $06
00097D6C EC04                       	smpsPSGAlterVol     $04
00097D6E E701                       	dc.b	smpsNoAttack, $01
00097D70 EC07                       	smpsPSGAlterVol     $07
00097D72 8003                       	dc.b	nRst, $03
00097D74 ECF5                       	smpsPSGAlterVol     $F5
00097D76 9106                       	dc.b	nE1, $06
00097D78 EC04                       	smpsPSGAlterVol     $04
00097D7A E701                       	dc.b	smpsNoAttack, $01
00097D7C EC07                       	smpsPSGAlterVol     $07
00097D7E 8003                       	dc.b	nRst, $03
00097D80 ECF5                       	smpsPSGAlterVol     $F5
00097D82 9207                       	dc.b	nF1, $07
00097D84 EC0B                       	smpsPSGAlterVol     $0B
00097D86 8006                       	dc.b	nRst, $06
00097D88 E100                       	smpsAlterNote       $00
00097D8A 01                         	dc.b	$01
00097D8B E104                       	smpsAlterNote       $04
00097D8D 01                         	dc.b	$01
00097D8E E103                       	smpsAlterNote       $03
00097D90 01                         	dc.b	$01
00097D91 E1FD                       	smpsAlterNote       $FD
00097D93 01                         	dc.b	$01
00097D94 E1F9                       	smpsAlterNote       $F9
00097D96 01                         	dc.b	$01
00097D97 E1FD                       	smpsAlterNote       $FD
00097D99 01                         	dc.b	$01
00097D9A E100                       	smpsAlterNote       $00
00097D9C 01                         	dc.b	$01
00097D9D E104                       	smpsAlterNote       $04
00097D9F 01                         	dc.b	$01
00097DA0 E1FD                       	smpsAlterNote       $FD
00097DA2 ECF5                       	smpsPSGAlterVol     $F5
00097DA4 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097DA8 EC04                       	smpsPSGAlterVol     $04
00097DAA E701                       	dc.b	smpsNoAttack, $01
00097DAC EC07                       	smpsPSGAlterVol     $07
00097DAE 8009                       	dc.b	nRst, $09
00097DB0 E100                       	smpsAlterNote       $00
00097DB2 01                         	dc.b	$01
00097DB3 E104                       	smpsAlterNote       $04
00097DB5 01                         	dc.b	$01
00097DB6 E103                       	smpsAlterNote       $03
00097DB8 01                         	dc.b	$01
00097DB9 E1FD                       	smpsAlterNote       $FD
00097DBB 01                         	dc.b	$01
00097DBC E1F9                       	smpsAlterNote       $F9
00097DBE 01                         	dc.b	$01
00097DBF E1FD                       	smpsAlterNote       $FD
00097DC1 01                         	dc.b	$01
00097DC2 E100                       	smpsAlterNote       $00
00097DC4 01                         	dc.b	$01
00097DC5 E104                       	smpsAlterNote       $04
00097DC7 01                         	dc.b	$01
00097DC8 E100                       	smpsAlterNote       $00
00097DCA 01                         	dc.b	$01
00097DCB E1FA                       	smpsAlterNote       $FA
00097DCD 01                         	dc.b	$01
00097DCE E1F9                       	smpsAlterNote       $F9
00097DD0 01                         	dc.b	$01
00097DD1 E1FD                       	smpsAlterNote       $FD
00097DD3 01                         	dc.b	$01
00097DD4 E103                       	smpsAlterNote       $03
00097DD6 0101                       	dc.b	$01, $01
00097DD8 E100                       	smpsAlterNote       $00
00097DDA 01                         	dc.b	$01
00097DDB E1FD                       	smpsAlterNote       $FD
00097DDD ECF5                       	smpsPSGAlterVol     $F5
00097DDF 9202                       	dc.b	nF1, $02
00097DE1 EC04                       	smpsPSGAlterVol     $04
00097DE3 E701                       	dc.b	smpsNoAttack, $01
00097DE5 ECFC                       	smpsPSGAlterVol     $FC
00097DE7 9106                       	dc.b	nE1, $06
00097DE9 EC04                       	smpsPSGAlterVol     $04
00097DEB E701                       	dc.b	smpsNoAttack, $01
00097DED EC07                       	smpsPSGAlterVol     $07
00097DEF 8006                       	dc.b	nRst, $06
00097DF1 E100                       	smpsAlterNote       $00
00097DF3 01                         	dc.b	$01
00097DF4 E104                       	smpsAlterNote       $04
00097DF6 01                         	dc.b	$01
00097DF7 E100                       	smpsAlterNote       $00
00097DF9 01                         	dc.b	$01
00097DFA E1FD                       	smpsAlterNote       $FD
00097DFC 01                         	dc.b	$01
00097DFD E1F9                       	smpsAlterNote       $F9
00097DFF 01                         	dc.b	$01
00097E00 E1FD                       	smpsAlterNote       $FD
00097E02 01                         	dc.b	$01
00097E03 E103                       	smpsAlterNote       $03
00097E05 01                         	dc.b	$01
00097E06 E104                       	smpsAlterNote       $04
00097E08 01                         	dc.b	$01
00097E09 E1FD                       	smpsAlterNote       $FD
00097E0B ECF5                       	smpsPSGAlterVol     $F5
00097E0D 9102                       	dc.b	nE1, $02
00097E0F EC04                       	smpsPSGAlterVol     $04
00097E11 E701                       	dc.b	smpsNoAttack, $01
00097E13 ECFC                       	smpsPSGAlterVol     $FC
00097E15 920D                       	dc.b	nF1, $0D
00097E17 E100                       	smpsAlterNote       $00
00097E19 E701                       	dc.b	smpsNoAttack, $01
00097E1B E104                       	smpsAlterNote       $04
00097E1D E701                       	dc.b	smpsNoAttack, $01
00097E1F E100                       	smpsAlterNote       $00
00097E21 E701                       	dc.b	smpsNoAttack, $01
00097E23 E1FD                       	smpsAlterNote       $FD
00097E25 E701                       	dc.b	smpsNoAttack, $01
00097E27 E1F9                       	smpsAlterNote       $F9
00097E29 E701                       	dc.b	smpsNoAttack, $01
00097E2B E1FD                       	smpsAlterNote       $FD
00097E2D E701                       	dc.b	smpsNoAttack, $01
00097E2F E103                       	smpsAlterNote       $03
00097E31 E701                       	dc.b	smpsNoAttack, $01
00097E33 E104                       	smpsAlterNote       $04
00097E35 E701                       	dc.b	smpsNoAttack, $01
00097E37 E100                       	smpsAlterNote       $00
00097E39 E701                       	dc.b	smpsNoAttack, $01
00097E3B E1FA                       	smpsAlterNote       $FA
00097E3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E41 E1FD                       	smpsAlterNote       $FD
00097E43 E701                       	dc.b	smpsNoAttack, $01
00097E45 E103                       	smpsAlterNote       $03
00097E47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097E4B E1FD                       	smpsAlterNote       $FD
00097E4D E701                       	dc.b	smpsNoAttack, $01
00097E4F E1F9                       	smpsAlterNote       $F9
00097E51 E701                       	dc.b	smpsNoAttack, $01
00097E53 E1FA                       	smpsAlterNote       $FA
00097E55 E701                       	dc.b	smpsNoAttack, $01
00097E57 E100                       	smpsAlterNote       $00
00097E59 EC04                       	smpsPSGAlterVol     $04
00097E5B E701                       	dc.b	smpsNoAttack, $01
00097E5D EC07                       	smpsPSGAlterVol     $07
00097E5F E104                       	smpsAlterNote       $04
00097E61 8001                       	dc.b	nRst, $01
00097E63 E100                       	smpsAlterNote       $00
00097E65 01                         	dc.b	$01
00097E66 E1FD                       	smpsAlterNote       $FD
00097E68 01                         	dc.b	$01
00097E69 E1F9                       	smpsAlterNote       $F9
00097E6B 01                         	dc.b	$01
00097E6C E1FD                       	smpsAlterNote       $FD
00097E6E 01                         	dc.b	$01
00097E6F E103                       	smpsAlterNote       $03
00097E71 01                         	dc.b	$01
00097E72 E104                       	smpsAlterNote       $04
00097E74 01                         	dc.b	$01
00097E75 E1FD                       	smpsAlterNote       $FD
00097E77 ECF5                       	smpsPSGAlterVol     $F5
00097E79 9106                       	dc.b	nE1, $06
00097E7B EC04                       	smpsPSGAlterVol     $04
00097E7D E701                       	dc.b	smpsNoAttack, $01
00097E7F EC07                       	smpsPSGAlterVol     $07
00097E81 8003                       	dc.b	nRst, $03
00097E83 ECF5                       	smpsPSGAlterVol     $F5
00097E85 9106                       	dc.b	nE1, $06
00097E87 EC04                       	smpsPSGAlterVol     $04
00097E89 E701                       	dc.b	smpsNoAttack, $01
00097E8B EC07                       	smpsPSGAlterVol     $07
00097E8D 8006                       	dc.b	nRst, $06
00097E8F E100                       	smpsAlterNote       $00
00097E91 01                         	dc.b	$01
00097E92 E104                       	smpsAlterNote       $04
00097E94 01                         	dc.b	$01
00097E95 E100                       	smpsAlterNote       $00
00097E97 01                         	dc.b	$01
00097E98 E1FA                       	smpsAlterNote       $FA
00097E9A 01                         	dc.b	$01
00097E9B E1FD                       	smpsAlterNote       $FD
00097E9D ECF5                       	smpsPSGAlterVol     $F5
00097E9F 9206                       	dc.b	nF1, $06
00097EA1 EC04                       	smpsPSGAlterVol     $04
00097EA3 E701                       	dc.b	smpsNoAttack, $01
00097EA5 EC07                       	smpsPSGAlterVol     $07
00097EA7 8003                       	dc.b	nRst, $03
00097EA9 ECF5                       	smpsPSGAlterVol     $F5
00097EAB 9207                       	dc.b	nF1, $07
00097EAD EC0B                       	smpsPSGAlterVol     $0B
00097EAF 8006                       	dc.b	nRst, $06
00097EB1 E100                       	smpsAlterNote       $00
00097EB3 01                         	dc.b	$01
00097EB4 E103                       	smpsAlterNote       $03
00097EB6 0101                       	dc.b	$01, $01
00097EB8 E1FD                       	smpsAlterNote       $FD
00097EBA 01                         	dc.b	$01
00097EBB ECF5                       	smpsPSGAlterVol     $F5
00097EBD 9107                       	dc.b	nE1, $07
00097EBF EC0B                       	smpsPSGAlterVol     $0B
00097EC1 8004                       	dc.b	nRst, $04
00097EC3 ECF5                       	smpsPSGAlterVol     $F5
00097EC5 9106                       	dc.b	nE1, $06
00097EC7 EC04                       	smpsPSGAlterVol     $04
00097EC9 E701                       	dc.b	smpsNoAttack, $01
00097ECB EC07                       	smpsPSGAlterVol     $07
00097ECD 8006                       	dc.b	nRst, $06
00097ECF E103                       	smpsAlterNote       $03
00097ED1 01                         	dc.b	$01
00097ED2 E104                       	smpsAlterNote       $04
00097ED4 01                         	dc.b	$01
00097ED5 E100                       	smpsAlterNote       $00
00097ED7 01                         	dc.b	$01
00097ED8 E1FA                       	smpsAlterNote       $FA
00097EDA 01                         	dc.b	$01
00097EDB E1FD                       	smpsAlterNote       $FD
00097EDD ECF5                       	smpsPSGAlterVol     $F5
00097EDF 9106                       	dc.b	nE1, $06
00097EE1 EC04                       	smpsPSGAlterVol     $04
00097EE3 E701                       	dc.b	smpsNoAttack, $01
00097EE5 EC07                       	smpsPSGAlterVol     $07
00097EE7 8003                       	dc.b	nRst, $03
00097EE9 ECF5                       	smpsPSGAlterVol     $F5
00097EEB 9106                       	dc.b	nE1, $06
00097EED EC04                       	smpsPSGAlterVol     $04
00097EEF E701                       	dc.b	smpsNoAttack, $01
00097EF1 EC07                       	smpsPSGAlterVol     $07
00097EF3 8003                       	dc.b	nRst, $03
00097EF5 ECF5                       	smpsPSGAlterVol     $F5
00097EF7 9207                       	dc.b	nF1, $07
00097EF9 EC0B                       	smpsPSGAlterVol     $0B
00097EFB 8006                       	dc.b	nRst, $06
00097EFD E100                       	smpsAlterNote       $00
00097EFF 01                         	dc.b	$01
00097F00 E103                       	smpsAlterNote       $03
00097F02 0101                       	dc.b	$01, $01
00097F04 E1FD                       	smpsAlterNote       $FD
00097F06 01                         	dc.b	$01
00097F07 E1F9                       	smpsAlterNote       $F9
00097F09 01                         	dc.b	$01
00097F0A E1FA                       	smpsAlterNote       $FA
00097F0C 01                         	dc.b	$01
00097F0D E100                       	smpsAlterNote       $00
00097F0F 01                         	dc.b	$01
00097F10 E104                       	smpsAlterNote       $04
00097F12 01                         	dc.b	$01
00097F13 E1FD                       	smpsAlterNote       $FD
00097F15 ECF5                       	smpsPSGAlterVol     $F5
00097F17 9203 9203                  	dc.b	nF1, $03, nF1, $03
00097F1B EC04                       	smpsPSGAlterVol     $04
00097F1D E701                       	dc.b	smpsNoAttack, $01
00097F1F EC07                       	smpsPSGAlterVol     $07
00097F21 8009                       	dc.b	nRst, $09
00097F23 E100                       	smpsAlterNote       $00
00097F25 01                         	dc.b	$01
00097F26 E103                       	smpsAlterNote       $03
00097F28 0101                       	dc.b	$01, $01
00097F2A E1FD                       	smpsAlterNote       $FD
00097F2C 01                         	dc.b	$01
00097F2D E1F9                       	smpsAlterNote       $F9
00097F2F 01                         	dc.b	$01
00097F30 E1FA                       	smpsAlterNote       $FA
00097F32 01                         	dc.b	$01
00097F33 E100                       	smpsAlterNote       $00
00097F35 01                         	dc.b	$01
00097F36 E104                       	smpsAlterNote       $04
00097F38 01                         	dc.b	$01
00097F39 E100                       	smpsAlterNote       $00
00097F3B 01                         	dc.b	$01
00097F3C E1FD                       	smpsAlterNote       $FD
00097F3E 01                         	dc.b	$01
00097F3F E1F9                       	smpsAlterNote       $F9
00097F41 01                         	dc.b	$01
00097F42 E1FD                       	smpsAlterNote       $FD
00097F44 01                         	dc.b	$01
00097F45 E103                       	smpsAlterNote       $03
00097F47 01                         	dc.b	$01
00097F48 E104                       	smpsAlterNote       $04
00097F4A 01                         	dc.b	$01
00097F4B E100                       	smpsAlterNote       $00
00097F4D 01                         	dc.b	$01
00097F4E E1FD                       	smpsAlterNote       $FD
00097F50 ECF5                       	smpsPSGAlterVol     $F5
00097F52 9203 9106                  	dc.b	nF1, $03, nE1, $06
00097F56 EC04                       	smpsPSGAlterVol     $04
00097F58 E701                       	dc.b	smpsNoAttack, $01
00097F5A EC07                       	smpsPSGAlterVol     $07
00097F5C 8006                       	dc.b	nRst, $06
00097F5E E100                       	smpsAlterNote       $00
00097F60 01                         	dc.b	$01
00097F61 E104                       	smpsAlterNote       $04
00097F63 01                         	dc.b	$01
00097F64 E103                       	smpsAlterNote       $03
00097F66 01                         	dc.b	$01
00097F67 E1FD                       	smpsAlterNote       $FD
00097F69 01                         	dc.b	$01
00097F6A E1F9                       	smpsAlterNote       $F9
00097F6C 01                         	dc.b	$01
00097F6D E1FD                       	smpsAlterNote       $FD
00097F6F 01                         	dc.b	$01
00097F70 E100                       	smpsAlterNote       $00
00097F72 01                         	dc.b	$01
00097F73 E104                       	smpsAlterNote       $04
00097F75 01                         	dc.b	$01
00097F76 E1FD                       	smpsAlterNote       $FD
00097F78 ECF5                       	smpsPSGAlterVol     $F5
00097F7A 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00097F7E E100                       	smpsAlterNote       $00
00097F80 E701                       	dc.b	smpsNoAttack, $01
00097F82 E104                       	smpsAlterNote       $04
00097F84 E701                       	dc.b	smpsNoAttack, $01
00097F86 E100                       	smpsAlterNote       $00
00097F88 E701                       	dc.b	smpsNoAttack, $01
00097F8A E1FD                       	smpsAlterNote       $FD
00097F8C E701                       	dc.b	smpsNoAttack, $01
00097F8E E1F9                       	smpsAlterNote       $F9
00097F90 E701                       	dc.b	smpsNoAttack, $01
00097F92 E1FD                       	smpsAlterNote       $FD
00097F94 E701                       	dc.b	smpsNoAttack, $01
00097F96 E103                       	smpsAlterNote       $03
00097F98 E701                       	dc.b	smpsNoAttack, $01
00097F9A E104                       	smpsAlterNote       $04
00097F9C E701                       	dc.b	smpsNoAttack, $01
00097F9E E100                       	smpsAlterNote       $00
00097FA0 E701                       	dc.b	smpsNoAttack, $01
00097FA2 E1FA                       	smpsAlterNote       $FA
00097FA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FA8 E1FD                       	smpsAlterNote       $FD
00097FAA E701                       	dc.b	smpsNoAttack, $01
00097FAC E103                       	smpsAlterNote       $03
00097FAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FB2 E100                       	smpsAlterNote       $00
00097FB4 E701                       	dc.b	smpsNoAttack, $01
00097FB6 E1FA                       	smpsAlterNote       $FA
00097FB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00097FBC E100                       	smpsAlterNote       $00
00097FBE EC04                       	smpsPSGAlterVol     $04
00097FC0 E701                       	dc.b	smpsNoAttack, $01
00097FC2 EC07                       	smpsPSGAlterVol     $07
00097FC4 E104                       	smpsAlterNote       $04
00097FC6 8001                       	dc.b	nRst, $01
00097FC8 E103                       	smpsAlterNote       $03
00097FCA 01                         	dc.b	$01
00097FCB E1FD                       	smpsAlterNote       $FD
00097FCD 01                         	dc.b	$01
00097FCE E1F9                       	smpsAlterNote       $F9
00097FD0 01                         	dc.b	$01
00097FD1 E1FD                       	smpsAlterNote       $FD
00097FD3 01                         	dc.b	$01
00097FD4 E100                       	smpsAlterNote       $00
00097FD6 01                         	dc.b	$01
00097FD7 E104                       	smpsAlterNote       $04
00097FD9 01                         	dc.b	$01
00097FDA E1FD                       	smpsAlterNote       $FD
00097FDC ECF5                       	smpsPSGAlterVol     $F5
00097FDE 9106                       	dc.b	nE1, $06
00097FE0 EC04                       	smpsPSGAlterVol     $04
00097FE2 E701                       	dc.b	smpsNoAttack, $01
00097FE4 EC07                       	smpsPSGAlterVol     $07
00097FE6 8003                       	dc.b	nRst, $03
00097FE8 ECF5                       	smpsPSGAlterVol     $F5
00097FEA 9106                       	dc.b	nE1, $06
00097FEC EC04                       	smpsPSGAlterVol     $04
00097FEE E701                       	dc.b	smpsNoAttack, $01
00097FF0 EC07                       	smpsPSGAlterVol     $07
00097FF2 8006                       	dc.b	nRst, $06
00097FF4 E100                       	smpsAlterNote       $00
00097FF6 01                         	dc.b	$01
00097FF7 E104                       	smpsAlterNote       $04
00097FF9 01                         	dc.b	$01
00097FFA E100                       	smpsAlterNote       $00
00097FFC 01                         	dc.b	$01
00097FFD E1FD                       	smpsAlterNote       $FD
00097FFF 01                         	dc.b	$01
00098000 ECF5                       	smpsPSGAlterVol     $F5
00098002 9206                       	dc.b	nF1, $06
00098004 EC04                       	smpsPSGAlterVol     $04
00098006 E701                       	dc.b	smpsNoAttack, $01
00098008 EC07                       	smpsPSGAlterVol     $07
0009800A 8003                       	dc.b	nRst, $03
0009800C ECF5                       	smpsPSGAlterVol     $F5
0009800E 9207                       	dc.b	nF1, $07
00098010 EC0B                       	smpsPSGAlterVol     $0B
00098012 8007                       	dc.b	nRst, $07
00098014 E103                       	smpsAlterNote       $03
00098016 0101                       	dc.b	$01, $01
00098018 E1FD                       	smpsAlterNote       $FD
0009801A 01                         	dc.b	$01
0009801B E1FA                       	smpsAlterNote       $FA
0009801D 01                         	dc.b	$01
0009801E E1FD                       	smpsAlterNote       $FD
00098020 ECF5                       	smpsPSGAlterVol     $F5
00098022 9106                       	dc.b	nE1, $06
00098024 EC0B                       	smpsPSGAlterVol     $0B
00098026 8004                       	dc.b	nRst, $04
00098028 ECF5                       	smpsPSGAlterVol     $F5
0009802A 9106                       	dc.b	nE1, $06
0009802C EC04                       	smpsPSGAlterVol     $04
0009802E E701                       	dc.b	smpsNoAttack, $01
00098030 EC07                       	smpsPSGAlterVol     $07
00098032 8006                       	dc.b	nRst, $06
00098034 E100                       	smpsAlterNote       $00
00098036 01                         	dc.b	$01
00098037 E104                       	smpsAlterNote       $04
00098039 01                         	dc.b	$01
0009803A E100                       	smpsAlterNote       $00
0009803C 01                         	dc.b	$01
0009803D E1FA                       	smpsAlterNote       $FA
0009803F 01                         	dc.b	$01
00098040 E1FD                       	smpsAlterNote       $FD
00098042 ECF5                       	smpsPSGAlterVol     $F5
00098044 9206                       	dc.b	nF1, $06
00098046 EC04                       	smpsPSGAlterVol     $04
00098048 E701                       	dc.b	smpsNoAttack, $01
0009804A EC07                       	smpsPSGAlterVol     $07
0009804C 8003                       	dc.b	nRst, $03
0009804E ECF5                       	smpsPSGAlterVol     $F5
00098050 9206                       	dc.b	nF1, $06
00098052 EC04                       	smpsPSGAlterVol     $04
00098054 E701                       	dc.b	smpsNoAttack, $01
00098056 EC07                       	smpsPSGAlterVol     $07
00098058 8006                       	dc.b	nRst, $06
0009805A E100                       	smpsAlterNote       $00
0009805C 01                         	dc.b	$01
0009805D E104                       	smpsAlterNote       $04
0009805F 01                         	dc.b	$01
00098060 E103                       	smpsAlterNote       $03
00098062 01                         	dc.b	$01
00098063 E1FD                       	smpsAlterNote       $FD
00098065 01                         	dc.b	$01
00098066 ECF5                       	smpsPSGAlterVol     $F5
00098068 9107                       	dc.b	nE1, $07
0009806A EC0B                       	smpsPSGAlterVol     $0B
0009806C 8004                       	dc.b	nRst, $04
0009806E ECF5                       	smpsPSGAlterVol     $F5
00098070 9106                       	dc.b	nE1, $06
00098072 EC0B                       	smpsPSGAlterVol     $0B
00098074 8007                       	dc.b	nRst, $07
00098076 E103                       	smpsAlterNote       $03
00098078 0101                       	dc.b	$01, $01
0009807A E100                       	smpsAlterNote       $00
0009807C 01                         	dc.b	$01
0009807D E1FA                       	smpsAlterNote       $FA
0009807F 01                         	dc.b	$01
00098080 E1FD                       	smpsAlterNote       $FD
00098082 ECF5                       	smpsPSGAlterVol     $F5
00098084 9206                       	dc.b	nF1, $06
00098086 EC04                       	smpsPSGAlterVol     $04
00098088 E701                       	dc.b	smpsNoAttack, $01
0009808A EC07                       	smpsPSGAlterVol     $07
0009808C 8003                       	dc.b	nRst, $03
0009808E ECF5                       	smpsPSGAlterVol     $F5
00098090 9206                       	dc.b	nF1, $06
00098092 EC04                       	smpsPSGAlterVol     $04
00098094 E701                       	dc.b	smpsNoAttack, $01
00098096 EC07                       	smpsPSGAlterVol     $07
00098098 8006                       	dc.b	nRst, $06
0009809A E100                       	smpsAlterNote       $00
0009809C 01                         	dc.b	$01
0009809D E104                       	smpsAlterNote       $04
0009809F 01                         	dc.b	$01
000980A0 E100                       	smpsAlterNote       $00
000980A2 01                         	dc.b	$01
000980A3 E1FD                       	smpsAlterNote       $FD
000980A5 01                         	dc.b	$01
000980A6 ECF5                       	smpsPSGAlterVol     $F5
000980A8 9106                       	dc.b	nE1, $06
000980AA EC04                       	smpsPSGAlterVol     $04
000980AC E701                       	dc.b	smpsNoAttack, $01
000980AE EC07                       	smpsPSGAlterVol     $07
000980B0 8003                       	dc.b	nRst, $03
000980B2 ECF5                       	smpsPSGAlterVol     $F5
000980B4 9107 9106                  	dc.b	nE1, $07, nE1, $06
000980B8 EC04                       	smpsPSGAlterVol     $04
000980BA E701                       	dc.b	smpsNoAttack, $01
000980BC ECFC                       	smpsPSGAlterVol     $FC
000980BE 9103                       	dc.b	nE1, $03
000980C0 EC04                       	smpsPSGAlterVol     $04
000980C2 E701                       	dc.b	smpsNoAttack, $01
000980C4 ECFC                       	smpsPSGAlterVol     $FC
000980C6 9102                       	dc.b	nE1, $02
000980C8 EC04                       	smpsPSGAlterVol     $04
000980CA E701                       	dc.b	smpsNoAttack, $01
000980CC ECFC                       	smpsPSGAlterVol     $FC
000980CE 9103                       	dc.b	nE1, $03
000980D0 EC0B                       	smpsPSGAlterVol     $0B
000980D2 800A                       	dc.b	nRst, $0A
000980D4 E100                       	smpsAlterNote       $00
000980D6 01                         	dc.b	$01
000980D7 E104                       	smpsAlterNote       $04
000980D9 01                         	dc.b	$01
000980DA E100                       	smpsAlterNote       $00
000980DC 01                         	dc.b	$01
000980DD E1FA                       	smpsAlterNote       $FA
000980DF 01                         	dc.b	$01
000980E0 E1F9                       	smpsAlterNote       $F9
000980E2 01                         	dc.b	$01
000980E3 E1FD                       	smpsAlterNote       $FD
000980E5 01                         	dc.b	$01
000980E6 E103                       	smpsAlterNote       $03
000980E8 0101                       	dc.b	$01, $01
000980EA E100                       	smpsAlterNote       $00
000980EC 01                         	dc.b	$01
000980ED E1FA                       	smpsAlterNote       $FA
000980EF 0101                       	dc.b	$01, $01
000980F1 E1FD                       	smpsAlterNote       $FD
000980F3 ECF5                       	smpsPSGAlterVol     $F5
000980F5 9206                       	dc.b	nF1, $06
000980F7 EC04                       	smpsPSGAlterVol     $04
000980F9 E704                       	dc.b	smpsNoAttack, $04
000980FB ECFC                       	smpsPSGAlterVol     $FC
000980FD 9206                       	dc.b	nF1, $06
000980FF EC04                       	smpsPSGAlterVol     $04
00098101 E701                       	dc.b	smpsNoAttack, $01
00098103 EC07                       	smpsPSGAlterVol     $07
00098105 8006                       	dc.b	nRst, $06
00098107 E100                       	smpsAlterNote       $00
00098109 01                         	dc.b	$01
0009810A E104                       	smpsAlterNote       $04
0009810C 01                         	dc.b	$01
0009810D E103                       	smpsAlterNote       $03
0009810F 01                         	dc.b	$01
00098110 E1FD                       	smpsAlterNote       $FD
00098112 01                         	dc.b	$01
00098113 ECF5                       	smpsPSGAlterVol     $F5
00098115 9407                       	dc.b	nG1, $07
00098117 EC0B                       	smpsPSGAlterVol     $0B
00098119 8004                       	dc.b	nRst, $04
0009811B ECF5                       	smpsPSGAlterVol     $F5
0009811D 9406                       	dc.b	nG1, $06
0009811F EC0B                       	smpsPSGAlterVol     $0B
00098121 8007                       	dc.b	nRst, $07
00098123 E103                       	smpsAlterNote       $03
00098125 0101                       	dc.b	$01, $01
00098127 E1FD                       	smpsAlterNote       $FD
00098129 01                         	dc.b	$01
0009812A E1F9                       	smpsAlterNote       $F9
0009812C 01                         	dc.b	$01
0009812D E1FD                       	smpsAlterNote       $FD
0009812F ECF5                       	smpsPSGAlterVol     $F5
00098131 9206                       	dc.b	nF1, $06
00098133 EC04                       	smpsPSGAlterVol     $04
00098135 E701                       	dc.b	smpsNoAttack, $01
00098137 EC07                       	smpsPSGAlterVol     $07
00098139 8003                       	dc.b	nRst, $03
0009813B ECF5                       	smpsPSGAlterVol     $F5
0009813D 9206                       	dc.b	nF1, $06
0009813F EC04                       	smpsPSGAlterVol     $04
00098141 E701                       	dc.b	smpsNoAttack, $01
00098143 EC07                       	smpsPSGAlterVol     $07
00098145 8006                       	dc.b	nRst, $06
00098147 E100                       	smpsAlterNote       $00
00098149 01                         	dc.b	$01
0009814A E104                       	smpsAlterNote       $04
0009814C 01                         	dc.b	$01
0009814D E100                       	smpsAlterNote       $00
0009814F 01                         	dc.b	$01
00098150 E1FA                       	smpsAlterNote       $FA
00098152 01                         	dc.b	$01
00098153 E1FD                       	smpsAlterNote       $FD
00098155 ECF5                       	smpsPSGAlterVol     $F5
00098157 9206                       	dc.b	nF1, $06
00098159 EC04                       	smpsPSGAlterVol     $04
0009815B E701                       	dc.b	smpsNoAttack, $01
0009815D EC07                       	smpsPSGAlterVol     $07
0009815F 8003                       	dc.b	nRst, $03
00098161 ECF5                       	smpsPSGAlterVol     $F5
00098163 9107                       	dc.b	nE1, $07
00098165 EC0B                       	smpsPSGAlterVol     $0B
00098167 8006                       	dc.b	nRst, $06
00098169 E100                       	smpsAlterNote       $00
0009816B 01                         	dc.b	$01
0009816C E103                       	smpsAlterNote       $03
0009816E 0101                       	dc.b	$01, $01
00098170 E1FD                       	smpsAlterNote       $FD
00098172 01                         	dc.b	$01
00098173 ECF5                       	smpsPSGAlterVol     $F5
00098175 9207                       	dc.b	nF1, $07
00098177 EC0B                       	smpsPSGAlterVol     $0B
00098179 8004                       	dc.b	nRst, $04
0009817B ECF5                       	smpsPSGAlterVol     $F5
0009817D 9206                       	dc.b	nF1, $06
0009817F EC04                       	smpsPSGAlterVol     $04
00098181 E701                       	dc.b	smpsNoAttack, $01
00098183 EC07                       	smpsPSGAlterVol     $07
00098185 8006                       	dc.b	nRst, $06
00098187 E103                       	smpsAlterNote       $03
00098189 01                         	dc.b	$01
0009818A E104                       	smpsAlterNote       $04
0009818C 01                         	dc.b	$01
0009818D E100                       	smpsAlterNote       $00
0009818F 01                         	dc.b	$01
00098190 E1FB                       	smpsAlterNote       $FB
00098192 01                         	dc.b	$01
00098193 E1FD                       	smpsAlterNote       $FD
00098195 ECF5                       	smpsPSGAlterVol     $F5
00098197 9406                       	dc.b	nG1, $06
00098199 EC04                       	smpsPSGAlterVol     $04
0009819B E701                       	dc.b	smpsNoAttack, $01
0009819D EC07                       	smpsPSGAlterVol     $07
0009819F 8003                       	dc.b	nRst, $03
000981A1 ECF5                       	smpsPSGAlterVol     $F5
000981A3 9406                       	dc.b	nG1, $06
000981A5 EC04                       	smpsPSGAlterVol     $04
000981A7 E701                       	dc.b	smpsNoAttack, $01
000981A9 EC07                       	smpsPSGAlterVol     $07
000981AB 8006                       	dc.b	nRst, $06
000981AD E100                       	smpsAlterNote       $00
000981AF 01                         	dc.b	$01
000981B0 E104                       	smpsAlterNote       $04
000981B2 01                         	dc.b	$01
000981B3 E100                       	smpsAlterNote       $00
000981B5 01                         	dc.b	$01
000981B6 E1FD                       	smpsAlterNote       $FD
000981B8 01                         	dc.b	$01
000981B9 ECF5                       	smpsPSGAlterVol     $F5
000981BB 9206                       	dc.b	nF1, $06
000981BD EC04                       	smpsPSGAlterVol     $04
000981BF E701                       	dc.b	smpsNoAttack, $01
000981C1 EC07                       	smpsPSGAlterVol     $07
000981C3 8003                       	dc.b	nRst, $03
000981C5 ECF5                       	smpsPSGAlterVol     $F5
000981C7 9207                       	dc.b	nF1, $07
000981C9 EC0B                       	smpsPSGAlterVol     $0B
000981CB 8007                       	dc.b	nRst, $07
000981CD E103                       	smpsAlterNote       $03
000981CF 0101                       	dc.b	$01, $01
000981D1 E1FD                       	smpsAlterNote       $FD
000981D3 01                         	dc.b	$01
000981D4 E1FA                       	smpsAlterNote       $FA
000981D6 01                         	dc.b	$01
000981D7 E1FD                       	smpsAlterNote       $FD
000981D9 ECF5                       	smpsPSGAlterVol     $F5
000981DB 9206                       	dc.b	nF1, $06
000981DD EC0B                       	smpsPSGAlterVol     $0B
000981DF 8004                       	dc.b	nRst, $04
000981E1 ECF5                       	smpsPSGAlterVol     $F5
000981E3 9206                       	dc.b	nF1, $06
000981E5 EC04                       	smpsPSGAlterVol     $04
000981E7 E701                       	dc.b	smpsNoAttack, $01
000981E9 EC07                       	smpsPSGAlterVol     $07
000981EB 8006                       	dc.b	nRst, $06
000981ED E100                       	smpsAlterNote       $00
000981EF 01                         	dc.b	$01
000981F0 E104                       	smpsAlterNote       $04
000981F2 01                         	dc.b	$01
000981F3 E100                       	smpsAlterNote       $00
000981F5 01                         	dc.b	$01
000981F6 E1FA                       	smpsAlterNote       $FA
000981F8 01                         	dc.b	$01
000981F9 E1FD                       	smpsAlterNote       $FD
000981FB ECF5                       	smpsPSGAlterVol     $F5
000981FD 9206                       	dc.b	nF1, $06
000981FF EC04                       	smpsPSGAlterVol     $04
00098201 E701                       	dc.b	smpsNoAttack, $01
00098203 EC07                       	smpsPSGAlterVol     $07
00098205 8003                       	dc.b	nRst, $03
00098207 ECF5                       	smpsPSGAlterVol     $F5
00098209 9207                       	dc.b	nF1, $07
0009820B EC0B                       	smpsPSGAlterVol     $0B
0009820D 8006                       	dc.b	nRst, $06
0009820F E100                       	smpsAlterNote       $00
00098211 01                         	dc.b	$01
00098212 E103                       	smpsAlterNote       $03
00098214 0101                       	dc.b	$01, $01
00098216 E1FD                       	smpsAlterNote       $FD
00098218 01                         	dc.b	$01
00098219 ECF5                       	smpsPSGAlterVol     $F5
0009821B 9207                       	dc.b	nF1, $07
0009821D EC0B                       	smpsPSGAlterVol     $0B
0009821F 8004                       	dc.b	nRst, $04
00098221 ECF5                       	smpsPSGAlterVol     $F5
00098223 9206                       	dc.b	nF1, $06
00098225 EC0B                       	smpsPSGAlterVol     $0B
00098227 8007                       	dc.b	nRst, $07
00098229 E103                       	smpsAlterNote       $03
0009822B 0101                       	dc.b	$01, $01
0009822D E100                       	smpsAlterNote       $00
0009822F 01                         	dc.b	$01
00098230 E1FA                       	smpsAlterNote       $FA
00098232 01                         	dc.b	$01
00098233 E1FD                       	smpsAlterNote       $FD
00098235 ECF5                       	smpsPSGAlterVol     $F5
00098237 9206                       	dc.b	nF1, $06
00098239 EC04                       	smpsPSGAlterVol     $04
0009823B E701                       	dc.b	smpsNoAttack, $01
0009823D EC07                       	smpsPSGAlterVol     $07
0009823F 8003                       	dc.b	nRst, $03
00098241 ECF5                       	smpsPSGAlterVol     $F5
00098243 9206                       	dc.b	nF1, $06
00098245 EC04                       	smpsPSGAlterVol     $04
00098247 E701                       	dc.b	smpsNoAttack, $01
00098249 EC07                       	smpsPSGAlterVol     $07
0009824B 8006                       	dc.b	nRst, $06
0009824D E100                       	smpsAlterNote       $00
0009824F 01                         	dc.b	$01
00098250 E104                       	smpsAlterNote       $04
00098252 01                         	dc.b	$01
00098253 E100                       	smpsAlterNote       $00
00098255 01                         	dc.b	$01
00098256 E1FD                       	smpsAlterNote       $FD
00098258 01                         	dc.b	$01
00098259 ECF5                       	smpsPSGAlterVol     $F5
0009825B 9206                       	dc.b	nF1, $06
0009825D EC04                       	smpsPSGAlterVol     $04
0009825F E701                       	dc.b	smpsNoAttack, $01
00098261 EC07                       	smpsPSGAlterVol     $07
00098263 8003                       	dc.b	nRst, $03
00098265 ECF5                       	smpsPSGAlterVol     $F5
00098267 9207                       	dc.b	nF1, $07
00098269 EC0B                       	smpsPSGAlterVol     $0B
0009826B 8007                       	dc.b	nRst, $07
0009826D E104                       	smpsAlterNote       $04
0009826F 0101                       	dc.b	$01, $01
00098271 E1FB                       	smpsAlterNote       $FB
00098273 01                         	dc.b	$01
00098274 E1F6                       	smpsAlterNote       $F6
00098276 0101                       	dc.b	$01, $01
00098278 E1FF                       	smpsAlterNote       $FF
0009827A 01                         	dc.b	$01
0009827B E105                       	smpsAlterNote       $05
0009827D 01                         	dc.b	$01
0009827E E104                       	smpsAlterNote       $04
00098280 01                         	dc.b	$01
00098281 E1FB                       	smpsAlterNote       $FB
00098283 01                         	dc.b	$01
00098284 E1F5                       	smpsAlterNote       $F5
00098286 01                         	dc.b	$01
00098287 E1FC                       	smpsAlterNote       $FC
00098289 ECF5                       	smpsPSGAlterVol     $F5
0009828B 8B0E                       	dc.b	nBb0, $0E
0009828D E102                       	smpsAlterNote       $02
0009828F EC0B                       	smpsPSGAlterVol     $0B
00098291 8001                       	dc.b	nRst, $01
00098293 E101                       	smpsAlterNote       $01
00098295 01                         	dc.b	$01
00098296 E1FC                       	smpsAlterNote       $FC
00098298 01                         	dc.b	$01
00098299 E1F9                       	smpsAlterNote       $F9
0009829B 0101                       	dc.b	$01, $01
0009829D E1FF                       	smpsAlterNote       $FF
0009829F 01                         	dc.b	$01
000982A0 E102                       	smpsAlterNote       $02
000982A2 01                         	dc.b	$01
000982A3 E1FF                       	smpsAlterNote       $FF
000982A5 01                         	dc.b	$01
000982A6 E1FC                       	smpsAlterNote       $FC
000982A8 01                         	dc.b	$01
000982A9 E1F8                       	smpsAlterNote       $F8
000982AB 01                         	dc.b	$01
000982AC E1FC                       	smpsAlterNote       $FC
000982AE 01                         	dc.b	$01
000982AF E101                       	smpsAlterNote       $01
000982B1 01                         	dc.b	$01
000982B2 E102                       	smpsAlterNote       $02
000982B4 01                         	dc.b	$01
000982B5 E1FF                       	smpsAlterNote       $FF
000982B7 01                         	dc.b	$01
000982B8 E1FB                       	smpsAlterNote       $FB
000982BA ECF5                       	smpsPSGAlterVol     $F5
000982BC 8D0D                       	dc.b	nC1, $0D
000982BE E101                       	smpsAlterNote       $01
000982C0 EC0B                       	smpsPSGAlterVol     $0B
000982C2 8001                       	dc.b	nRst, $01
000982C4 E102                       	smpsAlterNote       $02
000982C6 01                         	dc.b	$01
000982C7 E1FF                       	smpsAlterNote       $FF
000982C9 01                         	dc.b	$01
000982CA E1F9                       	smpsAlterNote       $F9
000982CC 0101                       	dc.b	$01, $01
000982CE E1FC                       	smpsAlterNote       $FC
000982D0 01                         	dc.b	$01
000982D1 E101                       	smpsAlterNote       $01
000982D3 0101                       	dc.b	$01, $01
000982D5 E1FC                       	smpsAlterNote       $FC
000982D7 01                         	dc.b	$01
000982D8 E1F9                       	smpsAlterNote       $F9
000982DA 0101                       	dc.b	$01, $01
000982DC E1FF                       	smpsAlterNote       $FF
000982DE 01                         	dc.b	$01
000982DF E102                       	smpsAlterNote       $02
000982E1 01                         	dc.b	$01
000982E2 E101                       	smpsAlterNote       $01
000982E4 01                         	dc.b	$01
000982E5 E1FC                       	smpsAlterNote       $FC
000982E7 ECF5                       	smpsPSGAlterVol     $F5
000982E9 8F0D                       	dc.b	nD1, $0D
000982EB E1FF                       	smpsAlterNote       $FF
000982ED EC04                       	smpsPSGAlterVol     $04
000982EF E701                       	dc.b	smpsNoAttack, $01
000982F1 EC07                       	smpsPSGAlterVol     $07
000982F3 E103                       	smpsAlterNote       $03
000982F5 8001                       	dc.b	nRst, $01
000982F7 E102                       	smpsAlterNote       $02
000982F9 01                         	dc.b	$01
000982FA E1FD                       	smpsAlterNote       $FD
000982FC 01                         	dc.b	$01
000982FD E1F9                       	smpsAlterNote       $F9
000982FF 01                         	dc.b	$01
00098300 E1FD                       	smpsAlterNote       $FD
00098302 01                         	dc.b	$01
00098303 E100                       	smpsAlterNote       $00
00098305 01                         	dc.b	$01
00098306 E103                       	smpsAlterNote       $03
00098308 01                         	dc.b	$01
00098309 E100                       	smpsAlterNote       $00
0009830B 01                         	dc.b	$01
0009830C E1FA                       	smpsAlterNote       $FA
0009830E 01                         	dc.b	$01
0009830F E1F9                       	smpsAlterNote       $F9
00098311 01                         	dc.b	$01
00098312 E1FD                       	smpsAlterNote       $FD
00098314 01                         	dc.b	$01
00098315 E102                       	smpsAlterNote       $02
00098317 0101                       	dc.b	$01, $01
00098319 E100                       	smpsAlterNote       $00
0009831B 01                         	dc.b	$01
0009831C E1FD                       	smpsAlterNote       $FD
0009831E ECF5                       	smpsPSGAlterVol     $F5
00098320 910D                       	dc.b	nE1, $0D
00098322 E103                       	smpsAlterNote       $03
00098324 EC0B                       	smpsPSGAlterVol     $0B
00098326 8001 01                    	dc.b	nRst, $01, $01
00098329 E100                       	smpsAlterNote       $00
0009832B 01                         	dc.b	$01
0009832C E1FA                       	smpsAlterNote       $FA
0009832E 0101                       	dc.b	$01, $01
00098330 E100                       	smpsAlterNote       $00
00098332 01                         	dc.b	$01
00098333 E103                       	smpsAlterNote       $03
00098335 01                         	dc.b	$01
00098336 E1FD                       	smpsAlterNote       $FD
00098338 ECF5                       	smpsPSGAlterVol     $F5
0009833A 9206                       	dc.b	nF1, $06
0009833C EC04                       	smpsPSGAlterVol     $04
0009833E E701                       	dc.b	smpsNoAttack, $01
00098340 EC07                       	smpsPSGAlterVol     $07
00098342 8003                       	dc.b	nRst, $03
00098344 ECF5                       	smpsPSGAlterVol     $F5
00098346 9207                       	dc.b	nF1, $07
00098348 EC0B                       	smpsPSGAlterVol     $0B
0009834A 8006                       	dc.b	nRst, $06
0009834C E100                       	smpsAlterNote       $00
0009834E 01                         	dc.b	$01
0009834F E103                       	smpsAlterNote       $03
00098351 0101                       	dc.b	$01, $01
00098353 E1FD                       	smpsAlterNote       $FD
00098355 01                         	dc.b	$01
00098356 ECF5                       	smpsPSGAlterVol     $F5
00098358 9407                       	dc.b	nG1, $07
0009835A EC0B                       	smpsPSGAlterVol     $0B
0009835C 8004                       	dc.b	nRst, $04
0009835E ECF5                       	smpsPSGAlterVol     $F5
00098360 9406                       	dc.b	nG1, $06
00098362 EC04                       	smpsPSGAlterVol     $04
00098364 E701                       	dc.b	smpsNoAttack, $01
00098366 EC07                       	smpsPSGAlterVol     $07
00098368 8006                       	dc.b	nRst, $06
0009836A E103                       	smpsAlterNote       $03
0009836C 01                         	dc.b	$01
0009836D E104                       	smpsAlterNote       $04
0009836F 01                         	dc.b	$01
00098370 E100                       	smpsAlterNote       $00
00098372 01                         	dc.b	$01
00098373 E1F9                       	smpsAlterNote       $F9
00098375 01                         	dc.b	$01
00098376 E1FD                       	smpsAlterNote       $FD
00098378 ECF5                       	smpsPSGAlterVol     $F5
0009837A 9206                       	dc.b	nF1, $06
0009837C EC04                       	smpsPSGAlterVol     $04
0009837E E701                       	dc.b	smpsNoAttack, $01
00098380 EC07                       	smpsPSGAlterVol     $07
00098382 8003                       	dc.b	nRst, $03
00098384 ECF5                       	smpsPSGAlterVol     $F5
00098386 9206                       	dc.b	nF1, $06
00098388 EC04                       	smpsPSGAlterVol     $04
0009838A E701                       	dc.b	smpsNoAttack, $01
0009838C EC07                       	smpsPSGAlterVol     $07
0009838E 8006                       	dc.b	nRst, $06
00098390 E100                       	smpsAlterNote       $00
00098392 01                         	dc.b	$01
00098393 E104                       	smpsAlterNote       $04
00098395 01                         	dc.b	$01
00098396 E103                       	smpsAlterNote       $03
00098398 01                         	dc.b	$01
00098399 E1FD                       	smpsAlterNote       $FD
0009839B 01                         	dc.b	$01
0009839C ECF5                       	smpsPSGAlterVol     $F5
0009839E 9407                       	dc.b	nG1, $07
000983A0 EC0B                       	smpsPSGAlterVol     $0B
000983A2 8004                       	dc.b	nRst, $04
000983A4 ECF5                       	smpsPSGAlterVol     $F5
000983A6 9406                       	dc.b	nG1, $06
000983A8 EC0B                       	smpsPSGAlterVol     $0B
000983AA 8007                       	dc.b	nRst, $07
000983AC E103                       	smpsAlterNote       $03
000983AE 0101                       	dc.b	$01, $01
000983B0 E100                       	smpsAlterNote       $00
000983B2 01                         	dc.b	$01
000983B3 E1F9                       	smpsAlterNote       $F9
000983B5 01                         	dc.b	$01
000983B6 E1FD                       	smpsAlterNote       $FD
000983B8 ECF5                       	smpsPSGAlterVol     $F5
000983BA 9206                       	dc.b	nF1, $06
000983BC EC04                       	smpsPSGAlterVol     $04
000983BE E701                       	dc.b	smpsNoAttack, $01
000983C0 EC07                       	smpsPSGAlterVol     $07
000983C2 8003                       	dc.b	nRst, $03
000983C4 ECF5                       	smpsPSGAlterVol     $F5
000983C6 9206                       	dc.b	nF1, $06
000983C8 EC04                       	smpsPSGAlterVol     $04
000983CA E701                       	dc.b	smpsNoAttack, $01
000983CC EC07                       	smpsPSGAlterVol     $07
000983CE 8006                       	dc.b	nRst, $06
000983D0 E100                       	smpsAlterNote       $00
000983D2 01                         	dc.b	$01
000983D3 E104                       	smpsAlterNote       $04
000983D5 01                         	dc.b	$01
000983D6 E100                       	smpsAlterNote       $00
000983D8 01                         	dc.b	$01
000983D9 E1FB                       	smpsAlterNote       $FB
000983DB 01                         	dc.b	$01
000983DC E1FD                       	smpsAlterNote       $FD
000983DE ECF5                       	smpsPSGAlterVol     $F5
000983E0 9406                       	dc.b	nG1, $06
000983E2 EC04                       	smpsPSGAlterVol     $04
000983E4 E701                       	dc.b	smpsNoAttack, $01
000983E6 EC07                       	smpsPSGAlterVol     $07
000983E8 8003                       	dc.b	nRst, $03
000983EA ECF5                       	smpsPSGAlterVol     $F5
000983EC 9407                       	dc.b	nG1, $07
000983EE EC0B                       	smpsPSGAlterVol     $0B
000983F0 8006                       	dc.b	nRst, $06
000983F2 E100                       	smpsAlterNote       $00
000983F4 01                         	dc.b	$01
000983F5 E103                       	smpsAlterNote       $03
000983F7 0101                       	dc.b	$01, $01
000983F9 E1FD                       	smpsAlterNote       $FD
000983FB 01                         	dc.b	$01
000983FC ECF5                       	smpsPSGAlterVol     $F5
000983FE 9207                       	dc.b	nF1, $07
00098400 EC0B                       	smpsPSGAlterVol     $0B
00098402 8004                       	dc.b	nRst, $04
00098404 ECF5                       	smpsPSGAlterVol     $F5
00098406 9206                       	dc.b	nF1, $06
00098408 EC04                       	smpsPSGAlterVol     $04
0009840A E701                       	dc.b	smpsNoAttack, $01
0009840C ECFC                       	smpsPSGAlterVol     $FC
0009840E E1FC                       	smpsAlterNote       $FC
00098410 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00098414 EC04                       	smpsPSGAlterVol     $04
00098416 E701                       	dc.b	smpsNoAttack, $01
00098418 ECFC                       	smpsPSGAlterVol     $FC
0009841A 9003                       	dc.b	nEb1, $03
0009841C E1FD                       	smpsAlterNote       $FD
0009841E 9403                       	dc.b	nG1, $03
00098420 EC04                       	smpsPSGAlterVol     $04
00098422 E701                       	dc.b	smpsNoAttack, $01
00098424 E1FE                       	smpsAlterNote       $FE
00098426 ECFC                       	smpsPSGAlterVol     $FC
00098428 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0009842C EC04                       	smpsPSGAlterVol     $04
0009842E E701                       	dc.b	smpsNoAttack, $01
00098430 EC07                       	smpsPSGAlterVol     $07
00098432 8009                       	dc.b	nRst, $09
00098434 E100                       	smpsAlterNote       $00
00098436 01                         	dc.b	$01
00098437 F6F5 19                    	smpsJump            music84_Jump07
0009843A                            
0009843A                            ; PSG2 Data
0009843A                            music84_PSG2:
0009843A E1FC                       	smpsAlterNote       $FC
0009843C EC04                       	smpsPSGAlterVol     $04
0009843E 8F03                       	dc.b	nD1, $03
00098440 E1FD                       	smpsAlterNote       $FD
00098442 9203                       	dc.b	nF1, $03
00098444 EC04                       	smpsPSGAlterVol     $04
00098446 E701                       	dc.b	smpsNoAttack, $01
00098448 E1FE                       	smpsAlterNote       $FE
0009844A ECFC                       	smpsPSGAlterVol     $FC
0009844C 9603                       	dc.b	nA1, $03
0009844E E1FD                       	smpsAlterNote       $FD
00098450 9103                       	dc.b	nE1, $03
00098452 EC04                       	smpsPSGAlterVol     $04
00098454 E701                       	dc.b	smpsNoAttack, $01
00098456 ECFC                       	smpsPSGAlterVol     $FC
00098458 9403                       	dc.b	nG1, $03
0009845A E1FE                       	smpsAlterNote       $FE
0009845C 9703                       	dc.b	nBb1, $03
0009845E EC04                       	smpsPSGAlterVol     $04
00098460 E701                       	dc.b	smpsNoAttack, $01
00098462 E1FF                       	smpsAlterNote       $FF
00098464 ECFC                       	smpsPSGAlterVol     $FC
00098466 9B02                       	dc.b	nD2, $02
00098468 EC04                       	smpsPSGAlterVol     $04
0009846A E701                       	dc.b	smpsNoAttack, $01
0009846C ECFC                       	smpsPSGAlterVol     $FC
0009846E E1FE                       	smpsAlterNote       $FE
00098470 9A03                       	dc.b	nCs2, $03
00098472 EC0B                       	smpsPSGAlterVol     $0B
00098474 800A                       	dc.b	nRst, $0A
00098476 E102                       	smpsAlterNote       $02
00098478 01                         	dc.b	$01
00098479 E10A                       	smpsAlterNote       $0A
0009847B 01                         	dc.b	$01
0009847C E102                       	smpsAlterNote       $02
0009847E 01                         	dc.b	$01
0009847F E1FC                       	smpsAlterNote       $FC
00098481 01                         	dc.b	$01
00098482 E10A                       	smpsAlterNote       $0A
00098484 01                         	dc.b	$01
00098485 E1FC                       	smpsAlterNote       $FC
00098487 01                         	dc.b	$01
00098488 E108                       	smpsAlterNote       $08
0009848A 01                         	dc.b	$01
0009848B E10A                       	smpsAlterNote       $0A
0009848D 01                         	dc.b	$01
0009848E E102                       	smpsAlterNote       $02
00098490 01                         	dc.b	$01
00098491 E1F7                       	smpsAlterNote       $F7
00098493 0101                       	dc.b	$01, $01
00098495 E102                       	smpsAlterNote       $02
00098497 01                         	dc.b	$01
00098498 E108                       	smpsAlterNote       $08
0009849A 0101                       	dc.b	$01, $01
0009849C E1FC                       	smpsAlterNote       $FC
0009849E 01                         	dc.b	$01
0009849F E10A                       	smpsAlterNote       $0A
000984A1 01                         	dc.b	$01
000984A2 E1F7                       	smpsAlterNote       $F7
000984A4 01                         	dc.b	$01
000984A5 E102                       	smpsAlterNote       $02
000984A7 01                         	dc.b	$01
000984A8 E10A                       	smpsAlterNote       $0A
000984AA 01                         	dc.b	$01
000984AB E102                       	smpsAlterNote       $02
000984AD 01                         	dc.b	$01
000984AE E1FC                       	smpsAlterNote       $FC
000984B0 01                         	dc.b	$01
000984B1                            
000984B1                            music84_Jump06:
000984B1 E10A                       	smpsAlterNote       $0A
000984B3 8001                       	dc.b	nRst, $01
000984B5 E1FC                       	smpsAlterNote       $FC
000984B7 01                         	dc.b	$01
000984B8 E108                       	smpsAlterNote       $08
000984BA 01                         	dc.b	$01
000984BB E10A                       	smpsAlterNote       $0A
000984BD 01                         	dc.b	$01
000984BE E1FC                       	smpsAlterNote       $FC
000984C0 ECF5                       	smpsPSGAlterVol     $F5
000984C2 8F06                       	dc.b	nD1, $06
000984C4 EC04                       	smpsPSGAlterVol     $04
000984C6 E701                       	dc.b	smpsNoAttack, $01
000984C8 EC07                       	smpsPSGAlterVol     $07
000984CA 8003                       	dc.b	nRst, $03
000984CC ECF5                       	smpsPSGAlterVol     $F5
000984CE 8F06                       	dc.b	nD1, $06
000984D0 EC04                       	smpsPSGAlterVol     $04
000984D2 E701                       	dc.b	smpsNoAttack, $01
000984D4 EC07                       	smpsPSGAlterVol     $07
000984D6 8006                       	dc.b	nRst, $06
000984D8 E1FF                       	smpsAlterNote       $FF
000984DA 01                         	dc.b	$01
000984DB E102                       	smpsAlterNote       $02
000984DD 01                         	dc.b	$01
000984DE E1FF                       	smpsAlterNote       $FF
000984E0 01                         	dc.b	$01
000984E1 E1F9                       	smpsAlterNote       $F9
000984E3 01                         	dc.b	$01
000984E4 E1FC                       	smpsAlterNote       $FC
000984E6 ECF5                       	smpsPSGAlterVol     $F5
000984E8 9006                       	dc.b	nEb1, $06
000984EA EC04                       	smpsPSGAlterVol     $04
000984EC E701                       	dc.b	smpsNoAttack, $01
000984EE EC07                       	smpsPSGAlterVol     $07
000984F0 8003                       	dc.b	nRst, $03
000984F2 ECF5                       	smpsPSGAlterVol     $F5
000984F4 9007                       	dc.b	nEb1, $07
000984F6 EC0B                       	smpsPSGAlterVol     $0B
000984F8 8006                       	dc.b	nRst, $06
000984FA E1FF                       	smpsAlterNote       $FF
000984FC 01                         	dc.b	$01
000984FD E103                       	smpsAlterNote       $03
000984FF 0101                       	dc.b	$01, $01
00098501 E1FC                       	smpsAlterNote       $FC
00098503 01                         	dc.b	$01
00098504 ECF5                       	smpsPSGAlterVol     $F5
00098506 8F07                       	dc.b	nD1, $07
00098508 EC0B                       	smpsPSGAlterVol     $0B
0009850A 8004                       	dc.b	nRst, $04
0009850C ECF5                       	smpsPSGAlterVol     $F5
0009850E 8F06                       	dc.b	nD1, $06
00098510 EC04                       	smpsPSGAlterVol     $04
00098512 E701                       	dc.b	smpsNoAttack, $01
00098514 EC07                       	smpsPSGAlterVol     $07
00098516 8006                       	dc.b	nRst, $06
00098518 E102                       	smpsAlterNote       $02
0009851A 01                         	dc.b	$01
0009851B E103                       	smpsAlterNote       $03
0009851D 01                         	dc.b	$01
0009851E E1FF                       	smpsAlterNote       $FF
00098520 01                         	dc.b	$01
00098521 E1F9                       	smpsAlterNote       $F9
00098523 01                         	dc.b	$01
00098524 E1FC                       	smpsAlterNote       $FC
00098526 ECF5                       	smpsPSGAlterVol     $F5
00098528 8F06                       	dc.b	nD1, $06
0009852A EC04                       	smpsPSGAlterVol     $04
0009852C E701                       	dc.b	smpsNoAttack, $01
0009852E EC07                       	smpsPSGAlterVol     $07
00098530 8003                       	dc.b	nRst, $03
00098532 ECF5                       	smpsPSGAlterVol     $F5
00098534 8F06                       	dc.b	nD1, $06
00098536 EC04                       	smpsPSGAlterVol     $04
00098538 E701                       	dc.b	smpsNoAttack, $01
0009853A EC07                       	smpsPSGAlterVol     $07
0009853C 8006                       	dc.b	nRst, $06
0009853E E1FF                       	smpsAlterNote       $FF
00098540 01                         	dc.b	$01
00098541 E103                       	smpsAlterNote       $03
00098543 01                         	dc.b	$01
00098544 E1FF                       	smpsAlterNote       $FF
00098546 01                         	dc.b	$01
00098547 E1FC                       	smpsAlterNote       $FC
00098549 01                         	dc.b	$01
0009854A ECF5                       	smpsPSGAlterVol     $F5
0009854C 8F06                       	dc.b	nD1, $06
0009854E EC04                       	smpsPSGAlterVol     $04
00098550 E701                       	dc.b	smpsNoAttack, $01
00098552 EC07                       	smpsPSGAlterVol     $07
00098554 8003                       	dc.b	nRst, $03
00098556 ECF5                       	smpsPSGAlterVol     $F5
00098558 8F07                       	dc.b	nD1, $07
0009855A EC0B                       	smpsPSGAlterVol     $0B
0009855C 8007                       	dc.b	nRst, $07
0009855E E101                       	smpsAlterNote       $01
00098560 0101                       	dc.b	$01, $01
00098562 E1FC                       	smpsAlterNote       $FC
00098564 01                         	dc.b	$01
00098565 E1F9                       	smpsAlterNote       $F9
00098567 01                         	dc.b	$01
00098568 E1FC                       	smpsAlterNote       $FC
0009856A ECF5                       	smpsPSGAlterVol     $F5
0009856C 9006                       	dc.b	nEb1, $06
0009856E EC0B                       	smpsPSGAlterVol     $0B
00098570 8004                       	dc.b	nRst, $04
00098572 ECF5                       	smpsPSGAlterVol     $F5
00098574 9006                       	dc.b	nEb1, $06
00098576 EC04                       	smpsPSGAlterVol     $04
00098578 E701                       	dc.b	smpsNoAttack, $01
0009857A EC07                       	smpsPSGAlterVol     $07
0009857C 8006                       	dc.b	nRst, $06
0009857E E100                       	smpsAlterNote       $00
00098580 01                         	dc.b	$01
00098581 E102                       	smpsAlterNote       $02
00098583 01                         	dc.b	$01
00098584 E100                       	smpsAlterNote       $00
00098586 01                         	dc.b	$01
00098587 E1FD                       	smpsAlterNote       $FD
00098589 01                         	dc.b	$01
0009858A E1FF                       	smpsAlterNote       $FF
0009858C ECF5                       	smpsPSGAlterVol     $F5
0009858E 9B06                       	dc.b	nD2, $06
00098590 EC04                       	smpsPSGAlterVol     $04
00098592 E701                       	dc.b	smpsNoAttack, $01
00098594 EC07                       	smpsPSGAlterVol     $07
00098596 8003                       	dc.b	nRst, $03
00098598 ECF5                       	smpsPSGAlterVol     $F5
0009859A 9B07                       	dc.b	nD2, $07
0009859C EC0B                       	smpsPSGAlterVol     $0B
0009859E 8006                       	dc.b	nRst, $06
000985A0 E102                       	smpsAlterNote       $02
000985A2 01                         	dc.b	$01
000985A3 E106                       	smpsAlterNote       $06
000985A5 01                         	dc.b	$01
000985A6 E105                       	smpsAlterNote       $05
000985A8 01                         	dc.b	$01
000985A9 E1FF                       	smpsAlterNote       $FF
000985AB 01                         	dc.b	$01
000985AC ECF5                       	smpsPSGAlterVol     $F5
000985AE 9B07                       	dc.b	nD2, $07
000985B0 EC0B                       	smpsPSGAlterVol     $0B
000985B2 8004                       	dc.b	nRst, $04
000985B4 ECF5                       	smpsPSGAlterVol     $F5
000985B6 9B06                       	dc.b	nD2, $06
000985B8 EC0B                       	smpsPSGAlterVol     $0B
000985BA 8007                       	dc.b	nRst, $07
000985BC E105                       	smpsAlterNote       $05
000985BE 0101                       	dc.b	$01, $01
000985C0 E102                       	smpsAlterNote       $02
000985C2 01                         	dc.b	$01
000985C3 E1FC                       	smpsAlterNote       $FC
000985C5 01                         	dc.b	$01
000985C6 E1FF                       	smpsAlterNote       $FF
000985C8 ECF5                       	smpsPSGAlterVol     $F5
000985CA 9B06                       	dc.b	nD2, $06
000985CC EC04                       	smpsPSGAlterVol     $04
000985CE E701                       	dc.b	smpsNoAttack, $01
000985D0 EC07                       	smpsPSGAlterVol     $07
000985D2 8003                       	dc.b	nRst, $03
000985D4 ECF5                       	smpsPSGAlterVol     $F5
000985D6 9B06                       	dc.b	nD2, $06
000985D8 EC04                       	smpsPSGAlterVol     $04
000985DA E701                       	dc.b	smpsNoAttack, $01
000985DC EC07                       	smpsPSGAlterVol     $07
000985DE 8006                       	dc.b	nRst, $06
000985E0 E102                       	smpsAlterNote       $02
000985E2 01                         	dc.b	$01
000985E3 E106                       	smpsAlterNote       $06
000985E5 01                         	dc.b	$01
000985E6 E102                       	smpsAlterNote       $02
000985E8 01                         	dc.b	$01
000985E9 E1FF                       	smpsAlterNote       $FF
000985EB 01                         	dc.b	$01
000985EC ECF5                       	smpsPSGAlterVol     $F5
000985EE 9B06                       	dc.b	nD2, $06
000985F0 EC04                       	smpsPSGAlterVol     $04
000985F2 E701                       	dc.b	smpsNoAttack, $01
000985F4 EC07                       	smpsPSGAlterVol     $07
000985F6 8003                       	dc.b	nRst, $03
000985F8 ECF5                       	smpsPSGAlterVol     $F5
000985FA 9B07                       	dc.b	nD2, $07
000985FC EC0B                       	smpsPSGAlterVol     $0B
000985FE 8007                       	dc.b	nRst, $07
00098600 E105                       	smpsAlterNote       $05
00098602 0101                       	dc.b	$01, $01
00098604 E1FF                       	smpsAlterNote       $FF
00098606 01                         	dc.b	$01
00098607 E1FC                       	smpsAlterNote       $FC
00098609 01                         	dc.b	$01
0009860A E1FF                       	smpsAlterNote       $FF
0009860C ECF5                       	smpsPSGAlterVol     $F5
0009860E 9B06                       	dc.b	nD2, $06
00098610 EC0B                       	smpsPSGAlterVol     $0B
00098612 8004                       	dc.b	nRst, $04
00098614 ECF5                       	smpsPSGAlterVol     $F5
00098616 9B06                       	dc.b	nD2, $06
00098618 EC04                       	smpsPSGAlterVol     $04
0009861A E701                       	dc.b	smpsNoAttack, $01
0009861C EC07                       	smpsPSGAlterVol     $07
0009861E 8006                       	dc.b	nRst, $06
00098620 E105                       	smpsAlterNote       $05
00098622 01                         	dc.b	$01
00098623 E106                       	smpsAlterNote       $06
00098625 01                         	dc.b	$01
00098626 E102                       	smpsAlterNote       $02
00098628 01                         	dc.b	$01
00098629 E1FC                       	smpsAlterNote       $FC
0009862B 01                         	dc.b	$01
0009862C E1FF                       	smpsAlterNote       $FF
0009862E ECF5                       	smpsPSGAlterVol     $F5
00098630 9B06                       	dc.b	nD2, $06
00098632 EC04                       	smpsPSGAlterVol     $04
00098634 E701                       	dc.b	smpsNoAttack, $01
00098636 EC07                       	smpsPSGAlterVol     $07
00098638 8003                       	dc.b	nRst, $03
0009863A ECF5                       	smpsPSGAlterVol     $F5
0009863C 9B06                       	dc.b	nD2, $06
0009863E EC04                       	smpsPSGAlterVol     $04
00098640 E701                       	dc.b	smpsNoAttack, $01
00098642 EC07                       	smpsPSGAlterVol     $07
00098644 8006                       	dc.b	nRst, $06
00098646 E102                       	smpsAlterNote       $02
00098648 01                         	dc.b	$01
00098649 E106                       	smpsAlterNote       $06
0009864B 01                         	dc.b	$01
0009864C E105                       	smpsAlterNote       $05
0009864E 01                         	dc.b	$01
0009864F E1FF                       	smpsAlterNote       $FF
00098651 01                         	dc.b	$01
00098652 ECF5                       	smpsPSGAlterVol     $F5
00098654 9B07                       	dc.b	nD2, $07
00098656 EC0B                       	smpsPSGAlterVol     $0B
00098658 8004                       	dc.b	nRst, $04
0009865A ECF5                       	smpsPSGAlterVol     $F5
0009865C 9B06                       	dc.b	nD2, $06
0009865E EC0B                       	smpsPSGAlterVol     $0B
00098660 8007                       	dc.b	nRst, $07
00098662 E105                       	smpsAlterNote       $05
00098664 0101                       	dc.b	$01, $01
00098666 E102                       	smpsAlterNote       $02
00098668 01                         	dc.b	$01
00098669 E1FC                       	smpsAlterNote       $FC
0009866B 01                         	dc.b	$01
0009866C E1FF                       	smpsAlterNote       $FF
0009866E ECF5                       	smpsPSGAlterVol     $F5
00098670 9B06                       	dc.b	nD2, $06
00098672 EC04                       	smpsPSGAlterVol     $04
00098674 E701                       	dc.b	smpsNoAttack, $01
00098676 EC07                       	smpsPSGAlterVol     $07
00098678 8003                       	dc.b	nRst, $03
0009867A ECF5                       	smpsPSGAlterVol     $F5
0009867C 9B06                       	dc.b	nD2, $06
0009867E EC04                       	smpsPSGAlterVol     $04
00098680 E701                       	dc.b	smpsNoAttack, $01
00098682 EC07                       	smpsPSGAlterVol     $07
00098684 8006                       	dc.b	nRst, $06
00098686 E102                       	smpsAlterNote       $02
00098688 01                         	dc.b	$01
00098689 E106                       	smpsAlterNote       $06
0009868B 01                         	dc.b	$01
0009868C E102                       	smpsAlterNote       $02
0009868E 01                         	dc.b	$01
0009868F E1FF                       	smpsAlterNote       $FF
00098691 01                         	dc.b	$01
00098692 ECF5                       	smpsPSGAlterVol     $F5
00098694 9B06                       	dc.b	nD2, $06
00098696 EC04                       	smpsPSGAlterVol     $04
00098698 E701                       	dc.b	smpsNoAttack, $01
0009869A EC07                       	smpsPSGAlterVol     $07
0009869C 8003                       	dc.b	nRst, $03
0009869E ECF5                       	smpsPSGAlterVol     $F5
000986A0 9B07                       	dc.b	nD2, $07
000986A2 E1FE                       	smpsAlterNote       $FE
000986A4 9706                       	dc.b	nBb1, $06
000986A6 EC04                       	smpsPSGAlterVol     $04
000986A8 E701                       	dc.b	smpsNoAttack, $01
000986AA ECFC                       	smpsPSGAlterVol     $FC
000986AC 9703                       	dc.b	nBb1, $03
000986AE EC04                       	smpsPSGAlterVol     $04
000986B0 E701                       	dc.b	smpsNoAttack, $01
000986B2 ECFC                       	smpsPSGAlterVol     $FC
000986B4 9702                       	dc.b	nBb1, $02
000986B6 EC04                       	smpsPSGAlterVol     $04
000986B8 E701                       	dc.b	smpsNoAttack, $01
000986BA ECFC                       	smpsPSGAlterVol     $FC
000986BC 9606                       	dc.b	nA1, $06
000986BE EC04                       	smpsPSGAlterVol     $04
000986C0 E701                       	dc.b	smpsNoAttack, $01
000986C2 EC07                       	smpsPSGAlterVol     $07
000986C4 8006                       	dc.b	nRst, $06
000986C6 E101                       	smpsAlterNote       $01
000986C8 01                         	dc.b	$01
000986C9 E107                       	smpsAlterNote       $07
000986CB 01                         	dc.b	$01
000986CC E101                       	smpsAlterNote       $01
000986CE 01                         	dc.b	$01
000986CF E1F8                       	smpsAlterNote       $F8
000986D1 01                         	dc.b	$01
000986D2 E1F7                       	smpsAlterNote       $F7
000986D4 01                         	dc.b	$01
000986D5 E1FC                       	smpsAlterNote       $FC
000986D7 01                         	dc.b	$01
000986D8 E106                       	smpsAlterNote       $06
000986DA 01                         	dc.b	$01
000986DB E107                       	smpsAlterNote       $07
000986DD 01                         	dc.b	$01
000986DE E101                       	smpsAlterNote       $01
000986E0 01                         	dc.b	$01
000986E1 E1F8                       	smpsAlterNote       $F8
000986E3 0101                       	dc.b	$01, $01
000986E5 E1FC                       	smpsAlterNote       $FC
000986E7 ECF5                       	smpsPSGAlterVol     $F5
000986E9 8F06                       	dc.b	nD1, $06
000986EB EC04                       	smpsPSGAlterVol     $04
000986ED E701                       	dc.b	smpsNoAttack, $01
000986EF EC07                       	smpsPSGAlterVol     $07
000986F1 8003                       	dc.b	nRst, $03
000986F3 ECF5                       	smpsPSGAlterVol     $F5
000986F5 8F06                       	dc.b	nD1, $06
000986F7 EC04                       	smpsPSGAlterVol     $04
000986F9 E701                       	dc.b	smpsNoAttack, $01
000986FB EC07                       	smpsPSGAlterVol     $07
000986FD 8006                       	dc.b	nRst, $06
000986FF E1FF                       	smpsAlterNote       $FF
00098701 01                         	dc.b	$01
00098702 E102                       	smpsAlterNote       $02
00098704 01                         	dc.b	$01
00098705 E101                       	smpsAlterNote       $01
00098707 01                         	dc.b	$01
00098708 E1FC                       	smpsAlterNote       $FC
0009870A 01                         	dc.b	$01
0009870B ECF5                       	smpsPSGAlterVol     $F5
0009870D 9007                       	dc.b	nEb1, $07
0009870F EC0B                       	smpsPSGAlterVol     $0B
00098711 8004                       	dc.b	nRst, $04
00098713 ECF5                       	smpsPSGAlterVol     $F5
00098715 9006                       	dc.b	nEb1, $06
00098717 EC0B                       	smpsPSGAlterVol     $0B
00098719 8007                       	dc.b	nRst, $07
0009871B E103                       	smpsAlterNote       $03
0009871D 0101                       	dc.b	$01, $01
0009871F E1FC                       	smpsAlterNote       $FC
00098721 01                         	dc.b	$01
00098722 E1F9                       	smpsAlterNote       $F9
00098724 01                         	dc.b	$01
00098725 E1FC                       	smpsAlterNote       $FC
00098727 ECF5                       	smpsPSGAlterVol     $F5
00098729 8F06                       	dc.b	nD1, $06
0009872B EC04                       	smpsPSGAlterVol     $04
0009872D E701                       	dc.b	smpsNoAttack, $01
0009872F EC07                       	smpsPSGAlterVol     $07
00098731 8003                       	dc.b	nRst, $03
00098733 ECF5                       	smpsPSGAlterVol     $F5
00098735 8F06                       	dc.b	nD1, $06
00098737 EC04                       	smpsPSGAlterVol     $04
00098739 E701                       	dc.b	smpsNoAttack, $01
0009873B EC07                       	smpsPSGAlterVol     $07
0009873D 8006                       	dc.b	nRst, $06
0009873F E1FF                       	smpsAlterNote       $FF
00098741 01                         	dc.b	$01
00098742 E103                       	smpsAlterNote       $03
00098744 01                         	dc.b	$01
00098745 E1FF                       	smpsAlterNote       $FF
00098747 01                         	dc.b	$01
00098748 E1F9                       	smpsAlterNote       $F9
0009874A 01                         	dc.b	$01
0009874B E1FC                       	smpsAlterNote       $FC
0009874D ECF5                       	smpsPSGAlterVol     $F5
0009874F 8F06                       	dc.b	nD1, $06
00098751 EC04                       	smpsPSGAlterVol     $04
00098753 E701                       	dc.b	smpsNoAttack, $01
00098755 EC07                       	smpsPSGAlterVol     $07
00098757 8003                       	dc.b	nRst, $03
00098759 ECF5                       	smpsPSGAlterVol     $F5
0009875B 8F07                       	dc.b	nD1, $07
0009875D EC0B                       	smpsPSGAlterVol     $0B
0009875F 8006                       	dc.b	nRst, $06
00098761 E1FF                       	smpsAlterNote       $FF
00098763 01                         	dc.b	$01
00098764 E102                       	smpsAlterNote       $02
00098766 0101                       	dc.b	$01, $01
00098768 E1FC                       	smpsAlterNote       $FC
0009876A 01                         	dc.b	$01
0009876B ECF5                       	smpsPSGAlterVol     $F5
0009876D 8F07                       	dc.b	nD1, $07
0009876F EC0B                       	smpsPSGAlterVol     $0B
00098771 8004                       	dc.b	nRst, $04
00098773 ECF5                       	smpsPSGAlterVol     $F5
00098775 8F06                       	dc.b	nD1, $06
00098777 EC04                       	smpsPSGAlterVol     $04
00098779 E701                       	dc.b	smpsNoAttack, $01
0009877B EC07                       	smpsPSGAlterVol     $07
0009877D 8006                       	dc.b	nRst, $06
0009877F E101                       	smpsAlterNote       $01
00098781 01                         	dc.b	$01
00098782 E102                       	smpsAlterNote       $02
00098784 01                         	dc.b	$01
00098785 E1FF                       	smpsAlterNote       $FF
00098787 01                         	dc.b	$01
00098788 E1F9                       	smpsAlterNote       $F9
0009878A 01                         	dc.b	$01
0009878B E1FC                       	smpsAlterNote       $FC
0009878D ECF5                       	smpsPSGAlterVol     $F5
0009878F 9006                       	dc.b	nEb1, $06
00098791 EC04                       	smpsPSGAlterVol     $04
00098793 E701                       	dc.b	smpsNoAttack, $01
00098795 EC07                       	smpsPSGAlterVol     $07
00098797 8003                       	dc.b	nRst, $03
00098799 ECF5                       	smpsPSGAlterVol     $F5
0009879B 9006                       	dc.b	nEb1, $06
0009879D EC04                       	smpsPSGAlterVol     $04
0009879F E701                       	dc.b	smpsNoAttack, $01
000987A1 EC07                       	smpsPSGAlterVol     $07
000987A3 8006                       	dc.b	nRst, $06
000987A5 E100                       	smpsAlterNote       $00
000987A7 01                         	dc.b	$01
000987A8 E102                       	smpsAlterNote       $02
000987AA 01                         	dc.b	$01
000987AB E100                       	smpsAlterNote       $00
000987AD 01                         	dc.b	$01
000987AE E1FF                       	smpsAlterNote       $FF
000987B0 01                         	dc.b	$01
000987B1 ECF5                       	smpsPSGAlterVol     $F5
000987B3 9B06                       	dc.b	nD2, $06
000987B5 EC04                       	smpsPSGAlterVol     $04
000987B7 E701                       	dc.b	smpsNoAttack, $01
000987B9 EC07                       	smpsPSGAlterVol     $07
000987BB 8003                       	dc.b	nRst, $03
000987BD ECF5                       	smpsPSGAlterVol     $F5
000987BF 9B07                       	dc.b	nD2, $07
000987C1 EC0B                       	smpsPSGAlterVol     $0B
000987C3 8007                       	dc.b	nRst, $07
000987C5 E105                       	smpsAlterNote       $05
000987C7 0101                       	dc.b	$01, $01
000987C9 E1FF                       	smpsAlterNote       $FF
000987CB 01                         	dc.b	$01
000987CC E1FC                       	smpsAlterNote       $FC
000987CE 01                         	dc.b	$01
000987CF E1FF                       	smpsAlterNote       $FF
000987D1 ECF5                       	smpsPSGAlterVol     $F5
000987D3 9B06                       	dc.b	nD2, $06
000987D5 EC0B                       	smpsPSGAlterVol     $0B
000987D7 8004                       	dc.b	nRst, $04
000987D9 ECF5                       	smpsPSGAlterVol     $F5
000987DB 9B06                       	dc.b	nD2, $06
000987DD EC04                       	smpsPSGAlterVol     $04
000987DF E701                       	dc.b	smpsNoAttack, $01
000987E1 EC07                       	smpsPSGAlterVol     $07
000987E3 8006                       	dc.b	nRst, $06
000987E5 E102                       	smpsAlterNote       $02
000987E7 01                         	dc.b	$01
000987E8 E106                       	smpsAlterNote       $06
000987EA 01                         	dc.b	$01
000987EB E102                       	smpsAlterNote       $02
000987ED 01                         	dc.b	$01
000987EE E1FC                       	smpsAlterNote       $FC
000987F0 01                         	dc.b	$01
000987F1 E1FF                       	smpsAlterNote       $FF
000987F3 ECF5                       	smpsPSGAlterVol     $F5
000987F5 9B06                       	dc.b	nD2, $06
000987F7 EC04                       	smpsPSGAlterVol     $04
000987F9 E701                       	dc.b	smpsNoAttack, $01
000987FB EC07                       	smpsPSGAlterVol     $07
000987FD 8003                       	dc.b	nRst, $03
000987FF ECF5                       	smpsPSGAlterVol     $F5
00098801 9B07                       	dc.b	nD2, $07
00098803 EC0B                       	smpsPSGAlterVol     $0B
00098805 8006                       	dc.b	nRst, $06
00098807 E102                       	smpsAlterNote       $02
00098809 01                         	dc.b	$01
0009880A E105                       	smpsAlterNote       $05
0009880C 0101                       	dc.b	$01, $01
0009880E E1FF                       	smpsAlterNote       $FF
00098810 01                         	dc.b	$01
00098811 ECF5                       	smpsPSGAlterVol     $F5
00098813 9B07                       	dc.b	nD2, $07
00098815 EC0B                       	smpsPSGAlterVol     $0B
00098817 8004                       	dc.b	nRst, $04
00098819 ECF5                       	smpsPSGAlterVol     $F5
0009881B 9B06                       	dc.b	nD2, $06
0009881D EC0B                       	smpsPSGAlterVol     $0B
0009881F 8007                       	dc.b	nRst, $07
00098821 E105                       	smpsAlterNote       $05
00098823 0101                       	dc.b	$01, $01
00098825 E102                       	smpsAlterNote       $02
00098827 01                         	dc.b	$01
00098828 E1FC                       	smpsAlterNote       $FC
0009882A 01                         	dc.b	$01
0009882B E1FF                       	smpsAlterNote       $FF
0009882D ECF5                       	smpsPSGAlterVol     $F5
0009882F 9B06                       	dc.b	nD2, $06
00098831 EC04                       	smpsPSGAlterVol     $04
00098833 E701                       	dc.b	smpsNoAttack, $01
00098835 EC07                       	smpsPSGAlterVol     $07
00098837 8003                       	dc.b	nRst, $03
00098839 ECF5                       	smpsPSGAlterVol     $F5
0009883B 9B06                       	dc.b	nD2, $06
0009883D EC04                       	smpsPSGAlterVol     $04
0009883F E701                       	dc.b	smpsNoAttack, $01
00098841 EC07                       	smpsPSGAlterVol     $07
00098843 8006                       	dc.b	nRst, $06
00098845 E102                       	smpsAlterNote       $02
00098847 01                         	dc.b	$01
00098848 E106                       	smpsAlterNote       $06
0009884A 01                         	dc.b	$01
0009884B E102                       	smpsAlterNote       $02
0009884D 01                         	dc.b	$01
0009884E E1FF                       	smpsAlterNote       $FF
00098850 01                         	dc.b	$01
00098851 ECF5                       	smpsPSGAlterVol     $F5
00098853 9B06                       	dc.b	nD2, $06
00098855 EC04                       	smpsPSGAlterVol     $04
00098857 E701                       	dc.b	smpsNoAttack, $01
00098859 EC07                       	smpsPSGAlterVol     $07
0009885B 8003                       	dc.b	nRst, $03
0009885D ECF5                       	smpsPSGAlterVol     $F5
0009885F 9B07                       	dc.b	nD2, $07
00098861 EC0B                       	smpsPSGAlterVol     $0B
00098863 8007                       	dc.b	nRst, $07
00098865 E105                       	smpsAlterNote       $05
00098867 0101                       	dc.b	$01, $01
00098869 E1FF                       	smpsAlterNote       $FF
0009886B 01                         	dc.b	$01
0009886C E1FC                       	smpsAlterNote       $FC
0009886E 01                         	dc.b	$01
0009886F E1FF                       	smpsAlterNote       $FF
00098871 ECF5                       	smpsPSGAlterVol     $F5
00098873 9B06                       	dc.b	nD2, $06
00098875 EC0B                       	smpsPSGAlterVol     $0B
00098877 8004                       	dc.b	nRst, $04
00098879 ECF5                       	smpsPSGAlterVol     $F5
0009887B 9B06                       	dc.b	nD2, $06
0009887D EC04                       	smpsPSGAlterVol     $04
0009887F E701                       	dc.b	smpsNoAttack, $01
00098881 EC07                       	smpsPSGAlterVol     $07
00098883 8006                       	dc.b	nRst, $06
00098885 E102                       	smpsAlterNote       $02
00098887 01                         	dc.b	$01
00098888 E106                       	smpsAlterNote       $06
0009888A 01                         	dc.b	$01
0009888B E102                       	smpsAlterNote       $02
0009888D 01                         	dc.b	$01
0009888E E1FC                       	smpsAlterNote       $FC
00098890 01                         	dc.b	$01
00098891 E1FF                       	smpsAlterNote       $FF
00098893 ECF5                       	smpsPSGAlterVol     $F5
00098895 9B06                       	dc.b	nD2, $06
00098897 EC04                       	smpsPSGAlterVol     $04
00098899 E701                       	dc.b	smpsNoAttack, $01
0009889B EC07                       	smpsPSGAlterVol     $07
0009889D 8003                       	dc.b	nRst, $03
0009889F ECF5                       	smpsPSGAlterVol     $F5
000988A1 9B06                       	dc.b	nD2, $06
000988A3 EC04                       	smpsPSGAlterVol     $04
000988A5 E701                       	dc.b	smpsNoAttack, $01
000988A7 EC07                       	smpsPSGAlterVol     $07
000988A9 8006                       	dc.b	nRst, $06
000988AB E102                       	smpsAlterNote       $02
000988AD 01                         	dc.b	$01
000988AE E106                       	smpsAlterNote       $06
000988B0 01                         	dc.b	$01
000988B1 E105                       	smpsAlterNote       $05
000988B3 01                         	dc.b	$01
000988B4 E1FF                       	smpsAlterNote       $FF
000988B6 01                         	dc.b	$01
000988B7 ECF5                       	smpsPSGAlterVol     $F5
000988B9 9B07                       	dc.b	nD2, $07
000988BB EC0B                       	smpsPSGAlterVol     $0B
000988BD 8004                       	dc.b	nRst, $04
000988BF ECF5                       	smpsPSGAlterVol     $F5
000988C1 9B06                       	dc.b	nD2, $06
000988C3 EC0B                       	smpsPSGAlterVol     $0B
000988C5 8007                       	dc.b	nRst, $07
000988C7 E105                       	smpsAlterNote       $05
000988C9 0101                       	dc.b	$01, $01
000988CB E101                       	smpsAlterNote       $01
000988CD 01                         	dc.b	$01
000988CE E1FB                       	smpsAlterNote       $FB
000988D0 01                         	dc.b	$01
000988D1 E1FE                       	smpsAlterNote       $FE
000988D3 ECF5                       	smpsPSGAlterVol     $F5
000988D5 9A06                       	dc.b	nCs2, $06
000988D7 EC04                       	smpsPSGAlterVol     $04
000988D9 E701                       	dc.b	smpsNoAttack, $01
000988DB EC07                       	smpsPSGAlterVol     $07
000988DD 8003                       	dc.b	nRst, $03
000988DF ECF5                       	smpsPSGAlterVol     $F5
000988E1 9A06                       	dc.b	nCs2, $06
000988E3 EC04                       	smpsPSGAlterVol     $04
000988E5 E701                       	dc.b	smpsNoAttack, $01
000988E7 EC07                       	smpsPSGAlterVol     $07
000988E9 8003                       	dc.b	nRst, $03
000988EB E1FC                       	smpsAlterNote       $FC
000988ED ECF5                       	smpsPSGAlterVol     $F5
000988EF 8F07                       	dc.b	nD1, $07
000988F1 EC0B                       	smpsPSGAlterVol     $0B
000988F3 8006                       	dc.b	nRst, $06
000988F5 E1FF                       	smpsAlterNote       $FF
000988F7 01                         	dc.b	$01
000988F8 E103                       	smpsAlterNote       $03
000988FA 01                         	dc.b	$01
000988FB E102                       	smpsAlterNote       $02
000988FD 01                         	dc.b	$01
000988FE E1FC                       	smpsAlterNote       $FC
00098900 01                         	dc.b	$01
00098901 E1F8                       	smpsAlterNote       $F8
00098903 01                         	dc.b	$01
00098904 E1FC                       	smpsAlterNote       $FC
00098906 01                         	dc.b	$01
00098907 E1FF                       	smpsAlterNote       $FF
00098909 01                         	dc.b	$01
0009890A E103                       	smpsAlterNote       $03
0009890C 01                         	dc.b	$01
0009890D E1FC                       	smpsAlterNote       $FC
0009890F ECF5                       	smpsPSGAlterVol     $F5
00098911 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098915 EC04                       	smpsPSGAlterVol     $04
00098917 E701                       	dc.b	smpsNoAttack, $01
00098919 EC07                       	smpsPSGAlterVol     $07
0009891B 8009                       	dc.b	nRst, $09
0009891D E1FF                       	smpsAlterNote       $FF
0009891F 01                         	dc.b	$01
00098920 E103                       	smpsAlterNote       $03
00098922 01                         	dc.b	$01
00098923 E102                       	smpsAlterNote       $02
00098925 01                         	dc.b	$01
00098926 E1FC                       	smpsAlterNote       $FC
00098928 01                         	dc.b	$01
00098929 E1F8                       	smpsAlterNote       $F8
0009892B 01                         	dc.b	$01
0009892C E1FC                       	smpsAlterNote       $FC
0009892E 01                         	dc.b	$01
0009892F E1FF                       	smpsAlterNote       $FF
00098931 01                         	dc.b	$01
00098932 E103                       	smpsAlterNote       $03
00098934 01                         	dc.b	$01
00098935 E1FF                       	smpsAlterNote       $FF
00098937 01                         	dc.b	$01
00098938 E1F9                       	smpsAlterNote       $F9
0009893A 01                         	dc.b	$01
0009893B E1F8                       	smpsAlterNote       $F8
0009893D 01                         	dc.b	$01
0009893E E1FC                       	smpsAlterNote       $FC
00098940 01                         	dc.b	$01
00098941 E102                       	smpsAlterNote       $02
00098943 0101                       	dc.b	$01, $01
00098945 E1FF                       	smpsAlterNote       $FF
00098947 01                         	dc.b	$01
00098948 E1FC                       	smpsAlterNote       $FC
0009894A ECF5                       	smpsPSGAlterVol     $F5
0009894C 8F02                       	dc.b	nD1, $02
0009894E EC04                       	smpsPSGAlterVol     $04
00098950 E701                       	dc.b	smpsNoAttack, $01
00098952 ECFC                       	smpsPSGAlterVol     $FC
00098954 E1FB                       	smpsAlterNote       $FB
00098956 8D06                       	dc.b	nC1, $06
00098958 EC04                       	smpsPSGAlterVol     $04
0009895A E701                       	dc.b	smpsNoAttack, $01
0009895C EC07                       	smpsPSGAlterVol     $07
0009895E 8006                       	dc.b	nRst, $06
00098960 E1FE                       	smpsAlterNote       $FE
00098962 01                         	dc.b	$01
00098963 E102                       	smpsAlterNote       $02
00098965 01                         	dc.b	$01
00098966 E1FE                       	smpsAlterNote       $FE
00098968 01                         	dc.b	$01
00098969 E1FB                       	smpsAlterNote       $FB
0009896B 01                         	dc.b	$01
0009896C E1F7                       	smpsAlterNote       $F7
0009896E 01                         	dc.b	$01
0009896F E1FB                       	smpsAlterNote       $FB
00098971 01                         	dc.b	$01
00098972 E101                       	smpsAlterNote       $01
00098974 01                         	dc.b	$01
00098975 E102                       	smpsAlterNote       $02
00098977 01                         	dc.b	$01
00098978 E1FB                       	smpsAlterNote       $FB
0009897A ECF5                       	smpsPSGAlterVol     $F5
0009897C 8D02                       	dc.b	nC1, $02
0009897E EC04                       	smpsPSGAlterVol     $04
00098980 E701                       	dc.b	smpsNoAttack, $01
00098982 E1FC                       	smpsAlterNote       $FC
00098984 ECFC                       	smpsPSGAlterVol     $FC
00098986 8F0D                       	dc.b	nD1, $0D
00098988 E1FF                       	smpsAlterNote       $FF
0009898A E701                       	dc.b	smpsNoAttack, $01
0009898C E103                       	smpsAlterNote       $03
0009898E E701                       	dc.b	smpsNoAttack, $01
00098990 E1FF                       	smpsAlterNote       $FF
00098992 E701                       	dc.b	smpsNoAttack, $01
00098994 E1FC                       	smpsAlterNote       $FC
00098996 E701                       	dc.b	smpsNoAttack, $01
00098998 E1F8                       	smpsAlterNote       $F8
0009899A E701                       	dc.b	smpsNoAttack, $01
0009899C E1FC                       	smpsAlterNote       $FC
0009899E E701                       	dc.b	smpsNoAttack, $01
000989A0 E102                       	smpsAlterNote       $02
000989A2 E701                       	dc.b	smpsNoAttack, $01
000989A4 E103                       	smpsAlterNote       $03
000989A6 E701                       	dc.b	smpsNoAttack, $01
000989A8 E1FF                       	smpsAlterNote       $FF
000989AA E701                       	dc.b	smpsNoAttack, $01
000989AC E1F9                       	smpsAlterNote       $F9
000989AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989B2 E1FC                       	smpsAlterNote       $FC
000989B4 E701                       	dc.b	smpsNoAttack, $01
000989B6 E102                       	smpsAlterNote       $02
000989B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989BC E1FC                       	smpsAlterNote       $FC
000989BE E701                       	dc.b	smpsNoAttack, $01
000989C0 E1F9                       	smpsAlterNote       $F9
000989C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000989C6 E1FF                       	smpsAlterNote       $FF
000989C8 EC04                       	smpsPSGAlterVol     $04
000989CA E701                       	dc.b	smpsNoAttack, $01
000989CC EC07                       	smpsPSGAlterVol     $07
000989CE E103                       	smpsAlterNote       $03
000989D0 8001                       	dc.b	nRst, $01
000989D2 E102                       	smpsAlterNote       $02
000989D4 01                         	dc.b	$01
000989D5 E1FB                       	smpsAlterNote       $FB
000989D7 01                         	dc.b	$01
000989D8 E1F7                       	smpsAlterNote       $F7
000989DA 01                         	dc.b	$01
000989DB E1FB                       	smpsAlterNote       $FB
000989DD 01                         	dc.b	$01
000989DE E102                       	smpsAlterNote       $02
000989E0 01                         	dc.b	$01
000989E1 E103                       	smpsAlterNote       $03
000989E3 01                         	dc.b	$01
000989E4 E1FB                       	smpsAlterNote       $FB
000989E6 ECF5                       	smpsPSGAlterVol     $F5
000989E8 8E06                       	dc.b	nCs1, $06
000989EA EC04                       	smpsPSGAlterVol     $04
000989EC E701                       	dc.b	smpsNoAttack, $01
000989EE EC07                       	smpsPSGAlterVol     $07
000989F0 8003                       	dc.b	nRst, $03
000989F2 ECF5                       	smpsPSGAlterVol     $F5
000989F4 8E06                       	dc.b	nCs1, $06
000989F6 EC04                       	smpsPSGAlterVol     $04
000989F8 E701                       	dc.b	smpsNoAttack, $01
000989FA EC07                       	smpsPSGAlterVol     $07
000989FC 8006                       	dc.b	nRst, $06
000989FE E1FE                       	smpsAlterNote       $FE
00098A00 01                         	dc.b	$01
00098A01 E102                       	smpsAlterNote       $02
00098A03 01                         	dc.b	$01
00098A04 E1FE                       	smpsAlterNote       $FE
00098A06 01                         	dc.b	$01
00098A07 E1F9                       	smpsAlterNote       $F9
00098A09 01                         	dc.b	$01
00098A0A E1FC                       	smpsAlterNote       $FC
00098A0C ECF5                       	smpsPSGAlterVol     $F5
00098A0E 8F06                       	dc.b	nD1, $06
00098A10 EC04                       	smpsPSGAlterVol     $04
00098A12 E701                       	dc.b	smpsNoAttack, $01
00098A14 EC07                       	smpsPSGAlterVol     $07
00098A16 8003                       	dc.b	nRst, $03
00098A18 ECF5                       	smpsPSGAlterVol     $F5
00098A1A 8F07                       	dc.b	nD1, $07
00098A1C EC0B                       	smpsPSGAlterVol     $0B
00098A1E 8006                       	dc.b	nRst, $06
00098A20 E1FF                       	smpsAlterNote       $FF
00098A22 01                         	dc.b	$01
00098A23 E102                       	smpsAlterNote       $02
00098A25 0101                       	dc.b	$01, $01
00098A27 E1FB                       	smpsAlterNote       $FB
00098A29 01                         	dc.b	$01
00098A2A ECF5                       	smpsPSGAlterVol     $F5
00098A2C 8E07                       	dc.b	nCs1, $07
00098A2E EC0B                       	smpsPSGAlterVol     $0B
00098A30 8004                       	dc.b	nRst, $04
00098A32 ECF5                       	smpsPSGAlterVol     $F5
00098A34 8E06                       	dc.b	nCs1, $06
00098A36 EC04                       	smpsPSGAlterVol     $04
00098A38 E701                       	dc.b	smpsNoAttack, $01
00098A3A EC07                       	smpsPSGAlterVol     $07
00098A3C 8006                       	dc.b	nRst, $06
00098A3E E101                       	smpsAlterNote       $01
00098A40 01                         	dc.b	$01
00098A41 E102                       	smpsAlterNote       $02
00098A43 01                         	dc.b	$01
00098A44 E1FE                       	smpsAlterNote       $FE
00098A46 01                         	dc.b	$01
00098A47 E1F8                       	smpsAlterNote       $F8
00098A49 01                         	dc.b	$01
00098A4A E1FB                       	smpsAlterNote       $FB
00098A4C ECF5                       	smpsPSGAlterVol     $F5
00098A4E 8E06                       	dc.b	nCs1, $06
00098A50 EC04                       	smpsPSGAlterVol     $04
00098A52 E701                       	dc.b	smpsNoAttack, $01
00098A54 EC07                       	smpsPSGAlterVol     $07
00098A56 8003                       	dc.b	nRst, $03
00098A58 ECF5                       	smpsPSGAlterVol     $F5
00098A5A 8E06                       	dc.b	nCs1, $06
00098A5C EC04                       	smpsPSGAlterVol     $04
00098A5E E701                       	dc.b	smpsNoAttack, $01
00098A60 EC07                       	smpsPSGAlterVol     $07
00098A62 8004                       	dc.b	nRst, $04
00098A64 E1FC                       	smpsAlterNote       $FC
00098A66 ECF5                       	smpsPSGAlterVol     $F5
00098A68 8F06                       	dc.b	nD1, $06
00098A6A EC0B                       	smpsPSGAlterVol     $0B
00098A6C 8006                       	dc.b	nRst, $06
00098A6E E1FF                       	smpsAlterNote       $FF
00098A70 01                         	dc.b	$01
00098A71 E102                       	smpsAlterNote       $02
00098A73 0101                       	dc.b	$01, $01
00098A75 E1FC                       	smpsAlterNote       $FC
00098A77 01                         	dc.b	$01
00098A78 E1F8                       	smpsAlterNote       $F8
00098A7A 01                         	dc.b	$01
00098A7B E1F9                       	smpsAlterNote       $F9
00098A7D 01                         	dc.b	$01
00098A7E E1FF                       	smpsAlterNote       $FF
00098A80 01                         	dc.b	$01
00098A81 E103                       	smpsAlterNote       $03
00098A83 01                         	dc.b	$01
00098A84 E1FC                       	smpsAlterNote       $FC
00098A86 ECF5                       	smpsPSGAlterVol     $F5
00098A88 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00098A8C EC04                       	smpsPSGAlterVol     $04
00098A8E E701                       	dc.b	smpsNoAttack, $01
00098A90 EC07                       	smpsPSGAlterVol     $07
00098A92 8009                       	dc.b	nRst, $09
00098A94 E1FF                       	smpsAlterNote       $FF
00098A96 01                         	dc.b	$01
00098A97 E102                       	smpsAlterNote       $02
00098A99 0101                       	dc.b	$01, $01
00098A9B E1FC                       	smpsAlterNote       $FC
00098A9D 01                         	dc.b	$01
00098A9E E1F8                       	smpsAlterNote       $F8
00098AA0 01                         	dc.b	$01
00098AA1 E1F9                       	smpsAlterNote       $F9
00098AA3 01                         	dc.b	$01
00098AA4 E1FF                       	smpsAlterNote       $FF
00098AA6 01                         	dc.b	$01
00098AA7 E103                       	smpsAlterNote       $03
00098AA9 01                         	dc.b	$01
00098AAA E1FF                       	smpsAlterNote       $FF
00098AAC 01                         	dc.b	$01
00098AAD E1FC                       	smpsAlterNote       $FC
00098AAF 01                         	dc.b	$01
00098AB0 E1F8                       	smpsAlterNote       $F8
00098AB2 01                         	dc.b	$01
00098AB3 E1FC                       	smpsAlterNote       $FC
00098AB5 01                         	dc.b	$01
00098AB6 E102                       	smpsAlterNote       $02
00098AB8 01                         	dc.b	$01
00098AB9 E103                       	smpsAlterNote       $03
00098ABB 01                         	dc.b	$01
00098ABC E1FF                       	smpsAlterNote       $FF
00098ABE 01                         	dc.b	$01
00098ABF E1FC                       	smpsAlterNote       $FC
00098AC1 ECF5                       	smpsPSGAlterVol     $F5
00098AC3 8F03                       	dc.b	nD1, $03
00098AC5 E1FB                       	smpsAlterNote       $FB
00098AC7 8D06                       	dc.b	nC1, $06
00098AC9 EC04                       	smpsPSGAlterVol     $04
00098ACB E701                       	dc.b	smpsNoAttack, $01
00098ACD EC07                       	smpsPSGAlterVol     $07
00098ACF 8006                       	dc.b	nRst, $06
00098AD1 E1FE                       	smpsAlterNote       $FE
00098AD3 01                         	dc.b	$01
00098AD4 E102                       	smpsAlterNote       $02
00098AD6 01                         	dc.b	$01
00098AD7 E101                       	smpsAlterNote       $01
00098AD9 01                         	dc.b	$01
00098ADA E1FB                       	smpsAlterNote       $FB
00098ADC 01                         	dc.b	$01
00098ADD E1F7                       	smpsAlterNote       $F7
00098ADF 01                         	dc.b	$01
00098AE0 E1FB                       	smpsAlterNote       $FB
00098AE2 01                         	dc.b	$01
00098AE3 E1FE                       	smpsAlterNote       $FE
00098AE5 01                         	dc.b	$01
00098AE6 E102                       	smpsAlterNote       $02
00098AE8 01                         	dc.b	$01
00098AE9 E1FB                       	smpsAlterNote       $FB
00098AEB ECF5                       	smpsPSGAlterVol     $F5
00098AED 8D03                       	dc.b	nC1, $03
00098AEF E1FC                       	smpsAlterNote       $FC
00098AF1 8F0D                       	dc.b	nD1, $0D
00098AF3 E1FF                       	smpsAlterNote       $FF
00098AF5 E701                       	dc.b	smpsNoAttack, $01
00098AF7 E103                       	smpsAlterNote       $03
00098AF9 E701                       	dc.b	smpsNoAttack, $01
00098AFB E1FF                       	smpsAlterNote       $FF
00098AFD E701                       	dc.b	smpsNoAttack, $01
00098AFF E1FC                       	smpsAlterNote       $FC
00098B01 E701                       	dc.b	smpsNoAttack, $01
00098B03 E1F8                       	smpsAlterNote       $F8
00098B05 E701                       	dc.b	smpsNoAttack, $01
00098B07 E1FC                       	smpsAlterNote       $FC
00098B09 E701                       	dc.b	smpsNoAttack, $01
00098B0B E102                       	smpsAlterNote       $02
00098B0D E701                       	dc.b	smpsNoAttack, $01
00098B0F E103                       	smpsAlterNote       $03
00098B11 E701                       	dc.b	smpsNoAttack, $01
00098B13 E1FF                       	smpsAlterNote       $FF
00098B15 E701                       	dc.b	smpsNoAttack, $01
00098B17 E1F9                       	smpsAlterNote       $F9
00098B19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B1D E1FC                       	smpsAlterNote       $FC
00098B1F E701                       	dc.b	smpsNoAttack, $01
00098B21 E102                       	smpsAlterNote       $02
00098B23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B27 E1FF                       	smpsAlterNote       $FF
00098B29 E701                       	dc.b	smpsNoAttack, $01
00098B2B E1F9                       	smpsAlterNote       $F9
00098B2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00098B31 E1FF                       	smpsAlterNote       $FF
00098B33 EC04                       	smpsPSGAlterVol     $04
00098B35 E701                       	dc.b	smpsNoAttack, $01
00098B37 EC07                       	smpsPSGAlterVol     $07
00098B39 E103                       	smpsAlterNote       $03
00098B3B 8001                       	dc.b	nRst, $01
00098B3D E102                       	smpsAlterNote       $02
00098B3F 01                         	dc.b	$01
00098B40 E1FB                       	smpsAlterNote       $FB
00098B42 01                         	dc.b	$01
00098B43 E1F7                       	smpsAlterNote       $F7
00098B45 01                         	dc.b	$01
00098B46 E1FB                       	smpsAlterNote       $FB
00098B48 01                         	dc.b	$01
00098B49 E1FF                       	smpsAlterNote       $FF
00098B4B 01                         	dc.b	$01
00098B4C E103                       	smpsAlterNote       $03
00098B4E 01                         	dc.b	$01
00098B4F E1FB                       	smpsAlterNote       $FB
00098B51 ECF5                       	smpsPSGAlterVol     $F5
00098B53 8E06                       	dc.b	nCs1, $06
00098B55 EC04                       	smpsPSGAlterVol     $04
00098B57 E701                       	dc.b	smpsNoAttack, $01
00098B59 EC07                       	smpsPSGAlterVol     $07
00098B5B 8003                       	dc.b	nRst, $03
00098B5D ECF5                       	smpsPSGAlterVol     $F5
00098B5F 8E06                       	dc.b	nCs1, $06
00098B61 EC04                       	smpsPSGAlterVol     $04
00098B63 E701                       	dc.b	smpsNoAttack, $01
00098B65 EC07                       	smpsPSGAlterVol     $07
00098B67 8006                       	dc.b	nRst, $06
00098B69 E1FE                       	smpsAlterNote       $FE
00098B6B 01                         	dc.b	$01
00098B6C E102                       	smpsAlterNote       $02
00098B6E 01                         	dc.b	$01
00098B6F E1FE                       	smpsAlterNote       $FE
00098B71 01                         	dc.b	$01
00098B72 E1FC                       	smpsAlterNote       $FC
00098B74 01                         	dc.b	$01
00098B75 ECF5                       	smpsPSGAlterVol     $F5
00098B77 8F06                       	dc.b	nD1, $06
00098B79 EC04                       	smpsPSGAlterVol     $04
00098B7B E701                       	dc.b	smpsNoAttack, $01
00098B7D EC07                       	smpsPSGAlterVol     $07
00098B7F 8003                       	dc.b	nRst, $03
00098B81 ECF5                       	smpsPSGAlterVol     $F5
00098B83 8F07                       	dc.b	nD1, $07
00098B85 EC0B                       	smpsPSGAlterVol     $0B
00098B87 8007                       	dc.b	nRst, $07
00098B89 E102                       	smpsAlterNote       $02
00098B8B 0101                       	dc.b	$01, $01
00098B8D E1FB                       	smpsAlterNote       $FB
00098B8F 01                         	dc.b	$01
00098B90 E1F8                       	smpsAlterNote       $F8
00098B92 01                         	dc.b	$01
00098B93 E1FB                       	smpsAlterNote       $FB
00098B95 ECF5                       	smpsPSGAlterVol     $F5
00098B97 8E06                       	dc.b	nCs1, $06
00098B99 EC0B                       	smpsPSGAlterVol     $0B
00098B9B 8004                       	dc.b	nRst, $04
00098B9D ECF5                       	smpsPSGAlterVol     $F5
00098B9F 8E06                       	dc.b	nCs1, $06
00098BA1 EC04                       	smpsPSGAlterVol     $04
00098BA3 E701                       	dc.b	smpsNoAttack, $01
00098BA5 EC07                       	smpsPSGAlterVol     $07
00098BA7 8006                       	dc.b	nRst, $06
00098BA9 E1FE                       	smpsAlterNote       $FE
00098BAB 01                         	dc.b	$01
00098BAC E102                       	smpsAlterNote       $02
00098BAE 01                         	dc.b	$01
00098BAF E1FE                       	smpsAlterNote       $FE
00098BB1 01                         	dc.b	$01
00098BB2 E1F9                       	smpsAlterNote       $F9
00098BB4 01                         	dc.b	$01
00098BB5 E1FC                       	smpsAlterNote       $FC
00098BB7 ECF5                       	smpsPSGAlterVol     $F5
00098BB9 8F06                       	dc.b	nD1, $06
00098BBB EC04                       	smpsPSGAlterVol     $04
00098BBD E701                       	dc.b	smpsNoAttack, $01
00098BBF EC07                       	smpsPSGAlterVol     $07
00098BC1 8003                       	dc.b	nRst, $03
00098BC3 ECF5                       	smpsPSGAlterVol     $F5
00098BC5 8F06                       	dc.b	nD1, $06
00098BC7 EC04                       	smpsPSGAlterVol     $04
00098BC9 E701                       	dc.b	smpsNoAttack, $01
00098BCB EC07                       	smpsPSGAlterVol     $07
00098BCD 8006                       	dc.b	nRst, $06
00098BCF E1FF                       	smpsAlterNote       $FF
00098BD1 01                         	dc.b	$01
00098BD2 E103                       	smpsAlterNote       $03
00098BD4 01                         	dc.b	$01
00098BD5 E102                       	smpsAlterNote       $02
00098BD7 01                         	dc.b	$01
00098BD8 E1FB                       	smpsAlterNote       $FB
00098BDA 01                         	dc.b	$01
00098BDB ECF5                       	smpsPSGAlterVol     $F5
00098BDD 8E07                       	dc.b	nCs1, $07
00098BDF EC0B                       	smpsPSGAlterVol     $0B
00098BE1 8004                       	dc.b	nRst, $04
00098BE3 ECF5                       	smpsPSGAlterVol     $F5
00098BE5 8E06                       	dc.b	nCs1, $06
00098BE7 EC0B                       	smpsPSGAlterVol     $0B
00098BE9 8007                       	dc.b	nRst, $07
00098BEB E101                       	smpsAlterNote       $01
00098BED 0101                       	dc.b	$01, $01
00098BEF E1FE                       	smpsAlterNote       $FE
00098BF1 01                         	dc.b	$01
00098BF2 E1F9                       	smpsAlterNote       $F9
00098BF4 01                         	dc.b	$01
00098BF5 E1FC                       	smpsAlterNote       $FC
00098BF7 ECF5                       	smpsPSGAlterVol     $F5
00098BF9 8F06                       	dc.b	nD1, $06
00098BFB EC04                       	smpsPSGAlterVol     $04
00098BFD E701                       	dc.b	smpsNoAttack, $01
00098BFF EC07                       	smpsPSGAlterVol     $07
00098C01 8003                       	dc.b	nRst, $03
00098C03 ECF5                       	smpsPSGAlterVol     $F5
00098C05 8F06                       	dc.b	nD1, $06
00098C07 EC04                       	smpsPSGAlterVol     $04
00098C09 E701                       	dc.b	smpsNoAttack, $01
00098C0B EC07                       	smpsPSGAlterVol     $07
00098C0D 8006                       	dc.b	nRst, $06
00098C0F E1FF                       	smpsAlterNote       $FF
00098C11 01                         	dc.b	$01
00098C12 E103                       	smpsAlterNote       $03
00098C14 01                         	dc.b	$01
00098C15 E1FF                       	smpsAlterNote       $FF
00098C17 01                         	dc.b	$01
00098C18 E1FB                       	smpsAlterNote       $FB
00098C1A 01                         	dc.b	$01
00098C1B ECF5                       	smpsPSGAlterVol     $F5
00098C1D 8E06                       	dc.b	nCs1, $06
00098C1F EC04                       	smpsPSGAlterVol     $04
00098C21 E701                       	dc.b	smpsNoAttack, $01
00098C23 EC07                       	smpsPSGAlterVol     $07
00098C25 8003                       	dc.b	nRst, $03
00098C27 ECF5                       	smpsPSGAlterVol     $F5
00098C29 8E07                       	dc.b	nCs1, $07
00098C2B E1FF                       	smpsAlterNote       $FF
00098C2D 9B06                       	dc.b	nD2, $06
00098C2F EC04                       	smpsPSGAlterVol     $04
00098C31 E701                       	dc.b	smpsNoAttack, $01
00098C33 ECFC                       	smpsPSGAlterVol     $FC
00098C35 9B03                       	dc.b	nD2, $03
00098C37 EC04                       	smpsPSGAlterVol     $04
00098C39 E701                       	dc.b	smpsNoAttack, $01
00098C3B ECFC                       	smpsPSGAlterVol     $FC
00098C3D 9B02                       	dc.b	nD2, $02
00098C3F EC04                       	smpsPSGAlterVol     $04
00098C41 E701                       	dc.b	smpsNoAttack, $01
00098C43 ECFC                       	smpsPSGAlterVol     $FC
00098C45 E1FE                       	smpsAlterNote       $FE
00098C47 9A03                       	dc.b	nCs2, $03
00098C49 EC0B                       	smpsPSGAlterVol     $0B
00098C4B 800A                       	dc.b	nRst, $0A
00098C4D E102                       	smpsAlterNote       $02
00098C4F 01                         	dc.b	$01
00098C50 E10A                       	smpsAlterNote       $0A
00098C52 01                         	dc.b	$01
00098C53 E102                       	smpsAlterNote       $02
00098C55 01                         	dc.b	$01
00098C56 E1F7                       	smpsAlterNote       $F7
00098C58 01                         	dc.b	$01
00098C59 E10A                       	smpsAlterNote       $0A
00098C5B 01                         	dc.b	$01
00098C5C E1FC                       	smpsAlterNote       $FC
00098C5E 01                         	dc.b	$01
00098C5F E108                       	smpsAlterNote       $08
00098C61 0101                       	dc.b	$01, $01
00098C63 E102                       	smpsAlterNote       $02
00098C65 01                         	dc.b	$01
00098C66 E1F7                       	smpsAlterNote       $F7
00098C68 0101                       	dc.b	$01, $01
00098C6A E1FC                       	smpsAlterNote       $FC
00098C6C ECF5                       	smpsPSGAlterVol     $F5
00098C6E 8F06                       	dc.b	nD1, $06
00098C70 EC04                       	smpsPSGAlterVol     $04
00098C72 E701                       	dc.b	smpsNoAttack, $01
00098C74 EC07                       	smpsPSGAlterVol     $07
00098C76 8003                       	dc.b	nRst, $03
00098C78 ECF5                       	smpsPSGAlterVol     $F5
00098C7A 8F06                       	dc.b	nD1, $06
00098C7C EC04                       	smpsPSGAlterVol     $04
00098C7E E701                       	dc.b	smpsNoAttack, $01
00098C80 EC07                       	smpsPSGAlterVol     $07
00098C82 8006                       	dc.b	nRst, $06
00098C84 E1FF                       	smpsAlterNote       $FF
00098C86 01                         	dc.b	$01
00098C87 E102                       	smpsAlterNote       $02
00098C89 01                         	dc.b	$01
00098C8A E101                       	smpsAlterNote       $01
00098C8C 01                         	dc.b	$01
00098C8D E1FC                       	smpsAlterNote       $FC
00098C8F 01                         	dc.b	$01
00098C90 ECF5                       	smpsPSGAlterVol     $F5
00098C92 9007                       	dc.b	nEb1, $07
00098C94 EC0B                       	smpsPSGAlterVol     $0B
00098C96 8004                       	dc.b	nRst, $04
00098C98 ECF5                       	smpsPSGAlterVol     $F5
00098C9A 9006                       	dc.b	nEb1, $06
00098C9C EC0B                       	smpsPSGAlterVol     $0B
00098C9E 8007                       	dc.b	nRst, $07
00098CA0 E103                       	smpsAlterNote       $03
00098CA2 0101                       	dc.b	$01, $01
00098CA4 E1FF                       	smpsAlterNote       $FF
00098CA6 01                         	dc.b	$01
00098CA7 E1F9                       	smpsAlterNote       $F9
00098CA9 01                         	dc.b	$01
00098CAA E1FC                       	smpsAlterNote       $FC
00098CAC ECF5                       	smpsPSGAlterVol     $F5
00098CAE 8F06                       	dc.b	nD1, $06
00098CB0 EC04                       	smpsPSGAlterVol     $04
00098CB2 E701                       	dc.b	smpsNoAttack, $01
00098CB4 EC07                       	smpsPSGAlterVol     $07
00098CB6 8003                       	dc.b	nRst, $03
00098CB8 ECF5                       	smpsPSGAlterVol     $F5
00098CBA 8F06                       	dc.b	nD1, $06
00098CBC EC04                       	smpsPSGAlterVol     $04
00098CBE E701                       	dc.b	smpsNoAttack, $01
00098CC0 EC07                       	smpsPSGAlterVol     $07
00098CC2 8006                       	dc.b	nRst, $06
00098CC4 E1FF                       	smpsAlterNote       $FF
00098CC6 01                         	dc.b	$01
00098CC7 E103                       	smpsAlterNote       $03
00098CC9 01                         	dc.b	$01
00098CCA E1FF                       	smpsAlterNote       $FF
00098CCC 01                         	dc.b	$01
00098CCD E1F9                       	smpsAlterNote       $F9
00098CCF 01                         	dc.b	$01
00098CD0 E1FC                       	smpsAlterNote       $FC
00098CD2 ECF5                       	smpsPSGAlterVol     $F5
00098CD4 8F06                       	dc.b	nD1, $06
00098CD6 EC04                       	smpsPSGAlterVol     $04
00098CD8 E701                       	dc.b	smpsNoAttack, $01
00098CDA EC07                       	smpsPSGAlterVol     $07
00098CDC 8003                       	dc.b	nRst, $03
00098CDE ECF5                       	smpsPSGAlterVol     $F5
00098CE0 8F07                       	dc.b	nD1, $07
00098CE2 EC0B                       	smpsPSGAlterVol     $0B
00098CE4 8006                       	dc.b	nRst, $06
00098CE6 E1FF                       	smpsAlterNote       $FF
00098CE8 01                         	dc.b	$01
00098CE9 E102                       	smpsAlterNote       $02
00098CEB 0101                       	dc.b	$01, $01
00098CED E1FC                       	smpsAlterNote       $FC
00098CEF 01                         	dc.b	$01
00098CF0 ECF5                       	smpsPSGAlterVol     $F5
00098CF2 8F07                       	dc.b	nD1, $07
00098CF4 EC0B                       	smpsPSGAlterVol     $0B
00098CF6 8004                       	dc.b	nRst, $04
00098CF8 ECF5                       	smpsPSGAlterVol     $F5
00098CFA 8F06                       	dc.b	nD1, $06
00098CFC EC04                       	smpsPSGAlterVol     $04
00098CFE E701                       	dc.b	smpsNoAttack, $01
00098D00 EC07                       	smpsPSGAlterVol     $07
00098D02 8006                       	dc.b	nRst, $06
00098D04 E101                       	smpsAlterNote       $01
00098D06 01                         	dc.b	$01
00098D07 E102                       	smpsAlterNote       $02
00098D09 01                         	dc.b	$01
00098D0A E1FF                       	smpsAlterNote       $FF
00098D0C 01                         	dc.b	$01
00098D0D E1F9                       	smpsAlterNote       $F9
00098D0F 01                         	dc.b	$01
00098D10 E1FC                       	smpsAlterNote       $FC
00098D12 ECF5                       	smpsPSGAlterVol     $F5
00098D14 9006                       	dc.b	nEb1, $06
00098D16 EC04                       	smpsPSGAlterVol     $04
00098D18 E701                       	dc.b	smpsNoAttack, $01
00098D1A EC07                       	smpsPSGAlterVol     $07
00098D1C 8003                       	dc.b	nRst, $03
00098D1E ECF5                       	smpsPSGAlterVol     $F5
00098D20 9006                       	dc.b	nEb1, $06
00098D22 EC04                       	smpsPSGAlterVol     $04
00098D24 E701                       	dc.b	smpsNoAttack, $01
00098D26 EC07                       	smpsPSGAlterVol     $07
00098D28 8006                       	dc.b	nRst, $06
00098D2A E100                       	smpsAlterNote       $00
00098D2C 01                         	dc.b	$01
00098D2D E102                       	smpsAlterNote       $02
00098D2F 01                         	dc.b	$01
00098D30 E100                       	smpsAlterNote       $00
00098D32 01                         	dc.b	$01
00098D33 E1FF                       	smpsAlterNote       $FF
00098D35 01                         	dc.b	$01
00098D36 ECF5                       	smpsPSGAlterVol     $F5
00098D38 9B06                       	dc.b	nD2, $06
00098D3A EC04                       	smpsPSGAlterVol     $04
00098D3C E701                       	dc.b	smpsNoAttack, $01
00098D3E EC07                       	smpsPSGAlterVol     $07
00098D40 8003                       	dc.b	nRst, $03
00098D42 ECF5                       	smpsPSGAlterVol     $F5
00098D44 9B07                       	dc.b	nD2, $07
00098D46 EC0B                       	smpsPSGAlterVol     $0B
00098D48 8007                       	dc.b	nRst, $07
00098D4A E105                       	smpsAlterNote       $05
00098D4C 0101                       	dc.b	$01, $01
00098D4E E1FF                       	smpsAlterNote       $FF
00098D50 01                         	dc.b	$01
00098D51 E1FC                       	smpsAlterNote       $FC
00098D53 01                         	dc.b	$01
00098D54 E1FF                       	smpsAlterNote       $FF
00098D56 ECF5                       	smpsPSGAlterVol     $F5
00098D58 9B06                       	dc.b	nD2, $06
00098D5A EC0B                       	smpsPSGAlterVol     $0B
00098D5C 8004                       	dc.b	nRst, $04
00098D5E ECF5                       	smpsPSGAlterVol     $F5
00098D60 9B06                       	dc.b	nD2, $06
00098D62 EC04                       	smpsPSGAlterVol     $04
00098D64 E701                       	dc.b	smpsNoAttack, $01
00098D66 EC07                       	smpsPSGAlterVol     $07
00098D68 8006                       	dc.b	nRst, $06
00098D6A E102                       	smpsAlterNote       $02
00098D6C 01                         	dc.b	$01
00098D6D E106                       	smpsAlterNote       $06
00098D6F 01                         	dc.b	$01
00098D70 E102                       	smpsAlterNote       $02
00098D72 01                         	dc.b	$01
00098D73 E1FC                       	smpsAlterNote       $FC
00098D75 01                         	dc.b	$01
00098D76 E1FF                       	smpsAlterNote       $FF
00098D78 ECF5                       	smpsPSGAlterVol     $F5
00098D7A 9B06                       	dc.b	nD2, $06
00098D7C EC04                       	smpsPSGAlterVol     $04
00098D7E E701                       	dc.b	smpsNoAttack, $01
00098D80 EC07                       	smpsPSGAlterVol     $07
00098D82 8003                       	dc.b	nRst, $03
00098D84 ECF5                       	smpsPSGAlterVol     $F5
00098D86 9B07                       	dc.b	nD2, $07
00098D88 EC0B                       	smpsPSGAlterVol     $0B
00098D8A 8006                       	dc.b	nRst, $06
00098D8C E102                       	smpsAlterNote       $02
00098D8E 01                         	dc.b	$01
00098D8F E105                       	smpsAlterNote       $05
00098D91 0101                       	dc.b	$01, $01
00098D93 E1FF                       	smpsAlterNote       $FF
00098D95 01                         	dc.b	$01
00098D96 ECF5                       	smpsPSGAlterVol     $F5
00098D98 9B07                       	dc.b	nD2, $07
00098D9A EC0B                       	smpsPSGAlterVol     $0B
00098D9C 8004                       	dc.b	nRst, $04
00098D9E ECF5                       	smpsPSGAlterVol     $F5
00098DA0 9B06                       	dc.b	nD2, $06
00098DA2 EC04                       	smpsPSGAlterVol     $04
00098DA4 E701                       	dc.b	smpsNoAttack, $01
00098DA6 EC07                       	smpsPSGAlterVol     $07
00098DA8 8006                       	dc.b	nRst, $06
00098DAA E105                       	smpsAlterNote       $05
00098DAC 0101                       	dc.b	$01, $01
00098DAE E102                       	smpsAlterNote       $02
00098DB0 01                         	dc.b	$01
00098DB1 E1FC                       	smpsAlterNote       $FC
00098DB3 01                         	dc.b	$01
00098DB4 E1FF                       	smpsAlterNote       $FF
00098DB6 ECF5                       	smpsPSGAlterVol     $F5
00098DB8 9B06                       	dc.b	nD2, $06
00098DBA EC04                       	smpsPSGAlterVol     $04
00098DBC E701                       	dc.b	smpsNoAttack, $01
00098DBE EC07                       	smpsPSGAlterVol     $07
00098DC0 8003                       	dc.b	nRst, $03
00098DC2 ECF5                       	smpsPSGAlterVol     $F5
00098DC4 9B06                       	dc.b	nD2, $06
00098DC6 EC04                       	smpsPSGAlterVol     $04
00098DC8 E701                       	dc.b	smpsNoAttack, $01
00098DCA EC07                       	smpsPSGAlterVol     $07
00098DCC 8006                       	dc.b	nRst, $06
00098DCE E102                       	smpsAlterNote       $02
00098DD0 01                         	dc.b	$01
00098DD1 E106                       	smpsAlterNote       $06
00098DD3 01                         	dc.b	$01
00098DD4 E102                       	smpsAlterNote       $02
00098DD6 01                         	dc.b	$01
00098DD7 E1FF                       	smpsAlterNote       $FF
00098DD9 01                         	dc.b	$01
00098DDA ECF5                       	smpsPSGAlterVol     $F5
00098DDC 9B06                       	dc.b	nD2, $06
00098DDE EC04                       	smpsPSGAlterVol     $04
00098DE0 E701                       	dc.b	smpsNoAttack, $01
00098DE2 EC07                       	smpsPSGAlterVol     $07
00098DE4 8003                       	dc.b	nRst, $03
00098DE6 ECF5                       	smpsPSGAlterVol     $F5
00098DE8 9B07                       	dc.b	nD2, $07
00098DEA EC0B                       	smpsPSGAlterVol     $0B
00098DEC 8007                       	dc.b	nRst, $07
00098DEE E107                       	smpsAlterNote       $07
00098DF0 0101                       	dc.b	$01, $01
00098DF2 E1FE                       	smpsAlterNote       $FE
00098DF4 01                         	dc.b	$01
00098DF5 E1FA                       	smpsAlterNote       $FA
00098DF7 0101                       	dc.b	$01, $01
00098DF9 E103                       	smpsAlterNote       $03
00098DFB 01                         	dc.b	$01
00098DFC E109                       	smpsAlterNote       $09
00098DFE 01                         	dc.b	$01
00098DFF E107                       	smpsAlterNote       $07
00098E01 01                         	dc.b	$01
00098E02 E1FE                       	smpsAlterNote       $FE
00098E04 01                         	dc.b	$01
00098E05 E108                       	smpsAlterNote       $08
00098E07 01                         	dc.b	$01
00098E08 E1FD                       	smpsAlterNote       $FD
00098E0A ECF5                       	smpsPSGAlterVol     $F5
00098E0C 940E                       	dc.b	nG1, $0E
00098E0E E103                       	smpsAlterNote       $03
00098E10 EC0B                       	smpsPSGAlterVol     $0B
00098E12 8001 01                    	dc.b	nRst, $01, $01
00098E15 E1FD                       	smpsAlterNote       $FD
00098E17 01                         	dc.b	$01
00098E18 E1FB                       	smpsAlterNote       $FB
00098E1A 0101                       	dc.b	$01, $01
00098E1C E100                       	smpsAlterNote       $00
00098E1E 01                         	dc.b	$01
00098E1F E103                       	smpsAlterNote       $03
00098E21 01                         	dc.b	$01
00098E22 E100                       	smpsAlterNote       $00
00098E24 01                         	dc.b	$01
00098E25 E1FD                       	smpsAlterNote       $FD
00098E27 01                         	dc.b	$01
00098E28 E1FA                       	smpsAlterNote       $FA
00098E2A 01                         	dc.b	$01
00098E2B E1FD                       	smpsAlterNote       $FD
00098E2D 01                         	dc.b	$01
00098E2E E103                       	smpsAlterNote       $03
00098E30 0101                       	dc.b	$01, $01
00098E32 E100                       	smpsAlterNote       $00
00098E34 01                         	dc.b	$01
00098E35 E1FE                       	smpsAlterNote       $FE
00098E37 ECF5                       	smpsPSGAlterVol     $F5
00098E39 960D                       	dc.b	nA1, $0D
00098E3B E104                       	smpsAlterNote       $04
00098E3D EC0B                       	smpsPSGAlterVol     $0B
00098E3F 8001 01                    	dc.b	nRst, $01, $01
00098E42 E101                       	smpsAlterNote       $01
00098E44 01                         	dc.b	$01
00098E45 E1FB                       	smpsAlterNote       $FB
00098E47 0101                       	dc.b	$01, $01
00098E49 E1FE                       	smpsAlterNote       $FE
00098E4B 01                         	dc.b	$01
00098E4C E104                       	smpsAlterNote       $04
00098E4E 0101                       	dc.b	$01, $01
00098E50 E1FE                       	smpsAlterNote       $FE
00098E52 01                         	dc.b	$01
00098E53 E1FB                       	smpsAlterNote       $FB
00098E55 0101                       	dc.b	$01, $01
00098E57 E101                       	smpsAlterNote       $01
00098E59 01                         	dc.b	$01
00098E5A E104                       	smpsAlterNote       $04
00098E5C 0101                       	dc.b	$01, $01
00098E5E E1FE                       	smpsAlterNote       $FE
00098E60 ECF5                       	smpsPSGAlterVol     $F5
00098E62 970D                       	dc.b	nBb1, $0D
00098E64 E101                       	smpsAlterNote       $01
00098E66 EC04                       	smpsPSGAlterVol     $04
00098E68 E701                       	dc.b	smpsNoAttack, $01
00098E6A EC07                       	smpsPSGAlterVol     $07
00098E6C E104                       	smpsAlterNote       $04
00098E6E 8001                       	dc.b	nRst, $01
00098E70 E103                       	smpsAlterNote       $03
00098E72 01                         	dc.b	$01
00098E73 E1FE                       	smpsAlterNote       $FE
00098E75 01                         	dc.b	$01
00098E76 E1FA                       	smpsAlterNote       $FA
00098E78 01                         	dc.b	$01
00098E79 E1FE                       	smpsAlterNote       $FE
00098E7B 01                         	dc.b	$01
00098E7C E101                       	smpsAlterNote       $01
00098E7E 01                         	dc.b	$01
00098E7F E104                       	smpsAlterNote       $04
00098E81 01                         	dc.b	$01
00098E82 E101                       	smpsAlterNote       $01
00098E84 01                         	dc.b	$01
00098E85 E1FB                       	smpsAlterNote       $FB
00098E87 01                         	dc.b	$01
00098E88 E1FA                       	smpsAlterNote       $FA
00098E8A 01                         	dc.b	$01
00098E8B E1FE                       	smpsAlterNote       $FE
00098E8D 01                         	dc.b	$01
00098E8E E103                       	smpsAlterNote       $03
00098E90 0101                       	dc.b	$01, $01
00098E92 E101                       	smpsAlterNote       $01
00098E94 01                         	dc.b	$01
00098E95 E1FE                       	smpsAlterNote       $FE
00098E97 ECF5                       	smpsPSGAlterVol     $F5
00098E99 990D                       	dc.b	nC2, $0D
00098E9B E104                       	smpsAlterNote       $04
00098E9D EC0B                       	smpsPSGAlterVol     $0B
00098E9F 8001 01                    	dc.b	nRst, $01, $01
00098EA2 E102                       	smpsAlterNote       $02
00098EA4 01                         	dc.b	$01
00098EA5 E1FC                       	smpsAlterNote       $FC
00098EA7 0101                       	dc.b	$01, $01
00098EA9 E102                       	smpsAlterNote       $02
00098EAB 01                         	dc.b	$01
00098EAC E104                       	smpsAlterNote       $04
00098EAE 01                         	dc.b	$01
00098EAF E1FF                       	smpsAlterNote       $FF
00098EB1 ECF5                       	smpsPSGAlterVol     $F5
00098EB3 9B06                       	dc.b	nD2, $06
00098EB5 EC04                       	smpsPSGAlterVol     $04
00098EB7 E701                       	dc.b	smpsNoAttack, $01
00098EB9 EC07                       	smpsPSGAlterVol     $07
00098EBB 8003                       	dc.b	nRst, $03
00098EBD ECF5                       	smpsPSGAlterVol     $F5
00098EBF 9B07                       	dc.b	nD2, $07
00098EC1 EC0B                       	smpsPSGAlterVol     $0B
00098EC3 8006                       	dc.b	nRst, $06
00098EC5 E101                       	smpsAlterNote       $01
00098EC7 01                         	dc.b	$01
00098EC8 E104                       	smpsAlterNote       $04
00098ECA 0101                       	dc.b	$01, $01
00098ECC E1FE                       	smpsAlterNote       $FE
00098ECE 01                         	dc.b	$01
00098ECF E1FC                       	smpsAlterNote       $FC
00098ED1 01                         	dc.b	$01
00098ED2 E1FE                       	smpsAlterNote       $FE
00098ED4 ECF5                       	smpsPSGAlterVol     $F5
00098ED6 9C06                       	dc.b	nEb2, $06
00098ED8 EC0B                       	smpsPSGAlterVol     $0B
00098EDA 8004                       	dc.b	nRst, $04
00098EDC ECF5                       	smpsPSGAlterVol     $F5
00098EDE 9C06                       	dc.b	nEb2, $06
00098EE0 EC04                       	smpsPSGAlterVol     $04
00098EE2 E701                       	dc.b	smpsNoAttack, $01
00098EE4 EC07                       	smpsPSGAlterVol     $07
00098EE6 8006                       	dc.b	nRst, $06
00098EE8 E105                       	smpsAlterNote       $05
00098EEA 01                         	dc.b	$01
00098EEB E106                       	smpsAlterNote       $06
00098EED 01                         	dc.b	$01
00098EEE E102                       	smpsAlterNote       $02
00098EF0 01                         	dc.b	$01
00098EF1 E1FB                       	smpsAlterNote       $FB
00098EF3 01                         	dc.b	$01
00098EF4 E1FF                       	smpsAlterNote       $FF
00098EF6 ECF5                       	smpsPSGAlterVol     $F5
00098EF8 9B06                       	dc.b	nD2, $06
00098EFA EC04                       	smpsPSGAlterVol     $04
00098EFC E701                       	dc.b	smpsNoAttack, $01
00098EFE EC07                       	smpsPSGAlterVol     $07
00098F00 8003                       	dc.b	nRst, $03
00098F02 ECF5                       	smpsPSGAlterVol     $F5
00098F04 9B06                       	dc.b	nD2, $06
00098F06 EC04                       	smpsPSGAlterVol     $04
00098F08 E701                       	dc.b	smpsNoAttack, $01
00098F0A EC07                       	smpsPSGAlterVol     $07
00098F0C 8006                       	dc.b	nRst, $06
00098F0E E101                       	smpsAlterNote       $01
00098F10 01                         	dc.b	$01
00098F11 E105                       	smpsAlterNote       $05
00098F13 01                         	dc.b	$01
00098F14 E104                       	smpsAlterNote       $04
00098F16 01                         	dc.b	$01
00098F17 E1FE                       	smpsAlterNote       $FE
00098F19 01                         	dc.b	$01
00098F1A ECF5                       	smpsPSGAlterVol     $F5
00098F1C 9C07                       	dc.b	nEb2, $07
00098F1E EC0B                       	smpsPSGAlterVol     $0B
00098F20 8004                       	dc.b	nRst, $04
00098F22 ECF5                       	smpsPSGAlterVol     $F5
00098F24 9C06                       	dc.b	nEb2, $06
00098F26 EC0B                       	smpsPSGAlterVol     $0B
00098F28 8007                       	dc.b	nRst, $07
00098F2A E105                       	smpsAlterNote       $05
00098F2C 0101                       	dc.b	$01, $01
00098F2E E102                       	smpsAlterNote       $02
00098F30 01                         	dc.b	$01
00098F31 E1FB                       	smpsAlterNote       $FB
00098F33 01                         	dc.b	$01
00098F34 E1FF                       	smpsAlterNote       $FF
00098F36 ECF5                       	smpsPSGAlterVol     $F5
00098F38 9B06                       	dc.b	nD2, $06
00098F3A EC04                       	smpsPSGAlterVol     $04
00098F3C E701                       	dc.b	smpsNoAttack, $01
00098F3E EC07                       	smpsPSGAlterVol     $07
00098F40 8003                       	dc.b	nRst, $03
00098F42 ECF5                       	smpsPSGAlterVol     $F5
00098F44 9B06                       	dc.b	nD2, $06
00098F46 EC04                       	smpsPSGAlterVol     $04
00098F48 E701                       	dc.b	smpsNoAttack, $01
00098F4A EC07                       	smpsPSGAlterVol     $07
00098F4C 8006                       	dc.b	nRst, $06
00098F4E E101                       	smpsAlterNote       $01
00098F50 01                         	dc.b	$01
00098F51 E105                       	smpsAlterNote       $05
00098F53 01                         	dc.b	$01
00098F54 E101                       	smpsAlterNote       $01
00098F56 01                         	dc.b	$01
00098F57 E1FC                       	smpsAlterNote       $FC
00098F59 01                         	dc.b	$01
00098F5A E1FE                       	smpsAlterNote       $FE
00098F5C ECF5                       	smpsPSGAlterVol     $F5
00098F5E 9C06                       	dc.b	nEb2, $06
00098F60 EC04                       	smpsPSGAlterVol     $04
00098F62 E701                       	dc.b	smpsNoAttack, $01
00098F64 EC07                       	smpsPSGAlterVol     $07
00098F66 8003                       	dc.b	nRst, $03
00098F68 ECF5                       	smpsPSGAlterVol     $F5
00098F6A 9C07                       	dc.b	nEb2, $07
00098F6C EC0B                       	smpsPSGAlterVol     $0B
00098F6E 8006                       	dc.b	nRst, $06
00098F70 E102                       	smpsAlterNote       $02
00098F72 01                         	dc.b	$01
00098F73 E105                       	smpsAlterNote       $05
00098F75 0101                       	dc.b	$01, $01
00098F77 E1FF                       	smpsAlterNote       $FF
00098F79 01                         	dc.b	$01
00098F7A ECF5                       	smpsPSGAlterVol     $F5
00098F7C 9B07                       	dc.b	nD2, $07
00098F7E EC0B                       	smpsPSGAlterVol     $0B
00098F80 8004                       	dc.b	nRst, $04
00098F82 ECF5                       	smpsPSGAlterVol     $F5
00098F84 9B06                       	dc.b	nD2, $06
00098F86 EC04                       	smpsPSGAlterVol     $04
00098F88 E701                       	dc.b	smpsNoAttack, $01
00098F8A EC07                       	smpsPSGAlterVol     $07
00098F8C 8002                       	dc.b	nRst, $02
00098F8E E1FC                       	smpsAlterNote       $FC
00098F90 ECF5                       	smpsPSGAlterVol     $F5
00098F92 9006                       	dc.b	nEb1, $06
00098F94 EC04                       	smpsPSGAlterVol     $04
00098F96 E701                       	dc.b	smpsNoAttack, $01
00098F98 ECFC                       	smpsPSGAlterVol     $FC
00098F9A 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00098F9E EC04                       	smpsPSGAlterVol     $04
00098FA0 E701                       	dc.b	smpsNoAttack, $01
00098FA2 E1FD                       	smpsAlterNote       $FD
00098FA4 ECFC                       	smpsPSGAlterVol     $FC
00098FA6 9402                       	dc.b	nG1, $02
00098FA8 EC04                       	smpsPSGAlterVol     $04
00098FAA E701                       	dc.b	smpsNoAttack, $01
00098FAC E1FE                       	smpsAlterNote       $FE
00098FAE ECFC                       	smpsPSGAlterVol     $FC
00098FB0 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00098FB4 EC04                       	smpsPSGAlterVol     $04
00098FB6 E701                       	dc.b	smpsNoAttack, $01
00098FB8 EC07                       	smpsPSGAlterVol     $07
00098FBA 8008                       	dc.b	nRst, $08
00098FBC F6F4 F3                    	smpsJump            music84_Jump06
00098FBF                            
00098FBF                            ; PSG3 Data
00098FBF                            music84_PSG3:
00098FBF F500                       	smpsPSGvoice        $00
00098FC1 E1FF                       	smpsAlterNote       $FF
00098FC3 EC0F                       	smpsPSGAlterVol     $0F
00098FC5 803A                       	dc.b	nRst, $3A
00098FC7                            
00098FC7                            music84_Jump05:
00098FC7 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00098FD3 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00098FDD F6FF E8                    	smpsJump            music84_Jump05
00098FE0                            
00098FE0                            ; DAC Data
00098FE0                            music84_DAC:
00098FE0 E0C0                       	smpsPan             panCenter, $00
00098FE2 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00098FEE 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00098FFA 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00099006 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00099012 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009901E 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0009902A 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00099036 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00099042 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009904E 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0009905A 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00099066 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00099072 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0009907E 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009908A 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00099096 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000990A2 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000990AE 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000990BA 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000990C6 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000990D2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000990DE 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000990EA 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
000990F6 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00099102 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0009910E 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0009911A 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00099126 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00099132 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0009913E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0009914A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099156 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00099162 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0009916E 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0009917A 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00099186 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00099192 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0009919E 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000991AA 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000991B6 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000991C2 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000991CE 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
000991DA 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000991E6 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000991F2 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000991FE 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0009920A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00099216 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00099222 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0009922E 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0009923A 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00099246 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00099252 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0009925E 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0009926A 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00099276 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00099282 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0009928E 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0009929A 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000992A6 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000992B2 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000992BE 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000992CA 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000992D6 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
000992E2 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
000992EE 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
000992FA 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00099306 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00099312 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0009931E 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0009932A 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00099336 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00099342 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0009934E 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0009935A 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00099366 E0C0                       	smpsPan             panCenter, $00
00099368 F2                         	smpsStop
00099369                            
00099369                            music84_Voices:
00099369                            ;	Voice $00
00099369                            ;	$3D
00099369                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00099369                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00099369                            	smpsVcAlgorithm     $05
00099369                            	smpsVcFeedback      $07
00099369                            	smpsVcUnusedBits    $00
00099369                            	smpsVcDetune        $05, $04, $03, $04
00099369                            	smpsVcCoarseFreq    $01, $01, $01, $01
00099369                            	smpsVcRateScale     $00, $00, $00, $00
00099369                            	smpsVcAttackRate    $11, $11, $11, $11
00099369                            	smpsVcAmpMod        $00, $00, $00, $00
00099369                            	smpsVcDecayRate1    $00, $00, $00, $0A
00099369                            	smpsVcDecayRate2    $00, $00, $00, $0B
00099369                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00099369                            	smpsVcReleaseRate   $08, $08, $08, $07
00099369 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00099382                            
00099382                            ;	Voice $01
00099382                            ;	$04
00099382                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00099382                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00099382                            	smpsVcAlgorithm     $04
00099382                            	smpsVcFeedback      $00
00099382                            	smpsVcUnusedBits    $00
00099382                            	smpsVcDetune        $04, $03, $04, $05
00099382                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00099382                            	smpsVcRateScale     $00, $01, $00, $01
00099382                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00099382                            	smpsVcAmpMod        $00, $00, $00, $00
00099382                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00099382                            	smpsVcDecayRate2    $05, $00, $05, $00
00099382                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00099382                            	smpsVcReleaseRate   $06, $06, $06, $06
00099382 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0009939B                            
0009939B                            ;	Voice $02
0009939B                            ;	$30
0009939B                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0009939B                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0009939B                            	smpsVcAlgorithm     $00
0009939B                            	smpsVcFeedback      $06
0009939B                            	smpsVcUnusedBits    $00
0009939B                            	smpsVcDetune        $04, $02, $00, $06
0009939B                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0009939B                            	smpsVcRateScale     $00, $00, $00, $00
0009939B                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0009939B                            	smpsVcAmpMod        $00, $00, $00, $00
0009939B                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0009939B                            	smpsVcDecayRate2    $01, $01, $01, $01
0009939B                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0009939B                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0009939B 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000993B4                            
000993B4                            ;	Voice $03
000993B4                            ;	$3A
000993B4                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000993B4                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000993B4                            	smpsVcAlgorithm     $02
000993B4                            	smpsVcFeedback      $07
000993B4                            	smpsVcUnusedBits    $00
000993B4                            	smpsVcDetune        $04, $06, $02, $00
000993B4                            	smpsVcCoarseFreq    $01, $01, $01, $01
000993B4                            	smpsVcRateScale     $00, $00, $00, $00
000993B4                            	smpsVcAttackRate    $18, $19, $14, $14
000993B4                            	smpsVcAmpMod        $00, $00, $00, $00
000993B4                            	smpsVcDecayRate1    $09, $0D, $09, $09
000993B4                            	smpsVcDecayRate2    $00, $00, $00, $00
000993B4                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000993B4                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000993B4 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000993CD                            
000993CD                            ;	Voice $04
000993CD                            ;	$3C
000993CD                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000993CD                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000993CD                            	smpsVcAlgorithm     $04
000993CD                            	smpsVcFeedback      $07
000993CD                            	smpsVcUnusedBits    $00
000993CD                            	smpsVcDetune        $07, $00, $00, $03
000993CD                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000993CD                            	smpsVcRateScale     $00, $00, $00, $00
000993CD                            	smpsVcAttackRate    $10, $1F, $10, $1F
000993CD                            	smpsVcAmpMod        $00, $00, $00, $00
000993CD                            	smpsVcDecayRate1    $00, $00, $00, $00
000993CD                            	smpsVcDecayRate2    $00, $00, $00, $00
000993CD                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000993CD                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000993CD 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
000993E6                            
000993E6                            ;	Voice $05
000993E6                            ;	$38
000993E6                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
000993E6                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
000993E6                            	smpsVcAlgorithm     $00
000993E6                            	smpsVcFeedback      $07
000993E6                            	smpsVcUnusedBits    $00
000993E6                            	smpsVcDetune        $04, $06, $02, $00
000993E6                            	smpsVcCoarseFreq    $01, $01, $01, $00
000993E6                            	smpsVcRateScale     $00, $00, $00, $00
000993E6                            	smpsVcAttackRate    $1F, $1F, $1F, $10
000993E6                            	smpsVcAmpMod        $00, $00, $00, $00
000993E6                            	smpsVcDecayRate1    $00, $03, $00, $17
000993E6                            	smpsVcDecayRate2    $00, $08, $08, $0B
000993E6                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
000993E6                            	smpsVcReleaseRate   $08, $05, $05, $05
000993E6 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
000993FF                            
000993FF                            
00099400 00                         		even
00099400                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009D610                            		even
0009D610                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000A1168 00                         		even
000A1168                            Music87:	include	sound\music87.asm; Invincibility
000A1168                            triple_Header:
000A1168 =00000001                  smpsHeaderStartSong = 1
000A1168 0000                       	smpsHeaderVoice     triple_Voices
000A116A 0501                       	smpsHeaderChan      $05, $01
000A116C 0200                       	smpsHeaderTempo     $02, $00
000A116E                            
000A1172 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000A1176 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000A117A 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000A117E 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000A1182 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000A1188                            
000A1188                            ; DAC Data
000A1188                            triple_DAC:
000A1188 E0C0                       	smpsPan             panCenter, $00
000A118A 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000A1190                            
000A1190                            triple_Loop01:
000A1190 8282 82                    	dc.b	dSnare, dSnare, dSnare
000A1193                            
000A1193                            triple_Loop00:
000A1193 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000A119F 06                         	dc.b	$06
000A11A0 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000A11A5 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000A11B1 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000A11B8 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000A11BD 0303 1B                    	dc.b	$03, $03, $1B
000A11C0 E0C0                       	smpsPan             panCenter, $00
000A11C2 F6FF C4                    	smpsJump triple_DAC
000A11C5                            
000A11C5                            ; FM1 Data
000A11C5                            triple_FM1:
000A11C5 E0C0                       	smpsPan             panCenter, $00
000A11C9 8018                       	dc.b	nRst, $18
000A11CB                            
000A11CB                            triple_Loop0B:
000A11CB AC06 B8                    	dc.b	nG3, $06, nG4
000A11CE F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000A11D3                            
000A11D3                            triple_Loop0C:
000A11D3 A7B3                       	dc.b	nD3, nD4
000A11D5 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000A11DA                            
000A11DA                            triple_Loop0D:
000A11DA A9B5                       	dc.b	nE3, nE4
000A11DC F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000A11E1 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000A11E9 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000A11EE A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000A11FA 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000A1206 AD                         	dc.b	nAb3
000A1207 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000A120C 8018                       	dc.b	nRst, $18
000A120E E0C0                       	smpsPan             panCenter, $00
000A1212 F6FF B1                    	smpsJump triple_FM1
000A1215                            
000A1215                            ; FM2 Data
000A1215                            triple_FM2:
000A1215 E0C0                       	smpsPan             panCenter, $00
000A1219 8018                       	dc.b	nRst, $18
000A121B                            
000A121B                            triple_Loop07:
000A121B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1227 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1233 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000A1238 8003                       	dc.b	nRst, $03
000A123A                            
000A123A                            triple_Loop08:
000A123A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1240 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000A1245 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A124B                            
000A124B                            triple_Loop09:
000A124B C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1257 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A1263 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000A1268 8003                       	dc.b	nRst, $03
000A126A                            
000A126A                            triple_Loop0A:
000A126A B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A1270 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000A1275 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A127B E0C0                       	smpsPan             panCenter, $00
000A127F F6FF 94                    	smpsJump triple_FM2
000A1282                            
000A1282                            ; FM3 Data
000A1282                            triple_FM3:
000A1282 E0C0                       	smpsPan             panCenter, $00
000A1286 8018                       	dc.b	nRst, $18
000A1288                            
000A1288                            triple_Loop06:
000A1288 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000A128F F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000A1294 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000A12A0 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000A12AC C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000A12AF F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000A12B4 8018                       	dc.b	nRst, $18
000A12B6 E0C0                       	smpsPan             panCenter, $00
000A12BA F6FF C6                    	smpsJump triple_FM3
000A12BD                            
000A12BD                            ; FM4 Data
000A12BD                            triple_FM4:
000A12BD E103                       	smpsAlterNote       $03
000A12C1 E0C0                       	smpsPan             panCenter, $00
000A12C3 8018                       	dc.b	nRst, $18
000A12C5                            
000A12C5                            triple_Loop02:
000A12C5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A12D1 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A12DD F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000A12E2 8003                       	dc.b	nRst, $03
000A12E4                            
000A12E4                            triple_Loop03:
000A12E4 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A12EA F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000A12EF B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000A12F5                            
000A12F5                            triple_Loop04:
000A12F5 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000A1301 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000A130D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000A1312 8003                       	dc.b	nRst, $03
000A1314                            
000A1314                            triple_Loop05:
000A1314 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000A131A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000A131F B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000A1325 E0C0                       	smpsPan             panCenter, $00
000A1327 F6FF 94                    	smpsJump triple_FM4
000A132A                            
000A132A                            ; PSG1 Data
000A132A                            triple_PSG1:
000A132A 8018                       	dc.b	nRst, $18
000A132C                            
000A132C                            triple_Loop0E:
000A132C A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1338 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1344 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A1350 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A1354 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000A1359 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A1365 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A1371 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A137D 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A1381                            
000A1381                            triple_Loop0F:
000A1381 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A1387 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000A138C 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000A1392                            
000A1392                            triple_Loop10:
000A1392 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A139E 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A13AA 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A13B6 9402 8004                  	dc.b	nG1, $02, nRst, $04
000A13BA F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000A13BF A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000A13CB 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000A13D7 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000A13E3 9402 8007                  	dc.b	nG1, $02, nRst, $07
000A13E7                            
000A13E7                            triple_Loop11:
000A13E7 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000A13ED F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000A13F2 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000A13F8 F500                       	smpsPSGvoice        $00
000A13FA F6FF 2E                    	smpsJump triple_PSG1
000A13FD                            
000A13FD                            triple_Voices:
000A13FD                            ;	Voice $00
000A13FD                            ;	$3A
000A13FD                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000A13FD                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000A13FD                            	smpsVcAlgorithm     $02
000A13FD                            	smpsVcFeedback      $07
000A13FD                            	smpsVcUnusedBits    $00
000A13FD                            	smpsVcDetune        $00, $00, $00, $00
000A13FD                            	smpsVcCoarseFreq    $01, $01, $07, $01
000A13FD                            	smpsVcRateScale     $01, $02, $02, $02
000A13FD                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000A13FD                            	smpsVcAmpMod        $00, $00, $00, $00
000A13FD                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000A13FD                            	smpsVcDecayRate2    $00, $00, $00, $00
000A13FD                            	smpsVcDecayLevel    $00, $01, $0F, $01
000A13FD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A13FD 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000A1416                            
000A1416                            ;	Voice $01
000A1416                            ;	$20
000A1416                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000A1416                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000A1416                            	smpsVcAlgorithm     $00
000A1416                            	smpsVcFeedback      $04
000A1416                            	smpsVcUnusedBits    $00
000A1416                            	smpsVcDetune        $00, $00, $03, $07
000A1416                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000A1416                            	smpsVcRateScale     $03, $03, $03, $02
000A1416                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000A1416                            	smpsVcAmpMod        $00, $00, $00, $00
000A1416                            	smpsVcDecayRate1    $04, $04, $0A, $10
000A1416                            	smpsVcDecayRate2    $08, $08, $08, $0F
000A1416                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000A1416                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A1416 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1416 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000A1430 00                         		even
000A1430                            Music88:	incbin	sound\music88.bin; Extra Life
000A151E                            		even
000A151E                            Music89:	incbin	sound\music89.bin; Special Stage
000A53E6 00                         		even
000A53E6                            Music8A:	incbin	sound\music8A.bin; Title Screen
000A55B0                            		even
000A55B0                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000A584A                            		even
000A584A                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A5AE8                            		even
000A5AE8                            Music8D:	incbin	sound\music8D.bin; Final Zone
000ABD60 00                         		even
000ABD60                            Music8E:	include	sound\merry.asm ; Act Clear
000ABD60 =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000ABD60 =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000ABD60 =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000ABD60 =0000008A                  dMerryClap = dLowTimpani
000ABD60                            
000ABD60                            MerrysLittleLamb_Header:
000ABD60 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000ABD62 0603                       	smpsHeaderChan      $06, $03
000ABD64 0100                       	smpsHeaderTempo     $01, $00
000ABD66                            
000ABD6A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000ABD6E 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000ABD72 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000ABD76 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000ABD7A 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000ABD7E 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000ABD84 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000ABD8A 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000ABD90                            
000ABD90                            MerrysLittleLamb_FM1:
000ABD90 E0C0                       	smpsPan             panCenter, $00
000ABD92 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000ABD99 E60F                       	smpsAlterVol        $0F
000ABD9B A704                       	dc.b	nD3, $04
000ABD9D E606                       	smpsAlterVol        $06
000ABD9F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABDA4 E6FA                       	smpsAlterVol        $FA
000ABDA6 A705                       	dc.b	nD3, $05
000ABDA8 E606                       	smpsAlterVol        $06
000ABDAA A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABDAF E6FA                       	smpsAlterVol        $FA
000ABDB1 A704                       	dc.b	nD3, $04
000ABDB3 E606                       	smpsAlterVol        $06
000ABDB5 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABDBB E6FA                       	smpsAlterVol        $FA
000ABDBD A7                         	dc.b	nD3
000ABDBE E606                       	smpsAlterVol        $06
000ABDC0 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABDC5 E6FA                       	smpsAlterVol        $FA
000ABDC7 A704                       	dc.b	nD3, $04
000ABDC9 E606                       	smpsAlterVol        $06
000ABDCB A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABDD1 E6FA                       	smpsAlterVol        $FA
000ABDD3 A7                         	dc.b	nD3
000ABDD4 E606                       	smpsAlterVol        $06
000ABDD6 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABDDC E6FA                       	smpsAlterVol        $FA
000ABDDE A705                       	dc.b	nD3, $05
000ABDE0 E606                       	smpsAlterVol        $06
000ABDE2 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABDE7 E6FA                       	smpsAlterVol        $FA
000ABDE9 A7                         	dc.b	nD3
000ABDEA E606                       	smpsAlterVol        $06
000ABDEC A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABDF2 E6FA                       	smpsAlterVol        $FA
000ABDF4 A705                       	dc.b	nD3, $05
000ABDF6 E606                       	smpsAlterVol        $06
000ABDF8 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABDFD E6FA                       	smpsAlterVol        $FA
000ABDFF A704                       	dc.b	nD3, $04
000ABE01 E606                       	smpsAlterVol        $06
000ABE03 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABE08 E6FA                       	smpsAlterVol        $FA
000ABE0A A705                       	dc.b	nD3, $05
000ABE0C E606                       	smpsAlterVol        $06
000ABE0E A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABE13 E6FA                       	smpsAlterVol        $FA
000ABE15 A704                       	dc.b	nD3, $04
000ABE17 E606                       	smpsAlterVol        $06
000ABE19 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABE1E E6FA                       	smpsAlterVol        $FA
000ABE20 A705                       	dc.b	nD3, $05
000ABE22 E606                       	smpsAlterVol        $06
000ABE24 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABE29 E6FA                       	smpsAlterVol        $FA
000ABE2B A704                       	dc.b	nD3, $04
000ABE2D E606                       	smpsAlterVol        $06
000ABE2F A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABE35 E6FA                       	smpsAlterVol        $FA
000ABE37 A7                         	dc.b	nD3
000ABE38 E606                       	smpsAlterVol        $06
000ABE3A A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABE40 E6FA                       	smpsAlterVol        $FA
000ABE42 A705                       	dc.b	nD3, $05
000ABE44 E606                       	smpsAlterVol        $06
000ABE46 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABE4B E6FA                       	smpsAlterVol        $FA
000ABE4D A7                         	dc.b	nD3
000ABE4E E606                       	smpsAlterVol        $06
000ABE50 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABE56 E6FA                       	smpsAlterVol        $FA
000ABE58 A705                       	dc.b	nD3, $05
000ABE5A E606                       	smpsAlterVol        $06
000ABE5C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABE61 E6FA                       	smpsAlterVol        $FA
000ABE63 A704                       	dc.b	nD3, $04
000ABE65 E606                       	smpsAlterVol        $06
000ABE67 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABE6C E6FA                       	smpsAlterVol        $FA
000ABE6E A705                       	dc.b	nD3, $05
000ABE70 E606                       	smpsAlterVol        $06
000ABE72 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABE77 E6FA                       	smpsAlterVol        $FA
000ABE79 A704                       	dc.b	nD3, $04
000ABE7B E606                       	smpsAlterVol        $06
000ABE7D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABE82 E6FA                       	smpsAlterVol        $FA
000ABE84 A705                       	dc.b	nD3, $05
000ABE86 E606                       	smpsAlterVol        $06
000ABE88 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABE8D E6FA                       	smpsAlterVol        $FA
000ABE8F A704                       	dc.b	nD3, $04
000ABE91 E606                       	smpsAlterVol        $06
000ABE93 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABE99 E6FA                       	smpsAlterVol        $FA
000ABE9B A7                         	dc.b	nD3
000ABE9C E606                       	smpsAlterVol        $06
000ABE9E A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABEA3 E6FA                       	smpsAlterVol        $FA
000ABEA5 A704                       	dc.b	nD3, $04
000ABEA7 E606                       	smpsAlterVol        $06
000ABEA9 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000ABEAF E6FA                       	smpsAlterVol        $FA
000ABEB1 A7                         	dc.b	nD3
000ABEB2 E606                       	smpsAlterVol        $06
000ABEB4 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000ABEBA E6FA                       	smpsAlterVol        $FA
000ABEBC A705                       	dc.b	nD3, $05
000ABEBE E606                       	smpsAlterVol        $06
000ABEC0 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABEC5 E6FA                       	smpsAlterVol        $FA
000ABEC7 A704                       	dc.b	nD3, $04
000ABEC9 E606                       	smpsAlterVol        $06
000ABECB A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABED0 E6FA                       	smpsAlterVol        $FA
000ABED2 A705                       	dc.b	nD3, $05
000ABED4 E606                       	smpsAlterVol        $06
000ABED6 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000ABEDB E6FA                       	smpsAlterVol        $FA
000ABEDD A704                       	dc.b	nD3, $04
000ABEDF E606                       	smpsAlterVol        $06
000ABEE1 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000ABEE6 E6FA                       	smpsAlterVol        $FA
000ABEE8 A705                       	dc.b	nD3, $05
000ABEEA E606                       	smpsAlterVol        $06
000ABEEC A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000ABEF1 E6FA                       	smpsAlterVol        $FA
000ABEF3 A704                       	dc.b	nD3, $04
000ABEF5 E606                       	smpsAlterVol        $06
000ABEF7 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000ABEFE F2                         	smpsStop
000ABEFF                            
000ABEFF                            MerrysLittleLamb_FM2:
000ABEFF E0C0                       	smpsPan             panCenter, $00
000ABF01 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000ABF09 E610                       	smpsAlterVol        $10
000ABF0B A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000ABF14                            
000ABF14                            MerrysLittleLamb_FM3:
000ABF14                            MerrysLittleLamb_FM4:
000ABF14                            MerrysLittleLamb_FM5:
000ABF14 F2                         	smpsStop
000ABF15                            
000ABF15                            MerrysLittleLamb_PSG1:
000ABF15 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000ABF1D EC02                       	smpsPSGAlterVol     $02
000ABF1F B7                         	dc.b	nFs4
000ABF20 EC03                       	smpsPSGAlterVol     $03
000ABF22 B7                         	dc.b	nFs4
000ABF23 EC03                       	smpsPSGAlterVol     $03
000ABF25 B7                         	dc.b	nFs4
000ABF26 EC03                       	smpsPSGAlterVol     $03
000ABF28 B7                         	dc.b	nFs4
000ABF29 ECF5                       	smpsPSGAlterVol     $F5
000ABF2B B7                         	dc.b	nFs4
000ABF2C EC02                       	smpsPSGAlterVol     $02
000ABF2E B7                         	dc.b	nFs4
000ABF2F EC03                       	smpsPSGAlterVol     $03
000ABF31 B7                         	dc.b	nFs4
000ABF32 EC03                       	smpsPSGAlterVol     $03
000ABF34 B7                         	dc.b	nFs4
000ABF35 ECF8                       	smpsPSGAlterVol     $F8
000ABF37 B7                         	dc.b	nFs4
000ABF38 EC02                       	smpsPSGAlterVol     $02
000ABF3A B7                         	dc.b	nFs4
000ABF3B EC03                       	smpsPSGAlterVol     $03
000ABF3D B7                         	dc.b	nFs4
000ABF3E EC03                       	smpsPSGAlterVol     $03
000ABF40 B7                         	dc.b	nFs4
000ABF41 EC03                       	smpsPSGAlterVol     $03
000ABF43 B7                         	dc.b	nFs4
000ABF44 ECF5                       	smpsPSGAlterVol     $F5
000ABF46 B7                         	dc.b	nFs4
000ABF47 EC02                       	smpsPSGAlterVol     $02
000ABF49 B7                         	dc.b	nFs4
000ABF4A EC03                       	smpsPSGAlterVol     $03
000ABF4C B7                         	dc.b	nFs4
000ABF4D EC03                       	smpsPSGAlterVol     $03
000ABF4F B7                         	dc.b	nFs4
000ABF50 EC03                       	smpsPSGAlterVol     $03
000ABF52 B7                         	dc.b	nFs4
000ABF53 ECF5                       	smpsPSGAlterVol     $F5
000ABF55 B7                         	dc.b	nFs4
000ABF56 EC02                       	smpsPSGAlterVol     $02
000ABF58 B7                         	dc.b	nFs4
000ABF59 EC06                       	smpsPSGAlterVol     $06
000ABF5B B7                         	dc.b	nFs4
000ABF5C EC03                       	smpsPSGAlterVol     $03
000ABF5E B7                         	dc.b	nFs4
000ABF5F ECF5                       	smpsPSGAlterVol     $F5
000ABF61 B7                         	dc.b	nFs4
000ABF62 EC02                       	smpsPSGAlterVol     $02
000ABF64 B7                         	dc.b	nFs4
000ABF65 EC03                       	smpsPSGAlterVol     $03
000ABF67 B7                         	dc.b	nFs4
000ABF68 EC03                       	smpsPSGAlterVol     $03
000ABF6A B7                         	dc.b	nFs4
000ABF6B EC03                       	smpsPSGAlterVol     $03
000ABF6D B7                         	dc.b	nFs4
000ABF6E ECF5                       	smpsPSGAlterVol     $F5
000ABF70 B7                         	dc.b	nFs4
000ABF71 EC02                       	smpsPSGAlterVol     $02
000ABF73 B7                         	dc.b	nFs4
000ABF74 EC03                       	smpsPSGAlterVol     $03
000ABF76 B7                         	dc.b	nFs4
000ABF77 EC03                       	smpsPSGAlterVol     $03
000ABF79 B7                         	dc.b	nFs4
000ABF7A EC03                       	smpsPSGAlterVol     $03
000ABF7C B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000ABF80 ECF7                       	smpsPSGAlterVol     $F7
000ABF82 A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000ABF8E A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000ABF9A A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000ABFA6 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000ABFB2 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000ABFBE F2                         	smpsStop
000ABFBF                            
000ABFBF                            MerrysLittleLamb_PSG2:
000ABFBF 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000ABFC6 EC02                       	smpsPSGAlterVol     $02
000ABFC8 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000ABFD4 E101                       	smpsAlterNote       $01
000ABFD6 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000ABFDA E101                       	smpsAlterNote       $01
000ABFDC AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000ABFE0 E101                       	smpsAlterNote       $01
000ABFE2 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000ABFE6 E101                       	smpsAlterNote       $01
000ABFE8 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000ABFEC E101                       	smpsAlterNote       $01
000ABFEE AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000ABFF2 E101                       	smpsAlterNote       $01
000ABFF4 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000ABFF8 E101                       	smpsAlterNote       $01
000ABFFA AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000ABFFE E101                       	smpsAlterNote       $01
000AC000 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AC004 E101                       	smpsAlterNote       $01
000AC006 AB04 80                    	dc.b	nFs3, $04, nRst
000AC009 E101                       	smpsAlterNote       $01
000AC00B AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000AC00F E101                       	smpsAlterNote       $01
000AC011 AB04 80                    	dc.b	nFs3, $04, nRst
000AC014 E101                       	smpsAlterNote       $01
000AC016 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000AC01C F2                         	smpsStop
000AC01D                            
000AC01D                            MerrysLittleLamb_PSG3:
000AC01D 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000AC023 F3E7                       	smpsPSGform         $E7
000AC025 E108                       	smpsAlterNote       $08
000AC027 0002                       	dc.b	nMaxPSG, $02
000AC029 EC01                       	smpsPSGAlterVol     $01
000AC02B E108                       	smpsAlterNote       $08
000AC02D 0005                       	dc.b	nMaxPSG, $05
000AC02F EC01                       	smpsPSGAlterVol     $01
000AC031 E108                       	smpsAlterNote       $08
000AC033 0008                       	dc.b	nMaxPSG, $08
000AC035 EC01                       	smpsPSGAlterVol     $01
000AC037 E108                       	smpsAlterNote       $08
000AC039 00                         	dc.b	nMaxPSG
000AC03A EC01                       	smpsPSGAlterVol     $01
000AC03C E108                       	smpsAlterNote       $08
000AC03E 00                         	dc.b	nMaxPSG
000AC03F EC01                       	smpsPSGAlterVol     $01
000AC041 E108                       	smpsAlterNote       $08
000AC043 0007                       	dc.b	nMaxPSG, $07
000AC045 EC01                       	smpsPSGAlterVol     $01
000AC047 E108                       	smpsAlterNote       $08
000AC049 0005                       	dc.b	nMaxPSG, $05
000AC04B EC01                       	smpsPSGAlterVol     $01
000AC04D E108                       	smpsAlterNote       $08
000AC04F 0007                       	dc.b	nMaxPSG, $07
000AC051 EC01                       	smpsPSGAlterVol     $01
000AC053 E108                       	smpsAlterNote       $08
000AC055 0004                       	dc.b	nMaxPSG, $04
000AC057 EC01                       	smpsPSGAlterVol     $01
000AC059 E108                       	smpsAlterNote       $08
000AC05B 0007                       	dc.b	nMaxPSG, $07
000AC05D EC01                       	smpsPSGAlterVol     $01
000AC05F E108                       	smpsAlterNote       $08
000AC061 0006                       	dc.b	nMaxPSG, $06
000AC063 EC01                       	smpsPSGAlterVol     $01
000AC065 E108                       	smpsAlterNote       $08
000AC067 0009                       	dc.b	nMaxPSG, $09
000AC069 EC01                       	smpsPSGAlterVol     $01
000AC06B E108                       	smpsAlterNote       $08
000AC06D 0007                       	dc.b	nMaxPSG, $07
000AC06F EC01                       	smpsPSGAlterVol     $01
000AC071 E108                       	smpsAlterNote       $08
000AC073 0001                       	dc.b	nMaxPSG, $01
000AC075 ECFF                       	smpsPSGAlterVol     $FF
000AC077 E108                       	smpsAlterNote       $08
000AC079 00                         	dc.b	nMaxPSG
000AC07A EC01                       	smpsPSGAlterVol     $01
000AC07C E108                       	smpsAlterNote       $08
000AC07E 0009                       	dc.b	nMaxPSG, $09
000AC080 EC01                       	smpsPSGAlterVol     $01
000AC082 E108                       	smpsAlterNote       $08
000AC084 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000AC08B F2                         	smpsStop
000AC08C                            
000AC08C                            MerrysLittleLamb_DAC:
000AC08C 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000AC098 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000AC0A4 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000AC0B0 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000AC0BC 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000AC0C8 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000AC0D4 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000AC0E0 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000AC0EC 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000AC0F8 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000AC104 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000AC110 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000AC11C 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000AC128 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000AC134 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000AC140 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000AC14C 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000AC158 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000AC164 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000AC170 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000AC17C 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000AC188 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000AC194 F2                         	smpsStop
000AC195                            
000AC195                            MerrysLittleLamb_Voices:
000AC195                            ;	Voice $00
000AC195                            ;	$00
000AC195                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000AC195                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000AC195                            	smpsVcAlgorithm     $00
000AC195                            	smpsVcFeedback      $00
000AC195                            	smpsVcUnusedBits    $00
000AC195                            	smpsVcDetune        $07, $07, $07, $07
000AC195                            	smpsVcCoarseFreq    $00, $00, $00, $00
000AC195                            	smpsVcRateScale     $00, $00, $00, $00
000AC195                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000AC195                            	smpsVcAmpMod        $00, $00, $00, $00
000AC195                            	smpsVcDecayRate1    $1F, $00, $00, $00
000AC195                            	smpsVcDecayRate2    $12, $00, $00, $00
000AC195                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000AC195                            	smpsVcReleaseRate   $0F, $00, $00, $00
000AC195 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000AC1AE                            
000AC1AE                            ;	Voice $01
000AC1AE                            ;	$25
000AC1AE                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000AC1AE                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000AC1AE                            	smpsVcAlgorithm     $05
000AC1AE                            	smpsVcFeedback      $04
000AC1AE                            	smpsVcUnusedBits    $00
000AC1AE                            	smpsVcDetune        $07, $00, $00, $00
000AC1AE                            	smpsVcCoarseFreq    $01, $01, $01, $01
000AC1AE                            	smpsVcRateScale     $00, $00, $00, $00
000AC1AE                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000AC1AE                            	smpsVcAmpMod        $00, $00, $00, $00
000AC1AE                            	smpsVcDecayRate1    $03, $0B, $06, $08
000AC1AE                            	smpsVcDecayRate2    $00, $00, $00, $00
000AC1AE                            	smpsVcDecayLevel    $00, $0A, $04, $04
000AC1AE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000AC1AE 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000AC1C7                            
000AC1C7                            
000AC1C8 00                         		even
000AC1C8                            Music8F:	incbin	sound\music8F.bin ; Game Over
000AC808 00                         		even
000AC808                            Music90:	incbin	sound\music90.bin ; Continue
000ACBA2 00                         		even
000ACBA2                            Music91:	include	sound\mus91.asm ; Megurine Luka I mean Credits
000ACBA2                            Mus91_Credits_Header:
000ACBA2 =00000001                  smpsHeaderStartSong = 1
000ACBA2 0000                       	smpsHeaderVoice     Mus91_Credits_Voices
000ACBA4 0603                       	smpsHeaderChan      $06, $03
000ACBA6 0133                       	smpsHeaderTempo     $01, $33
000ACBA8                            
000ACBAC 0000 F412                  	smpsHeaderFM        Mus91_Credits_FM1,	$F4, $12
000ACBB0 0000 000B                  	smpsHeaderFM        Mus91_Credits_FM2,	$00, $0B
000ACBB4 0000 F414                  	smpsHeaderFM        Mus91_Credits_FM3,	$F4, $14
000ACBB8 0000 F408                  	smpsHeaderFM        Mus91_Credits_FM4,	$F4, $08
000ACBBC 0000 F420                  	smpsHeaderFM        Mus91_Credits_FM5,	$F4, $20
000ACBC0 0000 D001 0000             	smpsHeaderPSG       Mus91_Credits_PSG1,	$D0, $01, $00, $00
000ACBC6 0000 D003 0000             	smpsHeaderPSG       Mus91_Credits_PSG2,	$D0, $03, $00, $00
000ACBCC 0000 0003 0004             	smpsHeaderPSG       Mus91_Credits_PSG3,	$00, $03, $00, fTone_04
000ACBD2                            ;	this is just a rip of the track
000ACBD2                            ;	ripper, 	part,		joke
000ACBD2                            ;	undecided, 	intro,		undecided
000ACBD2                            ;	coninight, 	ghz,		luka luka night fever
000ACBD2                            ;	coninight, 	lz,		the cleveland show (callback)
000ACBD2                            ;	undecided, 	mz,		undecided
000ACBD2                            ;	carlos, 	slz,		meltdown
000ACBD2                            ;	undecided, 	sbz,		undecided
000ACBD2                            ;	undecided, 	ccz,		undecided
000ACBD2                            ;	undecided, 	ending,		undecided
000ACBD2                            
000ACBD2                            ; FM1 Data
000ACBD2                            Mus91_Credits_FM1:
000ACBD2 E201                       	smpsNop             $01
000ACBD4 8060                       	dc.b	nRst, $60
000ACBD8 E6F8                       	smpsAlterVol        $F8
000ACBDA E806                       	smpsNoteFill        $06
000ACBDC F800 00                    	smpsCall            Mus91_Credits_Call11
000ACBDF E0C0                       	smpsPan             panCenter, $00
000ACBE1 E800                       	smpsNoteFill        $00
000ACBE5 F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
000ACBEA 8030                       	dc.b	nRst, $30
000ACBEC F800 00                    	smpsCall            Mus91_Credits_Call12
000ACBEF CDCB 18C9 0CC8 18C9 0CC8+  	dc.b	nE6, nD6, $18, nC6, $0C, nB5, $18, nC6, $0C, nB5, $18, nG5
000ACBFB 54                         	dc.b	$54
000ACBFC F800 00                    	smpsCall            Mus91_Credits_Call12
000ACBFF 0CC2 18C6 0CC4 18C6 0CC4+  	dc.b	$0C, nF5, $18, nA5, $0C, nG5, $18, nA5, $0C, nG5, $18, nC5
000ACC0B 2480 6080 8080             	dc.b	$24, nRst, $60, nRst, nRst, nRst
000ACC11 F4                         	smpsModOff
000ACC12 E201                       	smpsNop             $01
000ACC14 EA0F                       	smpsSetTempoMod     $0F
000ACC18 E602                       	smpsAlterVol        $02
000ACC1A 8006 C1C4 C1C4 09C6 C80C+  	dc.b	nRst, $06, nE5, nG5, nE5, nG5, $09, nA5, nB5, $0C, nC6, $06
000ACC26 C8C6 C409 C606 C403 C106+  	dc.b	nB5, nA5, nG5, $09, nA5, $06, nG5, $03, nE5, $06, nRst, $06
000ACC32 C6C9 C6C9 09CB CD0C CE06+  	dc.b	nA5, nC6, nA5, nC6, $09, nD6, nE6, $0C, nF6, $06, nE6, nD6
000ACC3E C90C C60C CB04 C9CB C924   	dc.b	nC6, $0C, nA5, $0C, nD6, $04, nC6, nD6, nC6, $24
000ACC48 E9F4                       	smpsAlterPitch      $F4
000ACC4A E609                       	smpsAlterVol        $09
000ACC4E 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000ACC55 F800 00                    	smpsCall            Mus91_Credits_Call0C
000ACC5A E6EB                       	smpsAlterVol        $EB
000ACC5C 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000ACC61 F800 00                    	smpsCall            Mus91_Credits_Call0D
000ACC64 CD1E D906 D518 8024        	dc.b	nE6, $1E, nE7, $06, nC7, $18, nRst, $24
000ACC6C E201                       	smpsNop             $01
000ACC6E EA0A                       	smpsSetTempoMod     $0A
000ACC72 E90C                       	smpsAlterPitch      $0C
000ACC74 E60B                       	smpsAlterVol        $0B
000ACC76 F800 00                    	smpsCall            Mus91_Credits_Call0E
000ACC79 E201                       	smpsNop             $01
000ACC7B EA07                       	smpsSetTempoMod     $07
000ACC7D 8060                       	dc.b	nRst, $60
000ACC7F E201                       	smpsNop             $01
000ACC81 EA03                       	smpsSetTempoMod     $03
000ACC83 8030                       	dc.b	nRst, $30
000ACC87 E60E                       	smpsAlterVol        $0E
000ACC89 8004 CE08 CD03 80CB 80C9+  	dc.b	nRst, $04, nF6, $08, nE6, $03, nRst, nD6, nRst, nC6, nRst, nD6
000ACC95 80C9 04C6 8002 C780 04C7+  	dc.b	nRst, nC6, $04, nA5, nRst, $02, nBb5, nRst, $04, nBb5, $08, nC6
000ACCA1 0380 C780 C604 C780 02C9+  	dc.b	$03, nRst, nBb5, nRst, nA5, $04, nBb5, nRst, $02, nC6, $0E, nRst
000ACCAD 06CD 0280 04CD 0CCE CD0A+  	dc.b	$06, nE6, $02, nRst, $04, nE6, $0C, nF6, nE6, $0A, nD6, $02
000ACCB9 E201                       	smpsNop             $01
000ACCBB EA04                       	smpsSetTempoMod     $04
000ACCBD E6F5                       	smpsAlterVol        $F5
000ACCC1 8060                       	dc.b	nRst, $60
000ACCC3 F800 00                    	smpsCall            Mus91_Credits_Call07
000ACCC6 E609                       	smpsAlterVol        $09
000ACCC8 E103                       	smpsAlterNote       $03
000ACCCC F000 0106 04               	smpsModSet          $00, $01, $06, $04
000ACCD1 F800 00                    	smpsCall            Mus91_Credits_Call0B
000ACCD4 E6EF                       	smpsAlterVol        $EF
000ACCD8 E102                       	smpsAlterNote       $02
000ACCDA 966C E760                  	dc.b	nA1, $6C, smpsNoAttack, $60
000ACCDE E201                       	smpsNop             $01
000ACCE0 F2                         	smpsStop
000ACCE1                            
000ACCE1                            Mus91_Credits_Call12:
000ACCE1 C90C C618 C90C C818 C90C+  	dc.b	nC6, $0C, nA5, $18, nC6, $0C, nB5, $18, nC6, $0C, nB5, $18
000ACCED C448 C60C                  	dc.b	nG5, $48, nA5, $0C
000ACCF1 E3                         	smpsReturn
000ACCF2                            
000ACCF2                            Mus91_Credits_Call07:
000ACCF2 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
000ACCFE 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
000ACD0A C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
000ACD14 F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Call07
000ACD19 E3                         	smpsReturn
000ACD1A                            
000ACD1A                            ; FM2 Data
000ACD1A                            Mus91_Credits_FM2:
000ACD1A 8060                       	dc.b	nRst, $60
000ACD1E                            
000ACD1E                            Mus91_Credits_Loop0F:
000ACD1E A70C A7B0 B0AC ACAE AEA7+  	dc.b	nD3, $0C, nD3, nB3, nB3, nG3, nG3, nA3, nA3, nD3, nD3, nA3
000ACD2A AEAB ABAC ACA5 A5AC ACAB+  	dc.b	nA3, nFs3, nFs3, nG3, nG3, nC3, nC3, nG3, nG3, nFs3, nFs3, nG3
000ACD36 ACA2 A2A2 A2A7 A7A7 A9     	dc.b	nG3, nA2, nA2, nA2, nA2, nD3, nD3, nD3, nE3
000ACD3F F700 02FF DB               	smpsLoop            $00, $02, Mus91_Credits_Loop0F
000ACD46                            
000ACD46                            Mus91_Credits_Loop10:
000ACD46 E805                       	smpsNoteFill        $05
000ACD48 AA0C                       	dc.b	nF3, $0C
000ACD4A F800 00                    	smpsCall            Mus91_Credits_Call0F
000ACD4D E805                       	smpsNoteFill        $05
000ACD4F A90C 0C0C 0C0C             	dc.b	nE3, $0C, $0C, $0C, $0C, $0C
000ACD55 E800                       	smpsNoteFill        $00
000ACD57 A5A7 A9                    	dc.b	nC3, nD3, nE3
000ACD5A F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop10
000ACD5F E805                       	smpsNoteFill        $05
000ACD61 AA                         	dc.b	nF3
000ACD62 F800 00                    	smpsCall            Mus91_Credits_Call0F
000ACD65 E805                       	smpsNoteFill        $05
000ACD67 A9                         	dc.b	nE3
000ACD68 F800 00                    	smpsCall            Mus91_Credits_Call0F
000ACD6B E805                       	smpsNoteFill        $05
000ACD6D A7                         	dc.b	nD3
000ACD6E F800 00                    	smpsCall            Mus91_Credits_Call0F
000ACD71 E805                       	smpsNoteFill        $05
000ACD73 A50C 0C0C 0C0C             	dc.b	nC3, $0C, $0C, $0C, $0C, $0C
000ACD79 E800                       	smpsNoteFill        $00
000ACD7B A0A2 A4                    	dc.b	nG2, nA2, nB2
000ACD7E E805                       	smpsNoteFill        $05
000ACD80                            
000ACD80                            Mus91_Credits_Loop11:
000ACD80 A5                         	dc.b	nC3
000ACD81 F700 18FF FB               	smpsLoop            $00, $18, Mus91_Credits_Loop11
000ACD86 E800                       	smpsNoteFill        $00
000ACD88 A506 80A5 0CA2 0680 A20C+  	dc.b	nC3, $06, nRst, nC3, $0C, nA2, $06, nRst, nA2, $0C, nBb2, $06
000ACD94 80A3 0CA4 0680 A40C        	dc.b	nRst, nBb2, $0C, nB2, $06, nRst, nB2, $0C
000ACD9E E9E8                       	smpsAlterPitch      $E8
000ACDA0 E602                       	smpsAlterVol        $02
000ACDA2                            
000ACDA2                            Mus91_Credits_Loop12:
000ACDA2 B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nA4, $09
000ACDAE 8003 BC0F 8003 BA80 B809+  	dc.b	nRst, $03, nB4, $0F, nRst, $03, nA4, nRst, nG4, $09, nRst, $03
000ACDBA B509 8003                  	dc.b	nE4, $09, nRst, $03
000ACDBE E905                       	smpsAlterPitch      $05
000ACDC0 F700 02FF DE               	smpsLoop            $00, $02, Mus91_Credits_Loop12
000ACDC5 E9F6                       	smpsAlterPitch      $F6
000ACDC7 B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nE4, $09
000ACDD3 8003 B106 8012 B518        	dc.b	nRst, $03, nC4, $06, nRst, $12, nE4, $18
000ACDDB E601                       	smpsAlterVol        $01
000ACDDF                            
000ACDDF                            Mus91_Credits_Loop13:
000ACDDF AE03 80AE 06B5 0380 B506+  	dc.b	nA3, $03, nRst, nA3, $06, nE4, $03, nRst, nE4, $06, nD4, $03
000ACDEB 80B3 06B5 0380 B506        	dc.b	nRst, nD4, $06, nE4, $03, nRst, nE4, $06
000ACDF3 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop13
000ACDF8                            
000ACDF8                            Mus91_Credits_Loop14:
000ACDF8 B303 80B3 06BA 0380 BA06+  	dc.b	nD4, $03, nRst, nD4, $06, nA4, $03, nRst, nA4, $06, nF4, $03
000ACE04 80B6 06BA 0380 BA06        	dc.b	nRst, nF4, $06, nA4, $03, nRst, nA4, $06
000ACE0C F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop14
000ACE11 B003 80B0 06B6 0380 B606+  	dc.b	nB3, $03, nRst, nB3, $06, nF4, $03, nRst, nF4, $06, nD4, $03
000ACE1D 80B3 06B6 0380 B606 B503+  	dc.b	nRst, nD4, $06, nF4, $03, nRst, nF4, $06, nE4, $03, nRst, nE4
000ACE29 06BC 0380 BC06 B903 80B9+  	dc.b	$06, nB4, $03, nRst, nB4, $06, nAb4, $03, nRst, nAb4, $06, nB4
000ACE35 0380 BC06 AE03 80AE 06B5+  	dc.b	$03, nRst, nB4, $06, nA3, $03, nRst, nA3, $06, nE4, $03, nRst
000ACE41 B506 B103 80B1 06B5 0380+  	dc.b	nE4, $06, nC4, $03, nRst, nC4, $06, nE4, $03, nRst, nE4, $06
000ACE4D AE03 8009 8024             	dc.b	nA3, $03, nRst, $09, nRst, $24
000ACE53 E6F8                       	smpsAlterVol        $F8
000ACE55 B106 8003 B180 06B1 1280+  	dc.b	nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst, $06, nC4
000ACE61 0280 01B1 0280 01AF 0680+  	dc.b	$02, nRst, $01, nC4, $02, nRst, $01, nBb3, $06, nRst, $03, nBb3
000ACE6D 0380 06AE 1280 06AE 0280+  	dc.b	$03, nRst, $06, nA3, $12, nRst, $06, nA3, $02, nRst, $01, nA3
000ACE79 0280 01                    	dc.b	$02, nRst, $01
000ACE7C                            
000ACE7C                            Mus91_Credits_Loop15:
000ACE7C B306 8003 B306 8003 B302+  	dc.b	nD4, $06, nRst, $03, nD4, $06, nRst, $03, nD4, $02, nRst, $01
000ACE88 B302 8001                  	dc.b	nD4, $02, nRst, $01
000ACE8C E9FF                       	smpsAlterPitch      $FF
000ACE8E F700 04FF EA               	smpsLoop            $00, $04, Mus91_Credits_Loop15
000ACE93 E904                       	smpsAlterPitch      $04
000ACE95 AC06 8003 AC80 06AC 1280+  	dc.b	nG3, $06, nRst, $03, nG3, nRst, $06, nG3, $12, nRst, $06, nG3
000ACEA1 0280 01AC 0280 01B0 0680+  	dc.b	$02, nRst, $01, nG3, $02, nRst, $01, nB3, $06, nRst, $03, nB3
000ACEAD 8006 B012 8006 B302 8001+  	dc.b	nRst, $06, nB3, $12, nRst, $06, nD4, $02, nRst, $01, nB3, $02
000ACEB9 8001 B106 8003 B180 06B1+  	dc.b	nRst, $01, nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst
000ACEC5 06B5 0280 01B6 0280 01B8+  	dc.b	$06, nE4, $02, nRst, $01, nF4, $02, nRst, $01, nG4, $06, nRst
000ACED1 AC24                       	dc.b	nG3, $24
000ACED5 E90C                       	smpsAlterPitch      $0C
000ACED7 E607                       	smpsAlterVol        $07
000ACED9 E806                       	smpsNoteFill        $06
000ACEDB                            
000ACEDB                            Mus91_Credits_Loop16:
000ACEDB F800 00                    	smpsCall            Mus91_Credits_Call10
000ACEDE E906                       	smpsAlterPitch      $06
000ACEE0 F800 00                    	smpsCall            Mus91_Credits_Call10
000ACEE3 E9FF                       	smpsAlterPitch      $FF
000ACEE5 F800 00                    	smpsCall            Mus91_Credits_Call10
000ACEE8 E902                       	smpsAlterPitch      $02
000ACEEA F800 00                    	smpsCall            Mus91_Credits_Call10
000ACEED E9F9                       	smpsAlterPitch      $F9
000ACEEF F702 02FF E8               	smpsLoop            $02, $02, Mus91_Credits_Loop16
000ACEF4 E800                       	smpsNoteFill        $00
000ACEF6 E9F4                       	smpsAlterPitch      $F4
000ACEF8 E6FC                       	smpsAlterVol        $FC
000ACEFC 8030 8030 BA03 80BA 80B8+  	dc.b	nRst, $30, nRst, $30, nA4, $03, nRst, nA4, nRst, nG4, nRst, nG4
000ACF08 80B6 80B6 80B5 80B5 0280+  	dc.b	nRst, nF4, nRst, nF4, nRst, nE4, nRst, nE4, $02, nRst, nBb4
000ACF13 E602                       	smpsAlterVol        $02
000ACF15 8004 BB08 BD03 80BB 80BA+  	dc.b	nRst, $04, nBb4, $08, nC5, $03, nRst, nBb4, nRst, nA4, $06, nRst
000ACF21 BB04 BA80 02B8 8004 B808+  	dc.b	nBb4, $04, nA4, nRst, $02, nG4, nRst, $04, nG4, $08, nA4, $03
000ACF2D 80B8 80B6 80B6 80B8 04B6+  	dc.b	nRst, nG4, nRst, nF4, nRst, nF4, nRst, nG4, $04, nF4, nRst, $02
000ACF39 B580 04B5 08B5 0380 B580+  	dc.b	nE4, nRst, $04, nE4, $08, nE4, $03, nRst, nE4, nRst, nA4, $09
000ACF45 8003 BA0A B302             	dc.b	nRst, $03, nA4, $0A, nD4, $02
000ACF4B E90C                       	smpsAlterPitch      $0C
000ACF4D E6FE                       	smpsAlterVol        $FE
000ACF51 8060                       	dc.b	nRst, $60
000ACF53                            
000ACF53                            Mus91_Credits_Loop17:
000ACF53 AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
000ACF5F 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000ACF6B A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000ACF75 F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Loop17
000ACF7A AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, $06, nG3
000ACF86 06A9 0680 AA80 AC80 A906+  	dc.b	$06, nE3, $06, nRst, nF3, nRst, nG3, nRst, nE3, $06, nRst, nE3
000ACF92 80AD 80AD 80B0 0680 B080+  	dc.b	nRst, nAb3, nRst, nAb3, nRst, nB3, $06, nRst, nB3, nRst, nD4, nRst
000ACF9E B380 800C AE12 8006 AE12+  	dc.b	nD4, nRst, nRst, $0C, nA3, $12, nRst, $06, nA3, $12, nAb3, $12
000ACFAA AE06 80                    	dc.b	nA3, $06, nRst
000ACFAD E6FD                       	smpsAlterVol        $FD
000ACFAF A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000ACFB3 F2                         	smpsStop
000ACFB4                            
000ACFB4                            	; Unused data
000ACFB4                            	; Could this be a blanked-out 'smpsNop $01'? It's near an smpsStop.
000ACFB4 0001                       	dc.b	$00, $01
000ACFB6                            
000ACFB6                            Mus91_Credits_Call0F:
000ACFB6 0C0C 0C0C 0C0C             	dc.b	$0C, $0C, $0C, $0C, $0C, $0C
000ACFBC E800                       	smpsNoteFill        $00
000ACFBE 0C                         	dc.b	$0C
000ACFBF E3                         	smpsReturn
000ACFC0                            
000ACFC0                            Mus91_Credits_Call10:
000ACFC0 B103 B1AC ACAE AEAC AC     	dc.b	nC4, $03, nC4, nG3, nG3, nA3, nA3, nG3, nG3
000ACFC9 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Call10
000ACFCE E3                         	smpsReturn
000ACFCF                            
000ACFCF                            ; FM3 Data
000ACFCF                            Mus91_Credits_FM3:
000ACFCF 8060                       	dc.b	nRst, $60
000ACFD1 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_FM3
000ACFD8 E601                       	smpsAlterVol        $01
000ACFDA E040                       	smpsPan             panRight, $00
000ACFDC CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000ACFE8 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000ACFED                            
000ACFED                            Mus91_Credits_Loop0C:
000ACFED E080                       	smpsPan             panLeft, $00
000ACFEF D9                         	dc.b	nE7
000ACFF0 E040                       	smpsPan             panRight, $00
000ACFF2 D5                         	dc.b	nC7
000ACFF3 E602                       	smpsAlterVol        $02
000ACFF5 F700 0DFF F4               	smpsLoop            $00, $0D, Mus91_Credits_Loop0C
000ACFFA E0C0                       	smpsPan             panCenter, $00
000ACFFE E6E5                       	smpsAlterVol        $E5
000AD000 E9E8                       	smpsAlterPitch      $E8
000AD002 D006 D2D5 0CD2 804E 80D0+  	dc.b	nG6, $06, nA6, nC7, $0C, nA6, nRst, $4E, nRst, nG6, $06, nA6
000AD00E D50C D980 4E80 D006 D2D5+  	dc.b	nC7, $0C, nE7, nRst, $4E, nRst, nG6, $06, nA6, nC7, $0C, nA6
000AD01A 8036 80D5 0680 12D2 18D0+  	dc.b	nRst, $36, nRst, nC7, $06, nRst, $12, nA6, $18, nG6, $06, nRst
000AD026 D280 D580                  	dc.b	nA6, nRst, nC7, nRst
000AD02A F4                         	smpsModOff
000AD02D E6FE                       	smpsAlterVol        $FE
000AD02F                            
000AD02F                            Mus91_Credits_Loop0D:
000AD02F C901 E7C8 1B80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $1B, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $1B
000AD03B 8008                       	dc.b	nRst, $08
000AD03D F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop0D
000AD042 C901 E7C8 0B80 0CC7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0B, nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $0B
000AD04E 800C CA01 E7C9 1B80 08C9+  	dc.b	nRst, $0C, nCs6, $01, smpsNoAttack, nC6, $1B, nRst, $08, nC6, $01, smpsNoAttack
000AD05A C824 E718 E75A 8006        	dc.b	nB5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000AD062 E918                       	smpsAlterPitch      $18
000AD064 8060 8080 30               	dc.b	nRst, $60, nRst, nRst, $30
000AD069 E9E8                       	smpsAlterPitch      $E8
000AD06D E90C                       	smpsAlterPitch      $0C
000AD06F E603                       	smpsAlterVol        $03
000AD071 E102                       	smpsAlterNote       $02
000AD073 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000AD07A F800 00                    	smpsCall            Mus91_Credits_Call0C
000AD07F E90C                       	smpsAlterPitch      $0C
000AD081 E60B                       	smpsAlterVol        $0B
000AD083 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000AD088 F800 00                    	smpsCall            Mus91_Credits_Call0D
000AD08D E6EC                       	smpsAlterVol        $EC
000AD08F 8006                       	dc.b	nRst, $06
000AD091 E114                       	smpsAlterNote       $14
000AD093 C401 E7                    	dc.b	nG5, $01, smpsNoAttack
000AD096 E100                       	smpsAlterNote       $00
000AD098 02C6 03                    	dc.b	$02, nA5, $03
000AD09B E805                       	smpsNoteFill        $05
000AD09D C903 C906 C603 C9          	dc.b	nC6, $03, nC6, $06, nA5, $03, nC6
000AD0A4 E800                       	smpsNoteFill        $00
000AD0A6 C9                         	dc.b	nC6
000AD0A7 E6FC                       	smpsAlterVol        $FC
000AD0A9 E933                       	smpsAlterPitch      $33
000AD0AD B403                       	dc.b	nEb4, $03
000AD0AF E607                       	smpsAlterVol        $07
000AD0B1 B4                         	dc.b	nEb4
000AD0B2 E607                       	smpsAlterVol        $07
000AD0B4 B4                         	dc.b	nEb4
000AD0B5 E607                       	smpsAlterVol        $07
000AD0B7 B4                         	dc.b	nEb4
000AD0BA E6EF                       	smpsAlterVol        $EF
000AD0BC E9CD                       	smpsAlterPitch      $CD
000AD0BE CD03 CED0 8009             	dc.b	nE6, $03, nF6, nG6, nRst, $09
000AD0C4 E1EC                       	smpsAlterNote       $EC
000AD0C6 D501 E7                    	dc.b	nC7, $01, smpsNoAttack
000AD0C9 E100                       	smpsAlterNote       $00
000AD0CB F02C 0104 04               	smpsModSet          $2C, $01, $04, $04
000AD0D0 D523                       	dc.b	nC7, $23
000AD0D2 F4                         	smpsModOff
000AD0D5 E6FF                       	smpsAlterVol        $FF
000AD0D7 E103                       	smpsAlterNote       $03
000AD0D9 F800 00                    	smpsCall            Mus91_Credits_Call0E
000AD0DC E100                       	smpsAlterNote       $00
000AD0E0 E609                       	smpsAlterVol        $09
000AD0E2 8030 8030 802E C202 8004+  	dc.b	nRst, $30, nRst, $30, nRst, $2E, nF5, $02, nRst, $04, nF5, $08
000AD0EE C203 80C2 80C1 0380 13BF+  	dc.b	nF5, $03, nRst, nF5, nRst, nE5, $03, nRst, $13, nD5, $02, nRst
000AD0FA 04BF 08BF 0380 BF80 BD03+  	dc.b	$04, nD5, $08, nD5, $03, nRst, nD5, nRst, nC5, $03, nRst, $15
000AD106 8004 D208 D003 80D0 80CE+  	dc.b	nRst, $04, nA6, $08, nG6, $03, nRst, nG6, nRst, nF6, nRst, nF6
000AD112 80CD 04CE 02CD 04CB 02     	dc.b	nRst, nE6, $04, nF6, $02, nE6, $04, nD6, $02
000AD11D E6F9                       	smpsAlterVol        $F9
000AD11F 8060                       	dc.b	nRst, $60
000AD121                            
000AD121                            Mus91_Credits_Loop0E:
000AD121 CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000AD12D 1ECD 0680 CD80 CA80 CA80+  	dc.b	$1E, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $12
000AD139 D01E                       	dc.b	nG6, $1E
000AD13B F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0E
000AD140 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
000AD14C 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
000AD158 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
000AD15E E6F8                       	smpsAlterVol        $F8
000AD160 E103                       	smpsAlterNote       $03
000AD162 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000AD166 F2                         	smpsStop
000AD167                            
000AD167                            Mus91_Credits_Call14:
000AD167 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000AD173 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000AD178 E3                         	smpsReturn
000AD179                            
000AD179                            ; FM4 Data
000AD179                            Mus91_Credits_FM4:
000AD17B 8060                       	dc.b	nRst, $60
000AD17D E608                       	smpsAlterVol        $08
000AD17F F800 00                    	smpsCall            Mus91_Credits_Call08
000AD182 C30C C380 80C6 C680 80     	dc.b	nFs5, $0C, nFs5, nRst, nRst, nA5, nA5, nRst, nRst
000AD18B F800 00                    	smpsCall            Mus91_Credits_Call08
000AD18E C624 2418                  	dc.b	nA5, $24, $24, $18
000AD192 E080                       	smpsPan             panLeft, $00
000AD194 F800 00                    	smpsCall            Mus91_Credits_Call03
000AD197 E6F2                       	smpsAlterVol        $F2
000AD199                            
000AD199                            Mus91_Credits_Loop09:
000AD199 C501 E7C4 1B80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $1B, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $1B
000AD1A5 8008                       	dc.b	nRst, $08
000AD1A7 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop09
000AD1AC C501 E7C4 0B80 0CC3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0B, nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $0B
000AD1B8 800C C701 E7C6 1B80 08C5+  	dc.b	nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $1B, nRst, $08, nAb5, $01, smpsNoAttack
000AD1C4 C424 E718 E75A 8006        	dc.b	nG5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000AD1CC E918                       	smpsAlterPitch      $18
000AD1CE 8060 8080 5A               	dc.b	nRst, $60, nRst, nRst, $5A
000AD1D3 E0C0                       	smpsPan             panCenter, $00
000AD1D7 E9F4                       	smpsAlterPitch      $F4
000AD1D9 E605                       	smpsAlterVol        $05
000AD1DB                            
000AD1DB                            Mus91_Credits_Loop0A:
000AD1DB D409 8003 D480 D506 80D4+  	dc.b	nB6, $09, nRst, $03, nB6, nRst, nC7, $06, nRst, nB6, $0C, nRst
000AD1E7 06                         	dc.b	$06
000AD1E8 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop0A
000AD1ED 8012 D503 800F D503 801B+  	dc.b	nRst, $12, nC7, $03, nRst, $0F, nC7, $03, nRst, $1B, nC7, $03
000AD1F9 800F D503 8009 CE09 8003+  	dc.b	nRst, $0F, nC7, $03, nRst, $09, nF6, $09, nRst, $03, nF6, nRst
000AD205 D206 80CE 0C80 06D1 0980+  	dc.b	nA6, $06, nRst, nF6, $0C, nRst, $06, nAb6, $09, nRst, $03, nAb6
000AD211 80D4 0680 D10C 8006 8080+  	dc.b	nRst, nB6, $06, nRst, nAb6, $0C, nRst, $06, nRst, nRst, $0C, nC7
000AD21D 0380 0FD5 0380 0FD5 0380+  	dc.b	$03, nRst, $0F, nC7, $03, nRst, $0F, nC7, $03, nRst, $2D
000AD228 E9F4                       	smpsAlterPitch      $F4
000AD22A E603                       	smpsAlterVol        $03
000AD22E E080                       	smpsPan             panLeft, $00
000AD230 F800 00                    	smpsCall            Mus91_Credits_Call09
000AD235 E6F6                       	smpsAlterVol        $F6
000AD237 E918                       	smpsAlterPitch      $18
000AD239 F800 00                    	smpsCall            Mus91_Credits_Call0A
000AD23C 800C                       	dc.b	nRst, $0C
000AD23E E1EC                       	smpsAlterNote       $EC
000AD240 C602                       	dc.b	nA5, $02
000AD242 E100                       	smpsAlterNote       $00
000AD244 E70A 8003 C680 80C6 8009   	dc.b	smpsNoAttack, $0A, nRst, $03, nA5, nRst, nRst, nA5, nRst, $09
000AD24E F800 00                    	smpsCall            Mus91_Credits_Call0A
000AD251 E1EC                       	smpsAlterNote       $EC
000AD253 C602                       	dc.b	nA5, $02
000AD255 E100                       	smpsAlterNote       $00
000AD257 0A80 06                    	dc.b	$0A, nRst, $06
000AD25A F018 0107 04               	smpsModSet          $18, $01, $07, $04
000AD25F E1E2                       	smpsAlterNote       $E2
000AD261 C602 E7                    	dc.b	nA5, $02, smpsNoAttack
000AD264 E100                       	smpsAlterNote       $00
000AD266 1C                         	dc.b	$1C
000AD267 E100                       	smpsAlterNote       $00
000AD269 E103                       	smpsAlterNote       $03
000AD26B F800 00                    	smpsCall            Mus91_Credits_Call06
000AD26E E100                       	smpsAlterNote       $00
000AD270 E0C0                       	smpsPan             panCenter, $00
000AD274 E6F5                       	smpsAlterVol        $F5
000AD276 8060                       	dc.b	nRst, $60
000AD278                            
000AD278                            Mus91_Credits_Loop0B:
000AD278 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000AD284 1ECA 0680 CA80 C680 C680+  	dc.b	$1E, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $12
000AD290 CB1E                       	dc.b	nD6, $1E
000AD292 F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0B
000AD299 E103                       	smpsAlterNote       $03
000AD29B E608                       	smpsAlterVol        $08
000AD29D F800 00                    	smpsCall            Mus91_Credits_Call0B
000AD2A2 E6F0                       	smpsAlterVol        $F0
000AD2A4 F000 0106 04               	smpsModSet          $00, $01, $06, $04
000AD2A9 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000AD2AD F2                         	smpsStop
000AD2AE                            
000AD2AE                            Mus91_Credits_Call08:
000AD2AE C824 2418 C624 2418 C424+  	dc.b	nB5, $24, $24, $18, nA5, $24, $24, $18, nG5, $24, $24, $18
000AD2BA E3                         	smpsReturn
000AD2BB                            
000AD2BB                            Mus91_Credits_Call03:
000AD2BD E9E8                       	smpsAlterPitch      $E8
000AD2BF E60D                       	smpsAlterVol        $0D
000AD2C1                            
000AD2C1                            Mus91_Credits_Loop2D:
000AD2C1 F800 00                    	smpsCall            Mus91_Credits_Call1B
000AD2C4 BFBF                       	dc.b	nD5, nD5
000AD2C6 F700 02FF F7               	smpsLoop            $00, $02, Mus91_Credits_Loop2D
000AD2CB F800 00                    	smpsCall            Mus91_Credits_Call1B
000AD2CE B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
000AD2DA E603                       	smpsAlterVol        $03
000AD2DC E90C                       	smpsAlterPitch      $0C
000AD2E0 D018 D2D4                  	dc.b	nG6, $18, nA6, nB6
000AD2E4 E9F4                       	smpsAlterPitch      $F4
000AD2E8 E3                         	smpsReturn
000AD2E9                            
000AD2E9                            Mus91_Credits_Call1B:
000AD2E9 C10C C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $0C, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000AD2F5 BCB8 B8                    	dc.b	nB4, nG4, nG4
000AD2F8 E3                         	smpsReturn
000AD2F9                            
000AD2F9                            Mus91_Credits_Call0A:
000AD2F9 800C                       	dc.b	nRst, $0C
000AD2FB E1EC                       	smpsAlterNote       $EC
000AD2FD C402                       	dc.b	nG5, $02
000AD2FF E100                       	smpsAlterNote       $00
000AD301 E706 8001 C403 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nG5, $03, nRst, $18, nRst, $0C
000AD30B E1EC                       	smpsAlterNote       $EC
000AD30D CA02                       	dc.b	nCs6, $02
000AD30F E100                       	smpsAlterNote       $00
000AD311 E706 8001 CA03 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nCs6, $03, nRst, $18, nRst, $0C
000AD31B E1EC                       	smpsAlterNote       $EC
000AD31D C902                       	dc.b	nC6, $02
000AD31F E100                       	smpsAlterNote       $00
000AD321 E706 8001 C903 8018        	dc.b	smpsNoAttack, $06, nRst, $01, nC6, $03, nRst, $18
000AD329 E3                         	smpsReturn
000AD32A                            
000AD32A                            Mus91_Credits_Call06:
000AD32A E608                       	smpsAlterVol        $08
000AD32E 8030 8030                  	dc.b	nRst, $30, nRst, $30
000AD332 E501                       	smpsChanTempoDiv    $01
000AD334 F800 00                    	smpsCall            Mus91_Credits_Call17
000AD337 E502                       	smpsChanTempoDiv    $02
000AD33B F001 0101 04               	smpsModSet          $01, $01, $01, $04
000AD340 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000AD34C 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000AD358 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000AD364 0CCD D60A D702             	dc.b	$0C, nE6, nCs7, $0A, nD7, $02
000AD36A E3                         	smpsReturn
000AD36B                            
000AD36B                            Mus91_Credits_Call17:
000AD36B AF01 E7AE 0480 07AF 01E7+  	dc.b	nBb3, $01, smpsNoAttack, nA3, $04, nRst, $07, nBb3, $01, smpsNoAttack, nA3, $04
000AD377 8007 B101 E7B0 0480 07B1+  	dc.b	nRst, $07, nC4, $01, smpsNoAttack, nB3, $04, nRst, $07, nC4, $01, smpsNoAttack
000AD383 B004 8007 B201 E7B1 0480+  	dc.b	nB3, $04, nRst, $07, nCs4, $01, smpsNoAttack, nC4, $04, nRst, $07, nCs4
000AD38F 01E7 B104 8007 B301 E7B2+  	dc.b	$01, smpsNoAttack, nC4, $04, nRst, $07, nD4, $01, smpsNoAttack, nCs4, $04, nRst
000AD39B 07B3 01E7 B204 8003        	dc.b	$07, nD4, $01, smpsNoAttack, nCs4, $04, nRst, $03
000AD3A3 E3                         	smpsReturn
000AD3A4                            
000AD3A4                            Mus91_Credits_Call0B:
000AD3A4 800C D0D4 D7DB 8006 DB0C+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, nRst, $06, nFs7, $0C, nG7, $06
000AD3B0 DB0C DD54 800C DE80 DE80+  	dc.b	nFs7, $0C, nAb7, $54, nRst, $0C, nA7, nRst, nA7, nRst, $12, nAb7
000AD3BC DE0C                       	dc.b	nA7, $0C
000AD3BE E3                         	smpsReturn
000AD3BF                            
000AD3BF                            ; FM5 Data
000AD3BF                            Mus91_Credits_FM5:
000AD3C1 8060                       	dc.b	nRst, $60
000AD3C3 E6F0                       	smpsAlterVol        $F0
000AD3C5 F800 00                    	smpsCall            Mus91_Credits_Call02
000AD3C8 BF0C 0C80 18C3 0C0C 8018   	dc.b	nD5, $0C, $0C, nRst, $18, nFs5, $0C, $0C, nRst, $18
000AD3D2 F800 00                    	smpsCall            Mus91_Credits_Call02
000AD3D5 C324 2418                  	dc.b	nFs5, $24, $24, $18
000AD3D9 E040                       	smpsPan             panRight, $00
000AD3DB F8FE DE                    	smpsCall            Mus91_Credits_Call03
000AD3DE E6F2                       	smpsAlterVol        $F2
000AD3E0                            
000AD3E0                            Mus91_Credits_Loop07:
000AD3E0 C201 E7C1 1B80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $1B, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $1B
000AD3EC 8008                       	dc.b	nRst, $08
000AD3EE F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop07
000AD3F3 C201 E7C1 0B80 0CC0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0B, nRst, $0C, nEb5, $01, smpsNoAttack, nD5, $0B
000AD3FF 800C C301 E7C2 1B80 08C2+  	dc.b	nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $1B, nRst, $08, nF5, $01, smpsNoAttack
000AD40B C124 E718 E75A 8006        	dc.b	nE5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000AD413 E918                       	smpsAlterPitch      $18
000AD415 E0C0                       	smpsPan             panCenter, $00
000AD417 E603                       	smpsAlterVol        $03
000AD419 E90C                       	smpsAlterPitch      $0C
000AD41D 804E B803 BABD 80BA 8051+  	dc.b	nRst, $4E, nG4, $03, nA4, nC5, nRst, nA4, nRst, $51, nA5, $03
000AD429 C2BD 80C2 805D             	dc.b	nF5, nC5, nRst, nF5, nRst, $5D
000AD431 E9E8                       	smpsAlterPitch      $E8
000AD433 E602                       	smpsAlterVol        $02
000AD435                            
000AD435                            Mus91_Credits_Loop08:
000AD435 D009 8003 D080 D206 80D0+  	dc.b	nG6, $09, nRst, $03, nG6, nRst, nA6, $06, nRst, nG6, $0C, nRst
000AD441 06                         	dc.b	$06
000AD442 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop08
000AD447 8012 D203 800F D203 801B+  	dc.b	nRst, $12, nA6, $03, nRst, $0F, nA6, $03, nRst, $1B, nA6, $03
000AD453 800F D203 8009 CB09 8003+  	dc.b	nRst, $0F, nA6, $03, nRst, $09, nD6, $09, nRst, $03, nD6, nRst
000AD45F CE06 80CB 0C80 06CD 0980+  	dc.b	nF6, $06, nRst, nD6, $0C, nRst, $06, nE6, $09, nRst, $03, nE6
000AD46B 80D1 0680 CD0C 8018 D203+  	dc.b	nRst, nAb6, $06, nRst, nE6, $0C, nRst, $18, nA6, $03, nRst, $0F
000AD477 D203 800F D203 802D        	dc.b	nA6, $03, nRst, $0F, nA6, $03, nRst, $2D
000AD481 E040                       	smpsPan             panRight, $00
000AD483 E9F4                       	smpsAlterPitch      $F4
000AD485 E603                       	smpsAlterVol        $03
000AD487 F800 00                    	smpsCall            Mus91_Credits_Call04
000AD48C E924                       	smpsAlterPitch      $24
000AD48E E6F4                       	smpsAlterVol        $F4
000AD490 F800 00                    	smpsCall            Mus91_Credits_Call05
000AD493 CDCE D0                    	dc.b	nE6, nF6, nG6
000AD496 F800 00                    	smpsCall            Mus91_Credits_Call05
000AD499 D0CE CD                    	dc.b	nG6, nF6, nE6
000AD49C E9F4                       	smpsAlterPitch      $F4
000AD49E F8FE 8A                    	smpsCall            Mus91_Credits_Call06
000AD4A1 E0C0                       	smpsPan             panCenter, $00
000AD4A5 E103                       	smpsAlterNote       $03
000AD4A7 E6F8                       	smpsAlterVol        $F8
000AD4A9 8060                       	dc.b	nRst, $60
000AD4AB F8F8 45                    	smpsCall            Mus91_Credits_Call07
000AD4AE E600                       	smpsAlterVol        $00
000AD4B2 8060 800C CD06 80D4 CD06+  	dc.b	nRst, $60, nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C
000AD4BE CD06 80D4 CD06 8018        	dc.b	nE6, $06, nRst, nB6, nE6, $06, nRst, $18
000AD4C6 E605                       	smpsAlterVol        $05
000AD4C8 800C AE80 AE               	dc.b	nRst, $0C, nA3, nRst, nA3
000AD4CD F2                         	smpsStop
000AD4CE                            
000AD4CE                            Mus91_Credits_Call02:
000AD4CE C424 2418 C324 2418 C124+  	dc.b	nG5, $24, $24, $18, nFs5, $24, $24, $18, nE5, $24, $24, $18
000AD4DA E3                         	smpsReturn
000AD4DB                            
000AD4DB                            ; PSG1 Data
000AD4DB                            Mus91_Credits_PSG1:
000AD4DB 8060                       	dc.b	nRst, $60
000AD4DD F508                       	smpsPSGvoice        fTone_08
000AD4DF EC03                       	smpsPSGAlterVol     $03
000AD4E1 E806                       	smpsNoteFill        $06
000AD4E3 F800 00                    	smpsCall            Mus91_Credits_Call11
000AD4E6 F501                       	smpsPSGvoice        fTone_01
000AD4E8 E800                       	smpsNoteFill        $00
000AD4EA ECFD                       	smpsPSGAlterVol     $FD
000AD4EC                            
000AD4EC                            Mus91_Credits_Loop2A:
000AD4EC 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000AD4F8 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000AD500 F700 03FF E8               	smpsLoop            $00, $03, Mus91_Credits_Loop2A
000AD505 8018 C606 801E C60C 8018+  	dc.b	nRst, $18, nA5, $06, nRst, $1E, nA5, $0C, nRst, $18, nRst, $18
000AD511 C406 801E C40C 8018        	dc.b	nG5, $06, nRst, $1E, nG5, $0C, nRst, $18
000AD519 F505                       	smpsPSGvoice        fTone_05
000AD51B F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
000AD520 E810                       	smpsNoteFill        $10
000AD522 C124 BFC1 BFC1 0C80 BF80+  	dc.b	nE5, $24, nD5, nE5, nD5, nE5, $0C, nRst, nD5, nRst, nF5, $24
000AD52E E800                       	smpsNoteFill        $00
000AD530 C160 E73C                  	dc.b	nE5, $60, smpsNoAttack, $3C
000AD534 F4                         	smpsModOff
000AD535 F509                       	smpsPSGvoice        fTone_09
000AD537 EC01                       	smpsPSGAlterVol     $01
000AD539                            
000AD539                            Mus91_Credits_Loop2B:
000AD539 8006 CD0C CDCD CD06 80CD+  	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, nE6, $0C, nE6
000AD545 CD03 0906                  	dc.b	nE6, $03, $09, $06
000AD549 E905                       	smpsAlterPitch      $05
000AD54B F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop2B
000AD550 E9F6                       	smpsAlterPitch      $F6
000AD552 8006 CD0C CDCD CD06 8030   	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, $30
000AD55C F508                       	smpsPSGvoice        fTone_08
000AD55E EC01                       	smpsPSGAlterVol     $01
000AD560 F800 00                    	smpsCall            Mus91_Credits_Call15
000AD563 8002 8030                  	dc.b	nRst, $02, nRst, $30
000AD567 EC03                       	smpsPSGAlterVol     $03
000AD569 E9F4                       	smpsAlterPitch      $F4
000AD56B F505                       	smpsPSGvoice        fTone_05
000AD56D F800 00                    	smpsCall            Mus91_Credits_Call09
000AD570 E90C                       	smpsAlterPitch      $0C
000AD572 ECFC                       	smpsPSGAlterVol     $FC
000AD574 F500                       	smpsPSGvoice        $00
000AD576 F800 00                    	smpsCall            Mus91_Credits_Call16
000AD579 800C C280 03C2 8080 C280+  	dc.b	nRst, $0C, nF5, nRst, $03, nF5, nRst, nRst, nF5, nRst, $09
000AD584 F800 00                    	smpsCall            Mus91_Credits_Call16
000AD587 C20C 8006 C21E             	dc.b	nF5, $0C, nRst, $06, nF5, $1E
000AD58D F506                       	smpsPSGvoice        fTone_06
000AD58F EC04                       	smpsPSGAlterVol     $04
000AD591 8030 8030                  	dc.b	nRst, $30, nRst, $30
000AD595 E501                       	smpsChanTempoDiv    $01
000AD597 F8FD D2                    	smpsCall            Mus91_Credits_Call17
000AD59A E502                       	smpsChanTempoDiv    $02
000AD59C CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000AD5A8 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000AD5B4 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000AD5C0 0CCD D60A D702 8060 8080+  	dc.b	$0C, nE6, nCs7, $0A, nD7, $02, nRst, $60, nRst, nRst, nRst, nRst
000AD5CC ECFF                       	smpsPSGAlterVol     $FF
000AD5CE 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
000AD5DA 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
000AD5E6 C9CA 06                    	dc.b	nC6, nCs6, $06
000AD5E9 F2                         	smpsStop
000AD5EA                            
000AD5EA                            Mus91_Credits_Call16:
000AD5EA 800C C107 8002 C103 8018+  	dc.b	nRst, $0C, nE5, $07, nRst, $02, nE5, $03, nRst, $18, nRst, $0C
000AD5F6 C707 8002 C703 8018 800C+  	dc.b	nBb5, $07, nRst, $02, nBb5, $03, nRst, $18, nRst, $0C, nA5, $07
000AD602 8002 C603 8018             	dc.b	nRst, $02, nA5, $03, nRst, $18
000AD608 E3                         	smpsReturn
000AD609                            
000AD609                            ; PSG2 Data
000AD609                            Mus91_Credits_PSG2:
000AD609 8060                       	dc.b	nRst, $60
000AD60B F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_PSG2
000AD610 8002                       	dc.b	nRst, $02
000AD612 F8FB 53                    	smpsCall            Mus91_Credits_Call14
000AD615 ECFE                       	smpsPSGAlterVol     $FE
000AD617 F501                       	smpsPSGvoice        fTone_01
000AD619 8016 CD06 801E CD0C 8018+  	dc.b	nRst, $16, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000AD625 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000AD62D                            
000AD62D                            Mus91_Credits_Loop24:
000AD62D 8018 CD06 801E CD0C 8018+  	dc.b	nRst, $18, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000AD639 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000AD641 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop24
000AD646 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000AD652 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000AD65A E806                       	smpsNoteFill        $06
000AD65C F506                       	smpsPSGvoice        fTone_06
000AD65E                            
000AD65E                            Mus91_Credits_Loop25:
000AD65E D50C D4D2 D0               	dc.b	nC7, $0C, nB6, nA6, nG6
000AD663 F700 08FF F7               	smpsLoop            $00, $08, Mus91_Credits_Loop25
000AD668 E800                       	smpsNoteFill        $00
000AD66A F509                       	smpsPSGvoice        fTone_09
000AD66C EC01                       	smpsPSGAlterVol     $01
000AD66E                            
000AD66E                            Mus91_Credits_Loop26:
000AD66E 8006 D00C D0D0 D006 80D0+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, nG6, $0C, nG6
000AD67A D003 0906                  	dc.b	nG6, $03, $09, $06
000AD67E E905                       	smpsAlterPitch      $05
000AD680 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop26
000AD685 E9F6                       	smpsAlterPitch      $F6
000AD687 8006 D00C D0D0 D006 8030+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, $30, nRst, $02
000AD693 E101                       	smpsAlterNote       $01
000AD695 EC03                       	smpsPSGAlterVol     $03
000AD697 F800 00                    	smpsCall            Mus91_Credits_Call15
000AD69A E100                       	smpsAlterNote       $00
000AD69C 8030                       	dc.b	nRst, $30
000AD69E EC01                       	smpsPSGAlterVol     $01
000AD6A0 E9F4                       	smpsAlterPitch      $F4
000AD6A2 F505                       	smpsPSGvoice        fTone_05
000AD6A4 F800 00                    	smpsCall            Mus91_Credits_Call04
000AD6A7 E90C                       	smpsAlterPitch      $0C
000AD6A9 ECFD                       	smpsPSGAlterVol     $FD
000AD6AB E803                       	smpsNoteFill        $03
000AD6AD                            
000AD6AD                            Mus91_Credits_Loop27:
000AD6AD D503 D5DC D5DA D5D9 D5     	dc.b	nC7, $03, nC7, nG7, nC7, nF7, nC7, nE7, nC7
000AD6B6 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop27
000AD6BB                            
000AD6BB                            Mus91_Credits_Loop28:
000AD6BB D3D3 DAD3 D8D3 D6D3        	dc.b	nBb6, nBb6, nF7, nBb6, nEb7, nBb6, nCs7, nBb6
000AD6C3 F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop28
000AD6C8                            
000AD6C8                            Mus91_Credits_Loop29:
000AD6C8 D2D2 D9D2 D7D2 D5D2        	dc.b	nA6, nA6, nE7, nA6, nD7, nA6, nC7, nA6
000AD6D0 F700 04FF F4               	smpsLoop            $00, $04, Mus91_Credits_Loop29
000AD6D5 F701 02FF D4               	smpsLoop            $01, $02, Mus91_Credits_Loop27
000AD6DA 8060 8080 8080 80          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst
000AD6E1                            	; These rests are unnecessary, and cause the following notes to play way too late.
000AD6E1                            	; Delete these three notes to fix this.
000AD6E1 8080 80                    	dc.b	nRst, nRst, nRst
000AD6E4                            	; This erroneous FM-only command causes the following notes to be inaudible.
000AD6E4 E60C                       	smpsAlterVol        $0C
000AD6E6 E102                       	smpsAlterNote       $02
000AD6E8 EC02                       	smpsPSGAlterVol     $02
000AD6EA 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
000AD6F6 80D4 CD                    	dc.b	nRst, nB6, nE6
000AD6F9 F2                         	smpsStop
000AD6FA                            
000AD6FA                            ; PSG3 Data
000AD6FA                            Mus91_Credits_PSG3:
000AD6FA F3E7                       	smpsPSGform         $E7
000AD6FC E804                       	smpsNoteFill        $04
000AD6FE                            
000AD6FE                            Mus91_Credits_Loop18:
000AD6FE 000C                       	dc.b	nMaxPSG, $0C
000AD700 F700 48FF FA               	smpsLoop            $00, $48, Mus91_Credits_Loop18
000AD705 E806                       	smpsNoteFill        $06
000AD707                            
000AD707                            Mus91_Credits_Loop19:
000AD707 0C                         	dc.b	$0C
000AD708 F700 60FF FB               	smpsLoop            $00, $60, Mus91_Credits_Loop19
000AD70D ECFF                       	smpsPSGAlterVol     $FF
000AD70F F800 00                    	smpsCall            Mus91_Credits_Call13
000AD712 E80E                       	smpsNoteFill        $0E
000AD714 0C                         	dc.b	$0C
000AD715 E803                       	smpsNoteFill        $03
000AD717 0606 0303 0603 0306        	dc.b	$06, $06, $03, $03, $06, $03, $03, $06
000AD71F                            
000AD71F                            Mus91_Credits_Loop1A:
000AD71F F800 00                    	smpsCall            Mus91_Credits_Call13
000AD722 F700 04FF F9               	smpsLoop            $00, $04, Mus91_Credits_Loop1A
000AD727 F509                       	smpsPSGvoice        fTone_09
000AD729 EC01                       	smpsPSGAlterVol     $01
000AD72B E90B                       	smpsAlterPitch      $0B
000AD72D                            
000AD72D                            Mus91_Credits_Loop1B:
000AD72D AE06 AEB5 B5B3 B3B5 B5     	dc.b	nA3, $06, nA3, nE4, nE4, nD4, nD4, nE4, nE4
000AD736 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop1B
000AD73B                            
000AD73B                            Mus91_Credits_Loop1C:
000AD73B B3B3 BABA B6B6 BABA        	dc.b	nD4, nD4, nA4, nA4, nF4, nF4, nA4, nA4
000AD743 F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop1C
000AD748 B0B0 B6B6 B3B3 B6B6 B5B5+  	dc.b	nB3, nB3, nF4, nF4, nD4, nD4, nF4, nF4, nE4, nE4, nB4, nB4
000AD754 B9B9 BCBC AEAE B5B5 B1B1+  	dc.b	nAb4, nAb4, nB4, nB4, nA3, nA3, nE4, nE4, nC4, nC4, nE4, nE4
000AD760 AE06 801E                  	dc.b	nA3, $06, nRst, $1E
000AD764 E802                       	smpsNoteFill        $02
000AD766 E9F5                       	smpsAlterPitch      $F5
000AD768                            
000AD768                            Mus91_Credits_Loop1D:
000AD768 F504                       	smpsPSGvoice        fTone_04
000AD76A 0003 03                    	dc.b	nMaxPSG, $03, $03
000AD76D EC02                       	smpsPSGAlterVol     $02
000AD76F F508                       	smpsPSGvoice        fTone_08
000AD771 E808                       	smpsNoteFill        $08
000AD773 06                         	dc.b	$06
000AD774 E803                       	smpsNoteFill        $03
000AD776 ECFE                       	smpsPSGAlterVol     $FE
000AD778 F700 1EFF EC               	smpsLoop            $00, $1E, Mus91_Credits_Loop1D
000AD77D 8024                       	dc.b	nRst, $24
000AD77F                            
000AD77F                            Mus91_Credits_Loop1E:
000AD77F F504                       	smpsPSGvoice        fTone_04
000AD781 0303                       	dc.b	$03, $03
000AD783 EC02                       	smpsPSGAlterVol     $02
000AD785 F508                       	smpsPSGvoice        fTone_08
000AD787 E808                       	smpsNoteFill        $08
000AD789 06                         	dc.b	$06
000AD78A E803                       	smpsNoteFill        $03
000AD78C ECFE                       	smpsPSGAlterVol     $FE
000AD78E F700 20FF ED               	smpsLoop            $00, $20, Mus91_Credits_Loop1E
000AD793 8030                       	dc.b	nRst, $30
000AD795 E801                       	smpsNoteFill        $01
000AD797 F504                       	smpsPSGvoice        fTone_04
000AD799 EC03                       	smpsPSGAlterVol     $03
000AD79B                            
000AD79B                            Mus91_Credits_Loop1F:
000AD79B 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000AD79F F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop1F
000AD7A4                            
000AD7A4                            Mus91_Credits_Loop20:
000AD7A4 8004 0002                  	dc.b	nRst, $04, nMaxPSG, $02
000AD7A8 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop20
000AD7AD ECFF                       	smpsPSGAlterVol     $FF
000AD7AF                            
000AD7AF                            Mus91_Credits_Loop21:
000AD7AF 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000AD7B3 F700 18FF F8               	smpsLoop            $00, $18, Mus91_Credits_Loop21
000AD7B8 ECFE                       	smpsPSGAlterVol     $FE
000AD7BA                            
000AD7BA                            Mus91_Credits_Loop22:
000AD7BA 0004 8000                  	dc.b	nMaxPSG, $04, nRst, nMaxPSG
000AD7BE F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop22
000AD7C3                            
000AD7C3                            Mus91_Credits_Loop23:
000AD7C3 E803                       	smpsNoteFill        $03
000AD7C5 0C                         	dc.b	$0C
000AD7C6 E80C                       	smpsNoteFill        $0C
000AD7C8 0C                         	dc.b	$0C
000AD7C9 E803                       	smpsNoteFill        $03
000AD7CB 0C                         	dc.b	$0C
000AD7CC E80C                       	smpsNoteFill        $0C
000AD7CE 0C                         	dc.b	$0C
000AD7CF F700 0DFF F0               	smpsLoop            $00, $0D, Mus91_Credits_Loop23
000AD7D4 E803                       	smpsNoteFill        $03
000AD7D6 06                         	dc.b	$06
000AD7D7 E80E                       	smpsNoteFill        $0E
000AD7D9 12                         	dc.b	$12
000AD7DA E803                       	smpsNoteFill        $03
000AD7DC 0C                         	dc.b	$0C
000AD7DD E80F                       	smpsNoteFill        $0F
000AD7DF 0C                         	dc.b	$0C
000AD7E0 F2                         	smpsStop
000AD7E1                            
000AD7E1                            ; DAC Data
000AD7E1                            Mus91_Credits_DAC:
000AD7E1 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000AD7ED 0C                         	dc.b	$0C
000AD7EE F800 00                    	smpsCall            Mus91_Credits_Call00
000AD7F1 8118 820C 8281 1882 0C82   	dc.b	dKick, $18, dSnare, $0C, dSnare, dKick, $18, dSnare, $0C, dSnare
000AD7FB F800 00                    	smpsCall            Mus91_Credits_Call00
000AD7FE 810C 8282 8282 8282 82     	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000AD807                            
000AD807                            Mus91_Credits_Loop00:
000AD807 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000AD810 F700 07FF F3               	smpsLoop            $00, $07, Mus91_Credits_Loop00
000AD815 8118 820C 8118 820C 0C0C   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, $0C, $0C
000AD81F                            
000AD81F                            Mus91_Credits_Loop01:
000AD81F 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000AD828 F700 03FF F3               	smpsLoop            $00, $03, Mus91_Credits_Loop01
000AD82D 8118 820C 8118 820C 8282   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000AD837 EB02                       	smpsSetTempoDiv     $02
000AD839                            
000AD839                            Mus91_Credits_Loop02:
000AD839 8112 8106 810C 82          	dc.b	dKick, $12, dKick, $06, dKick, $0C, dSnare
000AD840 F700 05FF F5               	smpsLoop            $00, $05, Mus91_Credits_Loop02
000AD845 8112 8106 8106 8282 82     	dc.b	dKick, $12, dKick, $06, dKick, $06, dSnare, dSnare, dSnare
000AD84E                            
000AD84E                            Mus91_Credits_Loop03:
000AD84E 810C                       	dc.b	dKick, $0C
000AD850 F700 18FF FA               	smpsLoop            $00, $18, Mus91_Credits_Loop03
000AD855 810C 8181 8106 8102 8182+  	dc.b	dKick, $0C, dKick, dKick, dKick, $06, dKick, $02, dKick, dSnare, dSnare, $0C
000AD861 8024                       	dc.b	nRst, $24
000AD863                            
000AD863                            Mus91_Credits_Loop04:
000AD863 810C 8181 81               	dc.b	dKick, $0C, dKick, dKick, dKick
000AD868 F700 07FF F7               	smpsLoop            $00, $07, Mus91_Credits_Loop04
000AD86D 810C 8182 0382 8282 8282+  	dc.b	dKick, $0C, dKick, dSnare, $03, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000AD879 F800 00                    	smpsCall            Mus91_Credits_Call01
000AD87C 8802 8101 8905 8201 8805+  	dc.b	dHiTimpani, $02, dKick, $01, dMidTimpani, $05, dSnare, $01, dHiTimpani, $05, dMidTimpani, $06
000AD888 F800 00                    	smpsCall            Mus91_Credits_Call01
000AD88B 8902 8201 8805 8201 8905+  	dc.b	dMidTimpani, $02, dSnare, $01, dHiTimpani, $05, dSnare, $01, dMidTimpani, $05, dSnare, $01
000AD897 8802 8203 8203 8281 8182+  	dc.b	dHiTimpani, $02, dSnare, $03, dSnare, $03, dSnare, dKick, dKick, dSnare, dSnare, dKick
000AD8A3 8181 8209 8206 0303 8109+  	dc.b	dKick, dKick, dSnare, $09, dSnare, $06, $03, $03, dKick, $09, $03, dSnare
000AD8AF 0981 0606 0382 0603 0382+  	dc.b	$09, dKick, $06, $06, $03, dSnare, $06, $03, $03, dSnare, $06, dSnare
000AD8BB 8282 8282 8204 0204 8102   	dc.b	dSnare, dSnare, dSnare, dSnare, dSnare, $04, $02, $04, dKick, $02
000AD8C5                            
000AD8C5                            Mus91_Credits_Loop05:
000AD8C5 8004 8108 8206 8181 0C82+  	dc.b	nRst, $04, dKick, $08, dSnare, $06, dKick, dKick, $0C, dSnare, $0A, dKick
000AD8D1 02                         	dc.b	$02
000AD8D2 F700 03FF EF               	smpsLoop            $00, $03, Mus91_Credits_Loop05
000AD8D7 EB01                       	smpsSetTempoDiv     $01
000AD8D9 8018 8214 8104 820C 8282+  	dc.b	nRst, $18, dSnare, $14, dKick, $04, dSnare, $0C, dSnare, dSnare, $0C, $08
000AD8E5 8104                       	dc.b	dKick, $04
000AD8E7                            
000AD8E7                            Mus91_Credits_Loop06:
000AD8E7 810C 8281 82               	dc.b	dKick, $0C, dSnare, dKick, dSnare
000AD8EC F701 03FF F7               	smpsLoop            $01, $03, Mus91_Credits_Loop06
000AD8F1 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000AD8FD 03                         	dc.b	$03
000AD8FE F700 03FF E5               	smpsLoop            $00, $03, Mus91_Credits_Loop06
000AD903 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000AD90F F2                         	smpsStop
000AD910                            
000AD910                            Mus91_Credits_Call00:
000AD910 8118 820C 8118 810C 8281   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dKick, $0C, dSnare, dKick
000AD91A F700 03FF F2               	smpsLoop            $00, $03, Mus91_Credits_Call00
000AD91F E3                         	smpsReturn
000AD920                            
000AD920                            Mus91_Credits_Call01:
000AD920 810C 8209 8106 0381 0188+  	dc.b	dKick, $0C, dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani
000AD92C 0382 0188 0B81 0C82 0981+  	dc.b	$03, dSnare, $01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, $03
000AD938 8101 8802 8903 8201 880B+  	dc.b	dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare, $01, dHiTimpani, $0B, dKick, $0C
000AD944 8209 8106 0381 0188 0289+  	dc.b	dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare
000AD950 0188 0B81 0C82 0981 0682+  	dc.b	$01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, dSnare, $01
000AD95B E3                         	smpsReturn
000AD95C                            
000AD95C                            Mus91_Credits_Call11:
000AD95C F800 00                    	smpsCall            Mus91_Credits_Call1A
000AD95F C3BF C1C3 BF               	dc.b	nFs5, nD5, nE5, nFs5, nD5
000AD964 F800 00                    	smpsCall            Mus91_Credits_Call1A
000AD967 C8C6 C8C9 CB               	dc.b	nB5, nA5, nB5, nC6, nD6
000AD96C E3                         	smpsReturn
000AD96D                            
000AD96D                            Mus91_Credits_Call1A:
000AD96D C80C C4C8 CBC9 C8C6 C8C6+  	dc.b	nB5, $0C, nG5, nB5, nD6, nC6, nB5, nA5, nB5, nA5, nFs5, nA5
000AD979 C9C8 C6C4 C6C4 C1C4 C8C6+  	dc.b	nC6, nB5, nA5, nG5, nA5, nG5, nE5, nG5, nB5, nA5, nG5, nFs5
000AD985 C4C3 C4C6                  	dc.b	nG5, nFs5, nG5, nA5
000AD989 E3                         	smpsReturn
000AD98A                            
000AD98A                            ; Unused alternate version of Mus91_Credits_Call0B
000AD98A                            ; Mus91_Credits_CallUnk:
000AD98A 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
000AD996 06DB 0CD9 6080 0CD0 D4D7+  	dc.b	$06, nFs7, $0C, nE7, $60, nRst, $0C, nG6, nB6, nD7, nFs7, $0C
000AD9A2 8006 DB0C DC06 DB0C DD5D+  	dc.b	nRst, $06, nFs7, $0C, nG7, $06, nFs7, $0C, nAb7, $5D, nRst, $03
000AD9AE DE12 8006 DE12 8006 8006+  	dc.b	nA7, $12, nRst, $06, nA7, $12, nRst, $06, nRst, $06, nAb7, $12
000AD9BA DE06 8012                  	dc.b	nA7, $06, nRst, $12
000AD9BE E3                         	smpsReturn
000AD9BF                            
000AD9BF                            Mus91_Credits_Call13:
000AD9BF E80E                       	smpsNoteFill        $0E
000AD9C1 0C                         	dc.b	$0C
000AD9C2 E803                       	smpsNoteFill        $03
000AD9C4 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
000AD9CA E3                         	smpsReturn
000AD9CB                            
000AD9CB                            Mus91_Credits_Call0C:
000AD9CB D409 8003 D406 D2          	dc.b	nB6, $09, nRst, $03, nB6, $06, nA6
000AD9D2 F700 03FF F5               	smpsLoop            $00, $03, Mus91_Credits_Call0C
000AD9D7 D4D2 CDC9 D00C D206 E7CE+  	dc.b	nB6, nA6, nE6, nC6, nG6, $0C, nA6, $06, smpsNoAttack, nF6, $4D, nRst
000AD9E3 01D2 24D4 0CD1 24D4 0980+  	dc.b	$01, nA6, $24, nB6, $0C, nAb6, $24, nB6, $09, nRst, $03, nB6
000AD9EF 12D2 1E                    	dc.b	$12, nA6, $1E
000AD9F2 E3                         	smpsReturn
000AD9F3                            
000AD9F3                            Mus91_Credits_Call15:
000AD9F3 8030 8080 DA03 D7D2 CED7+  	dc.b	nRst, $30, nRst, nRst, nF7, $03, nD7, nA6, nF6, nD7, nA6, nF6
000AD9FF CBD2 CECB C6CE CBC6 C233+  	dc.b	nD6, nA6, nF6, nD6, nA5, nF6, nD6, nA5, nF5, $33, nRst, $5E
000ADA0B E3                         	smpsReturn
000ADA0C                            
000ADA0C                            Mus91_Credits_Call0D:
000ADA0C CD2A CD03 CED0 09D2 D306+  	dc.b	nE6, $2A, nE6, $03, nF6, nG6, $09, nA6, nBb6, $06, nA6, $0C
000ADA18 D0CE 1ECE 06CD CE1E CB0C+  	dc.b	nG6, nF6, $1E, nF6, $06, nE6, nF6, $1E, nD6, $0C, nE6, nF6
000ADA24 2ACB 03CD CE09 D0D1 06D0+  	dc.b	$2A, nD6, $03, nE6, nF6, $09, nG6, nAb6, $06, nG6, $0C, nF6
000ADA30 E3                         	smpsReturn
000ADA31                            
000ADA31                            Mus91_Credits_Call04:
000ADA31 F800 00                    	smpsCall            Mus91_Credits_Call19
000ADA34 CB06 8003 CB80 06CA 1880+  	dc.b	nD6, $06, nRst, $03, nD6, nRst, $06, nCs6, $18, nRst, $06
000ADA3F                            
000ADA3F                            Mus91_Credits_Loop2C:
000ADA3F CE06 8003 CD06 8003 CB80   	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, nRst
000ADA49 F700 02FF F2               	smpsLoop            $00, $02, Mus91_Credits_Loop2C
000ADA4E CE06 8003 CD06 8003 CB18+  	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, $18, nRst, $06
000ADA5A E9FE                       	smpsAlterPitch      $FE
000ADA5C F800 00                    	smpsCall            Mus91_Credits_Call19
000ADA5F E903                       	smpsAlterPitch      $03
000ADA61 F800 00                    	smpsCall            Mus91_Credits_Call19
000ADA64 E9FF                       	smpsAlterPitch      $FF
000ADA66 8006                       	dc.b	nRst, $06
000ADA68 E808                       	smpsNoteFill        $08
000ADA6A D009 0909 09               	dc.b	nG6, $09, $09, $09, $09
000ADA6F E805                       	smpsNoteFill        $05
000ADA71 0303                       	dc.b	$03, $03
000ADA73 E800                       	smpsNoteFill        $00
000ADA75 800C CE24                  	dc.b	nRst, $0C, nF6, $24
000ADA79 E3                         	smpsReturn
000ADA7A                            
000ADA7A                            Mus91_Credits_Call19:
000ADA7A CD06 8003 CD80 06CD 1880+  	dc.b	nE6, $06, nRst, $03, nE6, nRst, $06, nE6, $18, nRst, $06
000ADA85 E3                         	smpsReturn
000ADA86                            
000ADA86                            Mus91_Credits_Call09:
000ADA86 D006 8003 D080 06D0 1880+  	dc.b	nG6, $06, nRst, $03, nG6, nRst, $06, nG6, $18, nRst, $06, nF6
000ADA92 0680 03CE 8006 CD18 8006+  	dc.b	$06, nRst, $03, nF6, nRst, $06, nE6, $18, nRst, $06, nA6, $06
000ADA9E 8003 D006 8003 CE80 D206+  	dc.b	nRst, $03, nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03
000ADAAA D006 8003 CE80 D206 8003+  	dc.b	nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03, nG6, $06
000ADAB6 8003 CE18 8006 CE06 8003+  	dc.b	nRst, $03, nF6, $18, nRst, $06, nF6, $06, nRst, $03, nF6, nRst
000ADAC2 06CE 1880 06D1 0680 03D1+  	dc.b	$06, nF6, $18, nRst, $06, nAb6, $06, nRst, $03, nAb6, nRst, $06
000ADACE D118 8006 8006             	dc.b	nAb6, $18, nRst, $06, nRst, $06
000ADAD4 E808                       	smpsNoteFill        $08
000ADAD6 D409 0909 09               	dc.b	nB6, $09, $09, $09, $09
000ADADB E805                       	smpsNoteFill        $05
000ADADD 0303                       	dc.b	$03, $03
000ADADF E800                       	smpsNoteFill        $00
000ADAE1 800C D224                  	dc.b	nRst, $0C, nA6, $24
000ADAE5 E3                         	smpsReturn
000ADAE6                            
000ADAE6                            Mus91_Credits_Call0E:
000ADAE6 F800 00                    	smpsCall            Mus91_Credits_Call18
000ADAE9 D012 D206 D012 CD0C        	dc.b	nG6, $12, nA6, $06, nG6, $12, nE6, $0C
000ADAF1 F800 00                    	smpsCall            Mus91_Credits_Call18
000ADAF4 D030 8006                  	dc.b	nG6, $30, nRst, $06
000ADAF8 E3                         	smpsReturn
000ADAF9                            
000ADAF9                            Mus91_Credits_Call18:
000ADAF9 D01E CD06 C9D5 D30C D506+  	dc.b	nG6, $1E, nE6, $06, nC6, nC7, nBb6, $0C, nC7, $06, nBb6, $0C
000ADB05 D006 D3D2 24CD 06CE        	dc.b	nG6, $06, nBb6, nA6, $24, nE6, $06, nF6
000ADB0D E3                         	smpsReturn
000ADB0E                            
000ADB0E                            Mus91_Credits_Call05:
000ADB0E 8003 CDC9 0606 C4C9 09CD+  	dc.b	nRst, $03, nE6, nC6, $06, $06, nG5, nC6, $09, nE6, $09, nRst
000ADB1A 0680 03CE CA06 06C7 CA09+  	dc.b	$06, nRst, $03, nF6, nCs6, $06, $06, nBb5, nCs6, $09, nF6, $09
000ADB26 8006 8003 CDC9 0606 C6C9+  	dc.b	nRst, $06, nRst, $03, nE6, nC6, $06, $06, nA5, nC6, $09, nE6
000ADB32 0FCB 0C                    	dc.b	$0F, nD6, $0C
000ADB35 E3                         	smpsReturn
000ADB36                            
000ADB36                            Mus91_Credits_Voices:
000ADB36                            ;	Voice $00
000ADB36                            ;	$20
000ADB36                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000ADB36                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
000ADB36                            	smpsVcAlgorithm     $00
000ADB36                            	smpsVcFeedback      $04
000ADB36                            	smpsVcUnusedBits    $00
000ADB36                            	smpsVcDetune        $03, $03, $03, $03
000ADB36                            	smpsVcCoarseFreq    $01, $00, $05, $06
000ADB36                            	smpsVcRateScale     $02, $02, $03, $03
000ADB36                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADB36                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB36                            	smpsVcDecayRate1    $06, $09, $06, $07
000ADB36                            	smpsVcDecayRate2    $08, $06, $06, $07
000ADB36                            	smpsVcDecayLevel    $0F, $01, $01, $02
000ADB36                            	smpsVcReleaseRate   $08, $00, $00, $00
000ADB36 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000ADB4F                            
000ADB4F                            ;	Voice $01
000ADB4F                            ;	$2C
000ADB4F                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000ADB4F                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000ADB4F                            	smpsVcAlgorithm     $04
000ADB4F                            	smpsVcFeedback      $05
000ADB4F                            	smpsVcUnusedBits    $00
000ADB4F                            	smpsVcDetune        $03, $03, $07, $07
000ADB4F                            	smpsVcCoarseFreq    $04, $04, $08, $02
000ADB4F                            	smpsVcRateScale     $00, $00, $00, $00
000ADB4F                            	smpsVcAttackRate    $12, $1F, $12, $1F
000ADB4F                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB4F                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000ADB4F                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADB4F                            	smpsVcDecayLevel    $01, $00, $01, $00
000ADB4F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADB4F 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000ADB68                            
000ADB68                            ;	Voice $02
000ADB68                            ;	$2C
000ADB68                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000ADB68                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000ADB68                            	smpsVcAlgorithm     $04
000ADB68                            	smpsVcFeedback      $05
000ADB68                            	smpsVcUnusedBits    $00
000ADB68                            	smpsVcDetune        $03, $03, $07, $07
000ADB68                            	smpsVcCoarseFreq    $04, $04, $04, $04
000ADB68                            	smpsVcRateScale     $00, $00, $00, $00
000ADB68                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000ADB68                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB68                            	smpsVcDecayRate1    $00, $00, $00, $00
000ADB68                            	smpsVcDecayRate2    $01, $00, $01, $00
000ADB68                            	smpsVcDecayLevel    $03, $00, $03, $00
000ADB68                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADB68 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000ADB81                            
000ADB81                            ;	Voice $03
000ADB81                            ;	$04
000ADB81                            ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
000ADB81                            ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
000ADB81                            	smpsVcAlgorithm     $04
000ADB81                            	smpsVcFeedback      $00
000ADB81                            	smpsVcUnusedBits    $00
000ADB81                            	smpsVcDetune        $03, $03, $04, $07
000ADB81                            	smpsVcCoarseFreq    $02, $02, $02, $02
000ADB81                            	smpsVcRateScale     $00, $00, $00, $00
000ADB81                            	smpsVcAttackRate    $12, $12, $12, $12
000ADB81                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB81                            	smpsVcDecayRate1    $08, $00, $08, $00
000ADB81                            	smpsVcDecayRate2    $08, $00, $08, $00
000ADB81                            	smpsVcDecayLevel    $01, $00, $01, $00
000ADB81                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADB81 0472 4232 3212 1212 1200+  	smpsVcTotalLevel    $00, $23, $00, $23
000ADB9A                            
000ADB9A                            ;	Voice $04
000ADB9A                            ;	$2C
000ADB9A                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
000ADB9A                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
000ADB9A                            	smpsVcAlgorithm     $04
000ADB9A                            	smpsVcFeedback      $05
000ADB9A                            	smpsVcUnusedBits    $00
000ADB9A                            	smpsVcDetune        $03, $03, $07, $07
000ADB9A                            	smpsVcCoarseFreq    $04, $04, $04, $04
000ADB9A                            	smpsVcRateScale     $00, $00, $00, $00
000ADB9A                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000ADB9A                            	smpsVcAmpMod        $00, $00, $00, $00
000ADB9A                            	smpsVcDecayRate1    $07, $00, $07, $00
000ADB9A                            	smpsVcDecayRate2    $07, $00, $07, $00
000ADB9A                            	smpsVcDecayLevel    $03, $00, $03, $00
000ADB9A                            	smpsVcReleaseRate   $08, $00, $08, $00
000ADB9A 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000ADBB3                            
000ADBB3                            ;	Voice $05
000ADBB3                            ;	$31
000ADBB3                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
000ADBB3                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
000ADBB3                            	smpsVcAlgorithm     $01
000ADBB3                            	smpsVcFeedback      $06
000ADBB3                            	smpsVcUnusedBits    $00
000ADBB3                            	smpsVcDetune        $03, $03, $03, $03
000ADBB3                            	smpsVcCoarseFreq    $01, $00, $05, $04
000ADBB3                            	smpsVcRateScale     $02, $02, $03, $03
000ADBB3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADBB3                            	smpsVcAmpMod        $00, $00, $00, $00
000ADBB3                            	smpsVcDecayRate1    $09, $0C, $07, $0C
000ADBB3                            	smpsVcDecayRate2    $08, $07, $07, $07
000ADBB3                            	smpsVcDecayLevel    $02, $01, $01, $02
000ADBB3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADBB3 3134 3530 31DF DF9F 9F0C+  	smpsVcTotalLevel    $00, $14, $32, $17
000ADBCC                            
000ADBCC                            ;	Voice $06
000ADBCC                            ;	$18
000ADBCC                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000ADBCC                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000ADBCC                            	smpsVcAlgorithm     $00
000ADBCC                            	smpsVcFeedback      $03
000ADBCC                            	smpsVcUnusedBits    $00
000ADBCC                            	smpsVcDetune        $03, $03, $03, $03
000ADBCC                            	smpsVcCoarseFreq    $01, $00, $00, $07
000ADBCC                            	smpsVcRateScale     $02, $00, $03, $02
000ADBCC                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000ADBCC                            	smpsVcAmpMod        $00, $00, $00, $00
000ADBCC                            	smpsVcDecayRate1    $01, $04, $06, $0D
000ADBCC                            	smpsVcDecayRate2    $05, $03, $0A, $08
000ADBCC                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000ADBCC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADBCC 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $2C
000ADBE5                            
000ADBE5                            ;	Voice $07
000ADBE5                            ;	$3C
000ADBE5                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000ADBE5                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000ADBE5                            	smpsVcAlgorithm     $04
000ADBE5                            	smpsVcFeedback      $07
000ADBE5                            	smpsVcUnusedBits    $00
000ADBE5                            	smpsVcDetune        $03, $05, $05, $03
000ADBE5                            	smpsVcCoarseFreq    $00, $00, $02, $01
000ADBE5                            	smpsVcRateScale     $01, $01, $01, $01
000ADBE5                            	smpsVcAttackRate    $13, $12, $13, $12
000ADBE5                            	smpsVcAmpMod        $00, $00, $00, $00
000ADBE5                            	smpsVcDecayRate1    $00, $08, $00, $08
000ADBE5                            	smpsVcDecayRate2    $00, $04, $00, $04
000ADBE5                            	smpsVcDecayLevel    $00, $01, $00, $01
000ADBE5                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADBE5 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000ADBFE                            
000ADBFE                            ;	Voice $08
000ADBFE                            ;	$22
000ADBFE                            ;	$0A, $13, $05, $11, 	$03, $12, $12, $11, 	$00, $13, $13, $00
000ADBFE                            ;	$03, $02, $02, $01, 	$1F, $1F, $0F, $0F, 	$1E, $18, $26, $81
000ADBFE                            	smpsVcAlgorithm     $02
000ADBFE                            	smpsVcFeedback      $04
000ADBFE                            	smpsVcUnusedBits    $00
000ADBFE                            	smpsVcDetune        $01, $00, $01, $00
000ADBFE                            	smpsVcCoarseFreq    $01, $05, $03, $0A
000ADBFE                            	smpsVcRateScale     $00, $00, $00, $00
000ADBFE                            	smpsVcAttackRate    $11, $12, $12, $03
000ADBFE                            	smpsVcAmpMod        $00, $00, $00, $00
000ADBFE                            	smpsVcDecayRate1    $00, $13, $13, $00
000ADBFE                            	smpsVcDecayRate2    $01, $02, $02, $03
000ADBFE                            	smpsVcDecayLevel    $00, $00, $01, $01
000ADBFE                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADBFE 220A 1305 1103 1212 1100+  	smpsVcTotalLevel    $01, $26, $18, $1E
000ADC17                            
000ADC17                            ;	Voice $09
000ADC17                            ;	$3A
000ADC17                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000ADC17                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000ADC17                            	smpsVcAlgorithm     $02
000ADC17                            	smpsVcFeedback      $07
000ADC17                            	smpsVcUnusedBits    $00
000ADC17                            	smpsVcDetune        $03, $01, $03, $06
000ADC17                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000ADC17                            	smpsVcRateScale     $03, $02, $03, $02
000ADC17                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000ADC17                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC17                            	smpsVcDecayRate1    $03, $04, $09, $04
000ADC17                            	smpsVcDecayRate2    $00, $03, $01, $03
000ADC17                            	smpsVcDecayLevel    $0A, $00, $00, $01
000ADC17                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC17 3A61 3C14 319C DB9C DA04+  	smpsVcTotalLevel    $00, $31, $47, $21
000ADC30                            
000ADC30                            ;	Voice $0A
000ADC30                            ;	$3A
000ADC30                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000ADC30                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000ADC30                            	smpsVcAlgorithm     $02
000ADC30                            	smpsVcFeedback      $07
000ADC30                            	smpsVcUnusedBits    $00
000ADC30                            	smpsVcDetune        $00, $00, $00, $00
000ADC30                            	smpsVcCoarseFreq    $01, $01, $07, $01
000ADC30                            	smpsVcRateScale     $01, $02, $02, $02
000ADC30                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000ADC30                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC30                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000ADC30                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADC30                            	smpsVcDecayLevel    $00, $01, $0F, $01
000ADC30                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC30 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000ADC49                            
000ADC49                            ;	Voice $0B
000ADC49                            ;	$34
000ADC49                            ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
000ADC49                            ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
000ADC49                            	smpsVcAlgorithm     $04
000ADC49                            	smpsVcFeedback      $06
000ADC49                            	smpsVcUnusedBits    $00
000ADC49                            	smpsVcDetune        $07, $07, $04, $03
000ADC49                            	smpsVcCoarseFreq    $04, $0E, $01, $03
000ADC49                            	smpsVcRateScale     $00, $01, $02, $01
000ADC49                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000ADC49                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC49                            	smpsVcDecayRate1    $08, $07, $07, $04
000ADC49                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADC49                            	smpsVcDecayLevel    $0F, $0E, $0F, $0F
000ADC49                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC49 3433 417E 745B 9F5F 1F04+  	smpsVcTotalLevel    $17, $29, $10, $23
000ADC62                            
000ADC62                            ;	Voice $0C
000ADC62                            ;	$04
000ADC62                            ;	$72, $42, $32, $32, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000ADC62                            ;	$00, $00, $00, $00, 	$00, $07, $00, $07, 	$23, $80, $23, $80
000ADC62                            	smpsVcAlgorithm     $04
000ADC62                            	smpsVcFeedback      $00
000ADC62                            	smpsVcUnusedBits    $00
000ADC62                            	smpsVcDetune        $03, $03, $04, $07
000ADC62                            	smpsVcCoarseFreq    $02, $02, $02, $02
000ADC62                            	smpsVcRateScale     $00, $00, $00, $00
000ADC62                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADC62                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC62                            	smpsVcDecayRate1    $00, $00, $00, $00
000ADC62                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADC62                            	smpsVcDecayLevel    $00, $00, $00, $00
000ADC62                            	smpsVcReleaseRate   $07, $00, $07, $00
000ADC62 0472 4232 321F 1F1F 1F00+  	smpsVcTotalLevel    $00, $23, $00, $23
000ADC7B                            
000ADC7B                            ;	Voice $0D
000ADC7B                            ;	$3C
000ADC7B                            ;	$38, $74, $76, $33, 	$10, $10, $10, $10, 	$02, $07, $04, $07
000ADC7B                            ;	$03, $09, $03, $09, 	$2F, $2F, $2F, $2F, 	$1E, $80, $1E, $80
000ADC7B                            	smpsVcAlgorithm     $04
000ADC7B                            	smpsVcFeedback      $07
000ADC7B                            	smpsVcUnusedBits    $00
000ADC7B                            	smpsVcDetune        $03, $07, $07, $03
000ADC7B                            	smpsVcCoarseFreq    $03, $06, $04, $08
000ADC7B                            	smpsVcRateScale     $00, $00, $00, $00
000ADC7B                            	smpsVcAttackRate    $10, $10, $10, $10
000ADC7B                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC7B                            	smpsVcDecayRate1    $07, $04, $07, $02
000ADC7B                            	smpsVcDecayRate2    $09, $03, $09, $03
000ADC7B                            	smpsVcDecayLevel    $02, $02, $02, $02
000ADC7B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC7B 3C38 7476 3310 1010 1002+  	smpsVcTotalLevel    $00, $1E, $00, $1E
000ADC94                            
000ADC94                            ;	Voice $0E
000ADC94                            ;	$F4
000ADC94                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000ADC94                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$15, $85, $02, $8A
000ADC94                            	smpsVcAlgorithm     $04
000ADC94                            	smpsVcFeedback      $06
000ADC94                            	smpsVcUnusedBits    $03
000ADC94                            	smpsVcDetune        $00, $00, $00, $00
000ADC94                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000ADC94                            	smpsVcRateScale     $00, $00, $00, $00
000ADC94                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADC94                            	smpsVcAmpMod        $00, $00, $00, $00
000ADC94                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000ADC94                            	smpsVcDecayRate2    $08, $05, $00, $00
000ADC94                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000ADC94                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADC94 F406 040F 0E1F 1F1F 1F00+  	smpsVcTotalLevel    $0A, $02, $05, $15
000ADCAD                            
000ADCAD                            ;	Voice $0F
000ADCAD                            ;	$29
000ADCAD                            ;	$36, $74, $71, $31, 	$04, $04, $05, $1D, 	$12, $0E, $1F, $1F
000ADCAD                            ;	$04, $06, $03, $01, 	$5F, $6F, $0F, $0F, 	$27, $27, $2E, $80
000ADCAD                            	smpsVcAlgorithm     $01
000ADCAD                            	smpsVcFeedback      $05
000ADCAD                            	smpsVcUnusedBits    $00
000ADCAD                            	smpsVcDetune        $03, $07, $07, $03
000ADCAD                            	smpsVcCoarseFreq    $01, $01, $04, $06
000ADCAD                            	smpsVcRateScale     $00, $00, $00, $00
000ADCAD                            	smpsVcAttackRate    $1D, $05, $04, $04
000ADCAD                            	smpsVcAmpMod        $00, $00, $00, $00
000ADCAD                            	smpsVcDecayRate1    $1F, $1F, $0E, $12
000ADCAD                            	smpsVcDecayRate2    $01, $03, $06, $04
000ADCAD                            	smpsVcDecayLevel    $00, $00, $06, $05
000ADCAD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADCAD 2936 7471 3104 0405 1D12+  	smpsVcTotalLevel    $00, $2E, $27, $27
000ADCC6                            
000ADCC6                            ;	Voice $10
000ADCC6                            ;	$08
000ADCC6                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000ADCC6                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000ADCC6                            	smpsVcAlgorithm     $00
000ADCC6                            	smpsVcFeedback      $01
000ADCC6                            	smpsVcUnusedBits    $00
000ADCC6                            	smpsVcDetune        $00, $03, $07, $00
000ADCC6                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000ADCC6                            	smpsVcRateScale     $01, $01, $00, $00
000ADCC6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADCC6                            	smpsVcAmpMod        $00, $00, $00, $00
000ADCC6                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000ADCC6                            	smpsVcDecayRate2    $03, $04, $04, $00
000ADCC6                            	smpsVcDecayLevel    $02, $02, $02, $02
000ADCC6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADCC6 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000ADCDF                            
000ADCDF                            ;	Voice $11
000ADCDF                            ;	$3D
000ADCDF                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
000ADCDF                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
000ADCDF                            	smpsVcAlgorithm     $05
000ADCDF                            	smpsVcFeedback      $07
000ADCDF                            	smpsVcUnusedBits    $00
000ADCDF                            	smpsVcDetune        $00, $00, $00, $00
000ADCDF                            	smpsVcCoarseFreq    $01, $01, $01, $01
000ADCDF                            	smpsVcRateScale     $01, $00, $01, $02
000ADCDF                            	smpsVcAttackRate    $0C, $14, $12, $0E
000ADCDF                            	smpsVcAmpMod        $00, $00, $00, $00
000ADCDF                            	smpsVcDecayRate1    $03, $0E, $08, $08
000ADCDF                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADCDF                            	smpsVcDecayLevel    $01, $01, $01, $01
000ADCDF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADCDF 3D01 0101 018E 5214 4C08+  	smpsVcTotalLevel    $1B, $00, $00, $1B
000ADCF8                            
000ADCF8                            ;	Voice $12
000ADCF8                            ;	$3D
000ADCF8                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000ADCF8                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000ADCF8                            	smpsVcAlgorithm     $05
000ADCF8                            	smpsVcFeedback      $07
000ADCF8                            	smpsVcUnusedBits    $00
000ADCF8                            	smpsVcDetune        $00, $00, $00, $00
000ADCF8                            	smpsVcCoarseFreq    $01, $00, $02, $01
000ADCF8                            	smpsVcRateScale     $00, $00, $00, $00
000ADCF8                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000ADCF8                            	smpsVcAmpMod        $00, $00, $00, $00
000ADCF8                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000ADCF8                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADCF8                            	smpsVcDecayLevel    $00, $00, $00, $01
000ADCF8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADCF8 3D01 0200 011F 0E0E 0E07+  	smpsVcTotalLevel    $0C, $0C, $0D, $17
000ADD11                            
000ADD11                            ;	Voice $13
000ADD11                            ;	$3C
000ADD11                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000ADD11                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000ADD11                            	smpsVcAlgorithm     $04
000ADD11                            	smpsVcFeedback      $07
000ADD11                            	smpsVcUnusedBits    $00
000ADD11                            	smpsVcDetune        $03, $05, $05, $03
000ADD11                            	smpsVcCoarseFreq    $00, $00, $02, $01
000ADD11                            	smpsVcRateScale     $01, $01, $01, $01
000ADD11                            	smpsVcAttackRate    $13, $12, $13, $12
000ADD11                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD11                            	smpsVcDecayRate1    $00, $08, $00, $08
000ADD11                            	smpsVcDecayRate2    $00, $04, $00, $04
000ADD11                            	smpsVcDecayLevel    $00, $01, $00, $01
000ADD11                            	smpsVcReleaseRate   $07, $00, $07, $00
000ADD11 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000ADD2A                            
000ADD2A                            ;	Voice $14
000ADD2A                            ;	$18
000ADD2A                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000ADD2A                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $80
000ADD2A                            	smpsVcAlgorithm     $00
000ADD2A                            	smpsVcFeedback      $03
000ADD2A                            	smpsVcUnusedBits    $00
000ADD2A                            	smpsVcDetune        $03, $03, $03, $03
000ADD2A                            	smpsVcCoarseFreq    $01, $00, $00, $07
000ADD2A                            	smpsVcRateScale     $02, $00, $03, $02
000ADD2A                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000ADD2A                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD2A                            	smpsVcDecayRate1    $01, $04, $06, $0D
000ADD2A                            	smpsVcDecayRate2    $05, $03, $0A, $08
000ADD2A                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000ADD2A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD2A 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $32
000ADD43                            
000ADD43                            ;	Voice $15
000ADD43                            ;	$3A
000ADD43                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
000ADD43                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
000ADD43                            	smpsVcAlgorithm     $02
000ADD43                            	smpsVcFeedback      $07
000ADD43                            	smpsVcUnusedBits    $00
000ADD43                            	smpsVcDetune        $00, $00, $00, $00
000ADD43                            	smpsVcCoarseFreq    $02, $01, $01, $01
000ADD43                            	smpsVcRateScale     $01, $00, $00, $02
000ADD43                            	smpsVcAttackRate    $12, $07, $07, $0D
000ADD43                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD43                            	smpsVcDecayRate1    $03, $00, $00, $09
000ADD43                            	smpsVcDecayRate2    $00, $02, $02, $01
000ADD43                            	smpsVcDecayLevel    $02, $00, $00, $05
000ADD43                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD43 3A01 0101 028D 0707 5209+  	smpsVcTotalLevel    $00, $18, $22, $18
000ADD5C                            
000ADD5C                            ;	Voice $16
000ADD5C                            ;	$2C
000ADD5C                            ;	$74, $74, $34, $34, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000ADD5C                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000ADD5C                            	smpsVcAlgorithm     $04
000ADD5C                            	smpsVcFeedback      $05
000ADD5C                            	smpsVcUnusedBits    $00
000ADD5C                            	smpsVcDetune        $03, $03, $07, $07
000ADD5C                            	smpsVcCoarseFreq    $04, $04, $04, $04
000ADD5C                            	smpsVcRateScale     $00, $00, $00, $00
000ADD5C                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADD5C                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD5C                            	smpsVcDecayRate1    $00, $00, $00, $00
000ADD5C                            	smpsVcDecayRate2    $01, $00, $01, $00
000ADD5C                            	smpsVcDecayLevel    $03, $00, $03, $00
000ADD5C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD5C 2C74 7434 341F 1F1F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000ADD75                            
000ADD75                            ;	Voice $17
000ADD75                            ;	$04
000ADD75                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000ADD75                            ;	$00, $00, $00, $00, 	$10, $07, $10, $07, 	$23, $80, $23, $80
000ADD75                            	smpsVcAlgorithm     $04
000ADD75                            	smpsVcFeedback      $00
000ADD75                            	smpsVcUnusedBits    $00
000ADD75                            	smpsVcDetune        $04, $07, $07, $03
000ADD75                            	smpsVcCoarseFreq    $09, $07, $02, $07
000ADD75                            	smpsVcRateScale     $00, $00, $00, $00
000ADD75                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADD75                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD75                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000ADD75                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADD75                            	smpsVcDecayLevel    $00, $01, $00, $01
000ADD75                            	smpsVcReleaseRate   $07, $00, $07, $00
000ADD75 0437 7277 491F 1F1F 1F07+  	smpsVcTotalLevel    $00, $23, $00, $23
000ADD8E                            
000ADD8E                            ;	Voice $18
000ADD8E                            ;	$3D
000ADD8E                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000ADD8E                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000ADD8E                            	smpsVcAlgorithm     $05
000ADD8E                            	smpsVcFeedback      $07
000ADD8E                            	smpsVcUnusedBits    $00
000ADD8E                            	smpsVcDetune        $00, $00, $00, $00
000ADD8E                            	smpsVcCoarseFreq    $02, $02, $02, $01
000ADD8E                            	smpsVcRateScale     $00, $02, $00, $00
000ADD8E                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000ADD8E                            	smpsVcAmpMod        $00, $00, $00, $00
000ADD8E                            	smpsVcDecayRate1    $05, $02, $05, $08
000ADD8E                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADD8E                            	smpsVcDecayLevel    $01, $01, $01, $01
000ADD8E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADD8E 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000ADDA7                            
000ADDA7                            ;	Voice $19
000ADDA7                            ;	$20
000ADDA7                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000ADDA7                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000ADDA7                            	smpsVcAlgorithm     $00
000ADDA7                            	smpsVcFeedback      $04
000ADDA7                            	smpsVcUnusedBits    $00
000ADDA7                            	smpsVcDetune        $03, $03, $03, $03
000ADDA7                            	smpsVcCoarseFreq    $01, $00, $05, $06
000ADDA7                            	smpsVcRateScale     $02, $02, $03, $03
000ADDA7                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADDA7                            	smpsVcAmpMod        $00, $00, $00, $00
000ADDA7                            	smpsVcDecayRate1    $06, $09, $06, $07
000ADDA7                            	smpsVcDecayRate2    $08, $06, $06, $07
000ADDA7                            	smpsVcDecayLevel    $0F, $01, $01, $02
000ADDA7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADDA7 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000ADDC0                            
000ADDC0                            ;	Voice $1A
000ADDC0                            ;	$3A
000ADDC0                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000ADDC0                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000ADDC0                            	smpsVcAlgorithm     $02
000ADDC0                            	smpsVcFeedback      $07
000ADDC0                            	smpsVcUnusedBits    $00
000ADDC0                            	smpsVcDetune        $00, $05, $00, $05
000ADDC0                            	smpsVcCoarseFreq    $02, $01, $08, $01
000ADDC0                            	smpsVcRateScale     $00, $00, $00, $00
000ADDC0                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000ADDC0                            	smpsVcAmpMod        $00, $00, $00, $00
000ADDC0                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000ADDC0                            	smpsVcDecayRate2    $02, $00, $00, $00
000ADDC0                            	smpsVcDecayLevel    $01, $00, $00, $00
000ADDC0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADDC0 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
000ADDD9                            
000ADDD9                            ;	Voice $1B
000ADDD9                            ;	$3A
000ADDD9                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000ADDD9                            ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
000ADDD9                            	smpsVcAlgorithm     $02
000ADDD9                            	smpsVcFeedback      $07
000ADDD9                            	smpsVcUnusedBits    $00
000ADDD9                            	smpsVcDetune        $04, $03, $05, $03
000ADDD9                            	smpsVcCoarseFreq    $02, $02, $06, $02
000ADDD9                            	smpsVcRateScale     $01, $00, $01, $02
000ADDD9                            	smpsVcAttackRate    $12, $15, $0F, $0D
000ADDD9                            	smpsVcAmpMod        $00, $00, $00, $00
000ADDD9                            	smpsVcDecayRate1    $04, $07, $08, $06
000ADDD9                            	smpsVcDecayRate2    $00, $00, $00, $02
000ADDD9                            	smpsVcDecayLevel    $02, $02, $01, $01
000ADDD9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADDD9 3A32 5632 428D 4F15 5206+  	smpsVcTotalLevel    $00, $2A, $20, $19
000ADDF2                            
000ADDF2                            ;	Voice $1C
000ADDF2                            ;	$3A
000ADDF2                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000ADDF2                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000ADDF2                            	smpsVcAlgorithm     $02
000ADDF2                            	smpsVcFeedback      $07
000ADDF2                            	smpsVcUnusedBits    $00
000ADDF2                            	smpsVcDetune        $00, $00, $00, $00
000ADDF2                            	smpsVcCoarseFreq    $01, $01, $07, $01
000ADDF2                            	smpsVcRateScale     $01, $02, $02, $02
000ADDF2                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000ADDF2                            	smpsVcAmpMod        $00, $00, $00, $00
000ADDF2                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000ADDF2                            	smpsVcDecayRate2    $00, $00, $00, $00
000ADDF2                            	smpsVcDecayLevel    $00, $01, $0F, $01
000ADDF2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADDF2 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000ADE0B                            
000ADE0B                            ;	Voice $1D
000ADE0B                            ;	$08
000ADE0B                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000ADE0B                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000ADE0B                            	smpsVcAlgorithm     $00
000ADE0B                            	smpsVcFeedback      $01
000ADE0B                            	smpsVcUnusedBits    $00
000ADE0B                            	smpsVcDetune        $00, $03, $07, $00
000ADE0B                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000ADE0B                            	smpsVcRateScale     $01, $01, $00, $00
000ADE0B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADE0B                            	smpsVcAmpMod        $00, $00, $00, $00
000ADE0B                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000ADE0B                            	smpsVcDecayRate2    $03, $04, $04, $00
000ADE0B                            	smpsVcDecayLevel    $02, $02, $02, $02
000ADE0B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADE0B 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000ADE24                            
000ADE24                            ;	Voice $1E
000ADE24                            ;	$3A
000ADE24                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000ADE24                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000ADE24                            	smpsVcAlgorithm     $02
000ADE24                            	smpsVcFeedback      $07
000ADE24                            	smpsVcUnusedBits    $00
000ADE24                            	smpsVcDetune        $00, $00, $00, $00
000ADE24                            	smpsVcCoarseFreq    $01, $01, $07, $01
000ADE24                            	smpsVcRateScale     $01, $02, $02, $02
000ADE24                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000ADE24                            	smpsVcAmpMod        $00, $00, $00, $00
000ADE24                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000ADE24                            	smpsVcDecayRate2    $07, $00, $00, $00
000ADE24                            	smpsVcDecayLevel    $00, $01, $0F, $01
000ADE24                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADE24 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000ADE3D                            
000ADE3D                            ;	Voice $1F
000ADE3D                            ;	$36
000ADE3D                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
000ADE3D                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
000ADE3D                            	smpsVcAlgorithm     $06
000ADE3D                            	smpsVcFeedback      $06
000ADE3D                            	smpsVcUnusedBits    $00
000ADE3D                            	smpsVcDetune        $00, $00, $00, $00
000ADE3D                            	smpsVcCoarseFreq    $01, $01, $01, $0F
000ADE3D                            	smpsVcRateScale     $00, $00, $00, $00
000ADE3D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADE3D                            	smpsVcAmpMod        $00, $00, $00, $00
000ADE3D                            	smpsVcDecayRate1    $00, $0E, $11, $12
000ADE3D                            	smpsVcDecayRate2    $09, $07, $0A, $00
000ADE3D                            	smpsVcDecayLevel    $00, $01, $00, $0F
000ADE3D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADE3D 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000ADE56                            
000ADE56                            ;	Voice $20
000ADE56                            ;	$3A
000ADE56                            ;	$03, $19, $01, $53, 	$1F, $DF, $1F, $9F, 	$0C, $02, $0C, $05
000ADE56                            ;	$04, $04, $04, $07, 	$1F, $FF, $0F, $2F, 	$1D, $36, $1B, $80
000ADE56                            	smpsVcAlgorithm     $02
000ADE56                            	smpsVcFeedback      $07
000ADE56                            	smpsVcUnusedBits    $00
000ADE56                            	smpsVcDetune        $05, $00, $01, $00
000ADE56                            	smpsVcCoarseFreq    $03, $01, $09, $03
000ADE56                            	smpsVcRateScale     $02, $00, $03, $00
000ADE56                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000ADE56                            	smpsVcAmpMod        $00, $00, $00, $00
000ADE56                            	smpsVcDecayRate1    $05, $0C, $02, $0C
000ADE56                            	smpsVcDecayRate2    $07, $04, $04, $04
000ADE56                            	smpsVcDecayLevel    $02, $00, $0F, $01
000ADE56                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000ADE56 3A03 1901 531F DF1F 9F0C+  	smpsVcTotalLevel    $00, $1B, $36, $1D
000ADE6F                            
000ADE6F                            
000ADE70 00                         		even
000ADE70                            Music92:	incbin	sound\music92.bin ; Drowning
000AE1B2 00                         		even
000AE1B2                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000AE282                            		even
000AE282                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000AEF58 00                         		even
000AEF58                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000AF0A8 00                         		even
000AF0A8                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000AF0E2 00                         		even
000AF0E2                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000AF44A                            		even
000AF44A                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000AF484 00                         		even
000AF484                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000AF4BE 00                         		even
000AF4BE                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000AF4F8 00                         		even
000AF4F8                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000AF532 00                         		even
000AF532                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000AF56C 00                         		even
000AF56C                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000AF5A6 00                         		even
000AF5A6                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000AFA96                            		even
000AFA96                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000AFA96                            GentleBreeze_Header:
000AFA96 =00000001                  smpsHeaderStartSong = 1
000AFA96 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000AFA98 0603                       	smpsHeaderChan      $06, $03
000AFA9A 0100                       	smpsHeaderTempo     $01, $00
000AFA9C                            
000AFAA0 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000AFAA4 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000AFAA8 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000AFAAC 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000AFAB0 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000AFAB4 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000AFABA 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000AFAC0 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000AFAC6                            
000AFAC6                            ; PSG3 Data
000AFAC6                            GentleBreeze_PSG3:
000AFAC6 F2                         	smpsStop
000AFAC7                            
000AFAC7                            ; FM1 Data
000AFAC7                            GentleBreeze_FM1:
000AFAC9 E0C0                       	smpsPan             panCenter, $00
000AFACB E1FF                       	smpsAlterNote       $FF
000AFACD C410                       	dc.b	nG5, $10
000AFACF E60F                       	smpsAlterVol        $0F
000AFAD1 C4                         	dc.b	nG5
000AFAD2 E6F1                       	smpsAlterVol        $F1
000AFAD4 E100                       	smpsAlterNote       $00
000AFAD6 C2                         	dc.b	nF5
000AFAD7 E60F                       	smpsAlterVol        $0F
000AFAD9 08                         	dc.b	$08
000AFADA E6F1                       	smpsAlterVol        $F1
000AFADC C010                       	dc.b	nEb5, $10
000AFADE E60F                       	smpsAlterVol        $0F
000AFAE0 C0                         	dc.b	nEb5
000AFAE1 E6F1                       	smpsAlterVol        $F1
000AFAE3 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000AFAE9 E60F                       	smpsAlterVol        $0F
000AFAEB C9                         	dc.b	nC6
000AFAEC E6F1                       	smpsAlterVol        $F1
000AFAEE C5                         	dc.b	nAb5
000AFAEF E60F                       	smpsAlterVol        $0F
000AFAF1 08                         	dc.b	$08
000AFAF2 E6F1                       	smpsAlterVol        $F1
000AFAF4 C010                       	dc.b	nEb5, $10
000AFAF6 E60F                       	smpsAlterVol        $0F
000AFAF8 C0                         	dc.b	nEb5
000AFAF9 E6F1                       	smpsAlterVol        $F1
000AFAFB C208                       	dc.b	nF5, $08
000AFAFD E1FF                       	smpsAlterNote       $FF
000AFAFF C410                       	dc.b	nG5, $10
000AFB01 E100                       	smpsAlterNote       $00
000AFB03 C5C7                       	dc.b	nAb5, nBb5
000AFB05 E60F                       	smpsAlterVol        $0F
000AFB07 C7                         	dc.b	nBb5
000AFB08 E6F1                       	smpsAlterVol        $F1
000AFB0A C5                         	dc.b	nAb5
000AFB0B E60F                       	smpsAlterVol        $0F
000AFB0D 08                         	dc.b	$08
000AFB0E E6F1                       	smpsAlterVol        $F1
000AFB10 E1FF                       	smpsAlterNote       $FF
000AFB12 C410                       	dc.b	nG5, $10
000AFB14 E60F                       	smpsAlterVol        $0F
000AFB16 C4                         	dc.b	nG5
000AFB17 E6F1                       	smpsAlterVol        $F1
000AFB19 C4                         	dc.b	nG5
000AFB1A E100                       	smpsAlterNote       $00
000AFB1C C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000AFB21 E60F                       	smpsAlterVol        $0F
000AFB23 C2                         	dc.b	nF5
000AFB24 E6F1                       	smpsAlterVol        $F1
000AFB26 E1FF                       	smpsAlterNote       $FF
000AFB28 C4                         	dc.b	nG5
000AFB29 E60F                       	smpsAlterVol        $0F
000AFB2B 08                         	dc.b	$08
000AFB2C E6F1                       	smpsAlterVol        $F1
000AFB2E 10                         	dc.b	$10
000AFB2F E60F                       	smpsAlterVol        $0F
000AFB31 38                         	dc.b	$38
000AFB32 E6F1                       	smpsAlterVol        $F1
000AFB34 10                         	dc.b	$10
000AFB35 E60F                       	smpsAlterVol        $0F
000AFB37 C4                         	dc.b	nG5
000AFB38 E6F1                       	smpsAlterVol        $F1
000AFB3A E100                       	smpsAlterNote       $00
000AFB3C C2                         	dc.b	nF5
000AFB3D E60F                       	smpsAlterVol        $0F
000AFB3F 08                         	dc.b	$08
000AFB40 E6F1                       	smpsAlterVol        $F1
000AFB42 C010                       	dc.b	nEb5, $10
000AFB44 E60F                       	smpsAlterVol        $0F
000AFB46 C0                         	dc.b	nEb5
000AFB47 E6F1                       	smpsAlterVol        $F1
000AFB49 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000AFB4F E60F                       	smpsAlterVol        $0F
000AFB51 C9                         	dc.b	nC6
000AFB52 E6F1                       	smpsAlterVol        $F1
000AFB54 C5                         	dc.b	nAb5
000AFB55 E60F                       	smpsAlterVol        $0F
000AFB57 08                         	dc.b	$08
000AFB58 E6F1                       	smpsAlterVol        $F1
000AFB5A C010                       	dc.b	nEb5, $10
000AFB5C E60F                       	smpsAlterVol        $0F
000AFB5E C0                         	dc.b	nEb5
000AFB5F E6F1                       	smpsAlterVol        $F1
000AFB61 C208                       	dc.b	nF5, $08
000AFB63 E1FF                       	smpsAlterNote       $FF
000AFB65 C410                       	dc.b	nG5, $10
000AFB67 E100                       	smpsAlterNote       $00
000AFB69 C5C7                       	dc.b	nAb5, nBb5
000AFB6B E60F                       	smpsAlterVol        $0F
000AFB6D C7                         	dc.b	nBb5
000AFB6E E6F1                       	smpsAlterVol        $F1
000AFB70 C5                         	dc.b	nAb5
000AFB71 E60F                       	smpsAlterVol        $0F
000AFB73 08                         	dc.b	$08
000AFB74 E6F1                       	smpsAlterVol        $F1
000AFB76 E1FF                       	smpsAlterNote       $FF
000AFB78 C410                       	dc.b	nG5, $10
000AFB7A E60F                       	smpsAlterVol        $0F
000AFB7C C4                         	dc.b	nG5
000AFB7D E6F1                       	smpsAlterVol        $F1
000AFB7F C4                         	dc.b	nG5
000AFB80 E100                       	smpsAlterNote       $00
000AFB82 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000AFB87 E60F                       	smpsAlterVol        $0F
000AFB89 28                         	dc.b	$28
000AFB8A E6F1                       	smpsAlterVol        $F1
000AFB8C C008 10                    	dc.b	nEb5, $08, $10
000AFB8F E60F                       	smpsAlterVol        $0F
000AFB91 21                         	dc.b	$21
000AFB92                            
000AFB92                            GentleBreeze_Loop12:
000AFB92 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000AFB95 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000AFB9A E717                       	dc.b	smpsNoAttack, $17
000AFB9C E6F1                       	smpsAlterVol        $F1
000AFB9E E1FF                       	smpsAlterNote       $FF
000AFBA0 C410                       	dc.b	nG5, $10
000AFBA2 E60F                       	smpsAlterVol        $0F
000AFBA4 C4                         	dc.b	nG5
000AFBA5 E6F1                       	smpsAlterVol        $F1
000AFBA7 E100                       	smpsAlterNote       $00
000AFBA9 C2                         	dc.b	nF5
000AFBAA E60F                       	smpsAlterVol        $0F
000AFBAC 08                         	dc.b	$08
000AFBAD E6F1                       	smpsAlterVol        $F1
000AFBAF C010                       	dc.b	nEb5, $10
000AFBB1 E60F                       	smpsAlterVol        $0F
000AFBB3 C0                         	dc.b	nEb5
000AFBB4 E6F1                       	smpsAlterVol        $F1
000AFBB6 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000AFBBC E60F                       	smpsAlterVol        $0F
000AFBBE C9                         	dc.b	nC6
000AFBBF E6F1                       	smpsAlterVol        $F1
000AFBC1 C5                         	dc.b	nAb5
000AFBC2 E60F                       	smpsAlterVol        $0F
000AFBC4 08                         	dc.b	$08
000AFBC5 E6F1                       	smpsAlterVol        $F1
000AFBC7 C010                       	dc.b	nEb5, $10
000AFBC9 E60F                       	smpsAlterVol        $0F
000AFBCB C0                         	dc.b	nEb5
000AFBCC E6F1                       	smpsAlterVol        $F1
000AFBCE C208                       	dc.b	nF5, $08
000AFBD0 E1FF                       	smpsAlterNote       $FF
000AFBD2 C410                       	dc.b	nG5, $10
000AFBD4 E100                       	smpsAlterNote       $00
000AFBD6 C5C7                       	dc.b	nAb5, nBb5
000AFBD8 E60F                       	smpsAlterVol        $0F
000AFBDA C7                         	dc.b	nBb5
000AFBDB E6F1                       	smpsAlterVol        $F1
000AFBDD C5                         	dc.b	nAb5
000AFBDE E60F                       	smpsAlterVol        $0F
000AFBE0 08                         	dc.b	$08
000AFBE1 E6F1                       	smpsAlterVol        $F1
000AFBE3 E1FF                       	smpsAlterNote       $FF
000AFBE5 C410                       	dc.b	nG5, $10
000AFBE7 E60F                       	smpsAlterVol        $0F
000AFBE9 C4                         	dc.b	nG5
000AFBEA E6F1                       	smpsAlterVol        $F1
000AFBEC C4                         	dc.b	nG5
000AFBED E100                       	smpsAlterNote       $00
000AFBEF C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000AFBF4 E60F                       	smpsAlterVol        $0F
000AFBF6 C2                         	dc.b	nF5
000AFBF7 E6F1                       	smpsAlterVol        $F1
000AFBF9 E1FF                       	smpsAlterNote       $FF
000AFBFB C4                         	dc.b	nG5
000AFBFC E60F                       	smpsAlterVol        $0F
000AFBFE 08                         	dc.b	$08
000AFBFF E6F1                       	smpsAlterVol        $F1
000AFC01 10                         	dc.b	$10
000AFC02 E60F                       	smpsAlterVol        $0F
000AFC04 38                         	dc.b	$38
000AFC05 E6F1                       	smpsAlterVol        $F1
000AFC07 10                         	dc.b	$10
000AFC08 E60F                       	smpsAlterVol        $0F
000AFC0A C4                         	dc.b	nG5
000AFC0B E6F1                       	smpsAlterVol        $F1
000AFC0D E100                       	smpsAlterNote       $00
000AFC0F C2                         	dc.b	nF5
000AFC10 E60F                       	smpsAlterVol        $0F
000AFC12 08                         	dc.b	$08
000AFC13 E6F1                       	smpsAlterVol        $F1
000AFC15 C010                       	dc.b	nEb5, $10
000AFC17 E60F                       	smpsAlterVol        $0F
000AFC19 C0                         	dc.b	nEb5
000AFC1A E6F1                       	smpsAlterVol        $F1
000AFC1C BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000AFC22 E60F                       	smpsAlterVol        $0F
000AFC24 C9                         	dc.b	nC6
000AFC25 E6F1                       	smpsAlterVol        $F1
000AFC27 C5                         	dc.b	nAb5
000AFC28 E60F                       	smpsAlterVol        $0F
000AFC2A 08                         	dc.b	$08
000AFC2B E6F1                       	smpsAlterVol        $F1
000AFC2D C010                       	dc.b	nEb5, $10
000AFC2F E60F                       	smpsAlterVol        $0F
000AFC31 C0                         	dc.b	nEb5
000AFC32 E6F1                       	smpsAlterVol        $F1
000AFC34 C208                       	dc.b	nF5, $08
000AFC36 E1FF                       	smpsAlterNote       $FF
000AFC38 C410                       	dc.b	nG5, $10
000AFC3A E100                       	smpsAlterNote       $00
000AFC3C C5C7                       	dc.b	nAb5, nBb5
000AFC3E E60F                       	smpsAlterVol        $0F
000AFC40 C7                         	dc.b	nBb5
000AFC41 E6F1                       	smpsAlterVol        $F1
000AFC43 C5                         	dc.b	nAb5
000AFC44 E60F                       	smpsAlterVol        $0F
000AFC46 08                         	dc.b	$08
000AFC47 E6F1                       	smpsAlterVol        $F1
000AFC49 E1FF                       	smpsAlterNote       $FF
000AFC4B C410                       	dc.b	nG5, $10
000AFC4D E60F                       	smpsAlterVol        $0F
000AFC4F C4                         	dc.b	nG5
000AFC50 E6F1                       	smpsAlterVol        $F1
000AFC52 C4                         	dc.b	nG5
000AFC53 E100                       	smpsAlterNote       $00
000AFC55 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000AFC5A E60F                       	smpsAlterVol        $0F
000AFC5C 28                         	dc.b	$28
000AFC5D E6F1                       	smpsAlterVol        $F1
000AFC5F C008 10                    	dc.b	nEb5, $08, $10
000AFC62 E60F                       	smpsAlterVol        $0F
000AFC64 21                         	dc.b	$21
000AFC65 E0C0                       	smpsPan             panCenter, $00
000AFC67 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000AFC6A                            
000AFC6A                            ; FM2 Data
000AFC6A                            GentleBreeze_FM2:
000AFC6C E60C                       	smpsAlterVol        $0C
000AFC6E E0C0                       	smpsPan             panCenter, $00
000AFC70 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000AFC7C A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000AFC88 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000AFC94 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000AFCA0 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000AFCAC A039                       	dc.b	nG2, $39
000AFCAE                            
000AFCAE                            GentleBreeze_Jump04:
000AFCAE E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000AFCB1                            
000AFCB1                            GentleBreeze_Loop11:
000AFCB1 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000AFCBD A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000AFCC9 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000AFCD5 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000AFCE1 A3                         	dc.b	nBb2
000AFCE2 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000AFCE7 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000AFCF3 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000AFCFF 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000AFD0B 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000AFD17 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000AFD23 A039                       	dc.b	nG2, $39
000AFD25 E0C0                       	smpsPan             panCenter, $00
000AFD27 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000AFD2A                            
000AFD2A                            ; FM3 Data
000AFD2A                            GentleBreeze_FM3:
000AFD2C E0C0                       	smpsPan             panCenter, $00
000AFD2E 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000AFD36 E616                       	smpsAlterVol        $16
000AFD38 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000AFD3D                            
000AFD3D                            GentleBreeze_Loop0F:
000AFD3D C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000AFD41 E1FF                       	smpsAlterNote       $FF
000AFD43 C4                         	dc.b	nG5
000AFD44 E100                       	smpsAlterNote       $00
000AFD46 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AFD4B E608                       	smpsAlterVol        $08
000AFD4D C080 08                    	dc.b	nEb5, nRst, $08
000AFD50 E6F8                       	smpsAlterVol        $F8
000AFD52 C7                         	dc.b	nBb5
000AFD53 E1FF                       	smpsAlterNote       $FF
000AFD55 C4                         	dc.b	nG5
000AFD56 E100                       	smpsAlterNote       $00
000AFD58 C0BB                       	dc.b	nEb5, nBb4
000AFD5A F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000AFD5F C0BD C9                    	dc.b	nEb5, nC5, nC6
000AFD62 E1FF                       	smpsAlterNote       $FF
000AFD64 C4                         	dc.b	nG5
000AFD65 E100                       	smpsAlterNote       $00
000AFD67 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AFD6C E608                       	smpsAlterVol        $08
000AFD6E C080 08                    	dc.b	nEb5, nRst, $08
000AFD71 E6F8                       	smpsAlterVol        $F8
000AFD73 E1FF                       	smpsAlterNote       $FF
000AFD75 C4                         	dc.b	nG5
000AFD76 E100                       	smpsAlterNote       $00
000AFD78 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000AFD7F E1FF                       	smpsAlterNote       $FF
000AFD81 C4                         	dc.b	nG5
000AFD82 E100                       	smpsAlterNote       $00
000AFD84 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000AFD89 E1FF                       	smpsAlterNote       $FF
000AFD8B C4                         	dc.b	nG5
000AFD8C E100                       	smpsAlterNote       $00
000AFD8E C7                         	dc.b	nBb5
000AFD8F E1FF                       	smpsAlterNote       $FF
000AFD91 C4                         	dc.b	nG5
000AFD92 E100                       	smpsAlterNote       $00
000AFD94 C2C0 01                    	dc.b	nF5, nEb5, $01
000AFD97                            
000AFD97                            GentleBreeze_Jump03:
000AFD97 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000AFD9E E6FA                       	smpsAlterVol        $FA
000AFDA0 F4                         	smpsModOff
000AFDA1 E1FF                       	smpsAlterNote       $FF
000AFDA3 B850                       	dc.b	nG4, $50
000AFDA5 E100                       	smpsAlterNote       $00
000AFDA7 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000AFDB3 E1FF                       	smpsAlterNote       $FF
000AFDB5 B810                       	dc.b	nG4, $10
000AFDB7 E100                       	smpsAlterNote       $00
000AFDB9 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000AFDBE E1FF                       	smpsAlterNote       $FF
000AFDC0 B8                         	dc.b	nG4
000AFDC1 E100                       	smpsAlterNote       $00
000AFDC3 B610                       	dc.b	nF4, $10
000AFDC5 E1FF                       	smpsAlterNote       $FF
000AFDC7 B850                       	dc.b	nG4, $50
000AFDC9 E100                       	smpsAlterNote       $00
000AFDCB B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000AFDD3 E1FF                       	smpsAlterNote       $FF
000AFDD5 AC08                       	dc.b	nG3, $08
000AFDD7 E100                       	smpsAlterNote       $00
000AFDD9 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000AFDDE E1FF                       	smpsAlterNote       $FF
000AFDE0 B850                       	dc.b	nG4, $50
000AFDE2 E100                       	smpsAlterNote       $00
000AFDE4 BB08                       	dc.b	nBb4, $08
000AFDE6 E1FF                       	smpsAlterNote       $FF
000AFDE8 B8                         	dc.b	nG4
000AFDE9 E100                       	smpsAlterNote       $00
000AFDEB BDBB B6                    	dc.b	nC5, nBb4, nF4
000AFDEE E1FF                       	smpsAlterNote       $FF
000AFDF0 B810 08                    	dc.b	nG4, $10, $08
000AFDF3 E100                       	smpsAlterNote       $00
000AFDF5 B6                         	dc.b	nF4
000AFDF6 E1FF                       	smpsAlterNote       $FF
000AFDF8 B880                       	dc.b	nG4, nRst
000AFDFA E100                       	smpsAlterNote       $00
000AFDFC BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000AFDFF E1FF                       	smpsAlterNote       $FF
000AFE01 B810                       	dc.b	nG4, $10
000AFE03 E100                       	smpsAlterNote       $00
000AFE05 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000AFE0C E1FF                       	smpsAlterNote       $FF
000AFE0E B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000AFE1C E606                       	smpsAlterVol        $06
000AFE1E F000 0207 03               	smpsModSet          $00, $02, $07, $03
000AFE23 E100                       	smpsAlterNote       $00
000AFE25                            
000AFE25                            GentleBreeze_Loop10:
000AFE25 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000AFE29 E1FF                       	smpsAlterNote       $FF
000AFE2B C4                         	dc.b	nG5
000AFE2C E100                       	smpsAlterNote       $00
000AFE2E C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AFE33 E608                       	smpsAlterVol        $08
000AFE35 C080 08                    	dc.b	nEb5, nRst, $08
000AFE38 E6F8                       	smpsAlterVol        $F8
000AFE3A C7                         	dc.b	nBb5
000AFE3B E1FF                       	smpsAlterNote       $FF
000AFE3D C4                         	dc.b	nG5
000AFE3E E100                       	smpsAlterNote       $00
000AFE40 C0BB                       	dc.b	nEb5, nBb4
000AFE42 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000AFE47 C0BD C9                    	dc.b	nEb5, nC5, nC6
000AFE4A E1FF                       	smpsAlterNote       $FF
000AFE4C C4                         	dc.b	nG5
000AFE4D E100                       	smpsAlterNote       $00
000AFE4F C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000AFE54 E608                       	smpsAlterVol        $08
000AFE56 C080 08                    	dc.b	nEb5, nRst, $08
000AFE59 E6F8                       	smpsAlterVol        $F8
000AFE5B E1FF                       	smpsAlterNote       $FF
000AFE5D C4                         	dc.b	nG5
000AFE5E E100                       	smpsAlterNote       $00
000AFE60 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000AFE67 E1FF                       	smpsAlterNote       $FF
000AFE69 C4                         	dc.b	nG5
000AFE6A E100                       	smpsAlterNote       $00
000AFE6C C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000AFE71 E1FF                       	smpsAlterNote       $FF
000AFE73 C4                         	dc.b	nG5
000AFE74 E100                       	smpsAlterNote       $00
000AFE76 C7                         	dc.b	nBb5
000AFE77 E1FF                       	smpsAlterNote       $FF
000AFE79 C4                         	dc.b	nG5
000AFE7A E100                       	smpsAlterNote       $00
000AFE7C C2C0 01                    	dc.b	nF5, nEb5, $01
000AFE7F E0C0                       	smpsPan             panCenter, $00
000AFE81 F1                         	smpsModOn
000AFE82 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000AFE85                            
000AFE85                            ; FM4 Data
000AFE85                            GentleBreeze_FM4:
000AFE87 E0C0                       	smpsPan             panCenter, $00
000AFE89 80                         	dc.b	nRst
000AFE8A                            
000AFE8A                            GentleBreeze_Loop0D:
000AFE8A 7F                         	dc.b	$7F
000AFE8B F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000AFE90 77                         	dc.b	$77
000AFE93 E609                       	smpsAlterVol        $09
000AFE95 C001                       	dc.b	nEb5, $01
000AFE97                            
000AFE97                            GentleBreeze_Jump02:
000AFE97 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000AFE9C E607                       	smpsAlterVol        $07
000AFE9E E1FF                       	smpsAlterNote       $FF
000AFEA0 C450                       	dc.b	nG5, $50
000AFEA2 E100                       	smpsAlterNote       $00
000AFEA4 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000AFEB0 E1FF                       	smpsAlterNote       $FF
000AFEB2 C410                       	dc.b	nG5, $10
000AFEB4 E100                       	smpsAlterNote       $00
000AFEB6 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000AFEBB E1FF                       	smpsAlterNote       $FF
000AFEBD C4                         	dc.b	nG5
000AFEBE E100                       	smpsAlterNote       $00
000AFEC0 C210                       	dc.b	nF5, $10
000AFEC2 E1FF                       	smpsAlterNote       $FF
000AFEC4 C450                       	dc.b	nG5, $50
000AFEC6 E100                       	smpsAlterNote       $00
000AFEC8 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000AFED0 E1FF                       	smpsAlterNote       $FF
000AFED2 B808                       	dc.b	nG4, $08
000AFED4 E100                       	smpsAlterNote       $00
000AFED6 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000AFEDB E1FF                       	smpsAlterNote       $FF
000AFEDD C450                       	dc.b	nG5, $50
000AFEDF E100                       	smpsAlterNote       $00
000AFEE1 C708                       	dc.b	nBb5, $08
000AFEE3 E1FF                       	smpsAlterNote       $FF
000AFEE5 C4                         	dc.b	nG5
000AFEE6 E100                       	smpsAlterNote       $00
000AFEE8 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000AFEEB E1FF                       	smpsAlterNote       $FF
000AFEED C410 08                    	dc.b	nG5, $10, $08
000AFEF0 E100                       	smpsAlterNote       $00
000AFEF2 C2                         	dc.b	nF5
000AFEF3 E1FF                       	smpsAlterNote       $FF
000AFEF5 C480                       	dc.b	nG5, nRst
000AFEF7 E100                       	smpsAlterNote       $00
000AFEF9 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000AFEFC E1FF                       	smpsAlterNote       $FF
000AFEFE C410                       	dc.b	nG5, $10
000AFF00 E100                       	smpsAlterNote       $00
000AFF02 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000AFF09 E1FF                       	smpsAlterNote       $FF
000AFF0B C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000AFF13                            
000AFF13                            GentleBreeze_Loop0E:
000AFF13 7F                         	dc.b	$7F
000AFF14 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000AFF19 77                         	dc.b	$77
000AFF1A E100                       	smpsAlterNote       $00
000AFF1C C001                       	dc.b	nEb5, $01
000AFF1E E6F9                       	smpsAlterVol        $F9
000AFF20 E0C0                       	smpsPan             panCenter, $00
000AFF22 E100                       	smpsAlterNote       $00
000AFF24 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000AFF27                            
000AFF27                            ; FM5 Data
000AFF27                            GentleBreeze_FM5:
000AFF29 E0C0                       	smpsPan             panCenter, $00
000AFF2B A5                         	dc.b	nC3
000AFF2C                            
000AFF2C                            GentleBreeze_Loop06:
000AFF2C 10                         	dc.b	$10
000AFF2D E607                       	smpsAlterVol        $07
000AFF2F A5                         	dc.b	nC3
000AFF30 E6F9                       	smpsAlterVol        $F9
000AFF32 08                         	dc.b	$08
000AFF33 E607                       	smpsAlterVol        $07
000AFF35 A5                         	dc.b	nC3
000AFF36 E608                       	smpsAlterVol        $08
000AFF38 A5                         	dc.b	nC3
000AFF39 E6F1                       	smpsAlterVol        $F1
000AFF3B 18                         	dc.b	$18
000AFF3C E607                       	smpsAlterVol        $07
000AFF3E 10                         	dc.b	$10
000AFF3F E608                       	smpsAlterVol        $08
000AFF41 A5                         	dc.b	nC3
000AFF42 E6F1                       	smpsAlterVol        $F1
000AFF44 A5                         	dc.b	nC3
000AFF45 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000AFF4A A5                         	dc.b	nC3
000AFF4B                            
000AFF4B                            GentleBreeze_Loop07:
000AFF4B E607                       	smpsAlterVol        $07
000AFF4D A5                         	dc.b	nC3
000AFF4E E6F9                       	smpsAlterVol        $F9
000AFF50 08                         	dc.b	$08
000AFF51 E607                       	smpsAlterVol        $07
000AFF53 A5                         	dc.b	nC3
000AFF54 E608                       	smpsAlterVol        $08
000AFF56 A5                         	dc.b	nC3
000AFF57 E6F1                       	smpsAlterVol        $F1
000AFF59 10                         	dc.b	$10
000AFF5A F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000AFF5F                            
000AFF5F                            GentleBreeze_Loop08:
000AFF5F A5                         	dc.b	nC3
000AFF60 E607                       	smpsAlterVol        $07
000AFF62 A5                         	dc.b	nC3
000AFF63 E6F9                       	smpsAlterVol        $F9
000AFF65 08                         	dc.b	$08
000AFF66 E607                       	smpsAlterVol        $07
000AFF68 A5                         	dc.b	nC3
000AFF69 E608                       	smpsAlterVol        $08
000AFF6B A5                         	dc.b	nC3
000AFF6C E6F1                       	smpsAlterVol        $F1
000AFF6E 18                         	dc.b	$18
000AFF6F E607                       	smpsAlterVol        $07
000AFF71 10                         	dc.b	$10
000AFF72 E608                       	smpsAlterVol        $08
000AFF74 A5                         	dc.b	nC3
000AFF75 E6F1                       	smpsAlterVol        $F1
000AFF77 A5                         	dc.b	nC3
000AFF78 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000AFF7D A5                         	dc.b	nC3
000AFF7E E607                       	smpsAlterVol        $07
000AFF80 A5                         	dc.b	nC3
000AFF81 E6F9                       	smpsAlterVol        $F9
000AFF83 08                         	dc.b	$08
000AFF84 E607                       	smpsAlterVol        $07
000AFF86 A5                         	dc.b	nC3
000AFF87 E608                       	smpsAlterVol        $08
000AFF89 A5                         	dc.b	nC3
000AFF8A E6F1                       	smpsAlterVol        $F1
000AFF8C 10                         	dc.b	$10
000AFF8D E607                       	smpsAlterVol        $07
000AFF8F A5                         	dc.b	nC3
000AFF90 E6F9                       	smpsAlterVol        $F9
000AFF92 08                         	dc.b	$08
000AFF93 E607                       	smpsAlterVol        $07
000AFF95 A5                         	dc.b	nC3
000AFF96 E608                       	smpsAlterVol        $08
000AFF98 A5                         	dc.b	nC3
000AFF99 E6F1                       	smpsAlterVol        $F1
000AFF9B 01                         	dc.b	$01
000AFF9C                            
000AFF9C                            GentleBreeze_Jump01:
000AFF9C E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000AFF9F E607                       	smpsAlterVol        $07
000AFFA1                            
000AFFA1                            GentleBreeze_Loop09:
000AFFA1 10                         	dc.b	$10
000AFFA2 E608                       	smpsAlterVol        $08
000AFFA4 A5                         	dc.b	nC3
000AFFA5 E6F1                       	smpsAlterVol        $F1
000AFFA7 08                         	dc.b	$08
000AFFA8 E60F                       	smpsAlterVol        $0F
000AFFAA 18                         	dc.b	$18
000AFFAB E6F8                       	smpsAlterVol        $F8
000AFFAD F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000AFFB2 10                         	dc.b	$10
000AFFB3 E608                       	smpsAlterVol        $08
000AFFB5 A5                         	dc.b	nC3
000AFFB6 E6F1                       	smpsAlterVol        $F1
000AFFB8 08                         	dc.b	$08
000AFFB9 E60F                       	smpsAlterVol        $0F
000AFFBB 18                         	dc.b	$18
000AFFBC E6F1                       	smpsAlterVol        $F1
000AFFBE                            
000AFFBE                            GentleBreeze_Loop0A:
000AFFBE 10                         	dc.b	$10
000AFFBF E607                       	smpsAlterVol        $07
000AFFC1 A5                         	dc.b	nC3
000AFFC2 E6F9                       	smpsAlterVol        $F9
000AFFC4 08                         	dc.b	$08
000AFFC5 E607                       	smpsAlterVol        $07
000AFFC7 A5                         	dc.b	nC3
000AFFC8 E608                       	smpsAlterVol        $08
000AFFCA A5                         	dc.b	nC3
000AFFCB E6F1                       	smpsAlterVol        $F1
000AFFCD 18                         	dc.b	$18
000AFFCE E607                       	smpsAlterVol        $07
000AFFD0 10                         	dc.b	$10
000AFFD1 E608                       	smpsAlterVol        $08
000AFFD3 A5                         	dc.b	nC3
000AFFD4 E6F1                       	smpsAlterVol        $F1
000AFFD6 A5                         	dc.b	nC3
000AFFD7 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000AFFDC A5                         	dc.b	nC3
000AFFDD                            
000AFFDD                            GentleBreeze_Loop0B:
000AFFDD E607                       	smpsAlterVol        $07
000AFFDF A5                         	dc.b	nC3
000AFFE0 E6F9                       	smpsAlterVol        $F9
000AFFE2 08                         	dc.b	$08
000AFFE3 E607                       	smpsAlterVol        $07
000AFFE5 A5                         	dc.b	nC3
000AFFE6 E608                       	smpsAlterVol        $08
000AFFE8 A5                         	dc.b	nC3
000AFFE9 E6F1                       	smpsAlterVol        $F1
000AFFEB 10                         	dc.b	$10
000AFFEC F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000AFFF1                            
000AFFF1                            GentleBreeze_Loop0C:
000AFFF1 A5                         	dc.b	nC3
000AFFF2 E607                       	smpsAlterVol        $07
000AFFF4 A5                         	dc.b	nC3
000AFFF5 E6F9                       	smpsAlterVol        $F9
000AFFF7 08                         	dc.b	$08
000AFFF8 E607                       	smpsAlterVol        $07
000AFFFA A5                         	dc.b	nC3
000AFFFB E608                       	smpsAlterVol        $08
000AFFFD A5                         	dc.b	nC3
000AFFFE E6F1                       	smpsAlterVol        $F1
000B0000 18                         	dc.b	$18
000B0001 E607                       	smpsAlterVol        $07
000B0003 10                         	dc.b	$10
000B0004 E608                       	smpsAlterVol        $08
000B0006 A5                         	dc.b	nC3
000B0007 E6F1                       	smpsAlterVol        $F1
000B0009 A5                         	dc.b	nC3
000B000A F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000B000F A5                         	dc.b	nC3
000B0010 E607                       	smpsAlterVol        $07
000B0012 A5                         	dc.b	nC3
000B0013 E6F9                       	smpsAlterVol        $F9
000B0015 08                         	dc.b	$08
000B0016 E607                       	smpsAlterVol        $07
000B0018 A5                         	dc.b	nC3
000B0019 E608                       	smpsAlterVol        $08
000B001B A5                         	dc.b	nC3
000B001C E6F1                       	smpsAlterVol        $F1
000B001E 10                         	dc.b	$10
000B001F E607                       	smpsAlterVol        $07
000B0021 A5                         	dc.b	nC3
000B0022 E6F9                       	smpsAlterVol        $F9
000B0024 08                         	dc.b	$08
000B0025 E607                       	smpsAlterVol        $07
000B0027 A5                         	dc.b	nC3
000B0028 E608                       	smpsAlterVol        $08
000B002A A5                         	dc.b	nC3
000B002B E6F1                       	smpsAlterVol        $F1
000B002D 01                         	dc.b	$01
000B002E E0C0                       	smpsPan             panCenter, $00
000B0030 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000B0033                            
000B0033                            ; DAC Data
000B0033                            GentleBreeze_DAC:
000B0033 81                         	dc.b	dKick
000B0034                            
000B0034                            GentleBreeze_Loop00:
000B0034 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B003A F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000B003F 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B004A                            
000B004A                            GentleBreeze_Loop01:
000B004A 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B0050 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000B0055 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B005F                            
000B005F                            GentleBreeze_Jump00:
000B005F 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000B0063                            
000B0063                            GentleBreeze_Loop02:
000B0063 81                         	dc.b	dKick
000B0064                            
000B0064                            GentleBreeze_Loop03:
000B0064 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000B0070 088A                       	dc.b	$08, dLowTimpani
000B0072 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000B0077 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000B0083 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000B0088 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000B008D                            
000B008D                            GentleBreeze_Loop04:
000B008D 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B0093 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000B0098 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000B00A3                            
000B00A3                            GentleBreeze_Loop05:
000B00A3 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000B00A9 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000B00AE 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000B00B8 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000B00BB                            
000B00BB                            ; PSG 1 Data
000B00BB                            GentleBreeze_PSG1:
000B00BB 80                         	dc.b	nRst
000B00BC                            
000B00BC                            GentleBreeze_LoopPSG02:
000B00BC 7F                         	dc.b	$7F
000B00BD F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000B00C2 08                         	dc.b	$08
000B00C3 EC04                       	smpsPSGAlterVol     $04
000B00C5                            
000B00C5                            GentleBreeze_JumpPSG01:
000B00C5 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000B00D1 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000B00D9                            
000B00D9                            GentleBreeze_LoopPSG03:
000B00D9 7F                         	dc.b	$7F
000B00DA F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000B00DF 08A3 01                    	dc.b	$08, nBb2, $01
000B00E2 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000B00E5                            
000B00E5                            ; PSG2 Data
000B00E5                            GentleBreeze_PSG2:
000B00E5 80                         	dc.b	nRst
000B00E6                            
000B00E6                            GentleBreeze_LoopPSG00:
000B00E6 7F                         	dc.b	$7F
000B00E7 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000B00EC 08                         	dc.b	$08
000B00ED EC04                       	smpsPSGAlterVol     $04
000B00EF                            
000B00EF                            GentleBreeze_JumpPSG00:
000B00EF A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000B00FB A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000B0103                            
000B0103                            GentleBreeze_LoopPSG01:
000B0103 7F                         	dc.b	$7F
000B0104 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000B0109 08A8 01                    	dc.b	$08, nEb3, $01
000B010C F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000B010F                            
000B010F                            GentleBreeze_Voices:
000B010F                            ;	Voice $00
000B010F                            ;	$0C
000B010F                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000B010F                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000B010F                            	smpsVcAlgorithm     $04
000B010F                            	smpsVcFeedback      $01
000B010F                            	smpsVcUnusedBits    $00
000B010F                            	smpsVcDetune        $07, $02, $07, $02
000B010F                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000B010F                            	smpsVcRateScale     $00, $00, $00, $00
000B010F                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B010F                            	smpsVcAmpMod        $00, $00, $00, $00
000B010F                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000B010F                            	smpsVcDecayRate2    $01, $00, $00, $00
000B010F                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000B010F                            	smpsVcReleaseRate   $09, $01, $04, $03
000B010F 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000B0128                            
000B0128                            ;	Voice $01
000B0128                            ;	$38
000B0128                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000B0128                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000B0128                            	smpsVcAlgorithm     $00
000B0128                            	smpsVcFeedback      $07
000B0128                            	smpsVcUnusedBits    $00
000B0128                            	smpsVcDetune        $03, $07, $01, $05
000B0128                            	smpsVcCoarseFreq    $00, $00, $07, $04
000B0128                            	smpsVcRateScale     $00, $02, $00, $02
000B0128                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0128                            	smpsVcAmpMod        $00, $00, $00, $00
000B0128                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000B0128                            	smpsVcDecayRate2    $00, $00, $10, $00
000B0128                            	smpsVcDecayLevel    $00, $00, $00, $00
000B0128                            	smpsVcReleaseRate   $08, $05, $05, $05
000B0128 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000B0141                            
000B0141                            ;	Voice $02
000B0141                            ;	$00
000B0141                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B0141                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B0141                            	smpsVcAlgorithm     $00
000B0141                            	smpsVcFeedback      $00
000B0141                            	smpsVcUnusedBits    $00
000B0141                            	smpsVcDetune        $00, $00, $00, $00
000B0141                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B0141                            	smpsVcRateScale     $00, $00, $00, $00
000B0141                            	smpsVcAttackRate    $00, $00, $00, $00
000B0141                            	smpsVcAmpMod        $00, $00, $00, $00
000B0141                            	smpsVcDecayRate1    $00, $00, $00, $00
000B0141                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0141                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B0141                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B0141 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B015A                            
000B015A                            ;	Voice $03
000B015A                            ;	$36
000B015A                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000B015A                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000B015A                            	smpsVcAlgorithm     $06
000B015A                            	smpsVcFeedback      $06
000B015A                            	smpsVcUnusedBits    $00
000B015A                            	smpsVcDetune        $00, $00, $00, $00
000B015A                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000B015A                            	smpsVcRateScale     $00, $00, $00, $00
000B015A                            	smpsVcAttackRate    $1F, $00, $18, $16
000B015A                            	smpsVcAmpMod        $00, $00, $00, $00
000B015A                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000B015A                            	smpsVcDecayRate2    $00, $00, $12, $00
000B015A                            	smpsVcDecayLevel    $04, $04, $02, $00
000B015A                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000B015A 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000B0173                            
000B0173                            ;	Voice $04
000B0173                            ;	$07
000B0173                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000B0173                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000B0173                            	smpsVcAlgorithm     $07
000B0173                            	smpsVcFeedback      $00
000B0173                            	smpsVcUnusedBits    $00
000B0173                            	smpsVcDetune        $07, $06, $05, $00
000B0173                            	smpsVcCoarseFreq    $05, $04, $03, $05
000B0173                            	smpsVcRateScale     $00, $01, $01, $01
000B0173                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000B0173                            	smpsVcAmpMod        $00, $00, $00, $00
000B0173                            	smpsVcDecayRate1    $17, $17, $17, $17
000B0173                            	smpsVcDecayRate2    $00, $00, $00, $00
000B0173                            	smpsVcDecayLevel    $02, $02, $02, $02
000B0173                            	smpsVcReleaseRate   $06, $06, $06, $06
000B0173 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000B018C                            
000B018C                            ;	Voice $05
000B018C                            ;	$3C
000B018C                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000B018C                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000B018C                            	smpsVcAlgorithm     $04
000B018C                            	smpsVcFeedback      $07
000B018C                            	smpsVcUnusedBits    $00
000B018C                            	smpsVcDetune        $06, $06, $02, $02
000B018C                            	smpsVcCoarseFreq    $01, $03, $01, $01
000B018C                            	smpsVcRateScale     $00, $00, $00, $00
000B018C                            	smpsVcAttackRate    $0E, $14, $10, $13
000B018C                            	smpsVcAmpMod        $00, $00, $00, $00
000B018C                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000B018C                            	smpsVcDecayRate2    $04, $04, $04, $04
000B018C                            	smpsVcDecayLevel    $02, $01, $01, $01
000B018C                            	smpsVcReleaseRate   $07, $07, $07, $07
000B018C 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000B01A5                            
000B01A5                            
000B01A6 00                         		even
000B01A6                            ; ---------------------------------------------------------------------------
000B01A6                            ; Sound	effect pointers
000B01A6                            ; ---------------------------------------------------------------------------
000B01A6 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000B01B2 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000B01BE 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000B01CA 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000B01D6 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000B01E2 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000B01EE 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000B01FA 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000B0206 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000B0212 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000B021E 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000B022A 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000B0236 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000B0242 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000B024E 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000B025A 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000B0266 0000 0000                  SoundD0Index:	dc.l SoundD0
000B026A 0000 0000 0000 0000        		dc.l SoundD1, SoundD2
000B0272                            SoundA0:	include	sound\jump.asm
000B0272                            SndA0_Jump_Header:
000B0272 =00000001                  smpsHeaderStartSong = 1
000B0272 0000                       	smpsHeaderVoice     SndA0_Jump_Voices
000B0274 01                         	smpsHeaderTempoSFX  $01
000B0275 01                         	smpsHeaderChanSFX   $01
000B0276                            
000B027C                            
000B027C                            ; PSG1 Data
000B027C                            SndA0_Jump_PSG1:
000B027C F500                       	smpsPSGvoice        $00
000B027E A201                       	dc.b	nA2, $01
000B0280 F002 01F8 65               	smpsModSet          $02, $01, $F8, $65
000B0285 9C15                       	dc.b	nEb2, $15
000B0287 F2                         	smpsStop
000B0288                            
000B0288                            ; Song seems to not use any FM voices
000B0288                            SndA0_Jump_Voices:
000B0288                            SndA0_Jump_Voices:
000B0288                            		even
000B0288                            SoundA1:	incbin	sound\soundA1.bin
000B02B2                            		even
000B02B2                            SoundA2:	incbin	sound\soundA2.bin
000B02D2                            		even
000B02D2                            SoundA3:	incbin	sound\soundA3.bin
000B0304                            		even
000B0304                            SoundA4:	incbin	sound\soundA4.bin
000B033A                            		even
000B033A                            SoundA5:	include	sound\fart.asm
000B033A                            Fart_Header:
000B033A =00000001                  smpsHeaderStartSong = 1
000B033A 0000                       	smpsHeaderVoice     Fart_Voices
000B033C 01                         	smpsHeaderTempoSFX  $01
000B033D 04                         	smpsHeaderChanSFX   $04
000B033E                            
000B0356                            
000B0356                            Fart_FM3:
000B0358 E607                       	smpsAlterVol        $07
000B035A E0C0                       	smpsPan             panCenter, $00
000B035C F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B0361 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000B0364 E1FE                       	smpsAlterNote       $FE
000B0366 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000B0369 E100                       	smpsAlterNote       $00
000B036B A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000B0370 F2                         	smpsStop
000B0371                            
000B0371                            ; FM4 Data
000B0371                            Fart_FM4:
000B0373 E0C0                       	smpsPan             panCenter, $00
000B0375 8006                       	dc.b	nRst, $06
000B0379 E616                       	smpsAlterVol        $16
000B037B E080                       	smpsPan             panLeft, $00
000B037D F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B0382 A212                       	dc.b	nA2, $12
000B0384 E60A                       	smpsAlterVol        $0A
000B0386 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B0389 E603                       	smpsAlterVol        $03
000B038B E7A2                       	dc.b	smpsNoAttack, nA2
000B038D E603                       	smpsAlterVol        $03
000B038F E7A2                       	dc.b	smpsNoAttack, nA2
000B0391 E604                       	smpsAlterVol        $04
000B0393 E7A2                       	dc.b	smpsNoAttack, nA2
000B0395 E606                       	smpsAlterVol        $06
000B0397 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000B039A E610                       	smpsAlterVol        $10
000B039C E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B039F E610                       	smpsAlterVol        $10
000B03A1 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000B03A6 F2                         	smpsStop
000B03A7                            
000B03A7                            ; FM5 Data
000B03A7                            Fart_FM5:
000B03A9 E0C0                       	smpsPan             panCenter, $00
000B03AB 8009                       	dc.b	nRst, $09
000B03AF E616                       	smpsAlterVol        $16
000B03B1 E040                       	smpsPan             panRight, $00
000B03B3 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000B03B8 A215                       	dc.b	nA2, $15
000B03BA E60A                       	smpsAlterVol        $0A
000B03BC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B03BF E603                       	smpsAlterVol        $03
000B03C1 E7A2                       	dc.b	smpsNoAttack, nA2
000B03C3 E603                       	smpsAlterVol        $03
000B03C5 E7A2                       	dc.b	smpsNoAttack, nA2
000B03C7 E604                       	smpsAlterVol        $04
000B03C9 E7A2                       	dc.b	smpsNoAttack, nA2
000B03CB E606                       	smpsAlterVol        $06
000B03CD E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000B03D0 E610                       	smpsAlterVol        $10
000B03D2 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000B03D5 E610                       	smpsAlterVol        $10
000B03D7 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000B03DC F2                         	smpsStop
000B03DD                            
000B03DD                            ; PSG3 Data
000B03DD                            Fart_PSG3:
000B03DD F2                         	smpsStop
000B03DE                            
000B03DE                            ; FM Voices
000B03DE                            Fart_Voices:
000B03DE                            ;	Voice $00
000B03DE                            ;	$39
000B03DE                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000B03DE                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000B03DE                            	smpsVcAlgorithm     $01
000B03DE                            	smpsVcFeedback      $07
000B03DE                            	smpsVcUnusedBits    $00
000B03DE                            	smpsVcDetune        $00, $07, $03, $07
000B03DE                            	smpsVcCoarseFreq    $01, $01, $02, $00
000B03DE                            	smpsVcRateScale     $00, $03, $03, $03
000B03DE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B03DE                            	smpsVcAmpMod        $00, $00, $00, $00
000B03DE                            	smpsVcDecayRate1    $00, $00, $00, $04
000B03DE                            	smpsVcDecayRate2    $00, $00, $16, $1F
000B03DE                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000B03DE                            	smpsVcReleaseRate   $0A, $09, $00, $00
000B03DE 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000B03F7                            
000B03F7                            ;	Voice $01
000B03F7                            ;	$00
000B03F7                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000B03F7                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000B03F7                            	smpsVcAlgorithm     $00
000B03F7                            	smpsVcFeedback      $00
000B03F7                            	smpsVcUnusedBits    $00
000B03F7                            	smpsVcDetune        $00, $00, $00, $00
000B03F7                            	smpsVcCoarseFreq    $00, $00, $00, $00
000B03F7                            	smpsVcRateScale     $00, $00, $00, $00
000B03F7                            	smpsVcAttackRate    $00, $00, $00, $00
000B03F7                            	smpsVcAmpMod        $00, $00, $00, $00
000B03F7                            	smpsVcDecayRate1    $00, $00, $00, $00
000B03F7                            	smpsVcDecayRate2    $00, $00, $00, $00
000B03F7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000B03F7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000B03F7 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B03F7 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000B0410                            		even
000B0410                            SoundA6:	incbin	sound\soundA6.bin
000B0440                            		even
000B0440                            SoundA7:	incbin	sound\soundA7.bin
000B0470                            		even
000B0470                            SoundA8:	incbin	sound\soundA8.bin
000B04A4                            		even
000B04A4                            SoundA9:	incbin	sound\soundA9.bin
000B04B6                            		even
000B04B6                            SoundAA:	incbin	sound\soundAA.bin
000B04F8                            		even
000B04F8                            SoundAB:	incbin	sound\soundAB.bin
000B0518                            		even
000B0518                            SoundAC:	incbin	sound\soundAC.bin
000B054C                            		even
000B054C                            SoundAD:	incbin	sound\soundAD.bin
000B0582                            		even
000B0582                            SoundAE:	incbin	sound\soundAE.bin
000B05CC                            		even
000B05CC                            SoundAF:	incbin	sound\soundAF.bin
000B05FA                            		even
000B05FA                            SoundB0:	incbin	sound\soundB0.bin
000B062C                            		even
000B062C                            SoundB1:	incbin	sound\soundB1.bin
000B0658                            		even
000B0658                            SoundB2:	incbin	sound\soundB2.bin
000B06A8                            		even
000B06A8                            SoundB3:	incbin	sound\soundB3.bin
000B06F2                            		even
000B06F2                            SoundB4:	include	sound\soundB4.asm
000B06F2                            SndB4_Bumper_Header:
000B06F2 =00000001                  smpsHeaderStartSong = 1
000B06F2 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000B06F4 01                         	smpsHeaderTempoSFX  $01
000B06F5 03                         	smpsHeaderChanSFX   $03
000B06F6                            
000B0708                            
000B0708                            ; FM5 Data
000B0708                            SndB4_Bumper_FM5:
000B070A F600 00                    	smpsJump            SndB4_Bumper_Jump00
000B070D                            
000B070D                            ; FM4 Data
000B070D                            SndB4_Bumper_FM4:
000B070D F2                         	smpsStop
000B070E                            
000B070E                            SndB4_Bumper_Jump00:
000B070E A020                       	dc.b	nG2, $20
000B0710 F2                         	smpsStop
000B0711                            
000B0711                            ; FM3 Data
000B0711                            SndB4_Bumper_FM3:
000B0711 F2                         	smpsStop
000B0712                            
000B0712                            SndB4_Bumper_Voices:
000B0712                            ;	Voice $00
000B0712                            ;	$32
000B0712                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000B0712                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000B0712                            	smpsVcAlgorithm     $02
000B0712                            	smpsVcFeedback      $06
000B0712                            	smpsVcUnusedBits    $00
000B0712                            	smpsVcDetune        $07, $07, $02, $00
000B0712                            	smpsVcCoarseFreq    $00, $00, $00, $04
000B0712                            	smpsVcRateScale     $00, $00, $00, $00
000B0712                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000B0712                            	smpsVcAmpMod        $00, $00, $00, $00
000B0712                            	smpsVcDecayRate1    $08, $00, $00, $09
000B0712                            	smpsVcDecayRate2    $0B, $00, $00, $09
000B0712                            	smpsVcDecayLevel    $00, $00, $00, $00
000B0712                            	smpsVcReleaseRate   $0F, $00, $00, $00
000B0712 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B0712 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000B072C 00                         		even
000B072C                            SoundB5:	incbin	sound\soundB5.bin
000B074A 00                         		even
000B074A                            SoundB6:	incbin	sound\soundB6.bin
000B0768                            		even
000B0768                            SoundB7:	incbin	sound\soundB7.bin
000B07A4                            		even
000B07A4                            SoundB8:	incbin	sound\soundB8.bin
000B07C2                            		even
000B07C2                            SoundB9:	incbin	sound\soundB9.bin
000B0826                            		even
000B0826                            SoundBA:	incbin	sound\soundBA.bin
000B088A                            		even
000B088A                            SoundBB:	incbin	sound\soundBB.bin
000B08B6                            		even
000B08B6                            SoundBC:	incbin	sound\soundBC.bin
000B08F8                            		even
000B08F8                            SoundBD:	incbin	sound\soundBD.bin
000B094C                            		even
000B094C                            SoundBE:	incbin	sound\soundBE.bin
000B0986                            		even
000B0986                            SoundBF:	incbin	sound\soundBF.bin
000B09F8                            		even
000B09F8                            SoundC0:	incbin	sound\soundC0.bin
000B0A26                            		even
000B0A26                            SoundC1:	incbin	sound\soundC1.bin
000B0A80                            		even
000B0A80                            SoundC2:	incbin	sound\soundC2.bin
000B0AAA                            		even
000B0AAA                            SoundC3:	incbin	sound\soundC3.bin
000B0B24                            		even
000B0B24                            SoundC4:	incbin	sound\soundC4.bin
000B0C22                            		even
000B0C22                            SoundC5:	incbin	sound\soundC5.bin
000B0C8A                            		even
000B0C8A                            SoundC6:	incbin	sound\soundC6.bin
000B0CCC                            		even
000B0CCC                            SoundC7:	incbin	sound\soundC7.bin
000B0CFA                            		even
000B0CFA                            SoundC8:	incbin	sound\soundC8.bin
000B0D0C                            		even
000B0D0C                            SoundC9:	incbin	sound\soundC9.bin
000B0D3A                            		even
000B0D3A                            SoundCA:	incbin	sound\soundCA.bin
000B0D68                            		even
000B0D68                            SoundCB:	incbin	sound\soundCB.bin
000B0DB4                            		even
000B0DB4                            SoundCC:	incbin	sound\C9.ssf
000B0DE2                            		even
000B0DE2                            SoundCD:	incbin	sound\soundCD.bin
000B0E0E                            		even
000B0E0E                            SoundCE:	incbin	sound\soundCE.bin
000B0E2C 00                         		even
000B0E2C                            SoundCF:	incbin	sound\soundCF.bin
000B0E64                            		even
000B0E64                            SoundD0:	incbin	sound\soundD0.bin
000B0E9E                            		even
000B0E9E                            SoundD1:	incbin	sound\MenuBIT.bin
000B0EAC                            		even
000B0EAC                            SoundD2:	incbin	sound\MenuAffirm.bin
000B0F14 00                         		even
000B0F14                            SegaPCM:	incbin	sound\segapcm.bin
000CB06A                            SegaPCM_end:
000CB06A                            	even
000CB06A                            
000CB06A                            IdiotPCM:	incbin	sound\youare.bin
000D513B                            IdiotPCM_end:
000D513C 00                         	even
000D513C                            
000D513C                            Minecraft:	include	minecraft\code\main.asm
000D513C                            ; Minecraft: Very Legacy Console Edition
000D513C                            ; Main file
000D513C                            
000D513C                            ;	align	$20000
000D513C                            	opt	l.
000D513C                            	include	"minecraft\code\variables.asm"
000D513C                            ; Minecraft: Very Legacy Console Edition
000D513C                            ; Variable Definitions
000D513C                            
000D513C =00000040                  MAP_HEIGHT	equ	64
000D513C =00000100                  MAP_WIDTH	equ	256
000D513C                            
000D513C                            		rsset	$FF0000
000D513C =00FF0000                  mcRAM		rs.b	0
000D513C =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000D513C =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000D513C                            
000D513C                            		rsset	$FFFF8000
000D513C =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000D513C =FFFF8E80                  planeBuffer_End	rs.b	0
000D513C =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000D513C                            
000D513C =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000D513C =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000D513C =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000D513C =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000D513C                            
000D513C =FFFF8E88                  vblankWait	rs.w	1
000D513C                            
000D513C                            		rsset	__rs&$FFFFFF
000D513C =00FF8E8A                  mcRAM_End	rs.b	0
000D513C                            
000D513C                            ; VRAM Definitions
000D513C =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
000D513C                            
000D513C                            		rsreset
000D513C                            
000D513C =00000000                  vramEmptyTile	rs.b	TILE
000D513C =00000020                  vramTerrain	rs.b	255*TILE
000D513C =00002000                  vramBackground	rs.b	384*TILE
000D513C                            
000D513C =0000C000                  VRAM_PLANE_A	equ	$C000
000D513C =0000D000                  VRAM_PLANE_W	equ	$D000
000D513C =0000E000                  VRAM_PLANE_B	equ	$E000
000D513C                            
000D513C =0000F800                  VRAM_SPR_LIST	equ	$F800
000D513C =0000FC00                  VRAM_HSCROLL	equ	$FC00
000D513C =0000FC00                  VRAM_HSCROLL	equ	$FC00
000D513C                            	include	"minecraft\code\macros.asm"
000D513C                            ; =========================================================================================================================================================
000D513C                            ; MegaDrive macros
000D513C                            ; =========================================================================================================================================================
000D513C                            clrRAM		macro	starta, enda
000D513C                            		local	endaddr
000D513C                            		if narg<2
000D513C                            endaddr			EQUS	"\starta\_End"
000D513C                            		else
000D513C                            endaddr			EQUS	"\enda"
000D513C                            		endif
000D513C                            
000D513C                            		moveq	#0,d0
000D513C                            
000D513C                            		if ((\starta)&$8000)=0
000D513C                            			lea	\starta,a1
000D513C                            		else
000D513C                            			lea	(\starta).w,a1
000D513C                            		endif
000D513C                            		if (\starta)&1
000D513C                            			move.b	d0,(a1)+
000D513C                            		endif
000D513C                            
000D513C                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000D513C                            .Clear\@:	move.l	d0,(a1)+
000D513C                            		dbf	d1,.Clear\@
000D513C                            
000D513C                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000D513C                            			move.w	d0,(a1)+
000D513C                            		endif
000D513C                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000D513C                            			move.b	d0,(a1)+
000D513C                            		endif
000D513C                            		endm
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; Disable interrupts
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; ARGUMENTS:
000D513C                            ;	Nothing
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; RETURNS:
000D513C                            ;	Nothing
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            intsOff		macros
000D513C                            		ori	#$700,sr
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; Enable interrupts
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; ARGUMENTS:
000D513C                            ;	Nothing
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; RETURNS:
000D513C                            ;	Nothing
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            intsOn		macros
000D513C                            		andi	#$F8FF,sr
000D513C                            
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; VDP command instruction
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; ARGUMENTS:
000D513C                            ;	addr	- Address in VDP memory
000D513C                            ;	type	- Type of VDP memory
000D513C                            ;	rwd	- VDP command
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; RETURNS:
000D513C                            ;	Nothing
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C =00000021                  VRAM		EQU	%100001		; VRAM
000D513C =0000002B                  CRAM		EQU	%101011		; CRAM
000D513C =00000025                  VSRAM		EQU	%100101		; VSRAM
000D513C =0000000C                  READ		EQU	%001100		; VDP read
000D513C =00000007                  WRITE		EQU	%000111		; VDP write
000D513C =00000027                  DMA		EQU	%100111		; VDP DMA
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000D513C                            		if narg=5
000D513C                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000D513C                            		elseif narg>=6
000D513C                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000D513C                            		else
000D513C                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000D513C                            		endif
000D513C                            		endm
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; VDP DMA from 68000 memory to VDP memory
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; ARGUMENTS:
000D513C                            ;	src	- Source address in 68000 memory
000D513C                            ;	dest	- Destination address in VDP memory
000D513C                            ;	len	- Length of data in bytes
000D513C                            ;	type	- Type of VDP memory
000D513C                            ;	a6.l	- VDP control port
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; RETURNS:
000D513C                            ;	Nothing
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            dma68k		macro	src, dest, len, type
000D513C                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000D513C                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000D513C                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000D513C                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000D513C                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000D513C                            		move.w	(sp)+,(a6)
000D513C                            		endm
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000D513C                            
000D513C                            MC_Init:
000D513C 007C 0700                  		intsOff						; disable CPU interrupts
000D5140 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000D5148                            
000D5148 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000D514E 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000D5152                            
000D5152 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
000D5156 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
000D515A 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
000D515E 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
000D5162                            		
000D5162 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000D5166 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
000D516A 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000D516E 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000D5172                            
000D5186 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000D518A                            
000D518A                            .waitVBlank:	
000D518A 44D6                       		move.w	(a6),ccr				; is v-blank active?
000D518C 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000D518E                            
000D51C2 6100 0000                  		bsr.w	MC_LoadBackground
000D51C6 6100 0000                  		bsr.w	MC_LoadWorld
000D51CA                            
000D51CA 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000D51CE 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000D51D2 027C F8FF                  		intsOn						; enable CPU interrupts
000D51D6                            
000D51D6                            .gameLoop:
000D51D6 50F8 8E88                  		st.b	(vblankWait).w
000D51DA 6100                       		bsr.s	MC_RenderBlocks
000D51DC                            
000D51DC                            .spin:
000D51DC 4A38 8E88                  		tst.b	(vblankWait).w
000D51E0 67F4                       		beq.s	.gameLoop
000D51E2 60F8                       		bra.s	.spin
000D51E4                            
000D51E4                            ; ===========================================================================
000D51E4                            ; ---------------------------------------------------------------------------
000D51E4                            ; Render the Visible Portion of the World to the Screen
000D51E4                            ; ---------------------------------------------------------------------------
000D51E4                            MC_RenderBlocks:
000D51E4 3038 8E80                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
000D51E8 E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
000D51EA 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
000D51EE                            
000D51EE 3238 8E82                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
000D51F2 EB49                       		lsl.w	#5,d1			; Make into row offset
000D51F4 0241 3F00                  		andi.w	#$3F00,d1		; ^
000D51F8                            
000D51F8 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
000D51FE 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
000D5204 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
000D5208 7600                       		moveq	#0,d3			; Clear d3
000D520A 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
000D520C                            
000D520C                            .renderScreen:
000D520C 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
000D520E 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
000D5210 1400                       		move.b	d0,d2			; ^
000D5212                            
000D5212                            .renderRow:
000D5212 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
000D5216 6700                       		beq.s	.renderWall
000D5218                            
000D5218 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
000D521C D643                       		add.w	d3,d3				; Turn tile ID into index
000D521E 887B 3000                  		or.w	MC_BlockProperties(pc,d3.w),d4	; Combine with the tile render properties
000D5222 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
000D5224                            		
000D5224 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000D5226 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000D522A 6000                       		bra.s	.endRenderRow		; Branch
000D522C                            
000D522C                            .renderWall:
000D522C 1631 2000                  		move.b	(a1,d2.w),d3		; Get the block ID at the current wall layout coordinates
000D5230 D643                       		add.w	d3,d3				; Turn tile ID into index
000D5232 34FB 3000                  		move.w	MC_BlockProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
000D5236                            
000D5236 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
000D5238 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
000D523C                            
000D523C                            .endRenderRow:
000D523C D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
000D5240 0641 0100                  		add.w	#$100,d1		; Increment to the next row
000D5244 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
000D5248 6200                       		bhi.s	.inBounds		; If so, branch
000D524A 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
000D524E                            
000D524E                            .inBounds:	
000D524E 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
000D5252 4E75                       		rts
000D5254                            
000D5254                            ; ---------------------------------------------------------------------------
000D5254                            block_entry	macro	tileID, palLine, priority
000D5254                            	if (narg<3)
000D5254                            		dc.w	(palLine<<13)|tileID
000D5254                            	else
000D5254                            		dc.w	$8000|(palLine<<13)|tileID
000D5254                            	endif
000D5254                            		endm
000D5254                            
000D5254                            MC_BlockProperties:
000D5294                            
000D52B2                            
000D52B2                            ; ===========================================================================
000D52B2                            ; ---------------------------------------------------------------------------
000D52B2                            ; Clear The Screen
000D52B2                            ; ---------------------------------------------------------------------------
000D52B2                            MC_ClearScreen:
000D52B2 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000D52B6                            
000D52B6 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000D52BC 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D52C0 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000D52C6 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D52CC                            
000D52CC 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D52CE 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000D52D0                            
000D52D0 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000D52D6 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D52DA 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000D52E0 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D52E6                            
000D52E6 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D52E8 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000D52EA                            
000D52EA 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000D52F0 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000D52F4 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000D52FA 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000D5300                            
000D5300 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000D5302 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000D5304                            
000D5304 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000D5308 4E75                       		rts						; return
000D530A                            ; ---------------------------------------------------------------------------
000D530A                            
000D530A                            ; ===========================================================================
000D530A                            ; ---------------------------------------------------------------------------
000D530A                            ; Load the Background
000D530A                            ; ---------------------------------------------------------------------------
000D530A                            MC_LoadBackground:
000D5324                            
000D532A 41F9 0000 0000             		lea	MC_BGMap,a0
000D5330 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
000D5334                            
000D5334                            .loop:
000D5334 3018                       		move.w	(a0)+,d0
000D5336 6700                       		beq.s	.empty
000D5338 0640 0100                  		add.w	#(vramBackground>>5),d0
000D533C 0040 6000                  		ori.w	#(3<<13),d0
000D5340                            
000D5340                            .empty:
000D5340 3D40 FFFC                  		move.w	d0,-4(a6)
000D5344 51CF FFEE                  		dbf	d7,.loop
000D5348 4E75                       		rts						; return
000D534A                            
000D534A                            ; ===========================================================================
000D534A                            ; ---------------------------------------------------------------------------
000D534A                            ; Load the World
000D534A                            ; ---------------------------------------------------------------------------
000D534A                            MC_LoadWorld:
000D534A 41F9 0000 0000             		lea	MC_TestMap,a0
000D5350 43F9 00FF 4000             		lea	mapWallBlocks,a1
000D5356 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000D535A                            
000D535A                            .loadWalls:
000D535A 22D8                       		move.l	(a0)+,(a1)+
000D535C 51CF FFFC                  		dbf	d7,.loadWalls
000D5360                            
000D5360 41F9 0000 0000             		lea	MC_TestMap,a0
000D5366 43F9 00FF 0000             		lea	mapCollBlocks,a1
000D536C 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
000D5370                            
000D5370                            .loadBlocks:
000D5370 22D8                       		move.l	(a0)+,(a1)+
000D5372 51CF FFFC                  		dbf	d7,.loadBlocks
000D5376 4E75                       		rts						; return
000D5378                            
000D5378                            ; ===========================================================================
000D5378                            ; ---------------------------------------------------------------------------
000D5378                            ; VBlank Interrupt
000D5378                            ; ---------------------------------------------------------------------------
000D5378                            MC_VInt:
000D5392                            
000D5392 3038 8E80                  		move.w	(camXPosFG).w,d0			; update scrolling
000D5396 0240 0007                  		andi.w	#7,d0					; ^
000D539A 4440                       		neg.w	d0					; ^
000D53A2 3D40 FFFC                  		move.w	d0,-4(a6)				; ^
000D53A6                            
000D53A6 5278 8E80                  		addq.w	#1,(camXPosFG).w			
000D53AA 51F8 8E88                  		sf.b	(vblankWait).w
000D53AE 4E73                       		rte						; return
000D53B0                            ; ---------------------------------------------------------------------------
000D53B0                            
000D53B0                            ; ---------------------------------------------------------------------------
000D53B0                            MC_Palette:
000D53B0 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000D53D0 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000D53F0 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000D5410 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
000D5430                            ; ---------------------------------------------------------------------------
000D5430                            MC_Terrain:
000D5430                            	incbin	"minecraft\assets\bin\terrain.bin"
000D58B0                            MC_Terrain_End:
000D58B0                            	even
000D58B0                            ; ---------------------------------------------------------------------------
000D58B0                            MC_BGArt:
000D58B0                            	incbin	"minecraft\assets\bin\bgArt.bin"
000D86F0                            MC_BGArt_End:
000D86F0                            	even
000D86F0                            ; ---------------------------------------------------------------------------
000D86F0                            MC_BGMap:
000D86F0                            	incbin	"minecraft\assets\bin\bgMap.bin"
000D96F0                            MC_BGMap_End:
000D96F0                            	even
000D96F0                            ; ---------------------------------------------------------------------------
000D96F0                            MC_TestMap:
000D96F0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
000D97F0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
000D98F0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
000D99F0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
000D9AF0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
000D9BF0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
000D9CF0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
000D9DF0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
000D9EF0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
000D9FF0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
000DA0F0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
000DA1F0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
000DA2F0 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
000DA3F0                            	
000DA3F0 0101 0101 0101 0101 0101+  	dcb.b	32,$01	; Row 0F
000DA410 0202 0202 0202 0202 0202+  	dcb.b	32,$02	; Row 0F
000DA430 0303 0303 0303 0303 0303+  	dcb.b	32,$03	; Row 0F
000DA450 0404 0404 0404 0404 0404+  	dcb.b	32,$04	; Row 0F
000DA470 0505 0505 0505 0505 0505+  	dcb.b	32,$05	; Row 0F
000DA490 0606 0606 0606 0606 0606+  	dcb.b	32,$06	; Row 0F
000DA4B0 0707 0707 0707 0707 0707+  	dcb.b	32,$07	; Row 0F
000DA4D0 0808 0808 0808 0808 0808+  	dcb.b	32,$08	; Row 0F
000DA4F0                            
000DA4F0 0303 0303 0303 0303 0303+  	dcb.b	256,$03	; Row 10
000DA5F0 0202 0202 0202 0202 0202+  	dcb.b	256,$02	; Row 11
000DA6F0 0202 0202 0202 0202 0202+  	dcb.b	256,$02	; Row 12
000DA7F0 0202 0202 0202 0202 0202+  	dcb.b	256,$02	; Row 13
000DA8F0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 14
000DA9F0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 15
000DAAF0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 16
000DABF0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 17
000DACF0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 19
000DADF0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1A
000DAEF0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1B
000DAFF0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1C
000DB0F0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1E
000DB1F0 0101 0101 0101 0101 0101+  	dcb.b	256,$01	; Row 1F
000DB2F0                            MC_TestMap_End:
000DB2F0                            MC_TestMap_End:
000DB2F0                            ; end of 'ROM'
000DB2F0                            EndOfRom:
000DB2F0                            
000DB2F0                            
