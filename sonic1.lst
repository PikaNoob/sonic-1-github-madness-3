00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388 11FC 0020 F600             		move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000038E                            
0000038E                            MainGameLoop:
0000038E 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
00000392 0240 003C                  		andi.w	#$3C,d0
00000396 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
0000039A 60F2                       		bra.s	MainGameLoop
0000039C                            ; ===========================================================================
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            ; Main game mode array
0000039C                            ; ---------------------------------------------------------------------------
0000039C                            
0000039C                            GameModeArray:
0000039C 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003A0                            ; ===========================================================================
000003A0 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003A4                            ; ===========================================================================
000003A4 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A8                            ; ===========================================================================
000003A8 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003BC                            ; ===========================================================================
000003BC 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003C2                            ; ===========================================================================
000003C2                            
000003C2                            CheckSumError:
000003C2 6100 0000                  		bsr.w	VDPSetupGame
000003C6 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003D0 7E3F                       		moveq	#$3F,d7
000003D2                            
000003D2                            CheckSum_Red:
000003D2 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003DA 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003DE                            
000003DE                            CheckSum_Loop:
000003DE 60FE                       		bra.s	CheckSum_Loop
000003E0                            ; ===========================================================================
000003E0                            
000003E0                            BusError:
000003E0 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E6 6000                       		bra.s	loc_43A
000003E8                            ; ===========================================================================
000003E8                            
000003E8                            AddressError:
000003E8 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003EE 6000                       		bra.s	loc_43A
000003F0                            ; ===========================================================================
000003F0                            
000003F0                            IllegalInstr:
000003F0 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F6 54AF 0002                  		addq.l	#2,2(sp)
000003FA 6000                       		bra.s	loc_462
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            ZeroDivide:
000003FC 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000402 6000                       		bra.s	loc_462
00000404                            ; ===========================================================================
00000404                            
00000404                            ChkInstr:
00000404 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
0000040A 6000                       		bra.s	loc_462
0000040C                            ; ===========================================================================
0000040C                            
0000040C                            TrapvInstr:
0000040C 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000412 6000                       		bra.s	loc_462
00000414                            ; ===========================================================================
00000414                            
00000414                            PrivilegeViol:
00000414 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
0000041A 6000                       		bra.s	loc_462
0000041C                            ; ===========================================================================
0000041C                            
0000041C                            Trace:
0000041C 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000422 6000                       		bra.s	loc_462
00000424                            ; ===========================================================================
00000424                            
00000424                            Line1010Emu:
00000424 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
0000042A 54AF 0002                  		addq.l	#2,2(sp)
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Line1111Emu:
00000430 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000436 54AF 0002                  		addq.l	#2,2(sp)
0000043A 6000                       		bra.s	loc_462
0000043C                            ; ===========================================================================
0000043C                            
0000043C                            ErrorExcept:
0000043C 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000442 6000                       		bra.s	loc_462
00000444                            ; ===========================================================================
00000444                            
00000444                            loc_43A:
00000444 46FC 2700                  		move	#$2700,sr
00000448 544F                       		addq.w	#2,sp
0000044A 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000044E 544F                       		addq.w	#2,sp
00000450 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000456 6100 0000                  		bsr.w	ShowErrorMsg
0000045A 202F 0002                  		move.l	2(sp),d0
0000045E 6100 0000                  		bsr.w	sub_5BA
00000462 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000466 6100 0000                  		bsr.w	sub_5BA
0000046A 6000                       		bra.s	loc_478
0000046C                            ; ===========================================================================
0000046C                            
0000046C                            loc_462:
0000046C 46FC 2700                  		move	#$2700,sr
00000470 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000476 6100 0000                  		bsr.w	ShowErrorMsg
0000047A 202F 0002                  		move.l	2(sp),d0
0000047E 6100 0000                  		bsr.w	sub_5BA
00000482                            
00000482                            loc_478:
00000482 6100 0000                  		bsr.w	ErrorWaitForC
00000486 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
0000048C 46FC 2300                  		move	#$2300,sr
00000490 4E73                       		rte	
00000492                            
00000492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000492                            
00000492                            
00000492                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000492 4DF9 00C0 0000             		lea	($C00000).l,a6
00000498 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004A2 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A8 323C 027F                  		move.w	#$27F,d1
000004AC                            
000004AC                            Error_LoadGfx:
000004AC 3C98                       		move.w	(a0)+,(a6)
000004AE 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004B2 7000                       		moveq	#0,d0		; clear	d0
000004B4 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B8 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004BC 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004C0 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004CA 7212                       		moveq	#$12,d1		; number of characters
000004CC                            
000004CC                            Error_LoopChars:
000004CC 7000                       		moveq	#0,d0
000004CE 1018                       		move.b	(a0)+,d0
000004D0 0640 0790                  		addi.w	#$790,d0
000004D4 3C80                       		move.w	d0,(a6)
000004D6 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004DA 4E75                       		rts	
000004DC                            ; End of function ShowErrorMsg
000004DC                            
000004DC                            ; ===========================================================================
000004DC 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004E0 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004E4 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E8 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004EC 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004F0 0000                       		dc.w asc_5A6-ErrorText
000004F2 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000505 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000518 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
0000052B 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000053E 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000551 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000564 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000577 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
0000058A 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
0000059D 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005B0 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005C4 00                         		even
000005C4                            
000005C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005C4                            
000005C4                            
000005C4                            sub_5BA:				; XREF: loc_43A; loc_462
000005C4 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C8 7407                       		moveq	#7,d2
000005CA                            
000005CA                            loc_5C0:
000005CA E998                       		rol.l	#4,d0
000005CC 6100                       		bsr.s	sub_5CA
000005CE 51CA FFFA                  		dbf	d2,loc_5C0
000005D2 4E75                       		rts	
000005D4                            ; End of function sub_5BA
000005D4                            
000005D4                            
000005D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D4                            
000005D4                            
000005D4                            sub_5CA:				; XREF: sub_5BA
000005D4 3200                       		move.w	d0,d1
000005D6 0241 000F                  		andi.w	#$F,d1
000005DA 0C41 000A                  		cmpi.w	#$A,d1
000005DE 6500                       		bcs.s	loc_5D8
000005E0 5E41                       		addq.w	#7,d1
000005E2                            
000005E2                            loc_5D8:
000005E2 0641 07C0                  		addi.w	#$7C0,d1
000005E6 3C81                       		move.w	d1,(a6)
000005E8 4E75                       		rts	
000005EA                            ; End of function sub_5CA
000005EA                            
000005EA                            
000005EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005EA                            
000005EA                            
000005EA                            ErrorWaitForC:				; XREF: loc_478
000005EA 6100 0000                  		bsr.w	ReadJoypads
000005EE 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005F4 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F8 4E75                       		rts	
000005FA                            ; End of function ErrorWaitForC
000005FA                            
000005FA                            ; ===========================================================================
000005FA                            
000005FA                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D3A                            Art_Text_end:		even
00000D3A                            
00000D3A                            ; ===========================================================================
00000D3A                            ;VBlank
00000D3A                            loc_B10:				; XREF: Vectors
00000D3A 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D3E 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D42 6700                       		beq.s	loc_B88
00000D44 3039 00C0 0004             		move.w	($C00004).l,d0
00000D4A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D54 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D5C 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D62 6700                       		beq.s	loc_B42
00000D64 303C 0700                  		move.w	#$700,d0
00000D68                            
00000D68                            loc_B3E:
00000D68 51C8 FFFE                  		dbf	d0,loc_B3E
00000D6C                            
00000D6C                            loc_B42:
00000D6C 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D70 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D76 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D7C 0240 003E                  		andi.w	#$3E,d0
00000D80 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D84 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D88                            
00000D88                            loc_B5E:				; XREF: loc_B88
00000D88 4EB9 0000 0000             		jsr	sub_71B4C
00000D8E                            
00000D8E                            loc_B64:				; XREF: loc_D50
00000D8E 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D92 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D96 4E73                       		rte	
00000D98                            ; ===========================================================================
00000D98 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D9C 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000DA0 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DA4 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA8 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DAC 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DB0 0000                       		dc.w loc_E72-off_B6E
00000DB2                            ; ===========================================================================
00000DB2                            
00000DB2                            loc_B88:				; XREF: loc_B10; off_B6E
00000DB2 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB8 6700                       		beq.s	loc_B9A
00000DBA 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DC0 6600 FFC6                  		bne.w	loc_B5E
00000DC4                            
00000DC4                            loc_B9A:
00000DC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DCA 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DCE 3039 00C0 0004             		move.w	($C00004).l,d0
00000DD4 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DDA 6700                       		beq.s	loc_BBA
00000DDC 303C 0700                  		move.w	#$700,d0
00000DE0                            
00000DE0                            loc_BB6:
00000DE0 51C8 FFFE                  		dbf	d0,loc_BB6
00000DE4                            
00000DE4                            loc_BBA:
00000DE4 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DEA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DF2                            
00000DF2                            loc_BC8:
00000DF2 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DFA 66F6                       		bne.s	loc_BC8
00000DFC 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E00 6600                       		bne.s	loc_BFE
00000E02 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E08 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E0E 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E14 3ABC 977F                  		move.w	#$977F,(a5)
00000E18 3ABC C000                  		move.w	#$C000,(a5)
00000E1C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E22 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E26 6000                       		bra.s	loc_C22
00000E28                            ; ===========================================================================
00000E28                            
00000E28                            loc_BFE:				; XREF: loc_BC8
00000E28 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E2E 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E34 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E3A 3ABC 977F                  		move.w	#$977F,(a5)
00000E3E 3ABC C000                  		move.w	#$C000,(a5)
00000E42 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E48 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E4C                            
00000E4C                            loc_C22:				; XREF: loc_BC8
00000E4C 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E58 6000 FF2E                  		bra.w	loc_B5E
00000E5C                            ; ===========================================================================
00000E5C                            
00000E5C                            loc_C32:				; XREF: off_B6E
00000E5C 6100 0000                  		bsr.w	sub_106E
00000E60                            
00000E60                            loc_C36:				; XREF: off_B6E
00000E60 4A78 F614                  		tst.w	($FFFFF614).w
00000E64 6700 0000                  		beq.w	locret_C42
00000E68 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E6C                            
00000E6C                            locret_C42:
00000E6C 4E75                       		rts	
00000E6E                            ; ===========================================================================
00000E6E                            
00000E6E                            loc_C44:				; XREF: off_B6E
00000E6E 6100 0000                  		bsr.w	sub_106E
00000E72 6100 0000                  		bsr.w	sub_6886
00000E76 6100 0000                  		bsr.w	sub_1642
00000E7A 4A78 F614                  		tst.w	($FFFFF614).w
00000E7E 6700 0000                  		beq.w	locret_C5C
00000E82 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E86                            
00000E86                            locret_C5C:
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C5E:				; XREF: off_B6E
00000E88 6100 0000                  		bsr.w	sub_106E
00000E8C 4E75                       		rts	
00000E8E                            ; ===========================================================================
00000E8E                            
00000E8E                            loc_C64:				; XREF: off_B6E
00000E8E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E94 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E98                            
00000E98                            loc_C6E:				; XREF: off_B6E
00000E98 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000EA0                            
00000EA0                            loc_C76:
00000EA0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA8 66F6                       		bne.s	loc_C76		; if not, branch
00000EAA 6100 0000                  		bsr.w	ReadJoypads
00000EAE 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EB2 6600                       		bne.s	loc_CB0
00000EB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EBA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EC0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC6 3ABC 977F                  		move.w	#$977F,(a5)
00000ECA 3ABC C000                  		move.w	#$C000,(a5)
00000ECE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ED4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED8 6000                       		bra.s	loc_CD4
00000EDA                            ; ===========================================================================
00000EDA                            
00000EDA                            loc_CB0:				; XREF: loc_C76
00000EDA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EEC 3ABC 977F                  		move.w	#$977F,(a5)
00000EF0 3ABC C000                  		move.w	#$C000,(a5)
00000EF4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EFA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EFE                            
00000EFE                            loc_CD4:				; XREF: loc_C76
00000EFE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F02 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F08 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F0E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F14 3ABC 977F                  		move.w	#$977F,(a5)
00000F18 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F1C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F22 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F2C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F32 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F38 3ABC 977F                  		move.w	#$977F,(a5)
00000F3C 3ABC 7800                  		move.w	#$7800,(a5)
00000F40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4A 4A38 F767                  		tst.b	($FFFFF767).w
00000F4E 6700                       		beq.s	loc_D50
00000F50 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F56 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F5C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F62 3ABC 977F                  		move.w	#$977F,(a5)
00000F66 3ABC 7000                  		move.w	#$7000,(a5)
00000F6A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F70 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F74 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F7A                            
00000F7A                            loc_D50:
00000F7A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F82 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F88 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F8E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F94 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F9A 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000FA0 6400                       		bcc.s	Demo_Time
00000FA2 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA8 588F                       		addq.l	#4,sp
00000FAA 6000 FDE2                  		bra.w	loc_B64
00000FAE                            
00000FAE                            ; ---------------------------------------------------------------------------
00000FAE                            ; Subroutine to	run a demo for an amount of time
00000FAE                            ; ---------------------------------------------------------------------------
00000FAE                            
00000FAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FAE                            
00000FAE                            
00000FAE                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FAE 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FB2 4EB9 0000 0000             		jsr	AniArt_Load
00000FB8 4EB9 0000 0000             		jsr	HudUpdate
00000FBE 6100 0000                  		bsr.w	sub_165E
00000FC2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC6 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FCA 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FCE                            
00000FCE                            Demo_TimeEnd:
00000FCE 4E75                       		rts	
00000FD0                            ; End of function Demo_Time
00000FD0                            
00000FD0                            ; ===========================================================================
00000FD0                            
00000FD0                            loc_DA6:				; XREF: off_B6E
00000FD0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD8                            
00000FD8                            loc_DAE:
00000FD8 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FE0 66F6                       		bne.s	loc_DAE		; if not, branch
00000FE2 6100 0000                  		bsr.w	ReadJoypads
00000FE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FEC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FF2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF8 3ABC 977F                  		move.w	#$977F,(a5)
00000FFC 3ABC C000                  		move.w	#$C000,(a5)
00001000 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001006 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000100A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001010 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001016 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000101C 3ABC 977F                  		move.w	#$977F,(a5)
00001020 3ABC 7800                  		move.w	#$7800,(a5)
00001024 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000102A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000102E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001034 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000103A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001040 3ABC 977F                  		move.w	#$977F,(a5)
00001044 3ABC 7C00                  		move.w	#$7C00,(a5)
00001048 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000104E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001052 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0000105A 6100 0000                  		bsr.w	PalCycle_SS
0000105E 4A38 F767                  		tst.b	($FFFFF767).w
00001062 6700                       		beq.s	loc_E64
00001064 4BF9 00C0 0004             		lea	($C00004).l,a5
0000106A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001070 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001076 3ABC 977F                  		move.w	#$977F,(a5)
0000107A 3ABC 7000                  		move.w	#$7000,(a5)
0000107E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001084 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001088 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000108E                            
0000108E                            loc_E64:
0000108E 4A78 F614                  		tst.w	($FFFFF614).w
00001092 6700 0000                  		beq.w	locret_E70
00001096 5378 F614                  		subq.w	#1,($FFFFF614).w
0000109A                            
0000109A                            locret_E70:
0000109A 4E75                       		rts	
0000109C                            ; ===========================================================================
0000109C                            
0000109C                            loc_E72:				; XREF: off_B6E
0000109C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010A4                            
000010A4                            loc_E7A:
000010A4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010AC 66F6                       		bne.s	loc_E7A		; if not, branch
000010AE 6100 0000                  		bsr.w	ReadJoypads
000010B2 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B6 6600                       		bne.s	loc_EB4
000010B8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010BE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010C4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010CA 3ABC 977F                  		move.w	#$977F,(a5)
000010CE 3ABC C000                  		move.w	#$C000,(a5)
000010D2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010DC 6000                       		bra.s	loc_ED8
000010DE                            ; ===========================================================================
000010DE                            
000010DE                            loc_EB4:				; XREF: loc_E7A
000010DE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010E4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010EA 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010F0 3ABC 977F                  		move.w	#$977F,(a5)
000010F4 3ABC C000                  		move.w	#$C000,(a5)
000010F8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010FE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001102                            
00001102                            loc_ED8:				; XREF: loc_E7A
00001102 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001106 4BF9 00C0 0004             		lea	($C00004).l,a5
0000110C 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001112 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001118                            
00001118                            loc_EEE:
00001118 3ABC 977F                  		move.w	#$977F,(a5)
0000111C 3ABC 7C00                  		move.w	#$7C00,(a5)
00001120 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001126 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000112A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001130 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001136 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000113C 3ABC 977F                  		move.w	#$977F,(a5)
00001140 3ABC 7800                  		move.w	#$7800,(a5)
00001144 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000114A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000114E 4A38 F767                  		tst.b	($FFFFF767).w
00001152 6700                       		beq.s	loc_F54
00001154 4BF9 00C0 0004             		lea	($C00004).l,a5
0000115A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001160 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001166 3ABC 977F                  		move.w	#$977F,(a5)
0000116A 3ABC 7000                  		move.w	#$7000,(a5)
0000116E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001174 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001178 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000117E                            
0000117E                            loc_F54:
0000117E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001186 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
0000118C 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001192 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001198 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
0000119E 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011A2 4EB9 0000 0000             		jsr	AniArt_Load
000011A8 4EB9 0000 0000             		jsr	HudUpdate
000011AE 6100 0000                  		bsr.w	sub_1642
000011B2 4E75                       		rts	
000011B4                            ; ===========================================================================
000011B4                            
000011B4                            loc_F8A:				; XREF: off_B6E
000011B4 6100 0000                  		bsr.w	sub_106E
000011B8 5238 F628                  		addq.b	#1,($FFFFF628).w
000011BC 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011C2 4E75                       		rts	
000011C4                            ; ===========================================================================
000011C4                            
000011C4                            loc_F9A:				; XREF: off_B6E
000011C4 6100 0000                  		bsr.w	sub_106E
000011C8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011CC 6000 0000                  		bra.w	sub_1642
000011D0                            ; ===========================================================================
000011D0                            
000011D0                            loc_FA6:				; XREF: off_B6E
000011D0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D8                            
000011D8                            loc_FAE:
000011D8 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011E0 66F6                       		bne.s	loc_FAE		; if not, branch
000011E2 6100 0000                  		bsr.w	ReadJoypads
000011E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000011EC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011F2 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F8 3ABC 977F                  		move.w	#$977F,(a5)
000011FC 3ABC C000                  		move.w	#$C000,(a5)
00001200 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001206 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000120A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001210 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001216 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000121C 3ABC 977F                  		move.w	#$977F,(a5)
00001220 3ABC 7800                  		move.w	#$7800,(a5)
00001224 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000122A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000122E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001234 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000123A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001240 3ABC 977F                  		move.w	#$977F,(a5)
00001244 3ABC 7C00                  		move.w	#$7C00,(a5)
00001248 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000124E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001252 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000125A 4A38 F767                  		tst.b	($FFFFF767).w
0000125E 6700                       		beq.s	loc_1060
00001260 4BF9 00C0 0004             		lea	($C00004).l,a5
00001266 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000126C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001272 3ABC 977F                  		move.w	#$977F,(a5)
00001276 3ABC 7000                  		move.w	#$7000,(a5)
0000127A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001280 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001284 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000128A                            
0000128A                            loc_1060:
0000128A 4A78 F614                  		tst.w	($FFFFF614).w
0000128E 6700 0000                  		beq.w	locret_106C
00001292 5378 F614                  		subq.w	#1,($FFFFF614).w
00001296                            
00001296                            locret_106C:
00001296 4E75                       		rts	
00001298                            
00001298                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001298                            
00001298                            
00001298                            sub_106E:				; XREF: loc_C32; et al
00001298 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012A0                            
000012A0                            loc_1076:
000012A0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A8 66F6                       		bne.s	loc_1076	; if not, branch
000012AA 6100 0000                  		bsr.w	ReadJoypads
000012AE 4A38 F64E                  		tst.b	($FFFFF64E).w
000012B2 6600                       		bne.s	loc_10B0
000012B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012BA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012C0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C6 3ABC 977F                  		move.w	#$977F,(a5)
000012CA 3ABC C000                  		move.w	#$C000,(a5)
000012CE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012D4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D8 6000                       		bra.s	loc_10D4
000012DA                            ; ===========================================================================
000012DA                            
000012DA                            loc_10B0:				; XREF: sub_106E
000012DA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012E0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012EC 3ABC 977F                  		move.w	#$977F,(a5)
000012F0 3ABC C000                  		move.w	#$C000,(a5)
000012F4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012FA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012FE                            
000012FE                            loc_10D4:				; XREF: sub_106E
000012FE 4BF9 00C0 0004             		lea	($C00004).l,a5
00001304 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000130A 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001310 3ABC 977F                  		move.w	#$977F,(a5)
00001314 3ABC 7800                  		move.w	#$7800,(a5)
00001318 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000131E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001322 4BF9 00C0 0004             		lea	($C00004).l,a5
00001328 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000132E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001334 3ABC 977F                  		move.w	#$977F,(a5)
00001338 3ABC 7C00                  		move.w	#$7C00,(a5)
0000133C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001342 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001346 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000134E 4E75                       		rts	
00001350                            ; End of function sub_106E
00001350                            
00001350                            ; ---------------------------------------------------------------------------
00001350                            ; Subroutine to	move pallets from the RAM to CRAM
00001350                            ; ---------------------------------------------------------------------------
00001350                            
00001350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001350                            
00001350                            
00001350                            PalToCRAM:
00001350 46FC 2700                  		move	#$2700,sr
00001354 4A78 F644                  		tst.w	($FFFFF644).w
00001358 6700                       		beq.s	locret_119C
0000135A 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001360 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001364 43F9 00C0 0000             		lea	($C00000).l,a1
0000136A 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000136E 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001376 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013BC 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013C0 4A38 F64F                  		tst.b	($FFFFF64F).w
000013C4 6600                       		bne.s	loc_119E
000013C6                            
000013C6                            locret_119C:
000013C6 4E73                       		rte	
000013C8                            ; ===========================================================================
000013C8                            
000013C8                            loc_119E:				; XREF: PalToCRAM
000013C8 4238 F64F                  		clr.b	($FFFFF64F).w
000013CC 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013D0 6100 FBDC                  		bsr.w	Demo_Time
000013D4 4EB9 0000 0000             		jsr	sub_71B4C
000013DA 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013DE 4E73                       		rte	
000013E0                            ; End of function PalToCRAM
000013E0                            
000013E0                            ; ---------------------------------------------------------------------------
000013E0                            ; Subroutine to	initialise joypads
000013E0                            ; ---------------------------------------------------------------------------
000013E0                            
000013E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013E0                            
000013E0                            
000013E0                            JoypadInit:				; XREF: GameClrRAM
000013E0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E8                            
000013E8                            Joypad_WaitZ80:
000013E8 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013F0 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013F2 7040                       		moveq	#$40,d0
000013F4 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013FA 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001400 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001406 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000140E 4E75                       		rts	
00001410                            ; End of function JoypadInit
00001410                            
00001410                            ; ---------------------------------------------------------------------------
00001410                            ; Subroutine to	read joypad input, and send it to the RAM
00001410                            ; ---------------------------------------------------------------------------
00001410                            
00001410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001410                            
00001410                            
00001410                            ReadJoypads:
00001410 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001414 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
0000141A 6100                       		bsr.s	Joypad_Read	; do the first joypad
0000141C 5449                       		addq.w	#2,a1		; do the second	joypad
0000141E                            
0000141E                            Joypad_Read:
0000141E 12BC 0000                  		move.b	#0,(a1)
00001422 4E71                       		nop	
00001424 4E71                       		nop	
00001426 1011                       		move.b	(a1),d0
00001428 E508                       		lsl.b	#2,d0
0000142A 0200 00C0                  		andi.b	#$C0,d0
0000142E 12BC 0040                  		move.b	#$40,(a1)
00001432 4E71                       		nop	
00001434 4E71                       		nop	
00001436 1211                       		move.b	(a1),d1
00001438 0201 003F                  		andi.b	#$3F,d1
0000143C 8001                       		or.b	d1,d0
0000143E 4600                       		not.b	d0
00001440 1210                       		move.b	(a0),d1
00001442 B101                       		eor.b	d0,d1
00001444 10C0                       		move.b	d0,(a0)+
00001446 C200                       		and.b	d0,d1
00001448 10C1                       		move.b	d1,(a0)+
0000144A 4E75                       		rts	
0000144C                            ; End of function ReadJoypads
0000144C                            
0000144C                            
0000144C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000144C                            
0000144C                            
0000144C                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
0000144C 41F9 00C0 0004             		lea	($C00004).l,a0
00001452 43F9 00C0 0000             		lea	($C00000).l,a1
00001458 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000145E 7E12                       		moveq	#$12,d7
00001460                            
00001460                            VDP_Loop:
00001460 309A                       		move.w	(a2)+,(a0)
00001462 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001466                            
00001466 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
0000146C 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001470 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001476 7000                       		moveq	#0,d0
00001478 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001482 3E3C 003F                  		move.w	#$3F,d7
00001486                            
00001486                            VDP_ClrCRAM:
00001486 3280                       		move.w	d0,(a1)
00001488 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
0000148C                            
0000148C 42B8 F616                  		clr.l	($FFFFF616).w
00001490 42B8 F61A                  		clr.l	($FFFFF61A).w
00001494 2F01                       		move.l	d1,-(sp)
00001496 4BF9 00C0 0004             		lea	($C00004).l,a5
0000149C 3ABC 8F01                  		move.w	#$8F01,(a5)
000014A0 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A6 3ABC 9780                  		move.w	#$9780,(a5)
000014AA 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014B0 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B8                            
000014B8                            loc_128E:
000014B8 3215                       		move.w	(a5),d1
000014BA 0801 0001                  		btst	#1,d1
000014BE 66F8                       		bne.s	loc_128E
000014C0                            
000014C0 3ABC 8F02                  		move.w	#$8F02,(a5)
000014C4 221F                       		move.l	(sp)+,d1
000014C6 4E75                       		rts	
000014C8                            ; End of function VDPSetupGame
000014C8                            
000014C8                            ; ===========================================================================
000014C8 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014D0 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D8 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014E0 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E8 9001 9100 9200             		dc.w $9001, $9100, $9200
000014EE                            
000014EE                            ; ---------------------------------------------------------------------------
000014EE                            ; Subroutine to	clear the screen
000014EE                            ; ---------------------------------------------------------------------------
000014EE                            
000014EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014EE                            
000014EE                            
000014EE                            ClearScreen:
000014EE 4BF9 00C0 0004             		lea	($C00004).l,a5
000014F4 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F8 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014FE 3ABC 9780                  		move.w	#$9780,(a5)
00001502 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001508 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001510                            
00001510                            loc_12E6:
00001510 3215                       		move.w	(a5),d1
00001512 0801 0001                  		btst	#1,d1
00001516 66F8                       		bne.s	loc_12E6
00001518                            
00001518 3ABC 8F02                  		move.w	#$8F02,(a5)
0000151C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001522 3ABC 8F01                  		move.w	#$8F01,(a5)
00001526 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000152C 3ABC 9780                  		move.w	#$9780,(a5)
00001530 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001536 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000153E                            
0000153E                            loc_1314:
0000153E 3215                       		move.w	(a5),d1
00001540 0801 0001                  		btst	#1,d1
00001544 66F8                       		bne.s	loc_1314
00001546                            
00001546 3ABC 8F02                  		move.w	#$8F02,(a5)
0000154A 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001552 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
0000155A 43F8 F800                  		lea	($FFFFF800).w,a1
0000155E 7000                       		moveq	#0,d0
00001560 323C 00A0                  		move.w	#$A0,d1
00001564                            
00001564                            loc_133A:
00001564 22C0                       		move.l	d0,(a1)+
00001566 51C9 FFFC                  		dbf	d1,loc_133A
0000156A                            
0000156A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000156E 7000                       		moveq	#0,d0
00001570 323C 0100                  		move.w	#$100,d1
00001574                            
00001574                            loc_134A:
00001574 22C0                       		move.l	d0,(a1)+
00001576 51C9 FFFC                  		dbf	d1,loc_134A
0000157A 4E75                       		rts	
0000157C                            ; End of function ClearScreen
0000157C                            
0000157C                            ; ---------------------------------------------------------------------------
0000157C                            ; Subroutine to	load the sound driver
0000157C                            ; ---------------------------------------------------------------------------
0000157C                            
0000157C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000157C                            
0000157C                            
0000157C                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
0000157C 4E71                       		nop	
0000157E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001586 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000158E 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001594 43F9 00A0 0000             		lea	($A00000).l,a1
0000159A 6100 0000                  		bsr.w	KosDec		; decompress
0000159E 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A6 4E71                       		nop	
000015A8 4E71                       		nop	
000015AA 4E71                       		nop	
000015AC 4E71                       		nop	
000015AE 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015BE 4E75                       		rts	
000015C0                            ; End of function SoundDriverLoad
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a sound or	music track
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound:
000015C0 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound
000015C6                            
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Subroutine to	play a special sound/music (E0-E4)
000015C6                            ;
000015C6                            ; E0 - Fade out
000015C6                            ; E1 - Sega
000015C6                            ; E2 - Speed up
000015C6                            ; E3 - Normal speed
000015C6                            ; E4 - Stop
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C6                            
000015C6                            
000015C6                            PlaySound_Special:
000015C6 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015CA 4E75                       		rts	
000015CC                            ; End of function PlaySound_Special
000015CC                            
000015CC                            ; ===========================================================================
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Unused sound/music subroutine
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            PlaySound_Unk:
000015CC 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015D0 4E75                       		rts	
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	pause the game
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            PauseGame:				; XREF: Level_MainLoop; et al
000015D2 4E71                       		nop	
000015D4 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D8 6700                       		beq.s	Unpause		; if not, branch
000015DA 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015DE 6600                       		bne.s	loc_13BE	; if yes, branch
000015E0 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E6 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E8                            
000015E8                            loc_13BE:
000015E8 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015EE 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015F4                            
000015F4                            loc_13CA:
000015F4 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015FA 6100 0000                  		bsr.w	DelayProgram
000015FE 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001602 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001604 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0000160A 6700                       		beq.s	Pause_ChkBC	; if not, branch
0000160C 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001612 4E71                       		nop	
00001614 6000                       		bra.s	loc_1404
00001616                            ; ===========================================================================
00001616                            
00001616                            Pause_ChkBC:				; XREF: PauseGame
00001616 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
0000161C 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161E 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001624 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001626                            
00001626                            Pause_ChkStart:				; XREF: PauseGame
00001626 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0000162C 67C6                       		beq.s	loc_13CA	; if not, branch
0000162E                            
0000162E                            loc_1404:				; XREF: PauseGame
0000162E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001634                            
00001634                            Unpause:				; XREF: PauseGame
00001634 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
0000163A                            
0000163A                            Pause_DoNothing:			; XREF: PauseGame
0000163A 4E75                       		rts	
0000163C                            ; ===========================================================================
0000163C                            
0000163C                            Pause_SlowMo:				; XREF: PauseGame
0000163C 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001642 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001648 4E75                       		rts	
0000164A                            ; End of function PauseGame
0000164A                            
0000164A                            ; ---------------------------------------------------------------------------
0000164A                            ; Subroutine to	display	patterns via the VDP
0000164A                            ; ---------------------------------------------------------------------------
0000164A                            
0000164A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000164A                            
0000164A                            
0000164A                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
0000164A 4DF9 00C0 0000             		lea	($C00000).l,a6
00001650 283C 0080 0000             		move.l	#$800000,d4
00001656                            
00001656                            loc_142C:
00001656 2D40 0004                  		move.l	d0,4(a6)
0000165A 3601                       		move.w	d1,d3
0000165C                            
0000165C                            loc_1432:
0000165C 3C99                       		move.w	(a1)+,(a6)
0000165E 51CB FFFC                  		dbf	d3,loc_1432
00001662 D084                       		add.l	d4,d0
00001664 51CA FFF0                  		dbf	d2,loc_142C
00001668 4E75                       		rts	
0000166A                            ; End of function ShowVDPGraphics
0000166A                            
0000166A                            ; ---------------------------------------------------------------------------
0000166A                            ; Nemesis decompression	algorithm
0000166A                            ; ---------------------------------------------------------------------------
0000166A                            
0000166A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000166A                            
0000166A                            
0000166A                            NemDec:
0000166A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000166E 47F9 0000 0000             		lea	(loc_1502).l,a3
00001674 49F9 00C0 0000             		lea	($C00000).l,a4
0000167A 6000                       		bra.s	loc_145C
0000167C                            ; ===========================================================================
0000167C 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001680 47F9 0000 0000             		lea	(loc_1518).l,a3
00001686                            
00001686                            loc_145C:				; XREF: NemDec
00001686 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000168A 3418                       		move.w	(a0)+,d2
0000168C E34A                       		lsl.w	#1,d2
0000168E 6400                       		bcc.s	loc_146A
00001690 D6FC 000A                  		adda.w	#$A,a3
00001694                            
00001694                            loc_146A:
00001694 E54A                       		lsl.w	#2,d2
00001696 3A42                       		movea.w	d2,a5
00001698 7608                       		moveq	#8,d3
0000169A 7400                       		moveq	#0,d2
0000169C 7800                       		moveq	#0,d4
0000169E 6100 0000                  		bsr.w	NemDec4
000016A2 1A18                       		move.b	(a0)+,d5
000016A4 E145                       		asl.w	#8,d5
000016A6 1A18                       		move.b	(a0)+,d5
000016A8 3C3C 0010                  		move.w	#$10,d6
000016AC 6100                       		bsr.s	NemDec2
000016AE 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016B2 4E75                       		rts	
000016B4                            ; End of function NemDec
000016B4                            
000016B4                            
000016B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016B4                            
000016B4                            
000016B4                            NemDec2:				; XREF: NemDec
000016B4 3E06                       		move.w	d6,d7
000016B6 5147                       		subq.w	#8,d7
000016B8 3205                       		move.w	d5,d1
000016BA EE69                       		lsr.w	d7,d1
000016BC 0C01 00FC                  		cmpi.b	#-4,d1
000016C0 6400                       		bcc.s	loc_14D6
000016C2 0241 00FF                  		andi.w	#$FF,d1
000016C6 D241                       		add.w	d1,d1
000016C8 1031 1000                  		move.b	(a1,d1.w),d0
000016CC 4880                       		ext.w	d0
000016CE 9C40                       		sub.w	d0,d6
000016D0 0C46 0009                  		cmpi.w	#9,d6
000016D4 6400                       		bcc.s	loc_14B2
000016D6 5046                       		addq.w	#8,d6
000016D8 E145                       		asl.w	#8,d5
000016DA 1A18                       		move.b	(a0)+,d5
000016DC                            
000016DC                            loc_14B2:
000016DC 1231 1001                  		move.b	1(a1,d1.w),d1
000016E0 3001                       		move.w	d1,d0
000016E2 0241 000F                  		andi.w	#$F,d1
000016E6 0240 00F0                  		andi.w	#$F0,d0
000016EA                            
000016EA                            loc_14C0:				; XREF: NemDec3
000016EA E848                       		lsr.w	#4,d0
000016EC                            
000016EC                            loc_14C2:				; XREF: NemDec3
000016EC E98C                       		lsl.l	#4,d4
000016EE 8801                       		or.b	d1,d4
000016F0 5343                       		subq.w	#1,d3
000016F2 6600                       		bne.s	loc_14D0
000016F4 4ED3                       		jmp	(a3)
000016F6                            ; End of function NemDec2
000016F6                            
000016F6                            
000016F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F6                            
000016F6                            
000016F6                            NemDec3:				; XREF: loc_1502
000016F6 7800                       		moveq	#0,d4
000016F8 7608                       		moveq	#8,d3
000016FA                            
000016FA                            loc_14D0:				; XREF: NemDec2
000016FA 51C8 FFF0                  		dbf	d0,loc_14C2
000016FE 60B4                       		bra.s	NemDec2
00001700                            ; ===========================================================================
00001700                            
00001700                            loc_14D6:				; XREF: NemDec2
00001700 5D46                       		subq.w	#6,d6
00001702 0C46 0009                  		cmpi.w	#9,d6
00001706 6400                       		bcc.s	loc_14E4
00001708 5046                       		addq.w	#8,d6
0000170A E145                       		asl.w	#8,d5
0000170C 1A18                       		move.b	(a0)+,d5
0000170E                            
0000170E                            loc_14E4:				; XREF: NemDec3
0000170E 5F46                       		subq.w	#7,d6
00001710 3205                       		move.w	d5,d1
00001712 EC69                       		lsr.w	d6,d1
00001714 3001                       		move.w	d1,d0
00001716 0241 000F                  		andi.w	#$F,d1
0000171A 0240 0070                  		andi.w	#$70,d0
0000171E 0C46 0009                  		cmpi.w	#9,d6
00001722 64C6                       		bcc.s	loc_14C0
00001724 5046                       		addq.w	#8,d6
00001726 E145                       		asl.w	#8,d5
00001728 1A18                       		move.b	(a0)+,d5
0000172A 60BE                       		bra.s	loc_14C0
0000172C                            ; End of function NemDec3
0000172C                            
0000172C                            ; ===========================================================================
0000172C                            
0000172C                            loc_1502:				; XREF: NemDec
0000172C 2884                       		move.l	d4,(a4)
0000172E 534D                       		subq.w	#1,a5
00001730 380D                       		move.w	a5,d4
00001732 66C2                       		bne.s	NemDec3
00001734 4E75                       		rts	
00001736                            ; ===========================================================================
00001736 B982                       		eor.l	d4,d2
00001738 2882                       		move.l	d2,(a4)
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66B6                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742                            
00001742                            loc_1518:				; XREF: NemDec
00001742 28C4                       		move.l	d4,(a4)+
00001744 534D                       		subq.w	#1,a5
00001746 380D                       		move.w	a5,d4
00001748 66AC                       		bne.s	NemDec3
0000174A 4E75                       		rts	
0000174C                            ; ===========================================================================
0000174C B982                       		eor.l	d4,d2
0000174E 28C2                       		move.l	d2,(a4)+
00001750 534D                       		subq.w	#1,a5
00001752 380D                       		move.w	a5,d4
00001754 66A0                       		bne.s	NemDec3
00001756 4E75                       		rts	
00001758                            
00001758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001758                            
00001758                            
00001758                            NemDec4:				; XREF: NemDec
00001758 1018                       		move.b	(a0)+,d0
0000175A                            
0000175A                            loc_1530:
0000175A 0C00 00FF                  		cmpi.b	#-1,d0
0000175E 6600                       		bne.s	loc_1538
00001760 4E75                       		rts	
00001762                            ; ===========================================================================
00001762                            
00001762                            loc_1538:				; XREF: NemDec4
00001762 3E00                       		move.w	d0,d7
00001764                            
00001764                            loc_153A:
00001764 1018                       		move.b	(a0)+,d0
00001766 0C00 0080                  		cmpi.b	#$80,d0
0000176A 64EE                       		bcc.s	loc_1530
0000176C 1200                       		move.b	d0,d1
0000176E 0247 000F                  		andi.w	#$F,d7
00001772 0241 0070                  		andi.w	#$70,d1
00001776 8E41                       		or.w	d1,d7
00001778 0240 000F                  		andi.w	#$F,d0
0000177C 1200                       		move.b	d0,d1
0000177E E149                       		lsl.w	#8,d1
00001780 8E41                       		or.w	d1,d7
00001782 7208                       		moveq	#8,d1
00001784 9240                       		sub.w	d0,d1
00001786 6600                       		bne.s	loc_1568
00001788 1018                       		move.b	(a0)+,d0
0000178A D040                       		add.w	d0,d0
0000178C 3387 0000                  		move.w	d7,(a1,d0.w)
00001790 60D2                       		bra.s	loc_153A
00001792                            ; ===========================================================================
00001792                            
00001792                            loc_1568:				; XREF: NemDec4
00001792 1018                       		move.b	(a0)+,d0
00001794 E368                       		lsl.w	d1,d0
00001796 D040                       		add.w	d0,d0
00001798 7A01                       		moveq	#1,d5
0000179A E36D                       		lsl.w	d1,d5
0000179C 5345                       		subq.w	#1,d5
0000179E                            
0000179E                            loc_1574:
0000179E 3387 0000                  		move.w	d7,(a1,d0.w)
000017A2 5440                       		addq.w	#2,d0
000017A4 51CD FFF8                  		dbf	d5,loc_1574
000017A8 60BA                       		bra.s	loc_153A
000017AA                            ; End of function NemDec4
000017AA                            
000017AA                            ; ---------------------------------------------------------------------------
000017AA                            ; Subroutine to	load pattern load cues
000017AA                            ; ---------------------------------------------------------------------------
000017AA                            
000017AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017AA                            
000017AA                            
000017AA                            LoadPLC:
000017AA 48E7 0060                  		movem.l	a1-a2,-(sp)
000017AE 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017B4 D040                       		add.w	d0,d0
000017B6 3031 0000                  		move.w	(a1,d0.w),d0
000017BA 43F1 0000                  		lea	(a1,d0.w),a1
000017BE 45F8 F680                  		lea	($FFFFF680).w,a2
000017C2                            
000017C2                            loc_1598:
000017C2 4A92                       		tst.l	(a2)
000017C4 6700                       		beq.s	loc_15A0
000017C6 5C4A                       		addq.w	#6,a2
000017C8 60F8                       		bra.s	loc_1598
000017CA                            ; ===========================================================================
000017CA                            
000017CA                            loc_15A0:				; XREF: LoadPLC
000017CA 3019                       		move.w	(a1)+,d0
000017CC 6B00                       		bmi.s	loc_15AC
000017CE                            
000017CE                            loc_15A4:
000017CE 24D9                       		move.l	(a1)+,(a2)+
000017D0 34D9                       		move.w	(a1)+,(a2)+
000017D2 51C8 FFFA                  		dbf	d0,loc_15A4
000017D6                            
000017D6                            loc_15AC:
000017D6 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017DA 4E75                       		rts	
000017DC                            ; End of function LoadPLC
000017DC                            
000017DC                            
000017DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017DC                            
000017DC                            
000017DC                            LoadPLC2:
000017DC 48E7 0060                  		movem.l	a1-a2,-(sp)
000017E0 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E6 D040                       		add.w	d0,d0
000017E8 3031 0000                  		move.w	(a1,d0.w),d0
000017EC 43F1 0000                  		lea	(a1,d0.w),a1
000017F0 6100                       		bsr.s	ClearPLC
000017F2 45F8 F680                  		lea	($FFFFF680).w,a2
000017F6 3019                       		move.w	(a1)+,d0
000017F8 6B00                       		bmi.s	loc_15D8
000017FA                            
000017FA                            loc_15D0:
000017FA 24D9                       		move.l	(a1)+,(a2)+
000017FC 34D9                       		move.w	(a1)+,(a2)+
000017FE 51C8 FFFA                  		dbf	d0,loc_15D0
00001802                            
00001802                            loc_15D8:
00001802 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001806 4E75                       		rts	
00001808                            ; End of function LoadPLC2
00001808                            
00001808                            ; ---------------------------------------------------------------------------
00001808                            ; Subroutine to	clear the pattern load cues
00001808                            ; ---------------------------------------------------------------------------
00001808                            
00001808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001808                            
00001808                            
00001808                            ClearPLC:				; XREF: LoadPLC2
00001808 45F8 F680                  		lea	($FFFFF680).w,a2
0000180C 701F                       		moveq	#$1F,d0
0000180E                            
0000180E                            ClearPLC_Loop:
0000180E 429A                       		clr.l	(a2)+
00001810 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001814 4E75                       		rts	
00001816                            ; End of function ClearPLC
00001816                            
00001816                            ; ---------------------------------------------------------------------------
00001816                            ; Subroutine to	use graphics listed in a pattern load cue
00001816                            ; ---------------------------------------------------------------------------
00001816                            
00001816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001816                            
00001816                            
00001816                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001816 4AB8 F680                  		tst.l	($FFFFF680).w
0000181A 6700                       		beq.s	locret_1640
0000181C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001820 6600                       		bne.s	locret_1640
00001822 2078 F680                  		movea.l	($FFFFF680).w,a0
00001826 47F9 0000 172C             		lea	(loc_1502).l,a3
0000182C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001830 3418                       		move.w	(a0)+,d2
00001832 6A00                       		bpl.s	loc_160E
00001834 D6FC 000A                  		adda.w	#$A,a3
00001838                            
00001838                            loc_160E:
00001838 0242 7FFF                  		andi.w	#$7FFF,d2
0000183C 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001840 6100 FF16                  		bsr.w	NemDec4
00001844 1A18                       		move.b	(a0)+,d5
00001846 E145                       		asl.w	#8,d5
00001848 1A18                       		move.b	(a0)+,d5
0000184A 7C10                       		moveq	#$10,d6
0000184C 7000                       		moveq	#0,d0
0000184E 21C8 F680                  		move.l	a0,($FFFFF680).w
00001852 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001856 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
0000185A 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000185E 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001862 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001866 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
0000186A                            
0000186A                            locret_1640:
0000186A 4E75                       		rts	
0000186C                            ; End of function RunPLC_RAM
0000186C                            
0000186C                            
0000186C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000186C                            
0000186C                            
0000186C                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
0000186C 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001870 6700 0000                  		beq.w	locret_16DA
00001874 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
0000187A 7000                       		moveq	#0,d0
0000187C 3038 F684                  		move.w	($FFFFF684).w,d0
00001880 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001886 6000                       		bra.s	loc_1676
00001888                            ; End of function sub_1642
00001888                            
00001888                            
00001888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001888                            
00001888                            
00001888                            sub_165E:				; XREF: Demo_Time
00001888 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000188C 6700                       		beq.s	locret_16DA
0000188E 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001894 7000                       		moveq	#0,d0
00001896 3038 F684                  		move.w	($FFFFF684).w,d0
0000189A 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018A0                            
000018A0                            loc_1676:				; XREF: sub_1642
000018A0 49F9 00C0 0004             		lea	($C00004).l,a4
000018A6 E588                       		lsl.l	#2,d0
000018A8 E448                       		lsr.w	#2,d0
000018AA 0040 4000                  		ori.w	#$4000,d0
000018AE 4840                       		swap	d0
000018B0 2880                       		move.l	d0,(a4)
000018B2 594C                       		subq.w	#4,a4
000018B4 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B8 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018BC 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018C0 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018C4 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C8 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018CC 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018D0 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018D4                            
000018D4                            loc_16AA:				; XREF: sub_165E
000018D4 3A7C 0008                  		movea.w	#8,a5
000018D8 6100 FE1C                  		bsr.w	NemDec3
000018DC 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018E0 6700                       		beq.s	loc_16DC
000018E2 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E6 66EC                       		bne.s	loc_16AA
000018E8 21C8 F680                  		move.l	a0,($FFFFF680).w
000018EC 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018F0 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018F4 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F8 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018FC 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001900 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001904                            
00001904                            locret_16DA:				; XREF: sub_1642
00001904 4E75                       		rts	
00001906                            ; ===========================================================================
00001906                            
00001906                            loc_16DC:				; XREF: sub_165E
00001906 41F8 F680                  		lea	($FFFFF680).w,a0
0000190A 7015                       		moveq	#$15,d0
0000190C                            
0000190C                            loc_16E2:				; XREF: sub_165E
0000190C 20E8 0006                  		move.l	6(a0),(a0)+
00001910 51C8 FFFA                  		dbf	d0,loc_16E2
00001914 4E75                       		rts	
00001916                            ; End of function sub_165E
00001916                            
00001916                            ; ---------------------------------------------------------------------------
00001916                            ; Subroutine to	execute	the pattern load cue
00001916                            ; ---------------------------------------------------------------------------
00001916                            
00001916                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001916                            
00001916                            
00001916                            RunPLC_ROM:
00001916 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
0000191C D040                       		add.w	d0,d0
0000191E 3031 0000                  		move.w	(a1,d0.w),d0
00001922 43F1 0000                  		lea	(a1,d0.w),a1
00001926 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001928                            
00001928                            RunPLC_Loop:
00001928 2059                       		movea.l	(a1)+,a0	; get art pointer
0000192A 7000                       		moveq	#0,d0
0000192C 3019                       		move.w	(a1)+,d0	; get VRAM address
0000192E E588                       		lsl.l	#2,d0		; divide address by $20
00001930 E448                       		lsr.w	#2,d0
00001932 0040 4000                  		ori.w	#$4000,d0
00001936 4840                       		swap	d0
00001938 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000193E 6100 FD2A                  		bsr.w	NemDec		; decompress
00001942 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001946 4E75                       		rts	
00001948                            ; End of function RunPLC_ROM
00001948                            
00001948                            ; ---------------------------------------------------------------------------
00001948                            ; Enigma decompression algorithm
00001948                            ; ---------------------------------------------------------------------------
00001948                            
00001948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001948                            
00001948                            
00001948                            EniDec:
00001948 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
0000194C 3640                       		movea.w	d0,a3
0000194E 1018                       		move.b	(a0)+,d0
00001950 4880                       		ext.w	d0
00001952 3A40                       		movea.w	d0,a5
00001954 1818                       		move.b	(a0)+,d4
00001956 E70C                       		lsl.b	#3,d4
00001958 3458                       		movea.w	(a0)+,a2
0000195A D4CB                       		adda.w	a3,a2
0000195C 3858                       		movea.w	(a0)+,a4
0000195E D8CB                       		adda.w	a3,a4
00001960 1A18                       		move.b	(a0)+,d5
00001962 E145                       		asl.w	#8,d5
00001964 1A18                       		move.b	(a0)+,d5
00001966 7C10                       		moveq	#$10,d6
00001968                            
00001968                            loc_173E:				; XREF: loc_1768
00001968 7007                       		moveq	#7,d0
0000196A 3E06                       		move.w	d6,d7
0000196C 9E40                       		sub.w	d0,d7
0000196E 3205                       		move.w	d5,d1
00001970 EE69                       		lsr.w	d7,d1
00001972 0241 007F                  		andi.w	#$7F,d1
00001976 3401                       		move.w	d1,d2
00001978 0C41 0040                  		cmpi.w	#$40,d1
0000197C 6400                       		bcc.s	loc_1758
0000197E 7006                       		moveq	#6,d0
00001980 E24A                       		lsr.w	#1,d2
00001982                            
00001982                            loc_1758:
00001982 6100 0000                  		bsr.w	sub_188C
00001986 0242 000F                  		andi.w	#$F,d2
0000198A E849                       		lsr.w	#4,d1
0000198C D241                       		add.w	d1,d1
0000198E 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001992                            ; End of function EniDec
00001992                            
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1768:				; XREF: loc_17B4
00001992 32CA                       		move.w	a2,(a1)+
00001994 524A                       		addq.w	#1,a2
00001996 51CA FFFA                  		dbf	d2,loc_1768
0000199A 60CC                       		bra.s	loc_173E
0000199C                            ; ===========================================================================
0000199C                            
0000199C                            loc_1772:				; XREF: loc_17B4
0000199C 32CC                       		move.w	a4,(a1)+
0000199E 51CA FFFC                  		dbf	d2,loc_1772
000019A2 60C4                       		bra.s	loc_173E
000019A4                            ; ===========================================================================
000019A4                            
000019A4                            loc_177A:				; XREF: loc_17B4
000019A4 6100 0000                  		bsr.w	loc_17DC
000019A8                            
000019A8                            loc_177E:
000019A8 32C1                       		move.w	d1,(a1)+
000019AA 51CA FFFC                  		dbf	d2,loc_177E
000019AE 60B8                       		bra.s	loc_173E
000019B0                            ; ===========================================================================
000019B0                            
000019B0                            loc_1786:				; XREF: loc_17B4
000019B0 6100 0000                  		bsr.w	loc_17DC
000019B4                            
000019B4                            loc_178A:
000019B4 32C1                       		move.w	d1,(a1)+
000019B6 5241                       		addq.w	#1,d1
000019B8 51CA FFFA                  		dbf	d2,loc_178A
000019BC 60AA                       		bra.s	loc_173E
000019BE                            ; ===========================================================================
000019BE                            
000019BE                            loc_1794:				; XREF: loc_17B4
000019BE 6100 0000                  		bsr.w	loc_17DC
000019C2                            
000019C2                            loc_1798:
000019C2 32C1                       		move.w	d1,(a1)+
000019C4 5341                       		subq.w	#1,d1
000019C6 51CA FFFA                  		dbf	d2,loc_1798
000019CA 609C                       		bra.s	loc_173E
000019CC                            ; ===========================================================================
000019CC                            
000019CC                            loc_17A2:				; XREF: loc_17B4
000019CC 0C42 000F                  		cmpi.w	#$F,d2
000019D0 6700                       		beq.s	loc_17C4
000019D2                            
000019D2                            loc_17A8:
000019D2 6100 0000                  		bsr.w	loc_17DC
000019D6 32C1                       		move.w	d1,(a1)+
000019D8 51CA FFF8                  		dbf	d2,loc_17A8
000019DC 608A                       		bra.s	loc_173E
000019DE                            ; ===========================================================================
000019DE                            
000019DE                            loc_17B4:				; XREF: EniDec
000019DE 60B2                       		bra.s	loc_1768
000019E0                            ; ===========================================================================
000019E0 60B0                       		bra.s	loc_1768
000019E2                            ; ===========================================================================
000019E2 60B8                       		bra.s	loc_1772
000019E4                            ; ===========================================================================
000019E4 60B6                       		bra.s	loc_1772
000019E6                            ; ===========================================================================
000019E6 60BC                       		bra.s	loc_177A
000019E8                            ; ===========================================================================
000019E8 60C6                       		bra.s	loc_1786
000019EA                            ; ===========================================================================
000019EA 60D2                       		bra.s	loc_1794
000019EC                            ; ===========================================================================
000019EC 60DE                       		bra.s	loc_17A2
000019EE                            ; ===========================================================================
000019EE                            
000019EE                            loc_17C4:				; XREF: loc_17A2
000019EE 5348                       		subq.w	#1,a0
000019F0 0C46 0010                  		cmpi.w	#$10,d6
000019F4 6600                       		bne.s	loc_17CE
000019F6 5348                       		subq.w	#1,a0
000019F8                            
000019F8                            loc_17CE:
000019F8 3008                       		move.w	a0,d0
000019FA E248                       		lsr.w	#1,d0
000019FC 6400                       		bcc.s	loc_17D6
000019FE 5248                       		addq.w	#1,a0
00001A00                            
00001A00                            loc_17D6:
00001A00 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A04 4E75                       		rts	
00001A06                            ; ===========================================================================
00001A06                            
00001A06                            loc_17DC:				; XREF: loc_17A2
00001A06 360B                       		move.w	a3,d3
00001A08 1204                       		move.b	d4,d1
00001A0A D201                       		add.b	d1,d1
00001A0C 6400                       		bcc.s	loc_17EE
00001A0E 5346                       		subq.w	#1,d6
00001A10 0D05                       		btst	d6,d5
00001A12 6700                       		beq.s	loc_17EE
00001A14 0043 8000                  		ori.w	#-$8000,d3
00001A18                            
00001A18                            loc_17EE:
00001A18 D201                       		add.b	d1,d1
00001A1A 6400                       		bcc.s	loc_17FC
00001A1C 5346                       		subq.w	#1,d6
00001A1E 0D05                       		btst	d6,d5
00001A20 6700                       		beq.s	loc_17FC
00001A22 0643 4000                  		addi.w	#$4000,d3
00001A26                            
00001A26                            loc_17FC:
00001A26 D201                       		add.b	d1,d1
00001A28 6400                       		bcc.s	loc_180A
00001A2A 5346                       		subq.w	#1,d6
00001A2C 0D05                       		btst	d6,d5
00001A2E 6700                       		beq.s	loc_180A
00001A30 0643 2000                  		addi.w	#$2000,d3
00001A34                            
00001A34                            loc_180A:
00001A34 D201                       		add.b	d1,d1
00001A36 6400                       		bcc.s	loc_1818
00001A38 5346                       		subq.w	#1,d6
00001A3A 0D05                       		btst	d6,d5
00001A3C 6700                       		beq.s	loc_1818
00001A3E 0043 1000                  		ori.w	#$1000,d3
00001A42                            
00001A42                            loc_1818:
00001A42 D201                       		add.b	d1,d1
00001A44 6400                       		bcc.s	loc_1826
00001A46 5346                       		subq.w	#1,d6
00001A48 0D05                       		btst	d6,d5
00001A4A 6700                       		beq.s	loc_1826
00001A4C 0043 0800                  		ori.w	#$800,d3
00001A50                            
00001A50                            loc_1826:
00001A50 3205                       		move.w	d5,d1
00001A52 3E06                       		move.w	d6,d7
00001A54 9E4D                       		sub.w	a5,d7
00001A56 6400                       		bcc.s	loc_1856
00001A58 3C07                       		move.w	d7,d6
00001A5A 0646 0010                  		addi.w	#$10,d6
00001A5E 4447                       		neg.w	d7
00001A60 EF69                       		lsl.w	d7,d1
00001A62 1A10                       		move.b	(a0),d5
00001A64 EF3D                       		rol.b	d7,d5
00001A66 DE47                       		add.w	d7,d7
00001A68 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A6C D245                       		add.w	d5,d1
00001A6E                            
00001A6E                            loc_1844:				; XREF: loc_1868
00001A6E 300D                       		move.w	a5,d0
00001A70 D040                       		add.w	d0,d0
00001A72 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A76 D243                       		add.w	d3,d1
00001A78 1A18                       		move.b	(a0)+,d5
00001A7A E14D                       		lsl.w	#8,d5
00001A7C 1A18                       		move.b	(a0)+,d5
00001A7E 4E75                       		rts	
00001A80                            ; ===========================================================================
00001A80                            
00001A80                            loc_1856:				; XREF: loc_1826
00001A80 6700                       		beq.s	loc_1868
00001A82 EE69                       		lsr.w	d7,d1
00001A84 300D                       		move.w	a5,d0
00001A86 D040                       		add.w	d0,d0
00001A88 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A8C D243                       		add.w	d3,d1
00001A8E 300D                       		move.w	a5,d0
00001A90 6000                       		bra.s	sub_188C
00001A92                            ; ===========================================================================
00001A92                            
00001A92                            loc_1868:				; XREF: loc_1856
00001A92 7C10                       		moveq	#$10,d6
00001A94                            
00001A94                            loc_186A:
00001A94 60D8                       		bra.s	loc_1844
00001A96                            ; ===========================================================================
00001A96 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AAC 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB6                            
00001AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB6                            
00001AB6                            
00001AB6                            sub_188C:				; XREF: EniDec
00001AB6 9C40                       		sub.w	d0,d6
00001AB8 0C46 0009                  		cmpi.w	#9,d6
00001ABC 6400                       		bcc.s	locret_189A
00001ABE 5046                       		addq.w	#8,d6
00001AC0 E145                       		asl.w	#8,d5
00001AC2 1A18                       		move.b	(a0)+,d5
00001AC4                            
00001AC4                            locret_189A:
00001AC4 4E75                       		rts	
00001AC6                            ; End of function sub_188C
00001AC6                            
00001AC6                            ; ---------------------------------------------------------------------------
00001AC6                            ; Kosinski decompression algorithm
00001AC6                            ; ---------------------------------------------------------------------------
00001AC6                            
00001AC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC6                            
00001AC6                            
00001AC6                            KosDec:
00001AC6                            
00001AC6 =FFFFFFFE                  var_2		= -2
00001AC6 =FFFFFFFF                  var_1		= -1
00001AC6                            
00001AC6 558F                       		subq.l	#2,sp
00001AC8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001ACC 1E98                       		move.b	(a0)+,(sp)
00001ACE 3A17                       		move.w	(sp),d5
00001AD0 780F                       		moveq	#$F,d4
00001AD2                            
00001AD2                            loc_18A8:
00001AD2 E24D                       		lsr.w	#1,d5
00001AD4 40C6                       		move	sr,d6
00001AD6 51CC 0000                  		dbf	d4,loc_18BA
00001ADA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001ADE 1E98                       		move.b	(a0)+,(sp)
00001AE0 3A17                       		move.w	(sp),d5
00001AE2 780F                       		moveq	#$F,d4
00001AE4                            
00001AE4                            loc_18BA:
00001AE4 44C6                       		move	d6,ccr
00001AE6 6400                       		bcc.s	loc_18C2
00001AE8 12D8                       		move.b	(a0)+,(a1)+
00001AEA 60E6                       		bra.s	loc_18A8
00001AEC                            ; ===========================================================================
00001AEC                            
00001AEC                            loc_18C2:				; XREF: KosDec
00001AEC 7600                       		moveq	#0,d3
00001AEE E24D                       		lsr.w	#1,d5
00001AF0 40C6                       		move	sr,d6
00001AF2 51CC 0000                  		dbf	d4,loc_18D6
00001AF6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AFA 1E98                       		move.b	(a0)+,(sp)
00001AFC 3A17                       		move.w	(sp),d5
00001AFE 780F                       		moveq	#$F,d4
00001B00                            
00001B00                            loc_18D6:
00001B00 44C6                       		move	d6,ccr
00001B02 6500                       		bcs.s	loc_1906
00001B04 E24D                       		lsr.w	#1,d5
00001B06 51CC 0000                  		dbf	d4,loc_18EA
00001B0A 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B0E 1E98                       		move.b	(a0)+,(sp)
00001B10 3A17                       		move.w	(sp),d5
00001B12 780F                       		moveq	#$F,d4
00001B14                            
00001B14                            loc_18EA:
00001B14 E353                       		roxl.w	#1,d3
00001B16 E24D                       		lsr.w	#1,d5
00001B18 51CC 0000                  		dbf	d4,loc_18FC
00001B1C 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B20 1E98                       		move.b	(a0)+,(sp)
00001B22 3A17                       		move.w	(sp),d5
00001B24 780F                       		moveq	#$F,d4
00001B26                            
00001B26                            loc_18FC:
00001B26 E353                       		roxl.w	#1,d3
00001B28 5243                       		addq.w	#1,d3
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1418                       		move.b	(a0)+,d2
00001B2E 6000                       		bra.s	loc_191C
00001B30                            ; ===========================================================================
00001B30                            
00001B30                            loc_1906:				; XREF: loc_18C2
00001B30 1018                       		move.b	(a0)+,d0
00001B32 1218                       		move.b	(a0)+,d1
00001B34 74FF                       		moveq	#-1,d2
00001B36 1401                       		move.b	d1,d2
00001B38 EB4A                       		lsl.w	#5,d2
00001B3A 1400                       		move.b	d0,d2
00001B3C 0241 0007                  		andi.w	#7,d1
00001B40 6700                       		beq.s	loc_1928
00001B42 1601                       		move.b	d1,d3
00001B44 5243                       		addq.w	#1,d3
00001B46                            
00001B46                            loc_191C:
00001B46 1031 2000                  		move.b	(a1,d2.w),d0
00001B4A 12C0                       		move.b	d0,(a1)+
00001B4C 51CB FFF8                  		dbf	d3,loc_191C
00001B50 6080                       		bra.s	loc_18A8
00001B52                            ; ===========================================================================
00001B52                            
00001B52                            loc_1928:				; XREF: loc_1906
00001B52 1218                       		move.b	(a0)+,d1
00001B54 6700                       		beq.s	loc_1938
00001B56 0C01 0001                  		cmpi.b	#1,d1
00001B5A 6700 FF76                  		beq.w	loc_18A8
00001B5E 1601                       		move.b	d1,d3
00001B60 60E4                       		bra.s	loc_191C
00001B62                            ; ===========================================================================
00001B62                            
00001B62                            loc_1938:				; XREF: loc_1928
00001B62 548F                       		addq.l	#2,sp
00001B64 4E75                       		rts	
00001B66                            ; End of function KosDec
00001B66                            
00001B66                            ; ---------------------------------------------------------------------------
00001B66                            ; Pallet cycling routine loading subroutine
00001B66                            ; ---------------------------------------------------------------------------
00001B66                            
00001B66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B66                            
00001B66                            
00001B66                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B66 7400                       		moveq	#0,d2
00001B68 7000                       		moveq	#0,d0
00001B6A 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B6E D040                       		add.w	d0,d0		; multiply by 2
00001B70 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B74 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B78                            ; End of function PalCycle_Load
00001B78                            
00001B78                            ; ===========================================================================
00001B78                            ; ---------------------------------------------------------------------------
00001B78                            ; Pallet cycling routines
00001B78                            ; ---------------------------------------------------------------------------
00001B78 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_LZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_MZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B80 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B82 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B84 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B86                            
00001B86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B86                            
00001B86                            
00001B86                            PalCycle_Title:				; XREF: TitleScreen
00001B86 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B8C 6000                       		bra.s	loc_196A
00001B8E                            ; ===========================================================================
00001B8E                            
00001B8E                            PalCycle_GHZ:				; XREF: PalCycle
00001B8E 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B94                            
00001B94                            loc_196A:				; XREF: PalCycle_Title
00001B94 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B98 6A00                       		bpl.s	locret_1990
00001B9A 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BA0 3038 F632                  		move.w	($FFFFF632).w,d0
00001BA4 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA8 0240 0003                  		andi.w	#3,d0
00001BAC E748                       		lsl.w	#3,d0
00001BAE 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BB2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BBA                            
00001BBA                            locret_1990:
00001BBA 4E75                       		rts	
00001BBC                            ; End of function PalCycle_Title
00001BBC                            
00001BBC                            
00001BBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BBC                            
00001BBC                            
00001BBC                            PalCycle_LZ:				; XREF: PalCycle
00001BBC 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BC0 6A00                       		bpl.s	loc_19D8
00001BC2 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC8 3038 F632                  		move.w	($FFFFF632).w,d0
00001BCC 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BD0 0240 0003                  		andi.w	#3,d0
00001BD4 E748                       		lsl.w	#3,d0
00001BD6 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BDC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BE2 6600                       		bne.s	loc_19C0
00001BE4 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BEA                            
00001BEA                            loc_19C0:
00001BEA 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BEE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF6 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BFA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BFE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C02                            
00001C02                            loc_19D8:
00001C02 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C06 0240 0007                  		andi.w	#7,d0
00001C0A 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C0E 6700                       		beq.s	locret_1A3A
00001C10 7201                       		moveq	#1,d1
00001C12 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C16 6700                       		beq.s	loc_19F0
00001C18 4441                       		neg.w	d1
00001C1A                            
00001C1A                            loc_19F0:
00001C1A 3038 F650                  		move.w	($FFFFF650).w,d0
00001C1E 0240 0003                  		andi.w	#3,d0
00001C22 D041                       		add.w	d1,d0
00001C24 0C40 0003                  		cmpi.w	#3,d0
00001C28 6500                       		bcs.s	loc_1A0A
00001C2A 3200                       		move.w	d0,d1
00001C2C 7000                       		moveq	#0,d0
00001C2E 4A41                       		tst.w	d1
00001C30 6A00                       		bpl.s	loc_1A0A
00001C32 7002                       		moveq	#2,d0
00001C34                            
00001C34                            loc_1A0A:
00001C34 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C38 D040                       		add.w	d0,d0
00001C3A 3200                       		move.w	d0,d1
00001C3C D040                       		add.w	d0,d0
00001C3E D041                       		add.w	d1,d0
00001C40 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C46 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C4A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C4E 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C52 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C58 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C5C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C60 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C64                            
00001C64                            locret_1A3A:
00001C64 4E75                       		rts	
00001C66                            ; End of function PalCycle_LZ
00001C66                            
00001C66                            ; ===========================================================================
00001C66 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C6E                            ; ===========================================================================
00001C6E                            
00001C6E                            PalCycle_MZ:				; XREF: PalCycle
00001C6E 4E75                       		rts	
00001C70                            
00001C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C70                            
00001C70                            
00001C70                            PalCycle_SLZ:				; XREF: PalCycle
00001C70 4E75                       		rts	
00001C72                            ; End of function PalCycle_SLZ
00001C72                            
00001C72                            
00001C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C72                            
00001C72                            
00001C72                            PalCycle_SYZ:				; XREF: PalCycle
00001C72 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C76 6A00                       		bpl.s	locret_1AC6
00001C78 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C7E 3038 F632                  		move.w	($FFFFF632).w,d0
00001C82 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C86 0240 0003                  		andi.w	#3,d0
00001C8A E548                       		lsl.w	#2,d0
00001C8C 3200                       		move.w	d0,d1
00001C8E D040                       		add.w	d0,d0
00001C90 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C96 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C9A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C9E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CA2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CAC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CB0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB6                            
00001CB6                            locret_1AC6:
00001CB6 4E75                       		rts	
00001CB8                            ; End of function PalCycle_SYZ
00001CB8                            
00001CB8                            
00001CB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB8                            
00001CB8                            
00001CB8                            PalCycle_SBZ:				; XREF: PalCycle
00001CB8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CBE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CC2 6700                       		beq.s	loc_1ADA
00001CC4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CCA                            
00001CCA                            loc_1ADA:
00001CCA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CCE 321A                       		move.w	(a2)+,d1
00001CD0                            
00001CD0                            loc_1AE0:
00001CD0 5311                       		subq.b	#1,(a1)
00001CD2 6B00                       		bmi.s	loc_1AEA
00001CD4 5489                       		addq.l	#2,a1
00001CD6 5C8A                       		addq.l	#6,a2
00001CD8 6000                       		bra.s	loc_1B06
00001CDA                            ; ===========================================================================
00001CDA                            
00001CDA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CDA 12DA                       		move.b	(a2)+,(a1)+
00001CDC 1011                       		move.b	(a1),d0
00001CDE 5200                       		addq.b	#1,d0
00001CE0 B01A                       		cmp.b	(a2)+,d0
00001CE2 6500                       		bcs.s	loc_1AF6
00001CE4 7000                       		moveq	#0,d0
00001CE6                            
00001CE6                            loc_1AF6:
00001CE6 12C0                       		move.b	d0,(a1)+
00001CE8 0240 000F                  		andi.w	#$F,d0
00001CEC D040                       		add.w	d0,d0
00001CEE 305A                       		movea.w	(a2)+,a0
00001CF0 365A                       		movea.w	(a2)+,a3
00001CF2 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF6                            
00001CF6                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF6 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CFA 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CFE 6A00                       		bpl.s	locret_1B64
00001D00 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D06 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D0C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D10 6700                       		beq.s	loc_1B2E
00001D12 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D18 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D1E                            
00001D1E                            loc_1B2E:
00001D1E 72FF                       		moveq	#-1,d1
00001D20 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D24 6700                       		beq.s	loc_1B38
00001D26 4441                       		neg.w	d1
00001D28                            
00001D28                            loc_1B38:
00001D28 3038 F632                  		move.w	($FFFFF632).w,d0
00001D2C 0240 0003                  		andi.w	#3,d0
00001D30 D041                       		add.w	d1,d0
00001D32 0C40 0003                  		cmpi.w	#3,d0
00001D36 6500                       		bcs.s	loc_1B52
00001D38 3200                       		move.w	d0,d1
00001D3A 7000                       		moveq	#0,d0
00001D3C 4A41                       		tst.w	d1
00001D3E 6A00                       		bpl.s	loc_1B52
00001D40 7002                       		moveq	#2,d0
00001D42                            
00001D42                            loc_1B52:
00001D42 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D46 D040                       		add.w	d0,d0
00001D48 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D4C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D50 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D54                            
00001D54                            locret_1B64:
00001D54 4E75                       		rts	
00001D56                            ; End of function PalCycle_SBZ
00001D56                            
00001D56                            ; ===========================================================================
00001D56                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D76                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D96                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DDA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E42                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E66                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E86                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E96                            
00001E96                            Pal_SBZCycList:
00001E96                            	include "_inc\SBZ pallet script 1.asm"
00001E96                            ; ---------------------------------------------------------------------------
00001E96                            ; Scrap Brain Zone 1 pallet cycling script
00001E96                            ; ---------------------------------------------------------------------------
00001E96 0008                       	dc.w 8			; number of entries - 1
00001E98 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E9A 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E9C FB50                       	dc.w $FB50		; RAM address
00001E9E 0D08                       	dc.b $D, 8
00001EA0 0000                       	dc.w Pal_SBZCyc2
00001EA2 FB52                       	dc.w $FB52
00001EA4 0E08                       	dc.b $E, 8
00001EA6 0000                       	dc.w Pal_SBZCyc3
00001EA8 FB6E                       	dc.w $FB6E
00001EAA 0B08                       	dc.b $B, 8
00001EAC 0000                       	dc.w Pal_SBZCyc5
00001EAE FB70                       	dc.w $FB70
00001EB0 0708                       	dc.b 7,	8
00001EB2 0000                       	dc.w Pal_SBZCyc6
00001EB4 FB72                       	dc.w $FB72
00001EB6 1C10                       	dc.b $1C, $10
00001EB8 0000                       	dc.w Pal_SBZCyc7
00001EBA FB7E                       	dc.w $FB7E
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8
00001EC0 FB78                       	dc.w $FB78
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+2
00001EC6 FB7A                       	dc.w $FB7A
00001EC8 0303                       	dc.b 3,	3
00001ECA 0000                       	dc.w Pal_SBZCyc8+4
00001ECC FB7C                       	dc.w $FB7C
00001ECE                            	even
00001ECE                            	even
00001ECE                            
00001ECE                            Pal_SBZCycList2:
00001ECE                            	include "_inc\SBZ pallet script 2.asm"
00001ECE                            ; ---------------------------------------------------------------------------
00001ECE                            ; Scrap Brain Zone 2 pallet cycling script
00001ECE                            ; ---------------------------------------------------------------------------
00001ECE 0006                       	dc.w 6
00001ED0 0708                       	dc.b 7,	8
00001ED2 0000                       	dc.w Pal_SBZCyc1
00001ED4 FB50                       	dc.w $FB50
00001ED6 0D08                       	dc.b $D, 8
00001ED8 0000                       	dc.w Pal_SBZCyc2
00001EDA FB52                       	dc.w $FB52
00001EDC 0908                       	dc.b 9,	8
00001EDE 0000                       	dc.w Pal_SBZCyc9
00001EE0 FB70                       	dc.w $FB70
00001EE2 0708                       	dc.b 7,	8
00001EE4 0000                       	dc.w Pal_SBZCyc6
00001EE6 FB72                       	dc.w $FB72
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8
00001EEC FB78                       	dc.w $FB78
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+2
00001EF2 FB7A                       	dc.w $FB7A
00001EF4 0303                       	dc.b 3,	3
00001EF6 0000                       	dc.w Pal_SBZCyc8+4
00001EF8 FB7C                       	dc.w $FB7C
00001EFA                            	even
00001EFA                            	even
00001EFA                            
00001EFA                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F0A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F1A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F2A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F36                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F46                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F56                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F76                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F80                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F90                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F9C                            ; ---------------------------------------------------------------------------
00001F9C                            ; Subroutine to	fade out and fade in
00001F9C                            ; ---------------------------------------------------------------------------
00001F9C                            
00001F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F9C                            
00001F9C                            
00001F9C                            Pal_FadeTo:
00001F9C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FA2                            
00001FA2                            Pal_FadeTo2:
00001FA2 7000                       		moveq	#0,d0
00001FA4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FAC D0C0                       		adda.w	d0,a0
00001FAE 7200                       		moveq	#0,d1
00001FB0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FB4                            
00001FB4                            Pal_ToBlack:
00001FB4 30C1                       		move.w	d1,(a0)+
00001FB6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FBA                            
00001FBA 383C 0015                  		move.w	#$15,d4
00001FBE                            
00001FBE                            loc_1DCE:
00001FBE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FC4 6100 0000                  		bsr.w	DelayProgram
00001FC8 6100                       		bsr.s	Pal_FadeIn
00001FCA 6100 F84A                  		bsr.w	RunPLC_RAM
00001FCE 51CC FFEE                  		dbf	d4,loc_1DCE
00001FD2 4E75                       		rts	
00001FD4                            ; End of function Pal_FadeTo
00001FD4                            
00001FD4                            ; ---------------------------------------------------------------------------
00001FD4                            ; Pallet fade-in subroutine
00001FD4                            ; ---------------------------------------------------------------------------
00001FD4                            
00001FD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FD4                            
00001FD4                            
00001FD4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FD4 7000                       		moveq	#0,d0
00001FD6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FDA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FDE 1038 F626                  		move.b	($FFFFF626).w,d0
00001FE2 D0C0                       		adda.w	d0,a0
00001FE4 D2C0                       		adda.w	d0,a1
00001FE6 1038 F627                  		move.b	($FFFFF627).w,d0
00001FEA                            
00001FEA                            loc_1DFA:
00001FEA 6100                       		bsr.s	Pal_AddColor
00001FEC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FF0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF6 6600                       		bne.s	locret_1E24
00001FF8 7000                       		moveq	#0,d0
00001FFA 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FFE 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002002 1038 F626                  		move.b	($FFFFF626).w,d0
00002006 D0C0                       		adda.w	d0,a0
00002008 D2C0                       		adda.w	d0,a1
0000200A 1038 F627                  		move.b	($FFFFF627).w,d0
0000200E                            
0000200E                            loc_1E1E:
0000200E 6100                       		bsr.s	Pal_AddColor
00002010 51C8 FFFC                  		dbf	d0,loc_1E1E
00002014                            
00002014                            locret_1E24:
00002014 4E75                       		rts	
00002016                            ; End of function Pal_FadeIn
00002016                            
00002016                            
00002016                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002016                            
00002016                            
00002016                            Pal_AddColor:				; XREF: Pal_FadeIn
00002016 3419                       		move.w	(a1)+,d2
00002018 3610                       		move.w	(a0),d3
0000201A B642                       		cmp.w	d2,d3
0000201C 6700                       		beq.s	loc_1E4E
0000201E 3203                       		move.w	d3,d1
00002020 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002024 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002026 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002028 30C1                       		move.w	d1,(a0)+	; update pallet
0000202A 4E75                       		rts	
0000202C                            ; ===========================================================================
0000202C                            
0000202C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000202C 3203                       		move.w	d3,d1
0000202E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002032 B242                       		cmp.w	d2,d1
00002034 6200                       		bhi.s	Pal_AddRed
00002036 30C1                       		move.w	d1,(a0)+	; update pallet
00002038 4E75                       		rts	
0000203A                            ; ===========================================================================
0000203A                            
0000203A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000203A 5458                       		addq.w	#2,(a0)+	; increase red value
0000203C 4E75                       		rts	
0000203E                            ; ===========================================================================
0000203E                            
0000203E                            loc_1E4E:				; XREF: Pal_AddColor
0000203E 5448                       		addq.w	#2,a0
00002040 4E75                       		rts	
00002042                            ; End of function Pal_AddColor
00002042                            
00002042                            
00002042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002042                            
00002042                            
00002042                            Pal_FadeFrom:
00002042 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002048 383C 0015                  		move.w	#$15,d4
0000204C                            
0000204C                            loc_1E5C:
0000204C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002052 6100 0000                  		bsr.w	DelayProgram
00002056 6100                       		bsr.s	Pal_FadeOut
00002058 6100 F7BC                  		bsr.w	RunPLC_RAM
0000205C 51CC FFEE                  		dbf	d4,loc_1E5C
00002060 4E75                       		rts	
00002062                            ; End of function Pal_FadeFrom
00002062                            
00002062                            ; ---------------------------------------------------------------------------
00002062                            ; Pallet fade-out subroutine
00002062                            ; ---------------------------------------------------------------------------
00002062                            
00002062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002062                            
00002062                            
00002062                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002062 7000                       		moveq	#0,d0
00002064 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002068 1038 F626                  		move.b	($FFFFF626).w,d0
0000206C D0C0                       		adda.w	d0,a0
0000206E 1038 F627                  		move.b	($FFFFF627).w,d0
00002072                            
00002072                            loc_1E82:
00002072 6100                       		bsr.s	Pal_DecColor
00002074 51C8 FFFC                  		dbf	d0,loc_1E82
00002078                            
00002078 7000                       		moveq	#0,d0
0000207A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000207E 1038 F626                  		move.b	($FFFFF626).w,d0
00002082 D0C0                       		adda.w	d0,a0
00002084 1038 F627                  		move.b	($FFFFF627).w,d0
00002088                            
00002088                            loc_1E98:
00002088 6100                       		bsr.s	Pal_DecColor
0000208A 51C8 FFFC                  		dbf	d0,loc_1E98
0000208E 4E75                       		rts	
00002090                            ; End of function Pal_FadeOut
00002090                            
00002090                            
00002090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002090                            
00002090                            
00002090                            Pal_DecColor:				; XREF: Pal_FadeOut
00002090 3410                       		move.w	(a0),d2
00002092 6700                       		beq.s	loc_1ECC
00002094 3202                       		move.w	d2,d1
00002096 0241 000E                  		andi.w	#$E,d1
0000209A 6700                       		beq.s	Pal_DecGreen
0000209C 5558                       		subq.w	#2,(a0)+	; decrease red value
0000209E 4E75                       		rts	
000020A0                            ; ===========================================================================
000020A0                            
000020A0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020A0 3202                       		move.w	d2,d1
000020A2 0241 00E0                  		andi.w	#$E0,d1
000020A6 6700                       		beq.s	Pal_DecBlue
000020A8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020AC 4E75                       		rts	
000020AE                            ; ===========================================================================
000020AE                            
000020AE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020AE 3202                       		move.w	d2,d1
000020B0 0241 0E00                  		andi.w	#$E00,d1
000020B4 6700                       		beq.s	loc_1ECC
000020B6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020BA 4E75                       		rts	
000020BC                            ; ===========================================================================
000020BC                            
000020BC                            loc_1ECC:				; XREF: Pal_DecColor
000020BC 5448                       		addq.w	#2,a0
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_DecColor
000020C0                            
000020C0                            ; ---------------------------------------------------------------------------
000020C0                            ; Subroutine to	fill the pallet	with white (special stage)
000020C0                            ; ---------------------------------------------------------------------------
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_MakeWhite:				; XREF: SpecialStage
000020C0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C6 7000                       		moveq	#0,d0
000020C8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020CC 1038 F626                  		move.b	($FFFFF626).w,d0
000020D0 D0C0                       		adda.w	d0,a0
000020D2 323C 0EEE                  		move.w	#$EEE,d1
000020D6 1038 F627                  		move.b	($FFFFF627).w,d0
000020DA                            
000020DA                            PalWhite_Loop:
000020DA 30C1                       		move.w	d1,(a0)+
000020DC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020E0 383C 0015                  		move.w	#$15,d4
000020E4                            
000020E4                            loc_1EF4:
000020E4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020EA 6100 0000                  		bsr.w	DelayProgram
000020EE 6100                       		bsr.s	Pal_WhiteToBlack
000020F0 6100 F724                  		bsr.w	RunPLC_RAM
000020F4 51CC FFEE                  		dbf	d4,loc_1EF4
000020F8 4E75                       		rts	
000020FA                            ; End of function Pal_MakeWhite
000020FA                            
000020FA                            
000020FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020FA                            
000020FA                            
000020FA                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020FA 7000                       		moveq	#0,d0
000020FC 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002100 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002104 1038 F626                  		move.b	($FFFFF626).w,d0
00002108 D0C0                       		adda.w	d0,a0
0000210A D2C0                       		adda.w	d0,a1
0000210C 1038 F627                  		move.b	($FFFFF627).w,d0
00002110                            
00002110                            loc_1F20:
00002110 6100                       		bsr.s	Pal_DecColor2
00002112 51C8 FFFC                  		dbf	d0,loc_1F20
00002116                            
00002116 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000211C 6600                       		bne.s	locret_1F4A
0000211E 7000                       		moveq	#0,d0
00002120 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002124 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002128 1038 F626                  		move.b	($FFFFF626).w,d0
0000212C D0C0                       		adda.w	d0,a0
0000212E D2C0                       		adda.w	d0,a1
00002130 1038 F627                  		move.b	($FFFFF627).w,d0
00002134                            
00002134                            loc_1F44:
00002134 6100                       		bsr.s	Pal_DecColor2
00002136 51C8 FFFC                  		dbf	d0,loc_1F44
0000213A                            
0000213A                            locret_1F4A:
0000213A 4E75                       		rts	
0000213C                            ; End of function Pal_WhiteToBlack
0000213C                            
0000213C                            
0000213C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000213C                            
0000213C                            
0000213C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000213C 3419                       		move.w	(a1)+,d2
0000213E 3610                       		move.w	(a0),d3
00002140 B642                       		cmp.w	d2,d3
00002142 6700                       		beq.s	loc_1F78
00002144 3203                       		move.w	d3,d1
00002146 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000214A 6500                       		bcs.s	loc_1F64
0000214C B242                       		cmp.w	d2,d1
0000214E 6500                       		bcs.s	loc_1F64
00002150 30C1                       		move.w	d1,(a0)+
00002152 4E75                       		rts	
00002154                            ; ===========================================================================
00002154                            
00002154                            loc_1F64:				; XREF: Pal_DecColor2
00002154 3203                       		move.w	d3,d1
00002156 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000215A 6500                       		bcs.s	loc_1F74
0000215C B242                       		cmp.w	d2,d1
0000215E 6500                       		bcs.s	loc_1F74
00002160 30C1                       		move.w	d1,(a0)+
00002162 4E75                       		rts	
00002164                            ; ===========================================================================
00002164                            
00002164                            loc_1F74:				; XREF: loc_1F64
00002164 5558                       		subq.w	#2,(a0)+	; decrease red value
00002166 4E75                       		rts	
00002168                            ; ===========================================================================
00002168                            
00002168                            loc_1F78:				; XREF: Pal_DecColor2
00002168 5448                       		addq.w	#2,a0
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_DecColor2
0000216C                            
0000216C                            ; ---------------------------------------------------------------------------
0000216C                            ; Subroutine to	make a white flash when	you enter a special stage
0000216C                            ; ---------------------------------------------------------------------------
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_MakeFlash:				; XREF: SpecialStage
0000216C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002172 383C 0015                  		move.w	#$15,d4
00002176                            
00002176                            loc_1F86:
00002176 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000217C 6100 0000                  		bsr.w	DelayProgram
00002180 6100                       		bsr.s	Pal_ToWhite
00002182 6100 F692                  		bsr.w	RunPLC_RAM
00002186 51CC FFEE                  		dbf	d4,loc_1F86
0000218A 4E75                       		rts	
0000218C                            ; End of function Pal_MakeFlash
0000218C                            
0000218C                            
0000218C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000218C                            
0000218C                            
0000218C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
0000218C 7000                       		moveq	#0,d0
0000218E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002192 1038 F626                  		move.b	($FFFFF626).w,d0
00002196 D0C0                       		adda.w	d0,a0
00002198 1038 F627                  		move.b	($FFFFF627).w,d0
0000219C                            
0000219C                            loc_1FAC:
0000219C 6100                       		bsr.s	Pal_AddColor2
0000219E 51C8 FFFC                  		dbf	d0,loc_1FAC
000021A2 7000                       		moveq	#0,d0
000021A4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A8 1038 F626                  		move.b	($FFFFF626).w,d0
000021AC D0C0                       		adda.w	d0,a0
000021AE 1038 F627                  		move.b	($FFFFF627).w,d0
000021B2                            
000021B2                            loc_1FC2:
000021B2 6100                       		bsr.s	Pal_AddColor2
000021B4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B8 4E75                       		rts	
000021BA                            ; End of function Pal_ToWhite
000021BA                            
000021BA                            
000021BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BA                            
000021BA                            
000021BA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021BA 3410                       		move.w	(a0),d2
000021BC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021C0 6700                       		beq.s	loc_2006
000021C2 3202                       		move.w	d2,d1
000021C4 0241 000E                  		andi.w	#$E,d1
000021C8 0C41 000E                  		cmpi.w	#$E,d1
000021CC 6700                       		beq.s	loc_1FE2
000021CE 5458                       		addq.w	#2,(a0)+	; increase red value
000021D0 4E75                       		rts	
000021D2                            ; ===========================================================================
000021D2                            
000021D2                            loc_1FE2:				; XREF: Pal_AddColor2
000021D2 3202                       		move.w	d2,d1
000021D4 0241 00E0                  		andi.w	#$E0,d1
000021D8 0C41 00E0                  		cmpi.w	#$E0,d1
000021DC 6700                       		beq.s	loc_1FF4
000021DE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021E2 4E75                       		rts	
000021E4                            ; ===========================================================================
000021E4                            
000021E4                            loc_1FF4:				; XREF: loc_1FE2
000021E4 3202                       		move.w	d2,d1
000021E6 0241 0E00                  		andi.w	#$E00,d1
000021EA 0C41 0E00                  		cmpi.w	#$E00,d1
000021EE 6700                       		beq.s	loc_2006
000021F0 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021F4 4E75                       		rts	
000021F6                            ; ===========================================================================
000021F6                            
000021F6                            loc_2006:				; XREF: Pal_AddColor2
000021F6 5448                       		addq.w	#2,a0
000021F8 4E75                       		rts	
000021FA                            ; End of function Pal_AddColor2
000021FA                            
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            ; Pallet cycling routine - Sega	logo
000021FA                            ; ---------------------------------------------------------------------------
000021FA                            
000021FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021FA                            
000021FA                            
000021FA                            PalCycle_Sega:				; XREF: SegaScreen
000021FA 4A38 F635                  		tst.b	($FFFFF635).w
000021FE 6600                       		bne.s	loc_206A
00002200 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002204 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000220A 7205                       		moveq	#5,d1
0000220C 3038 F632                  		move.w	($FFFFF632).w,d0
00002210                            
00002210                            loc_2020:
00002210 6A00                       		bpl.s	loc_202A
00002212 5448                       		addq.w	#2,a0
00002214 5341                       		subq.w	#1,d1
00002216 5440                       		addq.w	#2,d0
00002218 60F6                       		bra.s	loc_2020
0000221A                            ; ===========================================================================
0000221A                            
0000221A                            loc_202A:				; XREF: PalCycle_Sega
0000221A 3400                       		move.w	d0,d2
0000221C 0242 001E                  		andi.w	#$1E,d2
00002220 6600                       		bne.s	loc_2034
00002222 5440                       		addq.w	#2,d0
00002224                            
00002224                            loc_2034:
00002224 0C40 0060                  		cmpi.w	#$60,d0
00002228 6400                       		bcc.s	loc_203E
0000222A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000222E                            
0000222E                            loc_203E:
0000222E 5440                       		addq.w	#2,d0
00002230 51C9 FFE8                  		dbf	d1,loc_202A
00002234 3038 F632                  		move.w	($FFFFF632).w,d0
00002238 5440                       		addq.w	#2,d0
0000223A 3400                       		move.w	d0,d2
0000223C 0242 001E                  		andi.w	#$1E,d2
00002240 6600                       		bne.s	loc_2054
00002242 5440                       		addq.w	#2,d0
00002244                            
00002244                            loc_2054:
00002244 0C40 0064                  		cmpi.w	#$64,d0
00002248 6D00                       		blt.s	loc_2062
0000224A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002250 70F4                       		moveq	#-$C,d0
00002252                            
00002252                            loc_2062:
00002252 31C0 F632                  		move.w	d0,($FFFFF632).w
00002256 7001                       		moveq	#1,d0
00002258 4E75                       		rts	
0000225A                            ; ===========================================================================
0000225A                            
0000225A                            loc_206A:				; XREF: loc_202A
0000225A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000225E 6A00                       		bpl.s	loc_20BC
00002260 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002266 3038 F632                  		move.w	($FFFFF632).w,d0
0000226A 0640 000C                  		addi.w	#$C,d0
0000226E 0C40 0030                  		cmpi.w	#$30,d0
00002272 6500                       		bcs.s	loc_2088
00002274 7000                       		moveq	#0,d0
00002276 4E75                       		rts	
00002278                            ; ===========================================================================
00002278                            
00002278                            loc_2088:				; XREF: loc_206A
00002278 31C0 F632                  		move.w	d0,($FFFFF632).w
0000227C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002282 41F0 0000                  		lea	(a0,d0.w),a0
00002286 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000228A 22D8                       		move.l	(a0)+,(a1)+
0000228C 22D8                       		move.l	(a0)+,(a1)+
0000228E 3298                       		move.w	(a0)+,(a1)
00002290 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002294 7000                       		moveq	#0,d0
00002296 722C                       		moveq	#$2C,d1
00002298                            
00002298                            loc_20A8:
00002298 3400                       		move.w	d0,d2
0000229A 0242 001E                  		andi.w	#$1E,d2
0000229E 6600                       		bne.s	loc_20B2
000022A0 5440                       		addq.w	#2,d0
000022A2                            
000022A2                            loc_20B2:
000022A2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A6 5440                       		addq.w	#2,d0
000022A8 51C9 FFEE                  		dbf	d1,loc_20A8
000022AC                            
000022AC                            loc_20BC:
000022AC 7001                       		moveq	#1,d0
000022AE 4E75                       		rts	
000022B0                            ; End of function PalCycle_Sega
000022B0                            
000022B0                            ; ===========================================================================
000022B0                            
000022B0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022BC                            Pal_Sega2:	incbin	pallet\sega2.bin
000022EC                            
000022EC                            ; ---------------------------------------------------------------------------
000022EC                            ; Subroutines to load pallets
000022EC                            ; ---------------------------------------------------------------------------
000022EC                            
000022EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022EC                            
000022EC                            
000022EC                            PalLoad1:
000022EC 43F9 0000 0000             		lea	(PalPointers).l,a1
000022F2 E748                       		lsl.w	#3,d0
000022F4 D2C0                       		adda.w	d0,a1
000022F6 2459                       		movea.l	(a1)+,a2
000022F8 3659                       		movea.w	(a1)+,a3
000022FA D6FC 0080                  		adda.w	#$80,a3
000022FE 3E19                       		move.w	(a1)+,d7
00002300                            
00002300                            loc_2110:
00002300 26DA                       		move.l	(a2)+,(a3)+
00002302 51CF FFFC                  		dbf	d7,loc_2110
00002306 4E75                       		rts	
00002308                            ; End of function PalLoad1
00002308                            
00002308                            
00002308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002308                            
00002308                            
00002308                            PalLoad2:
00002308 43F9 0000 0000             		lea	(PalPointers).l,a1
0000230E E748                       		lsl.w	#3,d0
00002310 D2C0                       		adda.w	d0,a1
00002312 2459                       		movea.l	(a1)+,a2
00002314 3659                       		movea.w	(a1)+,a3
00002316 3E19                       		move.w	(a1)+,d7
00002318                            
00002318                            loc_2128:
00002318 26DA                       		move.l	(a2)+,(a3)+
0000231A 51CF FFFC                  		dbf	d7,loc_2128
0000231E 4E75                       		rts	
00002320                            ; End of function PalLoad2
00002320                            
00002320                            ; ---------------------------------------------------------------------------
00002320                            ; Underwater pallet loading subroutine
00002320                            ; ---------------------------------------------------------------------------
00002320                            
00002320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002320                            
00002320                            
00002320                            PalLoad3_Water:
00002320 43F9 0000 0000             		lea	(PalPointers).l,a1
00002326 E748                       		lsl.w	#3,d0
00002328 D2C0                       		adda.w	d0,a1
0000232A 2459                       		movea.l	(a1)+,a2
0000232C 3659                       		movea.w	(a1)+,a3
0000232E 96FC 0080                  		suba.w	#$80,a3
00002332 3E19                       		move.w	(a1)+,d7
00002334                            
00002334                            loc_2144:
00002334 26DA                       		move.l	(a2)+,(a3)+
00002336 51CF FFFC                  		dbf	d7,loc_2144
0000233A 4E75                       		rts	
0000233C                            ; End of function PalLoad3_Water
0000233C                            
0000233C                            
0000233C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000233C                            
0000233C                            
0000233C                            PalLoad4_Water:
0000233C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002342 E748                       		lsl.w	#3,d0
00002344 D2C0                       		adda.w	d0,a1
00002346 2459                       		movea.l	(a1)+,a2
00002348 3659                       		movea.w	(a1)+,a3
0000234A 96FC 0100                  		suba.w	#$100,a3
0000234E 3E19                       		move.w	(a1)+,d7
00002350                            
00002350                            loc_2160:
00002350 26DA                       		move.l	(a2)+,(a3)+
00002352 51CF FFFC                  		dbf	d7,loc_2160
00002356 4E75                       		rts	
00002358                            ; End of function PalLoad4_Water
00002358                            
00002358                            ; ===========================================================================
00002358                            ; ---------------------------------------------------------------------------
00002358                            ; Pallet pointers
00002358                            ; ---------------------------------------------------------------------------
00002358                            PalPointers:
00002358                            	include "_inc\Pallet pointers.asm"
00002358                            ; ---------------------------------------------------------------------------
00002358                            ; Pallet pointers
00002358                            ; ---------------------------------------------------------------------------
00002358 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000235C FB00                       	dc.w $FB00		; RAM address
0000235E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002360 0000 0000                  	dc.l Pal_Title
00002364 FB00                       	dc.w $FB00
00002366 001F                       	dc.w $1F
00002368 0000 0000                  	dc.l Pal_LevelSel
0000236C FB00                       	dc.w $FB00
0000236E 001F                       	dc.w $1F
00002370 0000 0000                  	dc.l Pal_Sonic
00002374 FB00                       	dc.w $FB00
00002376 0007                       	dc.w 7
00002378 0000 0000                  	dc.l Pal_GHZ
0000237C FB20                       	dc.w $FB20
0000237E 0017                       	dc.w $17
00002380 0000 0000                  	dc.l Pal_LZ
00002384 FB20                       	dc.w $FB20
00002386 0017                       	dc.w $17
00002388 0000 0000                  	dc.l Pal_MZ
0000238C FB20                       	dc.w $FB20
0000238E 0017                       	dc.w $17
00002390 0000 0000                  	dc.l Pal_SLZ
00002394 FB20                       	dc.w $FB20
00002396 0017                       	dc.w $17
00002398 0000 0000                  	dc.l Pal_SYZ
0000239C FB20                       	dc.w $FB20
0000239E 0017                       	dc.w $17
000023A0 0000 0000                  	dc.l Pal_SBZ1
000023A4 FB20                       	dc.w $FB20
000023A6 0017                       	dc.w $17
000023A8 0000 0000                  	dc.l Pal_Special
000023AC FB00                       	dc.w $FB00
000023AE 001F                       	dc.w $1F
000023B0 0000 0000                  	dc.l Pal_LZWater
000023B4 FB00                       	dc.w $FB00
000023B6 001F                       	dc.w $1F
000023B8 0000 0000                  	dc.l Pal_SBZ3
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SBZ3Water
000023C4 FB00                       	dc.w $FB00
000023C6 001F                       	dc.w $1F
000023C8 0000 0000                  	dc.l Pal_SBZ2
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_LZSonWater
000023D4 FB00                       	dc.w $FB00
000023D6 0007                       	dc.w 7
000023D8 0000 0000                  	dc.l Pal_SBZ3SonWat
000023DC FB00                       	dc.w $FB00
000023DE 0007                       	dc.w 7
000023E0 0000 0000                  	dc.l Pal_SpeResult
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SpeContinue
000023EC FB00                       	dc.w $FB00
000023EE 000F                       	dc.w $F
000023F0 0000 0000                  	dc.l Pal_Ending
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_Idiot
000023FC FB20                       	dc.w $FB20
000023FE 0007                       	dc.w 7
00002400 0000 0000                  	dc.l Pal_Gronic
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_LZGroWater
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SBZ3GroWat
00002414 FB00                       	dc.w $FB00
00002416 0007                       	dc.w 7
00002416 0007                       	dc.w 7
00002418                            
00002418                            ; ---------------------------------------------------------------------------
00002418                            ; Pallet data
00002418                            ; ---------------------------------------------------------------------------
00002418                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002498                            Pal_Title:	incbin	pallet\title.bin
00002518                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002598                            Pal_Sonic:	incbin	pallet\sonic.bin
000025B8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002618                            Pal_LZ:		incbin	pallet\lz.bin
00002678                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000026F8                            Pal_MZ:		incbin	pallet\mz.bin
00002758                            Pal_SLZ:	incbin	pallet\slz.bin
000027B8                            Pal_SYZ:	incbin	pallet\syz.bin
00002818                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002878                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028D8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002958                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029B8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A38                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A58                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A78                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002AF8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B38                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BB8                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BD8                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002BF8                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C18                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C38                            
00002C38                            ; ---------------------------------------------------------------------------
00002C38                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C38                            ; ---------------------------------------------------------------------------
00002C38                            
00002C38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C38                            
00002C38                            
00002C38                            DelayProgram:				; XREF: PauseGame
00002C38 46FC 2300                  		move	#$2300,sr
00002C3C                            
00002C3C                            loc_29AC:
00002C3C 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C40 66FA                       		bne.s	loc_29AC
00002C42 4E75                       		rts	
00002C44                            ; End of function DelayProgram
00002C44                            
00002C44                            ; ---------------------------------------------------------------------------
00002C44                            ; Subroutine to	generate a pseudo-random number	in d0
00002C44                            ; ---------------------------------------------------------------------------
00002C44                            
00002C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C44                            
00002C44                            
00002C44                            RandomNumber:
00002C44 2238 F636                  		move.l	($FFFFF636).w,d1
00002C48 6600                       		bne.s	loc_29C0
00002C4A 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C50                            
00002C50                            loc_29C0:
00002C50 2001                       		move.l	d1,d0
00002C52 E581                       		asl.l	#2,d1
00002C54 D280                       		add.l	d0,d1
00002C56 E781                       		asl.l	#3,d1
00002C58 D280                       		add.l	d0,d1
00002C5A 3001                       		move.w	d1,d0
00002C5C 4841                       		swap	d1
00002C5E D041                       		add.w	d1,d0
00002C60 3200                       		move.w	d0,d1
00002C62 4841                       		swap	d1
00002C64 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C68 4E75                       		rts	
00002C6A                            ; End of function RandomNumber
00002C6A                            
00002C6A                            
00002C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C6A                            
00002C6A                            
00002C6A                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C6A 0240 00FF                  		andi.w	#$FF,d0
00002C6E D040                       		add.w	d0,d0
00002C70 0640 0080                  		addi.w	#$80,d0
00002C74 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C78 0440 0080                  		subi.w	#$80,d0
00002C7C 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C80 4E75                       		rts	
00002C82                            ; End of function CalcSine
00002C82                            
00002C82                            ; ===========================================================================
00002C82                            
00002C82                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F02                            
00002F02                            ; ===========================================================================
00002F02 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F06 3200                       		move.w	d0,d1
00002F08 4841                       		swap	d1
00002F0A 7000                       		moveq	#0,d0
00002F0C 3200                       		move.w	d0,d1
00002F0E 7407                       		moveq	#7,d2
00002F10                            
00002F10                            loc_2C80:
00002F10 E599                       		rol.l	#2,d1
00002F12 D040                       		add.w	d0,d0
00002F14 5240                       		addq.w	#1,d0
00002F16 9240                       		sub.w	d0,d1
00002F18 6400                       		bcc.s	loc_2C9A
00002F1A D240                       		add.w	d0,d1
00002F1C 5340                       		subq.w	#1,d0
00002F1E 51CA FFF0                  		dbf	d2,loc_2C80
00002F22 E248                       		lsr.w	#1,d0
00002F24 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F28 4E75                       		rts	
00002F2A                            ; ===========================================================================
00002F2A                            
00002F2A                            loc_2C9A:
00002F2A 5240                       		addq.w	#1,d0
00002F2C 51CA FFE2                  		dbf	d2,loc_2C80
00002F30 E248                       		lsr.w	#1,d0
00002F32 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F36 4E75                       		rts	
00002F38                            
00002F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F38                            
00002F38                            
00002F38                            CalcAngle:
00002F38 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F3C 7600                       		moveq	#0,d3
00002F3E 7800                       		moveq	#0,d4
00002F40 3601                       		move.w	d1,d3
00002F42 3802                       		move.w	d2,d4
00002F44 8843                       		or.w	d3,d4
00002F46 6700                       		beq.s	loc_2D04
00002F48 3802                       		move.w	d2,d4
00002F4A 4A43                       		tst.w	d3
00002F4C 6A00 0000                  		bpl.w	loc_2CC2
00002F50 4443                       		neg.w	d3
00002F52                            
00002F52                            loc_2CC2:
00002F52 4A44                       		tst.w	d4
00002F54 6A00 0000                  		bpl.w	loc_2CCA
00002F58 4444                       		neg.w	d4
00002F5A                            
00002F5A                            loc_2CCA:
00002F5A B843                       		cmp.w	d3,d4
00002F5C 6400 0000                  		bcc.w	loc_2CDC
00002F60 E18C                       		lsl.l	#8,d4
00002F62 88C3                       		divu.w	d3,d4
00002F64 7000                       		moveq	#0,d0
00002F66 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F6A 6000                       		bra.s	loc_2CE6
00002F6C                            ; ===========================================================================
00002F6C                            
00002F6C                            loc_2CDC:				; XREF: CalcAngle
00002F6C E18B                       		lsl.l	#8,d3
00002F6E 86C4                       		divu.w	d4,d3
00002F70 7040                       		moveq	#$40,d0
00002F72 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F76                            
00002F76                            loc_2CE6:
00002F76 4A41                       		tst.w	d1
00002F78 6A00 0000                  		bpl.w	loc_2CF2
00002F7C 4440                       		neg.w	d0
00002F7E 0640 0080                  		addi.w	#$80,d0
00002F82                            
00002F82                            loc_2CF2:
00002F82 4A42                       		tst.w	d2
00002F84 6A00 0000                  		bpl.w	loc_2CFE
00002F88 4440                       		neg.w	d0
00002F8A 0640 0100                  		addi.w	#$100,d0
00002F8E                            
00002F8E                            loc_2CFE:
00002F8E 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F92 4E75                       		rts	
00002F94                            ; ===========================================================================
00002F94                            
00002F94                            loc_2D04:				; XREF: CalcAngle
00002F94 303C 0040                  		move.w	#$40,d0
00002F98 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F9C 4E75                       		rts	
00002F9E                            ; End of function CalcAngle
00002F9E                            
00002F9E                            ; ===========================================================================
00002F9E                            
00002F9E                            Angle_Data:	incbin	misc\angles.bin
000030A0                            
000030A0                            ; ===========================================================================
000030A0                            
000030A0                            ; ---------------------------------------------------------------------------
000030A0                            ; Sega screen
000030A0                            ; ---------------------------------------------------------------------------
000030A0                            
000030A0                            SegaScreen:				; XREF: GameModeArray
000030A0 103C 00E4                  		move.b	#$E4,d0
000030A4 6100 E520                  		bsr.w	PlaySound_Special ; stop music
000030A8 6100 E75E                  		bsr.w	ClearPLC
000030AC 6100 EF94                  		bsr.w	Pal_FadeFrom
000030B0 4DF9 00C0 0004             		lea	($C00004).l,a6
000030B6 3CBC 8004                  		move.w	#$8004,(a6)
000030BA 3CBC 8230                  		move.w	#$8230,(a6)
000030BE 3CBC 8407                  		move.w	#$8407,(a6)
000030C2 3CBC 8700                  		move.w	#$8700,(a6)
000030C6 3CBC 8B00                  		move.w	#$8B00,(a6)
000030CA 4238 F64E                  		clr.b	($FFFFF64E).w
000030CE 46FC 2700                  		move	#$2700,sr
000030D2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000030D6 0200 00BF                  		andi.b	#$BF,d0
000030DA 33C0 00C0 0004             		move.w	d0,($C00004).l
000030E0 6100 E40C                  		bsr.w	ClearScreen
000030E4 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030EE 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030F4 6100 E574                  		bsr.w	NemDec
000030F8 43F9 00FF 0000             		lea	($FF0000).l,a1
000030FE 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003104 303C 0000                  		move.w	#0,d0
00003108 6100 E83E                  		bsr.w	EniDec
0000310C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003112 203C 6510 0003             		move.l	#$65100003,d0
00003118 7217                       		moveq	#$17,d1
0000311A 7407                       		moveq	#7,d2
0000311C 6100 E52C                  		bsr.w	ShowVDPGraphics
00003120 43F9 00FF 0180             		lea	($FF0180).l,a1
00003126 203C 4000 0003             		move.l	#$40000003,d0
0000312C 7227                       		moveq	#$27,d1
0000312E 741B                       		moveq	#$1B,d2
00003130 6100 E518                  		bsr.w	ShowVDPGraphics
00003134 7000                       		moveq	#0,d0
00003136 6100 F1D0                  		bsr.w	PalLoad2	; load Sega logo pallet
0000313A 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00003140 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00003146 31FC 0000 F662             		move.w	#0,($FFFFF662).w
0000314C 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003152 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003156 0000 0040                  		ori.b	#$40,d0
0000315A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003160                            
00003160                            Sega_WaitPallet:
00003160 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003166 6100 FAD0                  		bsr.w	DelayProgram
0000316A 6100 F08E                  		bsr.w	PalCycle_Sega
0000316E 66F0                       		bne.s	Sega_WaitPallet
00003170                            
00003170 103C 00E1                  		move.b	#$E1,d0
00003174 6100 E450                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003178 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000317E 6100 FAB8                  		bsr.w	DelayProgram
00003182 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003188                            
00003188                            Sega_WaitEnd:
00003188 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000318E 6100 FAA8                  		bsr.w	DelayProgram
00003192 4A78 F614                  		tst.w	($FFFFF614).w
00003196 6700                       		beq.s	Sega_GotoTitle
00003198 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000319E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000031A0                            
000031A0                            Sega_GotoTitle:
000031A0 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
000031A6 4E75                       		rts	
000031A8                            ; ===========================================================================
000031A8                            
000031A8                            ; ---------------------------------------------------------------------------
000031A8                            ; Title	screen
000031A8                            ; ---------------------------------------------------------------------------
000031A8                            
000031A8                            TitleScreen:				; XREF: GameModeArray
000031A8 103C 00E4                  		move.b	#$E4,d0
000031AC 6100 E418                  		bsr.w	PlaySound_Special ; stop music
000031B0 6100 E656                  		bsr.w	ClearPLC
000031B4 6100 EE8C                  		bsr.w	Pal_FadeFrom
000031B8 46FC 2700                  		move	#$2700,sr
000031BC 6100 E3BE                  		bsr.w	SoundDriverLoad
000031C0 4DF9 00C0 0004             		lea	($C00004).l,a6
000031C6 3CBC 8004                  		move.w	#$8004,(a6)
000031CA 3CBC 8230                  		move.w	#$8230,(a6)
000031CE 3CBC 8407                  		move.w	#$8407,(a6)
000031D2 3CBC 9001                  		move.w	#$9001,(a6)
000031D6 3CBC 9200                  		move.w	#$9200,(a6)
000031DA 3CBC 8B03                  		move.w	#$8B03,(a6)
000031DE 3CBC 8720                  		move.w	#$8720,(a6)
000031E2 4238 F64E                  		clr.b	($FFFFF64E).w
000031E6 6100 E306                  		bsr.w	ClearScreen
000031EA 43F8 D000                  		lea	($FFFFD000).w,a1
000031EE 7000                       		moveq	#0,d0
000031F0 323C 07FF                  		move.w	#$7FF,d1
000031F4                            
000031F4                            Title_ClrObjRam:
000031F4 22C0                       		move.l	d0,(a1)+
000031F6 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031FA                            
000031FA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003204 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
0000320A 6100 E45E                  		bsr.w	NemDec
0000320E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003218 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
0000321E 6100 E44A                  		bsr.w	NemDec
00003222 43F9 00FF 0000             		lea	($FF0000).l,a1
00003228 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
0000322E 303C 0000                  		move.w	#0,d0
00003232 6100 E714                  		bsr.w	EniDec
00003236 43F9 00FF 0000             		lea	($FF0000).l,a1
0000323C 203C 4000 0003             		move.l	#$40000003,d0
00003242 7227                       		moveq	#$27,d1
00003244 741B                       		moveq	#$1B,d2
00003246 6100 E402                  		bsr.w	ShowVDPGraphics
0000324A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000324E 7000                       		moveq	#0,d0
00003250 323C 001F                  		move.w	#$1F,d1
00003254                            
00003254                            Title_ClrPallet:
00003254 22C0                       		move.l	d0,(a1)+
00003256 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
0000325A                            
0000325A 7003                       		moveq	#3,d0		; load Sonic's pallet
0000325C 6100 F08E                  		bsr.w	PalLoad1
00003260 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003266 4EB9 0000 0000             		jsr	ObjectsLoad
0000326C 4EB9 0000 0000             		jsr	BuildSprites
00003272 6100 ED28                  		bsr.w	Pal_FadeTo
00003276 46FC 2700                  		move	#$2700,sr
0000327A 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003284 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
0000328A 6100 E3DE                  		bsr.w	NemDec
0000328E 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003298 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000329E 6100 E3CA                  		bsr.w	NemDec
000032A2 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000032AC 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000032B2 6100 E3B6                  		bsr.w	NemDec
000032B6 4DF9 00C0 0000             		lea	($C00000).l,a6
000032BC 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000032C4 4BF9 0000 05FA             		lea	(Art_Text).l,a5
000032CA 323C 0BBB                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000032CE                            
000032CE                            Title_LoadText:
000032CE 2C9D                       		move.l	(a5)+,(a6)
000032D0 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000032D4                            
000032D4 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000032DA 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000032E0 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000032E6 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032EC 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032F2 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032F8 6100 0000                  		bsr.w	LevelSizeLoad
000032FC 6100 0000                  		bsr.w	DeformBgLayer
00003300 43F8 B000                  		lea	($FFFFB000).w,a1
00003304 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000330A 303C 0000                  		move.w	#0,d0
0000330E 6100 E638                  		bsr.w	EniDec
00003312 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003318 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331E 6100 E7A6                  		bsr.w	KosDec
00003322 6100 0000                  		bsr.w	LevelLayoutLoad
00003326 6100 ED1A                  		bsr.w	Pal_FadeFrom
0000332A 46FC 2700                  		move	#$2700,sr
0000332E 6100 E1BE                  		bsr.w	ClearScreen
00003332 4BF9 00C0 0004             		lea	($C00004).l,a5
00003338 4DF9 00C0 0000             		lea	($C00000).l,a6
0000333E 47F8 F708                  		lea	($FFFFF708).w,a3
00003342 49F8 A440                  		lea	($FFFFA440).w,a4
00003346 343C 6000                  		move.w	#$6000,d2
0000334A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000334E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003354 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000335A 303C 0000                  		move.w	#0,d0
0000335E 6100 E5E8                  		bsr.w	EniDec
00003362 43F9 00FF 0000             		lea	($FF0000).l,a1
00003368 203C 4206 0003             		move.l	#$42060003,d0
0000336E 7221                       		moveq	#$21,d1
00003370 7415                       		moveq	#$15,d2
00003372 6100 E2D6                  		bsr.w	ShowVDPGraphics
00003376 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003380 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003386 6100 E2E2                  		bsr.w	NemDec
0000338A 7001                       		moveq	#1,d0		; load title screen pallet
0000338C 6100 EF5E                  		bsr.w	PalLoad1
00003390 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003394 6100 E230                  		bsr.w	PlaySound_Special
00003398 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000339E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
000033A4 43F8 D080                  		lea	($FFFFD080).w,a1
000033A8 7000                       		moveq	#0,d0
000033AA 323C 0007                  		move.w	#7,d1
000033AE                            
000033AE                            Title_ClrObjRam2:
000033AE 22C0                       		move.l	d0,(a1)+
000033B0 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000033B4                            
000033B4 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000033BA 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000033C0 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000033C6 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000033CC 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000033D2 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000033D8 4EB9 0000 0000             		jsr	ObjectsLoad
000033DE 6100 0000                  		bsr.w	DeformBgLayer
000033E2 4EB9 0000 0000             		jsr	BuildSprites
000033E8 7000                       		moveq	#0,d0
000033EA 6100 E3F0                  		bsr.w	LoadPLC2
000033EE 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033F4 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033FA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033FE 0000 0040                  		ori.b	#$40,d0
00003402 33C0 00C0 0004             		move.w	d0,($C00004).l
00003408 6100 EB92                  		bsr.w	Pal_FadeTo
0000340C                            
0000340C                            loc_317C:
0000340C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003412 6100 F824                  		bsr.w	DelayProgram
00003416 4EB9 0000 0000             		jsr	ObjectsLoad
0000341C 6100 0000                  		bsr.w	DeformBgLayer
00003420 4EB9 0000 0000             		jsr	BuildSprites
00003426 6100 E75E                  		bsr.w	PalCycle_Title
0000342A 6100 E3EA                  		bsr.w	RunPLC_RAM
0000342E 3038 D008                  		move.w	($FFFFD008).w,d0
00003432 5440                       		addq.w	#2,d0
00003434 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003438 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000343C 6500                       		bcs.s	Title_ChkRegion	; if not, branch
0000343E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003444 4E75                       		rts	
00003446                            ; ===========================================================================
00003446                            
00003446                            Title_ChkRegion:
00003446 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000344A 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000344C 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003452 6000                       		bra.s	Title_EnterCheat
00003454                            ; ===========================================================================
00003454                            
00003454                            Title_RegionJ:				; XREF: Title_ChkRegion
00003454 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
0000345A                            
0000345A                            Title_EnterCheat:			; XREF: Title_ChkRegion
0000345A 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
0000345E D0C0                       		adda.w	d0,a0
00003460 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003464 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003468 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000346A 6600                       		bne.s	loc_3210	; if not, branch
0000346C 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003470 4A00                       		tst.b	d0
00003472 6600                       		bne.s	Title_CountC
00003474 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003478 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000347C E249                       		lsr.w	#1,d1
0000347E 0241 0003                  		andi.w	#3,d1
00003482 6700                       		beq.s	Title_PlayRing
00003484 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003488 6A00                       		bpl.s	Title_PlayRing
0000348A 7201                       		moveq	#1,d1
0000348C 1181 1001                  		move.b	d1,1(a0,d1.w)
00003490                            
00003490                            Title_PlayRing:
00003490 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003496 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000349A 6100 E12A                  		bsr.w	PlaySound_Special
0000349E 6000                       		bra.s	Title_CountC
000034A0                            ; ===========================================================================
000034A0                            
000034A0                            loc_3210:				; XREF: Title_EnterCheat
000034A0 4A00                       		tst.b	d0
000034A2 6700                       		beq.s	Title_CountC
000034A4 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
000034AA 6700                       		beq.s	Title_CountC
000034AC 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034B2                            
000034B2                            Title_CountC:
000034B2 1038 F605                  		move.b	($FFFFF605).w,d0
000034B6 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000034BA 6700                       		beq.s	loc_3230	; if not, branch
000034BC 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000034C0                            
000034C0                            loc_3230:
000034C0 4A78 F614                  		tst.w	($FFFFF614).w
000034C4 6700 0000                  		beq.w	Demo
000034C8                            		; (temporary until we have an actual options screen)
000034C8 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000034CE 6700                       		beq.s	@notc
000034D0                            
000034D0 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
000034D6 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000034DA 6100 E0EA                  		bsr.w	PlaySound_Special
000034DE                            	@notc:
000034DE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000034E4 6700 FF26                  		beq.w	loc_317C	; if not, branch
000034E8                            
000034E8                            Title_ChkLevSel:
000034E8 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000034EC 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034F0 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000034F6 6700 0000                  		beq.w	PlayLevel	; if not, play level
000034FA                            		
000034FA                            		
000034FA 7002                       		moveq	#2,d0
000034FC 6100 EE0A                  		bsr.w	PalLoad2	; load level select pallet
00003500 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003504 7000                       		moveq	#0,d0
00003506 323C 00DF                  		move.w	#$DF,d1
0000350A                            
0000350A                            Title_ClrScroll:
0000350A 22C0                       		move.l	d0,(a1)+
0000350C 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003510                            
00003510 21C0 F616                  		move.l	d0,($FFFFF616).w
00003514 46FC 2700                  		move	#$2700,sr
00003518 4DF9 00C0 0000             		lea	($C00000).l,a6
0000351E 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003528 323C 03FF                  		move.w	#$3FF,d1
0000352C                            
0000352C                            Title_ClrVram:
0000352C 2C80                       		move.l	d0,(a6)
0000352E 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003532                            
00003532 6100 0000                  		bsr.w	LevSelTextLoad
00003536                            		
00003536                            		; sound test fix
00003536 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000353A 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003540 363C E65F                  		move.w	#$E680-$21,d3
00003544 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003548 31C6 FF82                  		move.w	d6,($FFFFFF82).w
0000354C 6000 0000                  		bra.w	LevelSelect
00003550                            ; ---------------------------------------------------------------------------
00003550                            ; Level	Select
00003550                            ; ---------------------------------------------------------------------------
00003550                            YouAreAnIdiot:
00003550 6100 DF9C                  		bsr.w	ClearScreen
00003554                            		
00003554 4DF9 00C0 0004             		lea	($C00004).l,a6
0000355A 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
0000355E                            		
0000355E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003568 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
0000356E 6100 E0FA                  		bsr.w	NemDec
00003572 43F9 00FF 0000             		lea	($FF0000).l,a1
00003578 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
0000357E 303C 0000                  		move.w	#0,d0
00003582 6100 E3C4                  		bsr.w	EniDec
00003586 43F9 00FF 0000             		lea	($FF0000).l,a1
0000358C 203C 4304 0003             		move.l	#$43040003,d0
00003592 7223                       		moveq	#35,d1
00003594 740D                       		moveq	#13,d2
00003596 6100 E0B2                  		bsr.w	ShowVDPGraphics
0000359A 7014                       		moveq	#20,d0
0000359C 6100 ED6A                  		bsr.w	PalLoad2	; load Sega logo pallet
000035A0                            		
000035A0 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
000035A4 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000035A8                            	@wait:
000035A8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035AE 6100 F688                  		bsr.w	DelayProgram
000035B2 60F4                       		bra.s	@wait
000035B4                            LevelSelect:
000035B4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000035BA 6100 F67C                  		bsr.w	DelayProgram
000035BE 6100 0000                  		bsr.w	LevSelControls
000035C2 6100 E252                  		bsr.w	RunPLC_RAM
000035C6 4AB8 F680                  		tst.l	($FFFFF680).w
000035CA 66E8                       		bne.s	LevelSelect
000035CC 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000035D2 67E0                       		beq.s	LevelSelect	; if not, branch
000035D4 3038 FF82                  		move.w	($FFFFFF82).w,d0
000035D8 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000035DC 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
000035E0                            		
000035E0 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000035E4 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000035E6                            		
000035E6 3038 FF84                  		move.w	($FFFFFF84).w,d0
000035EA 0640 0080                  		addi.w	#$80,d0
000035EE 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000035F2                            		
000035F2 4EB9 0000 0000             		jsr		ShowNow_Playing
000035F8 60BA                       		bra.s	LevelSelect
000035FA                            ; ===========================================================================
000035FA                            
000035FA                            LevSel_Ending:				; XREF: LevelSelect
000035FA 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003600 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003606 4E75                       		rts	
00003608                            ; ===========================================================================
00003608                            
00003608                            LevSel_Credits:				; XREF: LevelSelect
00003608 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
0000360E 103C 0091                  		move.b	#$91,d0
00003612 6100 DFB2                  		bsr.w	PlaySound_Special ; play credits music
00003616 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
0000361C 4E75                       		rts	
0000361E                            ; ===========================================================================
0000361E                            
0000361E                            LevSel_Level_SS:			; XREF: LevelSelect
0000361E D040                       		add.w	d0,d0
00003620 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003624 6B00 FF8E                  		bmi.w	LevelSelect
00003628 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
0000362C 6600                       		bne.s	LevSel_Level	; if not, branch
0000362E 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003634 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003638 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000363E 7000                       		moveq	#0,d0
00003640 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003644 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003648 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000364C 4E75                       		rts	
0000364E                            ; ===========================================================================
0000364E                            
0000364E                            LevSel_Level:				; XREF: LevSel_Level_SS
0000364E 0240 3FFF                  		andi.w	#$3FFF,d0
00003652 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003656                            
00003656                            PlayLevel:				; XREF: ROM:00003246j ...
00003656 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
0000365C 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003662 7000                       		moveq	#0,d0
00003664 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003668 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000366C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003670 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003674 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003678 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000367C 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003680 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003684 103C 00E0                  		move.b	#$E0,d0
00003688 6100 DF3C                  		bsr.w	PlaySound_Special ; fade out music
0000368C 4E75                       		rts	
0000368E                            ; ===========================================================================
0000368E                            ; ---------------------------------------------------------------------------
0000368E                            ; Level	select - level pointers
0000368E                            ; ---------------------------------------------------------------------------
0000368E                            LSelectPointers:
0000368E                            		incbin	misc\ls_point.bin
000036B8                            		even
000036B8                            ; ---------------------------------------------------------------------------
000036B8                            ; Level	select codes
000036B8                            ; ---------------------------------------------------------------------------
000036B8                            LevelSelectCode_J:
000036B8                            		incbin	misc\ls_jcode.bin
000036BE                            		even
000036BE                            
000036BE                            LevelSelectCode_US:
000036BE                            		incbin	misc\ls_ucode.bin
000036C4                            		even
000036C4                            ; ===========================================================================
000036C4                            
000036C4                            ; ---------------------------------------------------------------------------
000036C4                            ; Demo mode
000036C4                            ; ---------------------------------------------------------------------------
000036C4                            
000036C4                            Demo:					; XREF: TitleScreen
000036C4 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000036CA                            
000036CA                            loc_33B6:				; XREF: loc_33E4
000036CA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036D0 6100 F566                  		bsr.w	DelayProgram
000036D4 6100 0000                  		bsr.w	DeformBgLayer
000036D8 6100 E48C                  		bsr.w	PalCycle_Load
000036DC 6100 E138                  		bsr.w	RunPLC_RAM
000036E0 3038 D008                  		move.w	($FFFFD008).w,d0
000036E4 5440                       		addq.w	#2,d0
000036E6 31C0 D008                  		move.w	d0,($FFFFD008).w
000036EA 0C40 1C00                  		cmpi.w	#$1C00,d0
000036EE 6500                       		bcs.s	loc_33E4
000036F0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000036F6 4E75                       		rts	
000036F8                            ; ===========================================================================
000036F8                            
000036F8                            loc_33E4:				; XREF: Demo
000036F8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036FE 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
00003702 4A78 F614                  		tst.w	($FFFFF614).w
00003706 6600 FFC2                  		bne.w	loc_33B6
0000370A 103C 00E0                  		move.b	#$E0,d0
0000370E 6100 DEB6                  		bsr.w	PlaySound_Special ; fade out music
00003712 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003716 0240 0007                  		andi.w	#7,d0
0000371A D040                       		add.w	d0,d0
0000371C 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003720 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003724 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003728 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000372E 6500                       		bcs.s	loc_3422	; if yes, branch
00003730 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003736                            
00003736                            loc_3422:
00003736 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
0000373C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003742 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003746 6600                       		bne.s	Demo_Level	; if not, branch
00003748 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000374E 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003752 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003756                            
00003756                            Demo_Level:
00003756 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000375C 7000                       		moveq	#0,d0
0000375E 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003762 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003766 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000376A 4E75                       		rts	
0000376C                            ; ===========================================================================
0000376C                            ; ---------------------------------------------------------------------------
0000376C                            ; Levels used in demos
0000376C                            ; ---------------------------------------------------------------------------
0000376C                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003774                            		even
00003774                            
00003774                            ; ---------------------------------------------------------------------------
00003774                            ; Subroutine to	change what you're selecting in the level select
00003774                            ; ---------------------------------------------------------------------------
00003774                            
00003774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003774                            
00003774                            
00003774                            LevSelControls:				; XREF: LevelSelect
00003774 1238 F605                  		move.b	($FFFFF605).w,d1
00003778 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000377C 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000377E 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003782 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003784                            
00003784                            LevSel_UpDown:
00003784 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000378A 1238 F604                  		move.b	($FFFFF604).w,d1
0000378E 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003792 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003794 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003798 0801 0000                  		btst	#0,d1		; is up	pressed?
0000379C 6700                       		beq.s	LevSel_Down	; if not, branch
0000379E 5346                       		subq.w	#1,d6		; move up 1 selection
000037A0 6400                       		bcc.s	LevSel_Down
000037A2 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
000037A4                            
000037A4                            LevSel_Down:
000037A4 0801 0001                  		btst	#1,d1		; is down pressed?
000037A8 6700                       		beq.s	LevSel_Refresh	; if not, branch
000037AA 5246                       		addq.w	#1,d6		; move down 1 selection
000037AC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037B0 6500                       		bcs.s	LevSel_Refresh
000037B2 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000037B4 6000                       		bra.s	LevSel_Refresh
000037B6                            		
000037B6                            LevSel_GoLR:
000037B6 0801 0002                  		btst	#2,d1		; is left pressed?
000037BA 6700                       		beq.s	LevSel_GoRight	; if not, branch
000037BC 0446 0000                  		sub.w	#lsrow2size,d6
000037C0 64E2                       		bcc.s	LevSel_Down
000037C2 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000037C6 6000                       		bra.s	LevSel_Refresh
000037C8                            LevSel_GoRight:
000037C8 0646 0000                  		add.w	#lsrow1size,d6
000037CC 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000037D0 6500                       		bcs.s	LevSel_Refresh
000037D2 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000037D6                            ; ===========================================================================
000037D6                            LevSel_Refresh:
000037D6 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037DA 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037DE 363C C65F                  		move.w	#$C680-$21,d3
000037E2 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000037E6 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000037EA 4E75                       		rts	
000037EC                            		
000037EC                            LevSel_SndTest:				; XREF: LevSelControls
000037EC 1238 F605                  		move.b	($FFFFF605).w,d1
000037F0 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000037F4 6700                       		beq.s	LevSel_NoMove	; if not, branch
000037F6 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
000037FC 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037FE                            		
000037FE 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003802 0801 0002                  		btst	#2,d1		; is left pressed?
00003806 6700                       		beq.s	LevSel_Right	; if not, branch
00003808 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
0000380A 6400                       		bcc.s	LevSel_Right
0000380C 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
0000380E                            
0000380E                            LevSel_Right:
0000380E 0801 0003                  		btst	#3,d1		; is right pressed?
00003812 6700                       		beq.s	LevSel_Refresh2	; if not, branch
00003814 5240                       		addq.w	#1,d0		; add 1	to sound test
00003816 0C40 0050                  		cmpi.w	#$50,d0
0000381A 6500                       		bcs.s	LevSel_Refresh2
0000381C 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
0000381E                            
0000381E                            LevSel_Refresh2:
0000381E 363C C65F                  		move.w	#$C680-$21,d3
00003822 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
00003826 6000 0000                  		bra.w	LevSelSndTest	; refresh text
0000382A                            
0000382A                            LevSel_NoMove:
0000382A 4E75                       		rts	
0000382C                            ; End of function LevSelControls
0000382C                            
0000382C                            ; ---------------------------------------------------------------------------
0000382C                            ; Subroutine to load level select text
0000382C                            ; ---------------------------------------------------------------------------
0000382C                            
0000382C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000382C =60860003                  lsscrpos = $60860003
0000382C =00240000                  lsoff = $240000
0000382C =64C00003                  lsstpos = lsscrpos+$43A0000
0000382C                            
0000382C                            LevSelTextLoad_loop:
0000382C 2D44 0004                  		move.l	d4,4(a6)
00003830 6100 0000                  		bsr.w	LevSel_ChgLine
00003834 0684 0080 0000             		addi.l	#$800000,d4
0000383A 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
0000383E 4E75                       		rts
00003840                            LevSelTextLoad:				; XREF: TitleScreen
00003840 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003846 4DF9 00C0 0000             		lea	($C00000).l,a6
0000384C 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003850 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003856                            		
00003856 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
0000385A 61D0                       		bsr.s	LevSelTextLoad_loop
0000385C                            		
0000385C                            		
0000385C 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003862 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003866 61C4                       		bsr.s	LevSelTextLoad_loop
00003868 363C C65F                  		move.w	#$C680-$21,d3
0000386C                            		
0000386C                            LevSelHighlightCode:
0000386C 4DF9 00C0 0000             		lea	($C00000).l,a6
00003872 7000                       		moveq	#0,d0
00003874 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003878 3200                       		move.w	d0,d1
0000387A 283C 6086 0003             		move.l	#lsscrpos,d4
00003880                            		
00003880 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003884 6D00                       		blt.s	@notsecond
00003886                            		
00003886 0440 0000                  		sub.w	#lsrow1size,d0
0000388A 0684 0024 0000             		addi.l	#lsoff,d4
00003890                            	@notsecond:
00003890 EF48                       		lsl.w	#7,d0
00003892 4840                       		swap	d0
00003894 D880                       		add.l	d0,d4
00003896 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000389C E749                       		lsl.w	#3,d1
0000389E D241                       		add.w	d1,d1
000038A0 D2C1                       		adda.w	d1,a1
000038A2 2D44 0004                  		move.l	d4,4(a6)
000038A6 6100 0000                  		bsr.w	LevSel_ChgLine
000038AA 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038B0 6700                       		beq.s	LevSelSndTest
000038B2 4E75                       		rts
000038B4                            
000038B4                            LevSelSndTest:
000038B4 0643 0030                  		add.w	#$30,d3
000038B8 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000038C2 3038 FF84                  		move.w	($FFFFFF84).w,d0
000038C6 0640 0080                  		addi.w	#$80,d0
000038CA 1400                       		move.b	d0,d2
000038CC E808                       		lsr.b	#4,d0
000038CE 6100 0000                  		bsr.w	LevSel_ChgSnd
000038D2 1002                       		move.b	d2,d0
000038D4 6100 0000                  		bsr.w	LevSel_ChgSnd
000038D8 4E75                       		rts	
000038DA                            ; End of function LevSelTextLoad
000038DA                            
000038DA                            
000038DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038DA                            
000038DA                            
000038DA                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000038DA 0240 000F                  		andi.w	#$F,d0
000038DE 0C00 000A                  		cmpi.b	#$A,d0
000038E2 6500                       		bcs.s	loc_3580
000038E4 5E00                       		addi.b	#7,d0
000038E6                            
000038E6                            loc_3580:
000038E6 D043                       		add.w	d3,d0
000038E8 3C80                       		move.w	d0,(a6)
000038EA 4E75                       		rts	
000038EC                            ; End of function LevSel_ChgSnd
000038EC                            
000038EC                            
000038EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000038EC                            
000038EC                            
000038EC                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000038EC 740F                       		moveq	#$10-1,d2		; number of characters per line
000038EE                            
000038EE                            @loop:
000038EE 7000                       		moveq	#0,d0
000038F0 1019                       		move.b	(a1)+,d0
000038F2 0C00 0020                  		cmpi.b	#$20,d0
000038F6 6E00                       		bgt.s	@draw
000038F8 3CBC 0000                  		move.w	#0,(a6)
000038FC 51CA FFF0                  		dbf	d2,@loop
00003900 4E75                       		rts	
00003902                            ; ===========================================================================
00003902                            
00003902                            @draw:				; XREF: LevSel_ChgLine
00003902 D043                       		add.w	d3,d0
00003904 3C80                       		move.w	d0,(a6)
00003906 51CA FFE6                  		dbf	d2,@loop
0000390A 4E75                       		rts	
0000390C                            ; End of function LevSel_ChgLine
0000390C                            		
0000390C                            CStringSlop_draw:
0000390C D043                       		add.w	d3,d0
0000390E 3C80                       		move.w	d0,(a6)
00003910                            CStringSlop:				; XREF: LevSelTextLoad
00003910 7000                       		moveq	#0,d0
00003912 1019                       		move.b	(a1)+,d0
00003914 0C00 0020                  		cmpi.b	#$20,d0
00003918 6EF2                       		bgt.s	CStringSlop_draw
0000391A 4A00                       		tst.b	d0
0000391C 6700                       		beq.s	@end
0000391E 3CBC 0000                  		move.w	#0,(a6)
00003922 60EC                       		bra.s	CStringSlop
00003924                            	@end:
00003924 4E75                       		rts
00003926                            ; End of function LevSel_ChgLine
00003926                            
00003926                            ; ===========================================================================
00003926                            ; ---------------------------------------------------------------------------
00003926                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003926                            ; ---------------------------------------------------------------------------
00003926                            LevelMenuText:	
00003926 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003936 2020 2020 2020 2020 2020+          dc.b    "               2"
00003946 2020 2020 2020 2020 2020+          dc.b    "               3"
00003956 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003966 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003976 2020 2020 2020 2020 2020+          dc.b    "               3"
00003986 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003996 2020 2020 2020 2020 2020+          dc.b    "               2"
000039A6 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B6 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
000039C6 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D6 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E6                            LMTSecondRow:
000039E6 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
000039F6 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003A06 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A16 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003A26 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A36 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A46 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003A56 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A66 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A76 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A86 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A96                            LMTSelectableEnd:
00003A96 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003AA6                            LMTEnd:
00003AA6                            
00003AA6                            
00003AA6 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003AA6 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003AA6 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003AA6                            ; just to not break these
00003AA6 =00000014                  lssndtest = lsrow2size+8
00003AA6 =00000015                  lswifi = lsrow2size+9
00003AA6                            
00003AA6 =6C820003                  nppos = $6C820003
00003AA6                            Now_Playing:
00003AA6 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003AB6                            		even
00003AB6                            NP_Track:
00003AB6 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003ABE                            		even
00003ABE                            NP_SFX:
00003ABE 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003AC6                            		even
00003AC6                            
00003AC6                            ShowNow_Playing:
00003AC6 1C00                       		move.b	d0,d6
00003AC8 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003ACC 43FA FFD8                  		lea	Now_Playing(pc),a1
00003AD0 4DF9 00C0 0000             		lea		($C00000).l,a6
00003AD6 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003ADE 6100 FE30                  		bsr.w	CStringSlop
00003AE2                            		
00003AE2 43FA FFD2                  		lea	NP_Track(pc),a1
00003AE6 0C06 00A0                  		cmpi.b	#$A0,d6
00003AEA 6D00                       		blt.s	@track
00003AEC                            		
00003AEC 43FA FFD0                  		lea	NP_SFX(pc),a1
00003AF0                            	@track:
00003AF0 6100 FE1E                  		bsr.w	CStringSlop
00003AF4                            		
00003AF4 0643 0030                  		add.w	#$30,d3
00003AF8 1006                       		move.b	d6,d0
00003AFA 1400                       		move.b	d0,d2
00003AFC E808                       		lsr.b	#4,d0
00003AFE 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003B02 1002                       		move.b	d2,d0
00003B04 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003B08 4E75                       		rts	
00003B0A                            ; ---------------------------------------------------------------------------
00003B0A                            ; Music	playlist
00003B0A                            ; ---------------------------------------------------------------------------
00003B0A                            MusicList1:	incbin	misc\muslist1.bin
00003B12                            		even
00003B12                            MusicList2:	incbin	misc\muslist2.bin
00003B18                            		even
00003B18                            MusicList3:	incbin	misc\muslist3.bin
00003B1E                            		even
00003B1E                            MusicList4:	incbin	misc\muslist4.bin
00003B24                            		even
00003B24                            ; ===========================================================================
00003B24                            
00003B24                            ; ---------------------------------------------------------------------------
00003B24                            ; Level
00003B24                            ; ---------------------------------------------------------------------------
00003B24                            
00003B24                            Level:					; XREF: GameModeArray
00003B24 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003B2A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B2E 6B00                       		bmi.s	loc_37B6
00003B30 103C 00E0                  		move.b	#$E0,d0
00003B34 6100 DA90                  		bsr.w	PlaySound_Special ; fade out music
00003B38                            
00003B38                            loc_37B6:
00003B38 6100 DCCE                  		bsr.w	ClearPLC
00003B3C 6100 E504                  		bsr.w	Pal_FadeFrom
00003B40 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003B44 6B00                       		bmi.s	Level_ClrRam
00003B46 46FC 2700                  		move	#$2700,sr
00003B4A 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003B54 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003B5A 6100 DB0E                  		bsr.w	NemDec
00003B5E 46FC 2300                  		move	#$2300,sr
00003B62 7000                       		moveq	#0,d0
00003B64 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B68 E948                       		lsl.w	#4,d0
00003B6A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B70 45F2 0000                  		lea	(a2,d0.w),a2
00003B74 7000                       		moveq	#0,d0
00003B76 1012                       		move.b	(a2),d0
00003B78 6700                       		beq.s	loc_37FC
00003B7A 6100 DC2E                  		bsr.w	LoadPLC		; load level patterns
00003B7E                            
00003B7E                            loc_37FC:
00003B7E 7001                       		moveq	#1,d0
00003B80 6100 DC28                  		bsr.w	LoadPLC		; load standard	patterns
00003B84                            
00003B84                            Level_ClrRam:
00003B84 43F8 D000                  		lea	($FFFFD000).w,a1
00003B88 7000                       		moveq	#0,d0
00003B8A 323C 07FF                  		move.w	#$7FF,d1
00003B8E                            
00003B8E                            Level_ClrObjRam:
00003B8E 22C0                       		move.l	d0,(a1)+
00003B90 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B94                            
00003B94 43F8 F628                  		lea	($FFFFF628).w,a1
00003B98 7000                       		moveq	#0,d0
00003B9A 323C 0015                  		move.w	#$15,d1
00003B9E                            
00003B9E                            Level_ClrVars:
00003B9E 22C0                       		move.l	d0,(a1)+
00003BA0 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003BA4                            
00003BA4 43F8 F700                  		lea	($FFFFF700).w,a1
00003BA8 7000                       		moveq	#0,d0
00003BAA 323C 003F                  		move.w	#$3F,d1
00003BAE                            
00003BAE                            Level_ClrVars2:
00003BAE 22C0                       		move.l	d0,(a1)+
00003BB0 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003BB4                            
00003BB4 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003BB8 7000                       		moveq	#0,d0
00003BBA 323C 0047                  		move.w	#$47,d1
00003BBE                            
00003BBE                            Level_ClrVars3:
00003BBE 22C0                       		move.l	d0,(a1)+
00003BC0 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003BC4                            
00003BC4 46FC 2700                  		move	#$2700,sr
00003BC8 6100 D924                  		bsr.w	ClearScreen
00003BCC 4DF9 00C0 0004             		lea	($C00004).l,a6
00003BD2 3CBC 8B03                  		move.w	#$8B03,(a6)
00003BD6 3CBC 8230                  		move.w	#$8230,(a6)
00003BDA 3CBC 8407                  		move.w	#$8407,(a6)
00003BDE 3CBC 857C                  		move.w	#$857C,(a6)
00003BE2 3CBC 9001                  		move.w	#$9001,(a6)
00003BE6 3CBC 8004                  		move.w	#$8004,(a6)
00003BEA 3CBC 8720                  		move.w	#$8720,(a6)
00003BEE 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003BF4 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003BF8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BFE 6600                       		bne.s	Level_LoadPal	; if not, branch
00003C00 3CBC 8014                  		move.w	#$8014,(a6)
00003C04 7000                       		moveq	#0,d0
00003C06 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C0A D040                       		add.w	d0,d0
00003C0C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003C12 3031 0000                  		move.w	(a1,d0.w),d0
00003C16 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003C1A 31C0 F648                  		move.w	d0,($FFFFF648).w
00003C1E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003C22 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003C26 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003C2A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003C30 6000 0000                  		bra.w	Level_LoadPal
00003C34                            Player_Palette:
00003C34                            		; normal, lz, sbz, blank
00003C34 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003C3C                            		
00003C3C 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003C44                            		; add more player palettes
00003C44                            Level_LoadPal:
00003C44 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003C4A 46FC 2300                  		move	#$2300,sr
00003C4E                            
00003C4E 7200                       		moveq	#0,d1
00003C50 1238 FFE8                  		move.b	(v_character),d1
00003C54 D241                       		add.w	d1,d1
00003C56 D241                       		add.w	d1,d1
00003C58 D241                       		add.w	d1,d1
00003C5A 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003C5E                            		
00003C5E 6100 E6A8                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003C62 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003C68 6600                       		bne.s	Level_GetBgm	; if not, branch
00003C6A 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003C6E 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003C74 6600                       		bne.s	Level_WaterPal	; if not, branch
00003C76 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003C7A                            
00003C7A                            Level_WaterPal:
00003C7A 6100 E6A4                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003C7E 4A38 FE30                  		tst.b	($FFFFFE30).w
00003C82 6700                       		beq.s	Level_GetBgm
00003C84 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C8A                            
00003C8A                            ; NineKode begins here - How to play different songs on different acts
00003C8A                             
00003C8A                            Level_GetBgm:
00003C8A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C8E 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C92 7000                       		moveq	#0,d0
00003C94 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C98                             
00003C98 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C9E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003CA0 43F9 0000 3B0A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003CA6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CA8                             
00003CA8                            Level_GetBgm2:
00003CA8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003CAE 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003CB0 43F9 0000 3B12             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003CB6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CB8                             
00003CB8                            Level_GetBgm3:
00003CB8 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003CBE 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003CC0 43F9 0000 3B18             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003CC6 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003CC8                             
00003CC8                            Level_GetBgm4:
00003CC8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003CCE 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003CD0 43F9 0000 3B1E             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003CD6                             
00003CD6                            Level_PlayBgm:
00003CD6 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003CDA 6100 D8E4                  		bsr.w	PlaySound	; play music
00003CDE 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003CE4                             
00003CE4                            ; NineKode ends here
00003CE4                            
00003CE4                            Level_TtlCard:
00003CE4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003CEA 6100 EF4C                  		bsr.w	DelayProgram
00003CEE 4EB9 0000 0000             		jsr	ObjectsLoad
00003CF4 4EB9 0000 0000             		jsr	BuildSprites
00003CFA 6100 DB1A                  		bsr.w	RunPLC_RAM
00003CFE 3038 D108                  		move.w	($FFFFD108).w,d0
00003D02 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003D06 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003D08 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003D0C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003D0E 4EB9 0000 0000             		jsr	Hud_Base
00003D14                            
00003D14                            loc_3946:
00003D14 7003                       		moveq	#3,d0
00003D16 6100 E5D4                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003D1A 6100 0000                  		bsr.w	LevelSizeLoad
00003D1E 6100 0000                  		bsr.w	DeformBgLayer
00003D22 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003D28 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003D2C 6100 0000                  		bsr.w	LoadTilesFromStart
00003D30 4EB9 0000 0000             		jsr	FloorLog_Unk
00003D36 6100 0000                  		bsr.w	ColIndexLoad
00003D3A 6100 0000                  		bsr.w	LZWaterEffects
00003D3E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003D44 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003D48 6B00                       		bmi.s	Level_ChkDebug
00003D4A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003D50                            
00003D50                            Level_ChkDebug:
00003D50 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003D54 6700                       		beq.s	Level_ChkWater	; if not, branch
00003D56 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003D5C 6700                       		beq.s	Level_ChkWater	; if not, branch
00003D5E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003D64                            
00003D64                            Level_ChkWater:
00003D64 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003D6A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003D70 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D76 6600                       		bne.s	Level_LoadObj	; if not, branch
00003D78 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003D7E 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D84 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D8A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D90                            
00003D90                            Level_LoadObj:
00003D90 4EB9 0000 0000             		jsr	ObjPosLoad
00003D96 4EB9 0000 0000             		jsr	ObjectsLoad
00003D9C 4EB9 0000 0000             		jsr	BuildSprites
00003DA2 7000                       		moveq	#0,d0
00003DA4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003DA8 6600                       		bne.s	loc_39E8	; if yes, branch
00003DAA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003DAE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003DB2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003DB6                            
00003DB6                            loc_39E8:
00003DB6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003DBA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003DBE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003DC2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003DC6                            		; move.b	d0,($FFFFFE2F).w
00003DC6 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003DCC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003DD0 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003DD4 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003DD8 6100 0000                  		bsr.w	OscillateNumInit
00003DDC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003DE2 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003DE8 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003DEE 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003DF4 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003DFA 7000                       		moveq	#0,d0
00003DFC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E00 E548                       		lsl.w	#2,d0
00003E02 2271 0000                  		movea.l	(a1,d0.w),a1
00003E06 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003E0A 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003E0C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003E12 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003E16 5340                       		subq.w	#1,d0
00003E18 E548                       		lsl.w	#2,d0
00003E1A 2271 0000                  		movea.l	(a1,d0.w),a1
00003E1E                            
00003E1E                            Level_Demo:
00003E1E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003E24 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003E28 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003E2E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E32 6A00                       		bpl.s	Level_ChkWaterPal
00003E34 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003E3A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003E40 6600                       		bne.s	Level_ChkWaterPal
00003E42 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003E48                            
00003E48                            Level_ChkWaterPal:
00003E48 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003E4E 6600                       		bne.s	Level_Delay	; if not, branch
00003E50 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003E52 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003E58 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003E5A 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003E5C                            
00003E5C                            Level_WaterPal2:
00003E5C 6100 E4DE                  		bsr.w	PalLoad4_Water
00003E60                            
00003E60                            Level_Delay:
00003E60 323C 0003                  		move.w	#3,d1
00003E64                            
00003E64                            Level_DelayLoop:
00003E64 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E6A 6100 EDCC                  		bsr.w	DelayProgram
00003E6E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003E72                            
00003E72 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003E78 6100 E128                  		bsr.w	Pal_FadeTo2
00003E7C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E80 6B00                       		bmi.s	Level_ClrCardArt
00003E82 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E86 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E8A 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E8E 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E92 6000                       		bra.s	Level_StartGame
00003E94                            ; ===========================================================================
00003E94                            
00003E94                            Level_ClrCardArt:
00003E94 7002                       		moveq	#2,d0
00003E96 4EB9 0000 17AA             		jsr	(LoadPLC).l	; load explosion patterns
00003E9C 7000                       		moveq	#0,d0
00003E9E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003EA2 0640 0015                  		addi.w	#$15,d0
00003EA6 4EB9 0000 17AA             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003EAC                            
00003EAC                            Level_StartGame:
00003EAC 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003EB2                            
00003EB2                            ; ---------------------------------------------------------------------------
00003EB2                            ; Main level loop (when	all title card and loading sequences are finished)
00003EB2                            ; ---------------------------------------------------------------------------
00003EB2                            
00003EB2                            Level_MainLoop:
00003EB2 6100 D71E                  		bsr.w	PauseGame
00003EB6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EBC 6100 ED7A                  		bsr.w	DelayProgram
00003EC0 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003EC4 6100 0000                  		bsr.w	MoveSonicInDemo
00003EC8 6100 0000                  		bsr.w	LZWaterEffects
00003ECC 4EB9 0000 0000             		jsr	ObjectsLoad
00003ED2 4A78 FE08                  		tst.w	($FFFFFE08).w
00003ED6 6600                       		bne.s	loc_3B10
00003ED8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003EDE 6400                       		bcc.s	loc_3B14
00003EE0                            
00003EE0                            loc_3B10:
00003EE0 6100 0000                  		bsr.w	DeformBgLayer
00003EE4                            
00003EE4                            loc_3B14:
00003EE4 4EB9 0000 0000             		jsr	BuildSprites
00003EEA 4EB9 0000 0000             		jsr	ObjPosLoad
00003EF0 6100 DC74                  		bsr.w	PalCycle_Load
00003EF4 6100 D920                  		bsr.w	RunPLC_RAM
00003EF8 6100 0000                  		bsr.w	OscillateNumDo
00003EFC 6100 0000                  		bsr.w	ChangeRingFrame
00003F00 6100 0000                  		bsr.w	SignpostArtLoad
00003F04 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003F0A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003F0C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003F10 6600 FC12                  		bne.w	Level		; if yes, branch
00003F14 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003F1A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003F1E 4E75                       		rts	
00003F20                            ; ===========================================================================
00003F20                            
00003F20                            Level_ChkDemo:				; XREF: Level_MainLoop
00003F20 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003F24 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003F26 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003F2A 6700                       		beq.s	Level_EndDemo	; if not, branch
00003F2C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003F32 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003F36 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003F3C 4E75                       		rts	
00003F3E                            ; ===========================================================================
00003F3E                            
00003F3E                            Level_EndDemo:				; XREF: Level_ChkDemo
00003F3E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003F44 6600                       		bne.s	loc_3B88	; if not, branch
00003F46 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003F4C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F50 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003F52 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003F58                            
00003F58                            loc_3B88:
00003F58 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003F5E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003F64 4278 F794                  		clr.w	($FFFFF794).w
00003F68                            
00003F68                            loc_3B98:
00003F68 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F6E 6100 ECC8                  		bsr.w	DelayProgram
00003F72 6100 0000                  		bsr.w	MoveSonicInDemo
00003F76 4EB9 0000 0000             		jsr	ObjectsLoad
00003F7C 4EB9 0000 0000             		jsr	BuildSprites
00003F82 4EB9 0000 0000             		jsr	ObjPosLoad
00003F88 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F8C 6A00                       		bpl.s	loc_3BC8
00003F8E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F94 6100 E0CC                  		bsr.w	Pal_FadeOut
00003F98                            
00003F98                            loc_3BC8:
00003F98 4A78 F614                  		tst.w	($FFFFF614).w
00003F9C 66CA                       		bne.s	loc_3B98
00003F9E 4E75                       		rts	
00003FA0                            ; ===========================================================================
00003FA0                            ; ---------------------------------------------------------------------------
00003FA0                            ; Subroutine to	do special water effects in Labyrinth Zone
00003FA0                            ; ---------------------------------------------------------------------------
00003FA0                            
00003FA0                            LZWaterEffects:				; XREF: Level
00003FA0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003FA6 6600                       		bne.s	locret_3C28	; if not, branch
00003FA8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003FAE 6400                       		bcc.s	LZMoveWater
00003FB0 6100 0000                  		bsr.w	LZWindTunnels
00003FB4 6100 0000                  		bsr.w	LZWaterSlides
00003FB8 6100 0000                  		bsr.w	LZDynamicWater
00003FBC                            
00003FBC                            LZMoveWater:
00003FBC 4238 F64E                  		clr.b	($FFFFF64E).w
00003FC0 7000                       		moveq	#0,d0
00003FC2 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003FC6 E248                       		lsr.w	#1,d0
00003FC8 D078 F648                  		add.w	($FFFFF648).w,d0
00003FCC 31C0 F646                  		move.w	d0,($FFFFF646).w
00003FD0 3038 F646                  		move.w	($FFFFF646).w,d0
00003FD4 9078 F704                  		sub.w	($FFFFF704).w,d0
00003FD8 6400                       		bcc.s	loc_3C1A
00003FDA 4A40                       		tst.w	d0
00003FDC 6A00                       		bpl.s	loc_3C1A
00003FDE 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003FE4 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003FEA                            
00003FEA                            loc_3C1A:
00003FEA 0C40 00DF                  		cmpi.w	#$DF,d0
00003FEE 6500                       		bcs.s	loc_3C24
00003FF0 303C 00DF                  		move.w	#$DF,d0
00003FF4                            
00003FF4                            loc_3C24:
00003FF4 11C0 F625                  		move.b	d0,($FFFFF625).w
00003FF8                            
00003FF8                            locret_3C28:
00003FF8 4E75                       		rts	
00003FFA                            ; ===========================================================================
00003FFA                            ; ---------------------------------------------------------------------------
00003FFA                            ; Labyrinth default water heights
00003FFA                            ; ---------------------------------------------------------------------------
00003FFA                            WaterHeight:	incbin	misc\lz_heigh.bin
00004002                            		even
00004002                            ; ===========================================================================
00004002                            
00004002                            ; ---------------------------------------------------------------------------
00004002                            ; Labyrinth dynamic water routines
00004002                            ; ---------------------------------------------------------------------------
00004002                            
00004002                            LZDynamicWater:				; XREF: LZWaterEffects
00004002 7000                       		moveq	#0,d0
00004004 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004008 D040                       		add.w	d0,d0
0000400A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
0000400E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004012 7200                       		moveq	#0,d1
00004014 1238 F64C                  		move.b	($FFFFF64C).w,d1
00004018 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000401C 9078 F648                  		sub.w	($FFFFF648).w,d0
00004020 6700                       		beq.s	locret_3C5A
00004022 6400                       		bcc.s	loc_3C56
00004024 4441                       		neg.w	d1
00004026                            
00004026                            loc_3C56:
00004026 D378 F648                  		add.w	d1,($FFFFF648).w
0000402A                            
0000402A                            locret_3C5A:
0000402A 4E75                       		rts	
0000402C                            ; ===========================================================================
0000402C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
0000402E 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004030 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004032 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004034                            ; ===========================================================================
00004034                            
00004034                            DynWater_LZ1:				; XREF: DynWater_Index
00004034 3038 F700                  		move.w	($FFFFF700).w,d0
00004038 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000403C 6600                       		bne.s	loc_3CD0
0000403E 323C 00B8                  		move.w	#$B8,d1
00004042 0C40 0600                  		cmpi.w	#$600,d0
00004046 6500                       		bcs.s	loc_3CB4
00004048 323C 0108                  		move.w	#$108,d1
0000404C 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004052 6500                       		bcs.s	loc_3CBA
00004054 0C40 0C00                  		cmpi.w	#$C00,d0
00004058 6500                       		bcs.s	loc_3CB4
0000405A 323C 0318                  		move.w	#$318,d1
0000405E 0C40 1080                  		cmpi.w	#$1080,d0
00004062 6500                       		bcs.s	loc_3CB4
00004064 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000406A 323C 05C8                  		move.w	#$5C8,d1
0000406E 0C40 1380                  		cmpi.w	#$1380,d0
00004072 6500                       		bcs.s	loc_3CB4
00004074 323C 03A8                  		move.w	#$3A8,d1
00004078 B278 F648                  		cmp.w	($FFFFF648).w,d1
0000407C 6600                       		bne.s	loc_3CB4
0000407E 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004084                            
00004084                            loc_3CB4:
00004084 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004088 4E75                       		rts	
0000408A                            ; ===========================================================================
0000408A                            
0000408A                            loc_3CBA:				; XREF: DynWater_LZ1
0000408A 0C40 0C80                  		cmpi.w	#$C80,d0
0000408E 65F4                       		bcs.s	loc_3CB4
00004090 323C 00E8                  		move.w	#$E8,d1
00004094 0C40 1500                  		cmpi.w	#$1500,d0
00004098 65EA                       		bcs.s	loc_3CB4
0000409A 323C 0108                  		move.w	#$108,d1
0000409E 60E4                       		bra.s	loc_3CB4
000040A0                            ; ===========================================================================
000040A0                            
000040A0                            loc_3CD0:				; XREF: DynWater_LZ1
000040A0 5302                       		subq.b	#1,d2
000040A2 6600                       		bne.s	locret_3CF4
000040A4 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
000040AA 6400                       		bcc.s	locret_3CF4
000040AC 323C 03A8                  		move.w	#$3A8,d1
000040B0 0C40 1300                  		cmpi.w	#$1300,d0
000040B4 6500                       		bcs.s	loc_3CF0
000040B6 323C 0108                  		move.w	#$108,d1
000040BA 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040C0                            
000040C0                            loc_3CF0:
000040C0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040C4                            
000040C4                            locret_3CF4:
000040C4 4E75                       		rts	
000040C6                            ; ===========================================================================
000040C6                            
000040C6                            DynWater_LZ2:				; XREF: DynWater_Index
000040C6 3038 F700                  		move.w	($FFFFF700).w,d0
000040CA 323C 0328                  		move.w	#$328,d1
000040CE 0C40 0500                  		cmpi.w	#$500,d0
000040D2 6500                       		bcs.s	loc_3D12
000040D4 323C 03C8                  		move.w	#$3C8,d1
000040D8 0C40 0B00                  		cmpi.w	#$B00,d0
000040DC 6500                       		bcs.s	loc_3D12
000040DE 323C 0428                  		move.w	#$428,d1
000040E2                            
000040E2                            loc_3D12:
000040E2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040E6 4E75                       		rts	
000040E8                            ; ===========================================================================
000040E8                            
000040E8                            DynWater_LZ3:				; XREF: DynWater_Index
000040E8 3038 F700                  		move.w	($FFFFF700).w,d0
000040EC 1438 F64D                  		move.b	($FFFFF64D).w,d2
000040F0 6600                       		bne.s	loc_3D5E
000040F2 323C 0900                  		move.w	#$900,d1
000040F6 0C40 0600                  		cmpi.w	#$600,d0
000040FA 6500                       		bcs.s	loc_3D54
000040FC 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00004102 6500                       		bcs.s	loc_3D54
00004104 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000410A 6400                       		bcc.s	loc_3D54
0000410C 323C 04C8                  		move.w	#$4C8,d1
00004110 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004116 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
0000411C 303C 00B7                  		move.w	#$B7,d0
00004120 6100 D4A4                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00004124                            
00004124                            loc_3D54:
00004124 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004128 31C1 F648                  		move.w	d1,($FFFFF648).w
0000412C 4E75                       		rts	
0000412E                            ; ===========================================================================
0000412E                            
0000412E                            loc_3D5E:				; XREF: DynWater_LZ3
0000412E 5302                       		subq.b	#1,d2
00004130 6600                       		bne.s	loc_3DA8
00004132 323C 04C8                  		move.w	#$4C8,d1
00004136 0C40 0770                  		cmpi.w	#$770,d0
0000413A 6500                       		bcs.s	loc_3DA2
0000413C 323C 0308                  		move.w	#$308,d1
00004140 0C40 1400                  		cmpi.w	#$1400,d0
00004144 6500                       		bcs.s	loc_3DA2
00004146 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
0000414C 6700                       		beq.s	loc_3D8E
0000414E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004154 6400                       		bcc.s	loc_3D8E
00004156 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
0000415C 6400                       		bcc.s	loc_3DA2
0000415E                            
0000415E                            loc_3D8E:
0000415E 323C 0508                  		move.w	#$508,d1
00004162 31C1 F648                  		move.w	d1,($FFFFF648).w
00004166 0C40 1770                  		cmpi.w	#$1770,d0
0000416A 6500                       		bcs.s	loc_3DA2
0000416C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004172                            
00004172                            loc_3DA2:
00004172 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004176 4E75                       		rts	
00004178                            ; ===========================================================================
00004178                            
00004178                            loc_3DA8:
00004178 5302                       		subq.b	#1,d2
0000417A 6600                       		bne.s	loc_3DD2
0000417C 323C 0508                  		move.w	#$508,d1
00004180 0C40 1860                  		cmpi.w	#$1860,d0
00004184 6500                       		bcs.s	loc_3DCC
00004186 323C 0188                  		move.w	#$188,d1
0000418A 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000418E 6400                       		bcc.s	loc_3DC6
00004190 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004194 6600                       		bne.s	loc_3DCC
00004196                            
00004196                            loc_3DC6:
00004196 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
0000419C                            
0000419C                            loc_3DCC:
0000419C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041A0 4E75                       		rts	
000041A2                            ; ===========================================================================
000041A2                            
000041A2                            loc_3DD2:
000041A2 5302                       		subq.b	#1,d2
000041A4 6600                       		bne.s	loc_3E0E
000041A6 323C 0188                  		move.w	#$188,d1
000041AA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000041AE 6500                       		bcs.s	loc_3E04
000041B0 323C 0900                  		move.w	#$900,d1
000041B4 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000041B8 6500                       		bcs.s	loc_3E04
000041BA 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000041C0 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000041C6 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000041CC 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000041D2 4E75                       		rts	
000041D4                            ; ===========================================================================
000041D4                            
000041D4                            loc_3E04:
000041D4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041D8 31C1 F648                  		move.w	d1,($FFFFF648).w
000041DC 4E75                       		rts	
000041DE                            ; ===========================================================================
000041DE                            
000041DE                            loc_3E0E:
000041DE 0C40 1E00                  		cmpi.w	#$1E00,d0
000041E2 6500                       		bcs.s	locret_3E1A
000041E4 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
000041EA                            
000041EA                            locret_3E1A:
000041EA 4E75                       		rts	
000041EC                            ; ===========================================================================
000041EC                            
000041EC                            DynWater_SBZ3:				; XREF: DynWater_Index
000041EC 323C 0228                  		move.w	#$228,d1
000041F0 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
000041F6 6500                       		bcs.s	loc_3E2C
000041F8 323C 04C8                  		move.w	#$4C8,d1
000041FC                            
000041FC                            loc_3E2C:
000041FC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004200 4E75                       		rts
00004202                            
00004202                            ; ---------------------------------------------------------------------------
00004202                            ; Labyrinth Zone "wind tunnels"	subroutine
00004202                            ; ---------------------------------------------------------------------------
00004202                            
00004202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004202                            
00004202                            
00004202                            LZWindTunnels:				; XREF: LZWaterEffects
00004202 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004206 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000420A 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004210 7000                       		moveq	#0,d0
00004212 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004216 E748                       		lsl.w	#3,d0
00004218 D4C0                       		adda.w	d0,a2
0000421A 7200                       		moveq	#0,d1
0000421C 4A38 FE11                  		tst.b	($FFFFFE11).w
00004220 6600                       		bne.s	loc_3E56
00004222 7201                       		moveq	#1,d1
00004224 514A                       		subq.w	#8,a2
00004226                            
00004226                            loc_3E56:
00004226 43F8 D000                  		lea	($FFFFD000).w,a1
0000422A                            
0000422A                            LZWind_Loop:
0000422A 3029 0008                  		move.w	8(a1),d0
0000422E B052                       		cmp.w	(a2),d0
00004230 6500 0000                  		bcs.w	loc_3EF4
00004234 B06A 0004                  		cmp.w	4(a2),d0
00004238 6400 0000                  		bcc.w	loc_3EF4
0000423C 3429 000C                  		move.w	$C(a1),d2
00004240 B46A 0002                  		cmp.w	2(a2),d2
00004244 6500                       		bcs.s	loc_3EF4
00004246 B46A 0006                  		cmp.w	6(a2),d2
0000424A 6400                       		bcc.s	loc_3EF4
0000424C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004250 0200 003F                  		andi.b	#$3F,d0
00004254 6600                       		bne.s	loc_3E90
00004256 303C 00D0                  		move.w	#$D0,d0
0000425A 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004260                            
00004260                            loc_3E90:
00004260 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004264 6600 0000                  		bne.w	locret_3F0A
00004268 0C29 0004 0024             		cmpi.b	#4,$24(a1)
0000426E 6400                       		bcc.s	loc_3F06
00004270 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004276 0440 0080                  		subi.w	#$80,d0
0000427A B052                       		cmp.w	(a2),d0
0000427C 6400                       		bcc.s	LZWind_Move
0000427E 7002                       		moveq	#2,d0
00004280 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004286 6600                       		bne.s	loc_3EBA
00004288 4440                       		neg.w	d0
0000428A                            
0000428A                            loc_3EBA:
0000428A D169 000C                  		add.w	d0,$C(a1)
0000428E                            
0000428E                            LZWind_Move:
0000428E 5869 0008                  		addq.w	#4,8(a1)
00004292 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004298 337C 0000 0012             		move.w	#0,$12(a1)
0000429E 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000042A4 08E9 0001 0022             		bset	#1,$22(a1)
000042AA 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
000042B0 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000042B2 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000042B6                            
000042B6                            LZWind_MoveDown:
000042B6 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000042BC 6700                       		beq.s	locret_3EF2	; if not, branch
000042BE 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000042C2                            
000042C2                            locret_3EF2:
000042C2 4E75                       		rts	
000042C4                            ; ===========================================================================
000042C4                            
000042C4                            loc_3EF4:				; XREF: LZWindTunnels
000042C4 504A                       		addq.w	#8,a2
000042C6 51C9 FF62                  		dbf	d1,LZWind_Loop
000042CA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000042CE 6700                       		beq.s	locret_3F0A
000042D0 137C 0000 001C             		move.b	#0,$1C(a1)
000042D6                            
000042D6                            loc_3F06:
000042D6 4238 F7C7                  		clr.b	($FFFFF7C7).w
000042DA                            
000042DA                            locret_3F0A:
000042DA 4E75                       		rts	
000042DC                            ; End of function LZWindTunnels
000042DC                            
000042DC                            ; ===========================================================================
000042DC 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000042E4 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
000042F6 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004304                            					; XREF: LZWindTunnels
00004304                            		even
00004304                            
00004304                            ; ---------------------------------------------------------------------------
00004304                            ; Labyrinth Zone water slide subroutine
00004304                            ; ---------------------------------------------------------------------------
00004304                            
00004304                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004304                            
00004304                            
00004304                            LZWaterSlides:				; XREF: LZWaterEffects
00004304 43F8 D000                  		lea	($FFFFD000).w,a1
00004308 0829 0001 0022             		btst	#1,$22(a1)
0000430E 6600                       		bne.s	loc_3F6A
00004310 3029 000C                  		move.w	$C(a1),d0
00004314 E248                       		lsr.w	#1,d0
00004316 0240 0380                  		andi.w	#$380,d0
0000431A 1229 0008                  		move.b	8(a1),d1
0000431E 0241 007F                  		andi.w	#$7F,d1
00004322 D041                       		add.w	d1,d0
00004324 45F8 A400                  		lea	($FFFFA400).w,a2
00004328 1032 0000                  		move.b	(a2,d0.w),d0
0000432C 45FA 0000                  		lea	byte_3FCF(pc),a2
00004330 7206                       		moveq	#6,d1
00004332                            
00004332                            loc_3F62:
00004332 B022                       		cmp.b	-(a2),d0
00004334 57C9 FFFC                  		dbeq	d1,loc_3F62
00004338 6700                       		beq.s	LZSlide_Move
0000433A                            
0000433A                            loc_3F6A:
0000433A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0000433E 6700                       		beq.s	locret_3F7A
00004340 337C 0005 003E             		move.w	#5,$3E(a1)
00004346 4238 F7CA                  		clr.b	($FFFFF7CA).w
0000434A                            
0000434A                            locret_3F7A:
0000434A 4E75                       		rts	
0000434C                            ; ===========================================================================
0000434C                            
0000434C                            LZSlide_Move:				; XREF: LZWaterSlides
0000434C 0C41 0003                  		cmpi.w	#3,d1
00004350 6400                       		bcc.s	loc_3F84
00004352 4E71                       		nop	
00004354                            
00004354                            loc_3F84:
00004354 08A9 0000 0022             		bclr	#0,$22(a1)
0000435A 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
0000435E 1340 0014                  		move.b	d0,$14(a1)
00004362 6A00                       		bpl.s	loc_3F9A
00004364 08E9 0000 0022             		bset	#0,$22(a1)
0000436A                            
0000436A                            loc_3F9A:
0000436A 4229 0015                  		clr.b	$15(a1)
0000436E 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004374 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
0000437A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000437E 0200 001F                  		andi.b	#$1F,d0
00004382 6600                       		bne.s	locret_3FBE
00004384 303C 00D0                  		move.w	#$D0,d0
00004388 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play water sound
0000438E                            
0000438E                            locret_3FBE:
0000438E 4E75                       		rts	
00004390                            ; End of function LZWaterSlides
00004390                            
00004390                            ; ===========================================================================
00004390 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000439F 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000043A0                            		even
000043A0                            
000043A0                            ; ---------------------------------------------------------------------------
000043A0                            ; Subroutine to	move Sonic in demo mode
000043A0                            ; ---------------------------------------------------------------------------
000043A0                            
000043A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000043A0                            
000043A0                            
000043A0                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000043A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000043A4 6600                       		bne.s	MoveDemo_On	; if yes, branch
000043A6 4E75                       		rts	
000043A8                            ; ===========================================================================
000043A8                            
000043A8                            ; This is an unused subroutine for recording a demo
000043A8                            
000043A8                            MoveDemo_Record:
000043A8 43F9 0008 0000             		lea	($80000).l,a1
000043AE 3038 F790                  		move.w	($FFFFF790).w,d0
000043B2 D2C0                       		adda.w	d0,a1
000043B4 1038 F604                  		move.b	($FFFFF604).w,d0
000043B8 B011                       		cmp.b	(a1),d0
000043BA 6600                       		bne.s	loc_3FFA
000043BC 5229 0001                  		addq.b	#1,1(a1)
000043C0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000043C6 6700                       		beq.s	loc_3FFA
000043C8 4E75                       		rts	
000043CA                            ; ===========================================================================
000043CA                            
000043CA                            loc_3FFA:				; XREF: MoveDemo_Record
000043CA 1340 0002                  		move.b	d0,2(a1)
000043CE 137C 0000 0003             		move.b	#0,3(a1)
000043D4 5478 F790                  		addq.w	#2,($FFFFF790).w
000043D8 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000043DE 4E75                       		rts	
000043E0                            ; ===========================================================================
000043E0                            
000043E0                            MoveDemo_On:				; XREF: MoveSonicInDemo
000043E0 4A38 F604                  		tst.b	($FFFFF604).w
000043E4 6A00                       		bpl.s	loc_4022
000043E6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000043EA 6B00                       		bmi.s	loc_4022
000043EC 11FC 0004 F600             		move.b	#4,($FFFFF600).w
000043F2                            
000043F2                            loc_4022:
000043F2 43F9 0000 0000             		lea	(Demo_Index).l,a1
000043F8 7000                       		moveq	#0,d0
000043FA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000043FE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004404 6600                       		bne.s	loc_4038
00004406 7006                       		moveq	#6,d0
00004408                            
00004408                            loc_4038:
00004408 E548                       		lsl.w	#2,d0
0000440A 2271 0000                  		movea.l	(a1,d0.w),a1
0000440E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004412 6A00                       		bpl.s	loc_4056
00004414 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000441A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000441E 5340                       		subq.w	#1,d0
00004420 E548                       		lsl.w	#2,d0
00004422 2271 0000                  		movea.l	(a1,d0.w),a1
00004426                            
00004426                            loc_4056:
00004426 3038 F790                  		move.w	($FFFFF790).w,d0
0000442A D2C0                       		adda.w	d0,a1
0000442C 1011                       		move.b	(a1),d0
0000442E 41F8 F604                  		lea	($FFFFF604).w,a0
00004432 1200                       		move.b	d0,d1
00004434 1410                       		move.b	(a0),d2
00004436 B500                       		eor.b	d2,d0
00004438 10C1                       		move.b	d1,(a0)+
0000443A C001                       		and.b	d1,d0
0000443C 10C0                       		move.b	d0,(a0)+
0000443E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004442 6400                       		bcc.s	locret_407E
00004444 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000444A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000444E                            
0000444E                            locret_407E:
0000444E 4E75                       		rts	
00004450                            ; End of function MoveSonicInDemo
00004450                            
00004450                            ; ===========================================================================
00004450                            ; ---------------------------------------------------------------------------
00004450                            ; Demo sequence	pointers
00004450                            ; ---------------------------------------------------------------------------
00004450                            Demo_Index:
00004450                            	include "_inc\Demo pointers for intro.asm"
00004450                            ; ---------------------------------------------------------------------------
00004450                            ; Demo sequence	pointers
00004450                            ; ---------------------------------------------------------------------------
00004450 0000 0000                  	dc.l Demo_GHZ
00004454 0000 0000                  	dc.l Demo_GHZ
00004458 0000 0000                  	dc.l Demo_MZ
0000445C 0000 0000                  	dc.l Demo_MZ
00004460 0000 0000                  	dc.l Demo_SYZ
00004464 0000 0000                  	dc.l Demo_SYZ
00004468 0000 0000                  	dc.l Demo_SS
0000446C 0000 0000                  	dc.l Demo_SS
0000446C 0000 0000                  	dc.l Demo_SS
00004470                            
00004470                            Demo_EndIndex:
00004470                            	include "_inc\Demo pointers for ending.asm"
00004470                            ; ---------------------------------------------------------------------------
00004470                            ; Demo (ending) sequence pointers
00004470                            ; ---------------------------------------------------------------------------
00004470 0000 0000                  	dc.l Demo_EndGHZ1
00004474 0000 0000                  	dc.l Demo_EndMZ
00004478 0000 0000                  	dc.l Demo_EndSYZ
0000447C 0000 0000                  	dc.l Demo_EndLZ
00004480 0000 0000                  	dc.l Demo_EndSLZ
00004484 0000 0000                  	dc.l Demo_EndSBZ1
00004488 0000 0000                  	dc.l Demo_EndSBZ2
0000448C 0000 0000                  	dc.l Demo_EndGHZ2
0000448C 0000 0000                  	dc.l Demo_EndGHZ2
00004490                            
00004490 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000044A0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000044B0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000044C0                            		even
000044C0                            
000044C0                            ; ---------------------------------------------------------------------------
000044C0                            ; Collision index loading subroutine
000044C0                            ; ---------------------------------------------------------------------------
000044C0                            
000044C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044C0                            
000044C0                            
000044C0                            ColIndexLoad:				; XREF: Level
000044C0 7000                       		moveq	#0,d0
000044C2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044C6 E548                       		lsl.w	#2,d0
000044C8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000044CE 4E75                       		rts	
000044D0                            ; End of function ColIndexLoad
000044D0                            
000044D0                            ; ===========================================================================
000044D0                            ; ---------------------------------------------------------------------------
000044D0                            ; Collision index pointers
000044D0                            ; ---------------------------------------------------------------------------
000044D0                            ColPointers:
000044D0                            	include "_inc\Collision index pointers.asm"
000044D0                            ; ---------------------------------------------------------------------------
000044D0                            ; Collision index pointers
000044D0                            ; ---------------------------------------------------------------------------
000044D0 0000 0000                  	dc.l Col_GHZ
000044D4 0000 0000                  	dc.l Col_LZ
000044D8 0000 0000                  	dc.l Col_MZ
000044DC 0000 0000                  	dc.l Col_SLZ
000044E0 0000 0000                  	dc.l Col_SYZ
000044E4 0000 0000                  	dc.l Col_SBZ
000044E4 0000 0000                  	dc.l Col_SBZ
000044E8                            
000044E8                            ; ---------------------------------------------------------------------------
000044E8                            ; Oscillating number subroutine
000044E8                            ; ---------------------------------------------------------------------------
000044E8                            
000044E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044E8                            
000044E8                            
000044E8                            OscillateNumInit:			; XREF: Level
000044E8 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044EC 45F9 0000 0000             		lea	(Osc_Data).l,a2
000044F2 7220                       		moveq	#$20,d1
000044F4                            
000044F4                            Osc_Loop:
000044F4 32DA                       		move.w	(a2)+,(a1)+
000044F6 51C9 FFFC                  		dbf	d1,Osc_Loop
000044FA 4E75                       		rts	
000044FC                            ; End of function OscillateNumInit
000044FC                            
000044FC                            ; ===========================================================================
000044FC 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004500 0000 0080                  		dc.w 0,	$80
00004504 0000 0080                  		dc.w 0,	$80
00004508 0000 0080                  		dc.w 0,	$80
0000450C 0000 0080                  		dc.w 0,	$80
00004510 0000 0080                  		dc.w 0,	$80
00004514 0000 0080                  		dc.w 0,	$80
00004518 0000 0080                  		dc.w 0,	$80
0000451C 0000 0080                  		dc.w 0,	$80
00004520 0000 50F0                  		dc.w 0,	$50F0
00004524 011E 2080                  		dc.w $11E, $2080
00004528 00B4 3080                  		dc.w $B4, $3080
0000452C 010E 5080                  		dc.w $10E, $5080
00004530 01C2 7080                  		dc.w $1C2, $7080
00004534 0276 0080                  		dc.w $276, $80
00004538 0000 0080                  		dc.w 0,	$80
0000453C 0000                       		dc.w 0
0000453E                            		even
0000453E                            
0000453E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000453E                            
0000453E                            
0000453E                            OscillateNumDo:				; XREF: Level
0000453E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004544 6400                       		bcc.s	locret_41C4
00004546 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000454A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004550 3619                       		move.w	(a1)+,d3
00004552 720F                       		moveq	#$F,d1
00004554                            
00004554                            loc_4184:
00004554 341A                       		move.w	(a2)+,d2
00004556 381A                       		move.w	(a2)+,d4
00004558 0303                       		btst	d1,d3
0000455A 6600                       		bne.s	loc_41A4
0000455C 3029 0002                  		move.w	2(a1),d0
00004560 D042                       		add.w	d2,d0
00004562 3340 0002                  		move.w	d0,2(a1)
00004566 D151                       		add.w	d0,0(a1)
00004568 B811                       		cmp.b	0(a1),d4
0000456A 6200                       		bhi.s	loc_41BA
0000456C 03C3                       		bset	d1,d3
0000456E 6000                       		bra.s	loc_41BA
00004570                            ; ===========================================================================
00004570                            
00004570                            loc_41A4:				; XREF: OscillateNumDo
00004570 3029 0002                  		move.w	2(a1),d0
00004574 9042                       		sub.w	d2,d0
00004576 3340 0002                  		move.w	d0,2(a1)
0000457A D151                       		add.w	d0,0(a1)
0000457C B811                       		cmp.b	0(a1),d4
0000457E 6300                       		bls.s	loc_41BA
00004580 0383                       		bclr	d1,d3
00004582                            
00004582                            loc_41BA:
00004582 5849                       		addq.w	#4,a1
00004584 51C9 FFCE                  		dbf	d1,loc_4184
00004588 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
0000458C                            
0000458C                            locret_41C4:
0000458C 4E75                       		rts	
0000458E                            ; End of function OscillateNumDo
0000458E                            
0000458E                            ; ===========================================================================
0000458E 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004592 0002 0018                  		dc.w 2,	$18
00004596 0002 0020                  		dc.w 2,	$20
0000459A 0002 0030                  		dc.w 2,	$30
0000459E 0004 0020                  		dc.w 4,	$20
000045A2 0008 0008                  		dc.w 8,	8
000045A6 0008 0040                  		dc.w 8,	$40
000045AA 0004 0040                  		dc.w 4,	$40
000045AE 0002 0050                  		dc.w 2,	$50
000045B2 0002 0050                  		dc.w 2,	$50
000045B6 0002 0020                  		dc.w 2,	$20
000045BA 0003 0030                  		dc.w 3,	$30
000045BE 0005 0050                  		dc.w 5,	$50
000045C2 0007 0070                  		dc.w 7,	$70
000045C6 0002 0010                  		dc.w 2,	$10
000045CA 0002 0010                  		dc.w 2,	$10
000045CE                            		even
000045CE                            
000045CE                            ; ---------------------------------------------------------------------------
000045CE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000045CE                            ; ---------------------------------------------------------------------------
000045CE                            
000045CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045CE                            
000045CE                            
000045CE                            ChangeRingFrame:			; XREF: Level
000045CE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000045D2 6A00                       		bpl.s	loc_421C
000045D4 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000045DA 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000045DE 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000045E4                            
000045E4                            loc_421C:
000045E4 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000045E8 6A00                       		bpl.s	loc_4232
000045EA 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
000045F0 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
000045F4 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
000045FA                            
000045FA                            loc_4232:
000045FA 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
000045FE 6A00                       		bpl.s	loc_4250
00004600 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004606 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000460A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004610 6500                       		bcs.s	loc_4250
00004612 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004618                            
00004618                            loc_4250:
00004618 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000461C 6700                       		beq.s	locret_4272
0000461E 7000                       		moveq	#0,d0
00004620 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004624 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004628 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000462C EF58                       		rol.w	#7,d0
0000462E 0240 0003                  		andi.w	#3,d0
00004632 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004636 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000463A                            
0000463A                            locret_4272:
0000463A 4E75                       		rts	
0000463C                            ; End of function ChangeRingFrame
0000463C                            
0000463C                            ; ---------------------------------------------------------------------------
0000463C                            ; End-of-act signpost pattern loading subroutine
0000463C                            ; ---------------------------------------------------------------------------
0000463C                            
0000463C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000463C                            
0000463C                            
0000463C                            SignpostArtLoad:			; XREF: Level
0000463C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004640 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004644 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000464A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000464C 3038 F700                  		move.w	($FFFFF700).w,d0
00004650 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004654 0441 0100                  		subi.w	#$100,d1
00004658 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000465A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000465C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004660 6700                       		beq.s	Signpost_Exit
00004662 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004666 6700                       		beq.s	Signpost_Exit
00004668 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000466C 7012                       		moveq	#$12,d0
0000466E 6000 D16C                  		bra.w	LoadPLC2	; load signpost	patterns
00004672                            ; ===========================================================================
00004672                            
00004672                            Signpost_Exit:
00004672 4E75                       		rts	
00004674                            ; End of function SignpostArtLoad
00004674                            
00004674                            ; ===========================================================================
00004674                            Demo_GHZ:	incbin	demodata\i_ghz.bin
000046F4                            Demo_MZ:	incbin	demodata\i_mz.bin
00004824                            Demo_SYZ:	incbin	demodata\i_syz.bin
000048A4                            Demo_SS:	incbin	demodata\i_ss.bin
000049A4                            ; ===========================================================================
000049A4                            
000049A4                            ; ---------------------------------------------------------------------------
000049A4                            ; Special Stage
000049A4                            ; ---------------------------------------------------------------------------
000049A4                            
000049A4                            SpecialStage:				; XREF: GameModeArray
000049A4 303C 00CA                  		move.w	#$CA,d0
000049A8 6100 CC1C                  		bsr.w	PlaySound_Special ; play special stage entry sound
000049AC 6100 D7BE                  		bsr.w	Pal_MakeFlash
000049B0 46FC 2700                  		move	#$2700,sr
000049B4 4DF9 00C0 0004             		lea	($C00004).l,a6
000049BA 3CBC 8B03                  		move.w	#$8B03,(a6)
000049BE 3CBC 8004                  		move.w	#$8004,(a6)
000049C2 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000049C8 3CBC 9011                  		move.w	#$9011,(a6)
000049CC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000049D0 0200 00BF                  		andi.b	#$BF,d0
000049D4 33C0 00C0 0004             		move.w	d0,($C00004).l
000049DA 6100 CB12                  		bsr.w	ClearScreen
000049DE 46FC 2300                  		move	#$2300,sr
000049E2 4BF9 00C0 0004             		lea	($C00004).l,a5
000049E8 3ABC 8F01                  		move.w	#$8F01,(a5)
000049EC 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
000049F2 3ABC 9780                  		move.w	#$9780,(a5)
000049F6 2ABC 5000 0081             		move.l	#$50000081,(a5)
000049FC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004A04                            
00004A04                            loc_463C:
00004A04 3215                       		move.w	(a5),d1
00004A06 0801 0001                  		btst	#1,d1
00004A0A 66F8                       		bne.s	loc_463C
00004A0C 3ABC 8F02                  		move.w	#$8F02,(a5)
00004A10 6100 0000                  		bsr.w	SS_BGLoad
00004A14 7014                       		moveq	#$14,d0
00004A16 6100 CEFE                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004A1A 43F8 D000                  		lea	($FFFFD000).w,a1
00004A1E 7000                       		moveq	#0,d0
00004A20 323C 07FF                  		move.w	#$7FF,d1
00004A24                            
00004A24                            SS_ClrObjRam:
00004A24 22C0                       		move.l	d0,(a1)+
00004A26 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004A2A                            
00004A2A 43F8 F700                  		lea	($FFFFF700).w,a1
00004A2E 7000                       		moveq	#0,d0
00004A30 323C 003F                  		move.w	#$3F,d1
00004A34                            
00004A34                            SS_ClrRam:
00004A34 22C0                       		move.l	d0,(a1)+
00004A36 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004A3A                            
00004A3A 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004A3E 7000                       		moveq	#0,d0
00004A40 323C 0027                  		move.w	#$27,d1
00004A44                            
00004A44                            SS_ClrRam2:
00004A44 22C0                       		move.l	d0,(a1)+
00004A46 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004A4A                            
00004A4A 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004A4E 7000                       		moveq	#0,d0
00004A50 323C 007F                  		move.w	#$7F,d1
00004A54                            
00004A54                            SS_ClrNemRam:
00004A54 22C0                       		move.l	d0,(a1)+
00004A56 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004A5A                            
00004A5A 4238 F64E                  		clr.b	($FFFFF64E).w
00004A5E 4278 FE02                  		clr.w	($FFFFFE02).w
00004A62 700A                       		moveq	#$A,d0
00004A64 6100 D886                  		bsr.w	PalLoad1	; load special stage pallet
00004A68 4EB9 0000 0000             		jsr	SS_Load
00004A6E 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004A76 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004A7E 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A84 6100 0000                  		bsr.w	PalCycle_SS
00004A88 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A8C 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A92 303C 0089                  		move.w	#$89,d0
00004A96 6100 CB28                  		bsr.w	PlaySound	; play special stage BG	music
00004A9A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004AA0 43F9 0000 4450             		lea	(Demo_Index).l,a1
00004AA6 7006                       		moveq	#6,d0
00004AA8 E548                       		lsl.w	#2,d0
00004AAA 2271 0000                  		movea.l	(a1,d0.w),a1
00004AAE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004AB4 5338 F792                  		subq.b	#1,($FFFFF792).w
00004AB8 4278 FE20                  		clr.w	($FFFFFE20).w
00004ABC 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004AC0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004AC6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004ACC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004AD0 6700                       		beq.s	SS_NoDebug	; if not, branch
00004AD2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004AD8 6700                       		beq.s	SS_NoDebug	; if not, branch
00004ADA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004AE0                            
00004AE0                            SS_NoDebug:
00004AE0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004AE4 0000 0040                  		ori.b	#$40,d0
00004AE8 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AEE 6100 D5D0                  		bsr.w	Pal_MakeWhite
00004AF2                            
00004AF2                            ; ---------------------------------------------------------------------------
00004AF2                            ; Main Special Stage loop
00004AF2                            ; ---------------------------------------------------------------------------
00004AF2                            
00004AF2                            SS_MainLoop:
00004AF2 6100 CADE                  		bsr.w	PauseGame
00004AF6 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004AFC 6100 E13A                  		bsr.w	DelayProgram
00004B00 6100 F89E                  		bsr.w	MoveSonicInDemo
00004B04 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B0A 4EB9 0000 0000             		jsr	ObjectsLoad
00004B10 4EB9 0000 0000             		jsr	BuildSprites
00004B16 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B1C 6100 0000                  		bsr.w	SS_BGAnimate
00004B20 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B24 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004B26 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004B2A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004B2E                            
00004B2E                            SS_ChkEnd:
00004B2E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004B34 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004B38                            
00004B38 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004B3C 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004B40 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004B46 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004B4C 6500                       		bcs.s	SS_End		; if not, branch
00004B4E 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004B52                            
00004B52                            SS_End:
00004B52 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004B58 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004B5E 4278 F794                  		clr.w	($FFFFF794).w
00004B62                            
00004B62                            SS_EndLoop:
00004B62 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004B68 6100 E0CE                  		bsr.w	DelayProgram
00004B6C 6100 F832                  		bsr.w	MoveSonicInDemo
00004B70 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004B76 4EB9 0000 0000             		jsr	ObjectsLoad
00004B7C 4EB9 0000 0000             		jsr	BuildSprites
00004B82 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B88 6100 0000                  		bsr.w	SS_BGAnimate
00004B8C 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B90 6A00                       		bpl.s	loc_47D4
00004B92 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B98 6100 D5F2                  		bsr.w	Pal_ToWhite
00004B9C                            
00004B9C                            loc_47D4:
00004B9C 4A78 F614                  		tst.w	($FFFFF614).w
00004BA0 66C0                       		bne.s	SS_EndLoop
00004BA2                            
00004BA2 46FC 2700                  		move	#$2700,sr
00004BA6 4DF9 00C0 0004             		lea	($C00004).l,a6
00004BAC 3CBC 8230                  		move.w	#$8230,(a6)
00004BB0 3CBC 8407                  		move.w	#$8407,(a6)
00004BB4 3CBC 9001                  		move.w	#$9001,(a6)
00004BB8 6100 C934                  		bsr.w	ClearScreen
00004BBC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004BC6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004BCC 6100 CA9C                  		bsr.w	NemDec
00004BD0 4EB9 0000 0000             		jsr	Hud_Base
00004BD6 46FC 2300                  		move	#$2300,sr
00004BDA 7011                       		moveq	#$11,d0
00004BDC 6100 D72A                  		bsr.w	PalLoad2	; load results screen pallet
00004BE0 7000                       		moveq	#0,d0
00004BE2 6100 CBF8                  		bsr.w	LoadPLC2
00004BE6 701B                       		moveq	#$1B,d0
00004BE8 6100 CBC0                  		bsr.w	LoadPLC		; load results screen patterns
00004BEC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004BF2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004BF8 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004BFC C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004C00 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004C04 303C 008E                  		move.w	#$8E,d0
00004C08 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004C0E 43F8 D000                  		lea	($FFFFD000).w,a1
00004C12 7000                       		moveq	#0,d0
00004C14 323C 07FF                  		move.w	#$7FF,d1
00004C18                            
00004C18                            SS_EndClrObjRam:
00004C18 22C0                       		move.l	d0,(a1)+
00004C1A 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004C1E                            
00004C1E 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004C24                            
00004C24                            SS_NormalExit:
00004C24 6100 C9AC                  		bsr.w	PauseGame
00004C28 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004C2E 6100 E008                  		bsr.w	DelayProgram
00004C32 4EB9 0000 0000             		jsr	ObjectsLoad
00004C38 4EB9 0000 0000             		jsr	BuildSprites
00004C3E 6100 CBD6                  		bsr.w	RunPLC_RAM
00004C42 4A78 FE02                  		tst.w	($FFFFFE02).w
00004C46 67DC                       		beq.s	SS_NormalExit
00004C48 4AB8 F680                  		tst.l	($FFFFF680).w
00004C4C 66D6                       		bne.s	SS_NormalExit
00004C4E 303C 00CA                  		move.w	#$CA,d0
00004C52 6100 C972                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004C56 6100 D514                  		bsr.w	Pal_MakeFlash
00004C5A 4E75                       		rts	
00004C5C                            ; ===========================================================================
00004C5C                            
00004C5C                            SS_ToSegaScreen:
00004C5C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004C62 4E75                       		rts
00004C64                            
00004C64                            ; ---------------------------------------------------------------------------
00004C64                            ; Special stage	background loading subroutine
00004C64                            ; ---------------------------------------------------------------------------
00004C64                            
00004C64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C64                            
00004C64                            
00004C64                            SS_BGLoad:				; XREF: SpecialStage
00004C64 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C6A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004C70 303C 4051                  		move.w	#$4051,d0
00004C74 6100 CCD2                  		bsr.w	EniDec
00004C78 263C 5000 0001             		move.l	#$50000001,d3
00004C7E 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C84 7E06                       		moveq	#6,d7
00004C86                            
00004C86                            loc_48BE:
00004C86 2003                       		move.l	d3,d0
00004C88 7C03                       		moveq	#3,d6
00004C8A 7800                       		moveq	#0,d4
00004C8C 0C47 0003                  		cmpi.w	#3,d7
00004C90 6400                       		bcc.s	loc_48CC
00004C92 7801                       		moveq	#1,d4
00004C94                            
00004C94                            loc_48CC:
00004C94 7A07                       		moveq	#7,d5
00004C96                            
00004C96                            loc_48CE:
00004C96 224A                       		movea.l	a2,a1
00004C98 0A04 0001                  		eori.b	#1,d4
00004C9C 6600                       		bne.s	loc_48E2
00004C9E 0C47 0006                  		cmpi.w	#6,d7
00004CA2 6600                       		bne.s	loc_48F2
00004CA4 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CAA                            
00004CAA                            loc_48E2:
00004CAA 48E7 F800                  		movem.l	d0-d4,-(sp)
00004CAE 7207                       		moveq	#7,d1
00004CB0 7407                       		moveq	#7,d2
00004CB2 6100 C996                  		bsr.w	ShowVDPGraphics
00004CB6 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004CBA                            
00004CBA                            loc_48F2:
00004CBA 0680 0010 0000             		addi.l	#$100000,d0
00004CC0 51CD FFD4                  		dbf	d5,loc_48CE
00004CC4 0680 0380 0000             		addi.l	#$3800000,d0
00004CCA 0A04 0001                  		eori.b	#1,d4
00004CCE 51CE FFC4                  		dbf	d6,loc_48CC
00004CD2 0683 1000 0000             		addi.l	#$10000000,d3
00004CD8 6A00                       		bpl.s	loc_491C
00004CDA 4843                       		swap	d3
00004CDC 0683 0000 C000             		addi.l	#$C000,d3
00004CE2 4843                       		swap	d3
00004CE4                            
00004CE4                            loc_491C:
00004CE4 D4FC 0080                  		adda.w	#$80,a2
00004CE8 51CF FF9C                  		dbf	d7,loc_48BE
00004CEC 43F9 00FF 0000             		lea	($FF0000).l,a1
00004CF2 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004CF8 303C 4000                  		move.w	#$4000,d0
00004CFC 6100 CC4A                  		bsr.w	EniDec
00004D00 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D06 203C 4000 0003             		move.l	#$40000003,d0
00004D0C 723F                       		moveq	#$3F,d1
00004D0E 741F                       		moveq	#$1F,d2
00004D10 6100 C938                  		bsr.w	ShowVDPGraphics
00004D14 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D1A 203C 5000 0003             		move.l	#$50000003,d0
00004D20 723F                       		moveq	#$3F,d1
00004D22 743F                       		moveq	#$3F,d2
00004D24 6100 C924                  		bsr.w	ShowVDPGraphics
00004D28 4E75                       		rts	
00004D2A                            ; End of function SS_BGLoad
00004D2A                            
00004D2A                            ; ---------------------------------------------------------------------------
00004D2A                            ; Pallet cycling routine - special stage
00004D2A                            ; ---------------------------------------------------------------------------
00004D2A                            
00004D2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D2A                            
00004D2A                            
00004D2A                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004D2A 4A78 F63A                  		tst.w	($FFFFF63A).w
00004D2E 6600                       		bne.s	locret_49E6
00004D30 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004D34 6A00                       		bpl.s	locret_49E6
00004D36 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D3C 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004D40 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004D44 0240 001F                  		andi.w	#$1F,d0
00004D48 E548                       		lsl.w	#2,d0
00004D4A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004D50 D0C0                       		adda.w	d0,a0
00004D52 1018                       		move.b	(a0)+,d0
00004D54 6A00                       		bpl.s	loc_4992
00004D56 303C 01FF                  		move.w	#$1FF,d0
00004D5A                            
00004D5A                            loc_4992:
00004D5A 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004D5E 7000                       		moveq	#0,d0
00004D60 1018                       		move.b	(a0)+,d0
00004D62 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004D66 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004D6C 43F1 0000                  		lea	(a1,d0.w),a1
00004D70 303C 8200                  		move.w	#-$7E00,d0
00004D74 1019                       		move.b	(a1)+,d0
00004D76 3C80                       		move.w	d0,(a6)
00004D78 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004D7C 303C 8400                  		move.w	#-$7C00,d0
00004D80 1018                       		move.b	(a0)+,d0
00004D82 3C80                       		move.w	d0,(a6)
00004D84 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D8E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D96 7000                       		moveq	#0,d0
00004D98 1018                       		move.b	(a0)+,d0
00004D9A 6B00                       		bmi.s	loc_49E8
00004D9C 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004DA2 D2C0                       		adda.w	d0,a1
00004DA4 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004DA8 24D9                       		move.l	(a1)+,(a2)+
00004DAA 24D9                       		move.l	(a1)+,(a2)+
00004DAC 24D9                       		move.l	(a1)+,(a2)+
00004DAE                            
00004DAE                            locret_49E6:
00004DAE 4E75                       		rts	
00004DB0                            ; ===========================================================================
00004DB0                            
00004DB0                            loc_49E8:				; XREF: PalCycle_SS
00004DB0 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004DB4 0C40 008A                  		cmpi.w	#$8A,d0
00004DB8 6500                       		bcs.s	loc_49F4
00004DBA 5241                       		addq.w	#1,d1
00004DBC                            
00004DBC                            loc_49F4:
00004DBC C2FC 002A                  		mulu.w	#$2A,d1
00004DC0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004DC6 D2C1                       		adda.w	d1,a1
00004DC8 0240 007F                  		andi.w	#$7F,d0
00004DCC 0880 0000                  		bclr	#0,d0
00004DD0 6700                       		beq.s	loc_4A18
00004DD2 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004DD6 24D1                       		move.l	(a1),(a2)+
00004DD8 24E9 0004                  		move.l	4(a1),(a2)+
00004DDC 24E9 0008                  		move.l	8(a1),(a2)+
00004DE0                            
00004DE0                            loc_4A18:
00004DE0 D2FC 000C                  		adda.w	#$C,a1
00004DE4 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004DE8 0C40 000A                  		cmpi.w	#$A,d0
00004DEC 6500                       		bcs.s	loc_4A2E
00004DEE 0440 000A                  		subi.w	#$A,d0
00004DF2 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004DF6                            
00004DF6                            loc_4A2E:
00004DF6 3200                       		move.w	d0,d1
00004DF8 D040                       		add.w	d0,d0
00004DFA D041                       		add.w	d1,d0
00004DFC D2C0                       		adda.w	d0,a1
00004DFE 24D9                       		move.l	(a1)+,(a2)+
00004E00 34D9                       		move.w	(a1)+,(a2)+
00004E02 4E75                       		rts	
00004E04                            ; End of function PalCycle_SS
00004E04                            
00004E04                            ; ===========================================================================
00004E04 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004E14                            					; XREF: PalCycle_SS
00004E14 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004E24 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004E34 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004E44 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004E54 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004E64 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004E74 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E84                            		even
00004E84 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E92                            					; XREF: PalCycle_SS
00004E92                            		even
00004E92                            
00004E92                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004EDA                            		even
00004EDA                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004FAC                            		even
00004FAC                            
00004FAC                            ; ---------------------------------------------------------------------------
00004FAC                            ; Subroutine to	make the special stage background animated
00004FAC                            ; ---------------------------------------------------------------------------
00004FAC                            
00004FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FAC                            
00004FAC                            
00004FAC                            SS_BGAnimate:				; XREF: SpecialStage
00004FAC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004FB0 6600                       		bne.s	loc_4BF6
00004FB2 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004FB8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004FBE                            
00004FBE                            loc_4BF6:
00004FBE 0C40 0008                  		cmpi.w	#8,d0
00004FC2 6400                       		bcc.s	loc_4C4E
00004FC4 0C40 0006                  		cmpi.w	#6,d0
00004FC8 6600                       		bne.s	loc_4C10
00004FCA 5278 F718                  		addq.w	#1,($FFFFF718).w
00004FCE 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004FD2 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004FD8                            
00004FD8                            loc_4C10:
00004FD8 7000                       		moveq	#0,d0
00004FDA 3038 F708                  		move.w	($FFFFF708).w,d0
00004FDE 4440                       		neg.w	d0
00004FE0 4840                       		swap	d0
00004FE2 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004FE8 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004FEC 7609                       		moveq	#9,d3
00004FEE                            
00004FEE                            loc_4C26:
00004FEE 302B 0002                  		move.w	2(a3),d0
00004FF2 6100 DC76                  		bsr.w	CalcSine
00004FF6 7400                       		moveq	#0,d2
00004FF8 1419                       		move.b	(a1)+,d2
00004FFA C1C2                       		muls.w	d2,d0
00004FFC E080                       		asr.l	#8,d0
00004FFE 36C0                       		move.w	d0,(a3)+
00005000 1419                       		move.b	(a1)+,d2
00005002 4882                       		ext.w	d2
00005004 D55B                       		add.w	d2,(a3)+
00005006 51CB FFE6                  		dbf	d3,loc_4C26
0000500A 47F8 AA00                  		lea	($FFFFAA00).w,a3
0000500E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005014 6000                       		bra.s	loc_4C7E
00005016                            ; ===========================================================================
00005016                            
00005016                            loc_4C4E:				; XREF: SS_BGAnimate
00005016 0C40 000C                  		cmpi.w	#$C,d0
0000501A 6600                       		bne.s	loc_4C74
0000501C 5378 F718                  		subq.w	#1,($FFFFF718).w
00005020 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005024 243C 0001 8000             		move.l	#$18000,d2
0000502A 7206                       		moveq	#6,d1
0000502C                            
0000502C                            loc_4C64:
0000502C 2013                       		move.l	(a3),d0
0000502E 9082                       		sub.l	d2,d0
00005030 26C0                       		move.l	d0,(a3)+
00005032 0482 0000 2000             		subi.l	#$2000,d2
00005038 51C9 FFF2                  		dbf	d1,loc_4C64
0000503C                            
0000503C                            loc_4C74:
0000503C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005040 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00005046                            
00005046                            loc_4C7E:
00005046 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000504A 3038 F718                  		move.w	($FFFFF718).w,d0
0000504E 4440                       		neg.w	d0
00005050 4840                       		swap	d0
00005052 7600                       		moveq	#0,d3
00005054 161A                       		move.b	(a2)+,d3
00005056 3438 F70C                  		move.w	($FFFFF70C).w,d2
0000505A 4442                       		neg.w	d2
0000505C 0242 00FF                  		andi.w	#$FF,d2
00005060 E54A                       		lsl.w	#2,d2
00005062                            
00005062                            loc_4C9A:
00005062 301B                       		move.w	(a3)+,d0
00005064 544B                       		addq.w	#2,a3
00005066 7200                       		moveq	#0,d1
00005068 121A                       		move.b	(a2)+,d1
0000506A 5341                       		subq.w	#1,d1
0000506C                            
0000506C                            loc_4CA4:
0000506C 2380 2000                  		move.l	d0,(a1,d2.w)
00005070 5842                       		addq.w	#4,d2
00005072 0242 03FC                  		andi.w	#$3FC,d2
00005076 51C9 FFF4                  		dbf	d1,loc_4CA4
0000507A 51CB FFE6                  		dbf	d3,loc_4C9A
0000507E 4E75                       		rts	
00005080                            ; End of function SS_BGAnimate
00005080                            
00005080                            ; ===========================================================================
00005080 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
0000508C                            		even
0000508C 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005094                            		even
00005094 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000050A8                            		even
000050A8                            					; XREF: SS_BGAnimate
000050A8                            ; ===========================================================================
000050A8                            
000050A8                            ; ---------------------------------------------------------------------------
000050A8                            ; Continue screen
000050A8                            ; ---------------------------------------------------------------------------
000050A8                            
000050A8                            ContinueScreen:				; XREF: GameModeArray
000050A8 6100 CF98                  		bsr.w	Pal_FadeFrom
000050AC 46FC 2700                  		move	#$2700,sr
000050B0 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050B4 0200 00BF                  		andi.b	#$BF,d0
000050B8 33C0 00C0 0004             		move.w	d0,($C00004).l
000050BE 4DF9 00C0 0004             		lea	($C00004).l,a6
000050C4 3CBC 8004                  		move.w	#$8004,(a6)
000050C8 3CBC 8700                  		move.w	#$8700,(a6)
000050CC 6100 C420                  		bsr.w	ClearScreen
000050D0 43F8 D000                  		lea	($FFFFD000).w,a1
000050D4 7000                       		moveq	#0,d0
000050D6 323C 07FF                  		move.w	#$7FF,d1
000050DA                            
000050DA                            Cont_ClrObjRam:
000050DA 22C0                       		move.l	d0,(a1)+
000050DC 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000050E0                            
000050E0 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000050EA 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000050F0 6100 C578                  		bsr.w	NemDec
000050F4 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
000050FE 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005104 6100 C564                  		bsr.w	NemDec
00005108 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005112 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005118 6100 C550                  		bsr.w	NemDec
0000511C 720A                       		moveq	#10,d1
0000511E 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005124 7012                       		moveq	#$12,d0
00005126 6100 D1C4                  		bsr.w	PalLoad1	; load continue	screen pallet
0000512A 103C 0090                  		move.b	#$90,d0
0000512E 6100 C490                  		bsr.w	PlaySound	; play continue	music
00005132 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005138 42B8 F700                  		clr.l	($FFFFF700).w
0000513C 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005144 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
0000514A 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005150 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005156 11FC 0003 D098             		move.b	#3,($FFFFD098).w
0000515C 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005162 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005168 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
0000516E 4EB9 0000 0000             		jsr	ObjectsLoad
00005174 4EB9 0000 0000             		jsr	BuildSprites
0000517A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000517E 0000 0040                  		ori.b	#$40,d0
00005182 33C0 00C0 0004             		move.w	d0,($C00004).l
00005188 6100 CE12                  		bsr.w	Pal_FadeTo
0000518C                            
0000518C                            ; ---------------------------------------------------------------------------
0000518C                            ; Continue screen main loop
0000518C                            ; ---------------------------------------------------------------------------
0000518C                            
0000518C                            Cont_MainLoop:
0000518C 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005192 6100 DAA4                  		bsr.w	DelayProgram
00005196 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000519C 6400                       		bcc.s	loc_4DF2
0000519E 46FC 2700                  		move	#$2700,sr
000051A2 3238 F614                  		move.w	($FFFFF614).w,d1
000051A6 82FC 003C                  		divu.w	#$3C,d1
000051AA 0281 0000 000F             		andi.l	#$F,d1
000051B0 4EB9 0000 0000             		jsr	ContScrCounter
000051B6 46FC 2300                  		move	#$2300,sr
000051BA                            
000051BA                            loc_4DF2:
000051BA 4EB9 0000 0000             		jsr	ObjectsLoad
000051C0 4EB9 0000 0000             		jsr	BuildSprites
000051C6 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000051CC 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000051CE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000051D4 64B6                       		bcc.s	Cont_MainLoop
000051D6 4A78 F614                  		tst.w	($FFFFF614).w
000051DA 6600 FFB0                  		bne.w	Cont_MainLoop
000051DE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000051E4 4E75                       		rts	
000051E6                            ; ===========================================================================
000051E6                            
000051E6                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000051E6 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000051EC 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000051F2 7000                       		moveq	#0,d0
000051F4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000051F8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000051FC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005200 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005204 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005208 4E75                       		rts	
0000520A                            ; ===========================================================================
0000520A                            
0000520A                            ; ---------------------------------------------------------------------------
0000520A                            ; Object 80 - Continue screen elements
0000520A                            ; ---------------------------------------------------------------------------
0000520A                            
0000520A                            Obj80:					; XREF: Obj_Index
0000520A 7000                       		moveq	#0,d0
0000520C 1028 0024                  		move.b	$24(a0),d0
00005210 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005214 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005218                            ; ===========================================================================
00005218 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000521A 0000                       		dc.w Obj80_Display-Obj80_Index
0000521C 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000521E 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005220                            ; ===========================================================================
00005220                            
00005220                            Obj80_Main:				; XREF: Obj80_Index
00005220 5428 0024                  		addq.b	#2,$24(a0)
00005224 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000522C 317C 8500 0002             		move.w	#$8500,2(a0)
00005232 117C 0000 0001             		move.b	#0,1(a0)
00005238 117C 003C 0019             		move.b	#$3C,$19(a0)
0000523E 317C 0120 0008             		move.w	#$120,8(a0)
00005244 317C 00C0 000A             		move.w	#$C0,$A(a0)
0000524A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005250                            
00005250                            Obj80_Display:				; XREF: Obj80_Index
00005250 4EF9 0000 0000             		jmp	DisplaySprite
00005256                            ; ===========================================================================
00005256                            Obj80_MiniSonicPos:
00005256 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005268 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005274                            ; ===========================================================================
00005274                            
00005274                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005274 2248                       		movea.l	a0,a1
00005276 45F9 0000 5256             		lea	(Obj80_MiniSonicPos).l,a2
0000527C 7200                       		moveq	#0,d1
0000527E 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005282 5501                       		subq.b	#2,d1
00005284 6400                       		bcc.s	loc_4EC4
00005286 4EF9 0000 0000             		jmp	DeleteObject
0000528C                            ; ===========================================================================
0000528C                            
0000528C                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
0000528C 7601                       		moveq	#1,d3
0000528E 0C01 000E                  		cmpi.b	#$E,d1
00005292 6500                       		bcs.s	loc_4ED0
00005294 7600                       		moveq	#0,d3
00005296 720E                       		moveq	#$E,d1
00005298                            
00005298                            loc_4ED0:
00005298 1401                       		move.b	d1,d2
0000529A 0202 0001                  		andi.b	#1,d2
0000529E                            
0000529E                            Obj80_MiniSonLoop:
0000529E 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000052A2 335A 0008                  		move.w	(a2)+,8(a1)
000052A6 4A02                       		tst.b	d2
000052A8 6700                       		beq.s	loc_4EEA
000052AA 0469 000A 0008             		subi.w	#$A,8(a1)
000052B0                            
000052B0                            loc_4EEA:
000052B0 337C 00D0 000A             		move.w	#$D0,$A(a1)
000052B6 137C 0006 001A             		move.b	#6,$1A(a1)
000052BC 137C 0006 0024             		move.b	#6,$24(a1)
000052C2 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000052CA 337C 8551 0002             		move.w	#$8551,2(a1)
000052D0 137C 0000 0001             		move.b	#0,1(a1)
000052D6 43E9 0040                  		lea	$40(a1),a1
000052DA 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000052DE 43E9 FFC0                  		lea	-$40(a1),a1
000052E2 1343 0028                  		move.b	d3,$28(a1)
000052E6                            
000052E6                            Obj80_ChkType:				; XREF: Obj80_Index
000052E6 4A28 0028                  		tst.b	$28(a0)
000052EA 6700                       		beq.s	loc_4F40
000052EC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052F2 6500                       		bcs.s	loc_4F40
000052F4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000052F8 0200 0001                  		andi.b	#1,d0
000052FC 6600                       		bne.s	loc_4F40
000052FE 4A78 D010                  		tst.w	($FFFFD010).w
00005302 6600                       		bne.s	Obj80_Delete
00005304 4E75                       		rts	
00005306                            ; ===========================================================================
00005306                            
00005306                            loc_4F40:				; XREF: Obj80_ChkType
00005306 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000530A 0200 000F                  		andi.b	#$F,d0
0000530E 6600                       		bne.s	Obj80_Display2
00005310 0868 0000 001A             		bchg	#0,$1A(a0)
00005316                            
00005316                            Obj80_Display2:
00005316 4EF9 0000 0000             		jmp	DisplaySprite
0000531C                            ; ===========================================================================
0000531C                            
0000531C                            Obj80_Delete:				; XREF: Obj80_ChkType
0000531C 4EF9 0000 0000             		jmp	DeleteObject
00005322                            ; ===========================================================================
00005322                            
00005322                            ; ---------------------------------------------------------------------------
00005322                            ; Object 81 - Sonic on the continue screen
00005322                            ; ---------------------------------------------------------------------------
00005322                            
00005322                            Obj81:					; XREF: Obj_Index
00005322 7000                       		moveq	#0,d0
00005324 1028 0024                  		move.b	$24(a0),d0
00005328 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
0000532C 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005330 4EF9 0000 0000             		jmp	DisplaySprite
00005336                            ; ===========================================================================
00005336 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005338 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000533A 0000                       		dc.w Obj81_Animate-Obj81_Index
0000533C 0000                       		dc.w Obj81_Run-Obj81_Index
0000533E                            ; ===========================================================================
0000533E                            
0000533E                            Obj81_Main:				; XREF: Obj81_Index
0000533E 5428 0024                  		addq.b	#2,$24(a0)
00005342 317C 00A0 0008             		move.w	#$A0,8(a0)
00005348 317C 00C0 000C             		move.w	#$C0,$C(a0)
0000534E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005356 317C 0780 0002             		move.w	#$780,2(a0)
0000535C 117C 0004 0001             		move.b	#4,1(a0)
00005362 117C 0002 0018             		move.b	#2,$18(a0)
00005368 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
0000536E 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005374                            
00005374                            Obj81_ChkLand:				; XREF: Obj81_Index
00005374 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
0000537A 6600                       		bne.s	Obj81_ShowFall	; if not, branch
0000537C 5428 0024                  		addq.b	#2,$24(a0)
00005380 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005384 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
0000538C 317C 8500 0002             		move.w	#$8500,2(a0)
00005392 117C 0000 001C             		move.b	#0,$1C(a0)
00005398 6000                       		bra.s	Obj81_Animate
0000539A                            ; ===========================================================================
0000539A                            
0000539A                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
0000539A 4EB9 0000 0000             		jsr	SpeedToPos
000053A0 4EB9 0000 0000             		jsr	Sonic_Animate
000053A6 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000053AC                            ; ===========================================================================
000053AC                            
000053AC                            Obj81_Animate:				; XREF: Obj81_Index
000053AC 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000053B0 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000053B2 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000053B8 4EF9 0000 0000             		jmp	AnimateSprite
000053BE                            ; ===========================================================================
000053BE                            
000053BE                            Obj81_GetUp:				; XREF: Obj81_Animate
000053BE 5428 0024                  		addq.b	#2,$24(a0)
000053C2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000053CA 317C 0780 0002             		move.w	#$780,2(a0)
000053D0 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000053D6 4268 0014                  		clr.w	$14(a0)
000053DA 5168 000C                  		subq.w	#8,$C(a0)
000053DE 103C 00E0                  		move.b	#$E0,d0
000053E2 6100 C1E2                  		bsr.w	PlaySound_Special ; fade out music
000053E6                            
000053E6                            Obj81_Run:				; XREF: Obj81_Index
000053E6 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
000053EC 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
000053EE 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
000053F4 6000                       		bra.s	Obj81_ShowRun
000053F6                            ; ===========================================================================
000053F6                            
000053F6                            Obj81_AddSpeed:				; XREF: Obj81_Run
000053F6 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
000053FC                            
000053FC                            Obj81_ShowRun:				; XREF: Obj81_Run
000053FC 4EB9 0000 0000             		jsr	SpeedToPos
00005402 4EB9 0000 0000             		jsr	Sonic_Animate
00005408 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000540E                            ; ===========================================================================
0000540E                            Ani_obj81:
0000540E                            	include "_anim\obj81.asm"
0000540E                            ; ---------------------------------------------------------------------------
0000540E                            ; Animation script - Sonic on the continue screen
0000540E                            ; ---------------------------------------------------------------------------
0000540E 0000                       		dc.w byte_504A-Ani_obj81
00005410 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000541C 00                         		even
0000541C 00                         		even
0000541C                            
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            ; Sprite mappings - Continue screen
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            Map_obj80:
0000541C                            	include "_maps\obj80.asm"
0000541C                            ; ---------------------------------------------------------------------------
0000541C                            ; Sprite mappings - Continue screen
0000541C                            ; ---------------------------------------------------------------------------
0000541C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005420 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005424 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005428 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000542C 0B                         byte_5066:	dc.b $B
0000542D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005432 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005437 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000543C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005441 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005446 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000544B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005450 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005455 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000545A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000545F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005464 03                         byte_509E:	dc.b 3
00005465 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000546A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000546F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005474 03                         byte_50AE:	dc.b 3
00005475 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
0000547A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000547F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005484 03                         byte_50BE:	dc.b 3
00005485 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
0000548A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000548F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005494 02                         byte_50CE:	dc.b 2
00005495 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
0000549A 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000549F 01                         byte_50D9:	dc.b 1
000054A0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000054A5 01                         byte_50DF:	dc.b 1
000054A6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000054AC 00                         		even
000054AC 00                         		even
000054AC                            
000054AC                            ; ===========================================================================
000054AC                            ; ---------------------------------------------------------------------------
000054AC                            ; Ending sequence in Green Hill	Zone
000054AC                            ; ---------------------------------------------------------------------------
000054AC                            
000054AC                            EndingSequence:				; XREF: GameModeArray
000054AC 103C 00E4                  		move.b	#$E4,d0
000054B0 6100 C114                  		bsr.w	PlaySound_Special ; stop music
000054B4 6100 CB8C                  		bsr.w	Pal_FadeFrom
000054B8 43F8 D000                  		lea	($FFFFD000).w,a1
000054BC 7000                       		moveq	#0,d0
000054BE 323C 07FF                  		move.w	#$7FF,d1
000054C2                            
000054C2                            End_ClrObjRam:
000054C2 22C0                       		move.l	d0,(a1)+
000054C4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000054C8                            
000054C8 43F8 F628                  		lea	($FFFFF628).w,a1
000054CC 7000                       		moveq	#0,d0
000054CE 323C 0015                  		move.w	#$15,d1
000054D2                            
000054D2                            End_ClrRam:
000054D2 22C0                       		move.l	d0,(a1)+
000054D4 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000054D8                            
000054D8 43F8 F700                  		lea	($FFFFF700).w,a1
000054DC 7000                       		moveq	#0,d0
000054DE 323C 003F                  		move.w	#$3F,d1
000054E2                            
000054E2                            End_ClrRam2:
000054E2 22C0                       		move.l	d0,(a1)+
000054E4 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000054E8                            
000054E8 43F8 FE60                  		lea	($FFFFFE60).w,a1
000054EC 7000                       		moveq	#0,d0
000054EE 323C 0047                  		move.w	#$47,d1
000054F2                            
000054F2                            End_ClrRam3:
000054F2 22C0                       		move.l	d0,(a1)+
000054F4 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
000054F8                            
000054F8 46FC 2700                  		move	#$2700,sr
000054FC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005500 0200 00BF                  		andi.b	#$BF,d0
00005504 33C0 00C0 0004             		move.w	d0,($C00004).l
0000550A 6100 BFE2                  		bsr.w	ClearScreen
0000550E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005514 3CBC 8B03                  		move.w	#$8B03,(a6)
00005518 3CBC 8230                  		move.w	#$8230,(a6)
0000551C 3CBC 8407                  		move.w	#$8407,(a6)
00005520 3CBC 857C                  		move.w	#$857C,(a6)
00005524 3CBC 9001                  		move.w	#$9001,(a6)
00005528 3CBC 8004                  		move.w	#$8004,(a6)
0000552C 3CBC 8720                  		move.w	#$8720,(a6)
00005530 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005536 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000553A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005540 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005546 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000554C 6700                       		beq.s	End_LoadData	; if yes, branch
0000554E 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005554                            
00005554                            End_LoadData:
00005554 701C                       		moveq	#$1C,d0
00005556 6100 C3BE                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000555A 4EB9 0000 0000             		jsr	Hud_Base
00005560 6100 0000                  		bsr.w	LevelSizeLoad
00005564 6100 0000                  		bsr.w	DeformBgLayer
00005568 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000556E 6100 0000                  		bsr.w	MainLoadBlockLoad
00005572 6100 0000                  		bsr.w	LoadTilesFromStart
00005576 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
0000557E 46FC 2300                  		move	#$2300,sr
00005582 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005588 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
0000558C 6100 C538                  		bsr.w	KosDec
00005590 7003                       		moveq	#3,d0
00005592 6100 CD58                  		bsr.w	PalLoad1	; load Sonic's pallet
00005596 303C 008B                  		move.w	#$8B,d0
0000559A 6100 C024                  		bsr.w	PlaySound	; play ending sequence music
0000559E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000055A4 6700                       		beq.s	End_LoadSonic	; if not, branch
000055A6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000055AC                            
000055AC                            End_LoadSonic:
000055AC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000055B2 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000055B8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000055BE 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000055C4 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000055CA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000055D0 4EB9 0000 0000             		jsr	ObjPosLoad
000055D6 4EB9 0000 0000             		jsr	ObjectsLoad
000055DC 4EB9 0000 0000             		jsr	BuildSprites
000055E2 7000                       		moveq	#0,d0
000055E4 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000055E8 21C0 FE22                  		move.l	d0,($FFFFFE22).w
000055EC 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
000055F0 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
000055F4 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
000055F8 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
000055FC 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005600 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005604 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005608 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000560C 6100 EEDA                  		bsr.w	OscillateNumInit
00005610 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005616 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000561C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005622 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005628 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000562E 6100 D608                  		bsr.w	DelayProgram
00005632 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005636 0000 0040                  		ori.b	#$40,d0
0000563A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005640 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005646 6100 C954                  		bsr.w	Pal_FadeTo
0000564A                            
0000564A                            ; ---------------------------------------------------------------------------
0000564A                            ; Main ending sequence loop
0000564A                            ; ---------------------------------------------------------------------------
0000564A                            
0000564A                            End_MainLoop:
0000564A 6100 BF86                  		bsr.w	PauseGame
0000564E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005654 6100 D5E2                  		bsr.w	DelayProgram
00005658 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000565C 6100 0000                  		bsr.w	End_MoveSonic
00005660 4EB9 0000 0000             		jsr	ObjectsLoad
00005666 6100 0000                  		bsr.w	DeformBgLayer
0000566A 4EB9 0000 0000             		jsr	BuildSprites
00005670 4EB9 0000 0000             		jsr	ObjPosLoad
00005676 6100 C4EE                  		bsr.w	PalCycle_Load
0000567A 6100 EEC2                  		bsr.w	OscillateNumDo
0000567E 6100 EF4E                  		bsr.w	ChangeRingFrame
00005682 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005688 6700                       		beq.s	loc_52DA	; if yes, branch
0000568A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005690 103C 0091                  		move.b	#$91,d0
00005694 6100 BF30                  		bsr.w	PlaySound_Special ; play credits music
00005698 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000569E 4E75                       		rts	
000056A0                            ; ===========================================================================
000056A0                            
000056A0                            loc_52DA:
000056A0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000056A4 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000056A8                            
000056A8 4278 FE02                  		clr.w	($FFFFFE02).w
000056AC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000056B2 4278 F794                  		clr.w	($FFFFF794).w
000056B6                            
000056B6                            End_AllEmlds:				; XREF: loc_5334
000056B6 6100 BF1A                  		bsr.w	PauseGame
000056BA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000056C0 6100 D576                  		bsr.w	DelayProgram
000056C4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000056C8 6100 0000                  		bsr.w	End_MoveSonic
000056CC 4EB9 0000 0000             		jsr	ObjectsLoad
000056D2 6100 0000                  		bsr.w	DeformBgLayer
000056D6 4EB9 0000 0000             		jsr	BuildSprites
000056DC 4EB9 0000 0000             		jsr	ObjPosLoad
000056E2 6100 EE5A                  		bsr.w	OscillateNumDo
000056E6 6100 EEE6                  		bsr.w	ChangeRingFrame
000056EA 5378 F794                  		subq.w	#1,($FFFFF794).w
000056EE 6A00                       		bpl.s	loc_5334
000056F0 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000056F6 6100 CA94                  		bsr.w	Pal_ToWhite
000056FA                            
000056FA                            loc_5334:
000056FA 4A78 FE02                  		tst.w	($FFFFFE02).w
000056FE 6700 FFB6                  		beq.w	End_AllEmlds
00005702 4278 FE02                  		clr.w	($FFFFFE02).w
00005706 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000570C 4BF9 00C0 0004             		lea	($C00004).l,a5
00005712 4DF9 00C0 0000             		lea	($C00000).l,a6
00005718 47F8 F700                  		lea	($FFFFF700).w,a3
0000571C 49F8 A400                  		lea	($FFFFA400).w,a4
00005720 343C 4000                  		move.w	#$4000,d2
00005724 6100 0000                  		bsr.w	LoadTilesFromStart2
00005728 7013                       		moveq	#$13,d0
0000572A 6100 CBC0                  		bsr.w	PalLoad1	; load ending pallet
0000572E 6100 C990                  		bsr.w	Pal_MakeWhite
00005732 6000 FF16                  		bra.w	End_MainLoop
00005736                            
00005736                            ; ---------------------------------------------------------------------------
00005736                            ; Subroutine controlling Sonic on the ending sequence
00005736                            ; ---------------------------------------------------------------------------
00005736                            
00005736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005736                            
00005736                            
00005736                            End_MoveSonic:				; XREF: End_MainLoop
00005736 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000573A 6600                       		bne.s	End_MoveSonic2
0000573C 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005742 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005744 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005748 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000574E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005754 4E75                       		rts	
00005756                            ; ===========================================================================
00005756                            
00005756                            End_MoveSonic2:				; XREF: End_MoveSonic
00005756 5500                       		subq.b	#2,d0
00005758 6600                       		bne.s	End_MoveSonic3
0000575A 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005760 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005762 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005766 7000                       		moveq	#0,d0
00005768 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000576C 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005770 31C0 D014                  		move.w	d0,($FFFFD014).w
00005774 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
0000577A 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005780 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005786 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
0000578C 4E75                       		rts	
0000578E                            ; ===========================================================================
0000578E                            
0000578E                            End_MoveSonic3:				; XREF: End_MoveSonic
0000578E 5500                       		subq.b	#2,d0
00005790 6600                       		bne.s	End_MoveSonExit
00005792 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005796 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
0000579C 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000057A2 4278 D024                  		clr.w	($FFFFD024).w
000057A6                            
000057A6                            End_MoveSonExit:
000057A6 4E75                       		rts	
000057A8                            ; End of function End_MoveSonic
000057A8                            
000057A8                            ; ===========================================================================
000057A8                            ; ---------------------------------------------------------------------------
000057A8                            ; Object 87 - Sonic on ending sequence
000057A8                            ; ---------------------------------------------------------------------------
000057A8                            
000057A8                            Obj87:					; XREF: Obj_Index
000057A8 7000                       		moveq	#0,d0
000057AA 1028 0025                  		move.b	$25(a0),d0
000057AE 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000057B2 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000057B6 4EF9 0000 0000             		jmp	DisplaySprite
000057BC                            ; ===========================================================================
000057BC 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000057C0 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000057C4 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000057C8 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000057CC 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000057D0                            ; ===========================================================================
000057D0                            
000057D0                            Obj87_Main:				; XREF: Obj87_Index
000057D0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000057D6 6700                       		beq.s	Obj87_Main2	; if yes, branch
000057D8 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000057DE 317C 00D8 0030             		move.w	#$D8,$30(a0)
000057E4 4E75                       		rts	
000057E6                            ; ===========================================================================
000057E6                            
000057E6                            Obj87_Main2:				; XREF: Obj87_Main
000057E6 5428 0025                  		addq.b	#2,$25(a0)
000057EA 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000057F2 317C 03E1 0002             		move.w	#$3E1,2(a0)
000057F8 117C 0004 0001             		move.b	#4,1(a0)
000057FE 4228 0022                  		clr.b	$22(a0)
00005802 117C 0002 0018             		move.b	#2,$18(a0)
00005808 117C 0000 001A             		move.b	#0,$1A(a0)
0000580E 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005814                            
00005814                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005814 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005818 6600                       		bne.s	Obj87_Wait
0000581A 5428 0025                  		addq.b	#2,$25(a0)
0000581E 317C 0001 001C             		move.w	#1,$1C(a0)
00005824 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000582A                            
0000582A                            Obj87_Wait:
0000582A 4E75                       		rts	
0000582C                            ; ===========================================================================
0000582C                            
0000582C                            Obj87_LookUp:				; XREF: Obj87_Index
0000582C 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005834 6600                       		bne.s	locret_5480
00005836 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000583C 317C 005A 0030             		move.w	#$5A,$30(a0)
00005842 5428 0025                  		addq.b	#2,$25(a0)
00005846                            
00005846                            locret_5480:
00005846 4E75                       		rts	
00005848                            ; ===========================================================================
00005848                            
00005848                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005848 5368 0030                  		subq.w	#1,$30(a0)
0000584C 6600                       		bne.s	Obj87_Wait2
0000584E 43F8 D400                  		lea	($FFFFD400).w,a1
00005852 323C 00FF                  		move.w	#$FF,d1
00005856                            
00005856                            Obj87_ClrLoop:
00005856 4299                       		clr.l	(a1)+
00005858 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000585C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005862 5428 0025                  		addq.b	#2,$25(a0)
00005866 117C 0001 001C             		move.b	#1,$1C(a0)
0000586C 317C 003C 0030             		move.w	#$3C,$30(a0)
00005872                            
00005872                            Obj87_Wait2:
00005872 4E75                       		rts	
00005874                            ; ===========================================================================
00005874                            
00005874                            Obj87_MakeLogo:				; XREF: Obj87_Index
00005874 5368 0030                  		subq.w	#1,$30(a0)
00005878 6600                       		bne.s	Obj87_Wait3
0000587A 5428 0025                  		addq.b	#2,$25(a0)
0000587E 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005884 117C 0002 001C             		move.b	#2,$1C(a0)
0000588A 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005890                            
00005890                            Obj87_Wait3:
00005890 4E75                       		rts	
00005892                            ; ===========================================================================
00005892                            
00005892                            Obj87_Animate:				; XREF: Obj87_Index
00005892 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005898 4EF9 0000 0000             		jmp	AnimateSprite
0000589E                            ; ===========================================================================
0000589E                            
0000589E                            Obj87_Leap:				; XREF: Obj87_Index
0000589E 5368 0030                  		subq.w	#1,$30(a0)
000058A2 6600                       		bne.s	Obj87_Wait4
000058A4 5428 0025                  		addq.b	#2,$25(a0)
000058A8 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000058B0 317C 03E1 0002             		move.w	#$3E1,2(a0)
000058B6 117C 0004 0001             		move.b	#4,1(a0)
000058BC 4228 0022                  		clr.b	$22(a0)
000058C0 117C 0002 0018             		move.b	#2,$18(a0)
000058C6 117C 0005 001A             		move.b	#5,$1A(a0)
000058CC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000058D2 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000058D8 60B8                       		bra.s	Obj87_Animate
000058DA                            ; ===========================================================================
000058DA                            
000058DA                            Obj87_Wait4:				; XREF: Obj87_Leap
000058DA 4E75                       		rts	
000058DC                            ; ===========================================================================
000058DC                            Ani_obj87:
000058DC                            	include "_anim\obj87.asm"
000058DC                            ; ---------------------------------------------------------------------------
000058DC                            ; Animation script - Sonic on the ending sequence
000058DC                            ; ---------------------------------------------------------------------------
000058DC 0000                       		dc.w byte_551C-Ani_obj87
000058DE 0000                       		dc.w byte_552A-Ani_obj87
000058E0 0000                       		dc.w byte_5534-Ani_obj87
000058E2 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
000058F0 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
000058FA 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005902                            		even
00005902                            		even
00005902                            
00005902                            ; ===========================================================================
00005902                            ; ---------------------------------------------------------------------------
00005902                            ; Object 88 - chaos emeralds on	the ending sequence
00005902                            ; ---------------------------------------------------------------------------
00005902                            
00005902                            Obj88:					; XREF: Obj_Index
00005902 7000                       		moveq	#0,d0
00005904 1028 0024                  		move.b	$24(a0),d0
00005908 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000590C 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005910 4EF9 0000 0000             		jmp	DisplaySprite
00005916                            ; ===========================================================================
00005916 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005918 0000                       		dc.w Obj88_Move-Obj88_Index
0000591A                            ; ===========================================================================
0000591A                            
0000591A                            Obj88_Main:				; XREF: Obj88_Index
0000591A 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005920 6700                       		beq.s	Obj88_Main2
00005922 588F                       		addq.l	#4,sp
00005924 4E75                       		rts	
00005926                            ; ===========================================================================
00005926                            
00005926                            Obj88_Main2:				; XREF: Obj88_Main
00005926 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000592C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005932 2248                       		movea.l	a0,a1
00005934 7600                       		moveq	#0,d3
00005936 7401                       		moveq	#1,d2
00005938 7205                       		moveq	#5,d1
0000593A                            
0000593A                            Obj88_MainLoop:
0000593A 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000593E 5429 0024                  		addq.b	#2,$24(a1)
00005942 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000594A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005950 137C 0004 0001             		move.b	#4,1(a1)
00005956 137C 0001 0018             		move.b	#1,$18(a1)
0000595C 3368 0008 0038             		move.w	8(a0),$38(a1)
00005962 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005968 1342 001C                  		move.b	d2,$1C(a1)
0000596C 1342 001A                  		move.b	d2,$1A(a1)
00005970 5202                       		addq.b	#1,d2
00005972 1343 0026                  		move.b	d3,$26(a1)
00005976 0603 002A                  		addi.b	#$2A,d3
0000597A 43E9 0040                  		lea	$40(a1),a1
0000597E 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005982                            
00005982                            Obj88_Move:				; XREF: Obj88_Index
00005982 3028 003E                  		move.w	$3E(a0),d0
00005986 D168 0026                  		add.w	d0,$26(a0)
0000598A 1028 0026                  		move.b	$26(a0),d0
0000598E 4EB9 0000 2C6A             		jsr	(CalcSine).l
00005994 7800                       		moveq	#0,d4
00005996 1828 003C                  		move.b	$3C(a0),d4
0000599A C3C4                       		muls.w	d4,d1
0000599C E081                       		asr.l	#8,d1
0000599E C1C4                       		muls.w	d4,d0
000059A0 E080                       		asr.l	#8,d0
000059A2 D268 0038                  		add.w	$38(a0),d1
000059A6 D068 003A                  		add.w	$3A(a0),d0
000059AA 3141 0008                  		move.w	d1,8(a0)
000059AE 3140 000C                  		move.w	d0,$C(a0)
000059B2 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000059B8 6700                       		beq.s	loc_55FA
000059BA 0668 0020 003C             		addi.w	#$20,$3C(a0)
000059C0                            
000059C0                            loc_55FA:
000059C0 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000059C6 6700                       		beq.s	loc_5608
000059C8 0668 0020 003E             		addi.w	#$20,$3E(a0)
000059CE                            
000059CE                            loc_5608:
000059CE 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
000059D4 6700                       		beq.s	locret_5614
000059D6 5368 003A                  		subq.w	#1,$3A(a0)
000059DA                            
000059DA                            locret_5614:
000059DA 4E75                       		rts	
000059DC                            ; ===========================================================================
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            
000059DC                            Obj89:					; XREF: Obj_Index
000059DC 7000                       		moveq	#0,d0
000059DE 1028 0024                  		move.b	$24(a0),d0
000059E2 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
000059E6 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
000059EA                            ; ===========================================================================
000059EA 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
000059EC 0000                       		dc.w Obj89_Move-Obj89_Index
000059EE 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
000059F0                            ; ===========================================================================
000059F0                            
000059F0                            Obj89_Main:				; XREF: Obj89_Index
000059F0 5428 0024                  		addq.b	#2,$24(a0)
000059F4 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
000059FA 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005A00 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005A08 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005A0E 117C 0000 0001             		move.b	#0,1(a0)
00005A14 117C 0000 0018             		move.b	#0,$18(a0)
00005A1A                            
00005A1A                            Obj89_Move:				; XREF: Obj89_Index
00005A1A 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005A20 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005A22 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005A28 4EB9 0000 0000             		jsr	DisplaySprite
00005A2E                            ; ===========================================================================
00005A2E                            
00005A2E                            Obj89_Delay:				; XREF: Obj89_Move
00005A2E 5428 0024                  		addq.b	#2,$24(a0)
00005A32 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005A38                            
00005A38                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005A38 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005A3C 6A00                       		bpl.s	Obj89_Display
00005A3E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005A44                            
00005A44                            Obj89_Display:
00005A44 4EB9 0000 0000             		jsr	DisplaySprite
00005A4A                            ; ===========================================================================
00005A4A                            ; ---------------------------------------------------------------------------
00005A4A                            ; Sprite mappings - Sonic on the ending	sequence
00005A4A                            ; ---------------------------------------------------------------------------
00005A4A                            Map_obj87:
00005A4A                            	include "_maps\obj87.asm"
00005A4A                            ; ---------------------------------------------------------------------------
00005A4A                            ; Sprite mappings - Sonic on the ending	sequence
00005A4A                            ; ---------------------------------------------------------------------------
00005A4A 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005A4E 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005A52 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005A56 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005A5A 02                         byte_5690:	dc.b 2
00005A5B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005A60 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005A65 03                         byte_569B:	dc.b 3
00005A66 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005A6B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005A70 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005A75 02                         byte_56AB:	dc.b 2
00005A76 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005A7B FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005A80 02                         byte_56B6:	dc.b 2
00005A81 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A86 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A8B 02                         byte_56C1:	dc.b 2
00005A8C EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A91 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A96 03                         byte_56CC:	dc.b 3
00005A97 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A9C EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005AA1 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005AA6 07                         byte_56DC:	dc.b 7
00005AA7 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005AAC BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005AB1 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005AB6 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005ABB DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005AC0 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005AC5 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005ACA 18                         byte_5700:	dc.b $18
00005ACB 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005AD0 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005AD5 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005ADA 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005ADF A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005AE4 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005AE9 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005AEE A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005AF3 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005AF8 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005AFD A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005B02 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005B07 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005B0C B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005B11 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005B16 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005B1B D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005B20 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005B25 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005B2A E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005B2F D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005B34 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005B39 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005B3E F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005B44 00                         		even
00005B44 00                         		even
00005B44                            
00005B44                            ; ---------------------------------------------------------------------------
00005B44                            ; Sprite mappings - chaos emeralds on the ending sequence
00005B44                            ; ---------------------------------------------------------------------------
00005B44                            Map_obj88:
00005B44                            	include "_maps\obj88.asm"
00005B44                            ; ---------------------------------------------------------------------------
00005B44                            ; Sprite mappings - chaos emeralds on the ending sequence
00005B44                            ; ---------------------------------------------------------------------------
00005B44 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005B48 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005B4C 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005B50 0000                       		dc.w byte_57AC-Map_obj88
00005B52 01                         byte_5788:	dc.b 1
00005B53 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005B58 01                         byte_578E:	dc.b 1
00005B59 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005B5E 01                         byte_5794:	dc.b 1
00005B5F F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005B64 01                         byte_579A:	dc.b 1
00005B65 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005B6A 01                         byte_57A0:	dc.b 1
00005B6B F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005B70 01                         byte_57A6:	dc.b 1
00005B71 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005B76 01                         byte_57AC:	dc.b 1
00005B77 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005B7C                            		even
00005B7C                            		even
00005B7C                            
00005B7C                            ; ---------------------------------------------------------------------------
00005B7C                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005B7C                            ; ---------------------------------------------------------------------------
00005B7C                            Map_obj89:
00005B7C                            	include "_maps\obj89.asm"
00005B7C                            ; ---------------------------------------------------------------------------
00005B7C                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005B7C                            ; ---------------------------------------------------------------------------
00005B7C 0000                       		dc.w byte_57B4-Map_obj89
00005B7E 03                         byte_57B4:	dc.b 3
00005B7F F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B84 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B89 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B8E                            		even
00005B8E                            		even
00005B8E                            
00005B8E                            ; ===========================================================================
00005B8E                            ; ---------------------------------------------------------------------------
00005B8E                            ; Credits ending sequence
00005B8E                            ; ---------------------------------------------------------------------------
00005B8E                            
00005B8E                            Credits:				; XREF: GameModeArray
00005B8E 6100 BC78                  		bsr.w	ClearPLC
00005B92 6100 C4AE                  		bsr.w	Pal_FadeFrom
00005B96 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B9C 3CBC 8004                  		move.w	#$8004,(a6)
00005BA0 3CBC 8230                  		move.w	#$8230,(a6)
00005BA4 3CBC 8407                  		move.w	#$8407,(a6)
00005BA8 3CBC 9001                  		move.w	#$9001,(a6)
00005BAC 3CBC 9200                  		move.w	#$9200,(a6)
00005BB0 3CBC 8B03                  		move.w	#$8B03,(a6)
00005BB4 3CBC 8720                  		move.w	#$8720,(a6)
00005BB8 4238 F64E                  		clr.b	($FFFFF64E).w
00005BBC 6100 B930                  		bsr.w	ClearScreen
00005BC0 43F8 D000                  		lea	($FFFFD000).w,a1
00005BC4 7000                       		moveq	#0,d0
00005BC6 323C 07FF                  		move.w	#$7FF,d1
00005BCA                            
00005BCA                            Cred_ClrObjRam:
00005BCA 22C0                       		move.l	d0,(a1)+
00005BCC 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005BD0                            
00005BD0 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005BDA 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005BE0 6100 BA88                  		bsr.w	NemDec
00005BE4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005BE8 7000                       		moveq	#0,d0
00005BEA 323C 001F                  		move.w	#$1F,d1
00005BEE                            
00005BEE                            Cred_ClrPallet:
00005BEE 22C0                       		move.l	d0,(a1)+
00005BF0 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005BF4                            
00005BF4 7003                       		moveq	#3,d0
00005BF6 6100 C6F4                  		bsr.w	PalLoad1	; load Sonic's pallet
00005BFA 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005C00 4EB9 0000 0000             		jsr	ObjectsLoad
00005C06 4EB9 0000 0000             		jsr	BuildSprites
00005C0C 6100 0000                  		bsr.w	EndingDemoLoad
00005C10 7000                       		moveq	#0,d0
00005C12 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005C16 E948                       		lsl.w	#4,d0
00005C18 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005C1E 45F2 0000                  		lea	(a2,d0.w),a2
00005C22 7000                       		moveq	#0,d0
00005C24 1012                       		move.b	(a2),d0
00005C26 6700                       		beq.s	loc_5862
00005C28 6100 BB80                  		bsr.w	LoadPLC		; load level patterns
00005C2C                            
00005C2C                            loc_5862:
00005C2C 7001                       		moveq	#1,d0
00005C2E 6100 BB7A                  		bsr.w	LoadPLC		; load standard	level patterns
00005C32 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005C38 6100 C362                  		bsr.w	Pal_FadeTo
00005C3C                            
00005C3C                            Cred_WaitLoop:
00005C3C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005C42 6100 CFF4                  		bsr.w	DelayProgram
00005C46 6100 BBCE                  		bsr.w	RunPLC_RAM
00005C4A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005C4E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005C50 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005C54 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005C56 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005C5C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005C60 4E75                       		rts	
00005C62                            
00005C62                            ; ---------------------------------------------------------------------------
00005C62                            ; Ending sequence demo loading subroutine
00005C62                            ; ---------------------------------------------------------------------------
00005C62                            
00005C62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005C62                            
00005C62                            
00005C62                            EndingDemoLoad:				; XREF: Credits
00005C62 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005C66 0240 000F                  		andi.w	#$F,d0
00005C6A D040                       		add.w	d0,d0
00005C6C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005C70 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005C74 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005C78 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005C7E 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005C80 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C86 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C8C 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005C92 7000                       		moveq	#0,d0
00005C94 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C98 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C9C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005CA0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005CA4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005CAA 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005CAC 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005CB2 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005CB6 303C 0008                  		move.w	#8,d0
00005CBA                            
00005CBA                            EndDemo_LampLoad:
00005CBA 24D9                       		move.l	(a1)+,(a2)+
00005CBC 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005CC0                            
00005CC0                            EndDemo_Exit:
00005CC0 4E75                       		rts	
00005CC2                            ; End of function EndingDemoLoad
00005CC2                            
00005CC2                            ; ===========================================================================
00005CC2                            ; ---------------------------------------------------------------------------
00005CC2                            ; Levels used in the end sequence demos
00005CC2                            ; ---------------------------------------------------------------------------
00005CC2                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005CD2                            
00005CD2                            ; ---------------------------------------------------------------------------
00005CD2                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005CD2                            ; ---------------------------------------------------------------------------
00005CD2                            EndDemo_LampVar:
00005CD2 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005CD4 0A00 062C 000D             		dc.w $A00, $62C, $D
00005CDA 0000 0000                  		dc.l 0
00005CDE 0000                       		dc.b 0,	0
00005CE0 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005CF4 0101                       		dc.b 1,	1
00005CF6                            ; ===========================================================================
00005CF6                            ; ---------------------------------------------------------------------------
00005CF6                            ; "TRY AGAIN" and "END"	screens
00005CF6                            ; ---------------------------------------------------------------------------
00005CF6                            
00005CF6                            TryAgainEnd:				; XREF: Credits
00005CF6 6100 BB10                  		bsr.w	ClearPLC
00005CFA 6100 C346                  		bsr.w	Pal_FadeFrom
00005CFE 4DF9 00C0 0004             		lea	($C00004).l,a6
00005D04 3CBC 8004                  		move.w	#$8004,(a6)
00005D08 3CBC 8230                  		move.w	#$8230,(a6)
00005D0C 3CBC 8407                  		move.w	#$8407,(a6)
00005D10 3CBC 9001                  		move.w	#$9001,(a6)
00005D14 3CBC 9200                  		move.w	#$9200,(a6)
00005D18 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D1C 3CBC 8720                  		move.w	#$8720,(a6)
00005D20 4238 F64E                  		clr.b	($FFFFF64E).w
00005D24 6100 B7C8                  		bsr.w	ClearScreen
00005D28 43F8 D000                  		lea	($FFFFD000).w,a1
00005D2C 7000                       		moveq	#0,d0
00005D2E 323C 07FF                  		move.w	#$7FF,d1
00005D32                            
00005D32                            TryAg_ClrObjRam:
00005D32 22C0                       		move.l	d0,(a1)+
00005D34 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005D38                            
00005D38 701D                       		moveq	#$1D,d0
00005D3A 6100 BBDA                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005D3E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D42 7000                       		moveq	#0,d0
00005D44 323C 001F                  		move.w	#$1F,d1
00005D48                            
00005D48                            TryAg_ClrPallet:
00005D48 22C0                       		move.l	d0,(a1)+
00005D4A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005D4E                            
00005D4E 7013                       		moveq	#$13,d0
00005D50 6100 C59A                  		bsr.w	PalLoad1	; load ending pallet
00005D54 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005D58 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005D5E 4EB9 0000 0000             		jsr	ObjectsLoad
00005D64 4EB9 0000 0000             		jsr	BuildSprites
00005D6A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005D70 6100 C22A                  		bsr.w	Pal_FadeTo
00005D74                            
00005D74                            ; ---------------------------------------------------------------------------
00005D74                            ; "TRY AGAIN" and "END"	screen main loop
00005D74                            ; ---------------------------------------------------------------------------
00005D74                            TryAg_MainLoop:
00005D74 6100 B85C                  		bsr.w	PauseGame
00005D78 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D7E 6100 CEB8                  		bsr.w	DelayProgram
00005D82 4EB9 0000 0000             		jsr	ObjectsLoad
00005D88 4EB9 0000 0000             		jsr	BuildSprites
00005D8E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D94 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D96 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D9A 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D9C 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005DA2 67D0                       		beq.s	TryAg_MainLoop
00005DA4                            
00005DA4                            TryAg_Exit:
00005DA4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005DAA 4E75                       		rts	
00005DAC                            
00005DAC                            ; ===========================================================================
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005DAC                            ; ---------------------------------------------------------------------------
00005DAC                            
00005DAC                            Obj8B:					; XREF: Obj_Index
00005DAC 7000                       		moveq	#0,d0
00005DAE 1028 0024                  		move.b	$24(a0),d0
00005DB2 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005DB6 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005DBA 4EF9 0000 0000             		jmp	DisplaySprite
00005DC0                            ; ===========================================================================
00005DC0 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005DC2 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005DC4 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005DC6 0000                       		dc.w loc_5A8E-Obj8B_Index
00005DC8                            ; ===========================================================================
00005DC8                            
00005DC8                            Obj8B_Main:				; XREF: Obj8B_Index
00005DC8 5428 0024                  		addq.b	#2,$24(a0)
00005DCC 317C 0120 0008             		move.w	#$120,8(a0)
00005DD2 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005DD8 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005DE0 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005DE6 117C 0000 0001             		move.b	#0,1(a0)
00005DEC 117C 0002 0018             		move.b	#2,$18(a0)
00005DF2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005DF8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005DFE 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005E00 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005E06 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005E0C 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005E12 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005E18                            
00005E18                            Obj8B_Animate:				; XREF: Obj8B_Index
00005E18 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005E1E 4EF9 0000 0000             		jmp	AnimateSprite
00005E24                            ; ===========================================================================
00005E24                            
00005E24                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005E24 5428 0024                  		addq.b	#2,$24(a0)
00005E28 7002                       		moveq	#2,d0
00005E2A 0828 0000 001C             		btst	#0,$1C(a0)
00005E30 6700                       		beq.s	loc_5A6A
00005E32 4440                       		neg.w	d0
00005E34                            
00005E34                            loc_5A6A:
00005E34 43F8 D800                  		lea	($FFFFD800).w,a1
00005E38 7205                       		moveq	#5,d1
00005E3A                            
00005E3A                            loc_5A70:
00005E3A 1340 003E                  		move.b	d0,$3E(a1)
00005E3E 3400                       		move.w	d0,d2
00005E40 E742                       		asl.w	#3,d2
00005E42 D529 0026                  		add.b	d2,$26(a1)
00005E46 43E9 0040                  		lea	$40(a1),a1
00005E4A 51C9 FFEE                  		dbf	d1,loc_5A70
00005E4E 5228 001A                  		addq.b	#1,$1A(a0)
00005E52 317C 0070 0030             		move.w	#112,$30(a0)
00005E58                            
00005E58                            loc_5A8E:				; XREF: Obj8B_Index
00005E58 5368 0030                  		subq.w	#1,$30(a0)
00005E5C 6A00                       		bpl.s	locret_5AA0
00005E5E 0868 0000 001C             		bchg	#0,$1C(a0)
00005E64 117C 0002 0024             		move.b	#2,$24(a0)
00005E6A                            
00005E6A                            locret_5AA0:
00005E6A 4E75                       		rts	
00005E6C                            ; ===========================================================================
00005E6C                            Ani_obj8B:
00005E6C                            	include "_anim\obj8B.asm"
00005E6C                            ; ---------------------------------------------------------------------------
00005E6C                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005E6C                            ; ---------------------------------------------------------------------------
00005E6C 0000                       		dc.w byte_5AA8-Ani_obj8B
00005E6E 0000                       		dc.w byte_5AAC-Ani_obj8B
00005E70 0000                       		dc.w byte_5AB0-Ani_obj8B
00005E72 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005E76 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005E7A 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E8C                            		even
00005E8C                            		even
00005E8C                            
00005E8C                            ; ===========================================================================
00005E8C                            ; ---------------------------------------------------------------------------
00005E8C                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E8C                            ; ---------------------------------------------------------------------------
00005E8C                            
00005E8C                            Obj8C:					; XREF: Obj_Index
00005E8C 7000                       		moveq	#0,d0
00005E8E 1028 0024                  		move.b	$24(a0),d0
00005E92 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E96 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E9A 4EF9 0000 0000             		jmp	DisplaySprite
00005EA0                            ; ===========================================================================
00005EA0 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005EA2 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005EA4                            ; ===========================================================================
00005EA4                            
00005EA4                            Obj8C_Main:				; XREF: Obj8C_Index
00005EA4 2248                       		movea.l	a0,a1
00005EA6 7400                       		moveq	#0,d2
00005EA8 7600                       		moveq	#0,d3
00005EAA 7205                       		moveq	#5,d1
00005EAC 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005EB0                            
00005EB0                            Obj8C_MakeEms:				; XREF: loc_5B42
00005EB0 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005EB4 5429 0024                  		addq.b	#2,$24(a1)
00005EB8 237C 0000 5B44 0004        		move.l	#Map_obj88,4(a1)
00005EC0 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005EC6 137C 0000 0001             		move.b	#0,1(a1)
00005ECC 137C 0001 0018             		move.b	#1,$18(a1)
00005ED2 337C 0104 0008             		move.w	#$104,8(a1)
00005ED8 337C 0120 0038             		move.w	#$120,$38(a1)
00005EDE 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005EE4 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005EEA 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005EF0 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005EF4                            
00005EF4                            Obj8C_ChkEms:
00005EF4 7000                       		moveq	#0,d0
00005EF6 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005EFA 5340                       		subq.w	#1,d0
00005EFC 6500                       		bcs.s	loc_5B42
00005EFE                            
00005EFE                            Obj8C_ChkEmLoop:
00005EFE B433 0000                  		cmp.b	(a3,d0.w),d2
00005F02 6600                       		bne.s	loc_5B3E
00005F04 5202                       		addq.b	#1,d2
00005F06 60EC                       		bra.s	Obj8C_ChkEms
00005F08                            ; ===========================================================================
00005F08                            
00005F08                            loc_5B3E:
00005F08 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005F0C                            
00005F0C                            loc_5B42:
00005F0C 1342 001A                  		move.b	d2,$1A(a1)
00005F10 5229 001A                  		addq.b	#1,$1A(a1)
00005F14 5202                       		addq.b	#1,d2
00005F16 137C 0080 0026             		move.b	#$80,$26(a1)
00005F1C 1343 001E                  		move.b	d3,$1E(a1)
00005F20 1343 001F                  		move.b	d3,$1F(a1)
00005F24 0643 000A                  		addi.w	#$A,d3
00005F28 43E9 0040                  		lea	$40(a1),a1
00005F2C 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005F30                            
00005F30                            Obj8C_Move:				; XREF: Obj8C_Index
00005F30 4A68 003E                  		tst.w	$3E(a0)
00005F34 6700                       		beq.s	locret_5BBA
00005F36 4A28 001E                  		tst.b	$1E(a0)
00005F3A 6700                       		beq.s	loc_5B78
00005F3C 5328 001E                  		subq.b	#1,$1E(a0)
00005F40 6600                       		bne.s	loc_5B80
00005F42                            
00005F42                            loc_5B78:
00005F42 3028 003E                  		move.w	$3E(a0),d0
00005F46 D168 0026                  		add.w	d0,$26(a0)
00005F4A                            
00005F4A                            loc_5B80:
00005F4A 1028 0026                  		move.b	$26(a0),d0
00005F4E 6700                       		beq.s	loc_5B8C
00005F50 0C00 0080                  		cmpi.b	#$80,d0
00005F54 6600                       		bne.s	loc_5B96
00005F56                            
00005F56                            loc_5B8C:
00005F56 4268 003E                  		clr.w	$3E(a0)
00005F5A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005F60                            
00005F60                            loc_5B96:
00005F60 4EB9 0000 2C6A             		jsr	(CalcSine).l
00005F66 7800                       		moveq	#0,d4
00005F68 1828 003C                  		move.b	$3C(a0),d4
00005F6C C3C4                       		muls.w	d4,d1
00005F6E E081                       		asr.l	#8,d1
00005F70 C1C4                       		muls.w	d4,d0
00005F72 E080                       		asr.l	#8,d0
00005F74 D268 0038                  		add.w	$38(a0),d1
00005F78 D068 003A                  		add.w	$3A(a0),d0
00005F7C 3141 0008                  		move.w	d1,8(a0)
00005F80 3140 000A                  		move.w	d0,$A(a0)
00005F84                            
00005F84                            locret_5BBA:
00005F84 4E75                       		rts	
00005F86                            ; ===========================================================================
00005F86                            ; ---------------------------------------------------------------------------
00005F86                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F86                            ; ---------------------------------------------------------------------------
00005F86                            Map_obj8B:
00005F86                            	include "_maps\obj8B.asm"
00005F86                            ; ---------------------------------------------------------------------------
00005F86                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F86                            ; ---------------------------------------------------------------------------
00005F86 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F8A 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F8E 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F92 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F96 08                         byte_5BCC:	dc.b 8
00005F97 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F9C F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005FA1 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005FA6 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005FAB 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005FB0 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005FB5 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FBA 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FBF 08                         byte_5BF5:	dc.b 8
00005FC0 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005FC5 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005FCA E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005FCF F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005FD4 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FD9 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FDE 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FE3 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FE8 08                         byte_5C1E:	dc.b 8
00005FE9 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005FEE F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005FF3 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005FF8 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005FFD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006002 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006007 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000600C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006011 08                         byte_5C47:	dc.b 8
00006012 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00006017 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
0000601C E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006021 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00006026 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000602B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006030 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006035 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000603A 0C                         byte_5C70:	dc.b $C
0000603B ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006040 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00006045 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
0000604A 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
0000604F ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00006054 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00006059 0504 0835 00               		dc.b 5,	4, 8, $35, 0
0000605E 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006063 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00006068 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
0000606D 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006072 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006077 0A                         byte_5CAD:	dc.b $A
00006078 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
0000607D DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006082 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006087 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
0000608C DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00006091 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006096 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000609B 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000060A0 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000060A5 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000060AA 0A                         byte_5CE0:	dc.b $A
000060AB C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000060B0 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000060B5 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000060BA C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000060BF E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000060C4 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000060C9 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000060CE 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000060D3 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000060D8 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000060DD 0C                         byte_5D13:	dc.b $C
000060DE F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000060E3 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000060E8 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
000060ED 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
000060F2 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
000060F7 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
000060FC 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006101 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006106 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000610B 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006110 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006115 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000611A                            		even
0000611A                            		even
0000611A                            
0000611A                            ; ---------------------------------------------------------------------------
0000611A                            ; Ending sequence demos
0000611A                            ; ---------------------------------------------------------------------------
0000611A                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006148                            		even
00006148                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006188                            		even
00006188                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000061B8                            		even
000061B8                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000061E8                            		even
000061E8                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006208                            		even
00006208                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006228                            		even
00006228                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006258                            		even
00006258                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006288                            		even
00006288                            
00006288                            ; ---------------------------------------------------------------------------
00006288                            ; Subroutine to	load level boundaries and start	locations
00006288                            ; ---------------------------------------------------------------------------
00006288                            
00006288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006288                            
00006288                            
00006288                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006288 7000                       		moveq	#0,d0
0000628A 11C0 F740                  		move.b	d0,($FFFFF740).w
0000628E 11C0 F741                  		move.b	d0,($FFFFF741).w
00006292 11C0 F746                  		move.b	d0,($FFFFF746).w
00006296 11C0 F748                  		move.b	d0,($FFFFF748).w
0000629A 11C0 F742                  		move.b	d0,($FFFFF742).w
0000629E 3038 FE10                  		move.w	($FFFFFE10).w,d0
000062A2 ED08                       		lsl.b	#6,d0
000062A4 E848                       		lsr.w	#4,d0
000062A6 3200                       		move.w	d0,d1
000062A8 D040                       		add.w	d0,d0
000062AA D041                       		add.w	d1,d0
000062AC 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000062B0 3018                       		move.w	(a0)+,d0
000062B2 31C0 F730                  		move.w	d0,($FFFFF730).w
000062B6 2018                       		move.l	(a0)+,d0
000062B8 21C0 F728                  		move.l	d0,($FFFFF728).w
000062BC 21C0 F720                  		move.l	d0,($FFFFF720).w
000062C0 2018                       		move.l	(a0)+,d0
000062C2 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000062C6 21C0 F724                  		move.l	d0,($FFFFF724).w
000062CA 3038 F728                  		move.w	($FFFFF728).w,d0
000062CE 0640 0240                  		addi.w	#$240,d0
000062D2 31C0 F732                  		move.w	d0,($FFFFF732).w
000062D6 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000062DC 3018                       		move.w	(a0)+,d0
000062DE 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000062E2 6000 0000                  		bra.w	LevSz_ChkLamp
000062E6                            ; ===========================================================================
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            ; Level size array and ending start location array
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006436                            		even
00006436                            
00006436                            EndingStLocArray:
00006436                            		incbin	misc\sloc_end.bin
00006456                            		even
00006456                            
00006456                            ; ===========================================================================
00006456                            
00006456                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006456 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000645A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000645C 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006462 3238 D008                  		move.w	($FFFFD008).w,d1
00006466 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000646A 6000                       		bra.s	loc_60D0
0000646C                            ; ===========================================================================
0000646C                            
0000646C                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000646C 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006470 ED08                       		lsl.b	#6,d0
00006472 E848                       		lsr.w	#4,d0
00006474 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006478 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000647C 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
0000647E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006482 5340                       		subq.w	#1,d0
00006484 E548                       		lsl.w	#2,d0
00006486 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
0000648A                            
0000648A                            LevSz_SonicPos:
0000648A 7200                       		moveq	#0,d1
0000648C 3219                       		move.w	(a1)+,d1
0000648E 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006492 7000                       		moveq	#0,d0
00006494 3011                       		move.w	(a1),d0
00006496 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
0000649A                            
0000649A                            loc_60D0:				; XREF: LevSz_ChkLamp
0000649A 0441 00A0                  		subi.w	#$A0,d1
0000649E 6400                       		bcc.s	loc_60D8
000064A0 7200                       		moveq	#0,d1
000064A2                            
000064A2                            loc_60D8:
000064A2 3438 F72A                  		move.w	($FFFFF72A).w,d2
000064A6 B242                       		cmp.w	d2,d1
000064A8 6500                       		bcs.s	loc_60E2
000064AA 3202                       		move.w	d2,d1
000064AC                            
000064AC                            loc_60E2:
000064AC 31C1 F700                  		move.w	d1,($FFFFF700).w
000064B0 0440 0060                  		subi.w	#$60,d0
000064B4 6400                       		bcc.s	loc_60EE
000064B6 7000                       		moveq	#0,d0
000064B8                            
000064B8                            loc_60EE:
000064B8 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000064BC 6D00                       		blt.s	loc_60F8
000064BE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000064C2                            
000064C2                            loc_60F8:
000064C2 31C0 F704                  		move.w	d0,($FFFFF704).w
000064C6 6100 0000                  		bsr.w	BgScrollSpeed
000064CA 7000                       		moveq	#0,d0
000064CC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064D0 E508                       		lsl.b	#2,d0
000064D2 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000064D8 6000 0000                  		bra.w	LevSz_Unk
000064DC                            ; ===========================================================================
000064DC                            ; ---------------------------------------------------------------------------
000064DC                            ; Sonic	start location array
000064DC                            ; ---------------------------------------------------------------------------
000064DC                            StartLocArray:	incbin	misc\sloc_lev.bin
0000654C                            		even
0000654C                            
0000654C                            ; ---------------------------------------------------------------------------
0000654C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000654C                            ; ---------------------------------------------------------------------------
0000654C                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000654C                            ; loop,	loop, tunnel, tunnel
0000654C                            ; ---------------------------------------------------------------------------
0000654C                            LoopTileNums:	incbin	misc\loopnums.bin
00006568                            		even
00006568                            
00006568                            ; ===========================================================================
00006568                            
00006568                            LevSz_Unk:				; XREF: LevelSizeLoad
00006568 7000                       		moveq	#0,d0
0000656A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000656E E748                       		lsl.w	#3,d0
00006570 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006574 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006578 24D9                       		move.l	(a1)+,(a2)+
0000657A 24D9                       		move.l	(a1)+,(a2)+
0000657C 4E75                       		rts	
0000657E                            ; End of function LevelSizeLoad
0000657E                            
0000657E                            ; ===========================================================================
0000657E 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006586 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000658E 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006596 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000659E 0800 0100 0100 0000        		dc.l $8000100, $1000000
000065A6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000065AE 0070 0100 0100 0100        		dc.l $700100, $1000100
000065B6                            
000065B6                            ; ---------------------------------------------------------------------------
000065B6                            ; Subroutine to	set scroll speed of some backgrounds
000065B6                            ; ---------------------------------------------------------------------------
000065B6                            
000065B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065B6                            
000065B6                            
000065B6                            BgScrollSpeed:				; XREF: LevelSizeLoad
000065B6 4A38 FE30                  		tst.b	($FFFFFE30).w
000065BA 6600                       		bne.s	loc_6206
000065BC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065C0 31C0 F714                  		move.w	d0,($FFFFF714).w
000065C4 31C1 F708                  		move.w	d1,($FFFFF708).w
000065C8 31C1 F710                  		move.w	d1,($FFFFF710).w
000065CC 31C1 F718                  		move.w	d1,($FFFFF718).w
000065D0                            
000065D0                            loc_6206:
000065D0 7400                       		moveq	#0,d2
000065D2 1438 FE10                  		move.b	($FFFFFE10).w,d2
000065D6 D442                       		add.w	d2,d2
000065D8 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000065DC 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000065E0                            ; End of function BgScrollSpeed
000065E0                            
000065E0                            ; ===========================================================================
000065E0 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000065E4 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000065E8 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000065EC 0000                       		dc.w BgScroll_End-BgScroll_Index
000065EE                            ; ===========================================================================
000065EE                            
000065EE                            BgScroll_GHZ:				; XREF: BgScroll_Index
000065EE 6000 0000                  		bra.w	Deform_GHZ
000065F2                            ; ===========================================================================
000065F2                            
000065F2                            BgScroll_LZ:				; XREF: BgScroll_Index
000065F2 E280                       		asr.l	#1,d0
000065F4 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065F8 4E75                       		rts	
000065FA                            ; ===========================================================================
000065FA                            
000065FA                            BgScroll_MZ:				; XREF: BgScroll_Index
000065FA 4E75                       		rts	
000065FC                            ; ===========================================================================
000065FC                            
000065FC                            BgScroll_SLZ:				; XREF: BgScroll_Index
000065FC E280                       		asr.l	#1,d0
000065FE 0640 00C0                  		addi.w	#$C0,d0
00006602 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006606 4E75                       		rts	
00006608                            ; ===========================================================================
00006608                            
00006608                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006608 E980                       		asl.l	#4,d0
0000660A 2400                       		move.l	d0,d2
0000660C E380                       		asl.l	#1,d0
0000660E D082                       		add.l	d2,d0
00006610 E080                       		asr.l	#8,d0
00006612 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006616 31C0 F714                  		move.w	d0,($FFFFF714).w
0000661A 4E75                       		rts	
0000661C                            ; ===========================================================================
0000661C                            
0000661C                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000661C E980                       		asl.l	#4,d0
0000661E E380                       		asl.l	#1,d0
00006620 E080                       		asr.l	#8,d0
00006622 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006626 4E75                       		rts	
00006628                            ; ===========================================================================
00006628                            
00006628                            BgScroll_End:				; XREF: BgScroll_Index
00006628 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000662E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006634 4E75                       		rts	
00006636                            ; ===========================================================================
00006636 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000663C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006642 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006648 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000664E 4E75                       		rts
00006650                            
00006650                            ; ---------------------------------------------------------------------------
00006650                            ; Background layer deformation subroutines
00006650                            ; ---------------------------------------------------------------------------
00006650                            
00006650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006650                            
00006650                            
00006650                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006650 4A38 F744                  		tst.b	($FFFFF744).w
00006654 6700                       		beq.s	loc_628E
00006656 4E75                       		rts	
00006658                            ; ===========================================================================
00006658                            
00006658                            loc_628E:
00006658 4278 F754                  		clr.w	($FFFFF754).w
0000665C 4278 F756                  		clr.w	($FFFFF756).w
00006660 4278 F758                  		clr.w	($FFFFF758).w
00006664 4278 F75A                  		clr.w	($FFFFF75A).w
00006668 6100 0000                  		bsr.w	ScrollHoriz
0000666C 6100 0000                  		bsr.w	ScrollVertical
00006670 6100 0000                  		bsr.w	DynScrResizeLoad
00006674 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
0000667A 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006680 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006686 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000668C 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00006692 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006698 7000                       		moveq	#0,d0
0000669A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000669E D040                       		add.w	d0,d0
000066A0 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000066A4 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000066A8                            ; End of function DeformBgLayer
000066A8                            
000066A8                            ; ===========================================================================
000066A8                            ; ---------------------------------------------------------------------------
000066A8                            ; Offset index for background layer deformation	code
000066A8                            ; ---------------------------------------------------------------------------
000066A8 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000066AC 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000066B0 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000066B4 0000                       		dc.w Deform_GHZ-Deform_Index
000066B6                            ; ---------------------------------------------------------------------------
000066B6                            ; Green	Hill Zone background layer deformation code
000066B6                            ; ---------------------------------------------------------------------------
000066B6                            
000066B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066B6                            
000066B6                            
000066B6                            Deform_GHZ:				; XREF: Deform_Index
000066B6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066BA 48C4                       		ext.l	d4
000066BC EB84                       		asl.l	#5,d4
000066BE 2204                       		move.l	d4,d1
000066C0 E384                       		asl.l	#1,d4
000066C2 D881                       		add.l	d1,d4
000066C4 7A00                       		moveq	#0,d5
000066C6 6100 0000                  		bsr.w	ScrollBlock1
000066CA 6100 0000                  		bsr.w	ScrollBlock4
000066CE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066D2 3038 F704                  		move.w	($FFFFF704).w,d0
000066D6 0240 07FF                  		andi.w	#$7FF,d0
000066DA EA48                       		lsr.w	#5,d0
000066DC 4440                       		neg.w	d0
000066DE 0640 0026                  		addi.w	#$26,d0
000066E2 31C0 F714                  		move.w	d0,($FFFFF714).w
000066E6 3800                       		move.w	d0,d4
000066E8 6100 0000                  		bsr.w	ScrollBlock3
000066EC 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066F2 323C 006F                  		move.w	#$6F,d1
000066F6 9244                       		sub.w	d4,d1
000066F8 3038 F700                  		move.w	($FFFFF700).w,d0
000066FC 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006702 6600                       		bne.s	loc_633C
00006704 7000                       		moveq	#0,d0
00006706                            
00006706                            loc_633C:
00006706 4440                       		neg.w	d0
00006708 4840                       		swap	d0
0000670A 3038 F708                  		move.w	($FFFFF708).w,d0
0000670E 4440                       		neg.w	d0
00006710                            
00006710                            loc_6346:
00006710 22C0                       		move.l	d0,(a1)+
00006712 51C9 FFFC                  		dbf	d1,loc_6346
00006716 323C 0027                  		move.w	#$27,d1
0000671A 3038 F710                  		move.w	($FFFFF710).w,d0
0000671E 4440                       		neg.w	d0
00006720                            
00006720                            loc_6356:
00006720 22C0                       		move.l	d0,(a1)+
00006722 51C9 FFFC                  		dbf	d1,loc_6356
00006726 3038 F710                  		move.w	($FFFFF710).w,d0
0000672A 0640 0000                  		addi.w	#0,d0
0000672E 3438 F700                  		move.w	($FFFFF700).w,d2
00006732 0642 FE00                  		addi.w	#-$200,d2
00006736 9440                       		sub.w	d0,d2
00006738 48C2                       		ext.l	d2
0000673A E182                       		asl.l	#8,d2
0000673C 85FC 0068                  		divs.w	#$68,d2
00006740 48C2                       		ext.l	d2
00006742 E182                       		asl.l	#8,d2
00006744 7600                       		moveq	#0,d3
00006746 3600                       		move.w	d0,d3
00006748 323C 0047                  		move.w	#$47,d1
0000674C D244                       		add.w	d4,d1
0000674E                            
0000674E                            loc_6384:
0000674E 3003                       		move.w	d3,d0
00006750 4440                       		neg.w	d0
00006752 22C0                       		move.l	d0,(a1)+
00006754 4843                       		swap	d3
00006756 D682                       		add.l	d2,d3
00006758 4843                       		swap	d3
0000675A 51C9 FFF2                  		dbf	d1,loc_6384
0000675E 4E75                       		rts	
00006760                            ; End of function Deform_GHZ
00006760                            
00006760                            ; ---------------------------------------------------------------------------
00006760                            ; Labyrinth Zone background layer deformation code
00006760                            ; ---------------------------------------------------------------------------
00006760                            
00006760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006760                            
00006760                            
00006760                            Deform_LZ:				; XREF: Deform_Index
00006760 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006764 48C4                       		ext.l	d4
00006766 EF84                       		asl.l	#7,d4
00006768 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000676C 48C5                       		ext.l	d5
0000676E EF85                       		asl.l	#7,d5
00006770 6100 0000                  		bsr.w	ScrollBlock1
00006774 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000677A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000677E 323C 00DF                  		move.w	#$DF,d1
00006782 3038 F700                  		move.w	($FFFFF700).w,d0
00006786 4440                       		neg.w	d0
00006788 4840                       		swap	d0
0000678A 3038 F708                  		move.w	($FFFFF708).w,d0
0000678E 4440                       		neg.w	d0
00006790                            
00006790                            loc_63C6:
00006790 22C0                       		move.l	d0,(a1)+
00006792 51C9 FFFC                  		dbf	d1,loc_63C6
00006796 3038 F646                  		move.w	($FFFFF646).w,d0
0000679A 9078 F704                  		sub.w	($FFFFF704).w,d0
0000679E 4E75                       		rts	
000067A0                            ; End of function Deform_LZ
000067A0                            
000067A0                            ; ---------------------------------------------------------------------------
000067A0                            ; Marble Zone background layer deformation code
000067A0                            ; ---------------------------------------------------------------------------
000067A0                            
000067A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067A0                            
000067A0                            
000067A0                            Deform_MZ:				; XREF: Deform_Index
000067A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067A4 48C4                       		ext.l	d4
000067A6 ED84                       		asl.l	#6,d4
000067A8 2204                       		move.l	d4,d1
000067AA E384                       		asl.l	#1,d4
000067AC D881                       		add.l	d1,d4
000067AE 7A00                       		moveq	#0,d5
000067B0 6100 0000                  		bsr.w	ScrollBlock1
000067B4 303C 0200                  		move.w	#$200,d0
000067B8 3238 F704                  		move.w	($FFFFF704).w,d1
000067BC 0441 01C8                  		subi.w	#$1C8,d1
000067C0 6500                       		bcs.s	loc_6402
000067C2 3401                       		move.w	d1,d2
000067C4 D241                       		add.w	d1,d1
000067C6 D242                       		add.w	d2,d1
000067C8 E441                       		asr.w	#2,d1
000067CA D041                       		add.w	d1,d0
000067CC                            
000067CC                            loc_6402:
000067CC 31C0 F714                  		move.w	d0,($FFFFF714).w
000067D0 6100 0000                  		bsr.w	ScrollBlock3
000067D4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067DA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067DE 323C 00DF                  		move.w	#$DF,d1
000067E2 3038 F700                  		move.w	($FFFFF700).w,d0
000067E6 4440                       		neg.w	d0
000067E8 4840                       		swap	d0
000067EA 3038 F708                  		move.w	($FFFFF708).w,d0
000067EE 4440                       		neg.w	d0
000067F0                            
000067F0                            loc_6426:
000067F0 22C0                       		move.l	d0,(a1)+
000067F2 51C9 FFFC                  		dbf	d1,loc_6426
000067F6 4E75                       		rts	
000067F8                            ; End of function Deform_MZ
000067F8                            
000067F8                            ; ---------------------------------------------------------------------------
000067F8                            ; Star Light Zone background layer deformation code
000067F8                            ; ---------------------------------------------------------------------------
000067F8                            
000067F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067F8                            
000067F8                            
000067F8                            Deform_SLZ:				; XREF: Deform_Index
000067F8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067FC 48C4                       		ext.l	d4
000067FE EB84                       		asl.l	#5,d4
00006800 2204                       		move.l	d4,d1
00006802 E384                       		asl.l	#1,d4
00006804 D881                       		add.l	d1,d4
00006806 7A00                       		moveq	#0,d5
00006808 6100 0000                  		bsr.w	ScrollBlock1
0000680C 6100 0000                  		bsr.w	ScrollBlock3
00006810 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006814                            	;	move.w	($FFFFF704).w,d0
00006814                            	;	andi.w	#$7FF,d0
00006814 EA48                       		lsr.w	#5,d0
00006816 4440                       		neg.w	d0
00006818 0640 0026                  		addi.w	#$26,d0
0000681C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006820 3800                       		move.w	d0,d4
00006822                            	;	bsr.w	ScrollBlock3
00006822 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006828 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000682C                            
0000682C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006830 4440                       		neg.w	d0			; negate (positive to negative)
00006832 4840                       		swap	d0			; send to the left side of d0
00006834 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006838 45F8 A800                  		lea	($FFFFA800).w,a2
0000683C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006842 069A 0000 C000             		addi.l	#$C000,(a2)+
00006848 3038 A800                  		move.w	($FFFFA800).w,d0
0000684C 4440                       		neg.w	d0			; negate (positive to negative)
0000684E E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006850 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006854                            slz_DeformLoop_1:
00006854 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006856 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000685A                            
0000685A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000685E 4440                       		neg.w	d0			; negate (positive to negative)
00006860 4840                       		swap	d0			; send to the left side of d0
00006862 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006866 45F8 A800                  		lea	($FFFFA800).w,a2
0000686A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006870 069A 0000 C000             		addi.l	#$C000,(a2)+
00006876 3038 A800                  		move.w	($FFFFA800).w,d0
0000687A 4440                       		neg.w	d0			; negate (positive to negative)
0000687C E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000687E 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006882                            slz_DeformLoop_2:
00006882 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006884 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006888                            
00006888 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000688C 4440                       		neg.w	d0			; negate (positive to negative)
0000688E 4840                       		swap	d0			; send to the left side of d0
00006890 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006894 45F8 A800                  		lea	($FFFFA800).w,a2
00006898 069A 0000 5000             		addi.l	#$5000,(a2)+
0000689E 069A 0000 C000             		addi.l	#$C000,(a2)+
000068A4 3038 A800                  		move.w	($FFFFA800).w,d0
000068A8 4440                       		neg.w	d0			; negate (positive to negative)
000068AA E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000068AC 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068B0                            slz_DeformLoop_3:
000068B0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068B2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000068B6                            
000068B6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068BA 4440                       		neg.w	d0			; negate (positive to negative)
000068BC 4840                       		swap	d0			; send to the left side of d0
000068BE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068C2 45F8 A800                  		lea	($FFFFA800).w,a2
000068C6 069A 0000 5000             		addi.l	#$5000,(a2)+
000068CC 069A 0000 C000             		addi.l	#$C000,(a2)+
000068D2 3038 A800                  		move.w	($FFFFA800).w,d0
000068D6 4440                       		neg.w	d0			; negate (positive to negative)
000068D8 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000068DA 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068DE                            slz_DeformLoop_4:
000068DE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068E0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000068E4                            
000068E4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E8 4440                       		neg.w	d0			; negate (positive to negative)
000068EA 4840                       		swap	d0			; send to the left side of d0
000068EC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068F0 45F8 A800                  		lea	($FFFFA800).w,a2
000068F4 069A 0000 5000             		addi.l	#$5000,(a2)+
000068FA 069A 0000 C000             		addi.l	#$C000,(a2)+
00006900 3038 A800                  		move.w	($FFFFA800).w,d0
00006904 4440                       		neg.w	d0			; negate (positive to negative)
00006906 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006908 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690C                            slz_DeformLoop_5:
0000690C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006912                            
00006912 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006916 4440                       		neg.w	d0			; negate (positive to negative)
00006918 4840                       		swap	d0			; send to the left side of d0
0000691A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691E 4440                       		neg.w	d0			; negate (positive to negative)
00006920 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006922 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006926                            slz_DeformLoop_6:
00006926 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006928 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
0000692C                            
0000692C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006930 4440                       		neg.w	d0			; negate (positive to negative)
00006932 4840                       		swap	d0			; send to the left side of d0
00006934 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006938 4440                       		neg.w	d0			; negate (positive to negative)
0000693A EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000693C 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006940                            slz_DeformLoop_7:
00006940 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006942 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006946                            
00006946 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000694A 4440                       		neg.w	d0			; negate (positive to negative)
0000694C 4840                       		swap	d0			; send to the left side of d0
0000694E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006952 4440                       		neg.w	d0			; negate (positive to negative)
00006954 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006956 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000695A                            slz_DeformLoop_8:
0000695A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006960                            
00006960 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006964 4440                       		neg.w	d0			; negate (positive to negative)
00006966 4840                       		swap	d0			; send to the left side of d0
00006968 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000696C 4440                       		neg.w	d0			; negate (positive to negative)
0000696E EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006970 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006974                            slz_DeformLoop_9:
00006974 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006976 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
0000697A                            
0000697A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000697E 4440                       		neg.w	d0			; negate (positive to negative)
00006980 4840                       		swap	d0			; send to the left side of d0
00006982 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006986 4440                       		neg.w	d0			; negate (positive to negative)
00006988 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
0000698A 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000698E                            slz_DeformLoop_10:
0000698E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006990 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006994                            
00006994 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006998 4440                       		neg.w	d0			; negate (positive to negative)
0000699A 4840                       		swap	d0			; send to the left side of d0
0000699C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069A0 4440                       		neg.w	d0			; negate (positive to negative)
000069A2 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069A4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069A8                            slz_DeformLoop_11:
000069A8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069AA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
000069AE                            
000069AE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069B2 4440                       		neg.w	d0			; negate (positive to negative)
000069B4 4840                       		swap	d0			; send to the left side of d0
000069B6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069BA 4440                       		neg.w	d0			; negate (positive to negative)
000069BC E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000069BE 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069C2                            slz_DeformLoop_12:
000069C2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069C4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000069C8                            
000069C8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069CC 4440                       		neg.w	d0			; negate (positive to negative)
000069CE 4840                       		swap	d0			; send to the left side of d0
000069D0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069D4 4440                       		neg.w	d0			; negate (positive to negative)
000069D6 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069D8 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069DC                            slz_DeformLoop_13:
000069DC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069DE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
000069E2 4E75                       		rts	
000069E4                            ; End of function Deform_SLZ
000069E4 4E75                       		rts	
000069E6                            ; End of function Deform_SLZ_2
000069E6                            
000069E6                            ; ---------------------------------------------------------------------------
000069E6                            ; Spring Yard Zone background layer deformation	code
000069E6                            ; ---------------------------------------------------------------------------
000069E6                            
000069E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069E6                            
000069E6                            
000069E6                            Deform_SYZ:				; XREF: Deform_Index
000069E6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069EA 48C4                       		ext.l	d4
000069EC ED84                       		asl.l	#6,d4
000069EE 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069F2 48C5                       		ext.l	d5
000069F4 E985                       		asl.l	#4,d5
000069F6 2205                       		move.l	d5,d1
000069F8 E385                       		asl.l	#1,d5
000069FA DA81                       		add.l	d1,d5
000069FC 6100 0000                  		bsr.w	ScrollBlock1
00006A00 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A06 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A0A 323C 00DF                  		move.w	#$DF,d1
00006A0E 3038 F700                  		move.w	($FFFFF700).w,d0
00006A12 4440                       		neg.w	d0
00006A14 4840                       		swap	d0
00006A16 3038 F708                  		move.w	($FFFFF708).w,d0
00006A1A 4440                       		neg.w	d0
00006A1C                            
00006A1C                            loc_653C:
00006A1C 22C0                       		move.l	d0,(a1)+
00006A1E 51C9 FFFC                  		dbf	d1,loc_653C
00006A22 4E75                       		rts	
00006A24                            ; End of function Deform_SYZ
00006A24                            
00006A24                            ; ---------------------------------------------------------------------------
00006A24                            ; Scrap	Brain Zone background layer deformation	code
00006A24                            ; ---------------------------------------------------------------------------
00006A24                            
00006A24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A24                            
00006A24                            
00006A24                            Deform_SBZ:				; XREF: Deform_Index
00006A24 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006A28 48C4                       		ext.l	d4
00006A2A ED84                       		asl.l	#6,d4
00006A2C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006A30 48C5                       		ext.l	d5
00006A32 E985                       		asl.l	#4,d5
00006A34 E385                       		asl.l	#1,d5
00006A36 6100 0000                  		bsr.w	ScrollBlock1
00006A3A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006A40 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006A44 323C 00DF                  		move.w	#$DF,d1
00006A48 3038 F700                  		move.w	($FFFFF700).w,d0
00006A4C 4440                       		neg.w	d0
00006A4E 4840                       		swap	d0
00006A50 3038 F708                  		move.w	($FFFFF708).w,d0
00006A54 4440                       		neg.w	d0
00006A56                            
00006A56                            loc_6576:
00006A56 22C0                       		move.l	d0,(a1)+
00006A58 51C9 FFFC                  		dbf	d1,loc_6576
00006A5C 4E75                       		rts	
00006A5E                            ; End of function Deform_SBZ
00006A5E                            
00006A5E                            ; ---------------------------------------------------------------------------
00006A5E                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006A5E                            ; ---------------------------------------------------------------------------
00006A5E                            
00006A5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A5E                            
00006A5E                            
00006A5E                            ScrollHoriz:				; XREF: DeformBgLayer
00006A5E 3838 F700                  		move.w	($FFFFF700).w,d4
00006A62 6100                       		bsr.s	ScrollHoriz2
00006A64 3038 F700                  		move.w	($FFFFF700).w,d0
00006A68 0240 0010                  		andi.w	#$10,d0
00006A6C 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006A70 B300                       		eor.b	d1,d0
00006A72 6600                       		bne.s	locret_65B0
00006A74 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006A7A 3038 F700                  		move.w	($FFFFF700).w,d0
00006A7E 9044                       		sub.w	d4,d0
00006A80 6A00                       		bpl.s	loc_65AA
00006A82 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A88 4E75                       		rts	
00006A8A                            ; ===========================================================================
00006A8A                            
00006A8A                            loc_65AA:
00006A8A 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A90                            
00006A90                            locret_65B0:
00006A90 4E75                       		rts	
00006A92                            ; End of function ScrollHoriz
00006A92                            
00006A92                            
00006A92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A92                            
00006A92                            
00006A92                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A92 3038 D008                  		move.w	($FFFFD008).w,d0
00006A96 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A9A 0440 0090                  		subi.w	#$90,d0
00006A9E 6500                       		bcs.s	loc_65F6
00006AA0 0440 0010                  		subi.w	#$10,d0
00006AA4 6400                       		bcc.s	loc_65CC
00006AA6 4278 F73A                  		clr.w	($FFFFF73A).w
00006AAA 4E75                       		rts	
00006AAC                            ; ===========================================================================
00006AAC                            
00006AAC                            loc_65CC:
00006AAC 0C40 0010                  		cmpi.w	#$10,d0
00006AB0 6500                       		bcs.s	loc_65D6
00006AB2 303C 0010                  		move.w	#$10,d0
00006AB6                            
00006AB6                            loc_65D6:
00006AB6 D078 F700                  		add.w	($FFFFF700).w,d0
00006ABA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006ABE 6D00                       		blt.s	loc_65E4
00006AC0 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006AC4                            
00006AC4                            loc_65E4:
00006AC4 3200                       		move.w	d0,d1
00006AC6 9278 F700                  		sub.w	($FFFFF700).w,d1
00006ACA E141                       		asl.w	#8,d1
00006ACC 31C0 F700                  		move.w	d0,($FFFFF700).w
00006AD0 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006AD4 4E75                       		rts	
00006AD6                            ; ===========================================================================
00006AD6                            
00006AD6                            loc_65F6:				; XREF: ScrollHoriz2
00006AD6 D078 F700                  		add.w	($FFFFF700).w,d0
00006ADA B078 F728                  		cmp.w	($FFFFF728).w,d0
00006ADE 6EE4                       		bgt.s	loc_65E4
00006AE0 3038 F728                  		move.w	($FFFFF728).w,d0
00006AE4 60DE                       		bra.s	loc_65E4
00006AE6                            ; End of function ScrollHoriz2
00006AE6                            
00006AE6                            ; ===========================================================================
00006AE6 4A40                       		tst.w	d0
00006AE8 6A00                       		bpl.s	loc_6610
00006AEA 303C FFFE                  		move.w	#-2,d0
00006AEE 60E6                       		bra.s	loc_65F6
00006AF0                            ; ===========================================================================
00006AF0                            
00006AF0                            loc_6610:
00006AF0 303C 0002                  		move.w	#2,d0
00006AF4 60B6                       		bra.s	loc_65CC
00006AF6                            
00006AF6                            ; ---------------------------------------------------------------------------
00006AF6                            ; Subroutine to	scroll the level vertically as Sonic moves
00006AF6                            ; ---------------------------------------------------------------------------
00006AF6                            
00006AF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AF6                            
00006AF6                            
00006AF6                            ScrollVertical:				; XREF: DeformBgLayer
00006AF6 7200                       		moveq	#0,d1
00006AF8 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006AFC 9078 F704                  		sub.w	($FFFFF704).w,d0
00006B00 0838 0002 D022             		btst	#2,($FFFFD022).w
00006B06 6700                       		beq.s	loc_662A
00006B08 5B40                       		subq.w	#5,d0
00006B0A                            
00006B0A                            loc_662A:
00006B0A 0838 0001 D022             		btst	#1,($FFFFD022).w
00006B10 6700                       		beq.s	loc_664A
00006B12 0640 0020                  		addi.w	#$20,d0
00006B16 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006B1A 6500                       		bcs.s	loc_6696
00006B1C 0440 0040                  		subi.w	#$40,d0
00006B20 6400                       		bcc.s	loc_6696
00006B22 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B26 6600                       		bne.s	loc_66A8
00006B28 6000                       		bra.s	loc_6656
00006B2A                            ; ===========================================================================
00006B2A                            
00006B2A                            loc_664A:
00006B2A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006B2E 6600                       		bne.s	loc_665C
00006B30 4A38 F75C                  		tst.b	($FFFFF75C).w
00006B34 6600                       		bne.s	loc_66A8
00006B36                            
00006B36                            loc_6656:
00006B36 4278 F73C                  		clr.w	($FFFFF73C).w
00006B3A 4E75                       		rts	
00006B3C                            ; ===========================================================================
00006B3C                            
00006B3C                            loc_665C:
00006B3C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006B42 6600                       		bne.s	loc_6684
00006B44 3238 D014                  		move.w	($FFFFD014).w,d1
00006B48 6A00                       		bpl.s	loc_666C
00006B4A 4441                       		neg.w	d1
00006B4C                            
00006B4C                            loc_666C:
00006B4C 0C41 0800                  		cmpi.w	#$800,d1
00006B50 6400                       		bcc.s	loc_6696
00006B52 323C 0600                  		move.w	#$600,d1
00006B56 0C40 0006                  		cmpi.w	#6,d0
00006B5A 6E00                       		bgt.s	loc_66F6
00006B5C 0C40 FFFA                  		cmpi.w	#-6,d0
00006B60 6D00                       		blt.s	loc_66C0
00006B62 6000                       		bra.s	loc_66AE
00006B64                            ; ===========================================================================
00006B64                            
00006B64                            loc_6684:
00006B64 323C 0200                  		move.w	#$200,d1
00006B68 0C40 0002                  		cmpi.w	#2,d0
00006B6C 6E00                       		bgt.s	loc_66F6
00006B6E 0C40 FFFE                  		cmpi.w	#-2,d0
00006B72 6D00                       		blt.s	loc_66C0
00006B74 6000                       		bra.s	loc_66AE
00006B76                            ; ===========================================================================
00006B76                            
00006B76                            loc_6696:
00006B76 323C 1000                  		move.w	#$1000,d1
00006B7A 0C40 0010                  		cmpi.w	#$10,d0
00006B7E 6E00                       		bgt.s	loc_66F6
00006B80 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B84 6D00                       		blt.s	loc_66C0
00006B86 6000                       		bra.s	loc_66AE
00006B88                            ; ===========================================================================
00006B88                            
00006B88                            loc_66A8:
00006B88 7000                       		moveq	#0,d0
00006B8A 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B8E                            
00006B8E                            loc_66AE:
00006B8E 7200                       		moveq	#0,d1
00006B90 3200                       		move.w	d0,d1
00006B92 D278 F704                  		add.w	($FFFFF704).w,d1
00006B96 4A40                       		tst.w	d0
00006B98 6A00 0000                  		bpl.w	loc_6700
00006B9C 6000 0000                  		bra.w	loc_66CC
00006BA0                            ; ===========================================================================
00006BA0                            
00006BA0                            loc_66C0:
00006BA0 4441                       		neg.w	d1
00006BA2 48C1                       		ext.l	d1
00006BA4 E181                       		asl.l	#8,d1
00006BA6 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006BAA 4841                       		swap	d1
00006BAC                            
00006BAC                            loc_66CC:
00006BAC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006BB0 6E00                       		bgt.s	loc_6724
00006BB2 0C41 FF00                  		cmpi.w	#-$100,d1
00006BB6 6E00                       		bgt.s	loc_66F0
00006BB8 0241 07FF                  		andi.w	#$7FF,d1
00006BBC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006BC2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006BC8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006BCE 6000                       		bra.s	loc_6724
00006BD0                            ; ===========================================================================
00006BD0                            
00006BD0                            loc_66F0:
00006BD0 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006BD4 6000                       		bra.s	loc_6724
00006BD6                            ; ===========================================================================
00006BD6                            
00006BD6                            loc_66F6:
00006BD6 48C1                       		ext.l	d1
00006BD8 E181                       		asl.l	#8,d1
00006BDA D2B8 F704                  		add.l	($FFFFF704).w,d1
00006BDE 4841                       		swap	d1
00006BE0                            
00006BE0                            loc_6700:
00006BE0 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006BE4 6D00                       		blt.s	loc_6724
00006BE6 0441 0800                  		subi.w	#$800,d1
00006BEA 6500                       		bcs.s	loc_6720
00006BEC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006BF2 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006BF8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006BFE 6000                       		bra.s	loc_6724
00006C00                            ; ===========================================================================
00006C00                            
00006C00                            loc_6720:
00006C00 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006C04                            
00006C04                            loc_6724:
00006C04 3838 F704                  		move.w	($FFFFF704).w,d4
00006C08 4841                       		swap	d1
00006C0A 2601                       		move.l	d1,d3
00006C0C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006C10 E09B                       		ror.l	#8,d3
00006C12 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006C16 21C1 F704                  		move.l	d1,($FFFFF704).w
00006C1A 3038 F704                  		move.w	($FFFFF704).w,d0
00006C1E 0240 0010                  		andi.w	#$10,d0
00006C22 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006C26 B300                       		eor.b	d1,d0
00006C28 6600                       		bne.s	locret_6766
00006C2A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006C30 3038 F704                  		move.w	($FFFFF704).w,d0
00006C34 9044                       		sub.w	d4,d0
00006C36 6A00                       		bpl.s	loc_6760
00006C38 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006C3E 4E75                       		rts	
00006C40                            ; ===========================================================================
00006C40                            
00006C40                            loc_6760:
00006C40 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006C46                            
00006C46                            locret_6766:
00006C46 4E75                       		rts	
00006C48                            ; End of function ScrollVertical
00006C48                            
00006C48                            
00006C48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C48                            
00006C48                            
00006C48                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006C48 2438 F708                  		move.l	($FFFFF708).w,d2
00006C4C 2002                       		move.l	d2,d0
00006C4E D084                       		add.l	d4,d0
00006C50 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C54 2200                       		move.l	d0,d1
00006C56 4841                       		swap	d1
00006C58 0241 0010                  		andi.w	#$10,d1
00006C5C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006C60 B701                       		eor.b	d3,d1
00006C62 6600                       		bne.s	loc_679C
00006C64 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006C6A 9082                       		sub.l	d2,d0
00006C6C 6A00                       		bpl.s	loc_6796
00006C6E 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006C74 6000                       		bra.s	loc_679C
00006C76                            ; ===========================================================================
00006C76                            
00006C76                            loc_6796:
00006C76 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006C7C                            
00006C7C                            loc_679C:
00006C7C 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C80 2003                       		move.l	d3,d0
00006C82 D085                       		add.l	d5,d0
00006C84 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C88 2200                       		move.l	d0,d1
00006C8A 4841                       		swap	d1
00006C8C 0241 0010                  		andi.w	#$10,d1
00006C90 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C94 B501                       		eor.b	d2,d1
00006C96 6600                       		bne.s	locret_67D0
00006C98 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C9E 9083                       		sub.l	d3,d0
00006CA0 6A00                       		bpl.s	loc_67CA
00006CA2 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006CA8 4E75                       		rts	
00006CAA                            ; ===========================================================================
00006CAA                            
00006CAA                            loc_67CA:
00006CAA 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006CB0                            
00006CB0                            locret_67D0:
00006CB0 4E75                       		rts	
00006CB2                            ; End of function ScrollBlock1
00006CB2                            
00006CB2                            
00006CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CB2                            
00006CB2                            
00006CB2                            ScrollBlock2:				; XREF: Deform_SLZ
00006CB2 2438 F708                  		move.l	($FFFFF708).w,d2
00006CB6 2002                       		move.l	d2,d0
00006CB8 D084                       		add.l	d4,d0
00006CBA 21C0 F708                  		move.l	d0,($FFFFF708).w
00006CBE 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006CC2 2003                       		move.l	d3,d0
00006CC4 D085                       		add.l	d5,d0
00006CC6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006CCA 2200                       		move.l	d0,d1
00006CCC 4841                       		swap	d1
00006CCE 0241 0010                  		andi.w	#$10,d1
00006CD2 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006CD6 B501                       		eor.b	d2,d1
00006CD8 6600                       		bne.s	locret_6812
00006CDA 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006CE0 9083                       		sub.l	d3,d0
00006CE2 6A00                       		bpl.s	loc_680C
00006CE4 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006CEA 4E75                       		rts	
00006CEC                            ; ===========================================================================
00006CEC                            
00006CEC                            loc_680C:
00006CEC 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006CF2                            
00006CF2                            locret_6812:
00006CF2 4E75                       		rts	
00006CF4                            ; End of function ScrollBlock2
00006CF4                            
00006CF4                            
00006CF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CF4                            
00006CF4                            
00006CF4                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006CF4 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006CF8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006CFC 3200                       		move.w	d0,d1
00006CFE 0241 0010                  		andi.w	#$10,d1
00006D02 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006D06 B501                       		eor.b	d2,d1
00006D08 6600                       		bne.s	locret_6842
00006D0A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006D10 9043                       		sub.w	d3,d0
00006D12 6A00                       		bpl.s	loc_683C
00006D14 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006D1A 4E75                       		rts	
00006D1C                            ; ===========================================================================
00006D1C                            
00006D1C                            loc_683C:
00006D1C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006D22                            
00006D22                            locret_6842:
00006D22 4E75                       		rts	
00006D24                            ; End of function ScrollBlock3
00006D24                            
00006D24                            
00006D24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D24                            
00006D24                            
00006D24                            ScrollBlock4:				; XREF: Deform_GHZ
00006D24 3438 F710                  		move.w	($FFFFF710).w,d2
00006D28 3638 F714                  		move.w	($FFFFF714).w,d3
00006D2C 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006D30 48C0                       		ext.l	d0
00006D32 EF80                       		asl.l	#7,d0
00006D34 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006D38 3038 F710                  		move.w	($FFFFF710).w,d0
00006D3C 0240 0010                  		andi.w	#$10,d0
00006D40 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006D44 B300                       		eor.b	d1,d0
00006D46 6600                       		bne.s	locret_6884
00006D48 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006D4E 3038 F710                  		move.w	($FFFFF710).w,d0
00006D52 9042                       		sub.w	d2,d0
00006D54 6A00                       		bpl.s	loc_687E
00006D56 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006D5C 6000                       		bra.s	locret_6884
00006D5E                            ; ===========================================================================
00006D5E                            
00006D5E                            loc_687E:
00006D5E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006D64                            
00006D64                            locret_6884:
00006D64 4E75                       		rts	
00006D66                            ; End of function ScrollBlock4
00006D66                            
00006D66                            
00006D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D66                            
00006D66                            
00006D66                            sub_6886:				; XREF: loc_C44
00006D66 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D6C 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D72 45F8 F756                  		lea	($FFFFF756).w,a2
00006D76 47F8 F708                  		lea	($FFFFF708).w,a3
00006D7A 49F8 A440                  		lea	($FFFFA440).w,a4
00006D7E 343C 6000                  		move.w	#$6000,d2
00006D82 6100 0000                  		bsr.w	sub_6954
00006D86 45F8 F758                  		lea	($FFFFF758).w,a2
00006D8A 47F8 F710                  		lea	($FFFFF710).w,a3
00006D8E 6000 0000                  		bra.w	sub_69F4
00006D92                            ; End of function sub_6886
00006D92                            
00006D92                            ; ---------------------------------------------------------------------------
00006D92                            ; Subroutine to	display	correct	tiles as you move
00006D92                            ; ---------------------------------------------------------------------------
00006D92                            
00006D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D92                            
00006D92                            
00006D92                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D92 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D98 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D9E 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006DA2 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006DA6 49F8 A440                  		lea	($FFFFA440).w,a4
00006DAA 343C 6000                  		move.w	#$6000,d2
00006DAE 6100 0000                  		bsr.w	sub_6954
00006DB2 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006DB6 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006DBA 6100 0000                  		bsr.w	sub_69F4
00006DBE 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006DC2 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006DC6 49F8 A400                  		lea	($FFFFA400).w,a4
00006DCA 343C 4000                  		move.w	#$4000,d2
00006DCE 4A12                       		tst.b	(a2)
00006DD0 6700                       		beq.s	locret_6952
00006DD2 0892 0000                  		bclr	#0,(a2)
00006DD6 6700                       		beq.s	loc_6908
00006DD8 78F0                       		moveq	#-$10,d4
00006DDA 7AF0                       		moveq	#-$10,d5
00006DDC 6100 0000                  		bsr.w	sub_6C20
00006DE0 78F0                       		moveq	#-$10,d4
00006DE2 7AF0                       		moveq	#-$10,d5
00006DE4 6100 0000                  		bsr.w	sub_6AD8
00006DE8                            
00006DE8                            loc_6908:
00006DE8 0892 0001                  		bclr	#1,(a2)
00006DEC 6700                       		beq.s	loc_6922
00006DEE 383C 00E0                  		move.w	#$E0,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6C20
00006DF8 383C 00E0                  		move.w	#$E0,d4
00006DFC 7AF0                       		moveq	#-$10,d5
00006DFE 6100 0000                  		bsr.w	sub_6AD8
00006E02                            
00006E02                            loc_6922:
00006E02 0892 0002                  		bclr	#2,(a2)
00006E06 6700                       		beq.s	loc_6938
00006E08 78F0                       		moveq	#-$10,d4
00006E0A 7AF0                       		moveq	#-$10,d5
00006E0C 6100 0000                  		bsr.w	sub_6C20
00006E10 78F0                       		moveq	#-$10,d4
00006E12 7AF0                       		moveq	#-$10,d5
00006E14 6100 0000                  		bsr.w	sub_6B04
00006E18                            
00006E18                            loc_6938:
00006E18 0892 0003                  		bclr	#3,(a2)
00006E1C 6700                       		beq.s	locret_6952
00006E1E 78F0                       		moveq	#-$10,d4
00006E20 3A3C 0140                  		move.w	#$140,d5
00006E24 6100 0000                  		bsr.w	sub_6C20
00006E28 78F0                       		moveq	#-$10,d4
00006E2A 3A3C 0140                  		move.w	#$140,d5
00006E2E 6100 0000                  		bsr.w	sub_6B04
00006E32                            
00006E32                            locret_6952:
00006E32 4E75                       		rts	
00006E34                            ; End of function LoadTilesAsYouMove
00006E34                            
00006E34                            
00006E34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E34                            
00006E34                            
00006E34                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006E34 4A12                       		tst.b	(a2)
00006E36 6700 0000                  		beq.w	locret_69F2
00006E3A 0892 0000                  		bclr	#0,(a2)
00006E3E 6700                       		beq.s	loc_6972
00006E40 78F0                       		moveq	#-$10,d4
00006E42 7AF0                       		moveq	#-$10,d5
00006E44 6100 0000                  		bsr.w	sub_6C20
00006E48 78F0                       		moveq	#-$10,d4
00006E4A 7AF0                       		moveq	#-$10,d5
00006E4C 7C1F                       		moveq	#$1F,d6
00006E4E 6100 0000                  		bsr.w	sub_6ADA
00006E52                            
00006E52                            loc_6972:
00006E52 0892 0001                  		bclr	#1,(a2)
00006E56 6700                       		beq.s	loc_698E
00006E58 383C 00E0                  		move.w	#$E0,d4
00006E5C 7AF0                       		moveq	#-$10,d5
00006E5E 6100 0000                  		bsr.w	sub_6C20
00006E62 383C 00E0                  		move.w	#$E0,d4
00006E66 7AF0                       		moveq	#-$10,d5
00006E68 7C1F                       		moveq	#$1F,d6
00006E6A 6100 0000                  		bsr.w	sub_6ADA
00006E6E                            
00006E6E                            loc_698E:
00006E6E 0892 0002                  		bclr	#2,(a2)
00006E72 6700                       		beq.s	loc_69BE
00006E74 78F0                       		moveq	#-$10,d4
00006E76 7AF0                       		moveq	#-$10,d5
00006E78 6100 0000                  		bsr.w	sub_6C20
00006E7C 78F0                       		moveq	#-$10,d4
00006E7E 7AF0                       		moveq	#-$10,d5
00006E80 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E84 322B 0004                  		move.w	4(a3),d1
00006E88 0241 FFF0                  		andi.w	#-$10,d1
00006E8C 9C41                       		sub.w	d1,d6
00006E8E 6D00                       		blt.s	loc_69BE
00006E90 E84E                       		lsr.w	#4,d6
00006E92 0C46 000F                  		cmpi.w	#$F,d6
00006E96 6500                       		bcs.s	loc_69BA
00006E98 7C0F                       		moveq	#$F,d6
00006E9A                            
00006E9A                            loc_69BA:
00006E9A 6100 0000                  		bsr.w	sub_6B06
00006E9E                            
00006E9E                            loc_69BE:
00006E9E 0892 0003                  		bclr	#3,(a2)
00006EA2 6700                       		beq.s	locret_69F2
00006EA4 78F0                       		moveq	#-$10,d4
00006EA6 3A3C 0140                  		move.w	#$140,d5
00006EAA 6100 0000                  		bsr.w	sub_6C20
00006EAE 78F0                       		moveq	#-$10,d4
00006EB0 3A3C 0140                  		move.w	#$140,d5
00006EB4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EB8 322B 0004                  		move.w	4(a3),d1
00006EBC 0241 FFF0                  		andi.w	#-$10,d1
00006EC0 9C41                       		sub.w	d1,d6
00006EC2 6D00                       		blt.s	locret_69F2
00006EC4 E84E                       		lsr.w	#4,d6
00006EC6 0C46 000F                  		cmpi.w	#$F,d6
00006ECA 6500                       		bcs.s	loc_69EE
00006ECC 7C0F                       		moveq	#$F,d6
00006ECE                            
00006ECE                            loc_69EE:
00006ECE 6100 0000                  		bsr.w	sub_6B06
00006ED2                            
00006ED2                            locret_69F2:
00006ED2 4E75                       		rts	
00006ED4                            ; End of function sub_6954
00006ED4                            
00006ED4                            
00006ED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ED4                            
00006ED4                            
00006ED4                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006ED4 4A12                       		tst.b	(a2)
00006ED6 6700 0000                  		beq.w	locret_6A80
00006EDA 0892 0002                  		bclr	#2,(a2)
00006EDE 6700                       		beq.s	loc_6A3E
00006EE0 0C53 0010                  		cmpi.w	#$10,(a3)
00006EE4 6500                       		bcs.s	loc_6A3E
00006EE6 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EEA 322B 0004                  		move.w	4(a3),d1
00006EEE 0241 FFF0                  		andi.w	#-$10,d1
00006EF2 9841                       		sub.w	d1,d4
00006EF4 3F04                       		move.w	d4,-(sp)
00006EF6 7AF0                       		moveq	#-$10,d5
00006EF8 6100 0000                  		bsr.w	sub_6C20
00006EFC 381F                       		move.w	(sp)+,d4
00006EFE 7AF0                       		moveq	#-$10,d5
00006F00 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F04 322B 0004                  		move.w	4(a3),d1
00006F08 0241 FFF0                  		andi.w	#-$10,d1
00006F0C 9C41                       		sub.w	d1,d6
00006F0E 6D00                       		blt.s	loc_6A3E
00006F10 E84E                       		lsr.w	#4,d6
00006F12 0446 000E                  		subi.w	#$E,d6
00006F16 6400                       		bcc.s	loc_6A3E
00006F18 4446                       		neg.w	d6
00006F1A 6100 0000                  		bsr.w	sub_6B06
00006F1E                            
00006F1E                            loc_6A3E:
00006F1E 0892 0003                  		bclr	#3,(a2)
00006F22 6700                       		beq.s	locret_6A80
00006F24 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006F28 322B 0004                  		move.w	4(a3),d1
00006F2C 0241 FFF0                  		andi.w	#-$10,d1
00006F30 9841                       		sub.w	d1,d4
00006F32 3F04                       		move.w	d4,-(sp)
00006F34 3A3C 0140                  		move.w	#$140,d5
00006F38 6100 0000                  		bsr.w	sub_6C20
00006F3C 381F                       		move.w	(sp)+,d4
00006F3E 3A3C 0140                  		move.w	#$140,d5
00006F42 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F46 322B 0004                  		move.w	4(a3),d1
00006F4A 0241 FFF0                  		andi.w	#-$10,d1
00006F4E 9C41                       		sub.w	d1,d6
00006F50 6D00                       		blt.s	locret_6A80
00006F52 E84E                       		lsr.w	#4,d6
00006F54 0446 000E                  		subi.w	#$E,d6
00006F58 6400                       		bcc.s	locret_6A80
00006F5A 4446                       		neg.w	d6
00006F5C 6100 0000                  		bsr.w	sub_6B06
00006F60                            
00006F60                            locret_6A80:
00006F60 4E75                       		rts	
00006F62                            ; End of function sub_69F4
00006F62                            
00006F62                            ; ===========================================================================
00006F62 4A12                       		tst.b	(a2)
00006F64 6700                       		beq.s	locret_6AD6
00006F66 0892 0002                  		bclr	#2,(a2)
00006F6A 6700                       		beq.s	loc_6AAC
00006F6C 383C 00D0                  		move.w	#$D0,d4
00006F70 322B 0004                  		move.w	4(a3),d1
00006F74 0241 FFF0                  		andi.w	#-$10,d1
00006F78 9841                       		sub.w	d1,d4
00006F7A 3F04                       		move.w	d4,-(sp)
00006F7C 7AF0                       		moveq	#-$10,d5
00006F7E 6100 0000                  		bsr.w	sub_6C3C
00006F82 381F                       		move.w	(sp)+,d4
00006F84 7AF0                       		moveq	#-$10,d5
00006F86 7C02                       		moveq	#2,d6
00006F88 6100 0000                  		bsr.w	sub_6B06
00006F8C                            
00006F8C                            loc_6AAC:
00006F8C 0892 0003                  		bclr	#3,(a2)
00006F90 6700                       		beq.s	locret_6AD6
00006F92 383C 00D0                  		move.w	#$D0,d4
00006F96 322B 0004                  		move.w	4(a3),d1
00006F9A 0241 FFF0                  		andi.w	#-$10,d1
00006F9E 9841                       		sub.w	d1,d4
00006FA0 3F04                       		move.w	d4,-(sp)
00006FA2 3A3C 0140                  		move.w	#$140,d5
00006FA6 6100 0000                  		bsr.w	sub_6C3C
00006FAA 381F                       		move.w	(sp)+,d4
00006FAC 3A3C 0140                  		move.w	#$140,d5
00006FB0 7C02                       		moveq	#2,d6
00006FB2 6100 0000                  		bsr.w	sub_6B06
00006FB6                            
00006FB6                            locret_6AD6:
00006FB6 4E75                       		rts	
00006FB8                            
00006FB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FB8                            
00006FB8                            
00006FB8                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006FB8 7C15                       		moveq	#$15,d6
00006FBA                            ; End of function sub_6AD8
00006FBA                            
00006FBA                            
00006FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FBA                            
00006FBA                            
00006FBA                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006FBA 2E3C 0080 0000             		move.l	#$800000,d7
00006FC0 2200                       		move.l	d0,d1
00006FC2                            
00006FC2                            loc_6AE2:
00006FC2 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006FC6 6100 0000                  		bsr.w	sub_6BD6
00006FCA 2001                       		move.l	d1,d0
00006FCC 6100 0000                  		bsr.w	sub_6B32
00006FD0 5801                       		addq.b	#4,d1
00006FD2 0201 007F                  		andi.b	#$7F,d1
00006FD6 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006FDA 0645 0010                  		addi.w	#$10,d5
00006FDE 51CE FFE2                  		dbf	d6,loc_6AE2
00006FE2 4E75                       		rts	
00006FE4                            ; End of function sub_6ADA
00006FE4                            
00006FE4                            
00006FE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FE4                            
00006FE4                            
00006FE4                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006FE4 7C0F                       		moveq	#$F,d6
00006FE6                            ; End of function sub_6B04
00006FE6                            
00006FE6                            
00006FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FE6                            
00006FE6                            
00006FE6                            sub_6B06:				; XREF: sub_6954
00006FE6 2E3C 0080 0000             		move.l	#$800000,d7
00006FEC 2200                       		move.l	d0,d1
00006FEE                            
00006FEE                            loc_6B0E:
00006FEE 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006FF2 6100 0000                  		bsr.w	sub_6BD6
00006FF6 2001                       		move.l	d1,d0
00006FF8 6100 0000                  		bsr.w	sub_6B32
00006FFC 0641 0100                  		addi.w	#$100,d1
00007000 0241 0FFF                  		andi.w	#$FFF,d1
00007004 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007008 0644 0010                  		addi.w	#$10,d4
0000700C 51CE FFE0                  		dbf	d6,loc_6B0E
00007010 4E75                       		rts	
00007012                            ; End of function sub_6B06
00007012                            
00007012                            
00007012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007012                            
00007012                            
00007012                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007012 8042                       		or.w	d2,d0
00007014 4840                       		swap	d0
00007016 0810 0004                  		btst	#4,(a0)
0000701A 6600                       		bne.s	loc_6B6E
0000701C 0810 0003                  		btst	#3,(a0)
00007020 6600                       		bne.s	loc_6B4E
00007022 2A80                       		move.l	d0,(a5)
00007024 2C99                       		move.l	(a1)+,(a6)
00007026 D087                       		add.l	d7,d0
00007028 2A80                       		move.l	d0,(a5)
0000702A 2C99                       		move.l	(a1)+,(a6)
0000702C 4E75                       		rts	
0000702E                            ; ===========================================================================
0000702E                            
0000702E                            loc_6B4E:
0000702E 2A80                       		move.l	d0,(a5)
00007030 2819                       		move.l	(a1)+,d4
00007032 0A84 0800 0800             		eori.l	#$8000800,d4
00007038 4844                       		swap	d4
0000703A 2C84                       		move.l	d4,(a6)
0000703C D087                       		add.l	d7,d0
0000703E 2A80                       		move.l	d0,(a5)
00007040 2819                       		move.l	(a1)+,d4
00007042 0A84 0800 0800             		eori.l	#$8000800,d4
00007048 4844                       		swap	d4
0000704A 2C84                       		move.l	d4,(a6)
0000704C 4E75                       		rts	
0000704E                            ; ===========================================================================
0000704E                            
0000704E                            loc_6B6E:
0000704E 0810 0003                  		btst	#3,(a0)
00007052 6600                       		bne.s	loc_6B90
00007054 2A80                       		move.l	d0,(a5)
00007056 2A19                       		move.l	(a1)+,d5
00007058 2819                       		move.l	(a1)+,d4
0000705A 0A84 1000 1000             		eori.l	#$10001000,d4
00007060 2C84                       		move.l	d4,(a6)
00007062 D087                       		add.l	d7,d0
00007064 2A80                       		move.l	d0,(a5)
00007066 0A85 1000 1000             		eori.l	#$10001000,d5
0000706C 2C85                       		move.l	d5,(a6)
0000706E 4E75                       		rts	
00007070                            ; ===========================================================================
00007070                            
00007070                            loc_6B90:
00007070 2A80                       		move.l	d0,(a5)
00007072 2A19                       		move.l	(a1)+,d5
00007074 2819                       		move.l	(a1)+,d4
00007076 0A84 1800 1800             		eori.l	#$18001800,d4
0000707C 4844                       		swap	d4
0000707E 2C84                       		move.l	d4,(a6)
00007080 D087                       		add.l	d7,d0
00007082 2A80                       		move.l	d0,(a5)
00007084 0A85 1800 1800             		eori.l	#$18001800,d5
0000708A 4845                       		swap	d5
0000708C 2C85                       		move.l	d5,(a6)
0000708E 4E75                       		rts	
00007090                            ; End of function sub_6B32
00007090                            
00007090                            ; ===========================================================================
00007090 4E75                       		rts	
00007092                            ; ===========================================================================
00007092 2A80                       		move.l	d0,(a5)
00007094 3A3C 2000                  		move.w	#$2000,d5
00007098 3819                       		move.w	(a1)+,d4
0000709A D845                       		add.w	d5,d4
0000709C 3C84                       		move.w	d4,(a6)
0000709E 3819                       		move.w	(a1)+,d4
000070A0 D845                       		add.w	d5,d4
000070A2 3C84                       		move.w	d4,(a6)
000070A4 D087                       		add.l	d7,d0
000070A6 2A80                       		move.l	d0,(a5)
000070A8 3819                       		move.w	(a1)+,d4
000070AA D845                       		add.w	d5,d4
000070AC 3C84                       		move.w	d4,(a6)
000070AE 3819                       		move.w	(a1)+,d4
000070B0 D845                       		add.w	d5,d4
000070B2 3C84                       		move.w	d4,(a6)
000070B4 4E75                       		rts	
000070B6                            
000070B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B6                            
000070B6                            
000070B6                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000070B6 43F8 B000                  		lea	($FFFFB000).w,a1
000070BA D86B 0004                  		add.w	4(a3),d4
000070BE DA53                       		add.w	(a3),d5
000070C0 3604                       		move.w	d4,d3
000070C2 E24B                       		lsr.w	#1,d3
000070C4 0243 0380                  		andi.w	#$380,d3
000070C8 E64D                       		lsr.w	#3,d5
000070CA 3005                       		move.w	d5,d0
000070CC EA48                       		lsr.w	#5,d0
000070CE 0240 007F                  		andi.w	#$7F,d0
000070D2 D043                       		add.w	d3,d0
000070D4 76FF                       		moveq	#-1,d3
000070D6 1634 0000                  		move.b	(a4,d0.w),d3
000070DA 6700                       		beq.s	locret_6C1E
000070DC 5303                       		subq.b	#1,d3
000070DE 0243 007F                  		andi.w	#$7F,d3
000070E2 EE5B                       		ror.w	#7,d3
000070E4 D844                       		add.w	d4,d4
000070E6 0244 01E0                  		andi.w	#$1E0,d4
000070EA 0245 001E                  		andi.w	#$1E,d5
000070EE D644                       		add.w	d4,d3
000070F0 D645                       		add.w	d5,d3
000070F2 2043                       		movea.l	d3,a0
000070F4 3610                       		move.w	(a0),d3
000070F6 0243 03FF                  		andi.w	#$3FF,d3
000070FA E74B                       		lsl.w	#3,d3
000070FC D2C3                       		adda.w	d3,a1
000070FE                            
000070FE                            locret_6C1E:
000070FE 4E75                       		rts	
00007100                            ; End of function sub_6BD6
00007100                            
00007100                            
00007100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007100                            
00007100                            
00007100                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007100 D86B 0004                  		add.w	4(a3),d4
00007104 DA53                       		add.w	(a3),d5
00007106 0244 00F0                  		andi.w	#$F0,d4
0000710A 0245 01F0                  		andi.w	#$1F0,d5
0000710E E94C                       		lsl.w	#4,d4
00007110 E44D                       		lsr.w	#2,d5
00007112 D845                       		add.w	d5,d4
00007114 7003                       		moveq	#3,d0
00007116 4840                       		swap	d0
00007118 3004                       		move.w	d4,d0
0000711A 4E75                       		rts	
0000711C                            ; End of function sub_6C20
0000711C                            
0000711C                            
0000711C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000711C                            ; not used
0000711C                            
0000711C                            
0000711C                            sub_6C3C:
0000711C D86B 0004                  		add.w	4(a3),d4
00007120 DA53                       		add.w	(a3),d5
00007122 0244 00F0                  		andi.w	#$F0,d4
00007126 0245 01F0                  		andi.w	#$1F0,d5
0000712A E94C                       		lsl.w	#4,d4
0000712C E44D                       		lsr.w	#2,d5
0000712E D845                       		add.w	d5,d4
00007130 7002                       		moveq	#2,d0
00007132 4840                       		swap	d0
00007134 3004                       		move.w	d4,d0
00007136 4E75                       		rts	
00007138                            ; End of function sub_6C3C
00007138                            
00007138                            ; ---------------------------------------------------------------------------
00007138                            ; Subroutine to	load tiles as soon as the level	appears
00007138                            ; ---------------------------------------------------------------------------
00007138                            
00007138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007138                            
00007138                            
00007138                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007138 4BF9 00C0 0004             		lea	($C00004).l,a5
0000713E 4DF9 00C0 0000             		lea	($C00000).l,a6
00007144 47F8 F700                  		lea	($FFFFF700).w,a3
00007148 49F8 A400                  		lea	($FFFFA400).w,a4
0000714C 343C 4000                  		move.w	#$4000,d2
00007150 6100                       		bsr.s	LoadTilesFromStart2
00007152 47F8 F708                  		lea	($FFFFF708).w,a3
00007156 49F8 A440                  		lea	($FFFFA440).w,a4
0000715A 343C 6000                  		move.w	#$6000,d2
0000715E                            ; End of function LoadTilesFromStart
0000715E                            
0000715E                            
0000715E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000715E                            
0000715E                            
0000715E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
0000715E 78F0                       		moveq	#-$10,d4
00007160 7C0F                       		moveq	#$F,d6
00007162                            
00007162                            loc_6C82:
00007162 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007166 7A00                       		moveq	#0,d5
00007168 3204                       		move.w	d4,d1
0000716A 6100 FF94                  		bsr.w	sub_6C20
0000716E 3801                       		move.w	d1,d4
00007170 7A00                       		moveq	#0,d5
00007172 7C1F                       		moveq	#$1F,d6
00007174 6100 FE44                  		bsr.w	sub_6ADA
00007178 4CDF 0070                  		movem.l	(sp)+,d4-d6
0000717C 0644 0010                  		addi.w	#$10,d4
00007180 51CE FFE0                  		dbf	d6,loc_6C82
00007184 4E75                       		rts	
00007186                            ; End of function LoadTilesFromStart2
00007186                            
00007186                            ; ---------------------------------------------------------------------------
00007186                            ; Main Load Block loading subroutine
00007186                            ; ---------------------------------------------------------------------------
00007186                            
00007186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007186                            
00007186                            
00007186                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007186 7000                       		moveq	#0,d0
00007188 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000718C E948                       		lsl.w	#4,d0
0000718E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007194 45F2 0000                  		lea	(a2,d0.w),a2
00007198 2F0A                       		move.l	a2,-(sp)
0000719A 588A                       		addq.l	#4,a2
0000719C 205A                       		movea.l	(a2)+,a0
0000719E 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000071A2 303C 0000                  		move.w	#0,d0
000071A6 6100 A7A0                  		bsr.w	EniDec
000071AA 205A                       		movea.l	(a2)+,a0
000071AC 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000071B2 6100 A912                  		bsr.w	KosDec
000071B6 6100 0000                  		bsr.w	LevelLayoutLoad
000071BA 301A                       		move.w	(a2)+,d0
000071BC 3012                       		move.w	(a2),d0
000071BE 0240 00FF                  		andi.w	#$FF,d0
000071C2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000071C8 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000071CA 700C                       		moveq	#$C,d0		; use SB3 pallet
000071CC                            
000071CC                            MLB_ChkSBZPal:
000071CC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000071D2 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000071D4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000071DA 6600                       		bne.s	MLB_NormalPal	; if not, branch
000071DC                            
000071DC                            MLB_UsePal0E:
000071DC 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000071DE                            
000071DE                            MLB_NormalPal:
000071DE 6100 B10C                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000071E2 245F                       		movea.l	(sp)+,a2
000071E4 584A                       		addq.w	#4,a2
000071E6 7000                       		moveq	#0,d0
000071E8 1012                       		move.b	(a2),d0
000071EA 6700                       		beq.s	locret_6D10
000071EC 6100 A5BC                  		bsr.w	LoadPLC		; load pattern load cues
000071F0                            
000071F0                            locret_6D10:
000071F0 4E75                       		rts	
000071F2                            ; End of function MainLoadBlockLoad
000071F2                            
000071F2                            ; ---------------------------------------------------------------------------
000071F2                            ; Level	layout loading subroutine
000071F2                            ; ---------------------------------------------------------------------------
000071F2                            
000071F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071F2                            
000071F2                            
000071F2                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
000071F2 47F8 A400                  		lea	($FFFFA400).w,a3
000071F6 323C 01FF                  		move.w	#$1FF,d1
000071FA 7000                       		moveq	#0,d0
000071FC                            
000071FC                            LevLoad_ClrRam:
000071FC 26C0                       		move.l	d0,(a3)+
000071FE 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007202                            
00007202 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007206 7200                       		moveq	#0,d1
00007208 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
0000720C 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007210 7202                       		moveq	#2,d1
00007212                            ; End of function LevelLayoutLoad
00007212                            
00007212                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007212                            
00007212                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007212                            
00007212                            
00007212                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007212 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007216 ED08                       		lsl.b	#6,d0
00007218 EA48                       		lsr.w	#5,d0
0000721A 3400                       		move.w	d0,d2
0000721C D040                       		add.w	d0,d0
0000721E D042                       		add.w	d2,d0
00007220 D041                       		add.w	d1,d0
00007222 43F9 0000 0000             		lea	(Level_Index).l,a1
00007228 3031 0000                  		move.w	(a1,d0.w),d0
0000722C 43F1 0000                  		lea	(a1,d0.w),a1
00007230 7200                       		moveq	#0,d1
00007232 3401                       		move.w	d1,d2
00007234 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007236 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007238                            
00007238                            LevLoad_NumRows:
00007238 3001                       		move.w	d1,d0
0000723A 204B                       		movea.l	a3,a0
0000723C                            
0000723C                            LevLoad_Row:
0000723C 10D9                       		move.b	(a1)+,(a0)+
0000723E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007242 47EB 0080                  		lea	$80(a3),a3	; do next row
00007246 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
0000724A 4E75                       		rts	
0000724C                            ; End of function LevelLayoutLoad2
0000724C                            
0000724C                            ; ---------------------------------------------------------------------------
0000724C                            ; Dynamic screen resize	loading	subroutine
0000724C                            ; ---------------------------------------------------------------------------
0000724C                            
0000724C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000724C                            
0000724C                            
0000724C                            DynScrResizeLoad:			; XREF: DeformBgLayer
0000724C 7000                       		moveq	#0,d0
0000724E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007252 D040                       		add.w	d0,d0
00007254 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007258 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
0000725C 7202                       		moveq	#2,d1
0000725E 3038 F726                  		move.w	($FFFFF726).w,d0
00007262 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007266 6700                       		beq.s	locret_6DAA
00007268 6400                       		bcc.s	loc_6DAC
0000726A 4441                       		neg.w	d1
0000726C 3038 F704                  		move.w	($FFFFF704).w,d0
00007270 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007274 6300                       		bls.s	loc_6DA0
00007276 31C0 F72E                  		move.w	d0,($FFFFF72E).w
0000727A 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007280                            
00007280                            loc_6DA0:
00007280 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007284 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000728A                            
0000728A                            locret_6DAA:
0000728A 4E75                       		rts	
0000728C                            ; ===========================================================================
0000728C                            
0000728C                            loc_6DAC:				; XREF: DynScrResizeLoad
0000728C 3038 F704                  		move.w	($FFFFF704).w,d0
00007290 5040                       		addq.w	#8,d0
00007292 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007296 6500                       		bcs.s	loc_6DC4
00007298 0838 0001 D022             		btst	#1,($FFFFD022).w
0000729E 6700                       		beq.s	loc_6DC4
000072A0 D241                       		add.w	d1,d1
000072A2 D241                       		add.w	d1,d1
000072A4                            
000072A4                            loc_6DC4:
000072A4 D378 F72E                  		add.w	d1,($FFFFF72E).w
000072A8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000072AE 4E75                       		rts	
000072B0                            ; End of function DynScrResizeLoad
000072B0                            
000072B0                            ; ===========================================================================
000072B0                            ; ---------------------------------------------------------------------------
000072B0                            ; Offset index for dynamic screen resizing
000072B0                            ; ---------------------------------------------------------------------------
000072B0 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000072B4 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000072B8 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000072BC 0000                       		dc.w Resize_Ending-Resize_Index
000072BE                            ; ===========================================================================
000072BE                            ; ---------------------------------------------------------------------------
000072BE                            ; Green	Hill Zone dynamic screen resizing
000072BE                            ; ---------------------------------------------------------------------------
000072BE                            
000072BE                            Resize_GHZ:				; XREF: Resize_Index
000072BE 7000                       		moveq	#0,d0
000072C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000072C4 D040                       		add.w	d0,d0
000072C6 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000072CA 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000072CE                            ; ===========================================================================
000072CE 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000072D0 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000072D2 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000072D4                            ; ===========================================================================
000072D4                            
000072D4                            Resize_GHZ1:
000072D4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000072DA 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000072E0 6500                       		bcs.s	locret_6E08	; if not, branch
000072E2 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000072E8                            
000072E8                            locret_6E08:
000072E8 4E75                       		rts	
000072EA                            ; ===========================================================================
000072EA                            
000072EA                            Resize_GHZ2:
000072EA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072F0 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
000072F6 6500                       		bcs.s	locret_6E3A
000072F8 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000072FE 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007304 6500                       		bcs.s	locret_6E3A
00007306 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000730C 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007312 6500                       		bcs.s	locret_6E3A
00007314 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000731A                            
0000731A                            locret_6E3A:
0000731A 4E75                       		rts	
0000731C                            ; ===========================================================================
0000731C                            
0000731C                            Resize_GHZ3:
0000731C 7000                       		moveq	#0,d0
0000731E 1038 F742                  		move.b	($FFFFF742).w,d0
00007322 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007326 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000732A                            ; ===========================================================================
0000732A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
0000732C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
0000732E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007330                            ; ===========================================================================
00007330                            
00007330                            Resize_GHZ3main:
00007330 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007336 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
0000733C 6500                       		bcs.s	locret_6E96
0000733E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007344 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000734A 6500                       		bcs.s	locret_6E96
0000734C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007352 6500                       		bcs.s	loc_6E98
00007354 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
0000735A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007360 6400                       		bcc.s	loc_6E8E
00007362 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007368 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
0000736E                            
0000736E                            loc_6E8E:
0000736E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007374 6400                       		bcc.s	loc_6E98
00007376                            
00007376                            locret_6E96:
00007376 4E75                       		rts	
00007378                            ; ===========================================================================
00007378                            
00007378                            loc_6E98:
00007378 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000737E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007382 4E75                       		rts	
00007384                            ; ===========================================================================
00007384                            
00007384                            Resize_GHZ3boss:
00007384 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
0000738A 6400                       		bcc.s	loc_6EB0
0000738C 5538 F742                  		subq.b	#2,($FFFFF742).w
00007390                            
00007390                            loc_6EB0:
00007390 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007396 6500                       		bcs.s	locret_6EE8
00007398 6100 0000                  		bsr.w	SingleObjLoad
0000739C 6600                       		bne.s	loc_6ED0
0000739E 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000073A2 337C 2A60 0008             		move.w	#$2A60,8(a1)
000073A8 337C 0280 000C             		move.w	#$280,$C(a1)
000073AE                            
000073AE                            loc_6ED0:
000073AE 303C 008C                  		move.w	#$8C,d0
000073B2 6100 A20C                  		bsr.w	PlaySound	; play boss music
000073B6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073BC 5438 F742                  		addq.b	#2,($FFFFF742).w
000073C0 7011                       		moveq	#$11,d0
000073C2 6000 A3E6                  		bra.w	LoadPLC		; load boss patterns
000073C6                            ; ===========================================================================
000073C6                            
000073C6                            locret_6EE8:
000073C6 4E75                       		rts	
000073C8                            ; ===========================================================================
000073C8                            
000073C8                            Resize_GHZ3end:
000073C8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000073CE 4E75                       		rts	
000073D0                            ; ===========================================================================
000073D0                            ; ---------------------------------------------------------------------------
000073D0                            ; Labyrinth Zone dynamic screen	resizing
000073D0                            ; ---------------------------------------------------------------------------
000073D0                            
000073D0                            Resize_LZ:				; XREF: Resize_Index
000073D0 7000                       		moveq	#0,d0
000073D2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073D6 D040                       		add.w	d0,d0
000073D8 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000073DC 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000073E0                            ; ===========================================================================
000073E0 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000073E2 0000                       		dc.w Resize_LZ12-Resize_LZx
000073E4 0000                       		dc.w Resize_LZ3-Resize_LZx
000073E6 0000                       		dc.w Resize_SBZ3-Resize_LZx
000073E8                            ; ===========================================================================
000073E8                            
000073E8                            Resize_LZ12:
000073E8 4E75                       		rts	
000073EA                            ; ===========================================================================
000073EA                            
000073EA                            Resize_LZ3:
000073EA 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
000073EE 6700                       		beq.s	loc_6F28	; if not, branch
000073F0 43F8 A506                  		lea	($FFFFA506).w,a1
000073F4 0C11 0007                  		cmpi.b	#7,(a1)
000073F8 6700                       		beq.s	loc_6F28
000073FA 12BC 0007                  		move.b	#7,(a1)		; modify level layout
000073FE 303C 00B7                  		move.w	#$B7,d0
00007402 6100 A1C2                  		bsr.w	PlaySound_Special ; play rumbling sound
00007406                            
00007406                            loc_6F28:
00007406 4A38 F742                  		tst.b	($FFFFF742).w
0000740A 6600                       		bne.s	locret_6F64
0000740C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007412 6500                       		bcs.s	locret_6F62
00007414 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000741A 6400                       		bcc.s	locret_6F62
0000741C 6100 0000                  		bsr.w	SingleObjLoad
00007420 6600                       		bne.s	loc_6F4A
00007422 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007426                            
00007426                            loc_6F4A:
00007426 303C 008C                  		move.w	#$8C,d0
0000742A 6100 A194                  		bsr.w	PlaySound	; play boss music
0000742E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007434 5438 F742                  		addq.b	#2,($FFFFF742).w
00007438 7011                       		moveq	#$11,d0
0000743A 6000 A36E                  		bra.w	LoadPLC		; load boss patterns
0000743E                            ; ===========================================================================
0000743E                            
0000743E                            locret_6F62:
0000743E 4E75                       		rts	
00007440                            ; ===========================================================================
00007440                            
00007440                            locret_6F64:
00007440 4E75                       		rts	
00007442                            ; ===========================================================================
00007442                            
00007442                            Resize_SBZ3:
00007442 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007448 6500                       		bcs.s	locret_6F8C
0000744A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007450 6400                       		bcc.s	locret_6F8C	; if not, branch
00007452 4238 FE30                  		clr.b	($FFFFFE30).w
00007456 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000745C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007462 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007468                            
00007468                            locret_6F8C:
00007468 4E75                       		rts	
0000746A                            ; ===========================================================================
0000746A                            ; ---------------------------------------------------------------------------
0000746A                            ; Marble Zone dynamic screen resizing
0000746A                            ; ---------------------------------------------------------------------------
0000746A                            
0000746A                            Resize_MZ:				; XREF: Resize_Index
0000746A 7000                       		moveq	#0,d0
0000746C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007470 D040                       		add.w	d0,d0
00007472 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007476 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000747A                            ; ===========================================================================
0000747A 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000747C 0000                       		dc.w Resize_MZ2-Resize_MZx
0000747E 0000                       		dc.w Resize_MZ3-Resize_MZx
00007480                            ; ===========================================================================
00007480                            
00007480                            Resize_MZ1:
00007480 7000                       		moveq	#0,d0
00007482 1038 F742                  		move.b	($FFFFF742).w,d0
00007486 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
0000748A 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000748E                            ; ===========================================================================
0000748E 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007490 0000                       		dc.w loc_6FEA-off_6FB2
00007492 0000                       		dc.w loc_702E-off_6FB2
00007494 0000                       		dc.w loc_7050-off_6FB2
00007496                            ; ===========================================================================
00007496                            
00007496                            loc_6FBA:
00007496 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000749C 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000074A2 6500                       		bcs.s	locret_6FE8
000074A4 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000074AA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000074B0 6500                       		bcs.s	locret_6FE8
000074B2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000074B8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000074BE 6500                       		bcs.s	locret_6FE8
000074C0 5438 F742                  		addq.b	#2,($FFFFF742).w
000074C4                            
000074C4                            locret_6FE8:
000074C4 4E75                       		rts	
000074C6                            ; ===========================================================================
000074C6                            
000074C6                            loc_6FEA:
000074C6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000074CC 6400                       		bcc.s	loc_6FF8
000074CE 5538 F742                  		subq.b	#2,($FFFFF742).w
000074D2 4E75                       		rts	
000074D4                            ; ===========================================================================
000074D4                            
000074D4                            loc_6FF8:
000074D4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074DA 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
000074E0 6400                       		bcc.s	locret_702C
000074E2 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
000074E8 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000074EE 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
000074F4 6400                       		bcc.s	locret_702C
000074F6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074FC 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007502 6500                       		bcs.s	locret_702C
00007504 5438 F742                  		addq.b	#2,($FFFFF742).w
00007508                            
00007508                            locret_702C:
00007508 4E75                       		rts	
0000750A                            ; ===========================================================================
0000750A                            
0000750A                            loc_702E:
0000750A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007510 6400                       		bcc.s	loc_703C
00007512 5538 F742                  		subq.b	#2,($FFFFF742).w
00007516 4E75                       		rts	
00007518                            ; ===========================================================================
00007518                            
00007518                            loc_703C:
00007518 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000751E 6500                       		bcs.s	locret_704E
00007520 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007526 5438 F742                  		addq.b	#2,($FFFFF742).w
0000752A                            
0000752A                            locret_704E:
0000752A 4E75                       		rts	
0000752C                            ; ===========================================================================
0000752C                            
0000752C                            loc_7050:
0000752C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007532 6500                       		bcs.s	locret_7072
00007534 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000753A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007540 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007546 6500                       		bcs.s	locret_7072
00007548 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000754E                            
0000754E                            locret_7072:
0000754E 4E75                       		rts	
00007550                            ; ===========================================================================
00007550                            
00007550                            Resize_MZ2:
00007550 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007556 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000755C 6500                       		bcs.s	locret_7088
0000755E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007564                            
00007564                            locret_7088:
00007564 4E75                       		rts	
00007566                            ; ===========================================================================
00007566                            
00007566                            Resize_MZ3:
00007566 7000                       		moveq	#0,d0
00007568 1038 F742                  		move.b	($FFFFF742).w,d0
0000756C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007570 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007574                            ; ===========================================================================
00007574 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007576 0000                       		dc.w Resize_MZ3end-off_7098
00007578                            ; ===========================================================================
00007578                            
00007578                            Resize_MZ3boss:
00007578 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000757E 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007584 6500                       		bcs.s	locret_70E8
00007586 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000758C 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007592 6500                       		bcs.s	locret_70E8
00007594 6100 0000                  		bsr.w	SingleObjLoad
00007598 6600                       		bne.s	loc_70D0
0000759A 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000759E 337C 19F0 0008             		move.w	#$19F0,8(a1)
000075A4 337C 022C 000C             		move.w	#$22C,$C(a1)
000075AA                            
000075AA                            loc_70D0:
000075AA 303C 008C                  		move.w	#$8C,d0
000075AE 6100 A010                  		bsr.w	PlaySound	; play boss music
000075B2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075B8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075BC 7011                       		moveq	#$11,d0
000075BE 6000 A1EA                  		bra.w	LoadPLC		; load boss patterns
000075C2                            ; ===========================================================================
000075C2                            
000075C2                            locret_70E8:
000075C2 4E75                       		rts	
000075C4                            ; ===========================================================================
000075C4                            
000075C4                            Resize_MZ3end:
000075C4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075CA 4E75                       		rts	
000075CC                            ; ===========================================================================
000075CC                            ; ---------------------------------------------------------------------------
000075CC                            ; Star Light Zone dynamic screen resizing
000075CC                            ; ---------------------------------------------------------------------------
000075CC                            
000075CC                            Resize_SLZ:				; XREF: Resize_Index
000075CC 7000                       		moveq	#0,d0
000075CE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075D2 D040                       		add.w	d0,d0
000075D4 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000075D8 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000075DC                            ; ===========================================================================
000075DC 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
000075DE 0000                       		dc.w Resize_SLZ2-Resize_SLZx
000075E0 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000075E2                            ; ===========================================================================
000075E2                            
000075E2                            Resize_SLZ1:
000075E2 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
000075E8 4E75                       		rts	
000075EA                            
000075EA                            Resize_SLZ2:
000075EA 4E75                       		rts	
000075EC                            ; ===========================================================================
000075EC                            
000075EC                            Resize_SLZ3:
000075EC 7000                       		moveq	#0,d0
000075EE 1038 F742                  		move.b	($FFFFF742).w,d0
000075F2 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000075F6 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000075FA                            ; ===========================================================================
000075FA 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
000075FC 0000                       		dc.w Resize_SLZ3boss-off_7118
000075FE 0000                       		dc.w Resize_SLZ3end-off_7118
00007600                            ; ===========================================================================
00007600                            
00007600                            Resize_SLZ3main:
00007600 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007606 6500                       		bcs.s	locret_7130
00007608 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000760E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007612                            
00007612                            locret_7130:
00007612 4E75                       		rts	
00007614                            ; ===========================================================================
00007614                            
00007614                            Resize_SLZ3boss:
00007614 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000761A 6500                       		bcs.s	locret_715C
0000761C 6100 0000                  		bsr.w	SingleObjLoad
00007620 6600                       		bne.s	loc_7144
00007622 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007626                            
00007626                            loc_7144:
00007626 303C 008C                  		move.w	#$8C,d0
0000762A 6100 9F94                  		bsr.w	PlaySound	; play boss music
0000762E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007634 5438 F742                  		addq.b	#2,($FFFFF742).w
00007638 7011                       		moveq	#$11,d0
0000763A 6000 A16E                  		bra.w	LoadPLC		; load boss patterns
0000763E                            ; ===========================================================================
0000763E                            
0000763E                            locret_715C:
0000763E 4E75                       		rts	
00007640                            ; ===========================================================================
00007640                            
00007640                            Resize_SLZ3end:
00007640 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007646 4E75                       		rts
00007648 4E75                       		rts
0000764A                            ; ===========================================================================
0000764A                            ; ---------------------------------------------------------------------------
0000764A                            ; Spring Yard Zone dynamic screen resizing
0000764A                            ; ---------------------------------------------------------------------------
0000764A                            
0000764A                            Resize_SYZ:				; XREF: Resize_Index
0000764A 7000                       		moveq	#0,d0
0000764C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007650 D040                       		add.w	d0,d0
00007652 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007656 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000765A                            ; ===========================================================================
0000765A 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000765C 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000765E 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007660                            ; ===========================================================================
00007660                            
00007660                            Resize_SYZ1:
00007660 4E75                       		rts	
00007662                            ; ===========================================================================
00007662                            
00007662                            Resize_SYZ2:
00007662 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007668 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000766E 6500                       		bcs.s	locret_71A2
00007670 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007676 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000767C 6500                       		bcs.s	locret_71A2
0000767E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007684                            
00007684                            locret_71A2:
00007684 4E75                       		rts	
00007686                            ; ===========================================================================
00007686                            
00007686                            Resize_SYZ3:
00007686 7000                       		moveq	#0,d0
00007688 1038 F742                  		move.b	($FFFFF742).w,d0
0000768C 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007690 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007694                            ; ===========================================================================
00007694 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007696 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007698 0000                       		dc.w Resize_SYZ3end-off_71B2
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_SYZ3main:
0000769A 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000076A0 6500                       		bcs.s	locret_71CE
000076A2 6100 0000                  		bsr.w	SingleObjLoad
000076A6 6600                       		bne.s	locret_71CE
000076A8 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000076AC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076B0                            
000076B0                            locret_71CE:
000076B0 4E75                       		rts	
000076B2                            ; ===========================================================================
000076B2                            
000076B2                            Resize_SYZ3boss:
000076B2 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000076B8 6500                       		bcs.s	locret_7200
000076BA 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000076C0 6100 0000                  		bsr.w	SingleObjLoad
000076C4 6600                       		bne.s	loc_71EC
000076C6 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000076CA 5438 F742                  		addq.b	#2,($FFFFF742).w
000076CE                            
000076CE                            loc_71EC:
000076CE 303C 008C                  		move.w	#$8C,d0
000076D2 6100 9EEC                  		bsr.w	PlaySound	; play boss music
000076D6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076DC 7011                       		moveq	#$11,d0
000076DE 6000 A0CA                  		bra.w	LoadPLC		; load boss patterns
000076E2                            ; ===========================================================================
000076E2                            
000076E2                            locret_7200:
000076E2 4E75                       		rts	
000076E4                            ; ===========================================================================
000076E4                            
000076E4                            Resize_SYZ3end:
000076E4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076EA 4E75                       		rts	
000076EC                            ; ===========================================================================
000076EC                            ; ---------------------------------------------------------------------------
000076EC                            ; Scrap	Brain Zone dynamic screen resizing
000076EC                            ; ---------------------------------------------------------------------------
000076EC                            
000076EC                            Resize_SBZ:				; XREF: Resize_Index
000076EC 7000                       		moveq	#0,d0
000076EE 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076F2 D040                       		add.w	d0,d0
000076F4 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
000076F8 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
000076FC                            ; ===========================================================================
000076FC 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
000076FE 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007700 0000                       		dc.w Resize_FZ-Resize_SBZx
00007702                            ; ===========================================================================
00007702                            
00007702                            Resize_SBZ1:
00007702 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007708 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000770E 6500                       		bcs.s	locret_7242
00007710 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007716 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000771C 6500                       		bcs.s	locret_7242
0000771E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007724                            
00007724                            locret_7242:
00007724 4E75                       		rts	
00007726                            ; ===========================================================================
00007726                            
00007726                            Resize_SBZ2:
00007726 7000                       		moveq	#0,d0
00007728 1038 F742                  		move.b	($FFFFF742).w,d0
0000772C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007730 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007734                            ; ===========================================================================
00007734 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007736 0000                       		dc.w Resize_SBZ2boss-off_7252
00007738 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000773A 0000                       		dc.w Resize_SBZ2end-off_7252
0000773C                            ; ===========================================================================
0000773C                            
0000773C                            Resize_SBZ2main:
0000773C 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007742 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007748 6500                       		bcs.s	locret_727A
0000774A 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007750 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007756 6500                       		bcs.s	locret_727A
00007758 5438 F742                  		addq.b	#2,($FFFFF742).w
0000775C                            
0000775C                            locret_727A:
0000775C 4E75                       		rts	
0000775E                            ; ===========================================================================
0000775E                            
0000775E                            Resize_SBZ2boss:
0000775E 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007764 6500                       		bcs.s	locret_7298
00007766 6100 0000                  		bsr.w	SingleObjLoad
0000776A 6600                       		bne.s	locret_7298
0000776C 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007770 5438 F742                  		addq.b	#2,($FFFFF742).w
00007774 701E                       		moveq	#$1E,d0
00007776 6000 A032                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            locret_7298:
0000777A 4E75                       		rts	
0000777C                            ; ===========================================================================
0000777C                            
0000777C                            Resize_SBZ2boss2:
0000777C 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
00007782 6500                       		bcs.s	loc_72B6
00007784 6100 0000                  		bsr.w	SingleObjLoad
00007788 6600                       		bne.s	loc_72B0
0000778A 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000778E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007792                            
00007792                            loc_72B0:
00007792 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007798                            
00007798                            loc_72B6:
00007798 6000                       		bra.s	loc_72C2
0000779A                            ; ===========================================================================
0000779A                            
0000779A                            Resize_SBZ2end:
0000779A 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000077A0 6500                       		bcs.s	loc_72C2
000077A2 4E75                       		rts	
000077A4                            ; ===========================================================================
000077A4                            
000077A4                            loc_72C2:
000077A4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077AA 4E75                       		rts	
000077AC                            ; ===========================================================================
000077AC                            
000077AC                            Resize_FZ:
000077AC 7000                       		moveq	#0,d0
000077AE 1038 F742                  		move.b	($FFFFF742).w,d0
000077B2 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000077B6 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000077BA                            ; ===========================================================================
000077BA 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000077BE 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000077C2 0000                       		dc.w Resize_FZend2-off_72D8
000077C4                            ; ===========================================================================
000077C4                            
000077C4                            Resize_FZmain:
000077C4 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000077CA 6500                       		bcs.s	loc_72F4
000077CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000077D0 701F                       		moveq	#$1F,d0
000077D2 6100 9FD6                  		bsr.w	LoadPLC		; load FZ boss patterns
000077D6                            
000077D6                            loc_72F4:
000077D6 60CC                       		bra.s	loc_72C2
000077D8                            ; ===========================================================================
000077D8                            
000077D8                            Resize_FZboss:
000077D8 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000077DE 6500                       		bcs.s	loc_7312
000077E0 6100 0000                  		bsr.w	SingleObjLoad
000077E4 6600                       		bne.s	loc_7312
000077E6 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000077EA 5438 F742                  		addq.b	#2,($FFFFF742).w
000077EE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077F4                            
000077F4                            loc_7312:
000077F4 60AE                       		bra.s	loc_72C2
000077F6                            ; ===========================================================================
000077F6                            
000077F6                            Resize_FZend:
000077F6 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
000077FC 6500                       		bcs.s	loc_7320
000077FE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007802                            
00007802                            loc_7320:
00007802 60A0                       		bra.s	loc_72C2
00007804                            ; ===========================================================================
00007804                            
00007804                            locret_7322:
00007804 4E75                       		rts	
00007806                            ; ===========================================================================
00007806                            
00007806                            Resize_FZend2:
00007806 609C                       		bra.s	loc_72C2
00007808                            ; ===========================================================================
00007808                            ; ---------------------------------------------------------------------------
00007808                            ; Ending sequence dynamic screen resizing (empty)
00007808                            ; ---------------------------------------------------------------------------
00007808                            
00007808                            Resize_Ending:				; XREF: Resize_Index
00007808 4E75                       		rts	
0000780A                            ; ===========================================================================
0000780A                            ; ---------------------------------------------------------------------------
0000780A                            ; Object 11 - GHZ bridge
0000780A                            ; ---------------------------------------------------------------------------
0000780A                            
0000780A                            Obj11:					; XREF: Obj_Index
0000780A 7000                       		moveq	#0,d0
0000780C 1028 0024                  		move.b	$24(a0),d0
00007810 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007814 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007818                            ; ===========================================================================
00007818 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000781C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007820 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007824                            ; ===========================================================================
00007824                            
00007824                            Obj11_Main:				; XREF: Obj11_Index
00007824 5428 0024                  		addq.b	#2,$24(a0)
00007828 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007830 317C 438E 0002             		move.w	#$438E,2(a0)
00007836 117C 0004 0001             		move.b	#4,1(a0)
0000783C 117C 0003 0018             		move.b	#3,$18(a0)
00007842 117C 0080 0019             		move.b	#$80,$19(a0)
00007848 3428 000C                  		move.w	$C(a0),d2
0000784C 3628 0008                  		move.w	8(a0),d3
00007850 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007852 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007856 7200                       		moveq	#0,d1
00007858 1212                       		move.b	(a2),d1		; copy a2 to d1
0000785A 14FC 0000                  		move.b	#0,(a2)+
0000785E 3001                       		move.w	d1,d0
00007860 E248                       		lsr.w	#1,d0
00007862 E948                       		lsl.w	#4,d0
00007864 9640                       		sub.w	d0,d3
00007866 5501                       		subq.b	#2,d1
00007868 6500                       		bcs.s	Obj11_Action
0000786A                            
0000786A                            Obj11_MakeBdg:
0000786A 6100 0000                  		bsr.w	SingleObjLoad
0000786E 6600                       		bne.s	Obj11_Action
00007870 5228 0028                  		addq.b	#1,$28(a0)
00007874 B668 0008                  		cmp.w	8(a0),d3
00007878 6600                       		bne.s	loc_73B8
0000787A 0643 0010                  		addi.w	#$10,d3
0000787E 3142 000C                  		move.w	d2,$C(a0)
00007882 3142 003C                  		move.w	d2,$3C(a0)
00007886 3A08                       		move.w	a0,d5
00007888 0445 D000                  		subi.w	#-$3000,d5
0000788C EC4D                       		lsr.w	#6,d5
0000788E 0245 007F                  		andi.w	#$7F,d5
00007892 14C5                       		move.b	d5,(a2)+
00007894 5228 0028                  		addq.b	#1,$28(a0)
00007898                            
00007898                            loc_73B8:				; XREF: ROM:00007398j
00007898 3A09                       		move.w	a1,d5
0000789A 0445 D000                  		subi.w	#-$3000,d5
0000789E EC4D                       		lsr.w	#6,d5
000078A0 0245 007F                  		andi.w	#$7F,d5
000078A4 14C5                       		move.b	d5,(a2)+
000078A6 137C 000A 0024             		move.b	#$A,$24(a1)
000078AC 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000078AE 3342 000C                  		move.w	d2,$C(a1)
000078B2 3342 003C                  		move.w	d2,$3C(a1)
000078B6 3343 0008                  		move.w	d3,8(a1)
000078BA 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000078C2 337C 438E 0002             		move.w	#$438E,2(a1)
000078C8 137C 0004 0001             		move.b	#4,1(a1)
000078CE 137C 0003 0018             		move.b	#3,$18(a1)
000078D4 137C 0008 0019             		move.b	#8,$19(a1)
000078DA 0643 0010                  		addi.w	#$10,d3
000078DE 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000078E2                            
000078E2                            Obj11_Action:				; XREF: Obj11_Index
000078E2 6100                       		bsr.s	Obj11_Solid
000078E4 4A28 003E                  		tst.b	$3E(a0)
000078E8 6700                       		beq.s	Obj11_Display
000078EA 5928 003E                  		subq.b	#4,$3E(a0)
000078EE 6100 0000                  		bsr.w	Obj11_Bend
000078F2                            
000078F2                            Obj11_Display:
000078F2 6100 0000                  		bsr.w	DisplaySprite
000078F6 6000 0000                  		bra.w	Obj11_ChkDel
000078FA                            
000078FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078FA                            
000078FA                            
000078FA                            Obj11_Solid:				; XREF: Obj11_Action
000078FA 7200                       		moveq	#0,d1
000078FC 1228 0028                  		move.b	$28(a0),d1
00007900 E749                       		lsl.w	#3,d1
00007902 3401                       		move.w	d1,d2
00007904 5041                       		addq.w	#8,d1
00007906 D442                       		add.w	d2,d2
00007908 43F8 D000                  		lea	($FFFFD000).w,a1
0000790C 4A69 0012                  		tst.w	$12(a1)
00007910 6B00 0000                  		bmi.w	locret_751E
00007914 3029 0008                  		move.w	8(a1),d0
00007918 9068 0008                  		sub.w	8(a0),d0
0000791C D041                       		add.w	d1,d0
0000791E 6B00 0000                  		bmi.w	locret_751E
00007922 B042                       		cmp.w	d2,d0
00007924 6400 0000                  		bcc.w	locret_751E
00007928 6000                       		bra.s	Platform2
0000792A                            ; End of function Obj11_Solid
0000792A                            
0000792A                            ; ---------------------------------------------------------------------------
0000792A                            ; Platform subroutine
0000792A                            ; ---------------------------------------------------------------------------
0000792A                            
0000792A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000792A                            
0000792A                            
0000792A                            PlatformObject:
0000792A 43F8 D000                  		lea	($FFFFD000).w,a1
0000792E 4A69 0012                  		tst.w	$12(a1)
00007932 6B00 0000                  		bmi.w	locret_751E
00007936 3029 0008                  		move.w	8(a1),d0
0000793A 9068 0008                  		sub.w	8(a0),d0
0000793E D041                       		add.w	d1,d0
00007940 6B00 0000                  		bmi.w	locret_751E
00007944 D241                       		add.w	d1,d1
00007946 B041                       		cmp.w	d1,d0
00007948 6400 0000                  		bcc.w	locret_751E
0000794C                            
0000794C                            Platform2:
0000794C 3028 000C                  		move.w	$C(a0),d0
00007950 5140                       		subq.w	#8,d0
00007952                            
00007952                            Platform3:
00007952 3429 000C                  		move.w	$C(a1),d2
00007956 1229 0016                  		move.b	$16(a1),d1
0000795A 4881                       		ext.w	d1
0000795C D242                       		add.w	d2,d1
0000795E 5841                       		addq.w	#4,d1
00007960 9041                       		sub.w	d1,d0
00007962 6200 0000                  		bhi.w	locret_751E
00007966 0C40 FFF0                  		cmpi.w	#-$10,d0
0000796A 6500 0000                  		bcs.w	locret_751E
0000796E 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007972 6B00 0000                  		bmi.w	locret_751E
00007976 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000797C 6400 0000                  		bcc.w	locret_751E
00007980 D440                       		add.w	d0,d2
00007982 5642                       		addq.w	#3,d2
00007984 3342 000C                  		move.w	d2,$C(a1)
00007988 5428 0024                  		addq.b	#2,$24(a0)
0000798C                            
0000798C                            loc_74AE:
0000798C 0829 0003 0022             		btst	#3,$22(a1)
00007992 6700                       		beq.s	loc_74DC
00007994 7000                       		moveq	#0,d0
00007996 1029 003D                  		move.b	$3D(a1),d0
0000799A ED48                       		lsl.w	#6,d0
0000799C 0680 00FF D000             		addi.l	#$FFD000,d0
000079A2 2440                       		movea.l	d0,a2
000079A4 08AA 0003 0022             		bclr	#3,$22(a2)
000079AA 422A 0025                  		clr.b	$25(a2)
000079AE 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000079B4 6600                       		bne.s	loc_74DC
000079B6 552A 0024                  		subq.b	#2,$24(a2)
000079BA                            
000079BA                            loc_74DC:
000079BA 3008                       		move.w	a0,d0
000079BC 0440 D000                  		subi.w	#-$3000,d0
000079C0 EC48                       		lsr.w	#6,d0
000079C2 0240 007F                  		andi.w	#$7F,d0
000079C6 1340 003D                  		move.b	d0,$3D(a1)
000079CA 137C 0000 0026             		move.b	#0,$26(a1)
000079D0 337C 0000 0012             		move.w	#0,$12(a1)
000079D6 3369 0010 0014             		move.w	$10(a1),$14(a1)
000079DC 0829 0001 0022             		btst	#1,$22(a1)
000079E2 6700                       		beq.s	loc_7512
000079E4 2F08                       		move.l	a0,-(sp)
000079E6 2049                       		movea.l	a1,a0
000079E8 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000079EE 205F                       		movea.l	(sp)+,a0
000079F0                            
000079F0                            loc_7512:
000079F0 08E9 0003 0022             		bset	#3,$22(a1)
000079F6 08E8 0003 0022             		bset	#3,$22(a0)
000079FC                            
000079FC                            locret_751E:
000079FC 4E75                       		rts	
000079FE                            ; End of function PlatformObject
000079FE                            
000079FE                            ; ---------------------------------------------------------------------------
000079FE                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
000079FE                            ; ---------------------------------------------------------------------------
000079FE                            
000079FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079FE                            
000079FE                            
000079FE                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
000079FE 43F8 D000                  		lea	($FFFFD000).w,a1
00007A02 4A69 0012                  		tst.w	$12(a1)
00007A06 6B00 FFF4                  		bmi.w	locret_751E
00007A0A 3029 0008                  		move.w	8(a1),d0
00007A0E 9068 0008                  		sub.w	8(a0),d0
00007A12 D041                       		add.w	d1,d0
00007A14 6BE6                       		bmi.s	locret_751E
00007A16 D241                       		add.w	d1,d1
00007A18 B041                       		cmp.w	d1,d0
00007A1A 64E0                       		bcc.s	locret_751E
00007A1C 0828 0000 0001             		btst	#0,1(a0)
00007A22 6700                       		beq.s	loc_754A
00007A24 4640                       		not.w	d0
00007A26 D041                       		add.w	d1,d0
00007A28                            
00007A28                            loc_754A:
00007A28 E248                       		lsr.w	#1,d0
00007A2A 7600                       		moveq	#0,d3
00007A2C 1632 0000                  		move.b	(a2,d0.w),d3
00007A30 3028 000C                  		move.w	$C(a0),d0
00007A34 9043                       		sub.w	d3,d0
00007A36 6000 FF1A                  		bra.w	Platform3
00007A3A                            ; End of function SlopeObject
00007A3A                            
00007A3A                            
00007A3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A3A                            
00007A3A                            
00007A3A                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007A3A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A3E 4A69 0012                  		tst.w	$12(a1)
00007A42 6B00 FFB8                  		bmi.w	locret_751E
00007A46 3029 0008                  		move.w	8(a1),d0
00007A4A 9068 0008                  		sub.w	8(a0),d0
00007A4E D041                       		add.w	d1,d0
00007A50 6B00 FFAA                  		bmi.w	locret_751E
00007A54 D241                       		add.w	d1,d1
00007A56 B041                       		cmp.w	d1,d0
00007A58 6400 FFA2                  		bcc.w	locret_751E
00007A5C 3028 000C                  		move.w	$C(a0),d0
00007A60 9043                       		sub.w	d3,d0
00007A62 6000 FEEE                  		bra.w	Platform3
00007A66                            ; End of function Obj15_Solid
00007A66                            
00007A66                            ; ===========================================================================
00007A66                            
00007A66                            Obj11_Action2:				; XREF: Obj11_Index
00007A66 6100                       		bsr.s	Obj11_WalkOff
00007A68 6100 0000                  		bsr.w	DisplaySprite
00007A6C 6000 0000                  		bra.w	Obj11_ChkDel
00007A70                            
00007A70                            ; ---------------------------------------------------------------------------
00007A70                            ; Subroutine allowing Sonic to walk off a bridge
00007A70                            ; ---------------------------------------------------------------------------
00007A70                            
00007A70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A70                            
00007A70                            
00007A70                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007A70 7200                       		moveq	#0,d1
00007A72 1228 0028                  		move.b	$28(a0),d1
00007A76 E749                       		lsl.w	#3,d1
00007A78 3401                       		move.w	d1,d2
00007A7A 5041                       		addq.w	#8,d1
00007A7C 6100                       		bsr.s	ExitPlatform2
00007A7E 6400                       		bcc.s	locret_75BE
00007A80 E848                       		lsr.w	#4,d0
00007A82 1140 003F                  		move.b	d0,$3F(a0)
00007A86 1028 003E                  		move.b	$3E(a0),d0
00007A8A 0C00 0040                  		cmpi.b	#$40,d0
00007A8E 6700                       		beq.s	loc_75B6
00007A90 5828 003E                  		addq.b	#4,$3E(a0)
00007A94                            
00007A94                            loc_75B6:
00007A94 6100 0000                  		bsr.w	Obj11_Bend
00007A98 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A9C                            
00007A9C                            locret_75BE:
00007A9C 4E75                       		rts	
00007A9E                            ; End of function Obj11_WalkOff
00007A9E                            
00007A9E                            ; ---------------------------------------------------------------------------
00007A9E                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A9E                            ; ---------------------------------------------------------------------------
00007A9E                            
00007A9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A9E                            
00007A9E                            
00007A9E                            ExitPlatform:
00007A9E 3401                       		move.w	d1,d2
00007AA0                            
00007AA0                            ExitPlatform2:
00007AA0 D442                       		add.w	d2,d2
00007AA2 43F8 D000                  		lea	($FFFFD000).w,a1
00007AA6 0829 0001 0022             		btst	#1,$22(a1)
00007AAC 6600                       		bne.s	loc_75E0
00007AAE 3029 0008                  		move.w	8(a1),d0
00007AB2 9068 0008                  		sub.w	8(a0),d0
00007AB6 D041                       		add.w	d1,d0
00007AB8 6B00                       		bmi.s	loc_75E0
00007ABA B042                       		cmp.w	d2,d0
00007ABC 6500                       		bcs.s	locret_75F2
00007ABE                            
00007ABE                            loc_75E0:
00007ABE 08A9 0003 0022             		bclr	#3,$22(a1)
00007AC4 117C 0002 0024             		move.b	#2,$24(a0)
00007ACA 08A8 0003 0022             		bclr	#3,$22(a0)
00007AD0                            
00007AD0                            locret_75F2:
00007AD0 4E75                       		rts	
00007AD2                            ; End of function ExitPlatform
00007AD2                            
00007AD2                            
00007AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AD2                            
00007AD2                            
00007AD2                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007AD2 7000                       		moveq	#0,d0
00007AD4 1028 003F                  		move.b	$3F(a0),d0
00007AD8 1030 0029                  		move.b	$29(a0,d0.w),d0
00007ADC ED48                       		lsl.w	#6,d0
00007ADE 0680 00FF D000             		addi.l	#$FFD000,d0
00007AE4 2440                       		movea.l	d0,a2
00007AE6 43F8 D000                  		lea	($FFFFD000).w,a1
00007AEA 302A 000C                  		move.w	$C(a2),d0
00007AEE 5140                       		subq.w	#8,d0
00007AF0 7200                       		moveq	#0,d1
00007AF2 1229 0016                  		move.b	$16(a1),d1
00007AF6 9041                       		sub.w	d1,d0
00007AF8 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007AFC 4E75                       		rts	
00007AFE                            ; End of function Obj11_MoveSonic
00007AFE                            
00007AFE                            
00007AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AFE                            
00007AFE                            
00007AFE                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007AFE 1028 003E                  		move.b	$3E(a0),d0
00007B02 6100 B166                  		bsr.w	CalcSine
00007B06 3800                       		move.w	d0,d4
00007B08 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007B0E 7000                       		moveq	#0,d0
00007B10 1028 0028                  		move.b	$28(a0),d0
00007B14 E948                       		lsl.w	#4,d0
00007B16 7600                       		moveq	#0,d3
00007B18 1628 003F                  		move.b	$3F(a0),d3
00007B1C 3403                       		move.w	d3,d2
00007B1E D640                       		add.w	d0,d3
00007B20 7A00                       		moveq	#0,d5
00007B22 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007B28 1A35 3000                  		move.b	(a5,d3.w),d5
00007B2C 0243 000F                  		andi.w	#$F,d3
00007B30 E94B                       		lsl.w	#4,d3
00007B32 47F4 3000                  		lea	(a4,d3.w),a3
00007B36 45E8 0029                  		lea	$29(a0),a2
00007B3A                            
00007B3A                            loc_765C:
00007B3A 7000                       		moveq	#0,d0
00007B3C 101A                       		move.b	(a2)+,d0
00007B3E ED48                       		lsl.w	#6,d0
00007B40 0680 00FF D000             		addi.l	#$FFD000,d0
00007B46 2240                       		movea.l	d0,a1
00007B48 7000                       		moveq	#0,d0
00007B4A 101B                       		move.b	(a3)+,d0
00007B4C 5240                       		addq.w	#1,d0
00007B4E C0C5                       		mulu.w	d5,d0
00007B50 C0C4                       		mulu.w	d4,d0
00007B52 4840                       		swap	d0
00007B54 D069 003C                  		add.w	$3C(a1),d0
00007B58 3340 000C                  		move.w	d0,$C(a1)
00007B5C 51CA FFDC                  		dbf	d2,loc_765C
00007B60 7000                       		moveq	#0,d0
00007B62 1028 0028                  		move.b	$28(a0),d0
00007B66 7600                       		moveq	#0,d3
00007B68 1628 003F                  		move.b	$3F(a0),d3
00007B6C 5203                       		addq.b	#1,d3
00007B6E 9600                       		sub.b	d0,d3
00007B70 4403                       		neg.b	d3
00007B72 6B00                       		bmi.s	locret_76CA
00007B74 3403                       		move.w	d3,d2
00007B76 E94B                       		lsl.w	#4,d3
00007B78 47F4 3000                  		lea	(a4,d3.w),a3
00007B7C D6C2                       		adda.w	d2,a3
00007B7E 5342                       		subq.w	#1,d2
00007B80 6500                       		bcs.s	locret_76CA
00007B82                            
00007B82                            loc_76A4:
00007B82 7000                       		moveq	#0,d0
00007B84 101A                       		move.b	(a2)+,d0
00007B86 ED48                       		lsl.w	#6,d0
00007B88 0680 00FF D000             		addi.l	#$FFD000,d0
00007B8E 2240                       		movea.l	d0,a1
00007B90 7000                       		moveq	#0,d0
00007B92 1023                       		move.b	-(a3),d0
00007B94 5240                       		addq.w	#1,d0
00007B96 C0C5                       		mulu.w	d5,d0
00007B98 C0C4                       		mulu.w	d4,d0
00007B9A 4840                       		swap	d0
00007B9C D069 003C                  		add.w	$3C(a1),d0
00007BA0 3340 000C                  		move.w	d0,$C(a1)
00007BA4 51CA FFDC                  		dbf	d2,loc_76A4
00007BA8                            
00007BA8                            locret_76CA:
00007BA8 4E75                       		rts	
00007BAA                            ; End of function Obj11_Bend
00007BAA                            
00007BAA                            ; ===========================================================================
00007BAA                            ; ---------------------------------------------------------------------------
00007BAA                            ; GHZ bridge-bending data
00007BAA                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007BAA                            ; ---------------------------------------------------------------------------
00007BAA                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007CBA                            		even
00007CBA                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007DBA                            		even
00007DBA                            
00007DBA                            ; ===========================================================================
00007DBA                            
00007DBA                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007DBA 3028 0008                  		move.w	8(a0),d0
00007DBE 0240 FF80                  		andi.w	#$FF80,d0
00007DC2 3238 F700                  		move.w	($FFFFF700).w,d1
00007DC6 0441 0080                  		subi.w	#$80,d1
00007DCA 0241 FF80                  		andi.w	#$FF80,d1
00007DCE 9041                       		sub.w	d1,d0
00007DD0 0C40 0280                  		cmpi.w	#$280,d0
00007DD4 6200 0000                  		bhi.w	Obj11_DelAll
00007DD8 4E75                       		rts	
00007DDA                            ; ===========================================================================
00007DDA                            
00007DDA                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007DDA 7400                       		moveq	#0,d2
00007DDC 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007DE0 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007DE2 5302                       		subq.b	#1,d2		; subtract 1
00007DE4 6500                       		bcs.s	Obj11_Delete
00007DE6                            
00007DE6                            Obj11_DelLoop:
00007DE6 7000                       		moveq	#0,d0
00007DE8 101A                       		move.b	(a2)+,d0
00007DEA ED48                       		lsl.w	#6,d0
00007DEC 0680 00FF D000             		addi.l	#$FFD000,d0
00007DF2 2240                       		movea.l	d0,a1
00007DF4 B048                       		cmp.w	a0,d0
00007DF6 6700                       		beq.s	loc_791E
00007DF8 6100 0000                  		bsr.w	DeleteObject2
00007DFC                            
00007DFC                            loc_791E:
00007DFC 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007E00                            
00007E00                            Obj11_Delete:
00007E00 6100 0000                  		bsr.w	DeleteObject
00007E04 4E75                       		rts	
00007E06                            ; ===========================================================================
00007E06                            
00007E06                            Obj11_Delete2:				; XREF: Obj11_Index
00007E06 6100 0000                  		bsr.w	DeleteObject
00007E0A 4E75                       		rts	
00007E0C                            ; ===========================================================================
00007E0C                            
00007E0C                            Obj11_Display2:				; XREF: Obj11_Index
00007E0C 6100 0000                  		bsr.w	DisplaySprite
00007E10 4E75                       		rts	
00007E12                            ; ===========================================================================
00007E12                            ; ---------------------------------------------------------------------------
00007E12                            ; Sprite mappings - GHZ	bridge
00007E12                            ; ---------------------------------------------------------------------------
00007E12                            Map_obj11:
00007E12                            	include "_maps\obj11.asm"
00007E12                            ; ---------------------------------------------------------------------------
00007E12                            ; Sprite mappings - GHZ	bridge
00007E12                            ; ---------------------------------------------------------------------------
00007E12 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007E16 0000                       		dc.w byte_794B-Map_obj11
00007E18 01                         byte_793A:	dc.b 1
00007E19 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007E1E 02                         byte_7940:	dc.b 2
00007E1F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007E24 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007E29 01                         byte_794B:	dc.b 1
00007E2A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007E30 00                         		even
00007E30 00                         		even
00007E30                            
00007E30                            ; ===========================================================================
00007E30                            ; ---------------------------------------------------------------------------
00007E30                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007E30                            ;	    - spiked ball on a chain (SBZ)
00007E30                            ; ---------------------------------------------------------------------------
00007E30                            
00007E30                            Obj15:					; XREF: Obj_Index
00007E30 7000                       		moveq	#0,d0
00007E32 1028 0024                  		move.b	$24(a0),d0
00007E36 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007E3A 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007E3E                            ; ===========================================================================
00007E3E 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007E42 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007E46 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007E4A 0000                       		dc.w Obj15_Action-Obj15_Index
00007E4C                            ; ===========================================================================
00007E4C                            
00007E4C                            Obj15_Main:				; XREF: Obj15_Index
00007E4C 5428 0024                  		addq.b	#2,$24(a0)
00007E50 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007E58 317C 4380 0002             		move.w	#$4380,2(a0)
00007E5E 117C 0004 0001             		move.b	#4,1(a0)
00007E64 117C 0003 0018             		move.b	#3,$18(a0)
00007E6A 117C 0018 0019             		move.b	#$18,$19(a0)
00007E70 117C 0008 0016             		move.b	#8,$16(a0)
00007E76 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007E7C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007E82 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007E88 6600                       		bne.s	Obj15_NotSLZ
00007E8A 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E92 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E98 117C 0020 0019             		move.b	#$20,$19(a0)
00007E9E 117C 0010 0016             		move.b	#$10,$16(a0)
00007EA4 117C 0099 0020             		move.b	#$99,$20(a0)
00007EAA                            
00007EAA                            Obj15_NotSLZ:
00007EAA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007EB0 6600                       		bne.s	Obj15_SetLength
00007EB2 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007EBA 317C 0391 0002             		move.w	#$391,2(a0)
00007EC0 117C 0018 0019             		move.b	#$18,$19(a0)
00007EC6 117C 0018 0016             		move.b	#$18,$16(a0)
00007ECC 117C 0086 0020             		move.b	#$86,$20(a0)
00007ED2 117C 000C 0024             		move.b	#$C,$24(a0)
00007ED8                            
00007ED8                            Obj15_SetLength:
00007ED8 1810                       		move.b	0(a0),d4
00007EDA 7200                       		moveq	#0,d1
00007EDC 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007EE0 1212                       		move.b	(a2),d1		; move a2 to d1
00007EE2 3F01                       		move.w	d1,-(sp)
00007EE4 0241 000F                  		andi.w	#$F,d1
00007EE8 14FC 0000                  		move.b	#0,(a2)+
00007EEC 3601                       		move.w	d1,d3
00007EEE E94B                       		lsl.w	#4,d3
00007EF0 5003                       		addq.b	#8,d3
00007EF2 1143 003C                  		move.b	d3,$3C(a0)
00007EF6 5103                       		subq.b	#8,d3
00007EF8 4A28 001A                  		tst.b	$1A(a0)
00007EFC 6700                       		beq.s	Obj15_MakeChain
00007EFE 5003                       		addq.b	#8,d3
00007F00 5341                       		subq.w	#1,d1
00007F02                            
00007F02                            Obj15_MakeChain:
00007F02 6100 0000                  		bsr.w	SingleObjLoad
00007F06 6600                       		bne.s	loc_7A92
00007F08 5228 0028                  		addq.b	#1,$28(a0)
00007F0C 3A09                       		move.w	a1,d5
00007F0E 0445 D000                  		subi.w	#-$3000,d5
00007F12 EC4D                       		lsr.w	#6,d5
00007F14 0245 007F                  		andi.w	#$7F,d5
00007F18 14C5                       		move.b	d5,(a2)+
00007F1A 137C 000A 0024             		move.b	#$A,$24(a1)
00007F20 1284                       		move.b	d4,0(a1)	; load swinging	object
00007F22 2368 0004 0004             		move.l	4(a0),4(a1)
00007F28 3368 0002 0002             		move.w	2(a0),2(a1)
00007F2E 08A9 0006 0002             		bclr	#6,2(a1)
00007F34 137C 0004 0001             		move.b	#4,1(a1)
00007F3A 137C 0004 0018             		move.b	#4,$18(a1)
00007F40 137C 0008 0019             		move.b	#8,$19(a1)
00007F46 137C 0001 001A             		move.b	#1,$1A(a1)
00007F4C 1343 003C                  		move.b	d3,$3C(a1)
00007F50 0403 0010                  		subi.b	#$10,d3
00007F54 6400                       		bcc.s	loc_7A8E
00007F56 137C 0002 001A             		move.b	#2,$1A(a1)
00007F5C 137C 0003 0018             		move.b	#3,$18(a1)
00007F62 08E9 0006 0002             		bset	#6,2(a1)
00007F68                            
00007F68                            loc_7A8E:
00007F68 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007F6C                            
00007F6C                            loc_7A92:
00007F6C 3A08                       		move.w	a0,d5
00007F6E 0445 D000                  		subi.w	#-$3000,d5
00007F72 EC4D                       		lsr.w	#6,d5
00007F74 0245 007F                  		andi.w	#$7F,d5
00007F78 14C5                       		move.b	d5,(a2)+
00007F7A 317C 4080 0026             		move.w	#$4080,$26(a0)
00007F80 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007F86 321F                       		move.w	(sp)+,d1
00007F88 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F8C 6700                       		beq.s	loc_7AD4	; if not, branch
00007F8E 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F96 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F9C 117C 0001 001A             		move.b	#1,$1A(a0)
00007FA2 117C 0002 0018             		move.b	#2,$18(a0)
00007FA8 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007FAE                            
00007FAE                            loc_7AD4:
00007FAE 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007FB4 6700                       		beq.s	Obj15_Action	; if yes, branch
00007FB6                            
00007FB6                            Obj15_SetSolid:				; XREF: Obj15_Index
00007FB6 7200                       		moveq	#0,d1
00007FB8 1228 0019                  		move.b	$19(a0),d1
00007FBC 7600                       		moveq	#0,d3
00007FBE 1628 0016                  		move.b	$16(a0),d3
00007FC2 6100 FA76                  		bsr.w	Obj15_Solid
00007FC6                            
00007FC6                            Obj15_Action:				; XREF: Obj15_Index
00007FC6 6100 0000                  		bsr.w	Obj15_Move
00007FCA 6100 0000                  		bsr.w	DisplaySprite
00007FCE 6000 0000                  		bra.w	Obj15_ChkDel
00007FD2                            ; ===========================================================================
00007FD2                            
00007FD2                            Obj15_Action2:				; XREF: Obj15_Index
00007FD2 7200                       		moveq	#0,d1
00007FD4 1228 0019                  		move.b	$19(a0),d1
00007FD8 6100 FAC4                  		bsr.w	ExitPlatform
00007FDC 3F28 0008                  		move.w	8(a0),-(sp)
00007FE0 6100 0000                  		bsr.w	Obj15_Move
00007FE4 341F                       		move.w	(sp)+,d2
00007FE6 7600                       		moveq	#0,d3
00007FE8 1628 0016                  		move.b	$16(a0),d3
00007FEC 5203                       		addq.b	#1,d3
00007FEE 6100 0000                  		bsr.w	MvSonicOnPtfm
00007FF2 6100 0000                  		bsr.w	DisplaySprite
00007FF6 6000 0000                  		bra.w	Obj15_ChkDel
00007FFA                            
00007FFA 4E75                       		rts
00007FFC                            
00007FFC                            ; ---------------------------------------------------------------------------
00007FFC                            ; Subroutine to	change Sonic's position with a platform
00007FFC                            ; ---------------------------------------------------------------------------
00007FFC                            
00007FFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FFC                            
00007FFC                            
00007FFC                            MvSonicOnPtfm:
00007FFC 43F8 D000                  		lea	($FFFFD000).w,a1
00008000 3028 000C                  		move.w	$C(a0),d0
00008004 9043                       		sub.w	d3,d0
00008006 6000                       		bra.s	MvSonic2
00008008                            ; End of function MvSonicOnPtfm
00008008                            
00008008                            ; ---------------------------------------------------------------------------
00008008                            ; Subroutine to	change Sonic's position with a platform
00008008                            ; ---------------------------------------------------------------------------
00008008                            
00008008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008008                            
00008008                            
00008008                            MvSonicOnPtfm2:
00008008 43F8 D000                  		lea	($FFFFD000).w,a1
0000800C 3028 000C                  		move.w	$C(a0),d0
00008010 0440 0009                  		subi.w	#9,d0
00008014                            
00008014                            MvSonic2:
00008014 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008018 6B00                       		bmi.s	locret_7B62
0000801A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008020 6400                       		bcc.s	locret_7B62
00008022 4A78 FE08                  		tst.w	($FFFFFE08).w
00008026 6600                       		bne.s	locret_7B62
00008028 7200                       		moveq	#0,d1
0000802A 1229 0016                  		move.b	$16(a1),d1
0000802E 9041                       		sub.w	d1,d0
00008030 3340 000C                  		move.w	d0,$C(a1)
00008034 9468 0008                  		sub.w	8(a0),d2
00008038 9569 0008                  		sub.w	d2,8(a1)
0000803C                            
0000803C                            locret_7B62:
0000803C 4E75                       		rts	
0000803E                            ; End of function MvSonicOnPtfm2
0000803E                            
0000803E                            
0000803E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000803E                            
0000803E                            
0000803E                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
0000803E 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008042 323C 0080                  		move.w	#$80,d1
00008046 0828 0000 0022             		btst	#0,$22(a0)
0000804C 6700                       		beq.s	loc_7B78
0000804E 4440                       		neg.w	d0
00008050 D041                       		add.w	d1,d0
00008052                            
00008052                            loc_7B78:
00008052 6000                       		bra.s	Obj15_Move2
00008054                            ; End of function Obj15_Move
00008054                            
00008054                            
00008054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008054                            
00008054                            
00008054                            Obj48_Move:				; XREF: Obj48_Display2
00008054 4A28 003D                  		tst.b	$3D(a0)
00008058 6600                       		bne.s	loc_7B9C
0000805A 3028 003E                  		move.w	$3E(a0),d0
0000805E 5040                       		addq.w	#8,d0
00008060 3140 003E                  		move.w	d0,$3E(a0)
00008064 D168 0026                  		add.w	d0,$26(a0)
00008068 0C40 0200                  		cmpi.w	#$200,d0
0000806C 6600                       		bne.s	loc_7BB6
0000806E 117C 0001 003D             		move.b	#1,$3D(a0)
00008074 6000                       		bra.s	loc_7BB6
00008076                            ; ===========================================================================
00008076                            
00008076                            loc_7B9C:
00008076 3028 003E                  		move.w	$3E(a0),d0
0000807A 5140                       		subq.w	#8,d0
0000807C 3140 003E                  		move.w	d0,$3E(a0)
00008080 D168 0026                  		add.w	d0,$26(a0)
00008084 0C40 FE00                  		cmpi.w	#-$200,d0
00008088 6600                       		bne.s	loc_7BB6
0000808A 117C 0000 003D             		move.b	#0,$3D(a0)
00008090                            
00008090                            loc_7BB6:
00008090 1028 0026                  		move.b	$26(a0),d0
00008094                            ; End of function Obj48_Move
00008094                            
00008094                            
00008094                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008094                            
00008094                            
00008094                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008094 6100 ABD4                  		bsr.w	CalcSine
00008098 3428 0038                  		move.w	$38(a0),d2
0000809C 3628 003A                  		move.w	$3A(a0),d3
000080A0 45E8 0028                  		lea	$28(a0),a2
000080A4 7C00                       		moveq	#0,d6
000080A6 1C1A                       		move.b	(a2)+,d6
000080A8                            
000080A8                            loc_7BCE:
000080A8 7800                       		moveq	#0,d4
000080AA 181A                       		move.b	(a2)+,d4
000080AC ED4C                       		lsl.w	#6,d4
000080AE 0684 00FF D000             		addi.l	#$FFD000,d4
000080B4 2244                       		movea.l	d4,a1
000080B6 7800                       		moveq	#0,d4
000080B8 1829 003C                  		move.b	$3C(a1),d4
000080BC 2A04                       		move.l	d4,d5
000080BE C9C0                       		muls.w	d0,d4
000080C0 E084                       		asr.l	#8,d4
000080C2 CBC1                       		muls.w	d1,d5
000080C4 E085                       		asr.l	#8,d5
000080C6 D842                       		add.w	d2,d4
000080C8 DA43                       		add.w	d3,d5
000080CA 3344 000C                  		move.w	d4,$C(a1)
000080CE 3345 0008                  		move.w	d5,8(a1)
000080D2 51CE FFD4                  		dbf	d6,loc_7BCE
000080D6 4E75                       		rts	
000080D8                            ; End of function Obj15_Move2
000080D8                            
000080D8                            ; ===========================================================================
000080D8                            
000080D8                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000080D8 3028 003A                  		move.w	$3A(a0),d0
000080DC 0240 FF80                  		andi.w	#$FF80,d0
000080E0 3238 F700                  		move.w	($FFFFF700).w,d1
000080E4 0441 0080                  		subi.w	#$80,d1
000080E8 0241 FF80                  		andi.w	#$FF80,d1
000080EC 9041                       		sub.w	d1,d0
000080EE 0C40 0280                  		cmpi.w	#$280,d0
000080F2 6200 0000                  		bhi.w	Obj15_DelAll
000080F6 4E75                       		rts	
000080F8                            ; ===========================================================================
000080F8                            
000080F8                            Obj15_DelAll:				; XREF: Obj15_ChkDel
000080F8 7400                       		moveq	#0,d2
000080FA 45E8 0028                  		lea	$28(a0),a2
000080FE 141A                       		move.b	(a2)+,d2
00008100                            
00008100                            Obj15_DelLoop:
00008100 7000                       		moveq	#0,d0
00008102 101A                       		move.b	(a2)+,d0
00008104 ED48                       		lsl.w	#6,d0
00008106 0680 00FF D000             		addi.l	#$FFD000,d0
0000810C 2240                       		movea.l	d0,a1
0000810E 6100 0000                  		bsr.w	DeleteObject2
00008112 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008116 4E75                       		rts	
00008118                            ; ===========================================================================
00008118                            
00008118                            Obj15_Delete:				; XREF: Obj15_Index
00008118 6100 0000                  		bsr.w	DeleteObject
0000811C 4E75                       		rts	
0000811E                            ; ===========================================================================
0000811E                            
0000811E                            Obj15_Display:				; XREF: Obj15_Index
0000811E 6000 0000                  		bra.w	DisplaySprite
00008122                            ; ===========================================================================
00008122                            ; ---------------------------------------------------------------------------
00008122                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008122                            ; ---------------------------------------------------------------------------
00008122                            Map_obj15:
00008122                            	include "_maps\obj15ghz.asm"
00008122                            ; ---------------------------------------------------------------------------
00008122                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008122                            ; ---------------------------------------------------------------------------
00008122 0000                       		dc.w byte_7C4E-Map_obj15
00008124 0000                       		dc.w byte_7C59-Map_obj15
00008126 0000                       		dc.w byte_7C5F-Map_obj15
00008128 02                         byte_7C4E:	dc.b 2
00008129 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000812E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008133 01                         byte_7C59:	dc.b 1
00008134 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008139 01                         byte_7C5F:	dc.b 1
0000813A F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008140 00                         		even
00008140 00                         		even
00008140                            
00008140                            ; ---------------------------------------------------------------------------
00008140                            ; Sprite mappings - SLZ	swinging platforms
00008140                            ; ---------------------------------------------------------------------------
00008140                            Map_obj15a:
00008140                            	include "_maps\obj15slz.asm"
00008140                            ; ---------------------------------------------------------------------------
00008140                            ; Sprite mappings - SLZ	swinging platforms
00008140                            ; ---------------------------------------------------------------------------
00008140 0000                       		dc.w byte_7C6C-Map_obj15a
00008142 0000                       		dc.w byte_7C95-Map_obj15a
00008144 0000                       		dc.w byte_7C9B-Map_obj15a
00008146 08                         byte_7C6C:	dc.b 8
00008147 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000814C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008151 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008156 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000815B 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008160 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008165 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000816A 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
0000816F 01                         byte_7C95:	dc.b 1
00008170 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008175 01                         byte_7C9B:	dc.b 1
00008176 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000817C 00                         		even
0000817C 00                         		even
0000817C                            
0000817C                            ; ===========================================================================
0000817C                            ; ---------------------------------------------------------------------------
0000817C                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000817C                            ; ---------------------------------------------------------------------------
0000817C                            
0000817C                            Obj17:					; XREF: Obj_Index
0000817C 7000                       		moveq	#0,d0
0000817E 1028 0024                  		move.b	$24(a0),d0
00008182 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008186 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
0000818A                            ; ===========================================================================
0000818A 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
0000818C 0000                       		dc.w Obj17_Action-Obj17_Index
0000818E 0000                       		dc.w Obj17_Action-Obj17_Index
00008190 0000                       		dc.w Obj17_Delete-Obj17_Index
00008192 0000                       		dc.w Obj17_Display-Obj17_Index
00008194                            ; ===========================================================================
00008194                            
00008194                            Obj17_Main:				; XREF: Obj17_Index
00008194 5428 0024                  		addq.b	#2,$24(a0)
00008198 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000081A0 317C 4398 0002             		move.w	#$4398,2(a0)
000081A6 117C 0007 0022             		move.b	#7,$22(a0)
000081AC 117C 0004 0001             		move.b	#4,1(a0)
000081B2 117C 0003 0018             		move.b	#3,$18(a0)
000081B8 117C 0008 0019             		move.b	#8,$19(a0)
000081BE 3428 000C                  		move.w	$C(a0),d2
000081C2 3628 0008                  		move.w	8(a0),d3
000081C6 1810                       		move.b	0(a0),d4
000081C8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000081CC 7200                       		moveq	#0,d1
000081CE 1212                       		move.b	(a2),d1		; move a2 to d1
000081D0 14FC 0000                  		move.b	#0,(a2)+
000081D4 3001                       		move.w	d1,d0
000081D6 E248                       		lsr.w	#1,d0
000081D8 E948                       		lsl.w	#4,d0
000081DA 9640                       		sub.w	d0,d3
000081DC 5501                       		subq.b	#2,d1
000081DE 6500                       		bcs.s	Obj17_Action
000081E0 7C00                       		moveq	#0,d6
000081E2                            
000081E2                            Obj17_MakeHelix:
000081E2 6100 0000                  		bsr.w	SingleObjLoad
000081E6 6600                       		bne.s	Obj17_Action
000081E8 5228 0028                  		addq.b	#1,$28(a0)
000081EC 3A09                       		move.w	a1,d5
000081EE 0445 D000                  		subi.w	#$D000,d5
000081F2 EC4D                       		lsr.w	#6,d5
000081F4 0245 007F                  		andi.w	#$7F,d5
000081F8 14C5                       		move.b	d5,(a2)+
000081FA 137C 0008 0024             		move.b	#8,$24(a1)
00008200 1284                       		move.b	d4,0(a1)
00008202 3342 000C                  		move.w	d2,$C(a1)
00008206 3343 0008                  		move.w	d3,8(a1)
0000820A 2368 0004 0004             		move.l	4(a0),4(a1)
00008210 337C 4398 0002             		move.w	#$4398,2(a1)
00008216 137C 0004 0001             		move.b	#4,1(a1)
0000821C 137C 0003 0018             		move.b	#3,$18(a1)
00008222 137C 0008 0019             		move.b	#8,$19(a1)
00008228 1346 003E                  		move.b	d6,$3E(a1)
0000822C 5206                       		addq.b	#1,d6
0000822E 0206 0007                  		andi.b	#7,d6
00008232 0643 0010                  		addi.w	#$10,d3
00008236 B668 0008                  		cmp.w	8(a0),d3
0000823A 6600                       		bne.s	loc_7D78
0000823C 1146 003E                  		move.b	d6,$3E(a0)
00008240 5206                       		addq.b	#1,d6
00008242 0206 0007                  		andi.b	#7,d6
00008246 0643 0010                  		addi.w	#$10,d3
0000824A 5228 0028                  		addq.b	#1,$28(a0)
0000824E                            
0000824E                            loc_7D78:
0000824E 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008252                            
00008252                            Obj17_Action:				; XREF: Obj17_Index
00008252 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008256 6100 0000                  		bsr.w	DisplaySprite
0000825A 6000 0000                  		bra.w	Obj17_ChkDel
0000825E                            
0000825E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000825E                            
0000825E                            
0000825E                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
0000825E 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008262 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008268 D028 003E                  		add.b	$3E(a0),d0
0000826C 0200 0007                  		andi.b	#7,d0
00008270 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008274 6600                       		bne.s	locret_7DA6
00008276 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000827C                            
0000827C                            locret_7DA6:
0000827C 4E75                       		rts	
0000827E                            ; End of function Obj17_RotateSpikes
0000827E                            
0000827E                            ; ===========================================================================
0000827E                            
0000827E                            Obj17_ChkDel:				; XREF: Obj17_Action
0000827E 3028 0008                  		move.w	8(a0),d0
00008282 0240 FF80                  		andi.w	#$FF80,d0
00008286 3238 F700                  		move.w	($FFFFF700).w,d1
0000828A 0441 0080                  		subi.w	#$80,d1
0000828E 0241 FF80                  		andi.w	#$FF80,d1
00008292 9041                       		sub.w	d1,d0
00008294 0C40 0280                  		cmpi.w	#$280,d0
00008298 6200 0000                  		bhi.w	Obj17_DelAll
0000829C 4E75                       		rts	
0000829E                            ; ===========================================================================
0000829E                            
0000829E                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000829E 7400                       		moveq	#0,d2
000082A0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000082A4 141A                       		move.b	(a2)+,d2	; move a2 to d2
000082A6 5502                       		subq.b	#2,d2
000082A8 6500                       		bcs.s	Obj17_Delete
000082AA                            
000082AA                            Obj17_DelLoop:
000082AA 7000                       		moveq	#0,d0
000082AC 101A                       		move.b	(a2)+,d0
000082AE ED48                       		lsl.w	#6,d0
000082B0 0680 00FF D000             		addi.l	#$FFD000,d0
000082B6 2240                       		movea.l	d0,a1
000082B8 6100 0000                  		bsr.w	DeleteObject2	; delete object
000082BC 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000082C0                            
000082C0                            Obj17_Delete:				; XREF: Obj17_Index
000082C0 6100 0000                  		bsr.w	DeleteObject
000082C4 4E75                       		rts	
000082C6                            ; ===========================================================================
000082C6                            
000082C6                            Obj17_Display:				; XREF: Obj17_Index
000082C6 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000082CA 6000 0000                  		bra.w	DisplaySprite
000082CE                            ; ===========================================================================
000082CE                            ; ---------------------------------------------------------------------------
000082CE                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000082CE                            ; ---------------------------------------------------------------------------
000082CE                            Map_obj17:
000082CE                            	include "_maps\obj17.asm"
000082CE                            ; ---------------------------------------------------------------------------
000082CE                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000082CE                            ; ---------------------------------------------------------------------------
000082CE 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000082D2 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000082D6 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000082DA 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
000082DE 01                         byte_7E08:	dc.b 1
000082DF F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
000082E4 01                         byte_7E0E:	dc.b 1
000082E5 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
000082EA 01                         byte_7E14:	dc.b 1
000082EB F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
000082F0 01                         byte_7E1A:	dc.b 1
000082F1 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
000082F6 01                         byte_7E20:	dc.b 1
000082F7 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
000082FC 01                         byte_7E26:	dc.b 1
000082FD 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008302 01                         byte_7E2C:	dc.b 1
00008303 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008308                            		even
00008308                            		even
00008308                            
00008308                            ; ===========================================================================
00008308                            ; ---------------------------------------------------------------------------
00008308                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008308                            ; ---------------------------------------------------------------------------
00008308                            
00008308                            Obj18:					; XREF: Obj_Index
00008308 7000                       		moveq	#0,d0
0000830A 1028 0024                  		move.b	$24(a0),d0
0000830E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008312 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008316                            ; ===========================================================================
00008316 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008318 0000                       		dc.w Obj18_Solid-Obj18_Index
0000831A 0000                       		dc.w Obj18_Action2-Obj18_Index
0000831C 0000                       		dc.w Obj18_Delete-Obj18_Index
0000831E 0000                       		dc.w Obj18_Action-Obj18_Index
00008320                            ; ===========================================================================
00008320                            
00008320                            Obj18_Main:				; XREF: Obj18_Index
00008320 5428 0024                  		addq.b	#2,$24(a0)
00008324 317C 4000 0002             		move.w	#$4000,2(a0)
0000832A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008332 117C 0020 0019             		move.b	#$20,$19(a0)
00008338 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
0000833E 6600                       		bne.s	Obj18_NotSYZ
00008340 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008348 117C 0020 0019             		move.b	#$20,$19(a0)
0000834E                            
0000834E                            Obj18_NotSYZ:
0000834E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008354 6600                       		bne.s	Obj18_NotSLZ
00008356 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
0000835E 117C 0020 0019             		move.b	#$20,$19(a0)
00008364 317C 4000 0002             		move.w	#$4000,2(a0)
0000836A 117C 0003 0028             		move.b	#3,$28(a0)
00008370                            
00008370                            Obj18_NotSLZ:
00008370 117C 0004 0001             		move.b	#4,1(a0)
00008376 117C 0004 0018             		move.b	#4,$18(a0)
0000837C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008382 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008388 3168 0008 0032             		move.w	8(a0),$32(a0)
0000838E 317C 0080 0026             		move.w	#$80,$26(a0)
00008394 7200                       		moveq	#0,d1
00008396 1028 0028                  		move.b	$28(a0),d0
0000839A 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000839E 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000083A0 5201                       		addq.b	#1,d1		; use frame #1
000083A2 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000083A8                            
000083A8                            Obj18_SetFrame:
000083A8 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000083AC                            
000083AC                            Obj18_Solid:				; XREF: Obj18_Index
000083AC 4A28 0038                  		tst.b	$38(a0)
000083B0 6700                       		beq.s	loc_7EE0
000083B2 5928 0038                  		subq.b	#4,$38(a0)
000083B6                            
000083B6                            loc_7EE0:
000083B6 7200                       		moveq	#0,d1
000083B8 1228 0019                  		move.b	$19(a0),d1
000083BC 6100 F56C                  		bsr.w	PlatformObject
000083C0                            
000083C0                            Obj18_Action:				; XREF: Obj18_Index
000083C0 6100 0000                  		bsr.w	Obj18_Move
000083C4 6100 0000                  		bsr.w	Obj18_Nudge
000083C8 6100 0000                  		bsr.w	DisplaySprite
000083CC 6000 0000                  		bra.w	Obj18_ChkDel
000083D0                            ; ===========================================================================
000083D0                            
000083D0                            Obj18_Action2:				; XREF: Obj18_Index
000083D0 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000083D6 6700                       		beq.s	loc_7F06
000083D8 5828 0038                  		addq.b	#4,$38(a0)
000083DC                            
000083DC                            loc_7F06:
000083DC 7200                       		moveq	#0,d1
000083DE 1228 0019                  		move.b	$19(a0),d1
000083E2 6100 F6BA                  		bsr.w	ExitPlatform
000083E6 3F28 0008                  		move.w	8(a0),-(sp)
000083EA 6100 0000                  		bsr.w	Obj18_Move
000083EE 6100 0000                  		bsr.w	Obj18_Nudge
000083F2 341F                       		move.w	(sp)+,d2
000083F4 6100 FC12                  		bsr.w	MvSonicOnPtfm2
000083F8 6100 0000                  		bsr.w	DisplaySprite
000083FC 6000 0000                  		bra.w	Obj18_ChkDel
00008400                            
00008400 4E75                       		rts
00008402                            
00008402                            ; ---------------------------------------------------------------------------
00008402                            ; Subroutine to	move platform slightly when you	stand on it
00008402                            ; ---------------------------------------------------------------------------
00008402                            
00008402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008402                            
00008402                            
00008402                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008402 1028 0038                  		move.b	$38(a0),d0
00008406 6100 A862                  		bsr.w	CalcSine
0000840A 323C 0400                  		move.w	#$400,d1
0000840E C1C1                       		muls.w	d1,d0
00008410 4840                       		swap	d0
00008412 D068 002C                  		add.w	$2C(a0),d0
00008416 3140 000C                  		move.w	d0,$C(a0)
0000841A 4E75                       		rts	
0000841C                            ; End of function Obj18_Nudge
0000841C                            
0000841C                            ; ---------------------------------------------------------------------------
0000841C                            ; Subroutine to	move platforms
0000841C                            ; ---------------------------------------------------------------------------
0000841C                            
0000841C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000841C                            
0000841C                            
0000841C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000841C 7000                       		moveq	#0,d0
0000841E 1028 0028                  		move.b	$28(a0),d0
00008422 0240 000F                  		andi.w	#$F,d0
00008426 D040                       		add.w	d0,d0
00008428 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000842C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008430                            ; End of function Obj18_Move
00008430                            
00008430                            ; ===========================================================================
00008430 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008434 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008438 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000843C 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008440 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008444 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008448 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000844A                            ; ===========================================================================
0000844A                            
0000844A                            Obj18_Type00:
0000844A 4E75                       		rts			; platform 00 doesn't move
0000844C                            ; ===========================================================================
0000844C                            
0000844C                            Obj18_Type05:
0000844C 3028 0032                  		move.w	$32(a0),d0
00008450 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008454 4401                       		neg.b	d1		; reverse platform-motion
00008456 0601 0040                  		addi.b	#$40,d1
0000845A 6000                       		bra.s	Obj18_01_Move
0000845C                            ; ===========================================================================
0000845C                            
0000845C                            Obj18_Type01:
0000845C 3028 0032                  		move.w	$32(a0),d0
00008460 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008464 0401 0040                  		subi.b	#$40,d1
00008468                            
00008468                            Obj18_01_Move:
00008468 4881                       		ext.w	d1
0000846A D041                       		add.w	d1,d0
0000846C 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008470 6000 0000                  		bra.w	Obj18_ChgMotion
00008474                            ; ===========================================================================
00008474                            
00008474                            Obj18_Type0C:
00008474 3028 0034                  		move.w	$34(a0),d0
00008478 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000847C 4401                       		neg.b	d1		; reverse platform-motion
0000847E 0601 0030                  		addi.b	#$30,d1
00008482 6000                       		bra.s	Obj18_02_Move
00008484                            ; ===========================================================================
00008484                            
00008484                            Obj18_Type0B:
00008484 3028 0034                  		move.w	$34(a0),d0
00008488 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000848C 0401 0030                  		subi.b	#$30,d1
00008490 6000                       		bra.s	Obj18_02_Move
00008492                            ; ===========================================================================
00008492                            
00008492                            Obj18_Type06:
00008492 3028 0034                  		move.w	$34(a0),d0
00008496 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000849A 4401                       		neg.b	d1		; reverse platform-motion
0000849C 0601 0040                  		addi.b	#$40,d1
000084A0 6000                       		bra.s	Obj18_02_Move
000084A2                            ; ===========================================================================
000084A2                            
000084A2                            Obj18_Type02:
000084A2 3028 0034                  		move.w	$34(a0),d0
000084A6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000084AA 0401 0040                  		subi.b	#$40,d1
000084AE                            
000084AE                            Obj18_02_Move:
000084AE 4881                       		ext.w	d1
000084B0 D041                       		add.w	d1,d0
000084B2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000084B6 6000 0000                  		bra.w	Obj18_ChgMotion
000084BA                            ; ===========================================================================
000084BA                            
000084BA                            Obj18_Type03:
000084BA 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084BE 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000084C0 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000084C6 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000084C8 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000084CE                            
000084CE                            Obj18_03_NoMove:
000084CE 4E75                       		rts	
000084D0                            ; ===========================================================================
000084D0                            
000084D0                            Obj18_03_Wait:
000084D0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000084D4 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000084D6 317C 0020 003A             		move.w	#32,$3A(a0)
000084DC 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
000084E0 4E75                       		rts	
000084E2                            ; ===========================================================================
000084E2                            
000084E2                            Obj18_Type04:
000084E2 4A68 003A                  		tst.w	$3A(a0)
000084E6 6700                       		beq.s	loc_8048
000084E8 5368 003A                  		subq.w	#1,$3A(a0)
000084EC 6600                       		bne.s	loc_8048
000084EE 0828 0003 0022             		btst	#3,$22(a0)
000084F4 6700                       		beq.s	loc_8042
000084F6 08E9 0001 0022             		bset	#1,$22(a1)
000084FC 08A9 0003 0022             		bclr	#3,$22(a1)
00008502 137C 0002 0024             		move.b	#2,$24(a1)
00008508 08A8 0003 0022             		bclr	#3,$22(a0)
0000850E 4228 0025                  		clr.b	$25(a0)
00008512 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008518                            
00008518                            loc_8042:
00008518 117C 0008 0024             		move.b	#8,$24(a0)
0000851E                            
0000851E                            loc_8048:
0000851E 2628 002C                  		move.l	$2C(a0),d3
00008522 3028 0012                  		move.w	$12(a0),d0
00008526 48C0                       		ext.l	d0
00008528 E180                       		asl.l	#8,d0
0000852A D680                       		add.l	d0,d3
0000852C 2143 002C                  		move.l	d3,$2C(a0)
00008530 0668 0038 0012             		addi.w	#$38,$12(a0)
00008536 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000853A 0640 00E0                  		addi.w	#$E0,d0
0000853E B068 002C                  		cmp.w	$2C(a0),d0
00008542 6400                       		bcc.s	locret_8074
00008544 117C 0006 0024             		move.b	#6,$24(a0)
0000854A                            
0000854A                            locret_8074:
0000854A 4E75                       		rts	
0000854C                            ; ===========================================================================
0000854C                            
0000854C                            Obj18_Type07:
0000854C 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008550 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008552 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008556 7000                       		moveq	#0,d0
00008558 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000855C E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000855E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008562 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008564 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000856A                            
0000856A                            Obj18_07_NoMove:
0000856A 4E75                       		rts	
0000856C                            ; ===========================================================================
0000856C                            
0000856C                            Obj18_07_Wait:
0000856C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008570 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008572 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008576 4E75                       		rts	
00008578                            ; ===========================================================================
00008578                            
00008578                            Obj18_Type08:
00008578 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000857C 3028 0034                  		move.w	$34(a0),d0
00008580 0440 0200                  		subi.w	#$200,d0
00008584 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008588 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
0000858A 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000858E                            
0000858E                            Obj18_08_NoStop:
0000858E 4E75                       		rts	
00008590                            ; ===========================================================================
00008590                            
00008590                            Obj18_Type0A:
00008590 3028 0034                  		move.w	$34(a0),d0
00008594 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008598 0401 0040                  		subi.b	#$40,d1
0000859C 4881                       		ext.w	d1
0000859E E241                       		asr.w	#1,d1
000085A0 D041                       		add.w	d1,d0
000085A2 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000085A6                            
000085A6                            Obj18_ChgMotion:
000085A6 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000085AC 4E75                       		rts	
000085AE                            ; ===========================================================================
000085AE                            
000085AE                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000085AE 3028 0032                  		move.w	$32(a0),d0
000085B2 0240 FF80                  		andi.w	#$FF80,d0
000085B6 3238 F700                  		move.w	($FFFFF700).w,d1
000085BA 0441 0080                  		subi.w	#$80,d1
000085BE 0241 FF80                  		andi.w	#$FF80,d1
000085C2 9041                       		sub.w	d1,d0
000085C4 0C40 0280                  		cmpi.w	#$280,d0
000085C8 6200                       		bhi.s	Obj18_Delete
000085CA 4E75                       		rts	
000085CC                            ; ===========================================================================
000085CC                            
000085CC                            Obj18_Delete:				; XREF: Obj18_Index
000085CC 6000 0000                  		bra.w	DeleteObject
000085D0                            ; ===========================================================================
000085D0                            ; ---------------------------------------------------------------------------
000085D0                            ; Sprite mappings - unused
000085D0                            ; ---------------------------------------------------------------------------
000085D0                            Map_obj18x:
000085D0                            	include "_maps\obj18x.asm"
000085D0                            ; ---------------------------------------------------------------------------
000085D0                            ; Sprite mappings - unused
000085D0                            ; ---------------------------------------------------------------------------
000085D0 0000                       		dc.w byte_80FE-Map_obj18x
000085D2 0000                       		dc.w byte_8109-Map_obj18x
000085D4 02                         byte_80FE:	dc.b 2
000085D5 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000085DA F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000085DF 0A                         byte_8109:	dc.b $A
000085E0 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000085E5 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000085EA 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000085EF 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000085F4 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000085F9 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000085FE 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008603 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008608 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000860D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008612                            		even
00008612                            		even
00008612                            
00008612                            ; ---------------------------------------------------------------------------
00008612                            ; Sprite mappings - GHZ	platforms
00008612                            ; ---------------------------------------------------------------------------
00008612                            Map_obj18:
00008612                            	include "_maps\obj18ghz.asm"
00008612                            ; ---------------------------------------------------------------------------
00008612                            ; Sprite mappings - GHZ	platforms
00008612                            ; ---------------------------------------------------------------------------
00008612 0000                       		dc.w byte_8140-Map_obj18
00008614 0000                       		dc.w byte_8155-Map_obj18
00008616 04                         byte_8140:	dc.b 4
00008617 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000861C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008621 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008626 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000862B 0A                         byte_8155:	dc.b $A
0000862C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008631 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008636 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000863B 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008640 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008645 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000864A 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000864F 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008654 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008659 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000865E                            		even
0000865E                            		even
0000865E                            
0000865E                            ; ---------------------------------------------------------------------------
0000865E                            ; Sprite mappings - SYZ	platforms
0000865E                            ; ---------------------------------------------------------------------------
0000865E                            Map_obj18a:
0000865E                            	include "_maps\obj18syz.asm"
0000865E                            ; ---------------------------------------------------------------------------
0000865E                            ; Sprite mappings - SYZ	platforms
0000865E                            ; ---------------------------------------------------------------------------
0000865E 0000                       		dc.w byte_818A-Map_obj18a
00008660 03                         byte_818A:	dc.b 3
00008661 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008666 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000866B F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008670                            		even
00008670                            		even
00008670                            
00008670                            ; ---------------------------------------------------------------------------
00008670                            ; Sprite mappings - SLZ	platforms
00008670                            ; ---------------------------------------------------------------------------
00008670                            Map_obj18b:
00008670                            	include "_maps\obj18slz.asm"
00008670                            ; ---------------------------------------------------------------------------
00008670                            ; Sprite mappings - SLZ	platforms
00008670                            ; ---------------------------------------------------------------------------
00008670 0000                       		dc.w byte_819C-Map_obj18b
00008672 02                         byte_819C:	dc.b 2
00008673 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008678 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000867E 00                         		even
0000867E 00                         		even
0000867E                            
0000867E                            ; ===========================================================================
0000867E                            ; ---------------------------------------------------------------------------
0000867E                            ; Object 19 - blank
0000867E                            ; ---------------------------------------------------------------------------
0000867E                            
0000867E                            Obj19:					; XREF: Obj_Index
0000867E 4E75                       		rts	
00008680                            ; ===========================================================================
00008680                            ; ---------------------------------------------------------------------------
00008680                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008680                            ; ---------------------------------------------------------------------------
00008680                            Map_obj48:
00008680                            	include "_maps\obj48.asm"
00008680                            ; ---------------------------------------------------------------------------
00008680                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008680                            ; ---------------------------------------------------------------------------
00008680 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008684 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008688 06                         byte_81B2:	dc.b 6
00008689 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000868E F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008693 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00008698 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000869D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000086A2 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000086A7 04                         byte_81D1:	dc.b 4
000086A8 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000086AD E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000086B2 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000086B7 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000086BC 04                         byte_81E6:	dc.b 4
000086BD E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000086C2 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000086C7 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000086CC 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000086D1 04                         byte_81FB:	dc.b 4
000086D2 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000086D7 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000086DC 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000086E1 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000086E6                            		even
000086E6                            		even
000086E6                            
000086E6                            ; ===========================================================================
000086E6                            ; ---------------------------------------------------------------------------
000086E6                            ; Object 1A - GHZ collapsing ledge
000086E6                            ; ---------------------------------------------------------------------------
000086E6                            
000086E6                            Obj1A:					; XREF: Obj_Index
000086E6 7000                       		moveq	#0,d0
000086E8 1028 0024                  		move.b	$24(a0),d0
000086EC 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000086F0 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000086F4                            ; ===========================================================================
000086F4 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000086F8 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000086FC 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008700                            ; ===========================================================================
00008700                            
00008700                            Obj1A_Main:				; XREF: Obj1A_Index
00008700 5428 0024                  		addq.b	#2,$24(a0)
00008704 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000870C 317C 4000 0002             		move.w	#$4000,2(a0)
00008712 0028 0004 0001             		ori.b	#4,1(a0)
00008718 117C 0004 0018             		move.b	#4,$18(a0)
0000871E 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008724 117C 0064 0019             		move.b	#$64,$19(a0)
0000872A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008730 117C 0038 0016             		move.b	#$38,$16(a0)
00008736 08E8 0004 0001             		bset	#4,1(a0)
0000873C                            
0000873C                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000873C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008740 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008742 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008746 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000874A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000874E                            
0000874E                            Obj1A_Slope:
0000874E 323C 0030                  		move.w	#$30,d1
00008752 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008758 6100 F2A4                  		bsr.w	SlopeObject
0000875C 6000 0000                  		bra.w	MarkObjGone
00008760                            ; ===========================================================================
00008760                            
00008760                            Obj1A_Touch:				; XREF: Obj1A_Index
00008760 4A28 0038                  		tst.b	$38(a0)
00008764 6700 0000                  		beq.w	loc_847A
00008768 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000876E 5328 0038                  		subq.b	#1,$38(a0)
00008772                            
00008772                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008772                            
00008772                            
00008772                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008772 323C 0030                  		move.w	#$30,d1
00008776 6100 F326                  		bsr.w	ExitPlatform
0000877A 323C 0030                  		move.w	#$30,d1
0000877E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008784 3428 0008                  		move.w	8(a0),d2
00008788 6100 0000                  		bsr.w	SlopeObject2
0000878C 6000 0000                  		bra.w	MarkObjGone
00008790                            ; End of function Obj1A_WalkOff
00008790                            
00008790                            ; ===========================================================================
00008790                            
00008790                            Obj1A_Display:				; XREF: Obj1A_Index
00008790 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008794 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008796 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000879A 6600 0000                  		bne.w	loc_82D0	; if yes, branch
0000879E 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087A2 6000 0000                  		bra.w	DisplaySprite
000087A6                            ; ===========================================================================
000087A6                            
000087A6                            loc_82D0:				; XREF: Obj1A_Display
000087A6 5328 0038                  		subq.b	#1,$38(a0)
000087AA 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000087AE 43F8 D000                  		lea	($FFFFD000).w,a1
000087B2 0829 0003 0022             		btst	#3,$22(a1)
000087B8 6700                       		beq.s	loc_82FC
000087BA 4A28 0038                  		tst.b	$38(a0)
000087BE 6600                       		bne.s	locret_8308
000087C0 08A9 0003 0022             		bclr	#3,$22(a1)
000087C6 08A9 0005 0022             		bclr	#5,$22(a1)
000087CC 137C 0001 001D             		move.b	#1,$1D(a1)
000087D2                            
000087D2                            loc_82FC:
000087D2 117C 0000 003A             		move.b	#0,$3A(a0)
000087D8 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000087DE                            
000087DE                            locret_8308:
000087DE 4E75                       		rts	
000087E0                            ; ===========================================================================
000087E0                            
000087E0                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000087E0 6100 0000                  		bsr.w	ObjectFall
000087E4 6100 0000                  		bsr.w	DisplaySprite
000087E8 4A28 0001                  		tst.b	1(a0)
000087EC 6A00                       		bpl.s	Obj1A_Delete
000087EE 4E75                       		rts	
000087F0                            ; ===========================================================================
000087F0                            
000087F0                            Obj1A_Delete:				; XREF: Obj1A_Index
000087F0 6100 0000                  		bsr.w	DeleteObject
000087F4 4E75                       		rts	
000087F6                            ; ===========================================================================
000087F6                            ; ---------------------------------------------------------------------------
000087F6                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000087F6                            ; ---------------------------------------------------------------------------
000087F6                            
000087F6                            Obj53:					; XREF: Obj_Index
000087F6 7000                       		moveq	#0,d0
000087F8 1028 0024                  		move.b	$24(a0),d0
000087FC 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008800 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008804                            ; ===========================================================================
00008804 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008808 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
0000880C 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008810                            ; ===========================================================================
00008810                            
00008810                            Obj53_Main:				; XREF: Obj53_Index
00008810 5428 0024                  		addq.b	#2,$24(a0)
00008814 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
0000881C 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008822 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008828 6600                       		bne.s	Obj53_NotSLZ
0000882A 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008830 5428 001A                  		addq.b	#2,$1A(a0)
00008834                            
00008834                            Obj53_NotSLZ:
00008834 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000883A 6600                       		bne.s	Obj53_NotSBZ
0000883C 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008842                            
00008842                            Obj53_NotSBZ:
00008842 0028 0004 0001             		ori.b	#4,1(a0)
00008848 117C 0004 0018             		move.b	#4,$18(a0)
0000884E 117C 0007 0038             		move.b	#7,$38(a0)
00008854 117C 0044 0019             		move.b	#$44,$19(a0)
0000885A                            
0000885A                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000885A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000885E 6700                       		beq.s	Obj53_Solid	; if not, branch
00008860 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008864 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008868 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000886C                            
0000886C                            Obj53_Solid:
0000886C 323C 0020                  		move.w	#$20,d1
00008870 6100 F0B8                  		bsr.w	PlatformObject
00008874 4A28 0028                  		tst.b	$28(a0)
00008878 6A00                       		bpl.s	Obj53_MarkAsGone
0000887A 0829 0003 0022             		btst	#3,$22(a1)
00008880 6700                       		beq.s	Obj53_MarkAsGone
00008882 08A8 0000 0001             		bclr	#0,1(a0)
00008888 3029 0008                  		move.w	8(a1),d0
0000888C 9068 0008                  		sub.w	8(a0),d0
00008890 6400                       		bcc.s	Obj53_MarkAsGone
00008892 08E8 0000 0001             		bset	#0,1(a0)
00008898                            
00008898                            Obj53_MarkAsGone:
00008898 6000 0000                  		bra.w	MarkObjGone
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            Obj53_Touch:				; XREF: Obj53_Index
0000889C 4A28 0038                  		tst.b	$38(a0)
000088A0 6700 0000                  		beq.w	loc_8458
000088A4 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000088AA 5328 0038                  		subq.b	#1,$38(a0)
000088AE                            
000088AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088AE                            
000088AE                            
000088AE                            Obj53_WalkOff:				; XREF: Obj53_Index
000088AE 323C 0020                  		move.w	#$20,d1
000088B2 6100 F1EA                  		bsr.w	ExitPlatform
000088B6 3428 0008                  		move.w	8(a0),d2
000088BA 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000088BE 6000 0000                  		bra.w	MarkObjGone
000088C2                            ; End of function Obj53_WalkOff
000088C2                            
000088C2                            ; ===========================================================================
000088C2                            
000088C2                            Obj53_Display:				; XREF: Obj53_Index
000088C2 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000088C6 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000088C8 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000088CC 6600 0000                  		bne.w	loc_8402	; if yes, branch
000088D0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000088D4 6000 0000                  		bra.w	DisplaySprite
000088D8                            ; ===========================================================================
000088D8                            
000088D8                            loc_8402:
000088D8 5328 0038                  		subq.b	#1,$38(a0)
000088DC 6100 FFD0                  		bsr.w	Obj53_WalkOff
000088E0 43F8 D000                  		lea	($FFFFD000).w,a1
000088E4 0829 0003 0022             		btst	#3,$22(a1)
000088EA 6700                       		beq.s	loc_842E
000088EC 4A28 0038                  		tst.b	$38(a0)
000088F0 6600                       		bne.s	locret_843A
000088F2 08A9 0003 0022             		bclr	#3,$22(a1)
000088F8 08A9 0005 0022             		bclr	#5,$22(a1)
000088FE 137C 0001 001D             		move.b	#1,$1D(a1)
00008904                            
00008904                            loc_842E:
00008904 117C 0000 003A             		move.b	#0,$3A(a0)
0000890A 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008910                            
00008910                            locret_843A:
00008910 4E75                       		rts	
00008912                            ; ===========================================================================
00008912                            
00008912                            Obj53_TimeZero:				; XREF: Obj53_Display
00008912 6100 0000                  		bsr.w	ObjectFall
00008916 6100 0000                  		bsr.w	DisplaySprite
0000891A 4A28 0001                  		tst.b	1(a0)
0000891E 6A00                       		bpl.s	Obj53_Delete
00008920 4E75                       		rts	
00008922                            ; ===========================================================================
00008922                            
00008922                            Obj53_Delete:				; XREF: Obj53_Index
00008922 6100 0000                  		bsr.w	DeleteObject
00008926 4E75                       		rts	
00008928                            ; ===========================================================================
00008928                            
00008928                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008928 117C 0000 003A             		move.b	#0,$3A(a0)
0000892E                            
0000892E                            loc_8458:				; XREF: Obj53_Touch
0000892E 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008934 0828 0000 0028             		btst	#0,$28(a0)
0000893A 6700                       		beq.s	loc_846C
0000893C 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008942                            
00008942                            loc_846C:
00008942 7207                       		moveq	#7,d1
00008944 5228 001A                  		addq.b	#1,$1A(a0)
00008948 6000                       		bra.s	loc_8486
0000894A                            ; ===========================================================================
0000894A                            
0000894A                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
0000894A 117C 0000 003A             		move.b	#0,$3A(a0)
00008950                            
00008950                            loc_847A:				; XREF: Obj1A_Touch
00008950 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008956 7218                       		moveq	#$18,d1
00008958 5428 001A                  		addq.b	#2,$1A(a0)
0000895C                            
0000895C                            loc_8486:				; XREF: Obj53_Collapse
0000895C 7000                       		moveq	#0,d0
0000895E 1028 001A                  		move.b	$1A(a0),d0
00008962 D040                       		add.w	d0,d0
00008964 2668 0004                  		movea.l	4(a0),a3
00008968 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000896C 524B                       		addq.w	#1,a3
0000896E 08E8 0005 0001             		bset	#5,1(a0)
00008974 1810                       		move.b	0(a0),d4
00008976 1A28 0001                  		move.b	1(a0),d5
0000897A 2248                       		movea.l	a0,a1
0000897C 6000                       		bra.s	loc_84B2
0000897E                            ; ===========================================================================
0000897E                            
0000897E                            loc_84AA:
0000897E 6100 0000                  		bsr.w	SingleObjLoad
00008982 6600                       		bne.s	loc_84F2
00008984 5A4B                       		addq.w	#5,a3
00008986                            
00008986                            loc_84B2:
00008986 137C 0006 0024             		move.b	#6,$24(a1)
0000898C 1284                       		move.b	d4,0(a1)
0000898E 234B 0004                  		move.l	a3,4(a1)
00008992 1345 0001                  		move.b	d5,1(a1)
00008996 3368 0008 0008             		move.w	8(a0),8(a1)
0000899C 3368 000C 000C             		move.w	$C(a0),$C(a1)
000089A2 3368 0002 0002             		move.w	2(a0),2(a1)
000089A8 1368 0018 0018             		move.b	$18(a0),$18(a1)
000089AE 1368 0019 0019             		move.b	$19(a0),$19(a1)
000089B4 135C 0038                  		move.b	(a4)+,$38(a1)
000089B8 B3C8                       		cmpa.l	a0,a1
000089BA 6400                       		bcc.s	loc_84EE
000089BC 6100 0000                  		bsr.w	DisplaySprite2
000089C0                            
000089C0                            loc_84EE:
000089C0 51C9 FFBC                  		dbf	d1,loc_84AA
000089C4                            
000089C4                            loc_84F2:
000089C4 6100 0000                  		bsr.w	DisplaySprite
000089C8 303C 00B9                  		move.w	#$B9,d0
000089CC 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000089D2                            ; ===========================================================================
000089D2                            ; ---------------------------------------------------------------------------
000089D2                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000089D2                            ; ---------------------------------------------------------------------------
000089D2 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000089E2 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000089EC 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000089F4 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000089FC                            
000089FC                            ; ---------------------------------------------------------------------------
000089FC                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000089FC                            ; ---------------------------------------------------------------------------
000089FC                            
000089FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089FC                            
000089FC                            
000089FC                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000089FC 43F8 D000                  		lea	($FFFFD000).w,a1
00008A00 0829 0003 0022             		btst	#3,$22(a1)
00008A06 6700                       		beq.s	locret_856E
00008A08 3029 0008                  		move.w	8(a1),d0
00008A0C 9068 0008                  		sub.w	8(a0),d0
00008A10 D041                       		add.w	d1,d0
00008A12 E248                       		lsr.w	#1,d0
00008A14 0828 0000 0001             		btst	#0,1(a0)
00008A1A 6700                       		beq.s	loc_854E
00008A1C 4640                       		not.w	d0
00008A1E D041                       		add.w	d1,d0
00008A20                            
00008A20                            loc_854E:
00008A20 7200                       		moveq	#0,d1
00008A22 1232 0000                  		move.b	(a2,d0.w),d1
00008A26 3028 000C                  		move.w	$C(a0),d0
00008A2A 9041                       		sub.w	d1,d0
00008A2C 7200                       		moveq	#0,d1
00008A2E 1229 0016                  		move.b	$16(a1),d1
00008A32 9041                       		sub.w	d1,d0
00008A34 3340 000C                  		move.w	d0,$C(a1)
00008A38 9468 0008                  		sub.w	8(a0),d2
00008A3C 9569 0008                  		sub.w	d2,8(a1)
00008A40                            
00008A40                            locret_856E:
00008A40 4E75                       		rts	
00008A42                            ; End of function SlopeObject2
00008A42                            
00008A42                            ; ===========================================================================
00008A42                            ; ---------------------------------------------------------------------------
00008A42                            ; Collision data for GHZ collapsing ledge
00008A42                            ; ---------------------------------------------------------------------------
00008A42                            Obj1A_SlopeData:
00008A42                            		incbin	misc\ghzledge.bin
00008A72                            		even
00008A72                            
00008A72                            ; ---------------------------------------------------------------------------
00008A72                            ; Sprite mappings - GHZ	collapsing ledge
00008A72                            ; ---------------------------------------------------------------------------
00008A72                            Map_obj1A:
00008A72                            	include "_maps\obj1A.asm"
00008A72                            ; ---------------------------------------------------------------------------
00008A72                            ; Sprite mappings - GHZ	collapsing ledge
00008A72                            ; ---------------------------------------------------------------------------
00008A72 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008A76 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008A7A 10                         byte_85A8:	dc.b $10
00008A7B C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008A80 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A85 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A8A E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A8F D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A94 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A99 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A9E F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008AA3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008AA8 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AAD 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008AB2 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AB7 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008ABC 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008AC1 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008AC6 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008ACB 10                         byte_85F9:	dc.b $10
00008ACC C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008AD1 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008AD6 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008ADB E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008AE0 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008AE5 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008AEA F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008AEF F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008AF4 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008AF9 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008AFE 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008B03 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B08 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008B0D 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B12 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008B17 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B1C 19                         byte_864A:	dc.b $19
00008B1D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008B22 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B27 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B2C D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B31 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B36 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B3B E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B40 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B45 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B4A D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008B4F F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B54 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B59 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B5E F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B63 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B68 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008B6D 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B72 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B7C 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B81 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B86 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008B8B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B90 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B95 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B9A 19                         byte_86C8:	dc.b $19
00008B9B C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008BA0 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008BA5 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008BAA D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008BAF E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008BB4 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008BB9 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008BBE E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008BC3 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008BC8 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008BCD F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008BD2 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008BD7 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008BDC F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008BE1 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008BE6 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008BEB 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008BF0 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008BF5 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008BFA 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008BFF 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008C04 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008C09 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008C0E 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008C13 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C18                            		even
00008C18                            		even
00008C18                            
00008C18                            ; ---------------------------------------------------------------------------
00008C18                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008C18                            ; ---------------------------------------------------------------------------
00008C18                            Map_obj53:
00008C18                            	include "_maps\obj53.asm"
00008C18                            ; ---------------------------------------------------------------------------
00008C18                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008C18                            ; ---------------------------------------------------------------------------
00008C18 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008C1C 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008C20 04                         byte_874E:	dc.b 4
00008C21 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008C26 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008C2B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008C30 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008C35 08                         byte_8763:	dc.b 8
00008C36 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008C3B F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008C40 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008C45 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008C4A 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008C4F 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008C54 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008C59 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008C5E 04                         byte_878C:	dc.b 4
00008C5F F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008C64 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008C69 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008C6E 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008C73 08                         byte_87A1:	dc.b 8
00008C74 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008C79 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008C7E F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008C83 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008C88 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C8D 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C92 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C97 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C9C                            		even
00008C9C                            		even
00008C9C                            
00008C9C                            ; ===========================================================================
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            
00008C9C                            Obj1C:					; XREF: Obj_Index
00008C9C 7000                       		moveq	#0,d0
00008C9E 1028 0024                  		move.b	$24(a0),d0
00008CA2 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008CA6 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008CAA                            ; ===========================================================================
00008CAA 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008CAC 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008CAE                            ; ===========================================================================
00008CAE                            
00008CAE                            Obj1C_Main:				; XREF: Obj1C_Index
00008CAE 5428 0024                  		addq.b	#2,$24(a0)
00008CB2 7000                       		moveq	#0,d0
00008CB4 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008CB8 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008CBC 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008CC0 2159 0004                  		move.l	(a1)+,4(a0)
00008CC4 3159 0002                  		move.w	(a1)+,2(a0)
00008CC8 0028 0004 0001             		ori.b	#4,1(a0)
00008CCE 1159 001A                  		move.b	(a1)+,$1A(a0)
00008CD2 1159 0019                  		move.b	(a1)+,$19(a0)
00008CD6 1159 0018                  		move.b	(a1)+,$18(a0)
00008CDA 1159 0020                  		move.b	(a1)+,$20(a0)
00008CDE                            
00008CDE                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008CDE 3028 0008                  		move.w	8(a0),d0
00008CE2 0240 FF80                  		andi.w	#$FF80,d0
00008CE6 3238 F700                  		move.w	($FFFFF700).w,d1
00008CEA 0441 0080                  		subi.w	#$80,d1
00008CEE 0241 FF80                  		andi.w	#$FF80,d1
00008CF2 9041                       		sub.w	d1,d0
00008CF4 0C40 0280                  		cmpi.w	#$280,d0
00008CF8 6200 0000                  		bhi.w	DeleteObject
00008CFC 6000 0000                  		bra.w	DisplaySprite
00008D00                            ; ===========================================================================
00008D00                            ; ---------------------------------------------------------------------------
00008D00                            ; Variables for	object $1C are stored in an array
00008D00                            ; ---------------------------------------------------------------------------
00008D00 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008D04 44D8                       		dc.w $44D8		; VRAM setting
00008D06 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008D0A 0000 0000                  		dc.l Map_obj1C
00008D0E 44D8                       		dc.w $44D8
00008D10 0008 0200                  		dc.b 0,	8, 2, 0
00008D14 0000 0000                  		dc.l Map_obj1C
00008D18 44D8                       		dc.w $44D8
00008D1A 0008 0200                  		dc.b 0,	8, 2, 0
00008D1E 0000 7E12                  		dc.l Map_obj11
00008D22 438E                       		dc.w $438E
00008D24 0110 0100                  		dc.b 1,	$10, 1,	0
00008D28                            ; ---------------------------------------------------------------------------
00008D28                            ; Sprite mappings - SLZ	lava thrower
00008D28                            ; ---------------------------------------------------------------------------
00008D28                            Map_obj1C:
00008D28                            	include "_maps\obj1C.asm"
00008D28                            ; ---------------------------------------------------------------------------
00008D28                            ; Sprite mappings - SLZ	lava thrower
00008D28                            ; ---------------------------------------------------------------------------
00008D28 0000                       		dc.w byte_8858-Map_obj1C
00008D2A 01                         byte_8858:	dc.b 1
00008D2B F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008D30                            		even
00008D30                            		even
00008D30                            
00008D30                            ; ===========================================================================
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            ; Object 1D - switch that activates when Sonic touches it
00008D30                            ; (this	is not used anywhere in	the game)
00008D30                            ; ---------------------------------------------------------------------------
00008D30                            
00008D30                            Obj1D:					; XREF: Obj_Index
00008D30 7000                       		moveq	#0,d0
00008D32 1028 0024                  		move.b	$24(a0),d0
00008D36 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008D3A 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008D3E                            ; ===========================================================================
00008D3E 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008D40 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008D42 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008D44                            ; ===========================================================================
00008D44                            
00008D44                            Obj1D_Main:				; XREF: Obj1D_Index
00008D44 5428 0024                  		addq.b	#2,$24(a0)
00008D48 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008D50 317C 4000 0002             		move.w	#$4000,2(a0)
00008D56 117C 0004 0001             		move.b	#4,1(a0)
00008D5C 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008D62 117C 0010 0019             		move.b	#$10,$19(a0)
00008D68 117C 0005 0018             		move.b	#5,$18(a0)
00008D6E                            
00008D6E                            Obj1D_Action:				; XREF: Obj1D_Index
00008D6E 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008D74 323C 0010                  		move.w	#$10,d1
00008D78 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008D7C 6700                       		beq.s	Obj1D_ChkDel
00008D7E 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008D82 7001                       		moveq	#1,d0
00008D84 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008D88                            
00008D88                            Obj1D_ChkDel:
00008D88 6100 0000                  		bsr.w	DisplaySprite
00008D8C 3028 0008                  		move.w	8(a0),d0
00008D90 0240 FF80                  		andi.w	#$FF80,d0
00008D94 3238 F700                  		move.w	($FFFFF700).w,d1
00008D98 0441 0080                  		subi.w	#$80,d1
00008D9C 0241 FF80                  		andi.w	#$FF80,d1
00008DA0 9041                       		sub.w	d1,d0
00008DA2 0C40 0280                  		cmpi.w	#$280,d0
00008DA6 6200 0000                  		bhi.w	Obj1D_Delete
00008DAA 4E75                       		rts	
00008DAC                            ; ===========================================================================
00008DAC                            
00008DAC                            Obj1D_Delete:				; XREF: Obj1D_Index
00008DAC 6100 0000                  		bsr.w	DeleteObject
00008DB0 4E75                       		rts	
00008DB2                            ; ---------------------------------------------------------------------------
00008DB2                            ; Subroutine to	check if Sonic touches the object
00008DB2                            ; ---------------------------------------------------------------------------
00008DB2                            
00008DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008DB2                            
00008DB2                            
00008DB2                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008DB2 43F8 D000                  		lea	($FFFFD000).w,a1
00008DB6 3029 0008                  		move.w	8(a1),d0
00008DBA 9068 0008                  		sub.w	8(a0),d0
00008DBE D041                       		add.w	d1,d0
00008DC0 6B00                       		bmi.s	loc_8918
00008DC2 D241                       		add.w	d1,d1
00008DC4 B041                       		cmp.w	d1,d0
00008DC6 6400                       		bcc.s	loc_8918
00008DC8 3429 000C                  		move.w	$C(a1),d2
00008DCC 1229 0016                  		move.b	$16(a1),d1
00008DD0 4881                       		ext.w	d1
00008DD2 D242                       		add.w	d2,d1
00008DD4 3028 000C                  		move.w	$C(a0),d0
00008DD8 0440 0010                  		subi.w	#$10,d0
00008DDC 9041                       		sub.w	d1,d0
00008DDE 6200                       		bhi.s	loc_8918
00008DE0 0C40 FFF0                  		cmpi.w	#-$10,d0
00008DE4 6500                       		bcs.s	loc_8918
00008DE6 70FF                       		moveq	#-1,d0
00008DE8 4E75                       		rts	
00008DEA                            ; ===========================================================================
00008DEA                            
00008DEA                            loc_8918:
00008DEA 7000                       		moveq	#0,d0
00008DEC 4E75                       		rts	
00008DEE                            ; End of function Obj1D_ChkTouch
00008DEE                            
00008DEE                            ; ===========================================================================
00008DEE                            ; ---------------------------------------------------------------------------
00008DEE                            ; Sprite mappings - object 1D
00008DEE                            ; ---------------------------------------------------------------------------
00008DEE                            Map_obj1D:
00008DEE                            	include "_maps\obj1D.asm"
00008DEE                            ; ---------------------------------------------------------------------------
00008DEE                            ; Sprite mappings - object 1D
00008DEE                            ; ---------------------------------------------------------------------------
00008DEE 0000                       		dc.w byte_891E-Map_obj1D
00008DF0 04                         byte_891E:	dc.b 4
00008DF1 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008DF6 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008DFB E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008E00 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008E06 00                         		even
00008E06 00                         		even
00008E06                            
00008E06                            ; ===========================================================================
00008E06                            ; ---------------------------------------------------------------------------
00008E06                            ; Object 2A - doors (SBZ)
00008E06                            ; ---------------------------------------------------------------------------
00008E06                            
00008E06                            Obj2A:					; XREF: Obj_Index
00008E06 7000                       		moveq	#0,d0
00008E08 1028 0024                  		move.b	$24(a0),d0
00008E0C 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008E10 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008E14                            ; ===========================================================================
00008E14 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008E16 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008E18                            ; ===========================================================================
00008E18                            
00008E18                            Obj2A_Main:				; XREF: Obj2A_Index
00008E18 5428 0024                  		addq.b	#2,$24(a0)
00008E1C 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008E24 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008E2A 0028 0004 0001             		ori.b	#4,1(a0)
00008E30 117C 0008 0019             		move.b	#8,$19(a0)
00008E36 117C 0004 0018             		move.b	#4,$18(a0)
00008E3C                            
00008E3C                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008E3C 323C 0040                  		move.w	#$40,d1
00008E40 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008E44 3038 D008                  		move.w	($FFFFD008).w,d0
00008E48 D041                       		add.w	d1,d0
00008E4A B068 0008                  		cmp.w	8(a0),d0
00008E4E 6500                       		bcs.s	Obj2A_Animate
00008E50 9041                       		sub.w	d1,d0
00008E52 9041                       		sub.w	d1,d0
00008E54 B068 0008                  		cmp.w	8(a0),d0
00008E58 6400                       		bcc.s	Obj2A_Animate
00008E5A D041                       		add.w	d1,d0
00008E5C B068 0008                  		cmp.w	8(a0),d0
00008E60 6400                       		bcc.s	loc_899A
00008E62 0828 0000 0022             		btst	#0,$22(a0)
00008E68 6600                       		bne.s	Obj2A_Animate
00008E6A 6000                       		bra.s	Obj2A_Open
00008E6C                            ; ===========================================================================
00008E6C                            
00008E6C                            loc_899A:				; XREF: Obj2A_OpenShut
00008E6C 0828 0000 0022             		btst	#0,$22(a0)
00008E72 6700                       		beq.s	Obj2A_Animate
00008E74                            
00008E74                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008E74 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008E7A                            
00008E7A                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008E7A 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008E80 6100 0000                  		bsr.w	AnimateSprite
00008E84 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008E88 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008E8A 323C 0011                  		move.w	#$11,d1
00008E8E 343C 0020                  		move.w	#$20,d2
00008E92 3602                       		move.w	d2,d3
00008E94 5243                       		addq.w	#1,d3
00008E96 3828 0008                  		move.w	8(a0),d4
00008E9A 6100 0000                  		bsr.w	SolidObject
00008E9E                            
00008E9E                            Obj2A_MarkAsUsed:
00008E9E 6000 0000                  		bra.w	MarkObjGone
00008EA2                            ; ===========================================================================
00008EA2                            Ani_obj2A:
00008EA2                            	include "_anim\obj2A.asm"
00008EA2                            ; ---------------------------------------------------------------------------
00008EA2                            ; Animation script - doors (SBZ)
00008EA2                            ; ---------------------------------------------------------------------------
00008EA2 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008EA4 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008EA6 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008EB2 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008EBE                            		even
00008EBE                            		even
00008EBE                            
00008EBE                            ; ---------------------------------------------------------------------------
00008EBE                            ; Sprite mappings - doors (SBZ)
00008EBE                            ; ---------------------------------------------------------------------------
00008EBE                            Map_obj2A:
00008EBE                            	include "_maps\obj2A.asm"
00008EBE                            ; ---------------------------------------------------------------------------
00008EBE                            ; Sprite mappings - doors (SBZ)
00008EBE                            ; ---------------------------------------------------------------------------
00008EBE 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008EC2 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008EC6 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008ECA 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008ECE 0000                       		dc.w byte_8A56-Map_obj2A
00008ED0 02                         byte_89FE:	dc.b 2
00008ED1 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008ED6 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008EDB 02                         byte_8A09:	dc.b 2
00008EDC DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008EE1 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008EE6 02                         byte_8A14:	dc.b 2
00008EE7 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008EEC 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008EF1 02                         byte_8A1F:	dc.b 2
00008EF2 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008EF7 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008EFC 02                         byte_8A2A:	dc.b 2
00008EFD D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008F02 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008F07 02                         byte_8A35:	dc.b 2
00008F08 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008F0D 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008F12 02                         byte_8A40:	dc.b 2
00008F13 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008F18 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008F1D 02                         byte_8A4B:	dc.b 2
00008F1E C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008F23 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008F28 02                         byte_8A56:	dc.b 2
00008F29 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008F2E 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008F34 00                         		even
00008F34 00                         		even
00008F34                            
00008F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F34                            
00008F34                            
00008F34                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008F34 6100 0000                  		bsr.w	Obj44_SolidWall2
00008F38 6700                       		beq.s	loc_8AA8
00008F3A 6B00 0000                  		bmi.w	loc_8AC4
00008F3E 4A40                       		tst.w	d0
00008F40 6700 0000                  		beq.w	loc_8A92
00008F44 6B00                       		bmi.s	loc_8A7C
00008F46 4A69 0010                  		tst.w	$10(a1)
00008F4A 6B00                       		bmi.s	loc_8A92
00008F4C 6000                       		bra.s	loc_8A82
00008F4E                            ; ===========================================================================
00008F4E                            
00008F4E                            loc_8A7C:
00008F4E 4A69 0010                  		tst.w	$10(a1)
00008F52 6A00                       		bpl.s	loc_8A92
00008F54                            
00008F54                            loc_8A82:
00008F54 9169 0008                  		sub.w	d0,8(a1)
00008F58 337C 0000 0014             		move.w	#0,$14(a1)
00008F5E 337C 0000 0010             		move.w	#0,$10(a1)
00008F64                            
00008F64                            loc_8A92:
00008F64 0829 0001 0022             		btst	#1,$22(a1)
00008F6A 6600                       		bne.s	loc_8AB6
00008F6C 08E9 0005 0022             		bset	#5,$22(a1)
00008F72 08E8 0005 0022             		bset	#5,$22(a0)
00008F78 4E75                       		rts	
00008F7A                            ; ===========================================================================
00008F7A                            
00008F7A                            loc_8AA8:
00008F7A 0828 0005 0022             		btst	#5,$22(a0)
00008F80 6700                       		beq.s	locret_8AC2
00008F82 337C 0001 001C             		move.w	#1,$1C(a1)
00008F88                            
00008F88                            loc_8AB6:
00008F88 08A8 0005 0022             		bclr	#5,$22(a0)
00008F8E 08A9 0005 0022             		bclr	#5,$22(a1)
00008F94                            
00008F94                            locret_8AC2:
00008F94 4E75                       		rts	
00008F96                            ; ===========================================================================
00008F96                            
00008F96                            loc_8AC4:
00008F96 4A69 0012                  		tst.w	$12(a1)
00008F9A 6A00                       		bpl.s	locret_8AD8
00008F9C 4A43                       		tst.w	d3
00008F9E 6A00                       		bpl.s	locret_8AD8
00008FA0 9769 000C                  		sub.w	d3,$C(a1)
00008FA4 337C 0000 0012             		move.w	#0,$12(a1)
00008FAA                            
00008FAA                            locret_8AD8:
00008FAA 4E75                       		rts	
00008FAC                            ; End of function Obj44_SolidWall
00008FAC                            
00008FAC                            
00008FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FAC                            
00008FAC                            
00008FAC                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008FAC 43F8 D000                  		lea	($FFFFD000).w,a1
00008FB0 3029 0008                  		move.w	8(a1),d0
00008FB4 9068 0008                  		sub.w	8(a0),d0
00008FB8 D041                       		add.w	d1,d0
00008FBA 6B00                       		bmi.s	loc_8B48
00008FBC 3601                       		move.w	d1,d3
00008FBE D643                       		add.w	d3,d3
00008FC0 B043                       		cmp.w	d3,d0
00008FC2 6200                       		bhi.s	loc_8B48
00008FC4 1629 0016                  		move.b	$16(a1),d3
00008FC8 4883                       		ext.w	d3
00008FCA D443                       		add.w	d3,d2
00008FCC 3629 000C                  		move.w	$C(a1),d3
00008FD0 9668 000C                  		sub.w	$C(a0),d3
00008FD4 D642                       		add.w	d2,d3
00008FD6 6B00                       		bmi.s	loc_8B48
00008FD8 3802                       		move.w	d2,d4
00008FDA D844                       		add.w	d4,d4
00008FDC B644                       		cmp.w	d4,d3
00008FDE 6400                       		bcc.s	loc_8B48
00008FE0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008FE4 6B00                       		bmi.s	loc_8B48
00008FE6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008FEC 6400                       		bcc.s	loc_8B48
00008FEE 4A78 FE08                  		tst.w	($FFFFFE08).w
00008FF2 6600                       		bne.s	loc_8B48
00008FF4 3A00                       		move.w	d0,d5
00008FF6 B240                       		cmp.w	d0,d1
00008FF8 6400                       		bcc.s	loc_8B30
00008FFA D241                       		add.w	d1,d1
00008FFC 9041                       		sub.w	d1,d0
00008FFE 3A00                       		move.w	d0,d5
00009000 4445                       		neg.w	d5
00009002                            
00009002                            loc_8B30:
00009002 3203                       		move.w	d3,d1
00009004 B443                       		cmp.w	d3,d2
00009006 6400                       		bcc.s	loc_8B3C
00009008 9644                       		sub.w	d4,d3
0000900A 3203                       		move.w	d3,d1
0000900C 4441                       		neg.w	d1
0000900E                            
0000900E                            loc_8B3C:
0000900E BA41                       		cmp.w	d1,d5
00009010 6200                       		bhi.s	loc_8B44
00009012 7801                       		moveq	#1,d4
00009014 4E75                       		rts	
00009016                            ; ===========================================================================
00009016                            
00009016                            loc_8B44:
00009016 78FF                       		moveq	#-1,d4
00009018 4E75                       		rts	
0000901A                            ; ===========================================================================
0000901A                            
0000901A                            loc_8B48:
0000901A 7800                       		moveq	#0,d4
0000901C 4E75                       		rts	
0000901E                            ; End of function Obj44_SolidWall2
0000901E                            
0000901E                            ; ===========================================================================
0000901E                            ; ---------------------------------------------------------------------------
0000901E                            ; Object 1E - Ball Hog enemy (SBZ)
0000901E                            ; ---------------------------------------------------------------------------
0000901E                            
0000901E                            Obj1E:					; XREF: Obj_Index
0000901E 7000                       		moveq	#0,d0
00009020 1028 0024                  		move.b	$24(a0),d0
00009024 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009028 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000902C                            ; ===========================================================================
0000902C 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
0000902E 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009030                            ; ===========================================================================
00009030                            
00009030                            Obj1E_Main:				; XREF: Obj1E_Index
00009030 117C 0013 0016             		move.b	#$13,$16(a0)
00009036 117C 0008 0017             		move.b	#8,$17(a0)
0000903C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009044 317C 2302 0002             		move.w	#$2302,2(a0)
0000904A 117C 0004 0001             		move.b	#4,1(a0)
00009050 117C 0004 0018             		move.b	#4,$18(a0)
00009056 117C 0005 0020             		move.b	#5,$20(a0)
0000905C 117C 000C 0019             		move.b	#$C,$19(a0)
00009062 6100 0000                  		bsr.w	ObjectFall
00009066 4EB9 0000 0000             		jsr	ObjHitFloor
0000906C 4A41                       		tst.w	d1
0000906E 6A00                       		bpl.s	locret_8BAC
00009070 D368 000C                  		add.w	d1,$C(a0)
00009074 317C 0000 0012             		move.w	#0,$12(a0)
0000907A 5428 0024                  		addq.b	#2,$24(a0)
0000907E                            
0000907E                            locret_8BAC:
0000907E 4E75                       		rts	
00009080                            ; ===========================================================================
00009080                            
00009080                            Obj1E_Action:				; XREF: Obj1E_Index
00009080 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009086 6100 0000                  		bsr.w	AnimateSprite
0000908A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009090 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009092 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009096 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009098 6000                       		bra.s	Obj1E_MarkAsGone
0000909A                            ; ===========================================================================
0000909A                            
0000909A                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000909A 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
0000909E                            
0000909E                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
0000909E 6000 0000                  		bra.w	MarkObjGone
000090A2                            ; ===========================================================================
000090A2                            
000090A2                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000090A2 117C 0001 0032             		move.b	#1,$32(a0)
000090A8 6100 0000                  		bsr.w	SingleObjLoad
000090AC 6600                       		bne.s	loc_8C1A
000090AE 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000090B2 3368 0008 0008             		move.w	8(a0),8(a1)
000090B8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000090BE 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000090C4 337C 0000 0012             		move.w	#0,$12(a1)
000090CA 70FC                       		moveq	#-4,d0
000090CC 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000090D2 6700                       		beq.s	loc_8C0A	; if not, branch
000090D4 4440                       		neg.w	d0
000090D6 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000090DA                            
000090DA                            loc_8C0A:
000090DA D169 0008                  		add.w	d0,8(a1)
000090DE 0669 000C 000C             		addi.w	#$C,$C(a1)
000090E4 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000090EA                            
000090EA                            loc_8C1A:
000090EA 60B2                       		bra.s	Obj1E_MarkAsGone
000090EC                            ; ===========================================================================
000090EC                            ; ---------------------------------------------------------------------------
000090EC                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000090EC                            ; ---------------------------------------------------------------------------
000090EC                            
000090EC                            Obj20:					; XREF: Obj_Index
000090EC 7000                       		moveq	#0,d0
000090EE 1028 0024                  		move.b	$24(a0),d0
000090F2 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000090F6 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000090FA                            ; ===========================================================================
000090FA 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000090FC 0000                       		dc.w Obj20_Bounce-Obj20_Index
000090FE                            ; ===========================================================================
000090FE                            
000090FE                            Obj20_Main:				; XREF: Obj20_Index
000090FE 5428 0024                  		addq.b	#2,$24(a0)
00009102 117C 0007 0016             		move.b	#7,$16(a0)
00009108 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009110 317C 2302 0002             		move.w	#$2302,2(a0)
00009116 117C 0004 0001             		move.b	#4,1(a0)
0000911C 117C 0003 0018             		move.b	#3,$18(a0)
00009122 117C 0087 0020             		move.b	#$87,$20(a0)
00009128 117C 0008 0019             		move.b	#8,$19(a0)
0000912E 7000                       		moveq	#0,d0
00009130 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009134 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009138 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000913C 117C 0004 001A             		move.b	#4,$1A(a0)
00009142                            
00009142                            Obj20_Bounce:				; XREF: Obj20_Index
00009142 4EB9 0000 0000             		jsr	ObjectFall
00009148 4A68 0012                  		tst.w	$12(a0)
0000914C 6B00                       		bmi.s	Obj20_ChkExplode
0000914E 4EB9 0000 0000             		jsr	ObjHitFloor
00009154 4A41                       		tst.w	d1
00009156 6A00                       		bpl.s	Obj20_ChkExplode
00009158 D368 000C                  		add.w	d1,$C(a0)
0000915C 317C FD00 0012             		move.w	#-$300,$12(a0)
00009162 4A03                       		tst.b	d3
00009164 6700                       		beq.s	Obj20_ChkExplode
00009166 6B00                       		bmi.s	loc_8CA4
00009168 4A68 0010                  		tst.w	$10(a0)
0000916C 6A00                       		bpl.s	Obj20_ChkExplode
0000916E 4468 0010                  		neg.w	$10(a0)
00009172 6000                       		bra.s	Obj20_ChkExplode
00009174                            ; ===========================================================================
00009174                            
00009174                            loc_8CA4:				; XREF: Obj20_Bounce
00009174 4A68 0010                  		tst.w	$10(a0)
00009178 6B00                       		bmi.s	Obj20_ChkExplode
0000917A 4468 0010                  		neg.w	$10(a0)
0000917E                            
0000917E                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
0000917E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009182 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009184 10BC 0024                  		move.b	#$24,0(a0)
00009188 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000918C 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009192 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009196                            ; ===========================================================================
00009196                            
00009196                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009196 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000919A 6A00                       		bpl.s	Obj20_Display
0000919C 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000091A2 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000091A8                            
000091A8                            Obj20_Display:
000091A8 6100 0000                  		bsr.w	DisplaySprite
000091AC 3038 F72E                  		move.w	($FFFFF72E).w,d0
000091B0 0640 00E0                  		addi.w	#$E0,d0
000091B4 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000091B8 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000091BC 4E75                       		rts	
000091BE                            ; ===========================================================================
000091BE                            ; ---------------------------------------------------------------------------
000091BE                            ; Object 24 - explosion	from a destroyed monitor
000091BE                            ; ---------------------------------------------------------------------------
000091BE                            
000091BE                            Obj24:					; XREF: Obj_Index
000091BE 7000                       		moveq	#0,d0
000091C0 1028 0024                  		move.b	$24(a0),d0
000091C4 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000091C8 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000091CC                            ; ===========================================================================
000091CC 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000091CE 0000                       		dc.w Obj24_Animate-Obj24_Index
000091D0                            ; ===========================================================================
000091D0                            
000091D0                            Obj24_Main:				; XREF: Obj24_Index
000091D0 5428 0024                  		addq.b	#2,$24(a0)
000091D4 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000091DC 317C 041C 0002             		move.w	#$41C,2(a0)
000091E2 117C 0004 0001             		move.b	#4,1(a0)
000091E8 117C 0001 0018             		move.b	#1,$18(a0)
000091EE 117C 0000 0020             		move.b	#0,$20(a0)
000091F4 117C 000C 0019             		move.b	#$C,$19(a0)
000091FA 117C 0009 001E             		move.b	#9,$1E(a0)
00009200 117C 0000 001A             		move.b	#0,$1A(a0)
00009206 303C 00A5                  		move.w	#$A5,d0
0000920A 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play explosion sound
00009210                            
00009210                            Obj24_Animate:				; XREF: Obj24_Index
00009210 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009214 6A00                       		bpl.s	Obj24_Display
00009216 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000921C 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009220 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009226 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000922A                            
0000922A                            Obj24_Display:
0000922A 6000 0000                  		bra.w	DisplaySprite
0000922E                            ; ===========================================================================
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            ; Object 27 - explosion	from a destroyed enemy
0000922E                            ; ---------------------------------------------------------------------------
0000922E                            
0000922E                            Obj27:					; XREF: Obj_Index
0000922E 7000                       		moveq	#0,d0
00009230 1028 0024                  		move.b	$24(a0),d0
00009234 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009238 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000923C                            ; ===========================================================================
0000923C 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
0000923E 0000                       		dc.w Obj27_Main-Obj27_Index
00009240 0000                       		dc.w Obj27_Animate-Obj27_Index
00009242                            ; ===========================================================================
00009242                            
00009242                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009242 5428 0024                  		addq.b	#2,$24(a0)
00009246 6100 0000                  		bsr.w	SingleObjLoad
0000924A 6600                       		bne.s	Obj27_Main
0000924C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009250 3368 0008 0008             		move.w	8(a0),8(a1)
00009256 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000925C 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009262                            
00009262                            Obj27_Main:				; XREF: Obj27_Index
00009262 5428 0024                  		addq.b	#2,$24(a0)
00009266 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
0000926E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009274 117C 0004 0001             		move.b	#4,1(a0)
0000927A 117C 0001 0018             		move.b	#1,$18(a0)
00009280 117C 0000 0020             		move.b	#0,$20(a0)
00009286 117C 000C 0019             		move.b	#$C,$19(a0)
0000928C                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000928C 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009292 117C 0000 001A             		move.b	#0,$1A(a0)
00009298 303C 00C1                  		move.w	#$C1,d0
0000929C 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000092A2                            
000092A2 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000092A8 1028 0028                  		move.b	$28(a0),d0
000092AC 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000092B2 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000092B8                            
000092B8                            Obj27_Animate:				; XREF: Obj27_Index
000092B8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000092BC 6A00                       		bpl.s	Obj27_Display
000092BE                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000092BE 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000092C4 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000092C8 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000092CE 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000092D2                            
000092D2                            Obj27_Display:
000092D2 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000092D8 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000092DE 6000 0000                  		bra.w	DisplaySprite
000092E2                            ; ===========================================================================
000092E2                            ; ---------------------------------------------------------------------------
000092E2                            Obj27_ExplosionXYSpd:
000092E2                            		; dc.w	-$350, -$300	; Left
000092E2                            		; dc.w	-$200, -$450	; Near middle (left)
000092E2                            		; dc.w	0, -$500	; Middle
000092E2                            		; dc.w	$200, -$450	; Near middle (right)
000092E2                            		; dc.w	$350, -$300	; Right
000092E2                            
000092E2 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000092E6 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000092EA 0000 FA00                  		dc.w	0, -$600	; Middle
000092EE 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000092F2 0150 FC00                  		dc.w	$150, -$400	; Right
000092F6                            
000092F6 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009310                            ; ---------------------------------------------------------------------------
00009310                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009310                            ; ---------------------------------------------------------------------------
00009310                            
00009310                            Obj3F:					; XREF: Obj_Index
00009310 7000                       		moveq	#0,d0
00009312 1028 0024                  		move.b	$24(a0),d0
00009316 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000931A 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
0000931E                            ; ===========================================================================
0000931E 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009320 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009322                            ; ===========================================================================
00009322                            
00009322                            Obj3F_Main:				; XREF: Obj3F_Index
00009322 5428 0024                  		addq.b	#2,$24(a0)
00009326 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
0000932E 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009334 117C 0004 0001             		move.b	#4,1(a0)
0000933A 117C 0001 0018             		move.b	#1,$18(a0)
00009340 117C 0000 0020             		move.b	#0,$20(a0)
00009346 117C 000C 0019             		move.b	#$C,$19(a0)
0000934C 117C 0007 001E             		move.b	#7,$1E(a0)
00009352 117C 0000 001A             		move.b	#0,$1A(a0)
00009358 303C 00C4                  		move.w	#$C4,d0
0000935C 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009362                            ; ===========================================================================
00009362                            Ani_obj1E:
00009362                            	include "_anim\obj1E.asm"
00009362                            ; ---------------------------------------------------------------------------
00009362                            ; Animation script - doors (SBZ)
00009362                            ; ---------------------------------------------------------------------------
00009362 0000                       		dc.w byte_8E4A-Ani_obj1E
00009364 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000937C 00                         		even
0000937C 00                         		even
0000937C                            
0000937C                            ; ---------------------------------------------------------------------------
0000937C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000937C                            ; ---------------------------------------------------------------------------
0000937C                            Map_obj1E:
0000937C                            	include "_maps\obj1E.asm"
0000937C                            ; ---------------------------------------------------------------------------
0000937C                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000937C                            ; ---------------------------------------------------------------------------
0000937C 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009380 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009384 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00009388 02                         byte_8E6E:	dc.b 2
00009389 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000938E FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009393 02                         byte_8E79:	dc.b 2
00009394 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009399 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
0000939E 02                         byte_8E84:	dc.b 2
0000939F F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
000093A4 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
000093A9 02                         byte_8E8F:	dc.b 2
000093AA E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
000093AF F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
000093B4 01                         byte_8E9A:	dc.b 1
000093B5 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
000093BA 01                         byte_8EA0:	dc.b 1
000093BB F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
000093C0                            		even
000093C0                            		even
000093C0                            
000093C0                            ; ---------------------------------------------------------------------------
000093C0                            ; Sprite mappings - explosion
000093C0                            ; ---------------------------------------------------------------------------
000093C0                            Map_obj24:
000093C0                            	include "_maps\obj24.asm"
000093C0                            ; ---------------------------------------------------------------------------
000093C0                            ; Sprite mappings - explosion
000093C0                            ; ---------------------------------------------------------------------------
000093C0 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000093C4 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000093C8 01                         byte_8EAE:	dc.b 1
000093C9 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000093CE 01                         byte_8EB4:	dc.b 1
000093CF F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000093D4 01                         byte_8EBA:	dc.b 1
000093D5 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000093DA 01                         byte_8EC0:	dc.b 1
000093DB F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000093E0                            		even
000093E0                            		even
000093E0                            
000093E0                            ; ---------------------------------------------------------------------------
000093E0                            ; Sprite mappings - explosion
000093E0                            ; ---------------------------------------------------------------------------
000093E0 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000093E4 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000093E8 0000                       		dc.w byte_8EF7-Map_obj27
000093EA 01                         byte_8ED0:	dc.b 1
000093EB F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000093F0 01                         byte_8ED6:	dc.b 1
000093F1 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000093F6 01                         byte_8EDC:	dc.b 1
000093F7 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000093FC 04                         byte_8EE2:	dc.b 4
000093FD EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009402 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009407 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000940C FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009411 04                         byte_8EF7:	dc.b 4
00009412 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009417 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000941C 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009421 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009426                            		even
00009426                            ; ---------------------------------------------------------------------------
00009426                            ; Sprite mappings - explosion from when	a boss is destroyed
00009426                            ; ---------------------------------------------------------------------------
00009426 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009428 0000                       		dc.w byte_8F16-Map_obj3F
0000942A 0000                       		dc.w byte_8F1C-Map_obj3F
0000942C FFD6                       		dc.w byte_8EE2-Map_obj3F
0000942E FFEB                       		dc.w byte_8EF7-Map_obj3F
00009430 01                         byte_8F16:	dc.b 1
00009431 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009436 01                         byte_8F1C:	dc.b 1
00009437 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
0000943C                            		even
0000943C                            ; ===========================================================================
0000943C                            ; ---------------------------------------------------------------------------
0000943C                            ; Object 28 - animals
0000943C                            ; ---------------------------------------------------------------------------
0000943C                            
0000943C                            Obj28:					; XREF: Obj_Index
0000943C 7000                       		moveq	#0,d0
0000943E 1028 0024                  		move.b	$24(a0),d0
00009442 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009446 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
0000944A                            ; ===========================================================================
0000944A 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000944E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009452 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009456 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000945A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000945E 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009462 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009466 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000946A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000946E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009472 0000                       		dc.w loc_92D6-Obj28_Index
00009474                            
00009474 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009480                            
00009480 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009484 0000 0000                  		dc.l Map_obj28
00009488 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
0000948C 0000 0000                  		dc.l Map_obj28a		; mappings address
00009490 FE80 FD00                  		dc.w $FE80, $FD00
00009494 0000 0000                  		dc.l Map_obj28
00009498 FEC0 FE80                  		dc.w $FEC0, $FE80
0000949C 0000 0000                  		dc.l Map_obj28a
000094A0 FE40 FD00                  		dc.w $FE40, $FD00
000094A4 0000 0000                  		dc.l Map_obj28b
000094A8 FD00 FC00                  		dc.w $FD00, $FC00
000094AC 0000 0000                  		dc.l Map_obj28a
000094B0 FD80 FC80                  		dc.w $FD80, $FC80
000094B4 0000 0000                  		dc.l Map_obj28b
000094B8                            
000094B8 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000094C8 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000094D8 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000094E4                            
000094E4 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000094F8 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
0000950C 0000 0000                  		dc.l Map_obj28b
00009510                            
00009510 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009522 0565 05B3                  		dc.w $565, $5B3
00009526                            ; ===========================================================================
00009526                            
00009526                            Obj28_Ending:				; XREF: Obj28_Index
00009526 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000952A 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000952E 7000                       		moveq	#0,d0
00009530 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009534 D040                       		add.w	d0,d0		; multiply d0 by 2
00009536 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
0000953A 0440 0014                  		subi.w	#$14,d0
0000953E 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009544 D040                       		add.w	d0,d0
00009546 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000954C 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009550 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009556 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000955C 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009562 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009568 117C 000C 0016             		move.b	#$C,$16(a0)
0000956E 117C 0004 0001             		move.b	#4,1(a0)
00009574 08E8 0000 0001             		bset	#0,1(a0)
0000957A 117C 0006 0018             		move.b	#6,$18(a0)
00009580 117C 0008 0019             		move.b	#8,$19(a0)
00009586 117C 0007 001E             		move.b	#7,$1E(a0)
0000958C 6000 0000                  		bra.w	DisplaySprite
00009590                            ; ===========================================================================
00009590                            
00009590                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009590 5428 0024                  		addq.b	#2,$24(a0)
00009594 6100 96AE                  		bsr.w	RandomNumber
00009598 0240 0001                  		andi.w	#1,d0
0000959C 7200                       		moveq	#0,d1
0000959E 1238 FE10                  		move.b	($FFFFFE10).w,d1
000095A2 D241                       		add.w	d1,d1
000095A4 D240                       		add.w	d0,d1
000095A6 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000095AA 1031 1000                  		move.b	(a1,d1.w),d0
000095AE 1140 0030                  		move.b	d0,$30(a0)
000095B2 E748                       		lsl.w	#3,d0
000095B4 43FA FECA                  		lea	Obj28_Variables(pc),a1
000095B8 D2C0                       		adda.w	d0,a1
000095BA 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000095BE 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000095C2 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000095C6 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000095CC 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000095D2 6700                       		beq.s	loc_90C0	; if yes, branch
000095D4 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000095DA                            
000095DA                            loc_90C0:
000095DA 117C 000C 0016             		move.b	#$C,$16(a0)
000095E0 117C 0004 0001             		move.b	#4,1(a0)
000095E6 08E8 0000 0001             		bset	#0,1(a0)
000095EC 117C 0006 0018             		move.b	#6,$18(a0)
000095F2 117C 0008 0019             		move.b	#8,$19(a0)
000095F8 117C 0007 001E             		move.b	#7,$1E(a0)
000095FE 117C 0002 001A             		move.b	#2,$1A(a0)
00009604 317C FC00 0012             		move.w	#-$400,$12(a0)
0000960A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000960E 6600                       		bne.s	loc_911C
00009610 6100 0000                  		bsr.w	SingleObjLoad
00009614 6600                       		bne.s	Obj28_Display
00009616 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000961A 3368 0008 0008             		move.w	8(a0),8(a1)
00009620 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009626 3028 003E                  		move.w	$3E(a0),d0
0000962A E248                       		lsr.w	#1,d0
0000962C 1340 001A                  		move.b	d0,$1A(a1)
00009630                            
00009630                            Obj28_Display:
00009630 6000 0000                  		bra.w	DisplaySprite
00009634                            ; ===========================================================================
00009634                            
00009634                            loc_911C:
00009634 117C 0012 0024             		move.b	#$12,$24(a0)
0000963A 4268 0010                  		clr.w	$10(a0)
0000963E 6000 0000                  		bra.w	DisplaySprite
00009642                            ; ===========================================================================
00009642                            
00009642                            loc_912A:				; XREF: Obj28_Index
00009642 4A28 0001                  		tst.b	1(a0)
00009646 6A00 0000                  		bpl.w	DeleteObject
0000964A 6100 0000                  		bsr.w	ObjectFall
0000964E 4A68 0012                  		tst.w	$12(a0)
00009652 6B00                       		bmi.s	loc_9180
00009654 4EB9 0000 0000             		jsr	ObjHitFloor
0000965A 4A41                       		tst.w	d1
0000965C 6A00                       		bpl.s	loc_9180
0000965E D368 000C                  		add.w	d1,$C(a0)
00009662 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009668 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000966E 117C 0001 001A             		move.b	#1,$1A(a0)
00009674 1028 0030                  		move.b	$30(a0),d0
00009678 D000                       		add.b	d0,d0
0000967A 5800                       		addq.b	#4,d0
0000967C 1140 0024                  		move.b	d0,$24(a0)
00009680 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009684 6700                       		beq.s	loc_9180
00009686 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000968C 6700                       		beq.s	loc_9180
0000968E 4468 0010                  		neg.w	$10(a0)
00009692 0868 0000 0001             		bchg	#0,1(a0)
00009698                            
00009698                            loc_9180:
00009698 6000 0000                  		bra.w	DisplaySprite
0000969C                            ; ===========================================================================
0000969C                            
0000969C                            loc_9184:				; XREF: Obj28_Index
0000969C 6100 0000                  		bsr.w	ObjectFall
000096A0 117C 0001 001A             		move.b	#1,$1A(a0)
000096A6 4A68 0012                  		tst.w	$12(a0)
000096AA 6B00                       		bmi.s	loc_91AE
000096AC 117C 0000 001A             		move.b	#0,$1A(a0)
000096B2 4EB9 0000 0000             		jsr	ObjHitFloor
000096B8 4A41                       		tst.w	d1
000096BA 6A00                       		bpl.s	loc_91AE
000096BC D368 000C                  		add.w	d1,$C(a0)
000096C0 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096C6                            
000096C6                            loc_91AE:
000096C6 4A28 0028                  		tst.b	$28(a0)
000096CA 6600                       		bne.s	loc_9224
000096CC 4A28 0001                  		tst.b	1(a0)
000096D0 6A00 0000                  		bpl.w	DeleteObject
000096D4 6000 0000                  		bra.w	DisplaySprite
000096D8                            ; ===========================================================================
000096D8                            
000096D8                            loc_91C0:				; XREF: Obj28_Index
000096D8 6100 0000                  		bsr.w	SpeedToPos
000096DC 0668 0018 0012             		addi.w	#$18,$12(a0)
000096E2 4A68 0012                  		tst.w	$12(a0)
000096E6 6B00                       		bmi.s	loc_91FC
000096E8 4EB9 0000 0000             		jsr	ObjHitFloor
000096EE 4A41                       		tst.w	d1
000096F0 6A00                       		bpl.s	loc_91FC
000096F2 D368 000C                  		add.w	d1,$C(a0)
000096F6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096FC 4A28 0028                  		tst.b	$28(a0)
00009700 6700                       		beq.s	loc_91FC
00009702 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009708 6700                       		beq.s	loc_91FC
0000970A 4468 0010                  		neg.w	$10(a0)
0000970E 0868 0000 0001             		bchg	#0,1(a0)
00009714                            
00009714                            loc_91FC:
00009714 5328 001E                  		subq.b	#1,$1E(a0)
00009718 6A00                       		bpl.s	loc_9212
0000971A 117C 0001 001E             		move.b	#1,$1E(a0)
00009720 5228 001A                  		addq.b	#1,$1A(a0)
00009724 0228 0001 001A             		andi.b	#1,$1A(a0)
0000972A                            
0000972A                            loc_9212:
0000972A 4A28 0028                  		tst.b	$28(a0)
0000972E 6600                       		bne.s	loc_9224
00009730 4A28 0001                  		tst.b	1(a0)
00009734 6A00 0000                  		bpl.w	DeleteObject
00009738 6000 0000                  		bra.w	DisplaySprite
0000973C                            ; ===========================================================================
0000973C                            
0000973C                            loc_9224:				; XREF: Obj28_Index
0000973C 3028 0008                  		move.w	8(a0),d0
00009740 9078 D008                  		sub.w	($FFFFD008).w,d0
00009744 6500                       		bcs.s	loc_923C
00009746 0440 0180                  		subi.w	#$180,d0
0000974A 6A00                       		bpl.s	loc_923C
0000974C 4A28 0001                  		tst.b	1(a0)
00009750 6A00 0000                  		bpl.w	DeleteObject
00009754                            
00009754                            loc_923C:
00009754 6000 0000                  		bra.w	DisplaySprite
00009758                            ; ===========================================================================
00009758                            
00009758                            loc_9240:				; XREF: Obj28_Index
00009758 4A28 0001                  		tst.b	1(a0)
0000975C 6A00 0000                  		bpl.w	DeleteObject
00009760 5368 0036                  		subq.w	#1,$36(a0)
00009764 6600 0000                  		bne.w	loc_925C
00009768 117C 0002 0024             		move.b	#2,$24(a0)
0000976E 117C 0003 0018             		move.b	#3,$18(a0)
00009774                            
00009774                            loc_925C:
00009774 6000 0000                  		bra.w	DisplaySprite
00009778                            ; ===========================================================================
00009778                            
00009778                            loc_9260:				; XREF: Obj28_Index
00009778 6100 0000                  		bsr.w	sub_9404
0000977C 6400                       		bcc.s	loc_927C
0000977E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009784 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000978A 117C 000E 0024             		move.b	#$E,$24(a0)
00009790 6000 FF46                  		bra.w	loc_91C0
00009794                            ; ===========================================================================
00009794                            
00009794                            loc_927C:
00009794 6000 FFA6                  		bra.w	loc_9224
00009798                            ; ===========================================================================
00009798                            
00009798                            loc_9280:				; XREF: Obj28_Index
00009798 6100 0000                  		bsr.w	sub_9404
0000979C 6A00                       		bpl.s	loc_92B6
0000979E 4268 0010                  		clr.w	$10(a0)
000097A2 4268 0032                  		clr.w	$32(a0)
000097A6 6100 0000                  		bsr.w	SpeedToPos
000097AA 0668 0018 0012             		addi.w	#$18,$12(a0)
000097B0 6100 0000                  		bsr.w	loc_93C4
000097B4 6100 0000                  		bsr.w	loc_93EC
000097B8 5328 001E                  		subq.b	#1,$1E(a0)
000097BC 6A00                       		bpl.s	loc_92B6
000097BE 117C 0001 001E             		move.b	#1,$1E(a0)
000097C4 5228 001A                  		addq.b	#1,$1A(a0)
000097C8 0228 0001 001A             		andi.b	#1,$1A(a0)
000097CE                            
000097CE                            loc_92B6:
000097CE 6000 FF6C                  		bra.w	loc_9224
000097D2                            ; ===========================================================================
000097D2                            
000097D2                            loc_92BA:				; XREF: Obj28_Index
000097D2 6100 0000                  		bsr.w	sub_9404
000097D6 6A00                       		bpl.s	loc_9310
000097D8 3168 0032 0010             		move.w	$32(a0),$10(a0)
000097DE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097E4 117C 0004 0024             		move.b	#4,$24(a0)
000097EA 6000 FEB0                  		bra.w	loc_9184
000097EE                            ; ===========================================================================
000097EE                            
000097EE                            loc_92D6:				; XREF: Obj28_Index
000097EE 6100 0000                  		bsr.w	ObjectFall
000097F2 117C 0001 001A             		move.b	#1,$1A(a0)
000097F8 4A68 0012                  		tst.w	$12(a0)
000097FC 6B00                       		bmi.s	loc_9310
000097FE 117C 0000 001A             		move.b	#0,$1A(a0)
00009804 4EB9 0000 0000             		jsr	ObjHitFloor
0000980A 4A41                       		tst.w	d1
0000980C 6A00                       		bpl.s	loc_9310
0000980E 4628 0029                  		not.b	$29(a0)
00009812 6600                       		bne.s	loc_9306
00009814 4468 0010                  		neg.w	$10(a0)
00009818 0868 0000 0001             		bchg	#0,1(a0)
0000981E                            
0000981E                            loc_9306:
0000981E D368 000C                  		add.w	d1,$C(a0)
00009822 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009828                            
00009828                            loc_9310:
00009828 6000 FF12                  		bra.w	loc_9224
0000982C                            ; ===========================================================================
0000982C                            
0000982C                            loc_9314:				; XREF: Obj28_Index
0000982C 6100 0000                  		bsr.w	sub_9404
00009830 6A00                       		bpl.s	loc_932E
00009832 4268 0010                  		clr.w	$10(a0)
00009836 4268 0032                  		clr.w	$32(a0)
0000983A 6100 0000                  		bsr.w	ObjectFall
0000983E 6100 0000                  		bsr.w	loc_93C4
00009842 6100 0000                  		bsr.w	loc_93EC
00009846                            
00009846                            loc_932E:
00009846 6000 FEF4                  		bra.w	loc_9224
0000984A                            ; ===========================================================================
0000984A                            
0000984A                            loc_9332:				; XREF: Obj28_Index
0000984A 6100 0000                  		bsr.w	sub_9404
0000984E 6A00                       		bpl.s	loc_936C
00009850 6100 0000                  		bsr.w	ObjectFall
00009854 117C 0001 001A             		move.b	#1,$1A(a0)
0000985A 4A68 0012                  		tst.w	$12(a0)
0000985E 6B00                       		bmi.s	loc_936C
00009860 117C 0000 001A             		move.b	#0,$1A(a0)
00009866 4EB9 0000 0000             		jsr	ObjHitFloor
0000986C 4A41                       		tst.w	d1
0000986E 6A00                       		bpl.s	loc_936C
00009870 4468 0010                  		neg.w	$10(a0)
00009874 0868 0000 0001             		bchg	#0,1(a0)
0000987A D368 000C                  		add.w	d1,$C(a0)
0000987E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009884                            
00009884                            loc_936C:
00009884 6000 FEB6                  		bra.w	loc_9224
00009888                            ; ===========================================================================
00009888                            
00009888                            loc_9370:				; XREF: Obj28_Index
00009888 6100 0000                  		bsr.w	sub_9404
0000988C 6A00                       		bpl.s	loc_93C0
0000988E 6100 0000                  		bsr.w	SpeedToPos
00009892 0668 0018 0012             		addi.w	#$18,$12(a0)
00009898 4A68 0012                  		tst.w	$12(a0)
0000989C 6B00                       		bmi.s	loc_93AA
0000989E 4EB9 0000 0000             		jsr	ObjHitFloor
000098A4 4A41                       		tst.w	d1
000098A6 6A00                       		bpl.s	loc_93AA
000098A8 4628 0029                  		not.b	$29(a0)
000098AC 6600                       		bne.s	loc_93A0
000098AE 4468 0010                  		neg.w	$10(a0)
000098B2 0868 0000 0001             		bchg	#0,1(a0)
000098B8                            
000098B8                            loc_93A0:
000098B8 D368 000C                  		add.w	d1,$C(a0)
000098BC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098C2                            
000098C2                            loc_93AA:
000098C2 5328 001E                  		subq.b	#1,$1E(a0)
000098C6 6A00                       		bpl.s	loc_93C0
000098C8 117C 0001 001E             		move.b	#1,$1E(a0)
000098CE 5228 001A                  		addq.b	#1,$1A(a0)
000098D2 0228 0001 001A             		andi.b	#1,$1A(a0)
000098D8                            
000098D8                            loc_93C0:
000098D8 6000 FE62                  		bra.w	loc_9224
000098DC                            ; ===========================================================================
000098DC                            
000098DC                            loc_93C4:
000098DC 117C 0001 001A             		move.b	#1,$1A(a0)
000098E2 4A68 0012                  		tst.w	$12(a0)
000098E6 6B00                       		bmi.s	locret_93EA
000098E8 117C 0000 001A             		move.b	#0,$1A(a0)
000098EE 4EB9 0000 0000             		jsr	ObjHitFloor
000098F4 4A41                       		tst.w	d1
000098F6 6A00                       		bpl.s	locret_93EA
000098F8 D368 000C                  		add.w	d1,$C(a0)
000098FC 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009902                            
00009902                            locret_93EA:
00009902 4E75                       		rts	
00009904                            ; ===========================================================================
00009904                            
00009904                            loc_93EC:
00009904 08E8 0000 0001             		bset	#0,1(a0)
0000990A 3028 0008                  		move.w	8(a0),d0
0000990E 9078 D008                  		sub.w	($FFFFD008).w,d0
00009912 6400                       		bcc.s	locret_9402
00009914 08A8 0000 0001             		bclr	#0,1(a0)
0000991A                            
0000991A                            locret_9402:
0000991A 4E75                       		rts	
0000991C                            
0000991C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000991C                            
0000991C                            
0000991C                            sub_9404:
0000991C 3038 D008                  		move.w	($FFFFD008).w,d0
00009920 9068 0008                  		sub.w	8(a0),d0
00009924 0440 00B8                  		subi.w	#$B8,d0
00009928 4E75                       		rts	
0000992A                            ; End of function sub_9404
0000992A                            
0000992A                            ; ===========================================================================
0000992A                            ; ---------------------------------------------------------------------------
0000992A                            ; Object 29 - points that appear when you destroy something
0000992A                            ; ---------------------------------------------------------------------------
0000992A                            
0000992A                            Obj29:					; XREF: Obj_Index
0000992A 7000                       		moveq	#0,d0
0000992C 1028 0024                  		move.b	$24(a0),d0
00009930 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009934 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009938 6000 0000                  		bra.w	DisplaySprite
0000993C                            ; ===========================================================================
0000993C 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000993E 0000                       		dc.w Obj29_Slower-Obj29_Index
00009940                            ; ===========================================================================
00009940                            
00009940                            Obj29_Main:				; XREF: Obj29_Index
00009940 5428 0024                  		addq.b	#2,$24(a0)
00009944 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000994C 317C 2797 0002             		move.w	#$2797,2(a0)
00009952 117C 0004 0001             		move.b	#4,1(a0)
00009958 117C 0001 0018             		move.b	#1,$18(a0)
0000995E 117C 0008 0019             		move.b	#8,$19(a0)
00009964 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000996A                            
0000996A                            Obj29_Slower:				; XREF: Obj29_Index
0000996A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000996E 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009972 6100 0000                  		bsr.w	SpeedToPos
00009976 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000997C 4E75                       		rts	
0000997E                            ; ===========================================================================
0000997E                            ; ---------------------------------------------------------------------------
0000997E                            ; Sprite mappings - animals
0000997E                            ; ---------------------------------------------------------------------------
0000997E                            Map_obj28:
0000997E                            	include "_maps\obj28.asm"
0000997E                            ; ---------------------------------------------------------------------------
0000997E                            ; Sprite mappings - animals
0000997E                            ; ---------------------------------------------------------------------------
0000997E 0000                       		dc.w byte_9472-Map_obj28
00009980 0000                       		dc.w byte_9478-Map_obj28
00009982 0000                       		dc.w byte_946C-Map_obj28
00009984 01                         byte_946C:	dc.b 1
00009985 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000998A 01                         byte_9472:	dc.b 1
0000998B F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009990 01                         byte_9478:	dc.b 1
00009991 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009996                            		even
00009996                            		even
00009996                            
00009996                            Map_obj28a:
00009996                            	include "_maps\obj28a.asm"
00009996                            ; ---------------------------------------------------------------------------
00009996                            ; Sprite mappings - animals
00009996                            ; ---------------------------------------------------------------------------
00009996 0000                       		dc.w byte_948A-Map_obj28a
00009998 0000                       		dc.w byte_9490-Map_obj28a
0000999A 0000                       		dc.w byte_9484-Map_obj28a
0000999C 01                         byte_9484:	dc.b 1
0000999D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000099A2 01                         byte_948A:	dc.b 1
000099A3 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
000099A8 01                         byte_9490:	dc.b 1
000099A9 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
000099AE                            		even
000099AE                            		even
000099AE                            
000099AE                            Map_obj28b:
000099AE                            	include "_maps\obj28b.asm"
000099AE                            ; ---------------------------------------------------------------------------
000099AE                            ; Sprite mappings - animals
000099AE                            ; ---------------------------------------------------------------------------
000099AE 0000                       		dc.w byte_94A2-Map_obj28b
000099B0 0000                       		dc.w byte_94A8-Map_obj28b
000099B2 0000                       		dc.w byte_949C-Map_obj28b
000099B4 01                         byte_949C:	dc.b 1
000099B5 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000099BA 01                         byte_94A2:	dc.b 1
000099BB FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
000099C0 01                         byte_94A8:	dc.b 1
000099C1 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
000099C6                            		even
000099C6                            		even
000099C6                            
000099C6                            ; ---------------------------------------------------------------------------
000099C6                            ; Sprite mappings - points that	appear when you	destroy	something
000099C6                            ; ---------------------------------------------------------------------------
000099C6                            Map_obj29:
000099C6                            	include "_maps\obj29.asm"
000099C6                            ; ---------------------------------------------------------------------------
000099C6                            ; Sprite mappings - points that	appear when you	destroy	something
000099C6                            ; ---------------------------------------------------------------------------
000099C6 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000099CA 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000099CE 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000099D2 0000                       		dc.w byte_94E5-Map_obj29
000099D4 01                         byte_94BC:	dc.b 1
000099D5 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000099DA 01                         byte_94C2:	dc.b 1
000099DB FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000099E0 01                         byte_94C8:	dc.b 1
000099E1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000099E6 01                         byte_94CE:	dc.b 1
000099E7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000099EC 01                         byte_94D4:	dc.b 1
000099ED FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000099F2 02                         byte_94DA:	dc.b 2
000099F3 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000099F8 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000099FD 02                         byte_94E5:	dc.b 2
000099FE FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009A03 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009A08                            		even
00009A08                            		even
00009A08                            
00009A08                            ; ===========================================================================
00009A08                            ; ---------------------------------------------------------------------------
00009A08                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009A08                            ; ---------------------------------------------------------------------------
00009A08                            
00009A08                            Obj1F:					; XREF: Obj_Index
00009A08 7000                       		moveq	#0,d0
00009A0A 1028 0024                  		move.b	$24(a0),d0
00009A0E 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009A12 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009A16                            ; ===========================================================================
00009A16 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009A18 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009A1A 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009A1C 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009A1E 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009A20                            ; ===========================================================================
00009A20                            
00009A20                            Obj1F_Main:				; XREF: Obj1F_Index
00009A20 117C 0010 0016             		move.b	#$10,$16(a0)
00009A26 117C 0008 0017             		move.b	#8,$17(a0)
00009A2C 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009A34 317C 0400 0002             		move.w	#$400,2(a0)
00009A3A 117C 0004 0001             		move.b	#4,1(a0)
00009A40 117C 0003 0018             		move.b	#3,$18(a0)
00009A46 117C 0006 0020             		move.b	#6,$20(a0)
00009A4C 117C 0015 0019             		move.b	#$15,$19(a0)
00009A52 6100 0000                  		bsr.w	ObjectFall
00009A56 4EB9 0000 0000             		jsr	ObjHitFloor
00009A5C 4A41                       		tst.w	d1
00009A5E 6A00                       		bpl.s	locret_955A
00009A60 D368 000C                  		add.w	d1,$C(a0)
00009A64 1143 0026                  		move.b	d3,$26(a0)
00009A68 317C 0000 0012             		move.w	#0,$12(a0)
00009A6E 5428 0024                  		addq.b	#2,$24(a0)
00009A72                            
00009A72                            locret_955A:
00009A72 4E75                       		rts	
00009A74                            ; ===========================================================================
00009A74                            
00009A74                            Obj1F_Action:				; XREF: Obj1F_Index
00009A74 7000                       		moveq	#0,d0
00009A76 1028 0025                  		move.b	$25(a0),d0
00009A7A 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009A7E 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009A82 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009A88 6100 0000                  		bsr.w	AnimateSprite
00009A8C 6000 0000                  		bra.w	MarkObjGone
00009A90                            ; ===========================================================================
00009A90 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A92 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A94                            ; ===========================================================================
00009A94                            
00009A94                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A94 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A98 6A00                       		bpl.s	locret_95B6
00009A9A 4A28 0001                  		tst.b	1(a0)
00009A9E 6A00                       		bpl.s	Obj1F_Move
00009AA0 0868 0001 0032             		bchg	#1,$32(a0)
00009AA6 6600                       		bne.s	Obj1F_MakeFire
00009AA8                            
00009AA8                            Obj1F_Move:
00009AA8 5428 0025                  		addq.b	#2,$25(a0)
00009AAC 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009AB2 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009AB8 6100 0000                  		bsr.w	Obj1F_SetAni
00009ABC 5600                       		addq.b	#3,d0
00009ABE 1140 001C                  		move.b	d0,$1C(a0)
00009AC2 0868 0000 0022             		bchg	#0,$22(a0)
00009AC8 6600                       		bne.s	locret_95B6
00009ACA 4468 0010                  		neg.w	$10(a0)		; change direction
00009ACE                            
00009ACE                            locret_95B6:
00009ACE 4E75                       		rts	
00009AD0                            ; ===========================================================================
00009AD0                            
00009AD0                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009AD0 317C 003B 0030             		move.w	#$3B,$30(a0)
00009AD6 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009ADC 6100 0000                  		bsr.w	SingleObjLoad
00009AE0 6600                       		bne.s	Obj1F_MakeFire2
00009AE2 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009AE6 137C 0006 0024             		move.b	#6,$24(a1)
00009AEC 3368 0008 0008             		move.w	8(a0),8(a1)
00009AF2 0469 0010 0008             		subi.w	#$10,8(a1)
00009AF8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009AFE 337C FF00 0010             		move.w	#-$100,$10(a1)
00009B04                            
00009B04                            Obj1F_MakeFire2:
00009B04 6100 0000                  		bsr.w	SingleObjLoad
00009B08 6600                       		bne.s	locret_9618
00009B0A 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009B0E 137C 0006 0024             		move.b	#6,$24(a1)
00009B14 3368 0008 0008             		move.w	8(a0),8(a1)
00009B1A 0669 0010 0008             		addi.w	#$10,8(a1)
00009B20 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B26 337C 0100 0010             		move.w	#$100,$10(a1)
00009B2C                            
00009B2C                            locret_9618:
00009B2C 4E75                       		rts	
00009B2E                            ; ===========================================================================
00009B2E                            
00009B2E                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009B2E 5368 0030                  		subq.w	#1,$30(a0)
00009B32 6B00                       		bmi.s	loc_966E
00009B34 6100 0000                  		bsr.w	SpeedToPos
00009B38 0868 0000 0032             		bchg	#0,$32(a0)
00009B3E 6600                       		bne.s	loc_9654
00009B40 3628 0008                  		move.w	8(a0),d3
00009B44 0643 0010                  		addi.w	#$10,d3
00009B48 0828 0000 0022             		btst	#0,$22(a0)
00009B4E 6700                       		beq.s	loc_9640
00009B50 0443 0020                  		subi.w	#$20,d3
00009B54                            
00009B54                            loc_9640:
00009B54 4EB9 0000 0000             		jsr	ObjHitFloor2
00009B5A 0C41 FFF8                  		cmpi.w	#-8,d1
00009B5E 6D00                       		blt.s	loc_966E
00009B60 0C41 000C                  		cmpi.w	#$C,d1
00009B64 6C00                       		bge.s	loc_966E
00009B66 4E75                       		rts	
00009B68                            ; ===========================================================================
00009B68                            
00009B68                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009B68 4EB9 0000 0000             		jsr	ObjHitFloor
00009B6E D368 000C                  		add.w	d1,$C(a0)
00009B72 1143 0026                  		move.b	d3,$26(a0)
00009B76 6100 0000                  		bsr.w	Obj1F_SetAni
00009B7A 5600                       		addq.b	#3,d0
00009B7C 1140 001C                  		move.b	d0,$1C(a0)
00009B80 4E75                       		rts	
00009B82                            ; ===========================================================================
00009B82                            
00009B82                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009B82 5528 0025                  		subq.b	#2,$25(a0)
00009B86 317C 003B 0030             		move.w	#59,$30(a0)
00009B8C 317C 0000 0010             		move.w	#0,$10(a0)
00009B92 6100 0000                  		bsr.w	Obj1F_SetAni
00009B96 1140 001C                  		move.b	d0,$1C(a0)
00009B9A 4E75                       		rts	
00009B9C                            ; ---------------------------------------------------------------------------
00009B9C                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B9C                            ; ---------------------------------------------------------------------------
00009B9C                            
00009B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B9C                            
00009B9C                            
00009B9C                            Obj1F_SetAni:				; XREF: loc_966E
00009B9C 7000                       		moveq	#0,d0
00009B9E 1628 0026                  		move.b	$26(a0),d3
00009BA2 6B00                       		bmi.s	loc_96A4
00009BA4 0C03 0006                  		cmpi.b	#6,d3
00009BA8 6500                       		bcs.s	locret_96A2
00009BAA 7001                       		moveq	#1,d0
00009BAC 0828 0000 0022             		btst	#0,$22(a0)
00009BB2 6600                       		bne.s	locret_96A2
00009BB4 7002                       		moveq	#2,d0
00009BB6                            
00009BB6                            locret_96A2:
00009BB6 4E75                       		rts	
00009BB8                            ; ===========================================================================
00009BB8                            
00009BB8                            loc_96A4:				; XREF: Obj1F_SetAni
00009BB8 0C03 00FA                  		cmpi.b	#-6,d3
00009BBC 6200                       		bhi.s	locret_96B6
00009BBE 7002                       		moveq	#2,d0
00009BC0 0828 0000 0022             		btst	#0,$22(a0)
00009BC6 6600                       		bne.s	locret_96B6
00009BC8 7001                       		moveq	#1,d0
00009BCA                            
00009BCA                            locret_96B6:
00009BCA 4E75                       		rts	
00009BCC                            ; End of function Obj1F_SetAni
00009BCC                            
00009BCC                            ; ===========================================================================
00009BCC                            
00009BCC                            Obj1F_Delete:				; XREF: Obj1F_Index
00009BCC 6100 0000                  		bsr.w	DeleteObject
00009BD0 4E75                       		rts	
00009BD2                            ; ===========================================================================
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            ; Sub-object - missile that the	Crabmeat throws
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            
00009BD2                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009BD2 5428 0024                  		addq.b	#2,$24(a0)
00009BD6 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009BDE 317C 0400 0002             		move.w	#$400,2(a0)
00009BE4 117C 0004 0001             		move.b	#4,1(a0)
00009BEA 117C 0003 0018             		move.b	#3,$18(a0)
00009BF0 117C 0087 0020             		move.b	#$87,$20(a0)
00009BF6 117C 0008 0019             		move.b	#8,$19(a0)
00009BFC 317C FC00 0012             		move.w	#-$400,$12(a0)
00009C02 117C 0007 001C             		move.b	#7,$1C(a0)
00009C08                            
00009C08                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009C08 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C0E 6100 0000                  		bsr.w	AnimateSprite
00009C12 6100 0000                  		bsr.w	ObjectFall
00009C16 6100 0000                  		bsr.w	DisplaySprite
00009C1A 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009C1E 0640 00E0                  		addi.w	#$E0,d0
00009C22 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009C26 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009C28 4E75                       		rts	
00009C2A                            ; ===========================================================================
00009C2A                            
00009C2A                            Obj1F_Delete2:
00009C2A 6000 0000                  		bra.w	DeleteObject
00009C2E                            ; ===========================================================================
00009C2E                            Ani_obj1F:
00009C2E                            	include "_anim\obj1F.asm"
00009C2E                            ; ---------------------------------------------------------------------------
00009C2E                            ; Animation script - Crabmeat enemy
00009C2E                            ; ---------------------------------------------------------------------------
00009C2E 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009C34 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009C3A 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009C3E 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009C42 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009C46 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009C4A 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009C50 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009C56 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009C5C 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009C60 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009C64                            		even
00009C64                            		even
00009C64                            
00009C64                            ; ---------------------------------------------------------------------------
00009C64                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009C64                            ; ---------------------------------------------------------------------------
00009C64                            Map_obj1F:
00009C64                            	include "_maps\obj1F.asm"
00009C64                            Map_1514:
00009C64 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009C66 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009C68 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009C6A 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009C6C 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009C6E 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009C70 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009C72 03                         Map_1514_E: 	dc.b $3
00009C73 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C78 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C7D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C82 03                         Map_1514_1E: 	dc.b $3
00009C83 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C88 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C8D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C92 03                         Map_1514_2E: 	dc.b $3
00009C93 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C98 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C9D F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009CA2 03                         Map_1514_3E: 	dc.b $3
00009CA3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009CA8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009CAD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009CB2 03                         Map_1514_4E: 	dc.b $3
00009CB3 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009CB8 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009CBD F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009CC2 01                         Map_1514_5E: 	dc.b $1
00009CC3 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009CC8 01                         Map_1514_64: 	dc.b $1
00009CC9 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009CCE                            	even
00009CCE                            	even
00009CCE                            
00009CCE                            ; ===========================================================================
00009CCE                            ; ---------------------------------------------------------------------------
00009CCE                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009CCE                            ; ---------------------------------------------------------------------------
00009CCE                            
00009CCE                            Obj22:					; XREF: Obj_Index
00009CCE 7000                       		moveq	#0,d0
00009CD0 1028 0024                  		move.b	$24(a0),d0
00009CD4 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009CD8 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009CDC                            ; ===========================================================================
00009CDC 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009CDE 0000                       		dc.w Obj22_Action-Obj22_Index
00009CE0 0000                       		dc.w Obj22_Delete-Obj22_Index
00009CE2                            ; ===========================================================================
00009CE2                            
00009CE2                            Obj22_Main:				; XREF: Obj22_Index
00009CE2 5428 0024                  		addq.b	#2,$24(a0)
00009CE6 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009CEE 317C 0444 0002             		move.w	#$444,2(a0)
00009CF4 117C 0004 0001             		move.b	#4,1(a0)
00009CFA 117C 0003 0018             		move.b	#3,$18(a0)
00009D00 117C 0008 0020             		move.b	#8,$20(a0)
00009D06 117C 0018 0019             		move.b	#$18,$19(a0)
00009D0C                            
00009D0C                            Obj22_Action:				; XREF: Obj22_Index
00009D0C 7000                       		moveq	#0,d0
00009D0E 1028 0025                  		move.b	$25(a0),d0
00009D12 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009D16 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009D1A 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009D20 6100 0000                  		bsr.w	AnimateSprite
00009D24 6000 0000                  		bra.w	MarkObjGone
00009D28                            ; ===========================================================================
00009D28 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009D2A 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009D2C                            ; ===========================================================================
00009D2C                            
00009D2C                            Obj22_Move:				; XREF: Obj22_Index2
00009D2C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D30 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009D32 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009D38 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009D3A 5428 0025                  		addq.b	#2,$25(a0)
00009D3E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009D44 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009D4A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009D50 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D56 6600                       		bne.s	locret_986C	; if not, branch
00009D58 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009D5C                            
00009D5C                            locret_986C:
00009D5C 4E75                       		rts	
00009D5E                            ; ===========================================================================
00009D5E                            
00009D5E                            Obj22_Fire:				; XREF: Obj22_Move
00009D5E 6100 0000                  		bsr.w	SingleObjLoad
00009D62 6600                       		bne.s	locret_98D0
00009D64 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009D68 3368 0008 0008             		move.w	8(a0),8(a1)
00009D6E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D74 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009D7A 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009D80 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009D86 303C 0018                  		move.w	#$18,d0
00009D8A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D90 6600                       		bne.s	loc_98AA	; if not, branch
00009D92 4440                       		neg.w	d0
00009D94 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D98                            
00009D98                            loc_98AA:
00009D98 D169 0008                  		add.w	d0,8(a1)
00009D9C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009DA2 337C 000E 0032             		move.w	#$E,$32(a1)
00009DA8 2348 003C                  		move.l	a0,$3C(a1)
00009DAC 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009DB2 317C 003B 0032             		move.w	#$3B,$32(a0)
00009DB8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009DBE                            
00009DBE                            locret_98D0:
00009DBE 4E75                       		rts	
00009DC0                            ; ===========================================================================
00009DC0                            
00009DC0                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009DC0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009DC4 6B00                       		bmi.s	Obj22_ChgDir
00009DC6 6100 0000                  		bsr.w	SpeedToPos
00009DCA 4A28 0034                  		tst.b	$34(a0)
00009DCE 6600                       		bne.s	locret_992A
00009DD0 3038 D008                  		move.w	($FFFFD008).w,d0
00009DD4 9068 0008                  		sub.w	8(a0),d0
00009DD8 6A00                       		bpl.s	Obj22_SetNrSonic
00009DDA 4440                       		neg.w	d0
00009DDC                            
00009DDC                            Obj22_SetNrSonic:
00009DDC 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009DE0 6400                       		bcc.s	locret_992A	; if not, branch
00009DE2 4A28 0001                  		tst.b	1(a0)
00009DE6 6A00                       		bpl.s	locret_992A
00009DE8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009DEE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009DF4 6000                       		bra.s	Obj22_Stop
00009DF6                            ; ===========================================================================
00009DF6                            
00009DF6                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009DF6 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009DFC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009E02 317C 003B 0032             		move.w	#59,$32(a0)
00009E08                            
00009E08                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009E08 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009E0C 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009E12 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009E18                            
00009E18                            locret_992A:
00009E18 4E75                       		rts	
00009E1A                            ; ===========================================================================
00009E1A                            
00009E1A                            Obj22_Delete:				; XREF: Obj22_Index
00009E1A 6100 0000                  		bsr.w	DeleteObject
00009E1E 4E75                       		rts	
00009E20                            ; ===========================================================================
00009E20                            ; ---------------------------------------------------------------------------
00009E20                            ; Object 23 - missile that Buzz	Bomber throws
00009E20                            ; ---------------------------------------------------------------------------
00009E20                            
00009E20                            Obj23:					; XREF: Obj_Index
00009E20 7000                       		moveq	#0,d0
00009E22 1028 0024                  		move.b	$24(a0),d0
00009E26 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009E2A 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009E2E                            ; ===========================================================================
00009E2E 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009E30 0000                       		dc.w Obj23_Animate-Obj23_Index
00009E32 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009E34 0000                       		dc.w Obj23_Delete-Obj23_Index
00009E36 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009E38                            ; ===========================================================================
00009E38                            
00009E38                            Obj23_Main:				; XREF: Obj23_Index
00009E38 5368 0032                  		subq.w	#1,$32(a0)
00009E3C 6A00                       		bpl.s	Obj23_ChkCancel
00009E3E 5428 0024                  		addq.b	#2,$24(a0)
00009E42 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009E4A 317C 2444 0002             		move.w	#$2444,2(a0)
00009E50 117C 0004 0001             		move.b	#4,1(a0)
00009E56 117C 0003 0018             		move.b	#3,$18(a0)
00009E5C 117C 0008 0019             		move.b	#8,$19(a0)
00009E62 0228 0003 0022             		andi.b	#3,$22(a0)
00009E68 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009E6C 6700                       		beq.s	Obj23_Animate	; if not, branch
00009E6E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009E74 117C 0087 0020             		move.b	#$87,$20(a0)
00009E7A 117C 0001 001C             		move.b	#1,$1C(a0)
00009E80 6000                       		bra.s	Obj23_Animate2
00009E82                            ; ===========================================================================
00009E82                            
00009E82                            Obj23_Animate:				; XREF: Obj23_Index
00009E82 6100                       		bsr.s	Obj23_ChkCancel
00009E84 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E8A 6100 0000                  		bsr.w	AnimateSprite
00009E8E 6000 0000                  		bra.w	DisplaySprite
00009E92                            ; ---------------------------------------------------------------------------
00009E92                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E92                            ; destroyed, and if it has, then cancel	the missile
00009E92                            ; ---------------------------------------------------------------------------
00009E92                            
00009E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E92                            
00009E92                            
00009E92                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E92 2268 003C                  		movea.l	$3C(a0),a1
00009E96 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E9A 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E9C 4E75                       		rts	
00009E9E                            ; End of function Obj23_ChkCancel
00009E9E                            
00009E9E                            ; ===========================================================================
00009E9E                            
00009E9E                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E9E 0828 0007 0022             		btst	#7,$22(a0)
00009EA4 6600                       		bne.s	Obj23_Explode
00009EA6 117C 0087 0020             		move.b	#$87,$20(a0)
00009EAC 117C 0001 001C             		move.b	#1,$1C(a0)
00009EB2 6100 0000                  		bsr.w	SpeedToPos
00009EB6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009EBC 6100 0000                  		bsr.w	AnimateSprite
00009EC0 6100 0000                  		bsr.w	DisplaySprite
00009EC4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EC8 0640 00E0                  		addi.w	#$E0,d0
00009ECC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009ED0 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009ED2 4E75                       		rts	
00009ED4                            ; ===========================================================================
00009ED4                            
00009ED4                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009ED4 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009ED8 117C 0000 0024             		move.b	#0,$24(a0)
00009EDE 6000 F2DE                  		bra.w	Obj24
00009EE2                            ; ===========================================================================
00009EE2                            
00009EE2                            Obj23_Delete:				; XREF: Obj23_Index
00009EE2 6100 0000                  		bsr.w	DeleteObject
00009EE6 4E75                       		rts	
00009EE8                            ; ===========================================================================
00009EE8                            
00009EE8                            Obj23_FromNewt:				; XREF: Obj23_Index
00009EE8 4A28 0001                  		tst.b	1(a0)
00009EEC 6AF4                       		bpl.s	Obj23_Delete
00009EEE 6100 0000                  		bsr.w	SpeedToPos
00009EF2                            
00009EF2                            Obj23_Animate2:				; XREF: Obj23_Main
00009EF2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009EF8 6100 0000                  		bsr.w	AnimateSprite
00009EFC 6100 0000                  		bsr.w	DisplaySprite
00009F00 4E75                       		rts	
00009F02                            ; ===========================================================================
00009F02                            Ani_obj22:
00009F02                            	include "_anim\obj22.asm"
00009F02                            ; ---------------------------------------------------------------------------
00009F02                            ; Animation script - Buzz Bomber enemy
00009F02                            ; ---------------------------------------------------------------------------
00009F02 0000                       		dc.w byte_9A1E-Ani_obj22
00009F04 0000                       		dc.w byte_9A22-Ani_obj22
00009F06 0000                       		dc.w byte_9A26-Ani_obj22
00009F08 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009F0C 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009F10 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009F14                            		even
00009F14                            		even
00009F14                            
00009F14                            Ani_obj23:
00009F14                            	include "_anim\obj23.asm"
00009F14                            ; ---------------------------------------------------------------------------
00009F14                            ; Animation script - missile that Buzz Bomber throws
00009F14                            ; ---------------------------------------------------------------------------
00009F14 0000                       		dc.w byte_9A2E-Ani_obj23
00009F16 0000                       		dc.w byte_9A32-Ani_obj23
00009F18 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009F1C 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009F20                            		even
00009F20                            		even
00009F20                            
00009F20                            ; ---------------------------------------------------------------------------
00009F20                            ; Sprite mappings - Buzz Bomber	enemy
00009F20                            ; ---------------------------------------------------------------------------
00009F20                            Map_obj22:
00009F20                            	include "_maps\obj22.asm"
00009F20                            Map_e97a:
00009F20 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009F22 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009F24 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009F26 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009F28 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009F2A 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009F2C 06                         Map_e97a_C: 	dc.b $6
00009F2D F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F32 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F37 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F3C 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F41 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F46 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F4B 06                         Map_e97a_2B: 	dc.b $6
00009F4C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F51 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F56 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F5B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F60 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F65 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F6A 07                         Map_e97a_4A: 	dc.b $7
00009F6B 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009F70 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F75 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F7A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F7F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F84 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F89 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F8E 07                         Map_e97a_6E: 	dc.b $7
00009F8F 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F94 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F99 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F9E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009FA3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009FA8 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009FAD F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009FB2 06                         Map_e97a_92: 	dc.b $6
00009FB3 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009FB8 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009FBD 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009FC2 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009FC7 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009FCC F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009FD1 04                         Map_e97a_B1: 	dc.b $4
00009FD2 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009FD7 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009FDC 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009FE1 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009FE6                            	even
00009FE6                            	even
00009FE6                            
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            ; Sprite mappings - missile that Buzz Bomber throws
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            Map_obj23:
00009FE6                            	include "_maps\obj23.asm"
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6                            ; Sprite mappings - missile that Buzz Bomber throws
00009FE6                            ; ---------------------------------------------------------------------------
00009FE6 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009FEA 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009FEE 01                         byte_9B0E:	dc.b 1
00009FEF F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009FF4 01                         byte_9B14:	dc.b 1
00009FF5 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009FFA 01                         byte_9B1A:	dc.b 1
00009FFB F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A000 01                         byte_9B20:	dc.b 1
0000A001 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A006                            		even
0000A006                            		even
0000A006                            
0000A006                            ; ===========================================================================
0000A006                            ; ---------------------------------------------------------------------------
0000A006                            ; Object 25 - rings
0000A006                            ; ---------------------------------------------------------------------------
0000A006                            
0000A006                            Obj25:					; XREF: Obj_Index
0000A006 7000                       		moveq	#0,d0
0000A008 1028 0024                  		move.b	$24(a0),d0
0000A00C 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A010 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A014                            ; ===========================================================================
0000A014 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A016 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A018 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A01A 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A01C 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A01E                            ; ---------------------------------------------------------------------------
0000A01E                            ; Distances between rings (format: horizontal, vertical)
0000A01E                            ; ---------------------------------------------------------------------------
0000A01E 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A020 1800                       		dc.b $18, 0		; horizontal normal
0000A022 2000                       		dc.b $20, 0		; horizontal wide
0000A024 0010                       		dc.b 0,	$10		; vertical tight
0000A026 0018                       		dc.b 0,	$18		; vertical normal
0000A028 0020                       		dc.b 0,	$20		; vertical wide
0000A02A 1010                       		dc.b $10, $10		; diagonal
0000A02C 1818                       		dc.b $18, $18
0000A02E 2020                       		dc.b $20, $20
0000A030 F010                       		dc.b $F0, $10
0000A032 E818                       		dc.b $E8, $18
0000A034 E020                       		dc.b $E0, $20
0000A036 1008                       		dc.b $10, 8
0000A038 1810                       		dc.b $18, $10
0000A03A F008                       		dc.b $F0, 8
0000A03C E810                       		dc.b $E8, $10
0000A03E                            ; ===========================================================================
0000A03E                            
0000A03E                            Obj25_Main:				; XREF: Obj25_Index
0000A03E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A042 7000                       		moveq	#0,d0
0000A044 1028 0023                  		move.b	$23(a0),d0
0000A048 45F2 0002                  		lea	2(a2,d0.w),a2
0000A04C 1812                       		move.b	(a2),d4
0000A04E 1228 0028                  		move.b	$28(a0),d1
0000A052 1001                       		move.b	d1,d0
0000A054 0241 0007                  		andi.w	#7,d1
0000A058 0C41 0007                  		cmpi.w	#7,d1
0000A05C 6600                       		bne.s	loc_9B80
0000A05E 7206                       		moveq	#6,d1
0000A060                            
0000A060                            loc_9B80:
0000A060 4841                       		swap	d1
0000A062 323C 0000                  		move.w	#0,d1
0000A066 E808                       		lsr.b	#4,d0
0000A068 D040                       		add.w	d0,d0
0000A06A 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A06E 4885                       		ext.w	d5
0000A070 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A074 4886                       		ext.w	d6
0000A076 2248                       		movea.l	a0,a1
0000A078 3428 0008                  		move.w	8(a0),d2
0000A07C 3628 000C                  		move.w	$C(a0),d3
0000A080 E20C                       		lsr.b	#1,d4
0000A082 6500                       		bcs.s	loc_9C02
0000A084 0892 0007                  		bclr	#7,(a2)
0000A088 6000                       		bra.s	loc_9BBA
0000A08A                            ; ===========================================================================
0000A08A                            
0000A08A                            Obj25_MakeRings:
0000A08A 4841                       		swap	d1
0000A08C E20C                       		lsr.b	#1,d4
0000A08E 6500                       		bcs.s	loc_9C02
0000A090 0892 0007                  		bclr	#7,(a2)
0000A094 6100 0000                  		bsr.w	SingleObjLoad
0000A098 6600                       		bne.s	loc_9C0E
0000A09A                            
0000A09A                            loc_9BBA:				; XREF: Obj25_Main
0000A09A 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A09E 5429 0024                  		addq.b	#2,$24(a1)
0000A0A2 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A0A6 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A0AC 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A0B0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A0B8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A0BE 137C 0004 0001             		move.b	#4,1(a1)
0000A0C4 137C 0002 0018             		move.b	#2,$18(a1)
0000A0CA 137C 0047 0020             		move.b	#$47,$20(a1)
0000A0D0 137C 0008 0019             		move.b	#8,$19(a1)
0000A0D6 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A0DC 1341 0034                  		move.b	d1,$34(a1)
0000A0E0                            
0000A0E0                            loc_9C02:
0000A0E0 5241                       		addq.w	#1,d1
0000A0E2 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A0E4 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A0E6 4841                       		swap	d1
0000A0E8 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A0EC                            
0000A0EC                            loc_9C0E:
0000A0EC 0812 0000                  		btst	#0,(a2)
0000A0F0 6600 0000                  		bne.w	DeleteObject
0000A0F4                            
0000A0F4                            Obj25_Animate:				; XREF: Obj25_Index
0000A0F4 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A0FA 6100 0000                  		bsr.w	DisplaySprite
0000A0FE 3028 0032                  		move.w	$32(a0),d0
0000A102 0240 FF80                  		andi.w	#$FF80,d0
0000A106 3238 F700                  		move.w	($FFFFF700).w,d1
0000A10A 0441 0080                  		subi.w	#$80,d1
0000A10E 0241 FF80                  		andi.w	#$FF80,d1
0000A112 9041                       		sub.w	d1,d0
0000A114 0C40 0280                  		cmpi.w	#$280,d0
0000A118 6200                       		bhi.s	Obj25_Delete
0000A11A 4E75                       		rts	
0000A11C                            ; ===========================================================================
0000A11C                            
0000A11C                            Obj25_Collect:				; XREF: Obj25_Index
0000A11C 5428 0024                  		addq.b	#2,$24(a0)
0000A120 117C 0000 0020             		move.b	#0,$20(a0)
0000A126 117C 0001 0018             		move.b	#1,$18(a0)
0000A12C 6100 0000                  		bsr.w	CollectRing
0000A130 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A134 7000                       		moveq	#0,d0
0000A136 1028 0023                  		move.b	$23(a0),d0
0000A13A 1228 0034                  		move.b	$34(a0),d1
0000A13E 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A142                            
0000A142                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A142 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A148 6100 0000                  		bsr.w	AnimateSprite
0000A14C 6000 0000                  		bra.w	DisplaySprite
0000A150                            ; ===========================================================================
0000A150                            
0000A150                            Obj25_Delete:				; XREF: Obj25_Index
0000A150 6000 0000                  		bra.w	DeleteObject
0000A154                            
0000A154                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A154                            
0000A154                            
0000A154                            CollectRing:				; XREF: Obj25_Collect
0000A154 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A158 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A15E 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A162 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A168 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A16A 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A170 6700                       		beq.s	loc_9CA4
0000A172 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A178 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A17A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A180 6600                       		bne.s	Obj25_PlaySnd
0000A182                            
0000A182                            loc_9CA4:
0000A182 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A186 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A18A 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A18E                            
0000A18E                            Obj25_PlaySnd:
0000A18E 4EF9 0000 15C6             		jmp	(PlaySound_Special).l
0000A194                            ; End of function CollectRing
0000A194                            
0000A194                            ; ===========================================================================
0000A194                            ; ---------------------------------------------------------------------------
0000A194                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A194                            ; ---------------------------------------------------------------------------
0000A194                            
0000A194                            Obj37:					; XREF: Obj_Index
0000A194 7000                       		moveq	#0,d0
0000A196 1028 0024                  		move.b	$24(a0),d0
0000A19A 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A19E 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A1A2                            ; ===========================================================================
0000A1A2 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A1A4 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A1A6 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A1A8 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A1AA 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A1AC                            ; ===========================================================================
0000A1AC                            
0000A1AC                            Obj37_CountRings:			; XREF: Obj37_Index
0000A1AC 2248                       		movea.l	a0,a1
0000A1AE 7A00                       		moveq	#0,d5
0000A1B0 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A1B4 7020                       		moveq	#32,d0
0000A1B6 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A1B8 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A1BA 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A1BC                            
0000A1BC                            loc_9CDE:
0000A1BC 5345                       		subq.w	#1,d5
0000A1BE 383C 0288                  		move.w	#$288,d4
0000A1C2 6000                       		bra.s	Obj37_MakeRings
0000A1C4                            ; ===========================================================================
0000A1C4                            
0000A1C4                            Obj37_Loop:
0000A1C4 6100 0000                  		bsr.w	SingleObjLoad
0000A1C8 6600 0000                  		bne.w	Obj37_ResetCounter
0000A1CC                            
0000A1CC                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A1CC 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A1D0 5429 0024                  		addq.b	#2,$24(a1)
0000A1D4 137C 0008 0016             		move.b	#8,$16(a1)
0000A1DA 137C 0008 0017             		move.b	#8,$17(a1)
0000A1E0 3368 0008 0008             		move.w	8(a0),8(a1)
0000A1E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A1EC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A1F4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A1FA 137C 0004 0001             		move.b	#4,1(a1)
0000A200 137C 0003 0018             		move.b	#3,$18(a1)
0000A206 137C 0047 0020             		move.b	#$47,$20(a1)
0000A20C 137C 0008 0019             		move.b	#8,$19(a1)
0000A212 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A218 4A44                       		tst.w	d4
0000A21A 6B00                       		bmi.s	loc_9D62
0000A21C 3004                       		move.w	d4,d0
0000A21E 6100 8A4A                  		bsr.w	CalcSine
0000A222 3404                       		move.w	d4,d2
0000A224 E04A                       		lsr.w	#8,d2
0000A226 E560                       		asl.w	d2,d0
0000A228 E561                       		asl.w	d2,d1
0000A22A 3400                       		move.w	d0,d2
0000A22C 3601                       		move.w	d1,d3
0000A22E 0604 0010                  		addi.b	#$10,d4
0000A232 6400                       		bcc.s	loc_9D62
0000A234 0444 0080                  		subi.w	#$80,d4
0000A238 6400                       		bcc.s	loc_9D62
0000A23A 383C 0288                  		move.w	#$288,d4
0000A23E                            
0000A23E                            loc_9D62:
0000A23E 3342 0010                  		move.w	d2,$10(a1)
0000A242 3343 0012                  		move.w	d3,$12(a1)
0000A246 4442                       		neg.w	d2
0000A248 4444                       		neg.w	d4
0000A24A 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A24E                            
0000A24E                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A24E 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A254 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A25A 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A260 303C 00C6                  		move.w	#$C6,d0
0000A264 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A26A                            
0000A26A                            Obj37_Bounce:				; XREF: Obj37_Index
0000A26A 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A270 6100 0000                  		bsr.w	SpeedToPos
0000A274 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A27A 6B00                       		bmi.s	Obj37_ChkDel
0000A27C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A280 D007                       		add.b	d7,d0
0000A282 0200 0003                  		andi.b	#3,d0
0000A286 6600                       		bne.s	Obj37_ChkDel
0000A288 4EB9 0000 0000             		jsr	ObjHitFloor
0000A28E 4A41                       		tst.w	d1
0000A290 6A00                       		bpl.s	Obj37_ChkDel
0000A292 D368 000C                  		add.w	d1,$C(a0)
0000A296 3028 0012                  		move.w	$12(a0),d0
0000A29A E440                       		asr.w	#2,d0
0000A29C 9168 0012                  		sub.w	d0,$12(a0)
0000A2A0 4468 0012                  		neg.w	$12(a0)
0000A2A4                            
0000A2A4                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A2A4 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A2A8 6700                       		beq.s	Obj37_Delete
0000A2AA 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A2AE 0640 00E0                  		addi.w	#$E0,d0
0000A2B2 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A2B6 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A2B8 6000 0000                  		bra.w	DisplaySprite
0000A2BC                            ; ===========================================================================
0000A2BC                            
0000A2BC                            Obj37_Collect:				; XREF: Obj37_Index
0000A2BC 5428 0024                  		addq.b	#2,$24(a0)
0000A2C0 117C 0000 0020             		move.b	#0,$20(a0)
0000A2C6 117C 0001 0018             		move.b	#1,$18(a0)
0000A2CC 6100 FE86                  		bsr.w	CollectRing
0000A2D0                            
0000A2D0                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A2D0 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A2D6 6100 0000                  		bsr.w	AnimateSprite
0000A2DA 6000 0000                  		bra.w	DisplaySprite
0000A2DE                            ; ===========================================================================
0000A2DE                            
0000A2DE                            Obj37_Delete:				; XREF: Obj37_Index
0000A2DE 6000 0000                  		bra.w	DeleteObject
0000A2E2                            ; ===========================================================================
0000A2E2                            ; ---------------------------------------------------------------------------
0000A2E2                            ; Object 4B - giant ring for entry to special stage
0000A2E2                            ; ---------------------------------------------------------------------------
0000A2E2                            
0000A2E2                            Obj4B:					; XREF: Obj_Index
0000A2E2 7000                       		moveq	#0,d0
0000A2E4 1028 0024                  		move.b	$24(a0),d0
0000A2E8 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A2EC 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A2F0                            ; ===========================================================================
0000A2F0 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A2F2 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A2F4 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A2F6 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A2F8                            ; ===========================================================================
0000A2F8                            
0000A2F8                            Obj4B_Main:				; XREF: Obj4B_Index
0000A2F8 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A300 317C 2400 0002             		move.w	#$2400,2(a0)
0000A306 0028 0004 0001             		ori.b	#4,1(a0)
0000A30C 117C 0040 0019             		move.b	#$40,$19(a0)
0000A312 4A28 0001                  		tst.b	1(a0)
0000A316 6A00                       		bpl.s	Obj4B_Animate
0000A318 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A31E 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A322 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A328 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A32A 4E75                       		rts	
0000A32C                            ; ===========================================================================
0000A32C                            
0000A32C                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A32C 5428 0024                  		addq.b	#2,$24(a0)
0000A330 117C 0002 0018             		move.b	#2,$18(a0)
0000A336 117C 0052 0020             		move.b	#$52,$20(a0)
0000A33C 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A342                            
0000A342                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A342 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A348 3028 0008                  		move.w	8(a0),d0
0000A34C 0240 FF80                  		andi.w	#$FF80,d0
0000A350 3238 F700                  		move.w	($FFFFF700).w,d1
0000A354 0441 0080                  		subi.w	#$80,d1
0000A358 0241 FF80                  		andi.w	#$FF80,d1
0000A35C 9041                       		sub.w	d1,d0
0000A35E 0C40 0280                  		cmpi.w	#$280,d0
0000A362 6200 0000                  		bhi.w	DeleteObject
0000A366 6000 0000                  		bra.w	DisplaySprite
0000A36A                            ; ===========================================================================
0000A36A                            
0000A36A                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A36A 5528 0024                  		subq.b	#2,$24(a0)
0000A36E 117C 0000 0020             		move.b	#0,$20(a0)
0000A374 6100 0000                  		bsr.w	SingleObjLoad
0000A378 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A37C 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A380 3368 0008 0008             		move.w	8(a0),8(a1)
0000A386 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A38C 2348 003C                  		move.l	a0,$3C(a1)
0000A390 3038 D008                  		move.w	($FFFFD008).w,d0
0000A394 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A398 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A39A 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A3A0                            
0000A3A0                            Obj4B_PlaySnd:
0000A3A0 303C 00C3                  		move.w	#$C3,d0
0000A3A4 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A3AA 6096                       		bra.s	Obj4B_Animate
0000A3AC                            ; ===========================================================================
0000A3AC                            
0000A3AC                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A3AC 6000 0000                  		bra.w	DeleteObject
0000A3B0                            ; ===========================================================================
0000A3B0                            ; ---------------------------------------------------------------------------
0000A3B0                            ; Object 7C - flash effect when	you collect the	giant ring
0000A3B0                            ; ---------------------------------------------------------------------------
0000A3B0                            
0000A3B0                            Obj7C:					; XREF: Obj_Index
0000A3B0 7000                       		moveq	#0,d0
0000A3B2 1028 0024                  		move.b	$24(a0),d0
0000A3B6 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A3BA 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A3BE                            ; ===========================================================================
0000A3BE 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A3C0 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A3C2 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A3C4                            ; ===========================================================================
0000A3C4                            
0000A3C4                            Obj7C_Main:				; XREF: Obj7C_Index
0000A3C4 5428 0024                  		addq.b	#2,$24(a0)
0000A3C8 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A3D0 317C 2462 0002             		move.w	#$2462,2(a0)
0000A3D6 0028 0004 0001             		ori.b	#4,1(a0)
0000A3DC 117C 0000 0018             		move.b	#0,$18(a0)
0000A3E2 117C 0020 0019             		move.b	#$20,$19(a0)
0000A3E8 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A3EE                            
0000A3EE                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A3EE 6100                       		bsr.s	Obj7C_Collect
0000A3F0 3028 0008                  		move.w	8(a0),d0
0000A3F4 0240 FF80                  		andi.w	#$FF80,d0
0000A3F8 3238 F700                  		move.w	($FFFFF700).w,d1
0000A3FC 0441 0080                  		subi.w	#$80,d1
0000A400 0241 FF80                  		andi.w	#$FF80,d1
0000A404 9041                       		sub.w	d1,d0
0000A406 0C40 0280                  		cmpi.w	#$280,d0
0000A40A 6200 0000                  		bhi.w	DeleteObject
0000A40E 6000 0000                  		bra.w	DisplaySprite
0000A412                            
0000A412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A412                            
0000A412                            
0000A412                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A412 5328 001E                  		subq.b	#1,$1E(a0)
0000A416 6A00                       		bpl.s	locret_9F76
0000A418 117C 0001 001E             		move.b	#1,$1E(a0)
0000A41E 5228 001A                  		addq.b	#1,$1A(a0)
0000A422 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A428 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A42A 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A430 6600                       		bne.s	locret_9F76	; if not, branch
0000A432 2268 003C                  		movea.l	$3C(a0),a1
0000A436 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A43C 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A442 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A448 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A44C 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A450                            
0000A450                            locret_9F76:
0000A450 4E75                       		rts	
0000A452                            ; ===========================================================================
0000A452                            
0000A452                            Obj7C_End:				; XREF: Obj7C_Collect
0000A452 5428 0024                  		addq.b	#2,$24(a0)
0000A456 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A45C 588F                       		addq.l	#4,sp
0000A45E 4E75                       		rts	
0000A460                            ; End of function Obj7C_Collect
0000A460                            
0000A460                            ; ===========================================================================
0000A460                            
0000A460                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A460 6000 0000                  		bra.w	DeleteObject
0000A464                            ; ===========================================================================
0000A464                            Ani_obj25:
0000A464                            	include "_anim\obj25.asm"
0000A464                            ; ---------------------------------------------------------------------------
0000A464                            ; Animation script - ring
0000A464                            ; ---------------------------------------------------------------------------
0000A464 0000                       		dc.w byte_9F8C-Ani_obj25
0000A466 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A46C                            		even
0000A46C                            		even
0000A46C                            
0000A46C                            ; ---------------------------------------------------------------------------
0000A46C                            ; Sprite mappings - rings
0000A46C                            ; ---------------------------------------------------------------------------
0000A46C                            Map_obj25:
0000A46C                            	include "_maps\obj25.asm"
0000A46C                            ; ---------------------------------------------------------------------------
0000A46C                            ; Sprite mappings - rings
0000A46C                            ; ---------------------------------------------------------------------------
0000A46C 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A470 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A474 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A478 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A47C 01                         byte_9FA2:	dc.b 1
0000A47D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A482 01                         byte_9FA8:	dc.b 1
0000A483 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A488 01                         byte_9FAE:	dc.b 1
0000A489 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A48E 01                         byte_9FB4:	dc.b 1
0000A48F F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A494 01                         byte_9FBA:	dc.b 1
0000A495 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A49A 01                         byte_9FC0:	dc.b 1
0000A49B F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A4A0 01                         byte_9FC6:	dc.b 1
0000A4A1 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A4A6 01                         byte_9FCC:	dc.b 1
0000A4A7 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A4AC                            		even
0000A4AC                            		even
0000A4AC                            
0000A4AC                            ; ---------------------------------------------------------------------------
0000A4AC                            ; Sprite mappings - giant ring
0000A4AC                            ; ---------------------------------------------------------------------------
0000A4AC                            Map_obj4B:
0000A4AC                            	include "_maps\obj4B.asm"
0000A4AC                            ; ---------------------------------------------------------------------------
0000A4AC                            ; Sprite mappings - giant ring
0000A4AC                            ; ---------------------------------------------------------------------------
0000A4AC 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A4B0 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A4B4 0A                         byte_9FDA:	dc.b $A
0000A4B5 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A4BA E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A4BF E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A4C4 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A4C9 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A4CE F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A4D3 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A4D8 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A4DD 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A4E2 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A4E7 08                         byte_A00D:	dc.b 8
0000A4E8 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A4ED E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A4F2 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A4F7 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A4FC F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A501 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A506 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A50B 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A510 04                         byte_A036:	dc.b 4
0000A511 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A516 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A51B 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A520 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A525 08                         byte_A04B:	dc.b 8
0000A526 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A52B E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A530 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A535 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A53A F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A53F 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A544 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A549 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A54E                            		even
0000A54E                            		even
0000A54E                            
0000A54E                            ; ---------------------------------------------------------------------------
0000A54E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A54E                            ; ---------------------------------------------------------------------------
0000A54E                            Map_obj7C:
0000A54E                            	include "_maps\obj7C.asm"
0000A54E                            ; ---------------------------------------------------------------------------
0000A54E                            ; Sprite mappings - flash effect when you collect the giant ring
0000A54E                            ; ---------------------------------------------------------------------------
0000A54E 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A552 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A556 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A55A 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A55E 02                         byte_A084:	dc.b 2
0000A55F E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A564 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A569 04                         byte_A08F:	dc.b 4
0000A56A E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A56F E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A574 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A579 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A57E 04                         byte_A0A4:	dc.b 4
0000A57F E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A584 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A589 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A58E 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A593 04                         byte_A0B9:	dc.b 4
0000A594 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A599 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A59E 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A5A3 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A5A8 04                         byte_A0CE:	dc.b 4
0000A5A9 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A5AE E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A5B3 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A5B8 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A5BD 04                         byte_A0E3:	dc.b 4
0000A5BE E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A5C3 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A5C8 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A5CD 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A5D2 02                         byte_A0F8:	dc.b 2
0000A5D3 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A5D8 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A5DD 04                         byte_A103:	dc.b 4
0000A5DE E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A5E3 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A5E8 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A5ED 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A5F2                            		even
0000A5F2                            		even
0000A5F2                            
0000A5F2                            ; ===========================================================================
0000A5F2                            ; ---------------------------------------------------------------------------
0000A5F2                            ; Object 26 - monitors
0000A5F2                            ; ---------------------------------------------------------------------------
0000A5F2                            
0000A5F2                            Obj26:					; XREF: Obj_Index
0000A5F2 7000                       		moveq	#0,d0
0000A5F4 1028 0024                  		move.b	$24(a0),d0
0000A5F8 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A5FC 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A600                            ; ===========================================================================
0000A600 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A602 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A604 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A606 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A608 0000                       		dc.w Obj26_Display-Obj26_Index
0000A60A                            ; ===========================================================================
0000A60A                            
0000A60A                            Obj26_Main:				; XREF: Obj26_Index
0000A60A 5428 0024                  		addq.b	#2,$24(a0)
0000A60E 117C 000E 0016             		move.b	#$E,$16(a0)
0000A614 117C 000E 0017             		move.b	#$E,$17(a0)
0000A61A 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A622 317C 0680 0002             		move.w	#$680,2(a0)
0000A628 117C 0004 0001             		move.b	#4,1(a0)
0000A62E 117C 0003 0018             		move.b	#3,$18(a0)
0000A634 117C 000F 0019             		move.b	#$F,$19(a0)
0000A63A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A63E 7000                       		moveq	#0,d0
0000A640 1028 0023                  		move.b	$23(a0),d0
0000A644 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A64A 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A650 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A652 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A658 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A65E 4E75                       		rts	
0000A660                            ; ===========================================================================
0000A660                            
0000A660                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A660 117C 0046 0020             		move.b	#$46,$20(a0)
0000A666 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A66C                            
0000A66C                            Obj26_Solid:				; XREF: Obj26_Index
0000A66C 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A670 6700                       		beq.s	loc_A1EC	; if not, branch
0000A672 5500                       		subq.b	#2,d0
0000A674 6600                       		bne.s	Obj26_Fall
0000A676 7200                       		moveq	#0,d1
0000A678 1228 0019                  		move.b	$19(a0),d1
0000A67C 0641 000B                  		addi.w	#$B,d1
0000A680 6100 D41C                  		bsr.w	ExitPlatform
0000A684 0829 0003 0022             		btst	#3,$22(a1)
0000A68A 6600 0000                  		bne.w	loc_A1BC
0000A68E 4228 0025                  		clr.b	$25(a0)
0000A692 6000 0000                  		bra.w	Obj26_Animate
0000A696                            ; ===========================================================================
0000A696                            
0000A696                            loc_A1BC:				; XREF: Obj26_Solid
0000A696 363C 0010                  		move.w	#$10,d3
0000A69A 3428 0008                  		move.w	8(a0),d2
0000A69E 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A6A2 6000 0000                  		bra.w	Obj26_Animate
0000A6A6                            ; ===========================================================================
0000A6A6                            
0000A6A6                            Obj26_Fall:				; XREF: Obj26_Solid
0000A6A6 6100 0000                  		bsr.w	ObjectFall
0000A6AA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A6B0 4A41                       		tst.w	d1
0000A6B2 6A00 0000                  		bpl.w	Obj26_Animate
0000A6B6 D368 000C                  		add.w	d1,$C(a0)
0000A6BA 4268 0012                  		clr.w	$12(a0)
0000A6BE 4228 0025                  		clr.b	$25(a0)
0000A6C2 6000 0000                  		bra.w	Obj26_Animate
0000A6C6                            ; ===========================================================================
0000A6C6                            
0000A6C6                            loc_A1EC:				; XREF: Obj26_Solid
0000A6C6 323C 001A                  		move.w	#$1A,d1
0000A6CA 343C 000F                  		move.w	#$F,d2
0000A6CE 6100 0000                  		bsr.w	Obj26_SolidSides
0000A6D2 6700 0000                  		beq.w	loc_A25C
0000A6D6 4A69 0012                  		tst.w	$12(a1)
0000A6DA 6B00                       		bmi.s	loc_A20A
0000A6DC 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A6E2 6700                       		beq.s	loc_A25C	; if yes, branch
0000A6E4                            
0000A6E4                            loc_A20A:
0000A6E4 4A41                       		tst.w	d1
0000A6E6 6A00                       		bpl.s	loc_A220
0000A6E8 9769 000C                  		sub.w	d3,$C(a1)
0000A6EC 6100 D29E                  		bsr.w	loc_74AE
0000A6F0 117C 0002 0025             		move.b	#2,$25(a0)
0000A6F6 6000 0000                  		bra.w	Obj26_Animate
0000A6FA                            ; ===========================================================================
0000A6FA                            
0000A6FA                            loc_A220:
0000A6FA 4A40                       		tst.w	d0
0000A6FC 6700 0000                  		beq.w	loc_A246
0000A700 6B00                       		bmi.s	loc_A230
0000A702 4A69 0010                  		tst.w	$10(a1)
0000A706 6B00                       		bmi.s	loc_A246
0000A708 6000                       		bra.s	loc_A236
0000A70A                            ; ===========================================================================
0000A70A                            
0000A70A                            loc_A230:
0000A70A 4A69 0010                  		tst.w	$10(a1)
0000A70E 6A00                       		bpl.s	loc_A246
0000A710                            
0000A710                            loc_A236:
0000A710 9169 0008                  		sub.w	d0,8(a1)
0000A714 337C 0000 0014             		move.w	#0,$14(a1)
0000A71A 337C 0000 0010             		move.w	#0,$10(a1)
0000A720                            
0000A720                            loc_A246:
0000A720 0829 0001 0022             		btst	#1,$22(a1)
0000A726 6600                       		bne.s	loc_A26A
0000A728 08E9 0005 0022             		bset	#5,$22(a1)
0000A72E 08E8 0005 0022             		bset	#5,$22(a0)
0000A734 6000                       		bra.s	Obj26_Animate
0000A736                            ; ===========================================================================
0000A736                            
0000A736                            loc_A25C:
0000A736 0828 0005 0022             		btst	#5,$22(a0)
0000A73C 6700                       		beq.s	Obj26_Animate
0000A73E 337C 0001 001C             		move.w	#1,$1C(a1)
0000A744                            
0000A744                            loc_A26A:
0000A744 08A8 0005 0022             		bclr	#5,$22(a0)
0000A74A 08A9 0005 0022             		bclr	#5,$22(a1)
0000A750                            
0000A750                            Obj26_Animate:				; XREF: Obj26_Index
0000A750 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A756 6100 0000                  		bsr.w	AnimateSprite
0000A75A                            
0000A75A                            Obj26_Display:				; XREF: Obj26_Index
0000A75A 6100 0000                  		bsr.w	DisplaySprite
0000A75E 3028 0008                  		move.w	8(a0),d0
0000A762 0240 FF80                  		andi.w	#$FF80,d0
0000A766 3238 F700                  		move.w	($FFFFF700).w,d1
0000A76A 0441 0080                  		subi.w	#$80,d1
0000A76E 0241 FF80                  		andi.w	#$FF80,d1
0000A772 9041                       		sub.w	d1,d0
0000A774 0C40 0280                  		cmpi.w	#$280,d0
0000A778 6200 0000                  		bhi.w	DeleteObject
0000A77C 4E75                       		rts	
0000A77E                            ; ===========================================================================
0000A77E                            
0000A77E                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A77E 5428 0024                  		addq.b	#2,$24(a0)
0000A782 117C 0000 0020             		move.b	#0,$20(a0)
0000A788 6100 0000                  		bsr.w	SingleObjLoad
0000A78C 6600                       		bne.s	Obj26_Explode
0000A78E 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A792 3368 0008 0008             		move.w	8(a0),8(a1)
0000A798 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A79E 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A7A4 7400                       		moveq	#0,d2	; GMZ
0000A7A6 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A7A8                            
0000A7A8                            Obj26_Explode:
0000A7A8 6100 0000                  		bsr.w	SingleObjLoad
0000A7AC 6600                       		bne.s	Obj26_SetBroken
0000A7AE 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A7B2 5429 0024                  		addq.b	#2,$24(a1)
0000A7B6 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A7BA 3368 0008 0008             		move.w	8(a0),8(a1)
0000A7C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A7C6                            
0000A7C6                            Obj26_NextExplosion:
0000A7C6 5802                       		addq.b	#4,d2
0000A7C8 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A7CC                            
0000A7CC                            Obj26_SetBroken:
0000A7CC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A7D0 7000                       		moveq	#0,d0
0000A7D2 1028 0023                  		move.b	$23(a0),d0
0000A7D6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A7DC 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A7E2 6000 0000                  		bra.w	DisplaySprite
0000A7E6                            ; ===========================================================================
0000A7E6                            ; ---------------------------------------------------------------------------
0000A7E6                            ; Object 2E - contents of monitors
0000A7E6                            ; ---------------------------------------------------------------------------
0000A7E6                            
0000A7E6                            Obj2E:					; XREF: Obj_Index
0000A7E6 7000                       		moveq	#0,d0
0000A7E8 1028 0024                  		move.b	$24(a0),d0
0000A7EC 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A7F0 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A7F4 6000 0000                  		bra.w	DisplaySprite
0000A7F8                            ; ===========================================================================
0000A7F8 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A7FA 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A7FC 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A7FE                            ; ===========================================================================
0000A7FE                            
0000A7FE                            Obj2E_Main:				; XREF: Obj2E_Index
0000A7FE 5428 0024                  		addq.b	#2,$24(a0)
0000A802 317C 0680 0002             		move.w	#$680,2(a0)
0000A808 117C 0024 0001             		move.b	#$24,1(a0)
0000A80E 117C 0003 0018             		move.b	#3,$18(a0)
0000A814 117C 0008 0019             		move.b	#8,$19(a0)
0000A81A 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A820 7000                       		moveq	#0,d0
0000A822 1028 001C                  		move.b	$1C(a0),d0
0000A826 5400                       		addq.b	#2,d0
0000A828 1140 001A                  		move.b	d0,$1A(a0)
0000A82C 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A832 D000                       		add.b	d0,d0
0000A834 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A838 5249                       		addq.w	#1,a1
0000A83A 2149 0004                  		move.l	a1,4(a0)
0000A83E                            
0000A83E                            Obj2E_Move:				; XREF: Obj2E_Index
0000A83E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A842 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A846 6100 0000                  		bsr.w	SpeedToPos
0000A84A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A850 4E75                       		rts	
0000A852                            ; ===========================================================================
0000A852                            
0000A852                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A852 5428 0024                  		addq.b	#2,$24(a0)
0000A856 317C 001D 001E             		move.w	#29,$1E(a0)
0000A85C 1028 001C                  		move.b	$1C(a0),d0
0000A860 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A864 6600                       		bne.s	Obj2E_ChkSonic
0000A866 4E75                       		rts			; Eggman monitor does nothing
0000A868                            ; ===========================================================================
0000A868                            
0000A868                            Obj2E_ChkSonic:
0000A868 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A86C 6600                       		bne.s	Obj2E_ChkShoes
0000A86E                            
0000A86E                            ExtraLife:
0000A86E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A872 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A876 303C 0088                  		move.w	#$88,d0
0000A87A 4EF9 0000 15C0             		jmp	(PlaySound).l	; play extra life music
0000A880                            ; ===========================================================================
0000A880                            
0000A880                            Obj2E_ChkShoes:
0000A880 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A884 6600                       		bne.s	Obj2E_ChkShield
0000A886 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A88C 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A892 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A898 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A89E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A8A4 303C 00E2                  		move.w	#$E2,d0
0000A8A8 4EF9 0000 15C0             		jmp	(PlaySound).l	; Speed	up the music
0000A8AE                            ; ===========================================================================
0000A8AE                            
0000A8AE                            Obj2E_ChkShield:
0000A8AE 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A8B2 6600                       		bne.s	Obj2E_ChkInvinc
0000A8B4 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A8BA 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A8C0 303C 00AF                  		move.w	#$AF,d0
0000A8C4 4EF9 0000 15C0             		jmp	(PlaySound).l	; play shield sound
0000A8CA                            ; ===========================================================================
0000A8CA                            
0000A8CA                            Obj2E_ChkInvinc:
0000A8CA 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A8CE 6600                       		bne.s	Obj2E_ChkRings
0000A8D0 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A8D6 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A8DC 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A8E2 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A8E8 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A8EE 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A8F4 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A8FA 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A900 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A906 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A90C 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A910 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A912 303C 0087                  		move.w	#$87,d0
0000A916 4EF9 0000 15C0             		jmp	(PlaySound).l	; play invincibility music
0000A91C                            ; ===========================================================================
0000A91C                            
0000A91C                            Obj2E_NoMusic:
0000A91C 4E75                       		rts	
0000A91E                            ; ===========================================================================
0000A91E                            
0000A91E                            Obj2E_ChkRings:
0000A91E 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A922 6600                       		bne.s	Obj2E_ChkS
0000A924 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A92A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A930 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A936 6500                       		bcs.s	Obj2E_RingSound
0000A938 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A93E 6700 FF2E                  		beq.w	ExtraLife
0000A942 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A948 6500                       		bcs.s	Obj2E_RingSound
0000A94A 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A950 6700 FF1C                  		beq.w	ExtraLife
0000A954                            
0000A954                            Obj2E_RingSound:
0000A954 303C 00B5                  		move.w	#$B5,d0
0000A958 4EF9 0000 15C0             		jmp	(PlaySound).l	; play ring sound
0000A95E                            ; ===========================================================================
0000A95E                            
0000A95E                            Obj2E_ChkS:
0000A95E 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A962 6600                       		bne.s	Obj2E_ChkEnd
0000A964                            		; nop	
0000A964 7201                       		moveq	#1,d1
0000A966 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A96A                            
0000A96A                            Obj2E_ChkEnd:
0000A96A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A96C                            ; ===========================================================================
0000A96C                            
0000A96C                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A96C 5368 001E                  		subq.w	#1,$1E(a0)
0000A970 6B00 0000                  		bmi.w	DeleteObject
0000A974 4E75                       		rts	
0000A976                            ; ---------------------------------------------------------------------------
0000A976                            ; Subroutine to	make the sides of a monitor solid
0000A976                            ; ---------------------------------------------------------------------------
0000A976                            
0000A976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A976                            
0000A976                            
0000A976                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A976 43F8 D000                  		lea	($FFFFD000).w,a1
0000A97A 3029 0008                  		move.w	8(a1),d0
0000A97E 9068 0008                  		sub.w	8(a0),d0
0000A982 D041                       		add.w	d1,d0
0000A984 6B00                       		bmi.s	loc_A4E6
0000A986 3601                       		move.w	d1,d3
0000A988 D643                       		add.w	d3,d3
0000A98A B043                       		cmp.w	d3,d0
0000A98C 6200                       		bhi.s	loc_A4E6
0000A98E 1629 0016                  		move.b	$16(a1),d3
0000A992 4883                       		ext.w	d3
0000A994 D443                       		add.w	d3,d2
0000A996 3629 000C                  		move.w	$C(a1),d3
0000A99A 9668 000C                  		sub.w	$C(a0),d3
0000A99E D642                       		add.w	d2,d3
0000A9A0 6B00                       		bmi.s	loc_A4E6
0000A9A2 D442                       		add.w	d2,d2
0000A9A4 B642                       		cmp.w	d2,d3
0000A9A6 6400                       		bcc.s	loc_A4E6
0000A9A8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A9AC 6B00                       		bmi.s	loc_A4E6
0000A9AE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A9B4 6400                       		bcc.s	loc_A4E6
0000A9B6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A9BA 6600                       		bne.s	loc_A4E6
0000A9BC B240                       		cmp.w	d0,d1
0000A9BE 6400                       		bcc.s	loc_A4DC
0000A9C0 D241                       		add.w	d1,d1
0000A9C2 9041                       		sub.w	d1,d0
0000A9C4                            
0000A9C4                            loc_A4DC:
0000A9C4 0C43 0010                  		cmpi.w	#$10,d3
0000A9C8 6500                       		bcs.s	loc_A4EA
0000A9CA                            
0000A9CA                            loc_A4E2:
0000A9CA 7201                       		moveq	#1,d1
0000A9CC 4E75                       		rts	
0000A9CE                            ; ===========================================================================
0000A9CE                            
0000A9CE                            loc_A4E6:
0000A9CE 7200                       		moveq	#0,d1
0000A9D0 4E75                       		rts	
0000A9D2                            ; ===========================================================================
0000A9D2                            
0000A9D2                            loc_A4EA:
0000A9D2 7200                       		moveq	#0,d1
0000A9D4 1228 0019                  		move.b	$19(a0),d1
0000A9D8 5841                       		addq.w	#4,d1
0000A9DA 3401                       		move.w	d1,d2
0000A9DC D442                       		add.w	d2,d2
0000A9DE D269 0008                  		add.w	8(a1),d1
0000A9E2 9268 0008                  		sub.w	8(a0),d1
0000A9E6 6BE2                       		bmi.s	loc_A4E2
0000A9E8 B242                       		cmp.w	d2,d1
0000A9EA 64DE                       		bcc.s	loc_A4E2
0000A9EC 72FF                       		moveq	#-1,d1
0000A9EE 4E75                       		rts	
0000A9F0                            ; End of function Obj26_SolidSides
0000A9F0                            
0000A9F0                            ; ===========================================================================
0000A9F0                            Ani_obj26:
0000A9F0                            	include "_anim\obj26.asm"
0000A9F0                            ; ---------------------------------------------------------------------------
0000A9F0                            ; Animation script - monitors
0000A9F0                            ; ---------------------------------------------------------------------------
0000A9F0 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A9F6 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A9FC 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AA02 0000                       		dc.w byte_A582-Ani_obj26
0000AA04 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AA0A 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AA16 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AA22 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AA2E 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AA3A 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AA46 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AA52 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AA5E 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AA6A 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AA72                            		even
0000AA72                            		even
0000AA72                            
0000AA72                            ; ---------------------------------------------------------------------------
0000AA72                            ; Sprite mappings - monitors
0000AA72                            ; ---------------------------------------------------------------------------
0000AA72                            Map_obj26:
0000AA72                            	include "_maps\obj26.asm"
0000AA72                            ; ================================================================================
0000AA72                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AA72                            ; ================================================================================
0000AA72                            
0000AA72                            DATAY1U343IF3L:
0000AA72 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AA76 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AA7A 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AA7E 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AA82 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AA86 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AA8A 05                         DATAY1U343IF3L_0: dc.b $5
0000AA8B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA90 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA95 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA9A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA9F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAA4 06                         DATAY1U343IF3L_1: dc.b $6
0000AAA5 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AAAA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAAF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAB4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAB9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AABE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAC3 05                         DATAY1U343IF3L_2: dc.b $5
0000AAC4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAC9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AACE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAD3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAD8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AADD 05                         DATAY1U343IF3L_3: dc.b $5
0000AADE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAE3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAE8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAED 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAF2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAF7 06                         DATAY1U343IF3L_4: dc.b $6
0000AAF8 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AAFD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB02 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB07 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB0C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB11 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB16 06                         DATAY1U343IF3L_5: dc.b $6
0000AB17 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AB1C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB21 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB26 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB2B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB30 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB35 06                         DATAY1U343IF3L_6: dc.b $6
0000AB36 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AB3B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB40 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB45 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB4A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB4F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB54 06                         DATAY1U343IF3L_7: dc.b $6
0000AB55 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AB5A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB5F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB64 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB69 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB6E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB73 06                         DATAY1U343IF3L_8: dc.b $6
0000AB74 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AB79 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB7E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB83 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB88 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB8D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB92 06                         DATAY1U343IF3L_9: dc.b $6
0000AB93 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB98 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB9D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABA2 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABA7 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABAC 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABB1 05                         DATAY1U343IF3L_A: dc.b $5
0000ABB2 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ABB7 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ABBC E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ABC1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ABC6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ABCB 01                         DATAY1U343IF3L_B: dc.b $1
0000ABCC FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ABD2 00                         	even
0000ABD2 00                         	even
0000ABD2                            
0000ABD2                            ; ===========================================================================
0000ABD2                            ; ---------------------------------------------------------------------------
0000ABD2                            ; Object 0E - Sonic on the title screen
0000ABD2                            ; ---------------------------------------------------------------------------
0000ABD2                            
0000ABD2                            Obj0E:					; XREF: Obj_Index
0000ABD2 7000                       		moveq	#0,d0
0000ABD4 1028 0024                  		move.b	$24(a0),d0
0000ABD8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ABDC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ABE0                            ; ===========================================================================
0000ABE0 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ABE2 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ABE4 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ABE6 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ABE8                            ; ===========================================================================
0000ABE8                            
0000ABE8                            Obj0E_Main:				; XREF: Obj0E_Index
0000ABE8 5428 0024                  		addq.b	#2,$24(a0)
0000ABEC 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ABF2 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ABF8 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AC00 317C 2300 0002             		move.w	#$2300,2(a0)
0000AC06 117C 0001 0018             		move.b	#1,$18(a0)
0000AC0C 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AC12 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AC18 6100 0000                  		bsr.w	AnimateSprite
0000AC1C                            
0000AC1C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AC1C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AC20 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AC22 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AC26 6000 0000                  		bra.w	DisplaySprite
0000AC2A                            ; ===========================================================================
0000AC2A                            
0000AC2A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AC2A 4E75                       		rts	
0000AC2C                            ; ===========================================================================
0000AC2C                            
0000AC2C                            Obj0E_Move:				; XREF: Obj0E_Index
0000AC2C 5168 000A                  		subq.w	#8,$A(a0)
0000AC30 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AC36 6600                       		bne.s	Obj0E_Display
0000AC38 5428 0024                  		addq.b	#2,$24(a0)
0000AC3C                            
0000AC3C                            Obj0E_Display:
0000AC3C 6000 0000                  		bra.w	DisplaySprite
0000AC40                            ; ===========================================================================
0000AC40 4E75                       		rts	
0000AC42                            ; ===========================================================================
0000AC42                            
0000AC42                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AC42 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AC48 6100 0000                  		bsr.w	AnimateSprite
0000AC4C 6000 0000                  		bra.w	DisplaySprite
0000AC50                            ; ===========================================================================
0000AC50 4E75                       		rts	
0000AC52                            ; ===========================================================================
0000AC52                            ; ---------------------------------------------------------------------------
0000AC52                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AC52                            ; ---------------------------------------------------------------------------
0000AC52                            
0000AC52                            Obj0F:					; XREF: Obj_Index
0000AC52 7000                       		moveq	#0,d0
0000AC54 1028 0024                  		move.b	$24(a0),d0
0000AC58 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AC5C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AC60 6000 0000                  		bra.w	DisplaySprite
0000AC64                            ; ===========================================================================
0000AC64 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AC66 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AC68 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AC6A                            ; ===========================================================================
0000AC6A                            
0000AC6A                            Obj0F_Main:				; XREF: Obj0F_Index
0000AC6A 5428 0024                  		addq.b	#2,$24(a0)
0000AC6E 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AC74 317C 0130 000A             		move.w	#$130,$A(a0)
0000AC7A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AC82 317C 0200 0002             		move.w	#$200,2(a0)
0000AC88 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC8E 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC90 5428 0024                  		addq.b	#2,$24(a0)
0000AC94 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC9A 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC9C 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000ACA2 317C 0170 0008             		move.w	#$170,8(a0)
0000ACA8 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000ACAE                            
0000ACAE                            locret_A6F8:				; XREF: Obj0F_Index
0000ACAE 4E75                       		rts	
0000ACB0                            ; ===========================================================================
0000ACB0                            
0000ACB0                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000ACB0 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000ACB6 6000 0000                  		bra.w	AnimateSprite
0000ACBA                            ; ===========================================================================
0000ACBA                            Ani_obj0E:
0000ACBA                            	include "_anim\obj0E.asm"
0000ACBA                            ; ---------------------------------------------------------------------------
0000ACBA                            ; Animation script - Sonic on the title screen
0000ACBA                            ; ---------------------------------------------------------------------------
0000ACBA 0000                       		dc.w byte_A706-Ani_obj0E
0000ACBC 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000ACC8                            		even
0000ACC8                            		even
0000ACC8                            
0000ACC8                            Ani_obj0F:
0000ACC8                            	include "_anim\obj0F.asm"
0000ACC8                            ; ---------------------------------------------------------------------------
0000ACC8                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000ACC8                            ; ---------------------------------------------------------------------------
0000ACC8 0000                       		dc.w byte_A714-Ani_obj0F
0000ACCA 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000ACCE                            		even
0000ACCE                            		even
0000ACCE                            
0000ACCE                            ; ---------------------------------------------------------------------------
0000ACCE                            ; Subroutine to	animate	a sprite using an animation script
0000ACCE                            ; ---------------------------------------------------------------------------
0000ACCE                            
0000ACCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ACCE                            
0000ACCE                            
0000ACCE                            AnimateSprite:
0000ACCE 7000                       		moveq	#0,d0
0000ACD0 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000ACD4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000ACD8 6700                       		beq.s	Anim_Run	; if not, branch
0000ACDA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000ACDE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACE4 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000ACEA                            
0000ACEA                            Anim_Run:
0000ACEA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000ACEE 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000ACF0 D040                       		add.w	d0,d0
0000ACF2 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000ACF6 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000ACFA 7200                       		moveq	#0,d1
0000ACFC 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AD00 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AD04 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AD06                            
0000AD06                            Anim_Next:
0000AD06 1200                       		move.b	d0,d1
0000AD08 0200 001F                  		andi.b	#$1F,d0
0000AD0C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AD10 1028 0022                  		move.b	$22(a0),d0
0000AD14 E719                       		rol.b	#3,d1
0000AD16 B101                       		eor.b	d0,d1
0000AD18 0201 0003                  		andi.b	#3,d1
0000AD1C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AD22 8328 0001                  		or.b	d1,1(a0)
0000AD26 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AD2A                            
0000AD2A                            Anim_Wait:
0000AD2A 4E75                       		rts	
0000AD2C                            ; ===========================================================================
0000AD2C                            
0000AD2C                            Anim_End_FF:
0000AD2C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AD2E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AD30 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AD36 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AD3A 60CA                       		bra.s	Anim_Next
0000AD3C                            ; ===========================================================================
0000AD3C                            
0000AD3C                            Anim_End_FE:
0000AD3C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AD3E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AD40 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AD44 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AD48 9200                       		sub.b	d0,d1
0000AD4A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AD4E 60B6                       		bra.s	Anim_Next
0000AD50                            ; ===========================================================================
0000AD50                            
0000AD50                            Anim_End_FD:
0000AD50 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AD52 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AD54 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AD5A                            
0000AD5A                            Anim_End_FC:
0000AD5A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AD5C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AD5E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AD62                            
0000AD62                            Anim_End_FB:
0000AD62 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AD64 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AD66 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AD6C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AD70                            
0000AD70                            Anim_End_FA:
0000AD70 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AD72 6600                       		bne.s	Anim_End	; if not, branch
0000AD74 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AD78                            
0000AD78                            Anim_End:
0000AD78 4E75                       		rts	
0000AD7A                            ; End of function AnimateSprite
0000AD7A                            
0000AD7A                            ; ===========================================================================
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            Map_obj0F:
0000AD7A                            	include "_maps\obj0F.asm"
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A 0000                       		dc.w byte_A7CD-Map_obj0F
0000AD7C 0000                       		dc.w byte_A7CC-Map_obj0F
0000AD7E 0000                       		dc.w byte_A7EB-Map_obj0F
0000AD80 0000                       		dc.w byte_A882-Map_obj0F
0000AD82 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AD83 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AD88 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD8D 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD92 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD97 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD9C 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000ADA1 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000ADA2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADA7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADAC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADB1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADB6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADBB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADC0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADC5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADCA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADCF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000ADD4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADD9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADDE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADE3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADE8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADED D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADF2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADF7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000ADFC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE01 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AE06 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE0B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE10 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE15 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE1A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE1F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE24 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE29 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE2E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE33 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AE38 01                         byte_A882:	dc.b 1			; "TM"
0000AE39 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AE3E                            		even
0000AE3E                            		even
0000AE3E                            
0000AE3E                            ; ---------------------------------------------------------------------------
0000AE3E                            ; Sprite mappings - Sonic on the title screen
0000AE3E                            ; ---------------------------------------------------------------------------
0000AE3E                            Map_obj0E:
0000AE3E                            	include "_maps\obj0E.asm"
0000AE3E                            ; ================================================================================
0000AE3E                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AE3E                            ; ================================================================================
0000AE3E                            
0000AE3E                            DATAGKI0HYDQBXP:
0000AE3E 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AE42 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AE46 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AE4A 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000AE4E 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000AE4F 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000AE54 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000AE59 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000AE5E 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000AE63 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000AE68 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000AE6D 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000AE72 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000AE77 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000AE78 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000AE7D 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000AE82 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000AE87 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000AE8C 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000AE91 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000AE96 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000AE9B 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000AEA0 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000AEA5 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000AEAA 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000AEAF 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000AEB0 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000AEB5 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000AEBA F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000AEBF 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000AEC4 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000AEC9 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000AECE 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000AED3 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000AED8 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000AEDD 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000AEE2 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000AEE7 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000AEE8 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AEED F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AEF2 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AEF7 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AEFC 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AF01 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AF06 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AF0B 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AF10 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AF15 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AF1A 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000AF1B F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000AF20 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000AF25 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000AF2A 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000AF2F 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000AF34 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000AF39 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000AF3E 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000AF43 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000AF48 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000AF4D 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000AF52 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000AF57 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000AF5C 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000AF61 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000AF66 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000AF6B 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000AF6C 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AF71 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AF76 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AF7B 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AF80 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AF85 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AF8A 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AF8F EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AF94 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AF99 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AF9E 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AFA3 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000AFA4 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000AFA9 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000AFAE 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000AFB3 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000AFB8 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000AFBD 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000AFC2 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000AFC7 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000AFCC 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000AFD1 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000AFD6 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000AFDB 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000AFE0 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000AFE5 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000AFEA 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000AFEF 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000AFF0 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000AFF5 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000AFFA 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000AFFF EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B004 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B009 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B00E EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B013 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B018 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B01D EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B022 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B027 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B02C EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B031 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B036 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B03C 00                         	even
0000B03C 00                         	even
0000B03C                            
0000B03C                            ; ===========================================================================
0000B03C                            ; ---------------------------------------------------------------------------
0000B03C                            ; Object 2B - Chopper enemy (GHZ)
0000B03C                            ; ---------------------------------------------------------------------------
0000B03C                            
0000B03C                            Obj2B:					; XREF: Obj_Index
0000B03C 7000                       		moveq	#0,d0
0000B03E 1028 0024                  		move.b	$24(a0),d0
0000B042 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B046 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B04A 6000 0000                  		bra.w	MarkObjGone
0000B04E                            ; ===========================================================================
0000B04E 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B050 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B052                            ; ===========================================================================
0000B052                            
0000B052                            Obj2B_Main:				; XREF: Obj2B_Index
0000B052 5428 0024                  		addq.b	#2,$24(a0)
0000B056 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B05E 317C 047B 0002             		move.w	#$47B,2(a0)
0000B064 117C 0004 0001             		move.b	#4,1(a0)
0000B06A 117C 0004 0018             		move.b	#4,$18(a0)
0000B070 117C 0009 0020             		move.b	#9,$20(a0)
0000B076 117C 0010 0019             		move.b	#$10,$19(a0)
0000B07C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B082 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B088                            
0000B088                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B088 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B08E 6100 FC3E                  		bsr.w	AnimateSprite
0000B092 6100 0000                  		bsr.w	SpeedToPos
0000B096 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B09C 3028 0030                  		move.w	$30(a0),d0
0000B0A0 B068 000C                  		cmp.w	$C(a0),d0
0000B0A4 6400                       		bcc.s	Obj2B_ChgAni
0000B0A6 3140 000C                  		move.w	d0,$C(a0)
0000B0AA 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B0B0                            
0000B0B0                            Obj2B_ChgAni:
0000B0B0 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B0B6 0440 00C0                  		subi.w	#$C0,d0
0000B0BA B068 000C                  		cmp.w	$C(a0),d0
0000B0BE 6400                       		bcc.s	locret_ABB6
0000B0C0 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B0C6 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B0CA 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B0CC 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B0D2                            
0000B0D2                            locret_ABB6:
0000B0D2 4E75                       		rts	
0000B0D4                            ; ===========================================================================
0000B0D4                            Ani_obj2B:
0000B0D4                            	include "_anim\obj2B.asm"
0000B0D4                            ; ---------------------------------------------------------------------------
0000B0D4                            ; Animation script - Chopper enemy
0000B0D4                            ; ---------------------------------------------------------------------------
0000B0D4 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B0D6 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B0D8 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B0DA 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B0DE 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B0E2 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B0E6 00                         		even
0000B0E6 00                         		even
0000B0E6                            
0000B0E6                            ; ---------------------------------------------------------------------------
0000B0E6                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0E6                            ; ---------------------------------------------------------------------------
0000B0E6                            Map_obj2B:
0000B0E6                            	include "_maps\obj2B.asm"
0000B0E6                            ; ---------------------------------------------------------------------------
0000B0E6                            ; Sprite mappings - Chopper enemy (GHZ)
0000B0E6                            ; ---------------------------------------------------------------------------
0000B0E6 0000                       		dc.w byte_ABCE-Map_obj2B
0000B0E8 0000                       		dc.w byte_ABD4-Map_obj2B
0000B0EA 01                         byte_ABCE:	dc.b 1
0000B0EB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B0F0 01                         byte_ABD4:	dc.b 1
0000B0F1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B0F6                            		even
0000B0F6                            		even
0000B0F6                            
0000B0F6                            ; ===========================================================================
0000B0F6                            ; ---------------------------------------------------------------------------
0000B0F6                            ; Object 2C - Jaws enemy (LZ)
0000B0F6                            ; ---------------------------------------------------------------------------
0000B0F6                            
0000B0F6                            Obj2C:					; XREF: Obj_Index
0000B0F6 7000                       		moveq	#0,d0
0000B0F8 1028 0024                  		move.b	$24(a0),d0
0000B0FC 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B100 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B104                            ; ===========================================================================
0000B104 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B106 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B108                            ; ===========================================================================
0000B108                            
0000B108                            Obj2C_Main:				; XREF: Obj2C_Index
0000B108 5428 0024                  		addq.b	#2,$24(a0)
0000B10C 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B114 317C 2486 0002             		move.w	#$2486,2(a0)
0000B11A 0028 0004 0001             		ori.b	#4,1(a0)
0000B120 117C 000A 0020             		move.b	#$A,$20(a0)
0000B126 117C 0004 0018             		move.b	#4,$18(a0)
0000B12C 117C 0010 0019             		move.b	#$10,$19(a0)
0000B132 7000                       		moveq	#0,d0
0000B134 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B138 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B13A 5340                       		subq.w	#1,d0
0000B13C 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B140 3140 0032                  		move.w	d0,$32(a0)
0000B144 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B14A 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B150 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B152 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B156                            
0000B156                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B156 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B15A 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B15C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B162 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B166 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B16C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B172                            
0000B172                            Obj2C_Animate:
0000B172 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B178 6100 FB54                  		bsr.w	AnimateSprite
0000B17C 6100 0000                  		bsr.w	SpeedToPos
0000B180 6000 0000                  		bra.w	MarkObjGone
0000B184                            ; ===========================================================================
0000B184                            Ani_obj2C:
0000B184                            	include "_anim\obj2C.asm"
0000B184                            ; ---------------------------------------------------------------------------
0000B184                            ; Animation script - Jaws enemy
0000B184                            ; ---------------------------------------------------------------------------
0000B184 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B186 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B18C                            		even
0000B18C                            		even
0000B18C                            
0000B18C                            ; ---------------------------------------------------------------------------
0000B18C                            ; Sprite mappings - Jaws enemy (LZ)
0000B18C                            ; ---------------------------------------------------------------------------
0000B18C                            Map_obj2C:
0000B18C                            	include "_maps\obj2C.asm"
0000B18C                            ; ---------------------------------------------------------------------------
0000B18C                            ; Sprite mappings - Jaws enemy (LZ)
0000B18C                            ; ---------------------------------------------------------------------------
0000B18C 0000                       		dc.w byte_AC78-Map_obj2C
0000B18E 0000                       		dc.w byte_AC83-Map_obj2C
0000B190 0000                       		dc.w byte_AC8E-Map_obj2C
0000B192 0000                       		dc.w byte_AC99-Map_obj2C
0000B194 02                         byte_AC78:	dc.b 2
0000B195 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B19A F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B19F 02                         byte_AC83:	dc.b 2
0000B1A0 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B1A5 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B1AA 02                         byte_AC8E:	dc.b 2
0000B1AB F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B1B0 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B1B5 02                         byte_AC99:	dc.b 2
0000B1B6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B1BB F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B1C0                            		even
0000B1C0                            		even
0000B1C0                            
0000B1C0                            ; ===========================================================================
0000B1C0                            ; ---------------------------------------------------------------------------
0000B1C0                            ; Object 2D - Burrobot enemy (LZ)
0000B1C0                            ; ---------------------------------------------------------------------------
0000B1C0                            
0000B1C0                            Obj2D:					; XREF: Obj_Index
0000B1C0 7000                       		moveq	#0,d0
0000B1C2 1028 0024                  		move.b	$24(a0),d0
0000B1C6 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B1CA 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B1CE                            ; ===========================================================================
0000B1CE 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B1D0 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B1D2                            ; ===========================================================================
0000B1D2                            
0000B1D2                            Obj2D_Main:				; XREF: Obj2D_Index
0000B1D2 5428 0024                  		addq.b	#2,$24(a0)
0000B1D6 117C 0013 0016             		move.b	#$13,$16(a0)
0000B1DC 117C 0008 0017             		move.b	#8,$17(a0)
0000B1E2 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B1EA 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B1F0 0028 0004 0001             		ori.b	#4,1(a0)
0000B1F6 117C 0004 0018             		move.b	#4,$18(a0)
0000B1FC 117C 0005 0020             		move.b	#5,$20(a0)
0000B202 117C 000C 0019             		move.b	#$C,$19(a0)
0000B208 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B20C 117C 0002 001C             		move.b	#2,$1C(a0)
0000B212                            
0000B212                            Obj2D_Action:				; XREF: Obj2D_Index
0000B212 7000                       		moveq	#0,d0
0000B214 1028 0025                  		move.b	$25(a0),d0
0000B218 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B21C 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B220 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B226 6100 FAA6                  		bsr.w	AnimateSprite
0000B22A 6000 0000                  		bra.w	MarkObjGone
0000B22E                            ; ===========================================================================
0000B22E 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B230 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B232 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B234 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B236                            ; ===========================================================================
0000B236                            
0000B236                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B236 5368 0030                  		subq.w	#1,$30(a0)
0000B23A 6A00                       		bpl.s	locret_AD42
0000B23C 5428 0025                  		addq.b	#2,$25(a0)
0000B240 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B246 317C 0080 0010             		move.w	#$80,$10(a0)
0000B24C 117C 0001 001C             		move.b	#1,$1C(a0)
0000B252 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B258 6700                       		beq.s	locret_AD42
0000B25A 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B25E                            
0000B25E                            locret_AD42:
0000B25E 4E75                       		rts	
0000B260                            ; ===========================================================================
0000B260                            
0000B260                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B260 5368 0030                  		subq.w	#1,$30(a0)
0000B264 6B00                       		bmi.s	loc_AD84
0000B266 6100 0000                  		bsr.w	SpeedToPos
0000B26A 0868 0000 0032             		bchg	#0,$32(a0)
0000B270 6600                       		bne.s	loc_AD78
0000B272 3628 0008                  		move.w	8(a0),d3
0000B276 0643 000C                  		addi.w	#$C,d3
0000B27A 0828 0000 0022             		btst	#0,$22(a0)
0000B280 6600                       		bne.s	loc_AD6A
0000B282 0443 0018                  		subi.w	#$18,d3
0000B286                            
0000B286                            loc_AD6A:
0000B286 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B28C 0C41 000C                  		cmpi.w	#$C,d1
0000B290 6C00                       		bge.s	loc_AD84
0000B292 4E75                       		rts	
0000B294                            ; ===========================================================================
0000B294                            
0000B294                            loc_AD78:				; XREF: Obj2D_Move
0000B294 4EB9 0000 0000             		jsr	ObjHitFloor
0000B29A D368 000C                  		add.w	d1,$C(a0)
0000B29E 4E75                       		rts	
0000B2A0                            ; ===========================================================================
0000B2A0                            
0000B2A0                            loc_AD84:				; XREF: Obj2D_Move
0000B2A0 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B2A6 6700                       		beq.s	loc_ADA4
0000B2A8 5528 0025                  		subq.b	#2,$25(a0)
0000B2AC 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B2B2 317C 0000 0010             		move.w	#0,$10(a0)
0000B2B8 117C 0000 001C             		move.b	#0,$1C(a0)
0000B2BE 4E75                       		rts	
0000B2C0                            ; ===========================================================================
0000B2C0                            
0000B2C0                            loc_ADA4:
0000B2C0 5428 0025                  		addq.b	#2,$25(a0)
0000B2C4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2CA 117C 0002 001C             		move.b	#2,$1C(a0)
0000B2D0 4E75                       		rts	
0000B2D2                            ; ===========================================================================
0000B2D2                            
0000B2D2                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B2D2 6100 0000                  		bsr.w	SpeedToPos
0000B2D6 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B2DC 6B00                       		bmi.s	locret_ADF0
0000B2DE 117C 0003 001C             		move.b	#3,$1C(a0)
0000B2E4 4EB9 0000 0000             		jsr	ObjHitFloor
0000B2EA 4A41                       		tst.w	d1
0000B2EC 6A00                       		bpl.s	locret_ADF0
0000B2EE D368 000C                  		add.w	d1,$C(a0)
0000B2F2 317C 0000 0012             		move.w	#0,$12(a0)
0000B2F8 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2FE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B304 5528 0025                  		subq.b	#2,$25(a0)
0000B308 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B30C                            
0000B30C                            locret_ADF0:
0000B30C 4E75                       		rts	
0000B30E                            ; ===========================================================================
0000B30E                            
0000B30E                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B30E 343C 0060                  		move.w	#$60,d2
0000B312 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B316 6400                       		bcc.s	locret_AE20
0000B318 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B31C 9068 000C                  		sub.w	$C(a0),d0
0000B320 6400                       		bcc.s	locret_AE20
0000B322 0C40 FF80                  		cmpi.w	#-$80,d0
0000B326 6500                       		bcs.s	locret_AE20
0000B328 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B32C 6600                       		bne.s	locret_AE20
0000B32E 5528 0025                  		subq.b	#2,$25(a0)
0000B332 3141 0010                  		move.w	d1,$10(a0)
0000B336 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B33C                            
0000B33C                            locret_AE20:
0000B33C 4E75                       		rts	
0000B33E                            
0000B33E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B33E                            
0000B33E                            
0000B33E                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B33E 323C 0080                  		move.w	#$80,d1
0000B342 08E8 0000 0022             		bset	#0,$22(a0)
0000B348 3038 D008                  		move.w	($FFFFD008).w,d0
0000B34C 9068 0008                  		sub.w	8(a0),d0
0000B350 6400                       		bcc.s	loc_AE40
0000B352 4440                       		neg.w	d0
0000B354 4441                       		neg.w	d1
0000B356 08A8 0000 0022             		bclr	#0,$22(a0)
0000B35C                            
0000B35C                            loc_AE40:
0000B35C B042                       		cmp.w	d2,d0
0000B35E 4E75                       		rts	
0000B360                            ; End of function Obj2D_ChkSonic2
0000B360                            
0000B360                            ; ===========================================================================
0000B360                            Ani_obj2D:
0000B360                            	include "_anim\obj2D.asm"
0000B360                            ; ---------------------------------------------------------------------------
0000B360                            ; Animation script - Burrobot enemy but craig
0000B360                            ; ---------------------------------------------------------------------------
0000B360 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B362 0000                       		dc.w byte_AE50-Ani_obj2D
0000B364 0000                       		dc.w byte_AE54-Ani_obj2D
0000B366 0000                       		dc.w byte_AE58-Ani_obj2D
0000B368 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B36B 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B36F 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B37D 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B380                            		even
0000B380                            		even
0000B380                            
0000B380                            ; ---------------------------------------------------------------------------
0000B380                            ; Sprite mappings - Burrobot enemy (LZ)
0000B380                            ; ---------------------------------------------------------------------------
0000B380                            Map_obj2D:
0000B380                            	include "_maps\obj2D.asm"
0000B380                            Map_e3a3:
0000B380 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B382 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B384 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B386 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B388 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B38A 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B38C 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B38E 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B390 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B392 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B394 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B396 02                         Map_e3a3_16: 	dc.b $2
0000B397 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B39C 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B3A1 02                         Map_e3a3_21: 	dc.b $2
0000B3A2 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B3A7 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B3AC 02                         Map_e3a3_2C: 	dc.b $2
0000B3AD EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B3B2 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B3B7 02                         Map_e3a3_37: 	dc.b $2
0000B3B8 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B3BD FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B3C2 02                         Map_e3a3_42: 	dc.b $2
0000B3C3 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B3C8 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B3CD 02                         Map_e3a3_4D: 	dc.b $2
0000B3CE EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B3D3 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B3D8 02                         Map_e3a3_58: 	dc.b $2
0000B3D9 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B3DE FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B3E3 02                         Map_e3a3_63: 	dc.b $2
0000B3E4 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B3E9 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B3EE 02                         Map_e3a3_6E: 	dc.b $2
0000B3EF EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B3F4 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B3F9 02                         Map_e3a3_79: 	dc.b $2
0000B3FA EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B3FF 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B404 02                         Map_e3a3_84: 	dc.b $2
0000B405 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B40A 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B410 00                         	even
0000B410 00                         	even
0000B410                            
0000B410                            ; ===========================================================================
0000B410                            ; ---------------------------------------------------------------------------
0000B410                            ; Object 2F - large moving platforms (MZ)
0000B410                            ; ---------------------------------------------------------------------------
0000B410                            
0000B410                            Obj2F:					; XREF: Obj_Index
0000B410 7000                       		moveq	#0,d0
0000B412 1028 0024                  		move.b	$24(a0),d0
0000B416 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B41A 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B41E                            ; ===========================================================================
0000B41E 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B420 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B422                            
0000B422 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B424 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B426 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B428 0140                       		dc.b 1,	$40
0000B42A 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B42C 0220                       		dc.b 2,	$20
0000B42E                            ; ===========================================================================
0000B42E                            
0000B42E                            Obj2F_Main:				; XREF: Obj2F_Index
0000B42E 5428 0024                  		addq.b	#2,$24(a0)
0000B432 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B43A 317C C000 0002             		move.w	#$C000,2(a0)
0000B440 117C 0004 0001             		move.b	#4,1(a0)
0000B446 117C 0005 0018             		move.b	#5,$18(a0)
0000B44C 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B452 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B458 7000                       		moveq	#0,d0
0000B45A 1028 0028                  		move.b	$28(a0),d0
0000B45E E448                       		lsr.w	#2,d0
0000B460 0240 001C                  		andi.w	#$1C,d0
0000B464 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B468 3019                       		move.w	(a1)+,d0
0000B46A 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B46E 214A 0030                  		move.l	a2,$30(a0)
0000B472 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B476 1151 0019                  		move.b	(a1),$19(a0)
0000B47A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B480 117C 0040 0016             		move.b	#$40,$16(a0)
0000B486 08E8 0004 0001             		bset	#4,1(a0)
0000B48C                            
0000B48C                            Obj2F_Action:				; XREF: Obj2F_Index
0000B48C 6100 0000                  		bsr.w	Obj2F_Types
0000B490 4A28 0025                  		tst.b	$25(a0)
0000B494 6700                       		beq.s	Obj2F_Solid
0000B496 7200                       		moveq	#0,d1
0000B498 1228 0019                  		move.b	$19(a0),d1
0000B49C 0641 000B                  		addi.w	#$B,d1
0000B4A0 6100 C5FC                  		bsr.w	ExitPlatform
0000B4A4 0829 0003 0022             		btst	#3,$22(a1)
0000B4AA 6600 0000                  		bne.w	Obj2F_Slope
0000B4AE 4228 0025                  		clr.b	$25(a0)
0000B4B2 6000                       		bra.s	Obj2F_Display
0000B4B4                            ; ===========================================================================
0000B4B4                            
0000B4B4                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B4B4 7200                       		moveq	#0,d1
0000B4B6 1228 0019                  		move.b	$19(a0),d1
0000B4BA 0641 000B                  		addi.w	#$B,d1
0000B4BE 2468 0030                  		movea.l	$30(a0),a2
0000B4C2 3428 0008                  		move.w	8(a0),d2
0000B4C6 6100 D534                  		bsr.w	SlopeObject2
0000B4CA 6000                       		bra.s	Obj2F_Display
0000B4CC                            ; ===========================================================================
0000B4CC                            
0000B4CC                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B4CC 7200                       		moveq	#0,d1
0000B4CE 1228 0019                  		move.b	$19(a0),d1
0000B4D2 0641 000B                  		addi.w	#$B,d1
0000B4D6 343C 0020                  		move.w	#$20,d2
0000B4DA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B4E0 6600                       		bne.s	loc_AF8E
0000B4E2 343C 0030                  		move.w	#$30,d2
0000B4E6                            
0000B4E6                            loc_AF8E:
0000B4E6 2468 0030                  		movea.l	$30(a0),a2
0000B4EA 6100 0000                  		bsr.w	SolidObject2F
0000B4EE                            
0000B4EE                            Obj2F_Display:				; XREF: Obj2F_Action
0000B4EE 6100 0000                  		bsr.w	DisplaySprite
0000B4F2 6000 0000                  		bra.w	Obj2F_ChkDel
0000B4F6                            
0000B4F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4F6                            
0000B4F6                            
0000B4F6                            Obj2F_Types:				; XREF: Obj2F_Action
0000B4F6 7000                       		moveq	#0,d0
0000B4F8 1028 0028                  		move.b	$28(a0),d0
0000B4FC 0240 0007                  		andi.w	#7,d0
0000B500 D040                       		add.w	d0,d0
0000B502 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B506 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B50A                            ; End of function Obj2F_Types
0000B50A                            
0000B50A                            ; ===========================================================================
0000B50A 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B50C 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B50E 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B510 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B512 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B514 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B516                            ; ===========================================================================
0000B516                            
0000B516                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B516 4E75                       		rts			; type 00 platform doesn't move
0000B518                            ; ===========================================================================
0000B518                            
0000B518                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B518 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B51C 323C 0020                  		move.w	#$20,d1
0000B520 6000                       		bra.s	Obj2F_Move
0000B522                            ; ===========================================================================
0000B522                            
0000B522                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B522 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B526 323C 0030                  		move.w	#$30,d1
0000B52A 6000                       		bra.s	Obj2F_Move
0000B52C                            ; ===========================================================================
0000B52C                            
0000B52C                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B52C 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B530 323C 0040                  		move.w	#$40,d1
0000B534 6000                       		bra.s	Obj2F_Move
0000B536                            ; ===========================================================================
0000B536                            
0000B536                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B536 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B53A 323C 0060                  		move.w	#$60,d1
0000B53E                            
0000B53E                            Obj2F_Move:
0000B53E 0828 0003 0028             		btst	#3,$28(a0)
0000B544 6700                       		beq.s	loc_AFF2
0000B546 4440                       		neg.w	d0
0000B548 D041                       		add.w	d1,d0
0000B54A                            
0000B54A                            loc_AFF2:
0000B54A 3228 002C                  		move.w	$2C(a0),d1
0000B54E 9240                       		sub.w	d0,d1
0000B550 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B554 4E75                       		rts	
0000B556                            ; ===========================================================================
0000B556                            
0000B556                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B556 1028 0034                  		move.b	$34(a0),d0
0000B55A 4A28 0025                  		tst.b	$25(a0)
0000B55E 6600                       		bne.s	loc_B010
0000B560 5500                       		subq.b	#2,d0
0000B562 6400                       		bcc.s	loc_B01C
0000B564 7000                       		moveq	#0,d0
0000B566 6000                       		bra.s	loc_B01C
0000B568                            ; ===========================================================================
0000B568                            
0000B568                            loc_B010:
0000B568 5800                       		addq.b	#4,d0
0000B56A 0C00 0040                  		cmpi.b	#$40,d0
0000B56E 6500                       		bcs.s	loc_B01C
0000B570 103C 0040                  		move.b	#$40,d0
0000B574                            
0000B574                            loc_B01C:
0000B574 1140 0034                  		move.b	d0,$34(a0)
0000B578 4EB9 0000 2C6A             		jsr	(CalcSine).l
0000B57E E848                       		lsr.w	#4,d0
0000B580 3200                       		move.w	d0,d1
0000B582 D068 002C                  		add.w	$2C(a0),d0
0000B586 3140 000C                  		move.w	d0,$C(a0)
0000B58A 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B590 6600                       		bne.s	loc_B07A
0000B592 4A28 0035                  		tst.b	$35(a0)
0000B596 6600                       		bne.s	loc_B07A
0000B598 117C 0001 0035             		move.b	#1,$35(a0)
0000B59E 6100 0000                  		bsr.w	SingleObjLoad2
0000B5A2 6600                       		bne.s	loc_B07A
0000B5A4 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B5A8 3368 0008 0008             		move.w	8(a0),8(a1)
0000B5AE 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B5B4 5069 002C                  		addq.w	#8,$2C(a1)
0000B5B8 5769 002C                  		subq.w	#3,$2C(a1)
0000B5BC 0469 0040 0008             		subi.w	#$40,8(a1)
0000B5C2 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B5C8 2348 0038                  		move.l	a0,$38(a1)
0000B5CC 2448                       		movea.l	a0,a2
0000B5CE 6100                       		bsr.s	sub_B09C
0000B5D0                            
0000B5D0                            loc_B07A:
0000B5D0 7400                       		moveq	#0,d2
0000B5D2 45E8 0036                  		lea	$36(a0),a2
0000B5D6 141A                       		move.b	(a2)+,d2
0000B5D8 5302                       		subq.b	#1,d2
0000B5DA 6500                       		bcs.s	locret_B09A
0000B5DC                            
0000B5DC                            loc_B086:
0000B5DC 7000                       		moveq	#0,d0
0000B5DE 101A                       		move.b	(a2)+,d0
0000B5E0 ED48                       		lsl.w	#6,d0
0000B5E2 0640 D000                  		addi.w	#-$3000,d0
0000B5E6 3240                       		movea.w	d0,a1
0000B5E8 3341 003C                  		move.w	d1,$3C(a1)
0000B5EC 51CA FFEE                  		dbf	d2,loc_B086
0000B5F0                            
0000B5F0                            locret_B09A:
0000B5F0 4E75                       		rts	
0000B5F2                            
0000B5F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5F2                            
0000B5F2                            
0000B5F2                            sub_B09C:
0000B5F2 45EA 0036                  		lea	$36(a2),a2
0000B5F6 7000                       		moveq	#0,d0
0000B5F8 1012                       		move.b	(a2),d0
0000B5FA 5212                       		addq.b	#1,(a2)
0000B5FC 45F2 0001                  		lea	1(a2,d0.w),a2
0000B600 3009                       		move.w	a1,d0
0000B602 0440 D000                  		subi.w	#-$3000,d0
0000B606 EC48                       		lsr.w	#6,d0
0000B608 0240 007F                  		andi.w	#$7F,d0
0000B60C 1480                       		move.b	d0,(a2)
0000B60E 4E75                       		rts	
0000B610                            ; End of function sub_B09C
0000B610                            
0000B610                            ; ===========================================================================
0000B610                            
0000B610                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B610 4A28 0035                  		tst.b	$35(a0)
0000B614 6700                       		beq.s	loc_B0C6
0000B616 4A28 0001                  		tst.b	1(a0)
0000B61A 6A00                       		bpl.s	Obj2F_DelFlames
0000B61C                            
0000B61C                            loc_B0C6:
0000B61C 3028 002A                  		move.w	$2A(a0),d0
0000B620 0240 FF80                  		andi.w	#$FF80,d0
0000B624 3238 F700                  		move.w	($FFFFF700).w,d1
0000B628 0441 0080                  		subi.w	#$80,d1
0000B62C 0241 FF80                  		andi.w	#$FF80,d1
0000B630 9041                       		sub.w	d1,d0
0000B632 0C40 0280                  		cmpi.w	#$280,d0
0000B636 6200 0000                  		bhi.w	DeleteObject
0000B63A 4E75                       		rts	
0000B63C                            ; ===========================================================================
0000B63C                            
0000B63C                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B63C 7400                       		moveq	#0,d2
0000B63E                            
0000B63E                            loc_B0E8:
0000B63E 45E8 0036                  		lea	$36(a0),a2
0000B642 1412                       		move.b	(a2),d2
0000B644 421A                       		clr.b	(a2)+
0000B646 5302                       		subq.b	#1,d2
0000B648 6500                       		bcs.s	locret_B116
0000B64A                            
0000B64A                            loc_B0F4:
0000B64A 7000                       		moveq	#0,d0
0000B64C 1012                       		move.b	(a2),d0
0000B64E 421A                       		clr.b	(a2)+
0000B650 ED48                       		lsl.w	#6,d0
0000B652 0640 D000                  		addi.w	#-$3000,d0
0000B656 3240                       		movea.w	d0,a1
0000B658 6100 0000                  		bsr.w	DeleteObject2
0000B65C 51CA FFEC                  		dbf	d2,loc_B0F4
0000B660 117C 0000 0035             		move.b	#0,$35(a0)
0000B666 117C 0000 0034             		move.b	#0,$34(a0)
0000B66C                            
0000B66C                            locret_B116:
0000B66C 4E75                       		rts	
0000B66E                            ; ===========================================================================
0000B66E                            ; ---------------------------------------------------------------------------
0000B66E                            ; Collision data for large moving platforms (MZ)
0000B66E                            ; ---------------------------------------------------------------------------
0000B66E                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B6BA                            		even
0000B6BA                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B6E6                            		even
0000B6E6                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B732                            		even
0000B732                            ; ===========================================================================
0000B732                            ; ---------------------------------------------------------------------------
0000B732                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B732                            ; (appears when	you walk on sinking platforms)
0000B732                            ; ---------------------------------------------------------------------------
0000B732                            
0000B732                            Obj35:					; XREF: Obj_Index
0000B732 7000                       		moveq	#0,d0
0000B734 1028 0024                  		move.b	$24(a0),d0
0000B738 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B73C 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B740                            ; ===========================================================================
0000B740 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B742 0000                       		dc.w loc_B238-Obj35_Index
0000B744 0000                       		dc.w Obj35_Move-Obj35_Index
0000B746                            ; ===========================================================================
0000B746                            
0000B746                            Obj35_Main:				; XREF: Obj35_Index
0000B746 5428 0024                  		addq.b	#2,$24(a0)
0000B74A 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B752 317C 0345 0002             		move.w	#$345,2(a0)
0000B758 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B75E 117C 0004 0001             		move.b	#4,1(a0)
0000B764 117C 0001 0018             		move.b	#1,$18(a0)
0000B76A 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B770 117C 0008 0019             		move.b	#8,$19(a0)
0000B776 303C 00C8                  		move.w	#$C8,d0
0000B77A 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play flame sound
0000B780 4A28 0028                  		tst.b	$28(a0)
0000B784 6700                       		beq.s	loc_B238
0000B786 5428 0024                  		addq.b	#2,$24(a0)
0000B78A 6000 0000                  		bra.w	Obj35_Move
0000B78E                            ; ===========================================================================
0000B78E                            
0000B78E                            loc_B238:				; XREF: Obj35_Index
0000B78E 2268 0030                  		movea.l	$30(a0),a1
0000B792 3228 0008                  		move.w	8(a0),d1
0000B796 9268 002A                  		sub.w	$2A(a0),d1
0000B79A 0641 000C                  		addi.w	#$C,d1
0000B79E 3001                       		move.w	d1,d0
0000B7A0 E248                       		lsr.w	#1,d0
0000B7A2 1031 0000                  		move.b	(a1,d0.w),d0
0000B7A6 4440                       		neg.w	d0
0000B7A8 D068 002C                  		add.w	$2C(a0),d0
0000B7AC 3400                       		move.w	d0,d2
0000B7AE D068 003C                  		add.w	$3C(a0),d0
0000B7B2 3140 000C                  		move.w	d0,$C(a0)
0000B7B6 0C41 0084                  		cmpi.w	#$84,d1
0000B7BA 6400                       		bcc.s	loc_B2B0
0000B7BC 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B7C4 0C41 0080                  		cmpi.w	#$80,d1
0000B7C8 6400                       		bcc.s	loc_B2B0
0000B7CA 2028 0008                  		move.l	8(a0),d0
0000B7CE 0680 0008 0000             		addi.l	#$80000,d0
0000B7D4 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B7DA 6600                       		bne.s	loc_B2B0
0000B7DC 6100 0000                  		bsr.w	SingleObjLoad2
0000B7E0 6600                       		bne.s	loc_B2B0
0000B7E2 12BC 0035                  		move.b	#$35,0(a1)
0000B7E6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7EC 3342 002C                  		move.w	d2,$2C(a1)
0000B7F0 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B7F6 137C 0001 0028             		move.b	#1,$28(a1)
0000B7FC 2468 0038                  		movea.l	$38(a0),a2
0000B800 6100 FDF0                  		bsr.w	sub_B09C
0000B804                            
0000B804                            loc_B2B0:
0000B804 6000                       		bra.s	Obj35_Animate
0000B806                            ; ===========================================================================
0000B806                            
0000B806                            Obj35_Move:				; XREF: Obj35_Index
0000B806 3028 002C                  		move.w	$2C(a0),d0
0000B80A D068 003C                  		add.w	$3C(a0),d0
0000B80E 3140 000C                  		move.w	d0,$C(a0)
0000B812                            
0000B812                            Obj35_Animate:				; XREF: loc_B238
0000B812 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B818 6100 F4B4                  		bsr.w	AnimateSprite
0000B81C 6000 0000                  		bra.w	DisplaySprite
0000B820                            ; ===========================================================================
0000B820                            Ani_obj35:
0000B820                            	include "_anim\obj35.asm"
0000B820                            ; ---------------------------------------------------------------------------
0000B820                            ; Animation script - fireball that sits on the	floor (MZ)
0000B820                            ; ---------------------------------------------------------------------------
0000B820 0000                       		dc.w byte_B2CE-Ani_obj35
0000B822 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B828                            		even
0000B828                            		even
0000B828                            
0000B828                            ; ---------------------------------------------------------------------------
0000B828                            ; Sprite mappings - large moving platforms (MZ)
0000B828                            ; ---------------------------------------------------------------------------
0000B828                            Map_obj2F:
0000B828                            	include "_maps\obj2F.asm"
0000B828                            ; ---------------------------------------------------------------------------
0000B828                            ; Sprite mappings - large moving platforms (MZ)
0000B828                            ; ---------------------------------------------------------------------------
0000B828 0000                       		dc.w byte_B2DA-Map_obj2F
0000B82A 0000                       		dc.w byte_B31C-Map_obj2F
0000B82C 0000                       		dc.w byte_B34F-Map_obj2F
0000B82E 0D                         byte_B2DA:	dc.b $D
0000B82F D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B834 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B839 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B83E D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B843 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B848 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B84D D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B852 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B857 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B85C F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B861 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B866 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B86B F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B870 0A                         byte_B31C:	dc.b $A
0000B871 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B876 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B87B 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B880 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B885 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B88A F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B88F C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B894 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B899 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B89E E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B8A3 06                         byte_B34F:	dc.b 6
0000B8A4 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B8A9 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B8AE 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B8B3 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B8B8 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B8BD 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B8C2                            		even
0000B8C2                            		even
0000B8C2                            
0000B8C2                            ; ---------------------------------------------------------------------------
0000B8C2                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B8C2                            ; ---------------------------------------------------------------------------
0000B8C2                            Map_obj14:
0000B8C2                            	include "_maps\obj14.asm"
0000B8C2                            ; --------------------------------------------------------------------------------
0000B8C2                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000B8C2                            ; --------------------------------------------------------------------------------
0000B8C2                            
0000B8C2                            SME_C6wT7:	
0000B8C2 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000B8C6 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000B8CA 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000B8CE 01                         SME_C6wT7_C:	dc.b 1	
0000B8CF E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B8D4 01                         SME_C6wT7_12:	dc.b 1	
0000B8D5 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000B8DA 02                         SME_C6wT7_18:	dc.b 2	
0000B8DB EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000B8E0 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000B8E5 01                         SME_C6wT7_23:	dc.b 1	
0000B8E6 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B8EB 01                         SME_C6wT7_29:	dc.b 1	
0000B8EC F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000B8F1 01                         SME_C6wT7_2F:	dc.b 1	
0000B8F2 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000B8F8 00                         		even
0000B8F8 00                         		even
0000B8F8                            
0000B8F8                            ; ===========================================================================
0000B8F8                            ; ---------------------------------------------------------------------------
0000B8F8                            ; Object 30 - large green glassy blocks	(MZ)
0000B8F8                            ; ---------------------------------------------------------------------------
0000B8F8                            
0000B8F8                            Obj30:					; XREF: Obj_Index
0000B8F8 7000                       		moveq	#0,d0
0000B8FA 1028 0024                  		move.b	$24(a0),d0
0000B8FE 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B902 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B906 3028 0008                  		move.w	8(a0),d0
0000B90A 0240 FF80                  		andi.w	#$FF80,d0
0000B90E 3238 F700                  		move.w	($FFFFF700).w,d1
0000B912 0441 0080                  		subi.w	#$80,d1
0000B916 0241 FF80                  		andi.w	#$FF80,d1
0000B91A 9041                       		sub.w	d1,d0
0000B91C 0C40 0280                  		cmpi.w	#$280,d0
0000B920 6200 0000                  		bhi.w	Obj30_Delete
0000B924 6000 0000                  		bra.w	DisplaySprite
0000B928                            ; ===========================================================================
0000B928                            
0000B928                            Obj30_Delete:
0000B928 6000 0000                  		bra.w	DeleteObject
0000B92C                            ; ===========================================================================
0000B92C 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B92E 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B930 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B932 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B934 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B936                            
0000B936 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B939 0400 01                    		dc.b 4,	0, 1
0000B93C 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B93F 0800 01                    		dc.b 8,	0, 1
0000B942                            ; ===========================================================================
0000B942                            
0000B942                            Obj30_Main:				; XREF: Obj30_Index
0000B942 45F9 0000 B936             		lea	(Obj30_Vars1).l,a2
0000B948 7201                       		moveq	#1,d1
0000B94A 117C 0048 0016             		move.b	#$48,$16(a0)
0000B950 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B956 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B958 45F9 0000 B93C             		lea	(Obj30_Vars2).l,a2
0000B95E 7201                       		moveq	#1,d1
0000B960 117C 0038 0016             		move.b	#$38,$16(a0)
0000B966                            
0000B966                            loc_B40C:
0000B966 2248                       		movea.l	a0,a1
0000B968 6000                       		bra.s	Obj30_Load	; load main object
0000B96A                            ; ===========================================================================
0000B96A                            
0000B96A                            Obj30_Loop:
0000B96A 6100 0000                  		bsr.w	SingleObjLoad2
0000B96E 6600                       		bne.s	loc_B480
0000B970                            
0000B970                            Obj30_Load:				; XREF: Obj30_Main
0000B970 135A 0024                  		move.b	(a2)+,$24(a1)
0000B974 12BC 0030                  		move.b	#$30,0(a1)
0000B978 3368 0008 0008             		move.w	8(a0),8(a1)
0000B97E 101A                       		move.b	(a2)+,d0
0000B980 4880                       		ext.w	d0
0000B982 D068 000C                  		add.w	$C(a0),d0
0000B986 3340 000C                  		move.w	d0,$C(a1)
0000B98A 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B992 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B998 137C 0004 0001             		move.b	#4,1(a1)
0000B99E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B9A4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B9AA 137C 0020 0019             		move.b	#$20,$19(a1)
0000B9B0 137C 0004 0018             		move.b	#4,$18(a1)
0000B9B6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B9BA 2348 003C                  		move.l	a0,$3C(a1)
0000B9BE 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B9C2                            
0000B9C2 137C 0010 0019             		move.b	#$10,$19(a1)
0000B9C8 137C 0003 0018             		move.b	#3,$18(a1)
0000B9CE 5029 0028                  		addq.b	#8,$28(a1)
0000B9D2 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B9D8                            
0000B9D8                            loc_B480:
0000B9D8 317C 0090 0032             		move.w	#$90,$32(a0)
0000B9DE 08E8 0004 0001             		bset	#4,1(a0)
0000B9E4                            
0000B9E4                            Obj30_Block012:				; XREF: Obj30_Index
0000B9E4 6100 0000                  		bsr.w	Obj30_Types
0000B9E8 323C 002B                  		move.w	#$2B,d1
0000B9EC 343C 0048                  		move.w	#$48,d2
0000B9F0 363C 0049                  		move.w	#$49,d3
0000B9F4 3828 0008                  		move.w	8(a0),d4
0000B9F8 6000 0000                  		bra.w	SolidObject
0000B9FC                            ; ===========================================================================
0000B9FC                            
0000B9FC                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B9FC 2268 003C                  		movea.l	$3C(a0),a1
0000BA00 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BA06 6000 0000                  		bra.w	Obj30_Types
0000BA0A                            ; ===========================================================================
0000BA0A                            
0000BA0A                            Obj30_Block34:				; XREF: Obj30_Index
0000BA0A 6100 0000                  		bsr.w	Obj30_Types
0000BA0E 323C 002B                  		move.w	#$2B,d1
0000BA12 343C 0038                  		move.w	#$38,d2
0000BA16 363C 0039                  		move.w	#$39,d3
0000BA1A 3828 0008                  		move.w	8(a0),d4
0000BA1E 6000 0000                  		bra.w	SolidObject
0000BA22                            ; ===========================================================================
0000BA22                            
0000BA22                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BA22 2268 003C                  		movea.l	$3C(a0),a1
0000BA26 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BA2C 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BA32 6000 0002                  		bra.w	*+4
0000BA36                            
0000BA36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA36                            
0000BA36                            
0000BA36                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BA36 7000                       		moveq	#0,d0
0000BA38 1028 0028                  		move.b	$28(a0),d0
0000BA3C 0240 0007                  		andi.w	#7,d0
0000BA40 D040                       		add.w	d0,d0
0000BA42 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BA46 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BA4A                            ; End of function Obj30_Types
0000BA4A                            
0000BA4A                            ; ===========================================================================
0000BA4A 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BA4C 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BA4E 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BA50 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BA52 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BA54                            ; ===========================================================================
0000BA54                            
0000BA54                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BA54 4E75                       		rts	
0000BA56                            ; ===========================================================================
0000BA56                            
0000BA56                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BA56 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA5A 323C 0040                  		move.w	#$40,d1
0000BA5E 6000                       		bra.s	loc_B514
0000BA60                            ; ===========================================================================
0000BA60                            
0000BA60                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BA60 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA64 323C 0040                  		move.w	#$40,d1
0000BA68 4440                       		neg.w	d0
0000BA6A D041                       		add.w	d1,d0
0000BA6C                            
0000BA6C                            loc_B514:				; XREF: Obj30_Type01
0000BA6C 0828 0003 0028             		btst	#3,$28(a0)
0000BA72 6700                       		beq.s	loc_B526
0000BA74 4440                       		neg.w	d0
0000BA76 D041                       		add.w	d1,d0
0000BA78 E208                       		lsr.b	#1,d0
0000BA7A 0640 0020                  		addi.w	#$20,d0
0000BA7E                            
0000BA7E                            loc_B526:
0000BA7E 6000 0000                  		bra.w	loc_B5EE
0000BA82                            ; ===========================================================================
0000BA82                            
0000BA82                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BA82 0828 0003 0028             		btst	#3,$28(a0)
0000BA88 6700                       		beq.s	loc_B53E
0000BA8A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA8E 0440 0010                  		subi.w	#$10,d0
0000BA92 6000 0000                  		bra.w	loc_B5EE
0000BA96                            ; ===========================================================================
0000BA96                            
0000BA96                            loc_B53E:
0000BA96 0828 0003 0022             		btst	#3,$22(a0)
0000BA9C 6600                       		bne.s	loc_B54E
0000BA9E 08A8 0000 0034             		bclr	#0,$34(a0)
0000BAA4 6000                       		bra.s	loc_B582
0000BAA6                            ; ===========================================================================
0000BAA6                            
0000BAA6                            loc_B54E:
0000BAA6 4A28 0034                  		tst.b	$34(a0)
0000BAAA 6600                       		bne.s	loc_B582
0000BAAC 117C 0001 0034             		move.b	#1,$34(a0)
0000BAB2 08E8 0000 0035             		bset	#0,$35(a0)
0000BAB8 6700                       		beq.s	loc_B582
0000BABA 08E8 0007 0034             		bset	#7,$34(a0)
0000BAC0 317C 0010 0036             		move.w	#$10,$36(a0)
0000BAC6 117C 000A 0038             		move.b	#$A,$38(a0)
0000BACC 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BAD2 6600                       		bne.s	loc_B582
0000BAD4 317C 0040 0036             		move.w	#$40,$36(a0)
0000BADA                            
0000BADA                            loc_B582:
0000BADA 4A28 0034                  		tst.b	$34(a0)
0000BADE 6A00                       		bpl.s	loc_B5AA
0000BAE0 4A28 0038                  		tst.b	$38(a0)
0000BAE4 6700                       		beq.s	loc_B594
0000BAE6 5328 0038                  		subq.b	#1,$38(a0)
0000BAEA 6600                       		bne.s	loc_B5AA
0000BAEC                            
0000BAEC                            loc_B594:
0000BAEC 4A68 0032                  		tst.w	$32(a0)
0000BAF0 6700                       		beq.s	loc_B5A4
0000BAF2 5368 0032                  		subq.w	#1,$32(a0)
0000BAF6 5368 0036                  		subq.w	#1,$36(a0)
0000BAFA 6600                       		bne.s	loc_B5AA
0000BAFC                            
0000BAFC                            loc_B5A4:
0000BAFC 08A8 0007 0034             		bclr	#7,$34(a0)
0000BB02                            
0000BB02                            loc_B5AA:
0000BB02 3028 0032                  		move.w	$32(a0),d0
0000BB06 6000                       		bra.s	loc_B5EE
0000BB08                            ; ===========================================================================
0000BB08                            
0000BB08                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BB08 0828 0003 0028             		btst	#3,$28(a0)
0000BB0E 6700                       		beq.s	Obj30_ChkSwitch
0000BB10 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BB14 0440 0010                  		subi.w	#$10,d0
0000BB18 6000                       		bra.s	loc_B5EE
0000BB1A                            ; ===========================================================================
0000BB1A                            
0000BB1A                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BB1A 4A28 0034                  		tst.b	$34(a0)
0000BB1E 6600                       		bne.s	loc_B5E0
0000BB20 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BB24 7000                       		moveq	#0,d0
0000BB26 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BB2A E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BB2C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BB30 6700                       		beq.s	loc_B5EA	; if not, branch
0000BB32 117C 0001 0034             		move.b	#1,$34(a0)
0000BB38                            
0000BB38                            loc_B5E0:
0000BB38 4A68 0032                  		tst.w	$32(a0)
0000BB3C 6700                       		beq.s	loc_B5EA
0000BB3E 5568 0032                  		subq.w	#2,$32(a0)
0000BB42                            
0000BB42                            loc_B5EA:
0000BB42 3028 0032                  		move.w	$32(a0),d0
0000BB46                            
0000BB46                            loc_B5EE:
0000BB46 3228 0030                  		move.w	$30(a0),d1
0000BB4A 9240                       		sub.w	d0,d1
0000BB4C 3141 000C                  		move.w	d1,$C(a0)
0000BB50 4E75                       		rts	
0000BB52                            ; ===========================================================================
0000BB52                            ; ---------------------------------------------------------------------------
0000BB52                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB52                            ; ---------------------------------------------------------------------------
0000BB52                            Map_obj30:
0000BB52                            	include "_maps\obj30.asm"
0000BB52                            ; ---------------------------------------------------------------------------
0000BB52                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BB52                            ; ---------------------------------------------------------------------------
0000BB52 0000                       		dc.w byte_B600-Map_obj30
0000BB54 0000                       		dc.w byte_B63D-Map_obj30
0000BB56 0000                       		dc.w byte_B648-Map_obj30
0000BB58 0C                         byte_B600:	dc.b $C
0000BB59 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BB5E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BB63 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BB68 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BB6D E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BB72 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BB77 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BB7C 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BB81 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BB86 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB8B 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB90 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB95 02                         byte_B63D:	dc.b 2
0000BB96 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB9B 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BBA0 0A                         byte_B648:	dc.b $A
0000BBA1 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BBA6 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BBAB D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BBB0 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BBB5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BBBA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BBBF 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BBC4 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BBC9 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BBCE 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BBD4 00                         		even
0000BBD4 00                         		even
0000BBD4                            
0000BBD4                            ; ===========================================================================
0000BBD4                            ; ---------------------------------------------------------------------------
0000BBD4                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BBD4                            ; ---------------------------------------------------------------------------
0000BBD4                            
0000BBD4                            Obj31:					; XREF: Obj_Index
0000BBD4 7000                       		moveq	#0,d0
0000BBD6 1028 0024                  		move.b	$24(a0),d0
0000BBDA 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BBDE 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BBE2                            ; ===========================================================================
0000BBE2 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BBE4 0000                       		dc.w loc_B798-Obj31_Index
0000BBE6 0000                       		dc.w loc_B7FE-Obj31_Index
0000BBE8 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BBEA 0000                       		dc.w loc_B7E2-Obj31_Index
0000BBEC                            
0000BBEC 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BBEE 0100                       		dc.b 1,	0
0000BBF0                            
0000BBF0 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BBF3 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BBF6 08CC 03                    		dc.b 8,	$CC, 3
0000BBF9 06F0 02                    		dc.b 6,	$F0, 2
0000BBFC                            
0000BBFC 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BC00 5000 7800                  		dc.w $5000, $7800
0000BC04 3800 5800                  		dc.w $3800, $5800
0000BC08 B800                       		dc.w $B800
0000BC0A                            ; ===========================================================================
0000BC0A                            
0000BC0A                            Obj31_Main:				; XREF: Obj31_Index
0000BC0A 7000                       		moveq	#0,d0
0000BC0C 1028 0028                  		move.b	$28(a0),d0
0000BC10 6A00                       		bpl.s	loc_B6CE
0000BC12 0240 007F                  		andi.w	#$7F,d0
0000BC16 D040                       		add.w	d0,d0
0000BC18 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BC1C 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BC20 101A                       		move.b	(a2)+,d0
0000BC22 1140 0028                  		move.b	d0,$28(a0)
0000BC26                            
0000BC26                            loc_B6CE:
0000BC26 0200 000F                  		andi.b	#$F,d0
0000BC2A D040                       		add.w	d0,d0
0000BC2C 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BC30 4A40                       		tst.w	d0
0000BC32 6600                       		bne.s	loc_B6E0
0000BC34 3142 0032                  		move.w	d2,$32(a0)
0000BC38                            
0000BC38                            loc_B6E0:
0000BC38 45F9 0000 BBF0             		lea	(Obj31_Var).l,a2
0000BC3E 2248                       		movea.l	a0,a1
0000BC40 7203                       		moveq	#3,d1
0000BC42 6000                       		bra.s	Obj31_MakeStomper
0000BC44                            ; ===========================================================================
0000BC44                            
0000BC44                            Obj31_Loop:
0000BC44 6100 0000                  		bsr.w	SingleObjLoad2
0000BC48 6600 0000                  		bne.w	Obj31_SetSize
0000BC4C                            
0000BC4C                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BC4C 135A 0024                  		move.b	(a2)+,$24(a1)
0000BC50 12BC 0031                  		move.b	#$31,0(a1)
0000BC54 3368 0008 0008             		move.w	8(a0),8(a1)
0000BC5A 101A                       		move.b	(a2)+,d0
0000BC5C 4880                       		ext.w	d0
0000BC5E D068 000C                  		add.w	$C(a0),d0
0000BC62 3340 000C                  		move.w	d0,$C(a1)
0000BC66 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BC6E 337C 0300 0002             		move.w	#$300,2(a1)
0000BC74 137C 0004 0001             		move.b	#4,1(a1)
0000BC7A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC80 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC86 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC8C 3342 0034                  		move.w	d2,$34(a1)
0000BC90 137C 0004 0018             		move.b	#4,$18(a1)
0000BC96 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC9A 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BCA0 6600                       		bne.s	loc_B76A
0000BCA2 5341                       		subq.w	#1,d1
0000BCA4 1028 0028                  		move.b	$28(a0),d0
0000BCA8 0240 00F0                  		andi.w	#$F0,d0
0000BCAC 0C40 0020                  		cmpi.w	#$20,d0
0000BCB0 679A                       		beq.s	Obj31_MakeStomper
0000BCB2 137C 0038 0019             		move.b	#$38,$19(a1)
0000BCB8 137C 0090 0020             		move.b	#$90,$20(a1)
0000BCBE 5241                       		addq.w	#1,d1
0000BCC0                            
0000BCC0                            loc_B76A:
0000BCC0 2348 003C                  		move.l	a0,$3C(a1)
0000BCC4 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BCC8                            
0000BCC8 137C 0003 0018             		move.b	#3,$18(a1)
0000BCCE                            
0000BCCE                            Obj31_SetSize:
0000BCCE 7000                       		moveq	#0,d0
0000BCD0 1028 0028                  		move.b	$28(a0),d0
0000BCD4 E648                       		lsr.w	#3,d0
0000BCD6 0200 000E                  		andi.b	#$E,d0
0000BCDA 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BCDE 115A 0019                  		move.b	(a2)+,$19(a0)
0000BCE2 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BCE6 6000                       		bra.s	loc_B798
0000BCE8                            ; ===========================================================================
0000BCE8 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BCEA 3009                       		dc.b $30, 9
0000BCEC 100A                       		dc.b $10, $A
0000BCEE                            ; ===========================================================================
0000BCEE                            
0000BCEE                            loc_B798:				; XREF: Obj31_Index
0000BCEE 6100 0000                  		bsr.w	Obj31_Types
0000BCF2 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BCF8 7200                       		moveq	#0,d1
0000BCFA 1228 0019                  		move.b	$19(a0),d1
0000BCFE 0641 000B                  		addi.w	#$B,d1
0000BD02 343C 000C                  		move.w	#$C,d2
0000BD06 363C 000D                  		move.w	#$D,d3
0000BD0A 3828 0008                  		move.w	8(a0),d4
0000BD0E 6100 0000                  		bsr.w	SolidObject
0000BD12 0828 0003 0022             		btst	#3,$22(a0)
0000BD18 6700                       		beq.s	Obj31_Display
0000BD1A 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD20 6400                       		bcc.s	Obj31_Display
0000BD22 2448                       		movea.l	a0,a2
0000BD24 41F8 D000                  		lea	($FFFFD000).w,a0
0000BD28 4EB9 0000 0000             		jsr	KillSonic
0000BD2E 204A                       		movea.l	a2,a0
0000BD30                            
0000BD30                            Obj31_Display:
0000BD30 6100 0000                  		bsr.w	DisplaySprite
0000BD34 6000 0000                  		bra.w	Obj31_ChkDel
0000BD38                            ; ===========================================================================
0000BD38                            
0000BD38                            loc_B7E2:				; XREF: Obj31_Index
0000BD38 117C 0080 0016             		move.b	#$80,$16(a0)
0000BD3E 08E8 0004 0001             		bset	#4,1(a0)
0000BD44 2268 003C                  		movea.l	$3C(a0),a1
0000BD48 1029 0032                  		move.b	$32(a1),d0
0000BD4C EA08                       		lsr.b	#5,d0
0000BD4E 5600                       		addq.b	#3,d0
0000BD50 1140 001A                  		move.b	d0,$1A(a0)
0000BD54                            
0000BD54                            loc_B7FE:				; XREF: Obj31_Index
0000BD54 2268 003C                  		movea.l	$3C(a0),a1
0000BD58 7000                       		moveq	#0,d0
0000BD5A 1029 0032                  		move.b	$32(a1),d0
0000BD5E D068 0030                  		add.w	$30(a0),d0
0000BD62 3140 000C                  		move.w	d0,$C(a0)
0000BD66                            
0000BD66                            Obj31_Display2:				; XREF: Obj31_Index
0000BD66 6100 0000                  		bsr.w	DisplaySprite
0000BD6A                            
0000BD6A                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BD6A 3028 0008                  		move.w	8(a0),d0
0000BD6E 0240 FF80                  		andi.w	#$FF80,d0
0000BD72 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD76 0441 0080                  		subi.w	#$80,d1
0000BD7A 0241 FF80                  		andi.w	#$FF80,d1
0000BD7E 9041                       		sub.w	d1,d0
0000BD80 0C40 0280                  		cmpi.w	#$280,d0
0000BD84 6200 0000                  		bhi.w	DeleteObject
0000BD88 4E75                       		rts	
0000BD8A                            ; ===========================================================================
0000BD8A                            
0000BD8A                            Obj31_Types:				; XREF: loc_B798
0000BD8A 1028 0028                  		move.b	$28(a0),d0
0000BD8E 0240 000F                  		andi.w	#$F,d0
0000BD92 D040                       		add.w	d0,d0
0000BD94 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD98 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD9C                            ; ===========================================================================
0000BD9C 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD9E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BDA0 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BDA2 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BDA4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BDA6 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BDA8 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BDAA                            ; ===========================================================================
0000BDAA                            
0000BDAA                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BDAA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BDAE 7000                       		moveq	#0,d0
0000BDB0 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BDB4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BDB8 6700                       		beq.s	loc_B8A8	; if not, branch
0000BDBA 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BDBE 6A00                       		bpl.s	loc_B872
0000BDC0 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BDC6 6700                       		beq.s	loc_B8A0
0000BDC8                            
0000BDC8                            loc_B872:
0000BDC8 4A68 0032                  		tst.w	$32(a0)
0000BDCC 6700                       		beq.s	loc_B8A0
0000BDCE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BDD2 0200 000F                  		andi.b	#$F,d0
0000BDD6 6600                       		bne.s	loc_B892
0000BDD8 4A28 0001                  		tst.b	1(a0)
0000BDDC 6A00                       		bpl.s	loc_B892
0000BDDE 303C 00C7                  		move.w	#$C7,d0
0000BDE2 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BDE8                            
0000BDE8                            loc_B892:
0000BDE8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BDEE 6400                       		bcc.s	Obj31_Restart
0000BDF0 317C 0000 0032             		move.w	#0,$32(a0)
0000BDF6                            
0000BDF6                            loc_B8A0:
0000BDF6 317C 0000 0012             		move.w	#0,$12(a0)
0000BDFC 6000                       		bra.s	Obj31_Restart
0000BDFE                            ; ===========================================================================
0000BDFE                            
0000BDFE                            loc_B8A8:				; XREF: Obj31_Type00
0000BDFE 3228 0034                  		move.w	$34(a0),d1
0000BE02 B268 0032                  		cmp.w	$32(a0),d1
0000BE06 6700                       		beq.s	Obj31_Restart
0000BE08 3028 0012                  		move.w	$12(a0),d0
0000BE0C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE12 D168 0032                  		add.w	d0,$32(a0)
0000BE16 B268 0032                  		cmp.w	$32(a0),d1
0000BE1A 6200                       		bhi.s	Obj31_Restart
0000BE1C 3141 0032                  		move.w	d1,$32(a0)
0000BE20 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE26 4A28 0001                  		tst.b	1(a0)
0000BE2A 6A00                       		bpl.s	Obj31_Restart
0000BE2C 303C 00BD                  		move.w	#$BD,d0
0000BE30 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE36                            
0000BE36                            Obj31_Restart:
0000BE36 7000                       		moveq	#0,d0
0000BE38 1028 0032                  		move.b	$32(a0),d0
0000BE3C D068 0030                  		add.w	$30(a0),d0
0000BE40 3140 000C                  		move.w	d0,$C(a0)
0000BE44 4E75                       		rts	
0000BE46                            ; ===========================================================================
0000BE46                            
0000BE46                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BE46 4A68 0036                  		tst.w	$36(a0)
0000BE4A 6700                       		beq.s	loc_B938
0000BE4C 4A68 0038                  		tst.w	$38(a0)
0000BE50 6700                       		beq.s	loc_B902
0000BE52 5368 0038                  		subq.w	#1,$38(a0)
0000BE56 6000                       		bra.s	loc_B97C
0000BE58                            ; ===========================================================================
0000BE58                            
0000BE58                            loc_B902:
0000BE58 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BE5C 0200 000F                  		andi.b	#$F,d0
0000BE60 6600                       		bne.s	loc_B91C
0000BE62 4A28 0001                  		tst.b	1(a0)
0000BE66 6A00                       		bpl.s	loc_B91C
0000BE68 303C 00C7                  		move.w	#$C7,d0
0000BE6C 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BE72                            
0000BE72                            loc_B91C:
0000BE72 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE78 6400                       		bcc.s	loc_B97C
0000BE7A 317C 0000 0032             		move.w	#0,$32(a0)
0000BE80 317C 0000 0012             		move.w	#0,$12(a0)
0000BE86 317C 0000 0036             		move.w	#0,$36(a0)
0000BE8C 6000                       		bra.s	loc_B97C
0000BE8E                            ; ===========================================================================
0000BE8E                            
0000BE8E                            loc_B938:				; XREF: Obj31_Type01
0000BE8E 3228 0034                  		move.w	$34(a0),d1
0000BE92 B268 0032                  		cmp.w	$32(a0),d1
0000BE96 6700                       		beq.s	loc_B97C
0000BE98 3028 0012                  		move.w	$12(a0),d0
0000BE9C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BEA2 D168 0032                  		add.w	d0,$32(a0)
0000BEA6 B268 0032                  		cmp.w	$32(a0),d1
0000BEAA 6200                       		bhi.s	loc_B97C
0000BEAC 3141 0032                  		move.w	d1,$32(a0)
0000BEB0 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BEB6 317C 0001 0036             		move.w	#1,$36(a0)
0000BEBC 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BEC2 4A28 0001                  		tst.b	1(a0)
0000BEC6 6A00                       		bpl.s	loc_B97C
0000BEC8 303C 00BD                  		move.w	#$BD,d0
0000BECC 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BED2                            
0000BED2                            loc_B97C:
0000BED2 6000 FF62                  		bra.w	Obj31_Restart
0000BED6                            ; ===========================================================================
0000BED6                            
0000BED6                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BED6 3038 D008                  		move.w	($FFFFD008).w,d0
0000BEDA 9068 0008                  		sub.w	8(a0),d0
0000BEDE 6400                       		bcc.s	loc_B98C
0000BEE0 4440                       		neg.w	d0
0000BEE2                            
0000BEE2                            loc_B98C:
0000BEE2 0C40 0090                  		cmpi.w	#$90,d0
0000BEE6 6400                       		bcc.s	loc_B996
0000BEE8 5228 0028                  		addq.b	#1,$28(a0)
0000BEEC                            
0000BEEC                            loc_B996:
0000BEEC 6000 FF48                  		bra.w	Obj31_Restart
0000BEF0                            ; ===========================================================================
0000BEF0                            ; ---------------------------------------------------------------------------
0000BEF0                            ; Object 45 - spiked metal block from beta version (MZ)
0000BEF0                            ; ---------------------------------------------------------------------------
0000BEF0                            
0000BEF0                            Obj45:					; XREF: Obj_Index
0000BEF0 7000                       		moveq	#0,d0
0000BEF2 1028 0024                  		move.b	$24(a0),d0
0000BEF6 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BEFA 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BEFE                            ; ===========================================================================
0000BEFE 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BF00 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BF02 0000                       		dc.w loc_BA8E-Obj45_Index
0000BF04 0000                       		dc.w Obj45_Display-Obj45_Index
0000BF06 0000                       		dc.w loc_BA7A-Obj45_Index
0000BF08                            
0000BF08 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BF0B 04E4 01                    		dc.b	4, $E4,	  1
0000BF0E 0834 03                    		dc.b	8, $34,	  3
0000BF11 0628 02                    		dc.b	6, $28,	  2
0000BF14                            
0000BF14 3800                       word_B9BE:	dc.w $3800
0000BF16 A000                       		dc.w -$6000
0000BF18 5000                       		dc.w $5000
0000BF1A                            ; ===========================================================================
0000BF1A                            
0000BF1A                            Obj45_Main:				; XREF: Obj45_Index
0000BF1A 7000                       		moveq	#0,d0
0000BF1C 1028 0028                  		move.b	$28(a0),d0
0000BF20 D040                       		add.w	d0,d0
0000BF22 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BF26 45F9 0000 BF08             		lea	(Obj45_Var).l,a2
0000BF2C 2248                       		movea.l	a0,a1
0000BF2E 7203                       		moveq	#3,d1
0000BF30 6000                       		bra.s	Obj45_Load
0000BF32                            ; ===========================================================================
0000BF32                            
0000BF32                            Obj45_Loop:
0000BF32 6100 0000                  		bsr.w	SingleObjLoad2
0000BF36 6600                       		bne.s	loc_BA52
0000BF38                            
0000BF38                            Obj45_Load:				; XREF: Obj45_Main
0000BF38 135A 0024                  		move.b	(a2)+,$24(a1)
0000BF3C 12BC 0045                  		move.b	#$45,0(a1)
0000BF40 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BF46 101A                       		move.b	(a2)+,d0
0000BF48 4880                       		ext.w	d0
0000BF4A D068 0008                  		add.w	8(a0),d0
0000BF4E 3340 0008                  		move.w	d0,8(a1)
0000BF52 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BF5A 337C 0300 0002             		move.w	#$300,2(a1)
0000BF60 137C 0004 0001             		move.b	#4,1(a1)
0000BF66 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BF6C 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BF72 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF78 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF7E 3342 0034                  		move.w	d2,$34(a1)
0000BF82 137C 0004 0018             		move.b	#4,$18(a1)
0000BF88 0C12 0001                  		cmpi.b	#1,(a2)
0000BF8C 6600                       		bne.s	loc_BA40
0000BF8E 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF94                            
0000BF94                            loc_BA40:
0000BF94 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF98 2348 003C                  		move.l	a0,$3C(a1)
0000BF9C 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BFA0                            
0000BFA0 137C 0003 0018             		move.b	#3,$18(a1)
0000BFA6                            
0000BFA6                            loc_BA52:
0000BFA6 117C 0010 0019             		move.b	#$10,$19(a0)
0000BFAC                            
0000BFAC                            Obj45_Solid:				; XREF: Obj45_Index
0000BFAC 3F28 0008                  		move.w	8(a0),-(sp)
0000BFB0 6100 0000                  		bsr.w	Obj45_Move
0000BFB4 323C 0017                  		move.w	#$17,d1
0000BFB8 343C 0020                  		move.w	#$20,d2
0000BFBC 363C 0020                  		move.w	#$20,d3
0000BFC0 381F                       		move.w	(sp)+,d4
0000BFC2 6100 0000                  		bsr.w	SolidObject
0000BFC6 6100 0000                  		bsr.w	DisplaySprite
0000BFCA 6000 0000                  		bra.w	Obj45_ChkDel
0000BFCE                            ; ===========================================================================
0000BFCE                            
0000BFCE                            loc_BA7A:				; XREF: Obj45_Index
0000BFCE 2268 003C                  		movea.l	$3C(a0),a1
0000BFD2 1029 0032                  		move.b	$32(a1),d0
0000BFD6 0600 0010                  		addi.b	#$10,d0
0000BFDA EA08                       		lsr.b	#5,d0
0000BFDC 5600                       		addq.b	#3,d0
0000BFDE 1140 001A                  		move.b	d0,$1A(a0)
0000BFE2                            
0000BFE2                            loc_BA8E:				; XREF: Obj45_Index
0000BFE2 2268 003C                  		movea.l	$3C(a0),a1
0000BFE6 7000                       		moveq	#0,d0
0000BFE8 1029 0032                  		move.b	$32(a1),d0
0000BFEC 4440                       		neg.w	d0
0000BFEE D068 0030                  		add.w	$30(a0),d0
0000BFF2 3140 0008                  		move.w	d0,8(a0)
0000BFF6                            
0000BFF6                            Obj45_Display:				; XREF: Obj45_Index
0000BFF6 6100 0000                  		bsr.w	DisplaySprite
0000BFFA                            
0000BFFA                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BFFA 3028 003A                  		move.w	$3A(a0),d0
0000BFFE 0240 FF80                  		andi.w	#$FF80,d0
0000C002 3238 F700                  		move.w	($FFFFF700).w,d1
0000C006 0441 0080                  		subi.w	#$80,d1
0000C00A 0241 FF80                  		andi.w	#$FF80,d1
0000C00E 9041                       		sub.w	d1,d0
0000C010 0C40 0280                  		cmpi.w	#$280,d0
0000C014 6200 0000                  		bhi.w	DeleteObject
0000C018 4E75                       		rts	
0000C01A                            
0000C01A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C01A                            
0000C01A                            
0000C01A                            Obj45_Move:				; XREF: Obj45_Solid
0000C01A 7000                       		moveq	#0,d0
0000C01C 1028 0028                  		move.b	$28(a0),d0
0000C020 D040                       		add.w	d0,d0
0000C022 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C026 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C02A                            ; End of function Obj45_Move
0000C02A                            
0000C02A                            ; ===========================================================================
0000C02A 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C02C 0000                       		dc.w loc_BADA-off_BAD6
0000C02E                            ; ===========================================================================
0000C02E                            
0000C02E                            loc_BADA:				; XREF: off_BAD6
0000C02E 4A68 0036                  		tst.w	$36(a0)
0000C032 6700                       		beq.s	loc_BB08
0000C034 4A68 0038                  		tst.w	$38(a0)
0000C038 6700                       		beq.s	loc_BAEC
0000C03A 5368 0038                  		subq.w	#1,$38(a0)
0000C03E 6000                       		bra.s	loc_BB3C
0000C040                            ; ===========================================================================
0000C040                            
0000C040                            loc_BAEC:
0000C040 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C046 6400                       		bcc.s	loc_BB3C
0000C048 317C 0000 0032             		move.w	#0,$32(a0)
0000C04E 317C 0000 0010             		move.w	#0,$10(a0)
0000C054 317C 0000 0036             		move.w	#0,$36(a0)
0000C05A 6000                       		bra.s	loc_BB3C
0000C05C                            ; ===========================================================================
0000C05C                            
0000C05C                            loc_BB08:				; XREF: loc_BADA
0000C05C 3228 0034                  		move.w	$34(a0),d1
0000C060 B268 0032                  		cmp.w	$32(a0),d1
0000C064 6700                       		beq.s	loc_BB3C
0000C066 3028 0010                  		move.w	$10(a0),d0
0000C06A 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C070 D168 0032                  		add.w	d0,$32(a0)
0000C074 B268 0032                  		cmp.w	$32(a0),d1
0000C078 6200                       		bhi.s	loc_BB3C
0000C07A 3141 0032                  		move.w	d1,$32(a0)
0000C07E 317C 0000 0010             		move.w	#0,$10(a0)
0000C084 317C 0001 0036             		move.w	#1,$36(a0)
0000C08A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C090                            
0000C090                            loc_BB3C:
0000C090 7000                       		moveq	#0,d0
0000C092 1028 0032                  		move.b	$32(a0),d0
0000C096 4440                       		neg.w	d0
0000C098 D068 0030                  		add.w	$30(a0),d0
0000C09C 3140 0008                  		move.w	d0,8(a0)
0000C0A0 4E75                       		rts	
0000C0A2                            ; ===========================================================================
0000C0A2                            ; ---------------------------------------------------------------------------
0000C0A2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C0A2                            ; ---------------------------------------------------------------------------
0000C0A2                            Map_obj31:
0000C0A2                            	include "_maps\obj31.asm"
0000C0A2                            ; ---------------------------------------------------------------------------
0000C0A2                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C0A2                            ; ---------------------------------------------------------------------------
0000C0A2 0000                       		dc.w byte_BB64-Map_obj31
0000C0A4 0000                       		dc.w byte_BB7E-Map_obj31
0000C0A6 0000                       		dc.w byte_BB98-Map_obj31
0000C0A8 0000                       		dc.w byte_BB9E-Map_obj31
0000C0AA 0000                       		dc.w byte_BBA9-Map_obj31
0000C0AC 0000                       		dc.w byte_BBBE-Map_obj31
0000C0AE 0000                       		dc.w byte_BBDD-Map_obj31
0000C0B0 0000                       		dc.w byte_BC06-Map_obj31
0000C0B2 0000                       		dc.w byte_BC06-Map_obj31
0000C0B4 0000                       		dc.w byte_BC39-Map_obj31
0000C0B6 0000                       		dc.w byte_BC53-Map_obj31
0000C0B8 05                         byte_BB64:	dc.b 5
0000C0B9 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C0BE F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C0C3 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C0C8 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C0CD F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C0D2 05                         byte_BB7E:	dc.b 5
0000C0D3 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C0D8 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C0DD F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C0E2 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C0E7 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C0EC 01                         byte_BB98:	dc.b 1
0000C0ED DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C0F2 02                         byte_BB9E:	dc.b 2
0000C0F3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0F8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0FD 04                         byte_BBA9:	dc.b 4
0000C0FE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C103 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C108 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C10D 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C112 06                         byte_BBBE:	dc.b 6
0000C113 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C118 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C11D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C122 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C127 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C12C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C131 08                         byte_BBDD:	dc.b 8
0000C132 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C137 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C13C C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C141 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C146 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C14B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C150 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C155 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C15A 0A                         byte_BC06:	dc.b $A
0000C15B 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C160 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C165 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C16A B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C16F C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C174 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C179 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C17E F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C183 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C188 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C18D 05                         byte_BC39:	dc.b 5
0000C18E F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C193 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C198 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C19D F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C1A2 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C1A7 01                         byte_BC53:	dc.b 1
0000C1A8 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C1AE 00                         		even
0000C1AE 00                         		even
0000C1AE                            
0000C1AE                            ; ---------------------------------------------------------------------------
0000C1AE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C1AE                            ; ---------------------------------------------------------------------------
0000C1AE                            Map_obj45:
0000C1AE                            	include "_maps\obj45.asm"
0000C1AE                            ; ---------------------------------------------------------------------------
0000C1AE                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C1AE                            ; ---------------------------------------------------------------------------
0000C1AE 0000                       		dc.w byte_BC6C-Map_obj45
0000C1B0 0000                       		dc.w byte_BC7C-Map_obj45
0000C1B2 0000                       		dc.w byte_BC8C-Map_obj45
0000C1B4 0000                       		dc.w byte_BC92-Map_obj45
0000C1B6 0000                       		dc.w byte_BC9D-Map_obj45
0000C1B8 0000                       		dc.w byte_BCB2-Map_obj45
0000C1BA 0000                       		dc.w byte_BCD1-Map_obj45
0000C1BC 0000                       		dc.w byte_BCFA-Map_obj45
0000C1BE 0000                       		dc.w byte_BCFA-Map_obj45
0000C1C0 03                         byte_BC6C:	dc.b 3
0000C1C1 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C1C6 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C1CB F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C1D0 03                         byte_BC7C:	dc.b 3
0000C1D1 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C1D6 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C1DB 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C1E0 01                         byte_BC8C:	dc.b 1
0000C1E1 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C1E6 02                         byte_BC92:	dc.b 2
0000C1E7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1EC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1F1 04                         byte_BC9D:	dc.b 4
0000C1F2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1F7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1FC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C201 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C206 06                         byte_BCB2:	dc.b 6
0000C207 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C20C F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C211 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C216 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C21B F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C220 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C225 08                         byte_BCD1:	dc.b 8
0000C226 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C22B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C230 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C235 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C23A F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C23F F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C244 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C249 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C24E 08                         byte_BCFA:	dc.b 8
0000C24F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C254 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C259 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C25E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C263 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C268 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C26D F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C272 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C277 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C27C F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C282 00                         		even
0000C282 00                         		even
0000C282                            
0000C282                            ; ===========================================================================
0000C282                            ; ---------------------------------------------------------------------------
0000C282                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C282                            ; ---------------------------------------------------------------------------
0000C282                            
0000C282                            Obj32:					; XREF: Obj_Index
0000C282 7000                       		moveq	#0,d0
0000C284 1028 0024                  		move.b	$24(a0),d0
0000C288 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C28C 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C290                            ; ===========================================================================
0000C290 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C292 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C294                            ; ===========================================================================
0000C294                            
0000C294                            Obj32_Main:				; XREF: Obj32_Index
0000C294 5428 0024                  		addq.b	#2,$24(a0)
0000C298 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C2A0 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C2A6 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C2AC 6700                       		beq.s	loc_BD60
0000C2AE 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C2B4                            
0000C2B4                            loc_BD60:
0000C2B4 117C 0004 0001             		move.b	#4,1(a0)
0000C2BA 117C 0010 0019             		move.b	#$10,$19(a0)
0000C2C0 117C 0004 0018             		move.b	#4,$18(a0)
0000C2C6 5668 000C                  		addq.w	#3,$C(a0)
0000C2CA                            
0000C2CA                            Obj32_Pressed:				; XREF: Obj32_Index
0000C2CA 4A28 0001                  		tst.b	1(a0)
0000C2CE 6A00                       		bpl.s	Obj32_Display
0000C2D0 323C 001B                  		move.w	#$1B,d1
0000C2D4 343C 0005                  		move.w	#5,d2
0000C2D8 363C 0005                  		move.w	#5,d3
0000C2DC 3828 0008                  		move.w	8(a0),d4
0000C2E0 6100 0000                  		bsr.w	SolidObject
0000C2E4 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C2EA 1028 0028                  		move.b	$28(a0),d0
0000C2EE 0240 000F                  		andi.w	#$F,d0
0000C2F2 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C2F6 47F3 0000                  		lea	(a3,d0.w),a3
0000C2FA 7600                       		moveq	#0,d3
0000C2FC 0828 0006 0028             		btst	#6,$28(a0)
0000C302 6700                       		beq.s	loc_BDB2
0000C304 7607                       		moveq	#7,d3
0000C306                            
0000C306                            loc_BDB2:
0000C306 4A28 0028                  		tst.b	$28(a0)
0000C30A 6A00                       		bpl.s	loc_BDBE
0000C30C 6100 0000                  		bsr.w	Obj32_MZBlock
0000C310 6600                       		bne.s	loc_BDC8
0000C312                            
0000C312                            loc_BDBE:
0000C312 4A28 0025                  		tst.b	$25(a0)
0000C316 6600                       		bne.s	loc_BDC8
0000C318 0793                       		bclr	d3,(a3)
0000C31A 6000                       		bra.s	loc_BDDE
0000C31C                            ; ===========================================================================
0000C31C                            
0000C31C                            loc_BDC8:
0000C31C 4A13                       		tst.b	(a3)
0000C31E 6600                       		bne.s	loc_BDD6
0000C320 303C 00CD                  		move.w	#$CD,d0
0000C324 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play switch sound
0000C32A                            
0000C32A                            loc_BDD6:
0000C32A 07D3                       		bset	d3,(a3)
0000C32C 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C332                            
0000C332                            loc_BDDE:
0000C332 0828 0005 0028             		btst	#5,$28(a0)
0000C338 6700                       		beq.s	Obj32_Display
0000C33A 5328 001E                  		subq.b	#1,$1E(a0)
0000C33E 6A00                       		bpl.s	Obj32_Display
0000C340 117C 0007 001E             		move.b	#7,$1E(a0)
0000C346 0868 0001 001A             		bchg	#1,$1A(a0)
0000C34C                            
0000C34C                            Obj32_Display:
0000C34C 6100 0000                  		bsr.w	DisplaySprite
0000C350 3028 0008                  		move.w	8(a0),d0
0000C354 0240 FF80                  		andi.w	#$FF80,d0
0000C358 3238 F700                  		move.w	($FFFFF700).w,d1
0000C35C 0441 0080                  		subi.w	#$80,d1
0000C360 0241 FF80                  		andi.w	#$FF80,d1
0000C364 9041                       		sub.w	d1,d0
0000C366 0C40 0280                  		cmpi.w	#$280,d0
0000C36A 6200 0000                  		bhi.w	Obj32_Delete
0000C36E 4E75                       		rts	
0000C370                            ; ===========================================================================
0000C370                            
0000C370                            Obj32_Delete:
0000C370 6100 0000                  		bsr.w	DeleteObject
0000C374 4E75                       		rts	
0000C376                            
0000C376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C376                            
0000C376                            
0000C376                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C376 3F03                       		move.w	d3,-(sp)
0000C378 3428 0008                  		move.w	8(a0),d2
0000C37C 3628 000C                  		move.w	$C(a0),d3
0000C380 0442 0010                  		subi.w	#$10,d2
0000C384 5143                       		subq.w	#8,d3
0000C386 383C 0020                  		move.w	#$20,d4
0000C38A 3A3C 0010                  		move.w	#$10,d5
0000C38E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C392 3C3C 005F                  		move.w	#$5F,d6
0000C396                            
0000C396                            Obj32_MZLoop:
0000C396 4A29 0001                  		tst.b	1(a1)
0000C39A 6A00                       		bpl.s	loc_BE4E
0000C39C 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C3A0 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C3A2                            
0000C3A2                            loc_BE4E:
0000C3A2 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C3A6 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C3AA                            
0000C3AA 361F                       		move.w	(sp)+,d3
0000C3AC 7000                       		moveq	#0,d0
0000C3AE                            
0000C3AE                            locret_BE5A:
0000C3AE 4E75                       		rts	
0000C3B0                            ; ===========================================================================
0000C3B0 1010                       Obj32_MZData:	dc.b $10, $10
0000C3B2                            ; ===========================================================================
0000C3B2                            
0000C3B2                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C3B2 7001                       		moveq	#1,d0
0000C3B4 0240 003F                  		andi.w	#$3F,d0
0000C3B8 D040                       		add.w	d0,d0
0000C3BA 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C3BE 121A                       		move.b	(a2)+,d1
0000C3C0 4881                       		ext.w	d1
0000C3C2 3029 0008                  		move.w	8(a1),d0
0000C3C6 9041                       		sub.w	d1,d0
0000C3C8 9042                       		sub.w	d2,d0
0000C3CA 6400                       		bcc.s	loc_BE80
0000C3CC D241                       		add.w	d1,d1
0000C3CE D041                       		add.w	d1,d0
0000C3D0 6500                       		bcs.s	loc_BE84
0000C3D2 60CE                       		bra.s	loc_BE4E
0000C3D4                            ; ===========================================================================
0000C3D4                            
0000C3D4                            loc_BE80:
0000C3D4 B044                       		cmp.w	d4,d0
0000C3D6 62CA                       		bhi.s	loc_BE4E
0000C3D8                            
0000C3D8                            loc_BE84:
0000C3D8 121A                       		move.b	(a2)+,d1
0000C3DA 4881                       		ext.w	d1
0000C3DC 3029 000C                  		move.w	$C(a1),d0
0000C3E0 9041                       		sub.w	d1,d0
0000C3E2 9043                       		sub.w	d3,d0
0000C3E4 6400                       		bcc.s	loc_BE9A
0000C3E6 D241                       		add.w	d1,d1
0000C3E8 D041                       		add.w	d1,d0
0000C3EA 6500                       		bcs.s	loc_BE9E
0000C3EC 60B4                       		bra.s	loc_BE4E
0000C3EE                            ; ===========================================================================
0000C3EE                            
0000C3EE                            loc_BE9A:
0000C3EE B045                       		cmp.w	d5,d0
0000C3F0 62B0                       		bhi.s	loc_BE4E
0000C3F2                            
0000C3F2                            loc_BE9E:
0000C3F2 361F                       		move.w	(sp)+,d3
0000C3F4 7001                       		moveq	#1,d0
0000C3F6 4E75                       		rts	
0000C3F8                            ; End of function Obj32_MZBlock
0000C3F8                            
0000C3F8                            ; ===========================================================================
0000C3F8                            ; ---------------------------------------------------------------------------
0000C3F8                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3F8                            ; ---------------------------------------------------------------------------
0000C3F8                            Map_obj32:
0000C3F8                            	include "_maps\obj32.asm"
0000C3F8                            ; ---------------------------------------------------------------------------
0000C3F8                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C3F8                            ; ---------------------------------------------------------------------------
0000C3F8 0000                       		dc.w byte_BEAC-Map_obj32
0000C3FA 0000                       		dc.w byte_BEB7-Map_obj32
0000C3FC 0000                       		dc.w byte_BEC2-Map_obj32
0000C3FE 0000                       		dc.w byte_BEB7-Map_obj32
0000C400 02                         byte_BEAC:	dc.b 2
0000C401 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C406 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C40B 02                         byte_BEB7:	dc.b 2
0000C40C F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C411 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C416 02                         byte_BEC2:	dc.b 2
0000C417 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C41C F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C421 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C426                            		even
0000C426                            		even
0000C426                            
0000C426                            ; ===========================================================================
0000C426                            ; ---------------------------------------------------------------------------
0000C426                            ; Object 33 - pushable blocks (MZ, LZ)
0000C426                            ; ---------------------------------------------------------------------------
0000C426                            
0000C426                            Obj33:					; XREF: Obj_Index
0000C426 7000                       		moveq	#0,d0
0000C428 1028 0024                  		move.b	$24(a0),d0
0000C42C 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C430 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C434                            ; ===========================================================================
0000C434 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C436 0000                       		dc.w loc_BF6E-Obj33_Index
0000C438 0000                       		dc.w loc_C02C-Obj33_Index
0000C43A                            
0000C43A 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C43C 4001                       		dc.b $40, 1
0000C43E                            ; ===========================================================================
0000C43E                            
0000C43E                            Obj33_Main:				; XREF: Obj33_Index
0000C43E 5428 0024                  		addq.b	#2,$24(a0)
0000C442 117C 000F 0016             		move.b	#$F,$16(a0)
0000C448 117C 000F 0017             		move.b	#$F,$17(a0)
0000C44E 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C456 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C45C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C462 6600                       		bne.s	loc_BF16
0000C464 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C46A                            
0000C46A                            loc_BF16:
0000C46A 117C 0004 0001             		move.b	#4,1(a0)
0000C470 117C 0003 0018             		move.b	#3,$18(a0)
0000C476 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C47C 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C482 7000                       		moveq	#0,d0
0000C484 1028 0028                  		move.b	$28(a0),d0
0000C488 D040                       		add.w	d0,d0
0000C48A 0240 000E                  		andi.w	#$E,d0
0000C48E 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C492 115A 0019                  		move.b	(a2)+,$19(a0)
0000C496 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C49A 4A28 0028                  		tst.b	$28(a0)
0000C49E 6700                       		beq.s	Obj33_ChkGone
0000C4A0 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C4A6                            
0000C4A6                            Obj33_ChkGone:
0000C4A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C4AA 7000                       		moveq	#0,d0
0000C4AC 1028 0023                  		move.b	$23(a0),d0
0000C4B0 6700                       		beq.s	loc_BF6E
0000C4B2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C4B8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C4BE 6600 0000                  		bne.w	DeleteObject
0000C4C2                            
0000C4C2                            loc_BF6E:				; XREF: Obj33_Index
0000C4C2 4A28 0032                  		tst.b	$32(a0)
0000C4C6 6600 0000                  		bne.w	loc_C046
0000C4CA 7200                       		moveq	#0,d1
0000C4CC 1228 0019                  		move.b	$19(a0),d1
0000C4D0 0641 000B                  		addi.w	#$B,d1
0000C4D4 343C 0010                  		move.w	#$10,d2
0000C4D8 363C 0011                  		move.w	#$11,d3
0000C4DC 3828 0008                  		move.w	8(a0),d4
0000C4E0 6100 0000                  		bsr.w	loc_C186
0000C4E4 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C4EA 6600                       		bne.s	loc_BFC6	; if not, branch
0000C4EC 08A8 0007 0028             		bclr	#7,$28(a0)
0000C4F2 3028 0008                  		move.w	8(a0),d0
0000C4F6 0C40 0A20                  		cmpi.w	#$A20,d0
0000C4FA 6500                       		bcs.s	loc_BFC6
0000C4FC 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C500 6400                       		bcc.s	loc_BFC6
0000C502 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C506 0440 001C                  		subi.w	#$1C,d0
0000C50A 3140 000C                  		move.w	d0,$C(a0)
0000C50E 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C514 08E8 0007 0028             		bset	#7,$28(a0)
0000C51A                            
0000C51A                            loc_BFC6:
0000C51A 3028 0008                  		move.w	8(a0),d0
0000C51E 0240 FF80                  		andi.w	#$FF80,d0
0000C522 3238 F700                  		move.w	($FFFFF700).w,d1
0000C526 0441 0080                  		subi.w	#$80,d1
0000C52A 0241 FF80                  		andi.w	#$FF80,d1
0000C52E 9041                       		sub.w	d1,d0
0000C530 0C40 0280                  		cmpi.w	#$280,d0
0000C534 6200                       		bhi.s	loc_BFE6
0000C536 6000 0000                  		bra.w	DisplaySprite
0000C53A                            ; ===========================================================================
0000C53A                            
0000C53A                            loc_BFE6:
0000C53A 3028 0034                  		move.w	$34(a0),d0
0000C53E 0240 FF80                  		andi.w	#$FF80,d0
0000C542 3238 F700                  		move.w	($FFFFF700).w,d1
0000C546 0441 0080                  		subi.w	#$80,d1
0000C54A 0241 FF80                  		andi.w	#$FF80,d1
0000C54E 9041                       		sub.w	d1,d0
0000C550 0C40 0280                  		cmpi.w	#$280,d0
0000C554 6200                       		bhi.s	loc_C016
0000C556 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C55C 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C562 117C 0004 0024             		move.b	#4,$24(a0)
0000C568 6000                       		bra.s	loc_C02C
0000C56A                            ; ===========================================================================
0000C56A                            
0000C56A                            loc_C016:
0000C56A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C56E 7000                       		moveq	#0,d0
0000C570 1028 0023                  		move.b	$23(a0),d0
0000C574 6700                       		beq.s	loc_C028
0000C576 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C57C                            
0000C57C                            loc_C028:
0000C57C 6000 0000                  		bra.w	DeleteObject
0000C580                            ; ===========================================================================
0000C580                            
0000C580                            loc_C02C:				; XREF: Obj33_Index
0000C580 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C584 6700                       		beq.s	locret_C044
0000C586 117C 0002 0024             		move.b	#2,$24(a0)
0000C58C 4228 0032                  		clr.b	$32(a0)
0000C590 4268 0010                  		clr.w	$10(a0)
0000C594 4268 0012                  		clr.w	$12(a0)
0000C598                            
0000C598                            locret_C044:
0000C598 4E75                       		rts	
0000C59A                            ; ===========================================================================
0000C59A                            
0000C59A                            loc_C046:				; XREF: loc_BF6E
0000C59A 3F28 0008                  		move.w	8(a0),-(sp)
0000C59E 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C5A4 6400                       		bcc.s	loc_C056
0000C5A6 6100 0000                  		bsr.w	SpeedToPos
0000C5AA                            
0000C5AA                            loc_C056:
0000C5AA 0828 0001 0022             		btst	#1,$22(a0)
0000C5B0 6700                       		beq.s	loc_C0A0
0000C5B2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C5B8 4EB9 0000 0000             		jsr	ObjHitFloor
0000C5BE 4A41                       		tst.w	d1
0000C5C0 6A00 0000                  		bpl.w	loc_C09E
0000C5C4 D368 000C                  		add.w	d1,$C(a0)
0000C5C8 4268 0012                  		clr.w	$12(a0)
0000C5CC 08A8 0001 0022             		bclr	#1,$22(a0)
0000C5D2 3011                       		move.w	(a1),d0
0000C5D4 0240 03FF                  		andi.w	#$3FF,d0
0000C5D8 0C40 016A                  		cmpi.w	#$16A,d0
0000C5DC 6500                       		bcs.s	loc_C09E
0000C5DE 3028 0030                  		move.w	$30(a0),d0
0000C5E2 E640                       		asr.w	#3,d0
0000C5E4 3140 0010                  		move.w	d0,$10(a0)
0000C5E8 117C 0001 0032             		move.b	#1,$32(a0)
0000C5EE 4268 000E                  		clr.w	$E(a0)
0000C5F2                            
0000C5F2                            loc_C09E:
0000C5F2 6000                       		bra.s	loc_C0E6
0000C5F4                            ; ===========================================================================
0000C5F4                            
0000C5F4                            loc_C0A0:
0000C5F4 4A68 0010                  		tst.w	$10(a0)
0000C5F8 6700 0000                  		beq.w	loc_C0D6
0000C5FC 6B00                       		bmi.s	loc_C0BC
0000C5FE 7600                       		moveq	#0,d3
0000C600 1628 0019                  		move.b	$19(a0),d3
0000C604 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C60A 4A41                       		tst.w	d1		; has block touched a wall?
0000C60C 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C60E 6000                       		bra.s	loc_C0E6
0000C610                            ; ===========================================================================
0000C610                            
0000C610                            loc_C0BC:
0000C610 7600                       		moveq	#0,d3
0000C612 1628 0019                  		move.b	$19(a0),d3
0000C616 4643                       		not.w	d3
0000C618 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C61E 4A41                       		tst.w	d1		; has block touched a wall?
0000C620 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C622 6000                       		bra.s	loc_C0E6
0000C624                            ; ===========================================================================
0000C624                            
0000C624                            Obj33_StopPush:
0000C624 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C628 6000                       		bra.s	loc_C0E6
0000C62A                            ; ===========================================================================
0000C62A                            
0000C62A                            loc_C0D6:
0000C62A 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C632 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C638 6400                       		bcc.s	loc_C104
0000C63A                            
0000C63A                            loc_C0E6:
0000C63A 7200                       		moveq	#0,d1
0000C63C 1228 0019                  		move.b	$19(a0),d1
0000C640 0641 000B                  		addi.w	#$B,d1
0000C644 343C 0010                  		move.w	#$10,d2
0000C648 363C 0011                  		move.w	#$11,d3
0000C64C 381F                       		move.w	(sp)+,d4
0000C64E 6100 0000                  		bsr.w	loc_C186
0000C652 6100                       		bsr.s	Obj33_ChkLava
0000C654 6000 FEC4                  		bra.w	loc_BFC6
0000C658                            ; ===========================================================================
0000C658                            
0000C658                            loc_C104:
0000C658 381F                       		move.w	(sp)+,d4
0000C65A 43F8 D000                  		lea	($FFFFD000).w,a1
0000C65E 08A9 0003 0022             		bclr	#3,$22(a1)
0000C664 08A8 0003 0022             		bclr	#3,$22(a0)
0000C66A 6000 FECE                  		bra.w	loc_BFE6
0000C66E                            ; ===========================================================================
0000C66E                            
0000C66E                            Obj33_ChkLava:
0000C66E 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C674 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C676 343C FFE0                  		move.w	#-$20,d2
0000C67A 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C680 6700                       		beq.s	Obj33_LoadLava
0000C682 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C688 6700                       		beq.s	Obj33_LoadLava
0000C68A 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C690 6700                       		beq.s	Obj33_LoadLava
0000C692 4E75                       		rts	
0000C694                            ; ===========================================================================
0000C694                            
0000C694                            Obj33_ChkLava2:
0000C694 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C69A 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C69C 343C 0020                  		move.w	#$20,d2
0000C6A0 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C6A6 6700                       		beq.s	Obj33_LoadLava
0000C6A8 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C6AE 6700                       		beq.s	Obj33_LoadLava
0000C6B0                            
0000C6B0                            Obj33_NoLava:
0000C6B0 4E75                       		rts	
0000C6B2                            ; ===========================================================================
0000C6B2                            
0000C6B2                            Obj33_LoadLava:
0000C6B2 6100 0000                  		bsr.w	SingleObjLoad
0000C6B6 6600                       		bne.s	locret_C184
0000C6B8 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C6BC 3368 0008 0008             		move.w	8(a0),8(a1)
0000C6C2 D569 0008                  		add.w	d2,8(a1)
0000C6C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C6CC 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C6D2 2348 003C                  		move.l	a0,$3C(a1)
0000C6D6                            
0000C6D6                            locret_C184:
0000C6D6 4E75                       		rts	
0000C6D8                            ; ===========================================================================
0000C6D8                            
0000C6D8                            loc_C186:				; XREF: loc_BF6E
0000C6D8 1028 0025                  		move.b	$25(a0),d0
0000C6DC 6700 0000                  		beq.w	loc_C218
0000C6E0 5500                       		subq.b	#2,d0
0000C6E2 6600                       		bne.s	loc_C1AA
0000C6E4 6100 B3B8                  		bsr.w	ExitPlatform
0000C6E8 0829 0003 0022             		btst	#3,$22(a1)
0000C6EE 6600                       		bne.s	loc_C1A4
0000C6F0 4228 0025                  		clr.b	$25(a0)
0000C6F4 4E75                       		rts	
0000C6F6                            ; ===========================================================================
0000C6F6                            
0000C6F6                            loc_C1A4:
0000C6F6 3404                       		move.w	d4,d2
0000C6F8 6000 B902                  		bra.w	MvSonicOnPtfm
0000C6FC                            ; ===========================================================================
0000C6FC                            
0000C6FC                            loc_C1AA:
0000C6FC 5500                       		subq.b	#2,d0
0000C6FE 6600                       		bne.s	loc_C1F2
0000C700 6100 0000                  		bsr.w	SpeedToPos
0000C704 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C70A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C710 4A41                       		tst.w	d1
0000C712 6A00 0000                  		bpl.w	locret_C1F0
0000C716 D368 000C                  		add.w	d1,$C(a0)
0000C71A 4268 0012                  		clr.w	$12(a0)
0000C71E 4228 0025                  		clr.b	$25(a0)
0000C722 3011                       		move.w	(a1),d0
0000C724 0240 03FF                  		andi.w	#$3FF,d0
0000C728 0C40 016A                  		cmpi.w	#$16A,d0
0000C72C 6500                       		bcs.s	locret_C1F0
0000C72E 3028 0030                  		move.w	$30(a0),d0
0000C732 E640                       		asr.w	#3,d0
0000C734 3140 0010                  		move.w	d0,$10(a0)
0000C738 117C 0001 0032             		move.b	#1,$32(a0)
0000C73E 4268 000E                  		clr.w	$E(a0)
0000C742                            
0000C742                            locret_C1F0:
0000C742 4E75                       		rts	
0000C744                            ; ===========================================================================
0000C744                            
0000C744                            loc_C1F2:
0000C744 6100 0000                  		bsr.w	SpeedToPos
0000C748 3028 0008                  		move.w	8(a0),d0
0000C74C 0240 000C                  		andi.w	#$C,d0
0000C750 6600 0000                  		bne.w	locret_C2E4
0000C754 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C75A 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C760 4268 0010                  		clr.w	$10(a0)
0000C764 5528 0025                  		subq.b	#2,$25(a0)
0000C768 4E75                       		rts	
0000C76A                            ; ===========================================================================
0000C76A                            
0000C76A                            loc_C218:
0000C76A 6100 0000                  		bsr.w	loc_FAC8
0000C76E 4A44                       		tst.w	d4
0000C770 6700 0000                  		beq.w	locret_C2E4
0000C774 6B00 0000                  		bmi.w	locret_C2E4
0000C778 4A28 0032                  		tst.b	$32(a0)
0000C77C 6700                       		beq.s	loc_C230
0000C77E 6000 0000                  		bra.w	locret_C2E4
0000C782                            ; ===========================================================================
0000C782                            
0000C782                            loc_C230:
0000C782 4A40                       		tst.w	d0
0000C784 6700 0000                  		beq.w	locret_C2E4
0000C788 6B00                       		bmi.s	loc_C268
0000C78A 0829 0000 0022             		btst	#0,$22(a1)
0000C790 6600 0000                  		bne.w	locret_C2E4
0000C794 3F00                       		move.w	d0,-(sp)
0000C796 7600                       		moveq	#0,d3
0000C798 1628 0019                  		move.b	$19(a0),d3
0000C79C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C7A2 301F                       		move.w	(sp)+,d0
0000C7A4 4A41                       		tst.w	d1
0000C7A6 6B00 0000                  		bmi.w	locret_C2E4
0000C7AA 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C7B2 7001                       		moveq	#1,d0
0000C7B4 323C 0040                  		move.w	#$40,d1
0000C7B8 6000                       		bra.s	loc_C294
0000C7BA                            ; ===========================================================================
0000C7BA                            
0000C7BA                            loc_C268:
0000C7BA 0829 0000 0022             		btst	#0,$22(a1)
0000C7C0 6700                       		beq.s	locret_C2E4
0000C7C2 3F00                       		move.w	d0,-(sp)
0000C7C4 7600                       		moveq	#0,d3
0000C7C6 1628 0019                  		move.b	$19(a0),d3
0000C7CA 4643                       		not.w	d3
0000C7CC 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C7D2 301F                       		move.w	(sp)+,d0
0000C7D4 4A41                       		tst.w	d1
0000C7D6 6B00                       		bmi.s	locret_C2E4
0000C7D8 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C7E0 70FF                       		moveq	#-1,d0
0000C7E2 323C FFC0                  		move.w	#-$40,d1
0000C7E6                            
0000C7E6                            loc_C294:
0000C7E6 43F8 D000                  		lea	($FFFFD000).w,a1
0000C7EA D169 0008                  		add.w	d0,8(a1)
0000C7EE 3341 0014                  		move.w	d1,$14(a1)
0000C7F2 337C 0000 0010             		move.w	#0,$10(a1)
0000C7F8 3F00                       		move.w	d0,-(sp)
0000C7FA 303C 00A7                  		move.w	#$A7,d0
0000C7FE 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C804 301F                       		move.w	(sp)+,d0
0000C806 4A28 0028                  		tst.b	$28(a0)
0000C80A 6B00                       		bmi.s	locret_C2E4
0000C80C 3F00                       		move.w	d0,-(sp)
0000C80E 4EB9 0000 0000             		jsr	ObjHitFloor
0000C814 301F                       		move.w	(sp)+,d0
0000C816 0C41 0004                  		cmpi.w	#4,d1
0000C81A 6F00                       		ble.s	loc_C2E0
0000C81C 317C 0400 0010             		move.w	#$400,$10(a0)
0000C822 4A40                       		tst.w	d0
0000C824 6A00                       		bpl.s	loc_C2D8
0000C826 4468 0010                  		neg.w	$10(a0)
0000C82A                            
0000C82A                            loc_C2D8:
0000C82A 117C 0006 0025             		move.b	#6,$25(a0)
0000C830 6000                       		bra.s	locret_C2E4
0000C832                            ; ===========================================================================
0000C832                            
0000C832                            loc_C2E0:
0000C832 D368 000C                  		add.w	d1,$C(a0)
0000C836                            
0000C836                            locret_C2E4:
0000C836 4E75                       		rts	
0000C838                            ; ===========================================================================
0000C838                            ; ---------------------------------------------------------------------------
0000C838                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C838                            ; ---------------------------------------------------------------------------
0000C838                            Map_obj33:
0000C838                            	include "_maps\obj33.asm"
0000C838                            ; ---------------------------------------------------------------------------
0000C838                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C838                            ; ---------------------------------------------------------------------------
0000C838 0000                       		dc.w byte_C2EA-Map_obj33
0000C83A 0000                       		dc.w byte_C2F0-Map_obj33
0000C83C 01                         byte_C2EA:	dc.b 1
0000C83D F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C842 04                         byte_C2F0:	dc.b 4
0000C843 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C848 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C84D F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C852 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C858 00                         		even
0000C858 00                         		even
0000C858                            
0000C858                            ; ===========================================================================
0000C858                            ; ---------------------------------------------------------------------------
0000C858                            ; Object 34 - zone title cards
0000C858                            ; ---------------------------------------------------------------------------
0000C858                            
0000C858                            Obj34:					; XREF: Obj_Index
0000C858 7000                       		moveq	#0,d0
0000C85A 1028 0024                  		move.b	$24(a0),d0
0000C85E 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C862 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C866                            ; ===========================================================================
0000C866 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C868 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C86A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C86C 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C86E                            ; ===========================================================================
0000C86E                            
0000C86E                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C86E 2248                       		movea.l	a0,a1
0000C870 7000                       		moveq	#0,d0
0000C872 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C876 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C87C 6600                       		bne.s	Obj34_CheckFZ
0000C87E 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C880                            
0000C880                            Obj34_CheckFZ:
0000C880 3400                       		move.w	d0,d2
0000C882 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C888 6600                       		bne.s	Obj34_LoadConfig
0000C88A 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C88C 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C88E                            
0000C88E                            Obj34_LoadConfig:
0000C88E 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C894 E948                       		lsl.w	#4,d0
0000C896 D6C0                       		adda.w	d0,a3
0000C898 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C89E 7203                       		moveq	#3,d1
0000C8A0                            
0000C8A0                            Obj34_Loop:
0000C8A0 12BC 0034                  		move.b	#$34,0(a1)
0000C8A4 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C8A8 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C8AC 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C8B0 335A 000A                  		move.w	(a2)+,$A(a1)
0000C8B4 135A 0024                  		move.b	(a2)+,$24(a1)
0000C8B8 101A                       		move.b	(a2)+,d0
0000C8BA 6600                       		bne.s	Obj34_ActNumber
0000C8BC 1002                       		move.b	d2,d0
0000C8BE                            
0000C8BE                            Obj34_ActNumber:
0000C8BE 0C00 0007                  		cmpi.b	#7,d0
0000C8C2 6600                       		bne.s	Obj34_MakeSprite
0000C8C4 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C8C8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C8CE 6600                       		bne.s	Obj34_MakeSprite
0000C8D0 5300                       		subq.b	#1,d0
0000C8D2                            
0000C8D2                            Obj34_MakeSprite:
0000C8D2 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C8D6 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C8DE 337C 8580 0002             		move.w	#$8580,2(a1)
0000C8E4 137C 0078 0019             		move.b	#$78,$19(a1)
0000C8EA 137C 0000 0001             		move.b	#0,1(a1)
0000C8F0 137C 0000 0018             		move.b	#0,$18(a1)
0000C8F6 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C8FC 43E9 0040                  		lea	$40(a1),a1	; next object
0000C900 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C904                            
0000C904                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C904 7210                       		moveq	#$10,d1		; set horizontal speed
0000C906 3028 0030                  		move.w	$30(a0),d0
0000C90A B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C90E 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C910 6C00                       		bge.s	Obj34_Move
0000C912 4441                       		neg.w	d1
0000C914                            
0000C914                            Obj34_Move:
0000C914 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C918                            
0000C918                            loc_C3C8:
0000C918 3028 0008                  		move.w	8(a0),d0
0000C91C 6B00                       		bmi.s	locret_C3D8
0000C91E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C922 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C924 6000 0000                  		bra.w	DisplaySprite
0000C928                            ; ===========================================================================
0000C928                            
0000C928                            locret_C3D8:
0000C928 4E75                       		rts	
0000C92A                            ; ===========================================================================
0000C92A                            
0000C92A                            Obj34_Wait:				; XREF: Obj34_Index
0000C92A 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C92E 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C930 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C934 6000 0000                  		bra.w	DisplaySprite
0000C938                            ; ===========================================================================
0000C938                            
0000C938                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C938 4A28 0001                  		tst.b	1(a0)
0000C93C 6A00                       		bpl.s	Obj34_ChangeArt
0000C93E 7220                       		moveq	#$20,d1
0000C940 3028 0032                  		move.w	$32(a0),d0
0000C944 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C948 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C94A 6C00                       		bge.s	Obj34_Move2
0000C94C 4441                       		neg.w	d1
0000C94E                            
0000C94E                            Obj34_Move2:
0000C94E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C952 3028 0008                  		move.w	8(a0),d0
0000C956 6B00                       		bmi.s	locret_C412
0000C958 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C95C 6400                       		bcc.s	locret_C412	; if yes, branch
0000C95E 6000 0000                  		bra.w	DisplaySprite
0000C962                            ; ===========================================================================
0000C962                            
0000C962                            locret_C412:
0000C962 4E75                       		rts	
0000C964                            ; ===========================================================================
0000C964                            
0000C964                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C964 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C96A 6600                       		bne.s	Obj34_Delete
0000C96C 7002                       		moveq	#2,d0
0000C96E 4EB9 0000 17AA             		jsr	(LoadPLC).l	; load explosion patterns
0000C974 7000                       		moveq	#0,d0
0000C976 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C97A 0640 0015                  		addi.w	#$15,d0
0000C97E 4EB9 0000 17AA             		jsr	(LoadPLC).l	; load animal patterns
0000C984                            
0000C984                            Obj34_Delete:
0000C984 6000 0000                  		bra.w	DeleteObject
0000C988                            ; ===========================================================================
0000C988 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C98A 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C98C 00E4                       		dc.w $E4
0000C98E 0206                       		dc.b 2,	6
0000C990 00EA                       		dc.w $EA
0000C992 0207                       		dc.b 2,	7
0000C994 00E0                       		dc.w $E0
0000C996 020A                       		dc.b 2,	$A
0000C998                            ; ---------------------------------------------------------------------------
0000C998                            ; Title	card configuration data
0000C998                            ; Format:
0000C998                            ; 4 bytes per item (YYYY XXXX)
0000C998                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C998                            ; ---------------------------------------------------------------------------
0000C998 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C9A8 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C9B8 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C9C8 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C9D8 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C9E8 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C9F8 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CA08                            ; ===========================================================================
0000CA08                            ; ---------------------------------------------------------------------------
0000CA08                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CA08                            ; ---------------------------------------------------------------------------
0000CA08                            
0000CA08                            Obj39:					; XREF: Obj_Index
0000CA08 7000                       		moveq	#0,d0
0000CA0A 1028 0024                  		move.b	$24(a0),d0
0000CA0E 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CA12 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CA16                            ; ===========================================================================
0000CA16 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CA18 0000                       		dc.w loc_C50C-Obj39_Index
0000CA1A 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CA1C                            ; ===========================================================================
0000CA1C                            
0000CA1C                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CA1C 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA20 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CA22 4E75                       		rts	
0000CA24                            ; ===========================================================================
0000CA24                            
0000CA24                            Obj39_Main:
0000CA24 5428 0024                  		addq.b	#2,$24(a0)
0000CA28 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CA2E 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CA34 6700                       		beq.s	loc_C4EC	; if not, branch
0000CA36 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CA3C                            
0000CA3C                            loc_C4EC:
0000CA3C 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CA42 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CA4A 317C 855E 0002             		move.w	#$855E,2(a0)
0000CA50 117C 0000 0001             		move.b	#0,1(a0)
0000CA56 117C 0000 0018             		move.b	#0,$18(a0)
0000CA5C                            
0000CA5C                            loc_C50C:				; XREF: Obj39_Index
0000CA5C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA5E 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CA64 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CA66 6500                       		bcs.s	Obj39_Move
0000CA68 4441                       		neg.w	d1
0000CA6A                            
0000CA6A                            Obj39_Move:
0000CA6A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA6E 6000 0000                  		bra.w	DisplaySprite
0000CA72                            ; ===========================================================================
0000CA72                            
0000CA72                            Obj39_SetWait:				; XREF: Obj39_Main
0000CA72 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CA78 5428 0024                  		addq.b	#2,$24(a0)
0000CA7C 4E75                       		rts	
0000CA7E                            ; ===========================================================================
0000CA7E                            
0000CA7E                            Obj39_Wait:				; XREF: Obj39_Index
0000CA7E 1038 F605                  		move.b	($FFFFF605).w,d0
0000CA82 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CA86 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CA88 0828 0000 001A             		btst	#0,$1A(a0)
0000CA8E 6600                       		bne.s	Obj39_Display
0000CA90 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA94 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA96 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA9A 6000 0000                  		bra.w	DisplaySprite
0000CA9E                            ; ===========================================================================
0000CA9E                            
0000CA9E                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA9E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CAA2 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CAA4 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CAAA 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CAAE 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CAB0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CAB6 6000                       		bra.s	Obj39_Display
0000CAB8                            ; ===========================================================================
0000CAB8                            
0000CAB8                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CAB8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CABE                            
0000CABE                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CABE 6000 0000                  		bra.w	DisplaySprite
0000CAC2                            ; ===========================================================================
0000CAC2                            ; ---------------------------------------------------------------------------
0000CAC2                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CAC2                            ; ---------------------------------------------------------------------------
0000CAC2                            
0000CAC2                            Obj3A:					; XREF: Obj_Index
0000CAC2 7000                       		moveq	#0,d0
0000CAC4 1028 0024                  		move.b	$24(a0),d0
0000CAC8 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CACC 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CAD0                            ; ===========================================================================
0000CAD0 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CAD2 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CAD4 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CAD6 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CAD8 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CADA 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CADC 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CADE 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CAE0 0000                       		dc.w loc_C766-Obj3A_Index
0000CAE2                            ; ===========================================================================
0000CAE2                            
0000CAE2                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CAE2 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CAE6 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CAE8 4E75                       		rts	
0000CAEA                            ; ===========================================================================
0000CAEA                            
0000CAEA                            Obj3A_Main:
0000CAEA 2248                       		movea.l	a0,a1
0000CAEC 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CAF2 7206                       		moveq	#6,d1
0000CAF4                            
0000CAF4                            Obj3A_Loop:
0000CAF4 12BC 003A                  		move.b	#$3A,0(a1)
0000CAF8 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CAFC 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CB00 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CB04 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CB08 135A 0024                  		move.b	(a2)+,$24(a1)
0000CB0C 101A                       		move.b	(a2)+,d0
0000CB0E 0C00 0006                  		cmpi.b	#6,d0
0000CB12 6600                       		bne.s	loc_C5CA
0000CB14 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CB18                            
0000CB18                            loc_C5CA:
0000CB18 1340 001A                  		move.b	d0,$1A(a1)
0000CB1C 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CB24 337C 8580 0002             		move.w	#$8580,2(a1)
0000CB2A 137C 0000 0001             		move.b	#0,1(a1)
0000CB30 43E9 0040                  		lea	$40(a1),a1
0000CB34 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CB38                            
0000CB38                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CB38 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB3A 3028 0030                  		move.w	$30(a0),d0
0000CB3E B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CB42 6700                       		beq.s	loc_C61A	; if yes, branch
0000CB44 6C00                       		bge.s	Obj3A_Move
0000CB46 4441                       		neg.w	d1
0000CB48                            
0000CB48                            Obj3A_Move:
0000CB48 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB4C                            
0000CB4C                            loc_C5FE:				; XREF: loc_C61A
0000CB4C 3028 0008                  		move.w	8(a0),d0
0000CB50 6B00                       		bmi.s	locret_C60E
0000CB52 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB56 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CB58 6000 0000                  		bra.w	DisplaySprite
0000CB5C                            ; ===========================================================================
0000CB5C                            
0000CB5C                            locret_C60E:
0000CB5C 4E75                       		rts	
0000CB5E                            ; ===========================================================================
0000CB5E                            
0000CB5E                            loc_C610:				; XREF: loc_C61A
0000CB5E 117C 000E 0024             		move.b	#$E,$24(a0)
0000CB64 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CB68                            ; ===========================================================================
0000CB68                            
0000CB68                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CB68 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CB6E 67EE                       		beq.s	loc_C610
0000CB70 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CB76 66D4                       		bne.s	loc_C5FE
0000CB78 5428 0024                  		addq.b	#2,$24(a0)
0000CB7C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB82                            
0000CB82                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CB82 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB86 6600                       		bne.s	Obj3A_Display
0000CB88 5428 0024                  		addq.b	#2,$24(a0)
0000CB8C                            
0000CB8C                            Obj3A_Display:
0000CB8C 6000 0000                  		bra.w	DisplaySprite
0000CB90                            ; ===========================================================================
0000CB90                            
0000CB90                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB90 6100 0000                  		bsr.w	DisplaySprite
0000CB94 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB9A 7000                       		moveq	#0,d0
0000CB9C 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CBA0 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CBA2 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CBA6 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CBAC                            
0000CBAC                            Obj3A_RingBonus:
0000CBAC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CBB0 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CBB2 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CBB6 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CBBC                            
0000CBBC                            Obj3A_ChkBonus:
0000CBBC 4A40                       		tst.w	d0		; is there any bonus?
0000CBBE 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CBC0 303C 00C5                  		move.w	#$C5,d0
0000CBC4 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CBCA 5428 0024                  		addq.b	#2,$24(a0)
0000CBCE 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CBD4 6600                       		bne.s	Obj3A_SetDelay
0000CBD6 5828 0024                  		addq.b	#4,$24(a0)
0000CBDA                            
0000CBDA                            Obj3A_SetDelay:
0000CBDA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CBE0                            
0000CBE0                            locret_C692:
0000CBE0 4E75                       		rts	
0000CBE2                            ; ===========================================================================
0000CBE2                            
0000CBE2                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CBE2 4EB9 0000 0000             		jsr	AddPoints
0000CBE8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CBEC 0200 0003                  		andi.b	#3,d0
0000CBF0 66EE                       		bne.s	locret_C692
0000CBF2 303C 00CD                  		move.w	#$CD,d0
0000CBF6 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CBFC                            ; ===========================================================================
0000CBFC                            
0000CBFC                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CBFC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CC00 0240 0007                  		andi.w	#7,d0
0000CC04 E748                       		lsl.w	#3,d0
0000CC06 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CC0A 0241 0003                  		andi.w	#3,d1
0000CC0E D241                       		add.w	d1,d1
0000CC10 D041                       		add.w	d1,d0
0000CC12 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CC16 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CC1A 4A40                       		tst.w	d0
0000CC1C 6600                       		bne.s	Obj3A_ChkSS
0000CC1E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CC24 6000                       		bra.s	Obj3A_Display2
0000CC26                            ; ===========================================================================
0000CC26                            
0000CC26                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CC26 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CC2A 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CC2E 6700                       		beq.s	loc_C6EA	; if not, branch
0000CC30 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CC36 6000                       		bra.s	Obj3A_Display2
0000CC38                            ; ===========================================================================
0000CC38                            
0000CC38                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CC38 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC3E                            
0000CC3E                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CC3E 6000 0000                  		bra.w	DisplaySprite
0000CC42                            ; ===========================================================================
0000CC42                            ; ---------------------------------------------------------------------------
0000CC42                            ; Level	order array
0000CC42                            ; ---------------------------------------------------------------------------
0000CC42                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CC72                            		even
0000CC72                            ; ===========================================================================
0000CC72                            
0000CC72                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CC72 7220                       		moveq	#$20,d1		; set horizontal speed
0000CC74 3028 0032                  		move.w	$32(a0),d0
0000CC78 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CC7C 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CC7E 6C00                       		bge.s	Obj3A_Move2
0000CC80 4441                       		neg.w	d1
0000CC82                            
0000CC82                            Obj3A_Move2:
0000CC82 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC86 3028 0008                  		move.w	8(a0),d0
0000CC8A 6B00                       		bmi.s	locret_C748
0000CC8C 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC90 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC92 6000 0000                  		bra.w	DisplaySprite
0000CC96                            ; ===========================================================================
0000CC96                            
0000CC96                            locret_C748:
0000CC96 4E75                       		rts	
0000CC98                            ; ===========================================================================
0000CC98                            
0000CC98                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC98 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC9E 6600 0000                  		bne.w	DeleteObject
0000CCA2 5428 0024                  		addq.b	#2,$24(a0)
0000CCA6 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CCAA 303C 008D                  		move.w	#$8D,d0
0000CCAE 4EF9 0000 15C0             		jmp	(PlaySound).l	; play FZ music
0000CCB4                            ; ===========================================================================
0000CCB4                            
0000CCB4                            loc_C766:				; XREF: Obj3A_Index
0000CCB4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CCB8 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CCBE 6700 0000                  		beq.w	DeleteObject
0000CCC2 4E75                       		rts	
0000CCC4                            ; ===========================================================================
0000CCC4 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CCCA 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CCCC FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CCD2 0201                       		dc.b 2,	1
0000CCD4 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CCDA 0206                       		dc.b 2,	6
0000CCDC 0520 0120 00EC             		dc.w $520, $120, $EC
0000CCE2 0202                       		dc.b 2,	2
0000CCE4 0540 0120 00FC             		dc.w $540, $120, $FC
0000CCEA 0203                       		dc.b 2,	3
0000CCEC 0560 0120 010C             		dc.w $560, $120, $10C
0000CCF2 0204                       		dc.b 2,	4
0000CCF4 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CCFA 0205                       		dc.b 2,	5
0000CCFC                            ; ===========================================================================
0000CCFC                            ; ---------------------------------------------------------------------------
0000CCFC                            ; Object 7E - special stage results screen
0000CCFC                            ; ---------------------------------------------------------------------------
0000CCFC                            
0000CCFC                            Obj7E:					; XREF: Obj_Index
0000CCFC 7000                       		moveq	#0,d0
0000CCFE 1028 0024                  		move.b	$24(a0),d0
0000CD02 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CD06 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CD0A                            ; ===========================================================================
0000CD0A 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CD0C 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CD0E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD10 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CD12 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD14 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CD16 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD18 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CD1A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CD1C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CD1E 0000                       		dc.w loc_C91A-Obj7E_Index
0000CD20                            ; ===========================================================================
0000CD20                            
0000CD20                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CD20 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CD24 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CD26 4E75                       		rts	
0000CD28                            ; ===========================================================================
0000CD28                            
0000CD28                            Obj7E_Main:
0000CD28 2248                       		movea.l	a0,a1
0000CD2A 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CD30 7203                       		moveq	#3,d1
0000CD32 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CD38 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CD3A 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CD3C                            
0000CD3C                            Obj7E_Loop:
0000CD3C 12BC 007E                  		move.b	#$7E,0(a1)
0000CD40 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CD44 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD48 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD4C 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD50 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CD54 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CD5C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD62 137C 0000 0001             		move.b	#0,1(a1)
0000CD68 43E9 0040                  		lea	$40(a1),a1
0000CD6C 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CD70                            
0000CD70 7007                       		moveq	#7,d0
0000CD72 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CD76 6700                       		beq.s	loc_C842
0000CD78 7000                       		moveq	#0,d0
0000CD7A 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CD7E 6600                       		bne.s	loc_C842	; if not, branch
0000CD80 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CD82 317C 0018 0008             		move.w	#$18,8(a0)
0000CD88 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD8E                            
0000CD8E                            loc_C842:
0000CD8E 1140 001A                  		move.b	d0,$1A(a0)
0000CD92                            
0000CD92                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD92 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD94 3028 0030                  		move.w	$30(a0),d0
0000CD98 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD9C 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD9E 6C00                       		bge.s	Obj7E_Move
0000CDA0 4441                       		neg.w	d1
0000CDA2                            
0000CDA2                            Obj7E_Move:
0000CDA2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CDA6                            
0000CDA6                            loc_C85A:				; XREF: loc_C86C
0000CDA6 3028 0008                  		move.w	8(a0),d0
0000CDAA 6B00                       		bmi.s	locret_C86A
0000CDAC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CDB0 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CDB2 6000 0000                  		bra.w	DisplaySprite
0000CDB6                            ; ===========================================================================
0000CDB6                            
0000CDB6                            locret_C86A:
0000CDB6 4E75                       		rts	
0000CDB8                            ; ===========================================================================
0000CDB8                            
0000CDB8                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CDB8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CDBE 66E6                       		bne.s	loc_C85A
0000CDC0 5428 0024                  		addq.b	#2,$24(a0)
0000CDC4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDCA 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CDD0                            
0000CDD0                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CDD0 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CDD4 6600                       		bne.s	Obj7E_Display
0000CDD6 5428 0024                  		addq.b	#2,$24(a0)
0000CDDA                            
0000CDDA                            Obj7E_Display:
0000CDDA 6000 0000                  		bra.w	DisplaySprite
0000CDDE                            ; ===========================================================================
0000CDDE                            
0000CDDE                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CDDE 6100 0000                  		bsr.w	DisplaySprite
0000CDE2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CDE8 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDEC 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CDEE 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDF4 700A                       		moveq	#10,d0		; add 10 to score
0000CDF6 4EB9 0000 0000             		jsr	AddPoints
0000CDFC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE00 0200 0003                  		andi.b	#3,d0
0000CE04 6600                       		bne.s	locret_C8EA
0000CE06 303C 00CD                  		move.w	#$CD,d0
0000CE0A 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE10                            ; ===========================================================================
0000CE10                            
0000CE10                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CE10 303C 00C5                  		move.w	#$C5,d0
0000CE14 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CE1A 5428 0024                  		addq.b	#2,$24(a0)
0000CE1E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CE24 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CE2A 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CE2C 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CE32 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CE36                            
0000CE36                            locret_C8EA:
0000CE36 4E75                       		rts	
0000CE38                            ; ===========================================================================
0000CE38                            
0000CE38                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CE38 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE3E 6000 0000                  		bra.w	DisplaySprite
0000CE42                            ; ===========================================================================
0000CE42                            
0000CE42                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CE42 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CE48 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CE4E 303C 00BF                  		move.w	#$BF,d0
0000CE52 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play continues music
0000CE58 5428 0024                  		addq.b	#2,$24(a0)
0000CE5C 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CE62 6000 0000                  		bra.w	DisplaySprite
0000CE66                            ; ===========================================================================
0000CE66                            
0000CE66                            loc_C91A:				; XREF: Obj7E_Index
0000CE66 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE6A 0200 000F                  		andi.b	#$F,d0
0000CE6E 6600                       		bne.s	Obj7E_Display2
0000CE70 0868 0000 001A             		bchg	#0,$1A(a0)
0000CE76                            
0000CE76                            Obj7E_Display2:
0000CE76 6000 0000                  		bra.w	DisplaySprite
0000CE7A                            ; ===========================================================================
0000CE7A 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CE80 0200                       		dc.b 2,	0		; rountine number, frame number
0000CE82 0320 0120 0118             		dc.w $320, $120, $118
0000CE88 0201                       		dc.b 2,	1
0000CE8A 0360 0120 0128             		dc.w $360, $120, $128
0000CE90 0202                       		dc.b 2,	2
0000CE92 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE98 0203                       		dc.b 2,	3
0000CE9A 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CEA0 0206                       		dc.b 2,	6
0000CEA2                            ; ===========================================================================
0000CEA2                            ; ---------------------------------------------------------------------------
0000CEA2                            ; Object 7F - chaos emeralds from the special stage results screen
0000CEA2                            ; ---------------------------------------------------------------------------
0000CEA2                            
0000CEA2                            Obj7F:					; XREF: Obj_Index
0000CEA2 7000                       		moveq	#0,d0
0000CEA4 1028 0024                  		move.b	$24(a0),d0
0000CEA8 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CEAC 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CEB0                            ; ===========================================================================
0000CEB0 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CEB2 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CEB4                            
0000CEB4                            ; ---------------------------------------------------------------------------
0000CEB4                            ; X-axis positions for chaos emeralds
0000CEB4                            ; ---------------------------------------------------------------------------
0000CEB4 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CEC0                            ; ===========================================================================
0000CEC0                            
0000CEC0                            Obj7F_Main:				; XREF: Obj7F_Index
0000CEC0 2248                       		movea.l	a0,a1
0000CEC2 45F9 0000 CEB4             		lea	(Obj7F_PosData).l,a2
0000CEC8 7400                       		moveq	#0,d2
0000CECA 7200                       		moveq	#0,d1
0000CECC 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CED0 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CED2 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CED6                            
0000CED6                            Obj7F_Loop:
0000CED6 12BC 007F                  		move.b	#$7F,0(a1)
0000CEDA 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CEDE 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CEE4 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CEE8 1633 2000                  		move.b	(a3,d2.w),d3
0000CEEC 1343 001A                  		move.b	d3,$1A(a1)
0000CEF0 1343 001C                  		move.b	d3,$1C(a1)
0000CEF4 5202                       		addq.b	#1,d2
0000CEF6 5429 0024                  		addq.b	#2,$24(a1)
0000CEFA 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CF02 337C 8541 0002             		move.w	#$8541,2(a1)
0000CF08 137C 0000 0001             		move.b	#0,1(a1)
0000CF0E 43E9 0040                  		lea	$40(a1),a1	; next object
0000CF12 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CF16                            
0000CF16                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CF16 1028 001A                  		move.b	$1A(a0),d0
0000CF1A 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CF20 0C00 0006                  		cmpi.b	#6,d0
0000CF24 6600                       		bne.s	Obj7F_Display
0000CF26 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CF2C                            
0000CF2C                            Obj7F_Display:
0000CF2C 6000 0000                  		bra.w	DisplaySprite
0000CF30                            ; ===========================================================================
0000CF30                            ; ---------------------------------------------------------------------------
0000CF30                            ; Sprite mappings - zone title cards
0000CF30                            ; ---------------------------------------------------------------------------
0000CF30 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CF32 0000                       		dc.w byte_CA2C-Map_obj34
0000CF34 0000                       		dc.w byte_CA5A-Map_obj34
0000CF36 0000                       		dc.w byte_CA7A-Map_obj34
0000CF38 0000                       		dc.w byte_CAA8-Map_obj34
0000CF3A 0000                       		dc.w byte_CADC-Map_obj34
0000CF3C 0000                       		dc.w byte_CB10-Map_obj34
0000CF3E 0000                       		dc.w byte_CB26-Map_obj34
0000CF40 0000                       		dc.w byte_CB31-Map_obj34
0000CF42 0000                       		dc.w byte_CB3C-Map_obj34
0000CF44 0000                       		dc.w byte_CB47-Map_obj34
0000CF46 0000                       		dc.w byte_CB8A-Map_obj34
0000CF48 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CF49 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CF4E F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CF53 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CF58 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CF5D F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CF62 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CF67 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CF6C F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CF71 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CF76 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CF7B F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CF80 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CF85 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CF86 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF8B F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF90 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF95 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF9A F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF9F F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CFA4 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CFA9 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CFAE F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CFB3 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CFB8 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CFBD F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CFC2 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CFC7 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CFCC F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CFD1 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CFD6 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CFDB F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CFE0 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CFE5 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CFEA F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CFEF F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CFF4 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CFF5 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CFFA F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CFFF F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D004 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D009 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D00E 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D00F F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D014 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D019 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D01E F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D023 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D028 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D02D F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D032 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D037 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D03C F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D041 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D046 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D04B F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D050 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D055 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D05A F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D05F F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D064 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D065 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D06A F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D06F F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D074 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D079 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D07E F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D083 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D088 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D08D F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D092 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D097 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D09C F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D0A1 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D0A6 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D0AB F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D0B0 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D0B5 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D0BA F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D0BF F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D0C4 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D0C9 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D0CE 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D0CF F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D0D4 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D0D9 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D0DE F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D0E3 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D0E8 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D0ED F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D0F2 04                         byte_CB10:	dc.b 4			; ZONE
0000D0F3 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D0F8 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D0FD F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D102 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D107 00                         		dc.b 0
0000D108 02                         byte_CB26:	dc.b 2			; ACT 1
0000D109 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D10E F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D113 02                         byte_CB31:	dc.b 2			; ACT 2
0000D114 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D119 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D11E 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D11F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D124 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D129 0D                         byte_CB47:	dc.b $D			; Oval
0000D12A E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D12F E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D134 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D139 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D13E 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D143 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D148 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D14D FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D152 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D157 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D15C FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D161 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D166 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D16B 00                         		dc.b 0
0000D16C 05                         byte_CB8A:	dc.b 5			; FINAL
0000D16D F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D172 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D177 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D17C F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D181 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D186                            		even
0000D186                            ; ---------------------------------------------------------------------------
0000D186                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D186                            ; ---------------------------------------------------------------------------
0000D186                            Map_obj39:
0000D186                            	include "_maps\obj39.asm"
0000D186                            ; ---------------------------------------------------------------------------
0000D186                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D186                            ; ---------------------------------------------------------------------------
0000D186 0000                       		dc.w byte_CBAC-Map_obj39
0000D188 0000                       		dc.w byte_CBB7-Map_obj39
0000D18A 0000                       		dc.w byte_CBC2-Map_obj39
0000D18C 0000                       		dc.w byte_CBCD-Map_obj39
0000D18E 02                         byte_CBAC:	dc.b 2
0000D18F F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D194 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D199 02                         byte_CBB7:	dc.b 2
0000D19A F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D19F F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D1A4 02                         byte_CBC2:	dc.b 2
0000D1A5 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D1AA F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D1AF 02                         byte_CBCD:	dc.b 2
0000D1B0 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D1B5 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D1BA                            		even
0000D1BA                            		even
0000D1BA                            
0000D1BA                            ; ---------------------------------------------------------------------------
0000D1BA                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D1BA                            ; ---------------------------------------------------------------------------
0000D1BA 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D1BC 0000                       		dc.w byte_CC13-Map_obj3A
0000D1BE 0000                       		dc.w byte_CC32-Map_obj3A
0000D1C0 0000                       		dc.w byte_CC51-Map_obj3A
0000D1C2 0000                       		dc.w byte_CC75-Map_obj3A
0000D1C4 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D1C6 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D1C8 FF59                       		dc.w byte_CB31-Map_obj3A
0000D1CA FF64                       		dc.w byte_CB3C-Map_obj3A
0000D1CC 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D1CD F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D1D2 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D1D7 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D1DC F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D1E1 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D1E6 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D1EB F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D1F0 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D1F5 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D1FA F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D1FF F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D204 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D209 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D20E F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D213 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D218 06                         byte_CC13:	dc.b 6			; PASSED
0000D219 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D21E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D223 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D228 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D22D F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D232 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D237 06                         byte_CC32:	dc.b 6			; SCORE
0000D238 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D23D F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D242 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D247 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D24C F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D251 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D256 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D257 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D25C F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D261 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D266 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D26B FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D270 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D275 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D27A 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D27B F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D280 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D285 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D28A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D28F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D294 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D299 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D29E                            		even
0000D29E                            ; ---------------------------------------------------------------------------
0000D29E                            ; Sprite mappings - special stage results screen
0000D29E                            ; ---------------------------------------------------------------------------
0000D29E 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D2A0 0000                       		dc.w byte_CCEE-Map_obj7E
0000D2A2 0000                       		dc.w byte_CD0D-Map_obj7E
0000D2A4 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D2A6 0000                       		dc.w byte_CD31-Map_obj7E
0000D2A8 0000                       		dc.w byte_CD46-Map_obj7E
0000D2AA 0000                       		dc.w byte_CD5B-Map_obj7E
0000D2AC 0000                       		dc.w byte_CD6B-Map_obj7E
0000D2AE 0000                       		dc.w byte_CDA8-Map_obj7E
0000D2B0 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D2B1 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D2B6 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D2BB F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D2C0 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D2C5 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D2CA F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D2CF F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D2D4 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D2D9 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D2DE F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D2E3 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D2E8 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D2ED F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D2F2 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D2F3 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D2F8 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2FD F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D302 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D307 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D30C FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D311 07                         byte_CD0D:	dc.b 7
0000D312 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D317 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D31C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D321 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D326 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D32B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D330 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D335 04                         byte_CD31:	dc.b 4
0000D336 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D33B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D340 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D345 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D34A 04                         byte_CD46:	dc.b 4
0000D34B F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D350 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D355 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D35A F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D35F 03                         byte_CD5B:	dc.b 3
0000D360 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D365 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D36A F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D36F 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D370 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D375 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D37A F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D37F F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D384 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D389 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D38E F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D393 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D398 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D39D F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D3A2 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D3A7 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D3AC 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D3AD F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D3B2 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D3B7 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D3BC F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D3C1 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D3C6 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D3CB F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D3D0 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D3D5 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D3DA F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D3DF F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D3E4 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D3E9 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D3EE F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D3F3 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D3F8                            		even
0000D3F8                            ; ---------------------------------------------------------------------------
0000D3F8                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3F8                            ; ---------------------------------------------------------------------------
0000D3F8                            Map_obj7F:
0000D3F8                            	include "_maps\obj7F.asm"
0000D3F8                            ; ---------------------------------------------------------------------------
0000D3F8                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D3F8                            ; ---------------------------------------------------------------------------
0000D3F8 0000                       		dc.w byte_CE02-Map_obj7F
0000D3FA 0000                       		dc.w byte_CE08-Map_obj7F
0000D3FC 0000                       		dc.w byte_CE0E-Map_obj7F
0000D3FE 0000                       		dc.w byte_CE14-Map_obj7F
0000D400 0000                       		dc.w byte_CE1A-Map_obj7F
0000D402 0000                       		dc.w byte_CE20-Map_obj7F
0000D404 0000                       		dc.w byte_CE26-Map_obj7F
0000D406 01                         byte_CE02:	dc.b 1
0000D407 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D40C 01                         byte_CE08:	dc.b 1
0000D40D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D412 01                         byte_CE0E:	dc.b 1
0000D413 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D418 01                         byte_CE14:	dc.b 1
0000D419 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D41E 01                         byte_CE1A:	dc.b 1
0000D41F F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D424 01                         byte_CE20:	dc.b 1
0000D425 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D42A 00                         byte_CE26:	dc.b 0			; Blank frame
0000D42C 00                         		even
0000D42C 00                         		even
0000D42C                            
0000D42C                            ; ===========================================================================
0000D42C                            ; ---------------------------------------------------------------------------
0000D42C                            ; Object 36 - spikes
0000D42C                            ; ---------------------------------------------------------------------------
0000D42C                            
0000D42C                            Obj36:					; XREF: Obj_Index
0000D42C 7000                       		moveq	#0,d0
0000D42E 1028 0024                  		move.b	$24(a0),d0
0000D432 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D436 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D43A                            ; ===========================================================================
0000D43A 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D43C 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D43E                            
0000D43E 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D440 0110                       		dc.b 1,	$10
0000D442 0204                       		dc.b 2,	4
0000D444 031C                       		dc.b 3,	$1C
0000D446 0440                       		dc.b 4,	$40
0000D448 0510                       		dc.b 5,	$10
0000D44A                            ; ===========================================================================
0000D44A                            
0000D44A                            Obj36_Main:				; XREF: Obj36_Index
0000D44A 5428 0024                  		addq.b	#2,$24(a0)
0000D44E 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D456 317C 051B 0002             		move.w	#$51B,2(a0)
0000D45C 0028 0004 0001             		ori.b	#4,1(a0)
0000D462 117C 0004 0018             		move.b	#4,$18(a0)
0000D468 1028 0028                  		move.b	$28(a0),d0
0000D46C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D472 0240 00F0                  		andi.w	#$F0,d0
0000D476 43F9 0000 D43E             		lea	(Obj36_Var).l,a1
0000D47C E648                       		lsr.w	#3,d0
0000D47E D2C0                       		adda.w	d0,a1
0000D480 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D484 1159 0019                  		move.b	(a1)+,$19(a0)
0000D488 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D48E 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D494                            
0000D494                            Obj36_Solid:				; XREF: Obj36_Index
0000D494 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D498 343C 0004                  		move.w	#4,d2
0000D49C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D4A2 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D4A4 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D4AA 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D4AC 343C 0014                  		move.w	#$14,d2
0000D4B0                            
0000D4B0                            ; Spikes types $1x and $5x face	sideways
0000D4B0                            
0000D4B0                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D4B0 323C 001B                  		move.w	#$1B,d1
0000D4B4 3602                       		move.w	d2,d3
0000D4B6 5243                       		addq.w	#1,d3
0000D4B8 3828 0008                  		move.w	8(a0),d4
0000D4BC 6100 0000                  		bsr.w	SolidObject
0000D4C0 0828 0003 0022             		btst	#3,$22(a0)
0000D4C6 6600                       		bne.s	Obj36_Display
0000D4C8 0C44 0001                  		cmpi.w	#1,d4
0000D4CC 6700                       		beq.s	Obj36_Hurt
0000D4CE 6000                       		bra.s	Obj36_Display
0000D4D0                            ; ===========================================================================
0000D4D0                            
0000D4D0                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D4D0                            
0000D4D0                            Obj36_Upright:				; XREF: Obj36_Solid
0000D4D0 7200                       		moveq	#0,d1
0000D4D2 1228 0019                  		move.b	$19(a0),d1
0000D4D6 0641 000B                  		addi.w	#$B,d1
0000D4DA 343C 0010                  		move.w	#$10,d2
0000D4DE 363C 0011                  		move.w	#$11,d3
0000D4E2 3828 0008                  		move.w	8(a0),d4
0000D4E6 6100 0000                  		bsr.w	SolidObject
0000D4EA 0828 0003 0022             		btst	#3,$22(a0)
0000D4F0 6600                       		bne.s	Obj36_Hurt
0000D4F2 4A44                       		tst.w	d4
0000D4F4 6A00                       		bpl.s	Obj36_Display
0000D4F6                            
0000D4F6                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D4F6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D4FA 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D4FC 2F08                       		move.l	a0,-(sp)
0000D4FE 2448                       		movea.l	a0,a2
0000D500 41F8 D000                  		lea	($FFFFD000).w,a0
0000D504 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D50A 6400                       		bcc.s	loc_CF20
0000D50C 2628 000C                  		move.l	$C(a0),d3
0000D510 3028 0012                  		move.w	$12(a0),d0
0000D514 48C0                       		ext.l	d0
0000D516 E180                       		asl.l	#8,d0
0000D518 9680                       		sub.l	d0,d3
0000D51A 2143 000C                  		move.l	d3,$C(a0)
0000D51E 4EB9 0000 0000             		jsr	HurtSonic
0000D524                            
0000D524                            loc_CF20:
0000D524 205F                       		movea.l	(sp)+,a0
0000D526                            
0000D526                            Obj36_Display:
0000D526 6100 0000                  		bsr.w	DisplaySprite
0000D52A 3028 0030                  		move.w	$30(a0),d0
0000D52E 0240 FF80                  		andi.w	#$FF80,d0
0000D532 3238 F700                  		move.w	($FFFFF700).w,d1
0000D536 0441 0080                  		subi.w	#$80,d1
0000D53A 0241 FF80                  		andi.w	#$FF80,d1
0000D53E 9041                       		sub.w	d1,d0
0000D540 0C40 0280                  		cmpi.w	#$280,d0
0000D544 6200 0000                  		bhi.w	DeleteObject
0000D548 4E75                       		rts	
0000D54A                            ; ===========================================================================
0000D54A                            
0000D54A                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D54A 7000                       		moveq	#0,d0
0000D54C 1028 0028                  		move.b	$28(a0),d0
0000D550 D040                       		add.w	d0,d0
0000D552 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D556 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D55A                            ; ===========================================================================
0000D55A 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D55C 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D55E 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D560                            ; ===========================================================================
0000D560                            
0000D560                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D560 4E75                       		rts			; don't move the object
0000D562                            ; ===========================================================================
0000D562                            
0000D562                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D562 6100 0000                  		bsr.w	Obj36_Wait
0000D566 7000                       		moveq	#0,d0
0000D568 1028 0034                  		move.b	$34(a0),d0
0000D56C D068 0032                  		add.w	$32(a0),d0
0000D570 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D574 4E75                       		rts	
0000D576                            ; ===========================================================================
0000D576                            
0000D576                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D576 6100 0000                  		bsr.w	Obj36_Wait
0000D57A 7000                       		moveq	#0,d0
0000D57C 1028 0034                  		move.b	$34(a0),d0
0000D580 D068 0030                  		add.w	$30(a0),d0
0000D584 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D588 4E75                       		rts	
0000D58A                            ; ===========================================================================
0000D58A                            
0000D58A                            Obj36_Wait:
0000D58A 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D58E 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D590 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D594 6600                       		bne.s	locret_CFE6
0000D596 4A28 0001                  		tst.b	1(a0)
0000D59A 6A00                       		bpl.s	locret_CFE6
0000D59C 303C 00B6                  		move.w	#$B6,d0
0000D5A0 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D5A6 6000                       		bra.s	locret_CFE6
0000D5A8                            ; ===========================================================================
0000D5A8                            
0000D5A8                            loc_CFA4:
0000D5A8 4A68 0036                  		tst.w	$36(a0)
0000D5AC 6700                       		beq.s	loc_CFC6
0000D5AE 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D5B4 6400                       		bcc.s	locret_CFE6
0000D5B6 317C 0000 0034             		move.w	#0,$34(a0)
0000D5BC 317C 0000 0036             		move.w	#0,$36(a0)
0000D5C2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D5C8 6000                       		bra.s	locret_CFE6
0000D5CA                            ; ===========================================================================
0000D5CA                            
0000D5CA                            loc_CFC6:
0000D5CA 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D5D0 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D5D6 6500                       		bcs.s	locret_CFE6
0000D5D8 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D5DE 317C 0001 0036             		move.w	#1,$36(a0)
0000D5E4 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D5EA                            
0000D5EA                            locret_CFE6:
0000D5EA 4E75                       		rts	
0000D5EC                            ; ===========================================================================
0000D5EC                            ; ---------------------------------------------------------------------------
0000D5EC                            ; Sprite mappings - spikes
0000D5EC                            ; ---------------------------------------------------------------------------
0000D5EC                            Map_obj36:
0000D5EC                            	include "_maps\obj36.asm"
0000D5EC                            ; ---------------------------------------------------------------------------
0000D5EC                            ; Sprite mappings - spikes
0000D5EC                            ; ---------------------------------------------------------------------------
0000D5EC 0000                       		dc.w byte_CFF4-Map_obj36
0000D5EE 0000                       		dc.w byte_D004-Map_obj36
0000D5F0 0000                       		dc.w byte_D014-Map_obj36
0000D5F2 0000                       		dc.w byte_D01A-Map_obj36
0000D5F4 0000                       		dc.w byte_D02A-Map_obj36
0000D5F6 0000                       		dc.w byte_D049-Map_obj36
0000D5F8 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D5F9 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D5FE F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D603 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D608 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D609 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D60E FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D613 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D618 01                         byte_D014:	dc.b 1			; 1 spike
0000D619 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D61E 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D61F F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D624 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D629 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D62E 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D62F F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D634 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D639 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D63E F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D643 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D648 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D64D 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D64E FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D654 00                         		even
0000D654 00                         		even
0000D654                            
0000D654                            ; ===========================================================================
0000D654                            ; ---------------------------------------------------------------------------
0000D654                            ; Object 3B - purple rock (GHZ)
0000D654                            ; ---------------------------------------------------------------------------
0000D654                            
0000D654                            Obj3B:					; XREF: Obj_Index
0000D654 7000                       		moveq	#0,d0
0000D656 1028 0024                  		move.b	$24(a0),d0
0000D65A 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D65E 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D662                            ; ===========================================================================
0000D662 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D664 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D666                            ; ===========================================================================
0000D666                            
0000D666                            Obj3B_Main:				; XREF: Obj3B_Index
0000D666 5428 0024                  		addq.b	#2,$24(a0)
0000D66A 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D672 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D678 117C 0004 0001             		move.b	#4,1(a0)
0000D67E 117C 0013 0019             		move.b	#$13,$19(a0)
0000D684 117C 0004 0018             		move.b	#4,$18(a0)
0000D68A                            
0000D68A                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D68A 323C 001B                  		move.w	#$1B,d1
0000D68E 343C 0010                  		move.w	#$10,d2
0000D692 363C 0010                  		move.w	#$10,d3
0000D696 3828 0008                  		move.w	8(a0),d4
0000D69A 6100 0000                  		bsr.w	SolidObject
0000D69E 6100 0000                  		bsr.w	DisplaySprite
0000D6A2 3028 0008                  		move.w	8(a0),d0
0000D6A6 0240 FF80                  		andi.w	#$FF80,d0
0000D6AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6AE 0441 0080                  		subi.w	#$80,d1
0000D6B2 0241 FF80                  		andi.w	#$FF80,d1
0000D6B6 9041                       		sub.w	d1,d0
0000D6B8 0C40 0280                  		cmpi.w	#$280,d0
0000D6BC 6200 0000                  		bhi.w	DeleteObject
0000D6C0 4E75                       		rts	
0000D6C2                            ; ===========================================================================
0000D6C2                            ; ---------------------------------------------------------------------------
0000D6C2                            ; Object 49 - waterfall	sound effect (GHZ)
0000D6C2                            ; ---------------------------------------------------------------------------
0000D6C2                            
0000D6C2                            Obj49:					; XREF: Obj_Index
0000D6C2 7000                       		moveq	#0,d0
0000D6C4 1028 0024                  		move.b	$24(a0),d0
0000D6C8 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D6CC 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D6D0                            ; ===========================================================================
0000D6D0 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D6D2 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D6D4                            ; ===========================================================================
0000D6D4                            
0000D6D4                            Obj49_Main:				; XREF: Obj49_Index
0000D6D4 5428 0024                  		addq.b	#2,$24(a0)
0000D6D8 117C 0004 0001             		move.b	#4,1(a0)
0000D6DE                            
0000D6DE                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D6DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D6E2 0200 003F                  		andi.b	#$3F,d0
0000D6E6 6600                       		bne.s	Obj49_ChkDel
0000D6E8 303C 00D0                  		move.w	#$D0,d0
0000D6EC 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D6F2                            
0000D6F2                            Obj49_ChkDel:
0000D6F2 3028 0008                  		move.w	8(a0),d0
0000D6F6 0240 FF80                  		andi.w	#$FF80,d0
0000D6FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6FE 0441 0080                  		subi.w	#$80,d1
0000D702 0241 FF80                  		andi.w	#$FF80,d1
0000D706 9041                       		sub.w	d1,d0
0000D708 0C40 0280                  		cmpi.w	#$280,d0
0000D70C 6200 0000                  		bhi.w	DeleteObject
0000D710 4E75                       		rts	
0000D712                            ; ===========================================================================
0000D712                            ; ---------------------------------------------------------------------------
0000D712                            ; Sprite mappings - purple rock	(GHZ)
0000D712                            ; ---------------------------------------------------------------------------
0000D712                            Map_obj3B:
0000D712                            	include "_maps\obj3B.asm"
0000D712                            ; ---------------------------------------------------------------------------
0000D712                            ; Sprite mappings - purple rock	(GHZ)
0000D712                            ; ---------------------------------------------------------------------------
0000D712 0000                       		dc.w byte_D110-Map_obj3B
0000D714 02                         byte_D110:	dc.b 2
0000D715 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D71A F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D720 00                         		even
0000D720 00                         		even
0000D720                            
0000D720                            ; ===========================================================================
0000D720                            ; ---------------------------------------------------------------------------
0000D720                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D720                            ; ---------------------------------------------------------------------------
0000D720                            
0000D720                            Obj3C:					; XREF: Obj_Index
0000D720 7000                       		moveq	#0,d0
0000D722 1028 0024                  		move.b	$24(a0),d0
0000D726 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D72A 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D72E 6000 0000                  		bra.w	MarkObjGone
0000D732                            ; ===========================================================================
0000D732 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D734 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D736 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D738                            ; ===========================================================================
0000D738                            
0000D738                            Obj3C_Main:				; XREF: Obj3C_Index
0000D738 5428 0024                  		addq.b	#2,$24(a0)
0000D73C 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D744 317C 450F 0002             		move.w	#$450F,2(a0)
0000D74A 117C 0004 0001             		move.b	#4,1(a0)
0000D750 117C 0010 0019             		move.b	#$10,$19(a0)
0000D756 117C 0004 0018             		move.b	#4,$18(a0)
0000D75C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D762                            
0000D762                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D762 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D768 323C 001B                  		move.w	#$1B,d1
0000D76C 343C 0020                  		move.w	#$20,d2
0000D770 363C 0020                  		move.w	#$20,d3
0000D774 3828 0008                  		move.w	8(a0),d4
0000D778 6100 0000                  		bsr.w	SolidObject
0000D77C 0828 0005 0022             		btst	#5,$22(a0)
0000D782 6600                       		bne.s	Obj3C_ChkRoll
0000D784                            
0000D784                            locret_D180:
0000D784 4E75                       		rts	
0000D786                            ; ===========================================================================
0000D786                            
0000D786                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D786 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D78C 66F6                       		bne.s	locret_D180	; if not, branch
0000D78E 3028 0030                  		move.w	$30(a0),d0
0000D792 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D794 4440                       		neg.w	d0
0000D796                            
0000D796                            Obj3C_ChkSpeed:
0000D796 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D79A 65E8                       		bcs.s	locret_D180	; if not, branch
0000D79C 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D7A2 5869 0008                  		addq.w	#4,8(a1)
0000D7A6 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D7AC 3028 0008                  		move.w	8(a0),d0
0000D7B0 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D7B4 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D7B6 5169 0008                  		subq.w	#8,8(a1)
0000D7BA 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D7C0                            
0000D7C0                            Obj3C_Smash:
0000D7C0 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D7C6 08A8 0005 0022             		bclr	#5,$22(a0)
0000D7CC 08A9 0005 0022             		bclr	#5,$22(a1)
0000D7D2 7207                       		moveq	#7,d1		; load 8 fragments
0000D7D4 343C 0070                  		move.w	#$70,d2
0000D7D8 6100                       		bsr.s	SmashObject
0000D7DA                            
0000D7DA                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D7DA 6100 0000                  		bsr.w	SpeedToPos
0000D7DE 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D7E4 6100 0000                  		bsr.w	DisplaySprite
0000D7E8 4A28 0001                  		tst.b	1(a0)
0000D7EC 6A00 0000                  		bpl.w	DeleteObject
0000D7F0 4E75                       		rts	
0000D7F2                            
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D7F2                            ; ---------------------------------------------------------------------------
0000D7F2                            
0000D7F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7F2                            
0000D7F2                            
0000D7F2                            SmashObject:				; XREF: Obj3C_Smash
0000D7F2 7000                       		moveq	#0,d0
0000D7F4 1028 001A                  		move.b	$1A(a0),d0
0000D7F8 D040                       		add.w	d0,d0
0000D7FA 2668 0004                  		movea.l	4(a0),a3
0000D7FE D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D802 524B                       		addq.w	#1,a3
0000D804 08E8 0005 0001             		bset	#5,1(a0)
0000D80A 1810                       		move.b	0(a0),d4
0000D80C 1A28 0001                  		move.b	1(a0),d5
0000D810 2248                       		movea.l	a0,a1
0000D812 6000                       		bra.s	Smash_LoadFrag
0000D814                            ; ===========================================================================
0000D814                            
0000D814                            Smash_Loop:
0000D814 6100 0000                  		bsr.w	SingleObjLoad
0000D818 6600                       		bne.s	Smash_PlaySnd
0000D81A 5A4B                       		addq.w	#5,a3
0000D81C                            
0000D81C                            Smash_LoadFrag:				; XREF: SmashObject
0000D81C 137C 0004 0024             		move.b	#4,$24(a1)
0000D822 1284                       		move.b	d4,0(a1)
0000D824 234B 0004                  		move.l	a3,4(a1)
0000D828 1345 0001                  		move.b	d5,1(a1)
0000D82C 3368 0008 0008             		move.w	8(a0),8(a1)
0000D832 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D838 3368 0002 0002             		move.w	2(a0),2(a1)
0000D83E 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D844 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D84A 335C 0010                  		move.w	(a4)+,$10(a1)
0000D84E 335C 0012                  		move.w	(a4)+,$12(a1)
0000D852 B3C8                       		cmpa.l	a0,a1
0000D854 6400                       		bcc.s	loc_D268
0000D856 2F08                       		move.l	a0,-(sp)
0000D858 2049                       		movea.l	a1,a0
0000D85A 6100 0000                  		bsr.w	SpeedToPos
0000D85E D568 0012                  		add.w	d2,$12(a0)
0000D862 205F                       		movea.l	(sp)+,a0
0000D864 6100 0000                  		bsr.w	DisplaySprite2
0000D868                            
0000D868                            loc_D268:
0000D868 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D86C                            
0000D86C                            Smash_PlaySnd:
0000D86C 303C 00CB                  		move.w	#$CB,d0
0000D870 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D876                            ; End of function SmashObject
0000D876                            
0000D876                            ; ===========================================================================
0000D876                            ; Smashed block	fragment speeds
0000D876                            ;
0000D876 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D87A 0600 FF00                  		dc.w $600, $FF00
0000D87E 0600 0100                  		dc.w $600, $100
0000D882 0400 0500                  		dc.w $400, $500
0000D886 0600 FA00                  		dc.w $600, $FA00
0000D88A 0800 FE00                  		dc.w $800, $FE00
0000D88E 0800 0200                  		dc.w $800, $200
0000D892 0600 0600                  		dc.w $600, $600
0000D896                            
0000D896 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D89A F800 FE00                  		dc.w $F800, $FE00
0000D89E F800 0200                  		dc.w $F800, $200
0000D8A2 FA00 0600                  		dc.w $FA00, $600
0000D8A6 FC00 FB00                  		dc.w $FC00, $FB00
0000D8AA FA00 FF00                  		dc.w $FA00, $FF00
0000D8AE FA00 0100                  		dc.w $FA00, $100
0000D8B2 FC00 0500                  		dc.w $FC00, $500
0000D8B6                            ; ---------------------------------------------------------------------------
0000D8B6                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D8B6                            ; ---------------------------------------------------------------------------
0000D8B6                            Map_obj3C:
0000D8B6                            	include "_maps\obj3C.asm"
0000D8B6                            ; ---------------------------------------------------------------------------
0000D8B6                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D8B6                            ; ---------------------------------------------------------------------------
0000D8B6 0000                       		dc.w byte_D2BC-Map_obj3C
0000D8B8 0000                       		dc.w byte_D2E5-Map_obj3C
0000D8BA 0000                       		dc.w byte_D30E-Map_obj3C
0000D8BC 08                         byte_D2BC:	dc.b 8
0000D8BD E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D8C2 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D8C7 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D8CC 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D8D1 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8D6 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8DB 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8E0 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D8E5 08                         byte_D2E5:	dc.b 8
0000D8E6 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8EB F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8F0 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8F5 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8FA E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8FF F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D904 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D909 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D90E 08                         byte_D30E:	dc.b 8
0000D90F E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D914 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D919 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D91E 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D923 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D928 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D92D 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D932 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D938 00                         		even
0000D938 00                         		even
0000D938                            
0000D938                            ; ---------------------------------------------------------------------------
0000D938                            ; Object code loading subroutine
0000D938                            ; ---------------------------------------------------------------------------
0000D938                            
0000D938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D938                            
0000D938                            
0000D938                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D938 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D93C 7E7F                       		moveq	#$7F,d7
0000D93E 7000                       		moveq	#0,d0
0000D940 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D946 6400                       		bcc.s	loc_D362
0000D948                            
0000D948                            loc_D348:
0000D948 1010                       		move.b	(a0),d0		; load object number from RAM
0000D94A 6700                       		beq.s	loc_D358
0000D94C D040                       		add.w	d0,d0
0000D94E D040                       		add.w	d0,d0
0000D950 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D954 4E91                       		jsr	(a1)		; run the object's code
0000D956 7000                       		moveq	#0,d0
0000D958                            
0000D958                            loc_D358:
0000D958 41E8 0040                  		lea	$40(a0),a0	; next object
0000D95C 51CF FFEA                  		dbf	d7,loc_D348
0000D960 4E75                       		rts	
0000D962                            ; ===========================================================================
0000D962                            
0000D962                            loc_D362:
0000D962 7E1F                       		moveq	#$1F,d7
0000D964 61E2                       		bsr.s	loc_D348
0000D966 7E5F                       		moveq	#$5F,d7
0000D968                            
0000D968                            loc_D368:
0000D968 7000                       		moveq	#0,d0
0000D96A 1010                       		move.b	(a0),d0
0000D96C 6700                       		beq.s	loc_D378
0000D96E 4A28 0001                  		tst.b	1(a0)
0000D972 6A00                       		bpl.s	loc_D378
0000D974 6100 0000                  		bsr.w	DisplaySprite
0000D978                            
0000D978                            loc_D378:
0000D978 41E8 0040                  		lea	$40(a0),a0
0000D97C                            
0000D97C                            loc_D37C:
0000D97C 51CF FFEA                  		dbf	d7,loc_D368
0000D980 4E75                       		rts	
0000D982                            ; End of function ObjectsLoad
0000D982                            
0000D982                            ; ===========================================================================
0000D982                            ; ---------------------------------------------------------------------------
0000D982                            ; Object pointers
0000D982                            ; ---------------------------------------------------------------------------
0000D982                            Obj_Index:
0000D982                            	include "_inc\Object pointers.asm"
0000D982                            ; ---------------------------------------------------------------------------
0000D982                            ; Object pointers
0000D982                            ; ---------------------------------------------------------------------------
0000D982 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D992 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D9A2 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D9B2 0000 0000 0000 ABD2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D9C2 0000 780A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D9D2 0000 7E30 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D9E2 0000 867E 0000 86E6 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D9F2 0000 8D30 0000 901E 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DA02 0000 0000 0000 9CCE 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DA12 0000 A006 0000 A5F2 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DA22 0000 992A 0000 8E06 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DA32 0000 B1C0 0000 A7E6 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DA42 0000 BBD4 0000 C282 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DA52 0000 B732 0000 D42C 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DA62 0000 CA08 0000 CAC2 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DA72 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DA82 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA92 0000 BEF0 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DAA2 0000 D6C2 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DAB2 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DAC2 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DAD2 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DAE2 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DAF2 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DB02 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DB12 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DB22 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DB32 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DB42 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DB52 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DB62 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DB72 0000 0000 0000 CCFC 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DB82 0000 5322 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB92 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DBA2 0000 59DC 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DBA2 0000 59DC 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DBB2                            
0000DBB2                            ; ---------------------------------------------------------------------------
0000DBB2                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DBB2                            ; ---------------------------------------------------------------------------
0000DBB2                            
0000DBB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBB2                            
0000DBB2                            
0000DBB2                            ObjectFall:
0000DBB2 2428 0008                  		move.l	8(a0),d2
0000DBB6 2628 000C                  		move.l	$C(a0),d3
0000DBBA 3028 0010                  		move.w	$10(a0),d0
0000DBBE 48C0                       		ext.l	d0
0000DBC0 E180                       		asl.l	#8,d0
0000DBC2 D480                       		add.l	d0,d2
0000DBC4 3028 0012                  		move.w	$12(a0),d0
0000DBC8 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DBCE 48C0                       		ext.l	d0
0000DBD0 E180                       		asl.l	#8,d0
0000DBD2 D680                       		add.l	d0,d3
0000DBD4 2142 0008                  		move.l	d2,8(a0)
0000DBD8 2143 000C                  		move.l	d3,$C(a0)
0000DBDC 4E75                       		rts	
0000DBDE                            ; End of function ObjectFall
0000DBDE                            
0000DBDE                            ; ---------------------------------------------------------------------------
0000DBDE                            ; Subroutine translating object	speed to update	object position
0000DBDE                            ; ---------------------------------------------------------------------------
0000DBDE                            
0000DBDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBDE                            
0000DBDE                            
0000DBDE                            SpeedToPos:
0000DBDE 2428 0008                  		move.l	8(a0),d2
0000DBE2 2628 000C                  		move.l	$C(a0),d3
0000DBE6 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DBEA 48C0                       		ext.l	d0
0000DBEC E180                       		asl.l	#8,d0		; multiply speed by $100
0000DBEE D480                       		add.l	d0,d2		; add to x-axis	position
0000DBF0 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DBF4 48C0                       		ext.l	d0
0000DBF6 E180                       		asl.l	#8,d0		; multiply by $100
0000DBF8 D680                       		add.l	d0,d3		; add to y-axis	position
0000DBFA 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DBFE 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DC02 4E75                       		rts	
0000DC04                            ; End of function SpeedToPos
0000DC04                            
0000DC04                            ; ---------------------------------------------------------------------------
0000DC04                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DC04                            ; ---------------------------------------------------------------------------
0000DC04                            
0000DC04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC04                            
0000DC04                            
0000DC04                            DisplaySprite:
0000DC04 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DC08 3028 0018                  		move.w	$18(a0),d0
0000DC0C E248                       		lsr.w	#1,d0
0000DC0E 0240 0380                  		andi.w	#$380,d0
0000DC12 D2C0                       		adda.w	d0,a1
0000DC14 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DC18 6400                       		bcc.s	locret_D620
0000DC1A 5451                       		addq.w	#2,(a1)
0000DC1C D2D1                       		adda.w	(a1),a1
0000DC1E 3288                       		move.w	a0,(a1)
0000DC20                            
0000DC20                            locret_D620:
0000DC20 4E75                       		rts	
0000DC22                            ; End of function DisplaySprite
0000DC22                            
0000DC22                            ; ---------------------------------------------------------------------------
0000DC22                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DC22                            ; ---------------------------------------------------------------------------
0000DC22                            
0000DC22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC22                            
0000DC22                            
0000DC22                            DisplaySprite2:
0000DC22 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DC26 3029 0018                  		move.w	$18(a1),d0
0000DC2A E248                       		lsr.w	#1,d0
0000DC2C 0240 0380                  		andi.w	#$380,d0
0000DC30 D4C0                       		adda.w	d0,a2
0000DC32 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DC36 6400                       		bcc.s	locret_D63E
0000DC38 5452                       		addq.w	#2,(a2)
0000DC3A D4D2                       		adda.w	(a2),a2
0000DC3C 3489                       		move.w	a1,(a2)
0000DC3E                            
0000DC3E                            locret_D63E:
0000DC3E 4E75                       		rts	
0000DC40                            ; End of function DisplaySprite2
0000DC40                            
0000DC40                            ; ---------------------------------------------------------------------------
0000DC40                            ; Subroutine to	delete an object
0000DC40                            ; ---------------------------------------------------------------------------
0000DC40                            
0000DC40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC40                            
0000DC40                            
0000DC40                            DeleteObject:
0000DC40 2248                       		movea.l	a0,a1
0000DC42                            
0000DC42                            DeleteObject2:
0000DC42 7200                       		moveq	#0,d1
0000DC44 700F                       		moveq	#$F,d0
0000DC46                            
0000DC46                            loc_D646:
0000DC46 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DC48 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DC4C 4E75                       		rts	
0000DC4E                            ; End of function DeleteObject
0000DC4E                            
0000DC4E                            ; ===========================================================================
0000DC4E 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DC52 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DC56 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DC5A 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DC5E                            ; ---------------------------------------------------------------------------
0000DC5E                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DC5E                            ; ---------------------------------------------------------------------------
0000DC5E                            
0000DC5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC5E                            
0000DC5E                            
0000DC5E                            BuildSprites:				; XREF: TitleScreen; et al
0000DC5E 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DC62 7A00                       		moveq	#0,d5
0000DC64 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DC68 7E07                       		moveq	#7,d7
0000DC6A                            
0000DC6A                            loc_D66A:
0000DC6A 4A54                       		tst.w	(a4)
0000DC6C 6700 0000                  		beq.w	loc_D72E
0000DC70 7C02                       		moveq	#2,d6
0000DC72                            
0000DC72                            loc_D672:
0000DC72 3074 6000                  		movea.w	(a4,d6.w),a0
0000DC76 4A10                       		tst.b	(a0)
0000DC78 6700 0000                  		beq.w	loc_D726
0000DC7C 08A8 0007 0001             		bclr	#7,1(a0)
0000DC82 1028 0001                  		move.b	1(a0),d0
0000DC86 1800                       		move.b	d0,d4
0000DC88 0240 000C                  		andi.w	#$C,d0
0000DC8C 6700                       		beq.s	loc_D6DE
0000DC8E 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC92 7000                       		moveq	#0,d0
0000DC94 1028 0019                  		move.b	$19(a0),d0
0000DC98 3628 0008                  		move.w	8(a0),d3
0000DC9C 9651                       		sub.w	(a1),d3
0000DC9E 3203                       		move.w	d3,d1
0000DCA0 D240                       		add.w	d0,d1
0000DCA2 6B00 0000                  		bmi.w	loc_D726
0000DCA6 3203                       		move.w	d3,d1
0000DCA8 9240                       		sub.w	d0,d1
0000DCAA 0C41 0140                  		cmpi.w	#$140,d1
0000DCAE 6C00                       		bge.s	loc_D726
0000DCB0 0643 0080                  		addi.w	#$80,d3
0000DCB4 0804 0004                  		btst	#4,d4
0000DCB8 6700                       		beq.s	loc_D6E8
0000DCBA 7000                       		moveq	#0,d0
0000DCBC 1028 0016                  		move.b	$16(a0),d0
0000DCC0 3428 000C                  		move.w	$C(a0),d2
0000DCC4 9469 0004                  		sub.w	4(a1),d2
0000DCC8 3202                       		move.w	d2,d1
0000DCCA D240                       		add.w	d0,d1
0000DCCC 6B00                       		bmi.s	loc_D726
0000DCCE 3202                       		move.w	d2,d1
0000DCD0 9240                       		sub.w	d0,d1
0000DCD2 0C41 00E0                  		cmpi.w	#$E0,d1
0000DCD6 6C00                       		bge.s	loc_D726
0000DCD8 0642 0080                  		addi.w	#$80,d2
0000DCDC 6000                       		bra.s	loc_D700
0000DCDE                            ; ===========================================================================
0000DCDE                            
0000DCDE                            loc_D6DE:
0000DCDE 3428 000A                  		move.w	$A(a0),d2
0000DCE2 3628 0008                  		move.w	8(a0),d3
0000DCE6 6000                       		bra.s	loc_D700
0000DCE8                            ; ===========================================================================
0000DCE8                            
0000DCE8                            loc_D6E8:
0000DCE8 3428 000C                  		move.w	$C(a0),d2
0000DCEC 9469 0004                  		sub.w	4(a1),d2
0000DCF0 0642 0080                  		addi.w	#$80,d2
0000DCF4 0C42 0060                  		cmpi.w	#$60,d2
0000DCF8 6500                       		bcs.s	loc_D726
0000DCFA 0C42 0180                  		cmpi.w	#$180,d2
0000DCFE 6400                       		bcc.s	loc_D726
0000DD00                            
0000DD00                            loc_D700:
0000DD00 2268 0004                  		movea.l	4(a0),a1
0000DD04 7200                       		moveq	#0,d1
0000DD06 0804 0005                  		btst	#5,d4
0000DD0A 6600                       		bne.s	loc_D71C
0000DD0C 1228 001A                  		move.b	$1A(a0),d1
0000DD10 D201                       		add.b	d1,d1
0000DD12 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DD16 1219                       		move.b	(a1)+,d1
0000DD18 5301                       		subq.b	#1,d1
0000DD1A 6B00                       		bmi.s	loc_D720
0000DD1C                            
0000DD1C                            loc_D71C:
0000DD1C 6100 0000                  		bsr.w	sub_D750
0000DD20                            
0000DD20                            loc_D720:
0000DD20 08E8 0007 0001             		bset	#7,1(a0)
0000DD26                            
0000DD26                            loc_D726:
0000DD26 5446                       		addq.w	#2,d6
0000DD28 5554                       		subq.w	#2,(a4)
0000DD2A 6600 FF46                  		bne.w	loc_D672
0000DD2E                            
0000DD2E                            loc_D72E:
0000DD2E 49EC 0080                  		lea	$80(a4),a4
0000DD32 51CF FF36                  		dbf	d7,loc_D66A
0000DD36 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DD3A 0C05 0050                  		cmpi.b	#$50,d5
0000DD3E 6700                       		beq.s	loc_D748
0000DD40 24BC 0000 0000             		move.l	#0,(a2)
0000DD46 4E75                       		rts	
0000DD48                            ; ===========================================================================
0000DD48                            
0000DD48                            loc_D748:
0000DD48 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DD4E 4E75                       		rts	
0000DD50                            ; End of function BuildSprites
0000DD50                            
0000DD50                            
0000DD50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD50                            
0000DD50                            
0000DD50                            sub_D750:				; XREF: BuildSprites
0000DD50 3668 0002                  		movea.w	2(a0),a3
0000DD54 0804 0000                  		btst	#0,d4
0000DD58 6600                       		bne.s	loc_D796
0000DD5A 0804 0001                  		btst	#1,d4
0000DD5E 6600 0000                  		bne.w	loc_D7E4
0000DD62                            ; End of function sub_D750
0000DD62                            
0000DD62                            
0000DD62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD62                            
0000DD62                            
0000DD62                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DD62 0C05 0050                  		cmpi.b	#$50,d5
0000DD66 6700                       		beq.s	locret_D794
0000DD68 1019                       		move.b	(a1)+,d0
0000DD6A 4880                       		ext.w	d0
0000DD6C D042                       		add.w	d2,d0
0000DD6E 34C0                       		move.w	d0,(a2)+
0000DD70 14D9                       		move.b	(a1)+,(a2)+
0000DD72 5205                       		addq.b	#1,d5
0000DD74 14C5                       		move.b	d5,(a2)+
0000DD76 1019                       		move.b	(a1)+,d0
0000DD78 E148                       		lsl.w	#8,d0
0000DD7A 1019                       		move.b	(a1)+,d0
0000DD7C D04B                       		add.w	a3,d0
0000DD7E 34C0                       		move.w	d0,(a2)+
0000DD80 1019                       		move.b	(a1)+,d0
0000DD82 4880                       		ext.w	d0
0000DD84 D043                       		add.w	d3,d0
0000DD86 0240 01FF                  		andi.w	#$1FF,d0
0000DD8A 6600                       		bne.s	loc_D78E
0000DD8C 5240                       		addq.w	#1,d0
0000DD8E                            
0000DD8E                            loc_D78E:
0000DD8E 34C0                       		move.w	d0,(a2)+
0000DD90 51C9 FFD0                  		dbf	d1,sub_D762
0000DD94                            
0000DD94                            locret_D794:
0000DD94 4E75                       		rts	
0000DD96                            ; End of function sub_D762
0000DD96                            
0000DD96                            ; ===========================================================================
0000DD96                            
0000DD96                            loc_D796:
0000DD96 0804 0001                  		btst	#1,d4
0000DD9A 6600 0000                  		bne.w	loc_D82A
0000DD9E                            
0000DD9E                            loc_D79E:
0000DD9E 0C05 0050                  		cmpi.b	#$50,d5
0000DDA2 6700                       		beq.s	locret_D7E2
0000DDA4 1019                       		move.b	(a1)+,d0
0000DDA6 4880                       		ext.w	d0
0000DDA8 D042                       		add.w	d2,d0
0000DDAA 34C0                       		move.w	d0,(a2)+
0000DDAC 1819                       		move.b	(a1)+,d4
0000DDAE 14C4                       		move.b	d4,(a2)+
0000DDB0 5205                       		addq.b	#1,d5
0000DDB2 14C5                       		move.b	d5,(a2)+
0000DDB4 1019                       		move.b	(a1)+,d0
0000DDB6 E148                       		lsl.w	#8,d0
0000DDB8 1019                       		move.b	(a1)+,d0
0000DDBA D04B                       		add.w	a3,d0
0000DDBC 0A40 0800                  		eori.w	#$800,d0
0000DDC0 34C0                       		move.w	d0,(a2)+
0000DDC2 1019                       		move.b	(a1)+,d0
0000DDC4 4880                       		ext.w	d0
0000DDC6 4440                       		neg.w	d0
0000DDC8 D804                       		add.b	d4,d4
0000DDCA 0244 0018                  		andi.w	#$18,d4
0000DDCE 5044                       		addq.w	#8,d4
0000DDD0 9044                       		sub.w	d4,d0
0000DDD2 D043                       		add.w	d3,d0
0000DDD4 0240 01FF                  		andi.w	#$1FF,d0
0000DDD8 6600                       		bne.s	loc_D7DC
0000DDDA 5240                       		addq.w	#1,d0
0000DDDC                            
0000DDDC                            loc_D7DC:
0000DDDC 34C0                       		move.w	d0,(a2)+
0000DDDE 51C9 FFBE                  		dbf	d1,loc_D79E
0000DDE2                            
0000DDE2                            locret_D7E2:
0000DDE2 4E75                       		rts	
0000DDE4                            ; ===========================================================================
0000DDE4                            
0000DDE4                            loc_D7E4:				; XREF: sub_D750
0000DDE4 0C05 0050                  		cmpi.b	#$50,d5
0000DDE8 6700                       		beq.s	locret_D828
0000DDEA 1019                       		move.b	(a1)+,d0
0000DDEC 1811                       		move.b	(a1),d4
0000DDEE 4880                       		ext.w	d0
0000DDF0 4440                       		neg.w	d0
0000DDF2 E70C                       		lsl.b	#3,d4
0000DDF4 0244 0018                  		andi.w	#$18,d4
0000DDF8 5044                       		addq.w	#8,d4
0000DDFA 9044                       		sub.w	d4,d0
0000DDFC D042                       		add.w	d2,d0
0000DDFE 34C0                       		move.w	d0,(a2)+
0000DE00 14D9                       		move.b	(a1)+,(a2)+
0000DE02 5205                       		addq.b	#1,d5
0000DE04 14C5                       		move.b	d5,(a2)+
0000DE06 1019                       		move.b	(a1)+,d0
0000DE08 E148                       		lsl.w	#8,d0
0000DE0A 1019                       		move.b	(a1)+,d0
0000DE0C D04B                       		add.w	a3,d0
0000DE0E 0A40 1000                  		eori.w	#$1000,d0
0000DE12 34C0                       		move.w	d0,(a2)+
0000DE14 1019                       		move.b	(a1)+,d0
0000DE16 4880                       		ext.w	d0
0000DE18 D043                       		add.w	d3,d0
0000DE1A 0240 01FF                  		andi.w	#$1FF,d0
0000DE1E 6600                       		bne.s	loc_D822
0000DE20 5240                       		addq.w	#1,d0
0000DE22                            
0000DE22                            loc_D822:
0000DE22 34C0                       		move.w	d0,(a2)+
0000DE24 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DE28                            
0000DE28                            locret_D828:
0000DE28 4E75                       		rts	
0000DE2A                            ; ===========================================================================
0000DE2A                            
0000DE2A                            loc_D82A:
0000DE2A 0C05 0050                  		cmpi.b	#$50,d5
0000DE2E 6700                       		beq.s	locret_D87C
0000DE30 1019                       		move.b	(a1)+,d0
0000DE32 1811                       		move.b	(a1),d4
0000DE34 4880                       		ext.w	d0
0000DE36 4440                       		neg.w	d0
0000DE38 E70C                       		lsl.b	#3,d4
0000DE3A 0244 0018                  		andi.w	#$18,d4
0000DE3E 5044                       		addq.w	#8,d4
0000DE40 9044                       		sub.w	d4,d0
0000DE42 D042                       		add.w	d2,d0
0000DE44 34C0                       		move.w	d0,(a2)+
0000DE46 1819                       		move.b	(a1)+,d4
0000DE48 14C4                       		move.b	d4,(a2)+
0000DE4A 5205                       		addq.b	#1,d5
0000DE4C 14C5                       		move.b	d5,(a2)+
0000DE4E 1019                       		move.b	(a1)+,d0
0000DE50 E148                       		lsl.w	#8,d0
0000DE52 1019                       		move.b	(a1)+,d0
0000DE54 D04B                       		add.w	a3,d0
0000DE56 0A40 1800                  		eori.w	#$1800,d0
0000DE5A 34C0                       		move.w	d0,(a2)+
0000DE5C 1019                       		move.b	(a1)+,d0
0000DE5E 4880                       		ext.w	d0
0000DE60 4440                       		neg.w	d0
0000DE62 D804                       		add.b	d4,d4
0000DE64 0244 0018                  		andi.w	#$18,d4
0000DE68 5044                       		addq.w	#8,d4
0000DE6A 9044                       		sub.w	d4,d0
0000DE6C D043                       		add.w	d3,d0
0000DE6E 0240 01FF                  		andi.w	#$1FF,d0
0000DE72 6600                       		bne.s	loc_D876
0000DE74 5240                       		addq.w	#1,d0
0000DE76                            
0000DE76                            loc_D876:
0000DE76 34C0                       		move.w	d0,(a2)+
0000DE78 51C9 FFB0                  		dbf	d1,loc_D82A
0000DE7C                            
0000DE7C                            locret_D87C:
0000DE7C 4E75                       		rts	
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            ; Subroutine to	check if an object is on the screen
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            
0000DE7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE7E                            
0000DE7E                            
0000DE7E                            ChkObjOnScreen:
0000DE7E 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DE82 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DE86 6B00                       		bmi.s	NotOnScreen
0000DE88 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE8C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE8E                            
0000DE8E 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE92 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE96 6B00                       		bmi.s	NotOnScreen
0000DE98 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE9C 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE9E                            
0000DE9E 7000                       		moveq	#0,d0		; set flag to 0
0000DEA0 4E75                       		rts	
0000DEA2                            ; ===========================================================================
0000DEA2                            
0000DEA2                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DEA2 7001                       		moveq	#1,d0		; set flag to 1
0000DEA4 4E75                       		rts	
0000DEA6                            ; End of function ChkObjOnScreen
0000DEA6                            
0000DEA6                            
0000DEA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEA6                            
0000DEA6                            
0000DEA6                            ChkObjOnScreen2:
0000DEA6 7200                       		moveq	#0,d1
0000DEA8 1228 0019                  		move.b	$19(a0),d1
0000DEAC 3028 0008                  		move.w	8(a0),d0
0000DEB0 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DEB4 D041                       		add.w	d1,d0
0000DEB6 6B00                       		bmi.s	NotOnScreen2
0000DEB8 D241                       		add.w	d1,d1
0000DEBA 9041                       		sub.w	d1,d0
0000DEBC 0C40 0140                  		cmpi.w	#320,d0
0000DEC0 6C00                       		bge.s	NotOnScreen2
0000DEC2                            
0000DEC2 3228 000C                  		move.w	$C(a0),d1
0000DEC6 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DECA 6B00                       		bmi.s	NotOnScreen2
0000DECC 0C41 00E0                  		cmpi.w	#224,d1
0000DED0 6C00                       		bge.s	NotOnScreen2
0000DED2                            
0000DED2 7000                       		moveq	#0,d0
0000DED4 4E75                       		rts	
0000DED6                            ; ===========================================================================
0000DED6                            
0000DED6                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DED6 7001                       		moveq	#1,d0
0000DED8 4E75                       		rts	
0000DEDA                            ; End of function ChkObjOnScreen2
0000DEDA                            
0000DEDA                            ; ---------------------------------------------------------------------------
0000DEDA                            ; Subroutine to	load a level's objects
0000DEDA                            ; ---------------------------------------------------------------------------
0000DEDA                            
0000DEDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEDA                            
0000DEDA                            
0000DEDA                            ObjPosLoad:				; XREF: Level; et al
0000DEDA 7000                       		moveq	#0,d0
0000DEDC 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DEE0 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DEE4 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DEE8                            ; End of function ObjPosLoad
0000DEE8                            
0000DEE8                            ; ===========================================================================
0000DEE8 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DEEA 0000                       		dc.w OPL_Next-OPL_Index
0000DEEC                            ; ===========================================================================
0000DEEC                            
0000DEEC                            OPL_Main:				; XREF: OPL_Index
0000DEEC 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DEF0 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DEF4 ED08                       		lsl.b	#6,d0
0000DEF6 E848                       		lsr.w	#4,d0
0000DEF8 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DEFE 2248                       		movea.l	a0,a1
0000DF00 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DF04 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF08 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF0C D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DF10 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DF14 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DF18 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF1C 34FC 0101                  		move.w	#$101,(a2)+
0000DF20 303C 005E                  		move.w	#$5E,d0
0000DF24                            
0000DF24                            OPL_ClrList:
0000DF24 429A                       		clr.l	(a2)+
0000DF26 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DF2A                            
0000DF2A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF2E 7400                       		moveq	#0,d2
0000DF30 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF34 0446 0080                  		subi.w	#$80,d6
0000DF38 6400                       		bcc.s	loc_D93C
0000DF3A 7C00                       		moveq	#0,d6
0000DF3C                            
0000DF3C                            loc_D93C:
0000DF3C 0246 FF80                  		andi.w	#$FF80,d6
0000DF40 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF44                            
0000DF44                            loc_D944:
0000DF44 BC50                       		cmp.w	(a0),d6
0000DF46 6300                       		bls.s	loc_D956
0000DF48 4A28 0004                  		tst.b	4(a0)
0000DF4C 6A00                       		bpl.s	loc_D952
0000DF4E 1412                       		move.b	(a2),d2
0000DF50 5212                       		addq.b	#1,(a2)
0000DF52                            
0000DF52                            loc_D952:
0000DF52 5C48                       		addq.w	#6,a0
0000DF54 60EE                       		bra.s	loc_D944
0000DF56                            ; ===========================================================================
0000DF56                            
0000DF56                            loc_D956:
0000DF56 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF5A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF5E 0446 0080                  		subi.w	#$80,d6
0000DF62 6500                       		bcs.s	loc_D976
0000DF64                            
0000DF64                            loc_D964:
0000DF64 BC50                       		cmp.w	(a0),d6
0000DF66 6300                       		bls.s	loc_D976
0000DF68 4A28 0004                  		tst.b	4(a0)
0000DF6C 6A00                       		bpl.s	loc_D972
0000DF6E 522A 0001                  		addq.b	#1,1(a2)
0000DF72                            
0000DF72                            loc_D972:
0000DF72 5C48                       		addq.w	#6,a0
0000DF74 60EE                       		bra.s	loc_D964
0000DF76                            ; ===========================================================================
0000DF76                            
0000DF76                            loc_D976:
0000DF76 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF7A 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DF80                            
0000DF80                            OPL_Next:				; XREF: OPL_Index
0000DF80 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF84 7400                       		moveq	#0,d2
0000DF86 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF8A 0246 FF80                  		andi.w	#$FF80,d6
0000DF8E BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF92 6700 0000                  		beq.w	locret_DA3A
0000DF96 6C00                       		bge.s	loc_D9F6
0000DF98 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF9C 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DFA0 0446 0080                  		subi.w	#$80,d6
0000DFA4 6500                       		bcs.s	loc_D9D2
0000DFA6                            
0000DFA6                            loc_D9A6:
0000DFA6 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DFAA 6C00                       		bge.s	loc_D9D2
0000DFAC 5D48                       		subq.w	#6,a0
0000DFAE 4A28 0004                  		tst.b	4(a0)
0000DFB2 6A00                       		bpl.s	loc_D9BC
0000DFB4 532A 0001                  		subq.b	#1,1(a2)
0000DFB8 142A 0001                  		move.b	1(a2),d2
0000DFBC                            
0000DFBC                            loc_D9BC:
0000DFBC 6100 0000                  		bsr.w	loc_DA3C
0000DFC0 6600                       		bne.s	loc_D9C6
0000DFC2 5D48                       		subq.w	#6,a0
0000DFC4 60E0                       		bra.s	loc_D9A6
0000DFC6                            ; ===========================================================================
0000DFC6                            
0000DFC6                            loc_D9C6:
0000DFC6 4A28 0004                  		tst.b	4(a0)
0000DFCA 6A00                       		bpl.s	loc_D9D0
0000DFCC 522A 0001                  		addq.b	#1,1(a2)
0000DFD0                            
0000DFD0                            loc_D9D0:
0000DFD0 5C48                       		addq.w	#6,a0
0000DFD2                            
0000DFD2                            loc_D9D2:
0000DFD2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFD6 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFDA 0646 0300                  		addi.w	#$300,d6
0000DFDE                            
0000DFDE                            loc_D9DE:
0000DFDE BC68 FFFA                  		cmp.w	-6(a0),d6
0000DFE2 6E00                       		bgt.s	loc_D9F0
0000DFE4 4A28 FFFE                  		tst.b	-2(a0)
0000DFE8 6A00                       		bpl.s	loc_D9EC
0000DFEA 5312                       		subq.b	#1,(a2)
0000DFEC                            
0000DFEC                            loc_D9EC:
0000DFEC 5D48                       		subq.w	#6,a0
0000DFEE 60EE                       		bra.s	loc_D9DE
0000DFF0                            ; ===========================================================================
0000DFF0                            
0000DFF0                            loc_D9F0:
0000DFF0 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFF4 4E75                       		rts	
0000DFF6                            ; ===========================================================================
0000DFF6                            
0000DFF6                            loc_D9F6:
0000DFF6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DFFA 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFFE 0646 0280                  		addi.w	#$280,d6
0000E002                            
0000E002                            loc_DA02:
0000E002 BC50                       		cmp.w	(a0),d6
0000E004 6300                       		bls.s	loc_DA16
0000E006 4A28 0004                  		tst.b	4(a0)
0000E00A 6A00                       		bpl.s	loc_DA10
0000E00C 1412                       		move.b	(a2),d2
0000E00E 5212                       		addq.b	#1,(a2)
0000E010                            
0000E010                            loc_DA10:
0000E010 6100 0000                  		bsr.w	loc_DA3C
0000E014 67EC                       		beq.s	loc_DA02
0000E016                            
0000E016                            loc_DA16:
0000E016 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E01A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E01E 0446 0300                  		subi.w	#$300,d6
0000E022 6500                       		bcs.s	loc_DA36
0000E024                            
0000E024                            loc_DA24:
0000E024 BC50                       		cmp.w	(a0),d6
0000E026 6300                       		bls.s	loc_DA36
0000E028 4A28 0004                  		tst.b	4(a0)
0000E02C 6A00                       		bpl.s	loc_DA32
0000E02E 522A 0001                  		addq.b	#1,1(a2)
0000E032                            
0000E032                            loc_DA32:
0000E032 5C48                       		addq.w	#6,a0
0000E034 60EE                       		bra.s	loc_DA24
0000E036                            ; ===========================================================================
0000E036                            
0000E036                            loc_DA36:
0000E036 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E03A                            
0000E03A                            locret_DA3A:
0000E03A 4E75                       		rts	
0000E03C                            ; ===========================================================================
0000E03C                            
0000E03C                            loc_DA3C:
0000E03C 4A28 0004                  		tst.b	4(a0)
0000E040 6A00                       		bpl.s	OPL_MakeItem
0000E042 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E048 6700                       		beq.s	OPL_MakeItem
0000E04A 5C48                       		addq.w	#6,a0
0000E04C 7000                       		moveq	#0,d0
0000E04E 4E75                       		rts	
0000E050                            ; ===========================================================================
0000E050                            
0000E050                            OPL_MakeItem:
0000E050 6100 0000                  		bsr.w	SingleObjLoad
0000E054 6600                       		bne.s	locret_DA8A
0000E056 3358 0008                  		move.w	(a0)+,8(a1)
0000E05A 3018                       		move.w	(a0)+,d0
0000E05C 3200                       		move.w	d0,d1
0000E05E 0240 0FFF                  		andi.w	#$FFF,d0
0000E062 3340 000C                  		move.w	d0,$C(a1)
0000E066 E559                       		rol.w	#2,d1
0000E068 0201 0003                  		andi.b	#3,d1
0000E06C 1341 0001                  		move.b	d1,1(a1)
0000E070 1341 0022                  		move.b	d1,$22(a1)
0000E074 1018                       		move.b	(a0)+,d0
0000E076 6A00                       		bpl.s	loc_DA80
0000E078 0200 007F                  		andi.b	#$7F,d0
0000E07C 1342 0023                  		move.b	d2,$23(a1)
0000E080                            
0000E080                            loc_DA80:
0000E080 1280                       		move.b	d0,0(a1)
0000E082 1358 0028                  		move.b	(a0)+,$28(a1)
0000E086 7000                       		moveq	#0,d0
0000E088                            
0000E088                            locret_DA8A:
0000E088 4E75                       		rts	
0000E08A                            ; ---------------------------------------------------------------------------
0000E08A                            ; Single object	loading	subroutine
0000E08A                            ; ---------------------------------------------------------------------------
0000E08A                            
0000E08A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E08A                            
0000E08A                            
0000E08A                            SingleObjLoad:
0000E08A 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E08E 303C 005F                  		move.w	#$5F,d0
0000E092                            
0000E092                            loc_DA94:
0000E092 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E094 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E096 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E09A 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E09E                            
0000E09E                            locret_DAA0:
0000E09E 4E75                       		rts	
0000E0A0                            ; End of function SingleObjLoad
0000E0A0                            
0000E0A0                            
0000E0A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0A0                            
0000E0A0                            
0000E0A0                            SingleObjLoad2:
0000E0A0 2248                       		movea.l	a0,a1
0000E0A2 303C F000                  		move.w	#-$1000,d0
0000E0A6 9048                       		sub.w	a0,d0
0000E0A8 EC48                       		lsr.w	#6,d0
0000E0AA 5340                       		subq.w	#1,d0
0000E0AC 6500                       		bcs.s	locret_DABC
0000E0AE                            
0000E0AE                            loc_DAB0:
0000E0AE 4A11                       		tst.b	(a1)
0000E0B0 6700                       		beq.s	locret_DABC
0000E0B2 43E9 0040                  		lea	$40(a1),a1
0000E0B6 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E0BA                            
0000E0BA                            locret_DABC:
0000E0BA 4E75                       		rts	
0000E0BC                            ; End of function SingleObjLoad2
0000E0BC                            
0000E0BC                            ; ===========================================================================
0000E0BC                            ; ---------------------------------------------------------------------------
0000E0BC                            ; Object 41 - springs
0000E0BC                            ; ---------------------------------------------------------------------------
0000E0BC                            
0000E0BC                            Obj41:					; XREF: Obj_Index
0000E0BC 7000                       		moveq	#0,d0
0000E0BE 1028 0024                  		move.b	$24(a0),d0
0000E0C2 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E0C6 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E0CA 6100 FB38                  		bsr.w	DisplaySprite
0000E0CE 3028 0008                  		move.w	8(a0),d0
0000E0D2 0240 FF80                  		andi.w	#$FF80,d0
0000E0D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000E0DA 0441 0080                  		subi.w	#$80,d1
0000E0DE 0241 FF80                  		andi.w	#$FF80,d1
0000E0E2 9041                       		sub.w	d1,d0
0000E0E4 0C40 0280                  		cmpi.w	#$280,d0
0000E0E8 6200 FB56                  		bhi.w	DeleteObject
0000E0EC 4E75                       		rts	
0000E0EE                            ; ===========================================================================
0000E0EE 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E0F0 0000                       		dc.w Obj41_Up-Obj41_Index
0000E0F2 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E0F4 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E0F6 0000                       		dc.w Obj41_LR-Obj41_Index
0000E0F8 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E0FA 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E0FC 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E0FE 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E100 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E102                            
0000E102 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E104 F600                       		dc.w -$A00		; power	of yellow spring
0000E106                            ; ===========================================================================
0000E106                            
0000E106                            Obj41_Main:				; XREF: Obj41_Index
0000E106 5428 0024                  		addq.b	#2,$24(a0)
0000E10A 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E112 317C 0523 0002             		move.w	#$523,2(a0)
0000E118 0028 0004 0001             		ori.b	#4,1(a0)
0000E11E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E124 117C 0004 0018             		move.b	#4,$18(a0)
0000E12A 1028 0028                  		move.b	$28(a0),d0
0000E12E 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E132 6700                       		beq.s	loc_DB54	; if not, branch
0000E134 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E13A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E140 117C 0003 001A             		move.b	#3,$1A(a0)
0000E146 317C 0533 0002             		move.w	#$533,2(a0)
0000E14C 117C 0008 0019             		move.b	#8,$19(a0)
0000E152                            
0000E152                            loc_DB54:
0000E152 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E156 6700                       		beq.s	loc_DB66	; if not, branch
0000E158 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E15E 08E8 0001 0022             		bset	#1,$22(a0)
0000E164                            
0000E164                            loc_DB66:
0000E164 0800 0001                  		btst	#1,d0
0000E168 6700                       		beq.s	loc_DB72
0000E16A 08E8 0005 0002             		bset	#5,2(a0)
0000E170                            
0000E170                            loc_DB72:
0000E170 0240 000F                  		andi.w	#$F,d0
0000E174 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E17A 4E75                       		rts	
0000E17C                            ; ===========================================================================
0000E17C                            
0000E17C                            Obj41_Up:				; XREF: Obj41_Index
0000E17C 323C 001B                  		move.w	#$1B,d1
0000E180 343C 0008                  		move.w	#8,d2
0000E184 363C 0010                  		move.w	#$10,d3
0000E188 3828 0008                  		move.w	8(a0),d4
0000E18C 6100 0000                  		bsr.w	SolidObject
0000E190 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E194 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E196 4E75                       		rts	
0000E198                            ; ===========================================================================
0000E198                            
0000E198                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E198 5428 0024                  		addq.b	#2,$24(a0)
0000E19C 5069 000C                  		addq.w	#8,$C(a1)
0000E1A0 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E1A6 08E9 0001 0022             		bset	#1,$22(a1)
0000E1AC 08A9 0003 0022             		bclr	#3,$22(a1)
0000E1B2 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E1B8 137C 0002 0024             		move.b	#2,$24(a1)
0000E1BE 08A8 0003 0022             		bclr	#3,$22(a0)
0000E1C4 4228 0025                  		clr.b	$25(a0)
0000E1C8 303C 00CC                  		move.w	#$CC,d0
0000E1CC 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E1D2                            
0000E1D2                            Obj41_AniUp:				; XREF: Obj41_Index
0000E1D2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E1D8 6000 CAF4                  		bra.w	AnimateSprite
0000E1DC                            ; ===========================================================================
0000E1DC                            
0000E1DC                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E1DC 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E1E2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E1E6 4E75                       		rts	
0000E1E8                            ; ===========================================================================
0000E1E8                            
0000E1E8                            Obj41_LR:				; XREF: Obj41_Index
0000E1E8 323C 0013                  		move.w	#$13,d1
0000E1EC 343C 000E                  		move.w	#$E,d2
0000E1F0 363C 000F                  		move.w	#$F,d3
0000E1F4 3828 0008                  		move.w	8(a0),d4
0000E1F8 6100 0000                  		bsr.w	SolidObject
0000E1FC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E202 6600                       		bne.s	loc_DC0C
0000E204 117C 0008 0024             		move.b	#8,$24(a0)
0000E20A                            
0000E20A                            loc_DC0C:
0000E20A 0828 0005 0022             		btst	#5,$22(a0)
0000E210 6600                       		bne.s	Obj41_BounceLR
0000E212 4E75                       		rts	
0000E214                            ; ===========================================================================
0000E214                            
0000E214                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E214 5428 0024                  		addq.b	#2,$24(a0)
0000E218 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E21E 5069 0008                  		addq.w	#8,8(a1)
0000E222 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E228 6600                       		bne.s	loc_DC36	; if yes, branch
0000E22A 0469 0010 0008             		subi.w	#$10,8(a1)
0000E230 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E234                            
0000E234                            loc_DC36:
0000E234 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E23A 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E240 0869 0000 0022             		bchg	#0,$22(a1)
0000E246 0829 0002 0022             		btst	#2,$22(a1)
0000E24C 6600                       		bne.s	loc_DC56
0000E24E 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E254                            
0000E254                            loc_DC56:
0000E254 08A8 0005 0022             		bclr	#5,$22(a0)
0000E25A 08A9 0005 0022             		bclr	#5,$22(a1)
0000E260 303C 00CC                  		move.w	#$CC,d0
0000E264 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E26A                            
0000E26A                            Obj41_AniLR:				; XREF: Obj41_Index
0000E26A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E270 6000 CA5C                  		bra.w	AnimateSprite
0000E274                            ; ===========================================================================
0000E274                            
0000E274                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E274 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E27A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E27E 4E75                       		rts	
0000E280                            ; ===========================================================================
0000E280                            
0000E280                            Obj41_Dwn:				; XREF: Obj41_Index
0000E280 323C 001B                  		move.w	#$1B,d1
0000E284 343C 0008                  		move.w	#8,d2
0000E288 363C 0010                  		move.w	#$10,d3
0000E28C 3828 0008                  		move.w	8(a0),d4
0000E290 6100 0000                  		bsr.w	SolidObject
0000E294 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E29A 6600                       		bne.s	loc_DCA4
0000E29C 117C 000E 0024             		move.b	#$E,$24(a0)
0000E2A2                            
0000E2A2                            loc_DCA4:
0000E2A2 4A28 0025                  		tst.b	$25(a0)
0000E2A6 6600                       		bne.s	locret_DCAE
0000E2A8 4A44                       		tst.w	d4
0000E2AA 6B00                       		bmi.s	Obj41_BounceDwn
0000E2AC                            
0000E2AC                            locret_DCAE:
0000E2AC 4E75                       		rts	
0000E2AE                            ; ===========================================================================
0000E2AE                            
0000E2AE                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E2AE 5428 0024                  		addq.b	#2,$24(a0)
0000E2B2 5169 000C                  		subq.w	#8,$C(a1)
0000E2B6 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E2BC 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E2C0 08E9 0001 0022             		bset	#1,$22(a1)
0000E2C6 08A9 0003 0022             		bclr	#3,$22(a1)
0000E2CC 137C 0002 0024             		move.b	#2,$24(a1)
0000E2D2 08A8 0003 0022             		bclr	#3,$22(a0)
0000E2D8 4228 0025                  		clr.b	$25(a0)
0000E2DC 303C 00CC                  		move.w	#$CC,d0
0000E2E0 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play spring sound
0000E2E6                            
0000E2E6                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E2E6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E2EC 6000 C9E0                  		bra.w	AnimateSprite
0000E2F0                            ; ===========================================================================
0000E2F0                            
0000E2F0                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E2F0 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E2F6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E2FA 4E75                       		rts	
0000E2FC                            ; ===========================================================================
0000E2FC                            Ani_obj41:
0000E2FC                            	include "_anim\obj41.asm"
0000E2FC                            ; ---------------------------------------------------------------------------
0000E2FC                            ; Animation script - springs
0000E2FC                            ; ---------------------------------------------------------------------------
0000E2FC 0000                       		dc.w byte_DD02-Ani_obj41
0000E2FE 0000                       		dc.w byte_DD0E-Ani_obj41
0000E300 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E30C 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E318                            		even
0000E318                            		even
0000E318                            
0000E318                            ; ---------------------------------------------------------------------------
0000E318                            ; Sprite mappings - springs
0000E318                            ; ---------------------------------------------------------------------------
0000E318                            Map_obj41:
0000E318                            	include "_maps\obj41.asm"
0000E318                            ; ---------------------------------------------------------------------------
0000E318                            ; Sprite mappings - springs
0000E318                            ; ---------------------------------------------------------------------------
0000E318 0000                       		dc.w byte_DD26-Map_obj41
0000E31A 0000                       		dc.w byte_DD31-Map_obj41
0000E31C 0000                       		dc.w byte_DD37-Map_obj41
0000E31E 0000                       		dc.w byte_DD47-Map_obj41
0000E320 0000                       		dc.w byte_DD4D-Map_obj41
0000E322 0000                       		dc.w byte_DD53-Map_obj41
0000E324 02                         byte_DD26:	dc.b 2
0000E325 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E32A 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E32F 01                         byte_DD31:	dc.b 1
0000E330 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E335 03                         byte_DD37:	dc.b 3
0000E336 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E33B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E340 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E345 01                         byte_DD47:	dc.b 1
0000E346 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E34B 01                         byte_DD4D:	dc.b 1
0000E34C F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E351 04                         byte_DD53:	dc.b 4
0000E352 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E357 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E35C F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E361 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E366                            		even
0000E366                            		even
0000E366                            
0000E366                            ; ===========================================================================
0000E366                            ; ---------------------------------------------------------------------------
0000E366                            ; Object 42 - Newtron enemy (GHZ)
0000E366                            ; ---------------------------------------------------------------------------
0000E366                            
0000E366                            Obj42:					; XREF: Obj_Index
0000E366 7000                       		moveq	#0,d0
0000E368 1028 0024                  		move.b	$24(a0),d0
0000E36C 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E370 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E374                            ; ===========================================================================
0000E374 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E376 0000                       		dc.w Obj42_Action-Obj42_Index
0000E378 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E37A                            ; ===========================================================================
0000E37A                            
0000E37A                            Obj42_Main:				; XREF: Obj42_Index
0000E37A 5428 0024                  		addq.b	#2,$24(a0)
0000E37E 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E386 317C 049B 0002             		move.w	#$49B,2(a0)
0000E38C 117C 0004 0001             		move.b	#4,1(a0)
0000E392 117C 0004 0018             		move.b	#4,$18(a0)
0000E398 117C 0014 0019             		move.b	#$14,$19(a0)
0000E39E 117C 0010 0016             		move.b	#$10,$16(a0)
0000E3A4 117C 0008 0017             		move.b	#8,$17(a0)
0000E3AA                            
0000E3AA                            Obj42_Action:				; XREF: Obj42_Index
0000E3AA 7000                       		moveq	#0,d0
0000E3AC 1028 0025                  		move.b	$25(a0),d0
0000E3B0 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E3B4 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E3B8 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E3BE 6100 C90E                  		bsr.w	AnimateSprite
0000E3C2 6000 0000                  		bra.w	MarkObjGone
0000E3C6                            ; ===========================================================================
0000E3C6 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E3C8 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E3CA 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E3CC 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E3CE 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E3D0                            ; ===========================================================================
0000E3D0                            
0000E3D0                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E3D0 08E8 0000 0022             		bset	#0,$22(a0)
0000E3D6 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3DA 9068 0008                  		sub.w	8(a0),d0
0000E3DE 6400                       		bcc.s	loc_DDEA
0000E3E0 4440                       		neg.w	d0
0000E3E2 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3E8                            
0000E3E8                            loc_DDEA:
0000E3E8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E3EC 6400                       		bcc.s	locret_DE12	; if not, branch
0000E3EE 5428 0025                  		addq.b	#2,$25(a0)
0000E3F2 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3F8 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E3FC 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E3FE 317C 249B 0002             		move.w	#$249B,2(a0)
0000E404 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E40A 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E410                            
0000E410                            locret_DE12:
0000E410 4E75                       		rts	
0000E412                            ; ===========================================================================
0000E412                            
0000E412                            Obj42_Type00:				; XREF: Obj42_Index2
0000E412 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E418 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E41A 08E8 0000 0022             		bset	#0,$22(a0)
0000E420 3038 D008                  		move.w	($FFFFD008).w,d0
0000E424 9068 0008                  		sub.w	8(a0),d0
0000E428 6400                       		bcc.s	locret_DE32
0000E42A 08A8 0000 0022             		bclr	#0,$22(a0)
0000E430                            
0000E430                            locret_DE32:
0000E430 4E75                       		rts	
0000E432                            ; ===========================================================================
0000E432                            
0000E432                            Obj42_Fall:				; XREF: Obj42_Type00
0000E432 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E438 6600                       		bne.s	loc_DE42
0000E43A 117C 000C 0020             		move.b	#$C,$20(a0)
0000E440                            
0000E440                            loc_DE42:
0000E440 6100 F770                  		bsr.w	ObjectFall
0000E444 6100 0000                  		bsr.w	ObjHitFloor
0000E448 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E44A 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E44C D368 000C                  		add.w	d1,$C(a0)
0000E450 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E456 5428 0025                  		addq.b	#2,$25(a0)
0000E45A 117C 0002 001C             		move.b	#2,$1C(a0)
0000E460 0828 0005 0002             		btst	#5,2(a0)
0000E466 6700                       		beq.s	Obj42_Move
0000E468 5228 001C                  		addq.b	#1,$1C(a0)
0000E46C                            
0000E46C                            Obj42_Move:
0000E46C 117C 000D 0020             		move.b	#$D,$20(a0)
0000E472 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E478 0828 0000 0022             		btst	#0,$22(a0)
0000E47E 6600                       		bne.s	locret_DE86
0000E480 4468 0010                  		neg.w	$10(a0)
0000E484                            
0000E484                            locret_DE86:
0000E484 4E75                       		rts	
0000E486                            ; ===========================================================================
0000E486                            
0000E486                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E486 6100 F756                  		bsr.w	SpeedToPos
0000E48A 6100 0000                  		bsr.w	ObjHitFloor
0000E48E 0C41 FFF8                  		cmpi.w	#-8,d1
0000E492 6D00                       		blt.s	loc_DEA2
0000E494 0C41 000C                  		cmpi.w	#$C,d1
0000E498 6C00                       		bge.s	loc_DEA2
0000E49A D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E49E 4E75                       		rts	
0000E4A0                            ; ===========================================================================
0000E4A0                            
0000E4A0                            loc_DEA2:
0000E4A0 5428 0025                  		addq.b	#2,$25(a0)
0000E4A4 4E75                       		rts	
0000E4A6                            ; ===========================================================================
0000E4A6                            
0000E4A6                            Obj42_Speed:				; XREF: Obj42_Index2
0000E4A6 6100 F736                  		bsr.w	SpeedToPos
0000E4AA 4E75                       		rts	
0000E4AC                            ; ===========================================================================
0000E4AC                            
0000E4AC                            Obj42_Type01:				; XREF: Obj42_Index2
0000E4AC 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E4B2 6600                       		bne.s	Obj42_FireMissile
0000E4B4 117C 000C 0020             		move.b	#$C,$20(a0)
0000E4BA                            
0000E4BA                            Obj42_FireMissile:
0000E4BA 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E4C0 6600                       		bne.s	locret_DF14
0000E4C2 4A28 0032                  		tst.b	$32(a0)
0000E4C6 6600                       		bne.s	locret_DF14
0000E4C8 117C 0001 0032             		move.b	#1,$32(a0)
0000E4CE 6100 FBBA                  		bsr.w	SingleObjLoad
0000E4D2 6600                       		bne.s	locret_DF14
0000E4D4 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E4D8 3368 0008 0008             		move.w	8(a0),8(a1)
0000E4DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E4E4 5169 000C                  		subq.w	#8,$C(a1)
0000E4E8 337C 0200 0010             		move.w	#$200,$10(a1)
0000E4EE 303C 0014                  		move.w	#$14,d0
0000E4F2 0828 0000 0022             		btst	#0,$22(a0)
0000E4F8 6600                       		bne.s	loc_DF04
0000E4FA 4440                       		neg.w	d0
0000E4FC 4469 0010                  		neg.w	$10(a1)
0000E500                            
0000E500                            loc_DF04:
0000E500 D169 0008                  		add.w	d0,8(a1)
0000E504 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E50A 137C 0001 0028             		move.b	#1,$28(a1)
0000E510                            
0000E510                            locret_DF14:
0000E510 4E75                       		rts	
0000E512                            ; ===========================================================================
0000E512                            
0000E512                            Obj42_Delete:				; XREF: Obj42_Index
0000E512 6000 F72C                  		bra.w	DeleteObject
0000E516                            ; ===========================================================================
0000E516                            Ani_obj42:
0000E516                            	include "_anim\obj42.asm"
0000E516                            ; ---------------------------------------------------------------------------
0000E516                            ; Animation script - Newtron enemy
0000E516                            ; ---------------------------------------------------------------------------
0000E516 0000                       		dc.w byte_DF24-Ani_obj42
0000E518 0000                       		dc.w byte_DF28-Ani_obj42
0000E51A 0000                       		dc.w byte_DF30-Ani_obj42
0000E51C 0000                       		dc.w byte_DF34-Ani_obj42
0000E51E 0000                       		dc.w byte_DF38-Ani_obj42
0000E520 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E524 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E52C 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E530 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E534 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E53E                            		even
0000E53E                            		even
0000E53E                            
0000E53E                            ; ---------------------------------------------------------------------------
0000E53E                            ; Sprite mappings - Newtron enemy (GHZ)
0000E53E                            ; ---------------------------------------------------------------------------
0000E53E                            Map_obj42:
0000E53E                            	include "_maps\obj42.asm"
0000E53E                            ; ---------------------------------------------------------------------------
0000E53E                            ; Sprite mappings - Newtron enemy (GHZ)
0000E53E                            ; ---------------------------------------------------------------------------
0000E53E 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E542 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E546 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E54A 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E54E 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E552 0000                       		dc.w byte_DFF8-Map_obj42
0000E554 03                         byte_DF58:	dc.b 3
0000E555 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E55A F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E55F FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E564 03                         byte_DF68:	dc.b 3
0000E565 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E56A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E56F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E574 03                         byte_DF78:	dc.b 3
0000E575 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E57A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E57F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E584 04                         byte_DF88:	dc.b 4
0000E585 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E58A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E58F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E594 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E599 03                         byte_DF9D:	dc.b 3
0000E59A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E59F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E5A4 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E5A9 02                         byte_DFAD:	dc.b 2
0000E5AA F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5AF F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5B4 03                         byte_DFB8:	dc.b 3
0000E5B5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5BA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5BF FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E5C4 03                         byte_DFC8:	dc.b 3
0000E5C5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5CA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5CF FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E5D4 03                         byte_DFD8:	dc.b 3
0000E5D5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5DA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5DF FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E5E4 03                         byte_DFE8:	dc.b 3
0000E5E5 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E5EA F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E5EF FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E5F4 00                         byte_DFF8:	dc.b 0
0000E5F6 00                         		even
0000E5F6 00                         		even
0000E5F6                            
0000E5F6                            ; ===========================================================================
0000E5F6                            ; ---------------------------------------------------------------------------
0000E5F6                            ; Object 43 - Roller enemy (SYZ)
0000E5F6                            ; ---------------------------------------------------------------------------
0000E5F6                            
0000E5F6                            Obj43:					; XREF: Obj_Index
0000E5F6 7000                       		moveq	#0,d0
0000E5F8 1028 0024                  		move.b	$24(a0),d0
0000E5FC 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E600 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E604                            ; ===========================================================================
0000E604 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E606 0000                       		dc.w Obj43_Action-Obj43_Index
0000E608                            ; ===========================================================================
0000E608                            
0000E608                            Obj43_Main:				; XREF: Obj43_Index
0000E608 117C 000E 0016             		move.b	#$E,$16(a0)
0000E60E 117C 0008 0017             		move.b	#8,$17(a0)
0000E614 6100 F59C                  		bsr.w	ObjectFall
0000E618 6100 0000                  		bsr.w	ObjHitFloor
0000E61C 4A41                       		tst.w	d1
0000E61E 6A00                       		bpl.s	locret_E052
0000E620 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E624 317C 0000 0012             		move.w	#0,$12(a0)
0000E62A 5428 0024                  		addq.b	#2,$24(a0)
0000E62E 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E636 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E63C 117C 0004 0001             		move.b	#4,1(a0)
0000E642 117C 0004 0018             		move.b	#4,$18(a0)
0000E648 117C 0010 0019             		move.b	#$10,$19(a0)
0000E64E                            
0000E64E                            locret_E052:
0000E64E 4E75                       		rts	
0000E650                            ; ===========================================================================
0000E650                            
0000E650                            Obj43_Action:				; XREF: Obj43_Index
0000E650 7000                       		moveq	#0,d0
0000E652 1028 0025                  		move.b	$25(a0),d0
0000E656 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E65A 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E65E 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E664 6100 C668                  		bsr.w	AnimateSprite
0000E668 3028 0008                  		move.w	8(a0),d0
0000E66C 0240 FF80                  		andi.w	#$FF80,d0
0000E670 3238 F700                  		move.w	($FFFFF700).w,d1
0000E674 0441 0080                  		subi.w	#$80,d1
0000E678 0241 FF80                  		andi.w	#$FF80,d1
0000E67C 9041                       		sub.w	d1,d0
0000E67E 0C40 0280                  		cmpi.w	#$280,d0
0000E682 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E686 6000 F57C                  		bra.w	DisplaySprite
0000E68A                            ; ===========================================================================
0000E68A                            
0000E68A                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E68A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E68E 7000                       		moveq	#0,d0
0000E690 1028 0023                  		move.b	$23(a0),d0
0000E694 6700                       		beq.s	Obj43_Delete
0000E696 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E69C                            
0000E69C                            Obj43_Delete:
0000E69C 6000 F5A2                  		bra.w	DeleteObject
0000E6A0                            ; ===========================================================================
0000E6A0 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E6A2 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E6A4 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E6A6 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E6A8                            ; ===========================================================================
0000E6A8                            
0000E6A8                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E6A8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6AC 0440 0100                  		subi.w	#$100,d0
0000E6B0 6500                       		bcs.s	loc_E0D2
0000E6B2 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E6B6 6500                       		bcs.s	loc_E0D2
0000E6B8 5828 0025                  		addq.b	#4,$25(a0)
0000E6BC 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6C2 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E6C8 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E6CE                            
0000E6CE                            loc_E0D2:
0000E6CE 588F                       		addq.l	#4,sp
0000E6D0 4E75                       		rts	
0000E6D2                            ; ===========================================================================
0000E6D2                            
0000E6D2                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E6D2 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E6D8 6700                       		beq.s	loc_E0F8
0000E6DA 5368 0030                  		subq.w	#1,$30(a0)
0000E6DE 6A00                       		bpl.s	locret_E0F6
0000E6E0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E6E6 317C 0700 0010             		move.w	#$700,$10(a0)
0000E6EC 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E6F2                            
0000E6F2                            locret_E0F6:
0000E6F2 4E75                       		rts	
0000E6F4                            ; ===========================================================================
0000E6F4                            
0000E6F4                            loc_E0F8:
0000E6F4 5428 0025                  		addq.b	#2,$25(a0)
0000E6F8 4E75                       		rts	
0000E6FA                            ; ===========================================================================
0000E6FA                            
0000E6FA                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E6FA 6100 0000                  		bsr.w	Obj43_Stop
0000E6FE 6100 F4DE                  		bsr.w	SpeedToPos
0000E702 6100 0000                  		bsr.w	ObjHitFloor
0000E706 0C41 FFF8                  		cmpi.w	#-8,d1
0000E70A 6D00                       		blt.s	Obj43_Jump
0000E70C 0C41 000C                  		cmpi.w	#$C,d1
0000E710 6C00                       		bge.s	Obj43_Jump
0000E712 D368 000C                  		add.w	d1,$C(a0)
0000E716 4E75                       		rts	
0000E718                            ; ===========================================================================
0000E718                            
0000E718                            Obj43_Jump:
0000E718 5428 0025                  		addq.b	#2,$25(a0)
0000E71C 08E8 0000 0032             		bset	#0,$32(a0)
0000E722 6700                       		beq.s	locret_E12E
0000E724 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E72A                            
0000E72A                            locret_E12E:
0000E72A 4E75                       		rts	
0000E72C                            ; ===========================================================================
0000E72C                            
0000E72C                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E72C 6100 F484                  		bsr.w	ObjectFall
0000E730 4A68 0012                  		tst.w	$12(a0)
0000E734 6B00                       		bmi.s	locret_E150
0000E736 6100 0000                  		bsr.w	ObjHitFloor
0000E73A 4A41                       		tst.w	d1
0000E73C 6A00                       		bpl.s	locret_E150
0000E73E D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E742 5528 0025                  		subq.b	#2,$25(a0)
0000E746 317C 0000 0012             		move.w	#0,$12(a0)
0000E74C                            
0000E74C                            locret_E150:
0000E74C 4E75                       		rts	
0000E74E                            
0000E74E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E74E                            
0000E74E                            
0000E74E                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E74E 4A28 0032                  		tst.b	$32(a0)
0000E752 6B00                       		bmi.s	locret_E188
0000E754 3038 D008                  		move.w	($FFFFD008).w,d0
0000E758 0440 0030                  		subi.w	#$30,d0
0000E75C 9068 0008                  		sub.w	8(a0),d0
0000E760 6400                       		bcc.s	locret_E188
0000E762 117C 0000 001C             		move.b	#0,$1C(a0)
0000E768 117C 000E 0020             		move.b	#$E,$20(a0)
0000E76E 4268 0010                  		clr.w	$10(a0)
0000E772 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E778 117C 0002 0025             		move.b	#2,$25(a0)
0000E77E 08E8 0007 0032             		bset	#7,$32(a0)
0000E784                            
0000E784                            locret_E188:
0000E784 4E75                       		rts	
0000E786                            ; End of function Obj43_Stop
0000E786                            
0000E786                            ; ===========================================================================
0000E786                            Ani_obj43:
0000E786                            	include "_anim\obj43.asm"
0000E786                            ; ---------------------------------------------------------------------------
0000E786                            ; Animation script - Roller enemy
0000E786                            ; ---------------------------------------------------------------------------
0000E786 0000                       		dc.w byte_E190-Ani_obj43
0000E788 0000                       		dc.w byte_E196-Ani_obj43
0000E78A 0000                       		dc.w byte_E19C-Ani_obj43
0000E78C 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E792 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E798 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E79E 00                         		even
0000E79E 00                         		even
0000E79E                            
0000E79E                            ; ---------------------------------------------------------------------------
0000E79E                            ; Sprite mappings - Roller enemy (SYZ)
0000E79E                            ; ---------------------------------------------------------------------------
0000E79E                            Map_obj43:
0000E79E                            	include "_maps\obj43.asm"
0000E79E                            Map_61da:
0000E79E 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E7A0 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E7A2 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E7A4 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E7A6 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E7A8 02                         Map_61da_A: 	dc.b $2
0000E7A9 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E7AE F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E7B3 02                         Map_61da_15: 	dc.b $2
0000E7B4 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E7B9 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E7BE 01                         Map_61da_20: 	dc.b $1
0000E7BF F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E7C4 01                         Map_61da_26: 	dc.b $1
0000E7C5 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E7CA 01                         Map_61da_2C: 	dc.b $1
0000E7CB F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E7D0                            	even
0000E7D0                            	even
0000E7D0                            
0000E7D0                            ; ===========================================================================
0000E7D0                            ; ---------------------------------------------------------------------------
0000E7D0                            ; Object 44 - walls (GHZ)
0000E7D0                            ; ---------------------------------------------------------------------------
0000E7D0                            
0000E7D0                            Obj44:					; XREF: Obj_Index
0000E7D0 7000                       		moveq	#0,d0
0000E7D2 1028 0024                  		move.b	$24(a0),d0
0000E7D6 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E7DA 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E7DE                            ; ===========================================================================
0000E7DE 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E7E0 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E7E2 0000                       		dc.w Obj44_Display-Obj44_Index
0000E7E4                            ; ===========================================================================
0000E7E4                            
0000E7E4                            Obj44_Main:				; XREF: Obj44_Index
0000E7E4 5428 0024                  		addq.b	#2,$24(a0)
0000E7E8 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E7F0 317C 434C 0002             		move.w	#$434C,2(a0)
0000E7F6 0028 0004 0001             		ori.b	#4,1(a0)
0000E7FC 117C 0008 0019             		move.b	#8,$19(a0)
0000E802 117C 0006 0018             		move.b	#6,$18(a0)
0000E808 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E80E 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E814 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E816 5428 0024                  		addq.b	#2,$24(a0)
0000E81A 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E81C                            ; ===========================================================================
0000E81C                            
0000E81C                            Obj44_Solid:				; XREF: Obj44_Index
0000E81C 323C 0013                  		move.w	#$13,d1
0000E820 343C 0028                  		move.w	#$28,d2
0000E824 6100 A70E                  		bsr.w	Obj44_SolidWall
0000E828                            
0000E828                            Obj44_Display:				; XREF: Obj44_Index
0000E828 6100 F3DA                  		bsr.w	DisplaySprite
0000E82C 3028 0008                  		move.w	8(a0),d0
0000E830 0240 FF80                  		andi.w	#$FF80,d0
0000E834 3238 F700                  		move.w	($FFFFF700).w,d1
0000E838 0441 0080                  		subi.w	#$80,d1
0000E83C 0241 FF80                  		andi.w	#$FF80,d1
0000E840 9041                       		sub.w	d1,d0
0000E842 0C40 0280                  		cmpi.w	#$280,d0
0000E846 6200 F3F8                  		bhi.w	DeleteObject
0000E84A 4E75                       		rts	
0000E84C                            ; ===========================================================================
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            ; Sprite mappings - walls (GHZ)
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            Map_obj44:
0000E84C                            	include "_maps\obj44.asm"
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            ; Sprite mappings - walls (GHZ)
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C 0000                       		dc.w byte_E256-Map_obj44
0000E84E 0000                       		dc.w byte_E26B-Map_obj44
0000E850 0000                       		dc.w byte_E280-Map_obj44
0000E852 04                         byte_E256:	dc.b 4
0000E853 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E858 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E85D 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E862 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E867 04                         byte_E26B:	dc.b 4
0000E868 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E86D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E872 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E877 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E87C 04                         byte_E280:	dc.b 4
0000E87D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E882 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E887 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E88C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E892 00                         		even
0000E892 00                         		even
0000E892                            
0000E892                            ; ===========================================================================
0000E892                            ; ---------------------------------------------------------------------------
0000E892                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E892                            ; ---------------------------------------------------------------------------
0000E892                            
0000E892                            Obj13:					; XREF: Obj_Index
0000E892 7000                       		moveq	#0,d0
0000E894 1028 0024                  		move.b	$24(a0),d0
0000E898 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E89C 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E8A0 6000 0000                  		bra.w	Obj14_ChkDel
0000E8A4                            ; ===========================================================================
0000E8A4 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E8A6 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E8A8                            ; ---------------------------------------------------------------------------
0000E8A8                            ;
0000E8A8                            ; Lava ball production rates
0000E8A8                            ;
0000E8A8 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E8AE                            ; ===========================================================================
0000E8AE                            
0000E8AE                            Obj13_Main:				; XREF: Obj13_Index
0000E8AE 5428 0024                  		addq.b	#2,$24(a0)
0000E8B2 1028 0028                  		move.b	$28(a0),d0
0000E8B6 E848                       		lsr.w	#4,d0
0000E8B8 0240 000F                  		andi.w	#$F,d0
0000E8BC 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E8C2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E8C8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E8CE                            
0000E8CE                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E8CE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E8D2 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E8D4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E8DA 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E8DE 6600                       		bne.s	locret_E302
0000E8E0 6100 F7A8                  		bsr.w	SingleObjLoad
0000E8E4 6600                       		bne.s	locret_E302
0000E8E6 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E8EA 3368 0008 0008             		move.w	8(a0),8(a1)
0000E8F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E8F6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E8FC                            
0000E8FC                            locret_E302:
0000E8FC 4E75                       		rts	
0000E8FE                            ; ===========================================================================
0000E8FE                            ; ---------------------------------------------------------------------------
0000E8FE                            ; Object 14 - lava balls (MZ, SLZ)
0000E8FE                            ; ---------------------------------------------------------------------------
0000E8FE                            
0000E8FE                            Obj14:					; XREF: Obj_Index
0000E8FE 7000                       		moveq	#0,d0
0000E900 1028 0024                  		move.b	$24(a0),d0
0000E904 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E908 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E90C 6000 F2F6                  		bra.w	DisplaySprite
0000E910                            ; ===========================================================================
0000E910 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E912 0000                       		dc.w Obj14_Action-Obj14_Index
0000E914 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E916                            
0000E916 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E920 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E928                            ; ===========================================================================
0000E928                            
0000E928                            Obj14_Main:				; XREF: Obj14_Index
0000E928 5428 0024                  		addq.b	#2,$24(a0)
0000E92C 117C 0008 0016             		move.b	#8,$16(a0)
0000E932 117C 0008 0017             		move.b	#8,$17(a0)
0000E938 217C 0000 B8C2 0004        		move.l	#Map_obj14,4(a0)
0000E940 317C 0345 0002             		move.w	#$345,2(a0)
0000E946 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E94C 6600                       		bne.s	loc_E35A
0000E94E 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E954                            
0000E954                            loc_E35A:
0000E954 117C 0004 0001             		move.b	#4,1(a0)
0000E95A 117C 0003 0018             		move.b	#3,$18(a0)
0000E960 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E966 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E96C 4A28 0029                  		tst.b	$29(a0)
0000E970 6700                       		beq.s	Obj14_SetSpeed
0000E972 5428 0018                  		addq.b	#2,$18(a0)
0000E976                            
0000E976                            Obj14_SetSpeed:
0000E976 7000                       		moveq	#0,d0
0000E978 1028 0028                  		move.b	$28(a0),d0
0000E97C D040                       		add.w	d0,d0
0000E97E 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E984 117C 0008 0019             		move.b	#8,$19(a0)
0000E98A 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E990 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E992 117C 0010 0019             		move.b	#$10,$19(a0)
0000E998 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E99E 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E9A4 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E9AA                            
0000E9AA                            Obj14_PlaySnd:
0000E9AA 303C 00AE                  		move.w	#$AE,d0
0000E9AE 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E9B4                            
0000E9B4                            Obj14_Action:				; XREF: Obj14_Index
0000E9B4 7000                       		moveq	#0,d0
0000E9B6 1028 0028                  		move.b	$28(a0),d0
0000E9BA D040                       		add.w	d0,d0
0000E9BC 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E9C0 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E9C4 6100 F218                  		bsr.w	SpeedToPos
0000E9C8 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E9CE 6100 C2FE                  		bsr.w	AnimateSprite
0000E9D2                            
0000E9D2                            Obj14_ChkDel:				; XREF: Obj13
0000E9D2 3028 0008                  		move.w	8(a0),d0
0000E9D6 0240 FF80                  		andi.w	#$FF80,d0
0000E9DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9DE 0441 0080                  		subi.w	#$80,d1
0000E9E2 0241 FF80                  		andi.w	#$FF80,d1
0000E9E6 9041                       		sub.w	d1,d0
0000E9E8 0C40 0280                  		cmpi.w	#$280,d0
0000E9EC 6200 F252                  		bhi.w	DeleteObject
0000E9F0 4E75                       		rts	
0000E9F2                            ; ===========================================================================
0000E9F2 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9F6 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E9FA 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E9FE 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EA02 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EA04                            ; ===========================================================================
0000EA04                            ; lavaball types 00-03 fly up and fall back down
0000EA04                            
0000EA04                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EA04 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EA0A 3028 0030                  		move.w	$30(a0),d0
0000EA0E B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EA12 6400                       		bcc.s	loc_E41E	; if not, branch
0000EA14 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EA18                            
0000EA18                            loc_E41E:
0000EA18 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA1E 4A68 0012                  		tst.w	$12(a0)
0000EA22 6A00                       		bpl.s	locret_E430
0000EA24 08E8 0001 0022             		bset	#1,$22(a0)
0000EA2A                            
0000EA2A                            locret_E430:
0000EA2A 4E75                       		rts	
0000EA2C                            ; ===========================================================================
0000EA2C                            ; lavaball type	04 flies up until it hits the ceiling
0000EA2C                            
0000EA2C                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EA2C 08E8 0001 0022             		bset	#1,$22(a0)
0000EA32 6100 0000                  		bsr.w	ObjHitCeiling
0000EA36 4A41                       		tst.w	d1
0000EA38 6A00                       		bpl.s	locret_E452
0000EA3A 117C 0008 0028             		move.b	#8,$28(a0)
0000EA40 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA46 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EA4C                            
0000EA4C                            locret_E452:
0000EA4C 4E75                       		rts	
0000EA4E                            ; ===========================================================================
0000EA4E                            ; lavaball type	05 falls down until it hits the	floor
0000EA4E                            
0000EA4E                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EA4E 08A8 0001 0022             		bclr	#1,$22(a0)
0000EA54 6100 0000                  		bsr.w	ObjHitFloor
0000EA58 4A41                       		tst.w	d1
0000EA5A 6A00                       		bpl.s	locret_E474
0000EA5C 117C 0008 0028             		move.b	#8,$28(a0)
0000EA62 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA68 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EA6E                            
0000EA6E                            locret_E474:
0000EA6E 4E75                       		rts	
0000EA70                            ; ===========================================================================
0000EA70                            ; lavaball types 06-07 move sideways
0000EA70                            
0000EA70                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EA70 08E8 0000 0022             		bset	#0,$22(a0)
0000EA76 76F8                       		moveq	#-8,d3
0000EA78 6100 0000                  		bsr.w	ObjHitWallLeft
0000EA7C 4A41                       		tst.w	d1
0000EA7E 6A00                       		bpl.s	locret_E498
0000EA80 117C 0008 0028             		move.b	#8,$28(a0)
0000EA86 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA8C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA92                            
0000EA92                            locret_E498:
0000EA92 4E75                       		rts	
0000EA94                            ; ===========================================================================
0000EA94                            
0000EA94                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA94 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA9A 7608                       		moveq	#8,d3
0000EA9C 6100 0000                  		bsr.w	ObjHitWallRight
0000EAA0 4A41                       		tst.w	d1
0000EAA2 6A00                       		bpl.s	locret_E4BC
0000EAA4 117C 0008 0028             		move.b	#8,$28(a0)
0000EAAA 117C 0003 001C             		move.b	#3,$1C(a0)
0000EAB0 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EAB6                            
0000EAB6                            locret_E4BC:
0000EAB6 4E75                       		rts	
0000EAB8                            ; ===========================================================================
0000EAB8                            
0000EAB8                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EAB8 4E75                       		rts	
0000EABA                            ; ===========================================================================
0000EABA                            
0000EABA                            Obj14_Delete:				; XREF: Obj14_Index
0000EABA 6000 F184                  		bra.w	DeleteObject
0000EABE                            ; ===========================================================================
0000EABE                            Ani_obj14:
0000EABE                            	include "_anim\obj14.asm"
0000EABE                            ; ---------------------------------------------------------------------------
0000EABE                            ; Animation script - lava balls
0000EABE                            ; ---------------------------------------------------------------------------
0000EABE 0000                       		dc.w byte_E4CC-Ani_obj14
0000EAC0 0000                       		dc.w byte_E4D2-Ani_obj14
0000EAC2 0000                       		dc.w byte_E4D6-Ani_obj14
0000EAC4 0000                       		dc.w byte_E4DC-Ani_obj14
0000EAC6 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EACC 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EAD0 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EAD6 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EADA                            		even
0000EADA                            		even
0000EADA                            
0000EADA                            ; ===========================================================================
0000EADA                            ; ---------------------------------------------------------------------------
0000EADA                            ; Object 6D - flame thrower (SBZ)
0000EADA                            ; ---------------------------------------------------------------------------
0000EADA                            
0000EADA                            Obj6D:					; XREF: Obj_Index
0000EADA 7000                       		moveq	#0,d0
0000EADC 1028 0024                  		move.b	$24(a0),d0
0000EAE0 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EAE4 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EAE8                            ; ===========================================================================
0000EAE8 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EAEA 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EAEC                            ; ===========================================================================
0000EAEC                            
0000EAEC                            Obj6D_Main:				; XREF: Obj6D_Index
0000EAEC 5428 0024                  		addq.b	#2,$24(a0)
0000EAF0 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EAF8 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EAFE 0028 0004 0001             		ori.b	#4,1(a0)
0000EB04 117C 0001 0018             		move.b	#1,$18(a0)
0000EB0A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB10 117C 000C 0019             		move.b	#$C,$19(a0)
0000EB16 1028 0028                  		move.b	$28(a0),d0
0000EB1A 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EB1E D040                       		add.w	d0,d0		; multiply by 2
0000EB20 3140 0030                  		move.w	d0,$30(a0)
0000EB24 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EB28 1028 0028                  		move.b	$28(a0),d0
0000EB2C 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EB30 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EB32 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EB36 117C 000A 0036             		move.b	#$A,$36(a0)
0000EB3C 0828 0001 0022             		btst	#1,$22(a0)
0000EB42 6700                       		beq.s	Obj6D_Action
0000EB44 117C 0002 001C             		move.b	#2,$1C(a0)
0000EB4A 117C 0015 0036             		move.b	#$15,$36(a0)
0000EB50                            
0000EB50                            Obj6D_Action:				; XREF: Obj6D_Index
0000EB50 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EB54 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EB56 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EB5C 0868 0000 001C             		bchg	#0,$1C(a0)
0000EB62 6700                       		beq.s	loc_E57A
0000EB64 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EB6A 303C 00B3                  		move.w	#$B3,d0
0000EB6E 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play flame sound
0000EB74                            
0000EB74                            loc_E57A:
0000EB74 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EB7A 6100 C152                  		bsr.w	AnimateSprite
0000EB7E 117C 0000 0020             		move.b	#0,$20(a0)
0000EB84 1028 0036                  		move.b	$36(a0),d0
0000EB88 B028 001A                  		cmp.b	$1A(a0),d0
0000EB8C 6600                       		bne.s	Obj6D_ChkDel
0000EB8E 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB94                            
0000EB94                            Obj6D_ChkDel:
0000EB94 3028 0008                  		move.w	8(a0),d0
0000EB98 0240 FF80                  		andi.w	#$FF80,d0
0000EB9C 3238 F700                  		move.w	($FFFFF700).w,d1
0000EBA0 0441 0080                  		subi.w	#$80,d1
0000EBA4 0241 FF80                  		andi.w	#$FF80,d1
0000EBA8 9041                       		sub.w	d1,d0
0000EBAA 0C40 0280                  		cmpi.w	#$280,d0
0000EBAE 6200 F090                  		bhi.w	DeleteObject
0000EBB2 6000 F050                  		bra.w	DisplaySprite
0000EBB6                            ; ===========================================================================
0000EBB6                            Ani_obj6D:
0000EBB6                            	include "_anim\obj6D.asm"
0000EBB6                            ; ---------------------------------------------------------------------------
0000EBB6                            ; Animation script - flamethrower (SBZ)
0000EBB6                            ; ---------------------------------------------------------------------------
0000EBB6 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EBB8 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EBBA 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EBBC 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EBBE 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EBCC 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EBD6 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EBE4 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EBEE                            		even
0000EBEE                            		even
0000EBEE                            
0000EBEE                            ; ---------------------------------------------------------------------------
0000EBEE                            ; Sprite mappings - flame thrower (SBZ)
0000EBEE                            ; ---------------------------------------------------------------------------
0000EBEE                            Map_obj6D:
0000EBEE                            	include "_maps\obj6D.asm"
0000EBEE                            ; ---------------------------------------------------------------------------
0000EBEE                            ; Sprite mappings - flame thrower (SBZ)
0000EBEE                            ; ---------------------------------------------------------------------------
0000EBEE 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EBF2 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EBF6 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EBFA 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EBFE 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EC02 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EC06 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EC0A 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EC0E 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EC12 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EC16 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EC1A 01                         byte_E620:	dc.b 1
0000EC1B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC20 02                         byte_E626:	dc.b 2
0000EC21 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC26 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC2B 02                         byte_E631:	dc.b 2
0000EC2C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC31 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC36 03                         byte_E63C:	dc.b 3
0000EC37 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC3C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC41 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC46 03                         byte_E64C:	dc.b 3
0000EC47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC4C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC51 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC56 04                         byte_E65C:	dc.b 4
0000EC57 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC5C 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC61 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC66 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC6B 04                         byte_E671:	dc.b 4
0000EC6C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC71 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC76 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC7B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC80 05                         byte_E686:	dc.b 5
0000EC81 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC86 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC8B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC90 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC95 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC9A 05                         byte_E6A0:	dc.b 5
0000EC9B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECA0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECA5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECAA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECAF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECB4 06                         byte_E6BA:	dc.b 6
0000ECB5 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ECBA F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ECBF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECC4 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ECC9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECCE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECD3 06                         byte_E6D9:	dc.b 6
0000ECD4 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ECD9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ECDE 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ECE3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECE8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECF2 01                         byte_E6F8:	dc.b 1
0000ECF3 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF8 02                         byte_E6FE:	dc.b 2
0000ECF9 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECFE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED03 02                         byte_E709:	dc.b 2
0000ED04 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED09 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED0E 03                         byte_E714:	dc.b 3
0000ED0F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED14 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED19 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED1E 03                         byte_E724:	dc.b 3
0000ED1F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED24 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED29 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED2E 04                         byte_E734:	dc.b 4
0000ED2F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED34 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED39 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED3E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED43 04                         byte_E749:	dc.b 4
0000ED44 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED49 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED4E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED53 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED58 05                         byte_E75E:	dc.b 5
0000ED59 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED5E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED63 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED68 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED6D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED72 05                         byte_E778:	dc.b 5
0000ED73 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED78 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED7D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED82 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED87 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED8C 06                         byte_E792:	dc.b 6
0000ED8D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED92 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED97 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED9C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EDA1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDA6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDAB 06                         byte_E7B1:	dc.b 6
0000EDAC E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EDB1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EDB6 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EDBB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDC0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDC5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDCA                            		even
0000EDCA                            		even
0000EDCA                            
0000EDCA                            ; ===========================================================================
0000EDCA                            ; ---------------------------------------------------------------------------
0000EDCA                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EDCA                            ; ---------------------------------------------------------------------------
0000EDCA                            
0000EDCA                            Obj46:					; XREF: Obj_Index
0000EDCA 7000                       		moveq	#0,d0
0000EDCC 1028 0024                  		move.b	$24(a0),d0
0000EDD0 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EDD4 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EDD8                            ; ===========================================================================
0000EDD8 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EDDA 0000                       		dc.w Obj46_Action-Obj46_Index
0000EDDC                            ; ===========================================================================
0000EDDC                            
0000EDDC                            Obj46_Main:				; XREF: Obj46_Index
0000EDDC 5428 0024                  		addq.b	#2,$24(a0)
0000EDE0 117C 000F 0016             		move.b	#$F,$16(a0)
0000EDE6 117C 000F 0017             		move.b	#$F,$17(a0)
0000EDEC 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EDF4 317C 4000 0002             		move.w	#$4000,2(a0)
0000EDFA 117C 0004 0001             		move.b	#4,1(a0)
0000EE00 117C 0003 0018             		move.b	#3,$18(a0)
0000EE06 117C 0010 0019             		move.b	#$10,$19(a0)
0000EE0C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE12 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EE18                            
0000EE18                            Obj46_Action:				; XREF: Obj46_Index
0000EE18 4A28 0001                  		tst.b	1(a0)
0000EE1C 6A00                       		bpl.s	Obj46_ChkDel
0000EE1E 7000                       		moveq	#0,d0
0000EE20 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EE24 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EE28 D040                       		add.w	d0,d0
0000EE2A 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EE2E 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EE32 323C 001B                  		move.w	#$1B,d1
0000EE36 343C 0010                  		move.w	#$10,d2
0000EE3A 363C 0011                  		move.w	#$11,d3
0000EE3E 3828 0008                  		move.w	8(a0),d4
0000EE42 6100 0000                  		bsr.w	SolidObject
0000EE46                            
0000EE46                            Obj46_ChkDel:
0000EE46 6100 EDBC                  		bsr.w	DisplaySprite
0000EE4A 3028 0008                  		move.w	8(a0),d0
0000EE4E 0240 FF80                  		andi.w	#$FF80,d0
0000EE52 3238 F700                  		move.w	($FFFFF700).w,d1
0000EE56 0441 0080                  		subi.w	#$80,d1
0000EE5A 0241 FF80                  		andi.w	#$FF80,d1
0000EE5E 9041                       		sub.w	d1,d0
0000EE60 0C40 0280                  		cmpi.w	#$280,d0
0000EE64 6200 EDDA                  		bhi.w	DeleteObject
0000EE68 4E75                       		rts	
0000EE6A                            ; ===========================================================================
0000EE6A 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EE6C 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EE6E 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EE70 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EE72 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EE74                            ; ===========================================================================
0000EE74                            
0000EE74                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EE74 4E75                       		rts	
0000EE76                            ; ===========================================================================
0000EE76                            
0000EE76                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EE76 3038 D008                  		move.w	($FFFFD008).w,d0
0000EE7A 9068 0008                  		sub.w	8(a0),d0
0000EE7E 6400                       		bcc.s	loc_E888
0000EE80 4440                       		neg.w	d0
0000EE82                            
0000EE82                            loc_E888:
0000EE82 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EE86 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EE88 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE8E                            
0000EE8E                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE8E 7000                       		moveq	#0,d0
0000EE90 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE94 0828 0003 0028             		btst	#3,$28(a0)
0000EE9A 6700                       		beq.s	loc_E8A8
0000EE9C 4440                       		neg.w	d0
0000EE9E 0640 0010                  		addi.w	#$10,d0
0000EEA2                            
0000EEA2                            loc_E8A8:
0000EEA2 3228 0030                  		move.w	$30(a0),d1
0000EEA6 9240                       		sub.w	d0,d1
0000EEA8 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EEAC 4E75                       		rts	
0000EEAE                            ; ===========================================================================
0000EEAE                            
0000EEAE                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EEAE 6100 ED2E                  		bsr.w	SpeedToPos
0000EEB2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EEB8 6100 0000                  		bsr.w	ObjHitFloor
0000EEBC 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EEBE 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EEC2 D368 000C                  		add.w	d1,$C(a0)
0000EEC6 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EECA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EED0 117C 0004 0028             		move.b	#4,$28(a0)
0000EED6 3011                       		move.w	(a1),d0
0000EED8 0240 03FF                  		andi.w	#$3FF,d0
0000EEDC 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EEE0 6400                       		bcc.s	locret_E8EE
0000EEE2 117C 0000 0028             		move.b	#0,$28(a0)
0000EEE8                            
0000EEE8                            locret_E8EE:
0000EEE8 4E75                       		rts	
0000EEEA                            ; ===========================================================================
0000EEEA                            
0000EEEA                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EEEA 7000                       		moveq	#0,d0
0000EEEC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EEF0 E648                       		lsr.w	#3,d0
0000EEF2 3228 0030                  		move.w	$30(a0),d1
0000EEF6 9240                       		sub.w	d0,d1
0000EEF8 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EEFC 4E75                       		rts	
0000EEFE                            ; ===========================================================================
0000EEFE                            ; ---------------------------------------------------------------------------
0000EEFE                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEFE                            ; ---------------------------------------------------------------------------
0000EEFE                            Map_obj46:
0000EEFE                            	include "_maps\obj46.asm"
0000EEFE                            ; ---------------------------------------------------------------------------
0000EEFE                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEFE                            ; ---------------------------------------------------------------------------
0000EEFE 0000                       		dc.w byte_E906-Map_obj46
0000EF00 01                         byte_E906:	dc.b 1
0000EF01 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EF06                            		even
0000EF06                            		even
0000EF06                            
0000EF06                            ; ===========================================================================
0000EF06                            ; ---------------------------------------------------------------------------
0000EF06                            ; Object 12 - lamp (SYZ)
0000EF06                            ; ---------------------------------------------------------------------------
0000EF06                            
0000EF06                            Obj12:					; XREF: Obj_Index
0000EF06 7000                       		moveq	#0,d0
0000EF08 1028 0024                  		move.b	$24(a0),d0
0000EF0C 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EF10 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EF14                            ; ===========================================================================
0000EF14 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EF16 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EF18                            ; ===========================================================================
0000EF18                            
0000EF18                            Obj12_Main:				; XREF: Obj12_Index
0000EF18 5428 0024                  		addq.b	#2,$24(a0)
0000EF1C 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EF24 317C 0000 0002             		move.w	#0,2(a0)
0000EF2A 117C 0004 0001             		move.b	#4,1(a0)
0000EF30 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF36 117C 0006 0018             		move.b	#6,$18(a0)
0000EF3C                            
0000EF3C                            Obj12_Animate:				; XREF: Obj12_Index
0000EF3C 5328 001E                  		subq.b	#1,$1E(a0)
0000EF40 6A00                       		bpl.s	Obj12_ChkDel
0000EF42 117C 0007 001E             		move.b	#7,$1E(a0)
0000EF48 5228 001A                  		addq.b	#1,$1A(a0)
0000EF4C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EF52 6500                       		bcs.s	Obj12_ChkDel
0000EF54 117C 0000 001A             		move.b	#0,$1A(a0)
0000EF5A                            
0000EF5A                            Obj12_ChkDel:
0000EF5A 3028 0008                  		move.w	8(a0),d0
0000EF5E 0240 FF80                  		andi.w	#$FF80,d0
0000EF62 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF66 0441 0080                  		subi.w	#$80,d1
0000EF6A 0241 FF80                  		andi.w	#$FF80,d1
0000EF6E 9041                       		sub.w	d1,d0
0000EF70 0C40 0280                  		cmpi.w	#$280,d0
0000EF74 6200 ECCA                  		bhi.w	DeleteObject
0000EF78 6000 EC8A                  		bra.w	DisplaySprite
0000EF7C                            ; ===========================================================================
0000EF7C                            ; ---------------------------------------------------------------------------
0000EF7C                            ; Sprite mappings - lamp (SYZ)
0000EF7C                            ; ---------------------------------------------------------------------------
0000EF7C                            Map_obj12:
0000EF7C                            	include "_maps\obj12.asm"
0000EF7C                            ; ---------------------------------------------------------------------------
0000EF7C                            ; Sprite mappings - lamp (SYZ)
0000EF7C                            ; ---------------------------------------------------------------------------
0000EF7C 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EF80 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EF84 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EF88 02                         byte_E98E:	dc.b 2
0000EF89 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF8E 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF93 02                         byte_E999:	dc.b 2
0000EF94 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF99 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF9E 02                         byte_E9A4:	dc.b 2
0000EF9F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EFA4 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EFA9 02                         byte_E9AF:	dc.b 2
0000EFAA F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EFAF 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EFB4 02                         byte_E9BA:	dc.b 2
0000EFB5 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EFBA 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EFBF 02                         byte_E9C5:	dc.b 2
0000EFC0 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EFC5 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EFCA                            		even
0000EFCA                            		even
0000EFCA                            
0000EFCA                            ; ===========================================================================
0000EFCA                            ; ---------------------------------------------------------------------------
0000EFCA                            ; Object 47 - pinball bumper (SYZ)
0000EFCA                            ; ---------------------------------------------------------------------------
0000EFCA                            
0000EFCA                            Obj47:					; XREF: Obj_Index
0000EFCA 7000                       		moveq	#0,d0
0000EFCC 1028 0024                  		move.b	$24(a0),d0
0000EFD0 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EFD4 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EFD8                            ; ===========================================================================
0000EFD8 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EFDA 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EFDC                            ; ===========================================================================
0000EFDC                            
0000EFDC                            Obj47_Main:				; XREF: Obj47_Index
0000EFDC 5428 0024                  		addq.b	#2,$24(a0)
0000EFE0 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EFE8 317C 0380 0002             		move.w	#$380,2(a0)
0000EFEE 117C 0004 0001             		move.b	#4,1(a0)
0000EFF4 117C 0010 0019             		move.b	#$10,$19(a0)
0000EFFA 117C 0001 0018             		move.b	#1,$18(a0)
0000F000 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F006                            
0000F006                            Obj47_Hit:				; XREF: Obj47_Index
0000F006 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F00A 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F00E 4228 0021                  		clr.b	$21(a0)
0000F012 43F8 D000                  		lea	($FFFFD000).w,a1
0000F016 3228 0008                  		move.w	8(a0),d1
0000F01A 3428 000C                  		move.w	$C(a0),d2
0000F01E 9269 0008                  		sub.w	8(a1),d1
0000F022 9469 000C                  		sub.w	$C(a1),d2
0000F026 4EB9 0000 2F38             		jsr	(CalcAngle).l
0000F02C 4EB9 0000 2C6A             		jsr	(CalcSine).l
0000F032 C3FC F900                  		muls.w	#-$700,d1
0000F036 E081                       		asr.l	#8,d1
0000F038 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F03C C1FC F900                  		muls.w	#-$700,d0
0000F040 E080                       		asr.l	#8,d0
0000F042 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F046 08E9 0001 0022             		bset	#1,$22(a1)
0000F04C 08A9 0004 0022             		bclr	#4,$22(a1)
0000F052 08A9 0005 0022             		bclr	#5,$22(a1)
0000F058 4229 003C                  		clr.b	$3C(a1)
0000F05C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F062 303C 00B4                  		move.w	#$B4,d0
0000F066 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F06C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F070 7000                       		moveq	#0,d0
0000F072 1028 0023                  		move.b	$23(a0),d0
0000F076 6700                       		beq.s	Obj47_Score
0000F078 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F07E 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F080 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F084                            
0000F084                            Obj47_Score:
0000F084 7001                       		moveq	#1,d0
0000F086 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F08C 6100 EFFC                  		bsr.w	SingleObjLoad
0000F090 6600                       		bne.s	Obj47_Display
0000F092 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F096 3368 0008 0008             		move.w	8(a0),8(a1)
0000F09C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F0A2 137C 0004 001A             		move.b	#4,$1A(a1)
0000F0A8                            
0000F0A8                            Obj47_Display:
0000F0A8 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F0AE 6100 BC1E                  		bsr.w	AnimateSprite
0000F0B2 3028 0008                  		move.w	8(a0),d0
0000F0B6 0240 FF80                  		andi.w	#$FF80,d0
0000F0BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0BE 0441 0080                  		subi.w	#$80,d1
0000F0C2 0241 FF80                  		andi.w	#$FF80,d1
0000F0C6 9041                       		sub.w	d1,d0
0000F0C8 0C40 0280                  		cmpi.w	#$280,d0
0000F0CC 6200                       		bhi.s	Obj47_ChkHit
0000F0CE 6000 EB34                  		bra.w	DisplaySprite
0000F0D2                            ; ===========================================================================
0000F0D2                            
0000F0D2                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F0D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F0D6 7000                       		moveq	#0,d0
0000F0D8 1028 0023                  		move.b	$23(a0),d0
0000F0DC 6700                       		beq.s	Obj47_Delete
0000F0DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F0E4                            
0000F0E4                            Obj47_Delete:
0000F0E4 6000 EB5A                  		bra.w	DeleteObject
0000F0E8                            ; ===========================================================================
0000F0E8                            Ani_obj47:
0000F0E8                            	include "_anim\obj47.asm"
0000F0E8                            ; ---------------------------------------------------------------------------
0000F0E8                            ; Animation script - flamethrower (SBZ)
0000F0E8                            ; ---------------------------------------------------------------------------
0000F0E8 0000                       		dc.w byte_EAF4-Ani_obj47
0000F0EA 0000                       		dc.w byte_EAF8-Ani_obj47
0000F0EC 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F0F0 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F0F8                            		even
0000F0F8                            		even
0000F0F8                            
0000F0F8                            ; ---------------------------------------------------------------------------
0000F0F8                            ; Sprite mappings - pinball bumper (SYZ)
0000F0F8                            ; ---------------------------------------------------------------------------
0000F0F8                            Map_obj47:
0000F0F8                            	include "_maps\obj47.asm"
0000F0F8                            ; ---------------------------------------------------------------------------
0000F0F8                            ; Sprite mappings - pinball bumper (SYZ)
0000F0F8                            ; ---------------------------------------------------------------------------
0000F0F8 0000                       		dc.w byte_EB06-Map_obj47
0000F0FA 0000                       		dc.w byte_EB11-Map_obj47
0000F0FC 0000                       		dc.w byte_EB1C-Map_obj47
0000F0FE 02                         byte_EB06:	dc.b 2
0000F0FF F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F104 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F109 02                         byte_EB11:	dc.b 2
0000F10A F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F10F F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F114 02                         byte_EB1C:	dc.b 2
0000F115 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F11A F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F120 00                         		even
0000F120 00                         		even
0000F120                            
0000F120                            ; ===========================================================================
0000F120                            ; ---------------------------------------------------------------------------
0000F120                            ; Object 0D - signpost at the end of a level
0000F120                            ; ---------------------------------------------------------------------------
0000F120                            
0000F120                            Obj0D:					; XREF: Obj_Index
0000F120 7000                       		moveq	#0,d0
0000F122 1028 0024                  		move.b	$24(a0),d0
0000F126 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F12A 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F12E 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F134 6100 BB98                  		bsr.w	AnimateSprite
0000F138 6100 EACA                  		bsr.w	DisplaySprite
0000F13C 3028 0008                  		move.w	8(a0),d0
0000F140 0240 FF80                  		andi.w	#$FF80,d0
0000F144 3238 F700                  		move.w	($FFFFF700).w,d1
0000F148 0441 0080                  		subi.w	#$80,d1
0000F14C 0241 FF80                  		andi.w	#$FF80,d1
0000F150 9041                       		sub.w	d1,d0
0000F152 0C40 0280                  		cmpi.w	#$280,d0
0000F156 6200 EAE8                  		bhi.w	DeleteObject
0000F15A 4E75                       		rts	
0000F15C                            ; ===========================================================================
0000F15C 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F15E 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F160 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F162 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F164 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F166                            ; ===========================================================================
0000F166                            
0000F166                            Obj0D_Main:				; XREF: Obj0D_Index
0000F166 5428 0024                  		addq.b	#2,$24(a0)
0000F16A 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F172 317C 0680 0002             		move.w	#$680,2(a0)
0000F178 117C 0004 0001             		move.b	#4,1(a0)
0000F17E 117C 0018 0019             		move.b	#$18,$19(a0)
0000F184 117C 0004 0018             		move.b	#4,$18(a0)
0000F18A                            
0000F18A                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F18A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F18E 9068 0008                  		sub.w	8(a0),d0
0000F192 6500                       		bcs.s	locret_EBBA
0000F194 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F198 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F19A 303C 00CF                  		move.w	#$CF,d0
0000F19E 4EB9 0000 15C0             		jsr	(PlaySound).l	; play signpost	sound
0000F1A4 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F1A8 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F1AE 5428 0024                  		addq.b	#2,$24(a0)
0000F1B2                            
0000F1B2                            locret_EBBA:
0000F1B2 4E75                       		rts	
0000F1B4                            ; ===========================================================================
0000F1B4                            
0000F1B4                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F1B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F1B8 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F1BA 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F1C0 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F1C4 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F1CA 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F1CC 5428 0024                  		addq.b	#2,$24(a0)
0000F1D0                            
0000F1D0                            Obj0D_Sparkle:
0000F1D0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F1D4 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F1D6 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F1DC 7000                       		moveq	#0,d0
0000F1DE 1028 0034                  		move.b	$34(a0),d0
0000F1E2 5428 0034                  		addq.b	#2,$34(a0)
0000F1E6 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F1EC 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F1F0 6100 EE98                  		bsr.w	SingleObjLoad
0000F1F4 6600                       		bne.s	locret_EC42
0000F1F6 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F1FA 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F200 101A                       		move.b	(a2)+,d0
0000F202 4880                       		ext.w	d0
0000F204 D068 0008                  		add.w	8(a0),d0
0000F208 3340 0008                  		move.w	d0,8(a1)
0000F20C 101A                       		move.b	(a2)+,d0
0000F20E 4880                       		ext.w	d0
0000F210 D068 000C                  		add.w	$C(a0),d0
0000F214 3340 000C                  		move.w	d0,$C(a1)
0000F218 237C 0000 A46C 0004        		move.l	#Map_obj25,4(a1)
0000F220 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F226 137C 0004 0001             		move.b	#4,1(a1)
0000F22C 137C 0002 0018             		move.b	#2,$18(a1)
0000F232 137C 0008 0019             		move.b	#8,$19(a1)
0000F238                            
0000F238                            locret_EC42:
0000F238 4E75                       		rts	
0000F23A                            ; ===========================================================================
0000F23A E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F23C 0808                       		dc.b	8,   8
0000F23E F000                       		dc.b -$10,   0
0000F240 18F8                       		dc.b  $18,  -8
0000F242 00F8                       		dc.b	0,  -8
0000F244 1000                       		dc.b  $10,   0
0000F246 E808                       		dc.b -$18,   8
0000F248 1810                       		dc.b  $18, $10
0000F24A                            ; ===========================================================================
0000F24A                            
0000F24A                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F24A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F24E 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F252 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F258 6600                       		bne.s	loc_EC70
0000F25A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F260 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F266 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F268 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F26E 6000                       		bra.s	loc_EC70
0000F270                            
0000F270                            Obj0D_MoveLeft:
0000F270 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F276                            
0000F276                            loc_EC70:
0000F276 4A38 D000                  		tst.b	($FFFFD000).w
0000F27A 6700                       		beq.s	loc_EC86
0000F27C 3038 D008                  		move.w	($FFFFD008).w,d0
0000F280 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F284 0641 0128                  		addi.w	#$128,d1
0000F288 B041                       		cmp.w	d1,d0
0000F28A 6500                       		bcs.s	locret_ECEE
0000F28C                            
0000F28C                            loc_EC86:
0000F28C 5428 0024                  		addq.b	#2,$24(a0)
0000F290                            
0000F290                            ; ---------------------------------------------------------------------------
0000F290                            ; Subroutine to	set up bonuses at the end of an	act
0000F290                            ; ---------------------------------------------------------------------------
0000F290                            
0000F290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F290                            
0000F290                            
0000F290                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F290 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F294 6600                       		bne.s	locret_ECEE
0000F296 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F29C 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F2A0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F2A4 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F2AA 7010                       		moveq	#$10,d0
0000F2AC 4EB9 0000 17DC             		jsr	(LoadPLC2).l	; load title card patterns
0000F2B2 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F2B8 7000                       		moveq	#0,d0
0000F2BA 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F2BE C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F2C2 7200                       		moveq	#0,d1
0000F2C4 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F2C8 D041                       		add.w	d1,d0		; add up your time
0000F2CA 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F2CE 7214                       		moveq	#$14,d1
0000F2D0 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F2D2 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F2D4 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F2D6                            
0000F2D6                            loc_ECD0:
0000F2D6 D040                       		add.w	d0,d0
0000F2D8 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F2DE 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F2E2 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F2E6 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F2EA 303C 008E                  		move.w	#$8E,d0
0000F2EE 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F2F4                            
0000F2F4                            locret_ECEE:
0000F2F4 4E75                       		rts	
0000F2F6                            ; End of function GotThroughAct
0000F2F6                            
0000F2F6                            ; ===========================================================================
0000F2F6 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F30A 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F320                            ; ===========================================================================
0000F320                            
0000F320                            locret_ED1A:				; XREF: Obj0D_Index
0000F320 4E75                       		rts	
0000F322                            ; ===========================================================================
0000F322                            Ani_obj0D:
0000F322                            	include "_anim\obj0D.asm"
0000F322                            ; ---------------------------------------------------------------------------
0000F322                            ; Animation script - signpost
0000F322                            ; ---------------------------------------------------------------------------
0000F322 0000                       		dc.w byte_ED24-Ani_obj0D
0000F324 0000                       		dc.w byte_ED28-Ani_obj0D
0000F326 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F328 0000                       		dc.w byte_ED34-Ani_obj0D
0000F32A 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F32E 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F334 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F33A 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F33E 00                         		even
0000F33E 00                         		even
0000F33E                            
0000F33E                            ; ---------------------------------------------------------------------------
0000F33E                            ; Sprite mappings - signpost
0000F33E                            ; ---------------------------------------------------------------------------
0000F33E                            Map_obj0D:
0000F33E                            	include "_maps\obj0D.asm"
0000F33E                            ; ---------------------------------------------------------------------------
0000F33E                            ; Sprite mappings - signpost
0000F33E                            ; ---------------------------------------------------------------------------
0000F33E 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F342 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F346 0000                       		dc.w byte_ED73-Map_obj0D
0000F348 03                         byte_ED42:	dc.b 3
0000F349 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F34E F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F353 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F358 02                         byte_ED52:	dc.b 2
0000F359 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F35E 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F363 02                         byte_ED5D:	dc.b 2
0000F364 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F369 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F36E 02                         byte_ED68:	dc.b 2
0000F36F F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F374 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F379 03                         byte_ED73:	dc.b 3
0000F37A F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F37F F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F384 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F38A 00                         		even
0000F38A 00                         		even
0000F38A                            
0000F38A                            ; ===========================================================================
0000F38A                            ; ---------------------------------------------------------------------------
0000F38A                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F38A                            ; ---------------------------------------------------------------------------
0000F38A                            
0000F38A                            Obj4C:					; XREF: Obj_Index
0000F38A 7000                       		moveq	#0,d0
0000F38C 1028 0024                  		move.b	$24(a0),d0
0000F390 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F394 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F398 6000 0000                  		bra.w	Obj4D_ChkDel
0000F39C                            ; ===========================================================================
0000F39C 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F39E 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F3A0 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F3A2 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F3A4 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F3A6 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F3A8                            ; ===========================================================================
0000F3A8                            
0000F3A8                            Obj4C_Main:				; XREF: Obj4C_Index
0000F3A8 5428 0024                  		addq.b	#2,$24(a0)
0000F3AC 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F3B4 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F3BA 117C 0004 0001             		move.b	#4,1(a0)
0000F3C0 117C 0001 0018             		move.b	#1,$18(a0)
0000F3C6 117C 0038 0019             		move.b	#$38,$19(a0)
0000F3CC 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F3D2                            
0000F3D2                            loc_EDCC:				; XREF: Obj4C_Index
0000F3D2 5368 0032                  		subq.w	#1,$32(a0)
0000F3D6 6A00                       		bpl.s	locret_EDF0
0000F3D8 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F3DE 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F3E2 3228 000C                  		move.w	$C(a0),d1
0000F3E6 B041                       		cmp.w	d1,d0
0000F3E8 6400                       		bcc.s	locret_EDF0
0000F3EA 0441 0170                  		subi.w	#$170,d1
0000F3EE B041                       		cmp.w	d1,d0
0000F3F0 6500                       		bcs.s	locret_EDF0
0000F3F2 5428 0024                  		addq.b	#2,$24(a0)
0000F3F6                            
0000F3F6                            locret_EDF0:
0000F3F6 4E75                       		rts	
0000F3F8                            ; ===========================================================================
0000F3F8                            
0000F3F8                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F3F8 5428 0024                  		addq.b	#2,$24(a0)
0000F3FC 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F400 6600                       		bne.s	loc_EE18
0000F402 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F406 3368 0008 0008             		move.w	8(a0),8(a1)
0000F40C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F412 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F418 2348 003C                  		move.l	a0,$3C(a1)
0000F41C                            
0000F41C                            loc_EE18:
0000F41C 117C 0001 001C             		move.b	#1,$1C(a0)
0000F422 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F426 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F428 117C 0004 001C             		move.b	#4,$1C(a0)
0000F42E 6000                       		bra.s	Obj4C_Display
0000F430                            ; ===========================================================================
0000F430                            
0000F430                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F430 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F434 08E9 0001 0022             		bset	#1,$22(a1)
0000F43A 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F440 6000                       		bra.s	Obj4C_Display
0000F442                            ; ===========================================================================
0000F442                            
0000F442                            loc_EE3E:				; XREF: Obj4C_Index
0000F442 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F446 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F448 5428 0024                  		addq.b	#2,$24(a0)
0000F44C 4E75                       		rts	
0000F44E                            ; ===========================================================================
0000F44E                            
0000F44E                            Obj4C_Display:				; XREF: Obj4C_Index
0000F44E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F454 6100 B878                  		bsr.w	AnimateSprite
0000F458 6100 E7AA                  		bsr.w	DisplaySprite
0000F45C 4E75                       		rts	
0000F45E                            ; ===========================================================================
0000F45E                            
0000F45E                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F45E 117C 0000 001C             		move.b	#0,$1C(a0)
0000F464 117C 0002 0024             		move.b	#2,$24(a0)
0000F46A 4A28 0028                  		tst.b	$28(a0)
0000F46E 6700 E7D0                  		beq.w	DeleteObject
0000F472 4E75                       		rts	
0000F474                            ; ===========================================================================
0000F474                            ; ---------------------------------------------------------------------------
0000F474                            ; Object 4D - lava geyser / lavafall (MZ)
0000F474                            ; ---------------------------------------------------------------------------
0000F474                            
0000F474                            Obj4D:					; XREF: Obj_Index
0000F474 7000                       		moveq	#0,d0
0000F476 1028 0024                  		move.b	$24(a0),d0
0000F47A 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F47E 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F482 6000 E780                  		bra.w	DisplaySprite
0000F486                            ; ===========================================================================
0000F486 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F488 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F48A 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F48C 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F48E                            
0000F48E FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F492                            ; ===========================================================================
0000F492                            
0000F492                            Obj4D_Main:				; XREF: Obj4D_Index
0000F492 5428 0024                  		addq.b	#2,$24(a0)
0000F496 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F49C 4A28 0028                  		tst.b	$28(a0)
0000F4A0 6700                       		beq.s	loc_EEA4
0000F4A2 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F4A8                            
0000F4A8                            loc_EEA4:
0000F4A8 7000                       		moveq	#0,d0
0000F4AA 1028 0028                  		move.b	$28(a0),d0
0000F4AE D040                       		add.w	d0,d0
0000F4B0 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F4B6 2248                       		movea.l	a0,a1
0000F4B8 7201                       		moveq	#1,d1
0000F4BA 6100                       		bsr.s	Obj4D_MakeLava
0000F4BC 6000                       		bra.s	loc_EF10
0000F4BE                            ; ===========================================================================
0000F4BE                            
0000F4BE                            Obj4D_Loop:
0000F4BE 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F4C2 6600                       		bne.s	loc_EF0A
0000F4C4                            
0000F4C4                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F4C4 12BC 004D                  		move.b	#$4D,0(a1)
0000F4C8 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F4D0 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F4D6 137C 0004 0001             		move.b	#4,1(a1)
0000F4DC 137C 0020 0019             		move.b	#$20,$19(a1)
0000F4E2 3368 0008 0008             		move.w	8(a0),8(a1)
0000F4E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F4EE 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F4F4 137C 0001 0018             		move.b	#1,$18(a1)
0000F4FA 137C 0005 001C             		move.b	#5,$1C(a1)
0000F500 4A28 0028                  		tst.b	$28(a0)
0000F504 6700                       		beq.s	loc_EF0A
0000F506 137C 0002 001C             		move.b	#2,$1C(a1)
0000F50C                            
0000F50C                            loc_EF0A:
0000F50C 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F510 4E75                       		rts	
0000F512                            ; ===========================================================================
0000F512                            
0000F512                            loc_EF10:				; XREF: Obj4D_Main
0000F512 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F518 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F51E 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F524 137C 0093 0020             		move.b	#$93,$20(a1)
0000F52A 137C 0080 0016             		move.b	#$80,$16(a1)
0000F530 08E9 0004 0001             		bset	#4,1(a1)
0000F536 5829 0024                  		addq.b	#4,$24(a1)
0000F53A 2348 003C                  		move.l	a0,$3C(a1)
0000F53E 4A28 0028                  		tst.b	$28(a0)
0000F542 6700                       		beq.s	Obj4D_PlaySnd
0000F544 7200                       		moveq	#0,d1
0000F546 6100 FF76                  		bsr.w	Obj4D_Loop
0000F54A 5429 0024                  		addq.b	#2,$24(a1)
0000F54E 08E9 0004 0002             		bset	#4,2(a1)
0000F554 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F55A 137C 0000 0018             		move.b	#0,$18(a1)
0000F560 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F566 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F56C 117C 0000 0028             		move.b	#0,$28(a0)
0000F572                            
0000F572                            Obj4D_PlaySnd:
0000F572 303C 00C8                  		move.w	#$C8,d0
0000F576 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play flame sound
0000F57C                            
0000F57C                            Obj4D_Action:				; XREF: Obj4D_Index
0000F57C 7000                       		moveq	#0,d0
0000F57E 1028 0028                  		move.b	$28(a0),d0
0000F582 D040                       		add.w	d0,d0
0000F584 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F588 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F58C 6100 E650                  		bsr.w	SpeedToPos
0000F590 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F596 6100 B736                  		bsr.w	AnimateSprite
0000F59A                            
0000F59A                            Obj4D_ChkDel:				; XREF: Obj4C
0000F59A 3028 0008                  		move.w	8(a0),d0
0000F59E 0240 FF80                  		andi.w	#$FF80,d0
0000F5A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F5A6 0441 0080                  		subi.w	#$80,d1
0000F5AA 0241 FF80                  		andi.w	#$FF80,d1
0000F5AE 9041                       		sub.w	d1,d0
0000F5B0 0C40 0280                  		cmpi.w	#$280,d0
0000F5B4 6200 E68A                  		bhi.w	DeleteObject
0000F5B8 4E75                       		rts	
0000F5BA                            ; ===========================================================================
0000F5BA 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F5BC 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F5BE                            ; ===========================================================================
0000F5BE                            
0000F5BE                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F5BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F5C4 3028 0030                  		move.w	$30(a0),d0
0000F5C8 B068 000C                  		cmp.w	$C(a0),d0
0000F5CC 6400                       		bcc.s	locret_EFDA
0000F5CE 5828 0024                  		addq.b	#4,$24(a0)
0000F5D2 2268 003C                  		movea.l	$3C(a0),a1
0000F5D6 137C 0003 001C             		move.b	#3,$1C(a1)
0000F5DC                            
0000F5DC                            locret_EFDA:
0000F5DC 4E75                       		rts	
0000F5DE                            ; ===========================================================================
0000F5DE                            
0000F5DE                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F5DE 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F5E4 3028 0030                  		move.w	$30(a0),d0
0000F5E8 B068 000C                  		cmp.w	$C(a0),d0
0000F5EC 6400                       		bcc.s	locret_EFFA
0000F5EE 5828 0024                  		addq.b	#4,$24(a0)
0000F5F2 2268 003C                  		movea.l	$3C(a0),a1
0000F5F6 137C 0001 001C             		move.b	#1,$1C(a1)
0000F5FC                            
0000F5FC                            locret_EFFA:
0000F5FC 4E75                       		rts	
0000F5FE                            ; ===========================================================================
0000F5FE                            
0000F5FE                            loc_EFFC:				; XREF: Obj4D_Index
0000F5FE 2268 003C                  		movea.l	$3C(a0),a1
0000F602 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F608 6700 0000                  		beq.w	Obj4D_Delete
0000F60C 3029 000C                  		move.w	$C(a1),d0
0000F610 0640 0060                  		addi.w	#$60,d0
0000F614 3140 000C                  		move.w	d0,$C(a0)
0000F618 9068 0030                  		sub.w	$30(a0),d0
0000F61C 4440                       		neg.w	d0
0000F61E 7208                       		moveq	#8,d1
0000F620 0C40 0040                  		cmpi.w	#$40,d0
0000F624 6C00                       		bge.s	loc_F026
0000F626 720B                       		moveq	#$B,d1
0000F628                            
0000F628                            loc_F026:
0000F628 0C40 0080                  		cmpi.w	#$80,d0
0000F62C 6F00                       		ble.s	loc_F02E
0000F62E 720E                       		moveq	#$E,d1
0000F630                            
0000F630                            loc_F02E:
0000F630 5328 001E                  		subq.b	#1,$1E(a0)
0000F634 6A00                       		bpl.s	loc_F04C
0000F636 117C 0007 001E             		move.b	#7,$1E(a0)
0000F63C 5228 001B                  		addq.b	#1,$1B(a0)
0000F640 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F646 6500                       		bcs.s	loc_F04C
0000F648 117C 0000 001B             		move.b	#0,$1B(a0)
0000F64E                            
0000F64E                            loc_F04C:
0000F64E 1028 001B                  		move.b	$1B(a0),d0
0000F652 D001                       		add.b	d1,d0
0000F654 1140 001A                  		move.b	d0,$1A(a0)
0000F658 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F65C                            ; ===========================================================================
0000F65C                            
0000F65C                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F65C 6000 E5E2                  		bra.w	DeleteObject
0000F660                            ; ===========================================================================
0000F660                            ; ---------------------------------------------------------------------------
0000F660                            ; Object 4E - advancing	wall of	lava (MZ)
0000F660                            ; ---------------------------------------------------------------------------
0000F660                            
0000F660                            Obj4E:					; XREF: Obj_Index
0000F660 7000                       		moveq	#0,d0
0000F662 1028 0024                  		move.b	$24(a0),d0
0000F666 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F66A 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F66E                            ; ===========================================================================
0000F66E 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F670 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F672 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F674 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F676 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F678                            ; ===========================================================================
0000F678                            
0000F678                            Obj4E_Main:				; XREF: Obj4E_Index
0000F678 5828 0024                  		addq.b	#4,$24(a0)
0000F67C 2248                       		movea.l	a0,a1
0000F67E 7201                       		moveq	#1,d1
0000F680 6000                       		bra.s	Obj4E_Main2
0000F682                            ; ===========================================================================
0000F682                            
0000F682                            Obj4E_Loop:
0000F682 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F686 6600                       		bne.s	loc_F0C8
0000F688                            
0000F688                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F688 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F68C 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F694 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F69A 137C 0004 0001             		move.b	#4,1(a1)
0000F6A0 137C 0050 0019             		move.b	#$50,$19(a1)
0000F6A6 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6AC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6B2 137C 0001 0018             		move.b	#1,$18(a1)
0000F6B8 137C 0000 001C             		move.b	#0,$1C(a1)
0000F6BE 137C 0094 0020             		move.b	#$94,$20(a1)
0000F6C4 2348 003C                  		move.l	a0,$3C(a1)
0000F6C8                            
0000F6C8                            loc_F0C8:
0000F6C8 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F6CC                            
0000F6CC 5C29 0024                  		addq.b	#6,$24(a1)
0000F6D0 137C 0004 001A             		move.b	#4,$1A(a1)
0000F6D6                            
0000F6D6                            Obj4E_Action:				; XREF: Obj4E_Index
0000F6D6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F6DA 9068 0008                  		sub.w	8(a0),d0
0000F6DE 6400                       		bcc.s	Obj4E_ChkSonic
0000F6E0 4440                       		neg.w	d0
0000F6E2                            
0000F6E2                            Obj4E_ChkSonic:
0000F6E2 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F6E6 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6E8 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F6EC 9068 000C                  		sub.w	$C(a0),d0
0000F6F0 6400                       		bcc.s	loc_F0F4
0000F6F2 4440                       		neg.w	d0
0000F6F4                            
0000F6F4                            loc_F0F4:
0000F6F4 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F6F8 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F6FA 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F700 6000                       		bra.s	Obj4E_Solid
0000F702                            ; ===========================================================================
0000F702                            
0000F702                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F702 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F706 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F708 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F70E 5528 0024                  		subq.b	#2,$24(a0)
0000F712                            
0000F712                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F712 323C 002B                  		move.w	#$2B,d1
0000F716 343C 0018                  		move.w	#$18,d2
0000F71A 3602                       		move.w	d2,d3
0000F71C 5243                       		addq.w	#1,d3
0000F71E 3828 0008                  		move.w	8(a0),d4
0000F722 1028 0024                  		move.b	$24(a0),d0
0000F726 3F00                       		move.w	d0,-(sp)
0000F728 6100 0000                  		bsr.w	SolidObject
0000F72C 301F                       		move.w	(sp)+,d0
0000F72E 1140 0024                  		move.b	d0,$24(a0)
0000F732 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F738 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F73A 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F73E 4228 0036                  		clr.b	$36(a0)
0000F742                            
0000F742                            Obj4E_Animate:
0000F742 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F748 6100 B584                  		bsr.w	AnimateSprite
0000F74C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F752 6400                       		bcc.s	Obj4E_ChkDel
0000F754 6100 E488                  		bsr.w	SpeedToPos
0000F758                            
0000F758                            Obj4E_ChkDel:
0000F758 6100 E4AA                  		bsr.w	DisplaySprite
0000F75C 4A28 0036                  		tst.b	$36(a0)
0000F760 6600                       		bne.s	locret_F17E
0000F762 3028 0008                  		move.w	8(a0),d0
0000F766 0240 FF80                  		andi.w	#$FF80,d0
0000F76A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F76E 0441 0080                  		subi.w	#$80,d1
0000F772 0241 FF80                  		andi.w	#$FF80,d1
0000F776 9041                       		sub.w	d1,d0
0000F778 0C40 0280                  		cmpi.w	#$280,d0
0000F77C 6200                       		bhi.s	Obj4E_ChkGone
0000F77E                            
0000F77E                            locret_F17E:
0000F77E 4E75                       		rts	
0000F780                            ; ===========================================================================
0000F780                            
0000F780                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F780 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F784 7000                       		moveq	#0,d0
0000F786 1028 0023                  		move.b	$23(a0),d0
0000F78A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F790 117C 0008 0024             		move.b	#8,$24(a0)
0000F796 4E75                       		rts	
0000F798                            ; ===========================================================================
0000F798                            
0000F798                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F798 2268 003C                  		movea.l	$3C(a0),a1
0000F79C 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F7A2 6700                       		beq.s	Obj4E_Delete
0000F7A4 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F7AA 0468 0080 0008             		subi.w	#$80,8(a0)
0000F7B0 6000 E452                  		bra.w	DisplaySprite
0000F7B4                            ; ===========================================================================
0000F7B4                            
0000F7B4                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F7B4 6000 E48A                  		bra.w	DeleteObject
0000F7B8                            ; ===========================================================================
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Object 54 - invisible	lava tag (MZ)
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            
0000F7B8                            Obj54:					; XREF: Obj_Index
0000F7B8 7000                       		moveq	#0,d0
0000F7BA 1028 0024                  		move.b	$24(a0),d0
0000F7BE 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F7C2 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F7C6                            ; ===========================================================================
0000F7C6 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F7C8 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F7CA                            
0000F7CA 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F7CE                            ; ===========================================================================
0000F7CE                            
0000F7CE                            Obj54_Main:				; XREF: Obj54_Index
0000F7CE 5428 0024                  		addq.b	#2,$24(a0)
0000F7D2 7000                       		moveq	#0,d0
0000F7D4 1028 0028                  		move.b	$28(a0),d0
0000F7D8 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F7DE 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F7E6 117C 0084 0001             		move.b	#$84,1(a0)
0000F7EC                            
0000F7EC                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F7EC 3028 0008                  		move.w	8(a0),d0
0000F7F0 0240 FF80                  		andi.w	#$FF80,d0
0000F7F4 3238 F700                  		move.w	($FFFFF700).w,d1
0000F7F8 0441 0080                  		subi.w	#$80,d1
0000F7FC 0241 FF80                  		andi.w	#$FF80,d1
0000F800 9041                       		sub.w	d1,d0
0000F802 6B00 E43C                  		bmi.w	DeleteObject
0000F806 0C40 0280                  		cmpi.w	#$280,d0
0000F80A 6200 E434                  		bhi.w	DeleteObject
0000F80E 4E75                       		rts	
0000F810                            ; ===========================================================================
0000F810                            ; ---------------------------------------------------------------------------
0000F810                            ; Sprite mappings - invisible lava tag (MZ)
0000F810                            ; ---------------------------------------------------------------------------
0000F810                            Map_obj54:
0000F810                            	include "_maps\obj54.asm"
0000F810                            ; ---------------------------------------------------------------------------
0000F810                            ; Sprite mappings - invisible lava tag (MZ)
0000F810                            ; ---------------------------------------------------------------------------
0000F810 0000                       		dc.w byte_F212-Map_obj54
0000F812 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F814 00                         		even
0000F814 00                         		even
0000F814                            
0000F814                            Ani_obj4C:
0000F814                            	include "_anim\obj4C.asm"
0000F814                            ; ---------------------------------------------------------------------------
0000F814                            ; Animation script - geyser of lava (MZ)
0000F814                            ; ---------------------------------------------------------------------------
0000F814 0000                       		dc.w byte_F220-Ani_obj4C
0000F816 0000                       		dc.w byte_F22A-Ani_obj4C
0000F818 0000                       		dc.w byte_F22E-Ani_obj4C
0000F81A 0000                       		dc.w byte_F232-Ani_obj4C
0000F81C 0000                       		dc.w byte_F23A-Ani_obj4C
0000F81E 0000                       		dc.w byte_F23E-Ani_obj4C
0000F820 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F82A 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F82E 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F832 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F83A 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F83E 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F842                            		even
0000F842                            		even
0000F842                            
0000F842                            Ani_obj4E:
0000F842                            	include "_anim\obj4E.asm"
0000F842                            ; ---------------------------------------------------------------------------
0000F842                            ; Animation script - advancing wall of lava (MZ)
0000F842                            ; ---------------------------------------------------------------------------
0000F842 0000                       		dc.w byte_F244-Ani_obj4E
0000F844 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F84A                            		even
0000F84A                            		even
0000F84A                            
0000F84A                            ; ---------------------------------------------------------------------------
0000F84A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F84A                            ; ---------------------------------------------------------------------------
0000F84A                            Map_obj4C:
0000F84A                            	include "_maps\obj4C.asm"
0000F84A                            ; ---------------------------------------------------------------------------
0000F84A                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F84A                            ; ---------------------------------------------------------------------------
0000F84A 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F84E 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F852 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F856 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F85A 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F85E 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F862 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F866 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F86A 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F86E 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F872 02                         byte_F272:	dc.b 2
0000F873 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F878 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F87D 02                         byte_F27D:	dc.b 2
0000F87E EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F883 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F888 04                         byte_F288:	dc.b 4
0000F889 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F88E F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F893 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F898 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F89D 04                         byte_F29D:	dc.b 4
0000F89E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F8A3 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F8A8 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F8AD EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F8B2 06                         byte_F2B2:	dc.b 6
0000F8B3 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F8B8 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F8BD F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F8C2 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F8C7 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F8CC E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F8D1 06                         byte_F2D1:	dc.b 6
0000F8D2 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F8D7 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F8DC F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F8E1 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F8E6 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F8EB E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F8F0 02                         byte_F2F0:	dc.b 2
0000F8F1 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F8F6 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F8FB 02                         byte_F2FB:	dc.b 2
0000F8FC E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F901 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F906 0A                         byte_F306:	dc.b $A
0000F907 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F90C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F911 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F916 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F91B D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F920 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F925 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F92A F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F92F 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F934 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F939 0A                         byte_F339:	dc.b $A
0000F93A 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F93F 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F944 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F949 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F94E D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F953 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F958 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F95D F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F962 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F967 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F96C 0A                         byte_F36C:	dc.b $A
0000F96D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F972 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F977 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F97C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F981 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F986 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F98B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F990 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F995 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F99A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F99F 06                         byte_F39F:	dc.b 6
0000F9A0 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9A5 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9AA B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9AF B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9B4 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9B9 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9BE 06                         byte_F3BE:	dc.b 6
0000F9BF 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9C4 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9C9 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9CE B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9D3 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9D8 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9DD 06                         byte_F3DD:	dc.b 6
0000F9DE 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F9E3 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F9E8 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F9ED B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F9F2 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F9F7 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F9FC 10                         byte_F3FC:	dc.b $10
0000F9FD 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA02 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA07 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA0C B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA11 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA16 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA1B F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FA20 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FA25 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FA2A 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FA2F 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FA34 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FA39 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FA3E 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FA43 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FA48 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FA4D 10                         byte_F44D:	dc.b $10
0000FA4E 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA53 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA58 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA5D B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA62 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA67 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA6C F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FA71 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA76 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA7B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA80 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FA85 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA8A 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA8F 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA94 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA99 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA9E 10                         byte_F49E:	dc.b $10
0000FA9F 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FAA4 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FAA9 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FAAE B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FAB3 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FAB8 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FABD F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FAC2 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FAC7 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FACC 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FAD1 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FAD6 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FADB 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FAE0 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FAE5 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FAEA 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FAEF 06                         byte_F4EF:	dc.b 6
0000FAF0 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FAF5 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FAFA E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FAFF E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FB04 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FB09 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FB0E 06                         byte_F50E:	dc.b 6
0000FB0F E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FB14 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FB19 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FB1E E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FB23 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FB28 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FB2D 00                         byte_F52D:	dc.b 0
0000FB2E                            		even
0000FB2E                            		even
0000FB2E                            
0000FB2E                            ; ---------------------------------------------------------------------------
0000FB2E                            ; Sprite mappings - advancing wall of lava (MZ)
0000FB2E                            ; ---------------------------------------------------------------------------
0000FB2E                            Map_obj4E:
0000FB2E                            	include "_maps\obj4E.asm"
0000FB2E                            ; ---------------------------------------------------------------------------
0000FB2E                            ; Sprite mappings - advancing wall of lava (MZ)
0000FB2E                            ; ---------------------------------------------------------------------------
0000FB2E 0000                       		dc.w byte_F538-Map_obj4E
0000FB30 0000                       		dc.w byte_F566-Map_obj4E
0000FB32 0000                       		dc.w byte_F594-Map_obj4E
0000FB34 0000                       		dc.w byte_F5C2-Map_obj4E
0000FB36 0000                       		dc.w byte_F5F0-Map_obj4E
0000FB38 09                         byte_F538:	dc.b 9
0000FB39 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FB3E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB43 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB48 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB4D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB52 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB57 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB5C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB61 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB66 09                         byte_F566:	dc.b 9
0000FB67 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB6C 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FB71 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB76 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB7B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB80 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB85 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB8A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB8F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB94 09                         byte_F594:	dc.b 9
0000FB95 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB9A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB9F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBA4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBA9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBAE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBB3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBB8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBBD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBC2 09                         byte_F5C2:	dc.b 9
0000FBC3 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FBC8 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FBCD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBD2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBD7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBDC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBE1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBE6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBEB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBF0 08                         byte_F5F0:	dc.b 8
0000FBF1 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FBF6 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBFB E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC00 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC05 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC0A 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC0F E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC14 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC1A 00                         		even
0000FC1A 00                         		even
0000FC1A                            
0000FC1A                            ; ===========================================================================
0000FC1A                            ; ---------------------------------------------------------------------------
0000FC1A                            ; Object 40 - Moto Bug enemy (GHZ)
0000FC1A                            ; ---------------------------------------------------------------------------
0000FC1A                            
0000FC1A                            Obj40:					; XREF: Obj_Index
0000FC1A 7000                       		moveq	#0,d0
0000FC1C 1028 0024                  		move.b	$24(a0),d0
0000FC20 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FC24 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FC28                            ; ===========================================================================
0000FC28 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FC2A 0000                       		dc.w Obj40_Action-Obj40_Index
0000FC2C 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FC2E 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FC30                            ; ===========================================================================
0000FC30                            
0000FC30                            Obj40_Main:				; XREF: Obj40_Index
0000FC30 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FC38 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FC3E 117C 0004 0001             		move.b	#4,1(a0)
0000FC44 117C 0004 0018             		move.b	#4,$18(a0)
0000FC4A 117C 0014 0019             		move.b	#$14,$19(a0)
0000FC50 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FC54 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FC56 117C 000E 0016             		move.b	#$E,$16(a0)
0000FC5C 117C 0008 0017             		move.b	#8,$17(a0)
0000FC62 117C 000C 0020             		move.b	#$C,$20(a0)
0000FC68 6100 DF48                  		bsr.w	ObjectFall
0000FC6C 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC72 4A41                       		tst.w	d1
0000FC74 6A00                       		bpl.s	locret_F68A
0000FC76 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC7A 317C 0000 0012             		move.w	#0,$12(a0)
0000FC80 5428 0024                  		addq.b	#2,$24(a0)
0000FC84 0868 0000 0022             		bchg	#0,$22(a0)
0000FC8A                            
0000FC8A                            locret_F68A:
0000FC8A 4E75                       		rts	
0000FC8C                            ; ===========================================================================
0000FC8C                            
0000FC8C                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC8C 5828 0024                  		addq.b	#4,$24(a0)
0000FC90 6000 0000                  		bra.w	Obj40_Animate
0000FC94                            ; ===========================================================================
0000FC94                            
0000FC94                            Obj40_Action:				; XREF: Obj40_Index
0000FC94 7000                       		moveq	#0,d0
0000FC96 1028 0025                  		move.b	$25(a0),d0
0000FC9A 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC9E 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FCA2 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FCA8 6100 B024                  		bsr.w	AnimateSprite
0000FCAC                            
0000FCAC                            ; ---------------------------------------------------------------------------
0000FCAC                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FCAC                            ; ---------------------------------------------------------------------------
0000FCAC                            
0000FCAC                            MarkObjGone:
0000FCAC 3028 0008                  		move.w	8(a0),d0
0000FCB0 0240 FF80                  		andi.w	#$FF80,d0
0000FCB4 3238 F700                  		move.w	($FFFFF700).w,d1
0000FCB8 0441 0080                  		subi.w	#$80,d1
0000FCBC 0241 FF80                  		andi.w	#$FF80,d1
0000FCC0 9041                       		sub.w	d1,d0
0000FCC2 0C40 0280                  		cmpi.w	#$280,d0
0000FCC6 6200 0000                  		bhi.w	Mark_ChkGone
0000FCCA 6000 DF38                  		bra.w	DisplaySprite
0000FCCE                            ; ===========================================================================
0000FCCE                            
0000FCCE                            Mark_ChkGone:
0000FCCE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FCD2 7000                       		moveq	#0,d0
0000FCD4 1028 0023                  		move.b	$23(a0),d0
0000FCD8 6700                       		beq.s	Mark_Delete
0000FCDA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FCE0                            
0000FCE0                            Mark_Delete:
0000FCE0 6000 DF5E                  		bra.w	DeleteObject
0000FCE4                            
0000FCE4                            ; ===========================================================================
0000FCE4 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FCE6 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FCE8                            ; ===========================================================================
0000FCE8                            
0000FCE8                            Obj40_Move:				; XREF: Obj40_Index2
0000FCE8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FCEC 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FCEE 5428 0025                  		addq.b	#2,$25(a0)
0000FCF2 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FCF8 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCFE 0868 0000 0022             		bchg	#0,$22(a0)
0000FD04 6600                       		bne.s	locret_F70A
0000FD06 4468 0010                  		neg.w	$10(a0)		; change direction
0000FD0A                            
0000FD0A                            locret_F70A:
0000FD0A 4E75                       		rts	
0000FD0C                            ; ===========================================================================
0000FD0C                            
0000FD0C                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FD0C 6100 DED0                  		bsr.w	SpeedToPos
0000FD10 4EB9 0000 0000             		jsr	ObjHitFloor
0000FD16 0C41 FFF8                  		cmpi.w	#-8,d1
0000FD1A 6D00                       		blt.s	Obj40_Pause
0000FD1C 0C41 000C                  		cmpi.w	#$C,d1
0000FD20 6C00                       		bge.s	Obj40_Pause
0000FD22 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FD26 5328 0033                  		subq.b	#1,$33(a0)
0000FD2A 6A00                       		bpl.s	locret_F756
0000FD2C 117C 000F 0033             		move.b	#$F,$33(a0)
0000FD32 6100 E356                  		bsr.w	SingleObjLoad
0000FD36 6600                       		bne.s	locret_F756
0000FD38 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FD3C 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD42 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD48 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FD4E 137C 0002 001C             		move.b	#2,$1C(a1)
0000FD54                            
0000FD54                            locret_F756:
0000FD54 4E75                       		rts	
0000FD56                            ; ===========================================================================
0000FD56                            
0000FD56                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FD56 5528 0025                  		subq.b	#2,$25(a0)
0000FD5A 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FD60 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FD66 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD6C 4E75                       		rts	
0000FD6E                            ; ===========================================================================
0000FD6E                            
0000FD6E                            Obj40_Animate:				; XREF: Obj40_Index
0000FD6E 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD74 6100 AF58                  		bsr.w	AnimateSprite
0000FD78 6000 DE8A                  		bra.w	DisplaySprite
0000FD7C                            ; ===========================================================================
0000FD7C                            
0000FD7C                            Obj40_Delete:				; XREF: Obj40_Index
0000FD7C 6000 DEC2                  		bra.w	DeleteObject
0000FD80                            ; ===========================================================================
0000FD80                            Ani_obj40:
0000FD80                            	include "_anim\obj40.asm"
0000FD80                            ; ---------------------------------------------------------------------------
0000FD80                            ; Animation script - Motobug enemy
0000FD80                            ; ---------------------------------------------------------------------------
0000FD80 0000                       		dc.w byte_F788-Ani_obj40
0000FD82 0000                       		dc.w byte_F78C-Ani_obj40
0000FD84 0000                       		dc.w byte_F792-Ani_obj40
0000FD86 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD8A 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD90 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD9E                            		even
0000FD9E                            		even
0000FD9E                            
0000FD9E                            ; ---------------------------------------------------------------------------
0000FD9E                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD9E                            ; ---------------------------------------------------------------------------
0000FD9E                            Map_obj40:
0000FD9E                            	include "_maps\obj40.asm"
0000FD9E                            Map_cedc:
0000FD9E 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FDA0 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FDA2 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FDA4 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FDA6 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FDA8 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FDAA 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FDAC 04                         Map_cedc_E: 	dc.b $4
0000FDAD F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FDB2 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FDB7 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FDBC 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FDC1 04                         Map_cedc_23: 	dc.b $4
0000FDC2 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FDC7 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FDCC F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FDD1 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FDD6 05                         Map_cedc_38: 	dc.b $5
0000FDD7 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FDDC 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FDE1 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FDE6 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FDEB 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FDF0 01                         Map_cedc_52: 	dc.b $1
0000FDF1 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FDF6 01                         Map_cedc_58: 	dc.b $1
0000FDF7 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FDFC 01                         Map_cedc_5E: 	dc.b $1
0000FDFD FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FE02 00                         Map_cedc_64: 	dc.b $0
0000FE04 00                         	even
0000FE04 00                         	even
0000FE04                            
0000FE04                            ; ===========================================================================
0000FE04                            ; ---------------------------------------------------------------------------
0000FE04                            ; Object 4F - blank
0000FE04                            ; ---------------------------------------------------------------------------
0000FE04                            
0000FE04                            Obj4F:					; XREF: Obj_Index
0000FE04 4E75                       		rts	
0000FE06                            
0000FE06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FE06                            
0000FE06                            
0000FE06                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FE06 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FE0A D047                       		add.w	d7,d0
0000FE0C 0240 0003                  		andi.w	#3,d0
0000FE10 6600                       		bne.s	loc_F836
0000FE12 7600                       		moveq	#0,d3
0000FE14 1628 0019                  		move.b	$19(a0),d3
0000FE18 4A68 0010                  		tst.w	$10(a0)
0000FE1C 6B00                       		bmi.s	loc_F82C
0000FE1E 6100 0000                  		bsr.w	ObjHitWallRight
0000FE22 4A41                       		tst.w	d1
0000FE24 6A00                       		bpl.s	loc_F836
0000FE26                            
0000FE26                            loc_F828:
0000FE26 7001                       		moveq	#1,d0
0000FE28 4E75                       		rts	
0000FE2A                            ; ===========================================================================
0000FE2A                            
0000FE2A                            loc_F82C:
0000FE2A 4643                       		not.w	d3
0000FE2C 6100 0000                  		bsr.w	ObjHitWallLeft
0000FE30 4A41                       		tst.w	d1
0000FE32 6BF2                       		bmi.s	loc_F828
0000FE34                            
0000FE34                            loc_F836:
0000FE34 7000                       		moveq	#0,d0
0000FE36 4E75                       		rts	
0000FE38                            ; End of function Obj50_ChkWall
0000FE38                            
0000FE38                            ; ===========================================================================
0000FE38                            ; ---------------------------------------------------------------------------
0000FE38                            ; Object 50 - Yadrin enemy (SYZ)
0000FE38                            ; ---------------------------------------------------------------------------
0000FE38                            
0000FE38                            Obj50:					; XREF: Obj_Index
0000FE38 7000                       		moveq	#0,d0
0000FE3A 1028 0024                  		move.b	$24(a0),d0
0000FE3E 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FE42 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FE46                            ; ===========================================================================
0000FE46 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FE48 0000                       		dc.w Obj50_Action-Obj50_Index
0000FE4A                            ; ===========================================================================
0000FE4A                            
0000FE4A                            Obj50_Main:				; XREF: Obj50_Index
0000FE4A 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FE52 317C 247B 0002             		move.w	#$247B,2(a0)
0000FE58 117C 0004 0001             		move.b	#4,1(a0)
0000FE5E 117C 0004 0018             		move.b	#4,$18(a0)
0000FE64 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE6A 117C 0011 0016             		move.b	#$11,$16(a0)
0000FE70 117C 0008 0017             		move.b	#8,$17(a0)
0000FE76 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FE7C 6100 DD34                  		bsr.w	ObjectFall
0000FE80 6100 0000                  		bsr.w	ObjHitFloor
0000FE84 4A41                       		tst.w	d1
0000FE86 6A00                       		bpl.s	locret_F89E
0000FE88 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE8C 317C 0000 0012             		move.w	#0,$12(a0)
0000FE92 5428 0024                  		addq.b	#2,$24(a0)
0000FE96 0868 0000 0022             		bchg	#0,$22(a0)
0000FE9C                            
0000FE9C                            locret_F89E:
0000FE9C 4E75                       		rts	
0000FE9E                            ; ===========================================================================
0000FE9E                            
0000FE9E                            Obj50_Action:				; XREF: Obj50_Index
0000FE9E 7000                       		moveq	#0,d0
0000FEA0 1028 0025                  		move.b	$25(a0),d0
0000FEA4 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FEA8 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FEAC 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FEB2 6100 AE1A                  		bsr.w	AnimateSprite
0000FEB6 6000 FDF4                  		bra.w	MarkObjGone
0000FEBA                            ; ===========================================================================
0000FEBA 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FEBC 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FEBE                            ; ===========================================================================
0000FEBE                            
0000FEBE                            Obj50_Move:				; XREF: Obj50_Index2
0000FEBE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FEC2 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FEC4 5428 0025                  		addq.b	#2,$25(a0)
0000FEC8 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FECE 117C 0001 001C             		move.b	#1,$1C(a0)
0000FED4 0868 0000 0022             		bchg	#0,$22(a0)
0000FEDA 6600                       		bne.s	locret_F8E2
0000FEDC 4468 0010                  		neg.w	$10(a0)		; change direction
0000FEE0                            
0000FEE0                            locret_F8E2:
0000FEE0 4E75                       		rts	
0000FEE2                            ; ===========================================================================
0000FEE2                            
0000FEE2                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FEE2 6100 DCFA                  		bsr.w	SpeedToPos
0000FEE6 6100 0000                  		bsr.w	ObjHitFloor
0000FEEA 0C41 FFF8                  		cmpi.w	#-8,d1
0000FEEE 6D00                       		blt.s	Obj50_Pause
0000FEF0 0C41 000C                  		cmpi.w	#$C,d1
0000FEF4 6C00                       		bge.s	Obj50_Pause
0000FEF6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FEFA 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FEFE 6600                       		bne.s	Obj50_Pause
0000FF00 4E75                       		rts	
0000FF02                            ; ===========================================================================
0000FF02                            
0000FF02                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FF02 5528 0025                  		subq.b	#2,$25(a0)
0000FF06 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF0C 317C 0000 0010             		move.w	#0,$10(a0)
0000FF12 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF18 4E75                       		rts	
0000FF1A                            ; ===========================================================================
0000FF1A                            Ani_obj50:
0000FF1A                            	include "_anim\obj50.asm"
0000FF1A                            ; ---------------------------------------------------------------------------
0000FF1A                            ; Animation script - Yadrin enemy
0000FF1A                            ; ---------------------------------------------------------------------------
0000FF1A 0000                       		dc.w byte_F920-Ani_obj50
0000FF1C 0000                       		dc.w byte_F924-Ani_obj50
0000FF1E 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FF22 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FF2C                            		even
0000FF2C                            		even
0000FF2C                            
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            Map_obj50:
0000FF2C                            	include "_maps\obj50.asm"
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FF2C                            ; ---------------------------------------------------------------------------
0000FF2C 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FF30 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FF34 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FF38 05                         byte_F93A:	dc.b 5
0000FF39 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF3E FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF43 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF48 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF4D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF52 05                         byte_F954:	dc.b 5
0000FF53 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF58 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF5D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF62 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF67 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF6C 05                         byte_F96E:	dc.b 5
0000FF6D F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF72 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF77 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF7C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF81 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF86 05                         byte_F988:	dc.b 5
0000FF87 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF8C FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF91 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF96 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF9B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FFA0 05                         byte_F9A2:	dc.b 5
0000FFA1 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FFA6 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FFAB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FFB0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FFB5 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FFBA 05                         byte_F9BC:	dc.b 5
0000FFBB F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FFC0 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FFC5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FFCA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FFCF 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FFD4                            		even
0000FFD4                            		even
0000FFD4                            
0000FFD4                            ; ---------------------------------------------------------------------------
0000FFD4                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FFD4                            ;
0000FFD4                            ; variables:
0000FFD4                            ; d1 = width
0000FFD4                            ; d2 = height /	2 (when	jumping)
0000FFD4                            ; d3 = height /	2 (when	walking)
0000FFD4                            ; d4 = x-axis position
0000FFD4                            ; ---------------------------------------------------------------------------
0000FFD4                            
0000FFD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFD4                            
0000FFD4                            
0000FFD4                            SolidObject:
0000FFD4 4A28 0025                  		tst.b	$25(a0)
0000FFD8 6700 0000                  		beq.w	loc_FAC8
0000FFDC 3401                       		move.w	d1,d2
0000FFDE D442                       		add.w	d2,d2
0000FFE0 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFE4 0829 0001 0022             		btst	#1,$22(a1)
0000FFEA 6600                       		bne.s	loc_F9FE
0000FFEC 3029 0008                  		move.w	8(a1),d0
0000FFF0 9068 0008                  		sub.w	8(a0),d0
0000FFF4 D041                       		add.w	d1,d0
0000FFF6 6B00                       		bmi.s	loc_F9FE
0000FFF8 B042                       		cmp.w	d2,d0
0000FFFA 6500                       		bcs.s	loc_FA12
0000FFFC                            
0000FFFC                            loc_F9FE:
0000FFFC 08A9 0003 0022             		bclr	#3,$22(a1)
00010002 08A8 0003 0022             		bclr	#3,$22(a0)
00010008 4228 0025                  		clr.b	$25(a0)
0001000C 7800                       		moveq	#0,d4
0001000E 4E75                       		rts	
00010010                            ; ===========================================================================
00010010                            
00010010                            loc_FA12:
00010010 3404                       		move.w	d4,d2
00010012                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
00010012 7800                       		moveq	#0,d4
00010014 4E75                       		rts	
00010016                            ; ===========================================================================
00010016                            
00010016                            SolidObject71:				; XREF: Obj71_Solid
00010016 4A28 0025                  		tst.b	$25(a0)
0001001A 6700 0000                  		beq.w	loc_FAD0
0001001E 3401                       		move.w	d1,d2
00010020 D442                       		add.w	d2,d2
00010022 43F8 D000                  		lea	($FFFFD000).w,a1
00010026 0829 0001 0022             		btst	#1,$22(a1)
0001002C 6600                       		bne.s	loc_FA44
0001002E 3029 0008                  		move.w	8(a1),d0
00010032 9068 0008                  		sub.w	8(a0),d0
00010036 D041                       		add.w	d1,d0
00010038 6B00                       		bmi.s	loc_FA44
0001003A B042                       		cmp.w	d2,d0
0001003C 6500                       		bcs.s	loc_FA58
0001003E                            
0001003E                            loc_FA44:
0001003E 08A9 0003 0022             		bclr	#3,$22(a1)
00010044 08A8 0003 0022             		bclr	#3,$22(a0)
0001004A 4228 0025                  		clr.b	$25(a0)
0001004E 7800                       		moveq	#0,d4
00010050 4E75                       		rts	
00010052                            ; ===========================================================================
00010052                            
00010052                            loc_FA58:
00010052 3404                       		move.w	d4,d2
00010054                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010054 7800                       		moveq	#0,d4
00010056 4E75                       		rts	
00010058                            ; ===========================================================================
00010058                            
00010058                            SolidObject2F:				; XREF: Obj2F_Solid
00010058 43F8 D000                  		lea	($FFFFD000).w,a1
0001005C 4A28 0001                  		tst.b	1(a0)
00010060 6A00 0000                  		bpl.w	loc_FB92
00010064 3029 0008                  		move.w	8(a1),d0
00010068 9068 0008                  		sub.w	8(a0),d0
0001006C D041                       		add.w	d1,d0
0001006E 6B00 0000                  		bmi.w	loc_FB92
00010072 3601                       		move.w	d1,d3
00010074 D643                       		add.w	d3,d3
00010076 B043                       		cmp.w	d3,d0
00010078 6200 0000                  		bhi.w	loc_FB92
0001007C 3A00                       		move.w	d0,d5
0001007E 0828 0000 0001             		btst	#0,1(a0)
00010084 6700                       		beq.s	loc_FA94
00010086 4645                       		not.w	d5
00010088 DA43                       		add.w	d3,d5
0001008A                            
0001008A                            loc_FA94:
0001008A E24D                       		lsr.w	#1,d5
0001008C 7600                       		moveq	#0,d3
0001008E 1632 5000                  		move.b	(a2,d5.w),d3
00010092 9612                       		sub.b	(a2),d3
00010094 3A28 000C                  		move.w	$C(a0),d5
00010098 9A43                       		sub.w	d3,d5
0001009A 1629 0016                  		move.b	$16(a1),d3
0001009E 4883                       		ext.w	d3
000100A0 D443                       		add.w	d3,d2
000100A2 3629 000C                  		move.w	$C(a1),d3
000100A6 9645                       		sub.w	d5,d3
000100A8 5843                       		addq.w	#4,d3
000100AA D642                       		add.w	d2,d3
000100AC 6B00 0000                  		bmi.w	loc_FB92
000100B0 3802                       		move.w	d2,d4
000100B2 D844                       		add.w	d4,d4
000100B4 B644                       		cmp.w	d4,d3
000100B6 6400 0000                  		bcc.w	loc_FB92
000100BA 6000 0000                  		bra.w	loc_FB0E
000100BE                            ; ===========================================================================
000100BE                            
000100BE                            loc_FAC8:
000100BE 4A28 0001                  		tst.b	1(a0)
000100C2 6A00 0000                  		bpl.w	loc_FB92
000100C6                            
000100C6                            loc_FAD0:
000100C6 43F8 D000                  		lea	($FFFFD000).w,a1
000100CA 3029 0008                  		move.w	8(a1),d0
000100CE 9068 0008                  		sub.w	8(a0),d0
000100D2 D041                       		add.w	d1,d0
000100D4 6B00 0000                  		bmi.w	loc_FB92
000100D8 3601                       		move.w	d1,d3
000100DA D643                       		add.w	d3,d3
000100DC B043                       		cmp.w	d3,d0
000100DE 6200 0000                  		bhi.w	loc_FB92
000100E2 1629 0016                  		move.b	$16(a1),d3
000100E6 4883                       		ext.w	d3
000100E8 D443                       		add.w	d3,d2
000100EA 3629 000C                  		move.w	$C(a1),d3
000100EE 9668 000C                  		sub.w	$C(a0),d3
000100F2 5843                       		addq.w	#4,d3
000100F4 D642                       		add.w	d2,d3
000100F6 6B00 0000                  		bmi.w	loc_FB92
000100FA 3802                       		move.w	d2,d4
000100FC D844                       		add.w	d4,d4
000100FE B644                       		cmp.w	d4,d3
00010100 6400 0000                  		bcc.w	loc_FB92
00010104                            
00010104                            loc_FB0E:
00010104 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010108 6B00 0000                  		bmi.w	loc_FB92
0001010C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010112 6400 0000                  		bcc.w	loc_FB92
00010116 4A78 FE08                  		tst.w	($FFFFFE08).w
0001011A 6600 0000                  		bne.w	loc_FBAC
0001011E 3A00                       		move.w	d0,d5
00010120 B240                       		cmp.w	d0,d1
00010122 6400                       		bcc.s	loc_FB36
00010124 D241                       		add.w	d1,d1
00010126 9041                       		sub.w	d1,d0
00010128 3A00                       		move.w	d0,d5
0001012A 4445                       		neg.w	d5
0001012C                            
0001012C                            loc_FB36:
0001012C 3203                       		move.w	d3,d1
0001012E B443                       		cmp.w	d3,d2
00010130 6400                       		bcc.s	loc_FB44
00010132 5943                       		subq.w	#4,d3
00010134 9644                       		sub.w	d4,d3
00010136 3203                       		move.w	d3,d1
00010138 4441                       		neg.w	d1
0001013A                            
0001013A                            loc_FB44:
0001013A BA41                       		cmp.w	d1,d5
0001013C 6200 0000                  		bhi.w	loc_FBB0
00010140 0C41 0004                  		cmpi.w	#4,d1
00010144 6300                       		bls.s	loc_FB8C
00010146 4A40                       		tst.w	d0
00010148 6700                       		beq.s	loc_FB70
0001014A 6B00                       		bmi.s	loc_FB5E
0001014C 4A69 0010                  		tst.w	$10(a1)
00010150 6B00                       		bmi.s	loc_FB70
00010152 6000                       		bra.s	loc_FB64
00010154                            ; ===========================================================================
00010154                            
00010154                            loc_FB5E:
00010154 4A69 0010                  		tst.w	$10(a1)
00010158 6A00                       		bpl.s	loc_FB70
0001015A                            
0001015A                            loc_FB64:
0001015A 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010160 337C 0000 0010             		move.w	#0,$10(a1)
00010166                            
00010166                            loc_FB70:
00010166 9169 0008                  		sub.w	d0,8(a1)
0001016A 0829 0001 0022             		btst	#1,$22(a1)
00010170 6600                       		bne.s	loc_FB8C
00010172 08E9 0005 0022             		bset	#5,$22(a1)
00010178 08E8 0005 0022             		bset	#5,$22(a0)
0001017E 7801                       		moveq	#1,d4
00010180 4E75                       		rts	
00010182                            ; ===========================================================================
00010182                            
00010182                            loc_FB8C:
00010182 6100                       		bsr.s	loc_FBA0
00010184 7801                       		moveq	#1,d4
00010186 4E75                       		rts	
00010188                            ; ===========================================================================
00010188                            
00010188                            loc_FB92:
00010188 0828 0005 0022             		btst	#5,$22(a0)
0001018E 6700                       		beq.s	loc_FBAC
00010190 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010196                            
00010196                            loc_FBA0:
00010196 08A8 0005 0022             		bclr	#5,$22(a0)
0001019C 08A9 0005 0022             		bclr	#5,$22(a1)
000101A2                            
000101A2                            loc_FBAC:
000101A2 7800                       		moveq	#0,d4
000101A4 4E75                       		rts	
000101A6                            ; ===========================================================================
000101A6                            
000101A6                            loc_FBB0:
000101A6 4A43                       		tst.w	d3
000101A8 6B00                       		bmi.s	loc_FBBC
000101AA 0C43 0010                  		cmpi.w	#$10,d3
000101AE 6500                       		bcs.s	loc_FBEE
000101B0 60D6                       		bra.s	loc_FB92
000101B2                            ; ===========================================================================
000101B2                            
000101B2                            loc_FBBC:
000101B2 4A69 0012                  		tst.w	$12(a1)
000101B6 6700                       		beq.s	loc_FBD6
000101B8 6A00                       		bpl.s	loc_FBD2
000101BA 4A43                       		tst.w	d3
000101BC 6A00                       		bpl.s	loc_FBD2
000101BE 9769 000C                  		sub.w	d3,$C(a1)
000101C2 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
000101C8                            
000101C8                            loc_FBD2:
000101C8 78FF                       		moveq	#-1,d4
000101CA 4E75                       		rts	
000101CC                            ; ===========================================================================
000101CC                            
000101CC                            loc_FBD6:
000101CC 0829 0001 0022             		btst	#1,$22(a1)
000101D2 66F4                       		bne.s	loc_FBD2
000101D4 2F08                       		move.l	a0,-(sp)
000101D6 2049                       		movea.l	a1,a0
000101D8 4EB9 0000 0000             		jsr	KillSonic
000101DE 205F                       		movea.l	(sp)+,a0
000101E0 78FF                       		moveq	#-1,d4
000101E2 4E75                       		rts	
000101E4                            ; ===========================================================================
000101E4                            
000101E4                            loc_FBEE:
000101E4 5943                       		subq.w	#4,d3
000101E6 7200                       		moveq	#0,d1
000101E8 1228 0019                  		move.b	$19(a0),d1
000101EC 3401                       		move.w	d1,d2
000101EE D442                       		add.w	d2,d2
000101F0 D269 0008                  		add.w	8(a1),d1
000101F4 9268 0008                  		sub.w	8(a0),d1
000101F8 6B00                       		bmi.s	loc_FC28
000101FA B242                       		cmp.w	d2,d1
000101FC 6400                       		bcc.s	loc_FC28
000101FE 4A69 0012                  		tst.w	$12(a1)
00010202 6B00                       		bmi.s	loc_FC28
00010204 9769 000C                  		sub.w	d3,$C(a1)
00010208 5369 000C                  		subq.w	#1,$C(a1)
0001020C 6100                       		bsr.s	sub_FC2C
0001020E 117C 0002 0025             		move.b	#2,$25(a0)
00010214 08E8 0003 0022             		bset	#3,$22(a0)
0001021A 78FF                       		moveq	#-1,d4
0001021C 4E75                       		rts	
0001021E                            ; ===========================================================================
0001021E                            
0001021E                            loc_FC28:
0001021E 7800                       		moveq	#0,d4
00010220 4E75                       		rts	
00010222                            ; End of function SolidObject
00010222                            
00010222                            
00010222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010222                            
00010222                            
00010222                            sub_FC2C:				; XREF: SolidObject
00010222 0829 0003 0022             		btst	#3,$22(a1)
00010228 6700                       		beq.s	loc_FC4E
0001022A 7000                       		moveq	#0,d0
0001022C 1029 003D                  		move.b	$3D(a1),d0
00010230 ED48                       		lsl.w	#6,d0
00010232 0680 00FF D000             		addi.l	#$FFD000,d0
00010238 2440                       		movea.l	d0,a2
0001023A 08AA 0003 0022             		bclr	#3,$22(a2)
00010240 422A 0025                  		clr.b	$25(a2)
00010244                            
00010244                            loc_FC4E:
00010244 3008                       		move.w	a0,d0
00010246 0440 D000                  		subi.w	#-$3000,d0
0001024A EC48                       		lsr.w	#6,d0
0001024C 0240 007F                  		andi.w	#$7F,d0
00010250 1340 003D                  		move.b	d0,$3D(a1)
00010254 137C 0000 0026             		move.b	#0,$26(a1)
0001025A 337C 0000 0012             		move.w	#0,$12(a1)
00010260 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010266 0829 0001 0022             		btst	#1,$22(a1)
0001026C 6700                       		beq.s	loc_FC84
0001026E 2F08                       		move.l	a0,-(sp)
00010270 2049                       		movea.l	a1,a0
00010272 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010278 205F                       		movea.l	(sp)+,a0
0001027A                            
0001027A                            loc_FC84:
0001027A 08E9 0003 0022             		bset	#3,$22(a1)
00010280 08E8 0003 0022             		bset	#3,$22(a0)
00010286 4E75                       		rts	
00010288                            ; End of function sub_FC2C
00010288                            
00010288                            ; ===========================================================================
00010288                            ; ---------------------------------------------------------------------------
00010288                            ; Object 51 - smashable	green block (MZ)
00010288                            ; ---------------------------------------------------------------------------
00010288                            
00010288                            Obj51:					; XREF: Obj_Index
00010288 7000                       		moveq	#0,d0
0001028A 1028 0024                  		move.b	$24(a0),d0
0001028E 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010292 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010296 6000 FA14                  		bra.w	MarkObjGone
0001029A                            ; ===========================================================================
0001029A 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001029C 0000                       		dc.w Obj51_Solid-Obj51_Index
0001029E 0000                       		dc.w Obj51_Display-Obj51_Index
000102A0                            ; ===========================================================================
000102A0                            
000102A0                            Obj51_Main:				; XREF: Obj51_Index
000102A0 5428 0024                  		addq.b	#2,$24(a0)
000102A4 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
000102AC 317C 42B8 0002             		move.w	#$42B8,2(a0)
000102B2 117C 0004 0001             		move.b	#4,1(a0)
000102B8 117C 0010 0019             		move.b	#$10,$19(a0)
000102BE 117C 0004 0018             		move.b	#4,$18(a0)
000102C4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000102CA                            
000102CA                            Obj51_Solid:				; XREF: Obj51_Index
000102CA 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
000102D0 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
000102D6 323C 001B                  		move.w	#$1B,d1
000102DA 343C 0010                  		move.w	#$10,d2
000102DE 363C 0011                  		move.w	#$11,d3
000102E2 3828 0008                  		move.w	8(a0),d4
000102E6 6100 FCEC                  		bsr.w	SolidObject
000102EA 0828 0003 0022             		btst	#3,$22(a0)
000102F0 6600                       		bne.s	Obj51_Smash
000102F2                            
000102F2                            locret_FCFC:
000102F2 4E75                       		rts	
000102F4                            ; ===========================================================================
000102F4                            
000102F4                            Obj51_Smash:				; XREF: Obj51_Solid
000102F4 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000102FA 66F6                       		bne.s	locret_FCFC	; if not, branch
000102FC 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010302 08E9 0002 0022             		bset	#2,$22(a1)
00010308 137C 000E 0016             		move.b	#$E,$16(a1)
0001030E 137C 0007 0017             		move.b	#7,$17(a1)
00010314 137C 0002 001C             		move.b	#2,$1C(a1)
0001031A 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010320 08E9 0001 0022             		bset	#1,$22(a1)
00010326 08A9 0003 0022             		bclr	#3,$22(a1)
0001032C 137C 0002 0024             		move.b	#2,$24(a1)
00010332 08A8 0003 0022             		bclr	#3,$22(a0)
00010338 4228 0025                  		clr.b	$25(a0)
0001033C 117C 0001 001A             		move.b	#1,$1A(a0)
00010342 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010348 7203                       		moveq	#3,d1		; set number of	fragments to 4
0001034A 343C 0038                  		move.w	#$38,d2
0001034E 6100 D4A2                  		bsr.w	SmashObject
00010352 6100 DD36                  		bsr.w	SingleObjLoad
00010356 6600                       		bne.s	Obj51_Display
00010358 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001035C 3368 0008 0008             		move.w	8(a0),8(a1)
00010362 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010368 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0001036C 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010370 0C42 0006                  		cmpi.w	#6,d2
00010374 6500                       		bcs.s	Obj51_Bonus
00010376 7406                       		moveq	#6,d2
00010378                            
00010378                            Obj51_Bonus:
00010378 7000                       		moveq	#0,d0
0001037A 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001037E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010384 6500                       		bcs.s	loc_FD98	; if not, branch
00010386 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001038A 740A                       		moveq	#10,d2
0001038C                            
0001038C                            loc_FD98:
0001038C 4EB9 0000 0000             		jsr	AddPoints
00010392 E24A                       		lsr.w	#1,d2
00010394 1342 001A                  		move.b	d2,$1A(a1)
00010398                            
00010398                            Obj51_Display:				; XREF: Obj51_Index
00010398 6100 D844                  		bsr.w	SpeedToPos
0001039C 0668 0038 0012             		addi.w	#$38,$12(a0)
000103A2 6100 D860                  		bsr.w	DisplaySprite
000103A6 4A28 0001                  		tst.b	1(a0)
000103AA 6A00 D894                  		bpl.w	DeleteObject
000103AE 4E75                       		rts	
000103B0                            ; ===========================================================================
000103B0 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
000103B4 FF00 FF00                  		dc.w $FF00, $FF00
000103B8 0200 FE00                  		dc.w $200, $FE00
000103BC 0100 FF00                  		dc.w $100, $FF00
000103C0                            
000103C0 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
000103C8                            ; ---------------------------------------------------------------------------
000103C8                            ; Sprite mappings - smashable green block (MZ)
000103C8                            ; ---------------------------------------------------------------------------
000103C8                            Map_obj51:
000103C8                            	include "_maps\obj51.asm"
000103C8                            ; ---------------------------------------------------------------------------
000103C8                            ; Sprite mappings - smashable green block (MZ)
000103C8                            ; ---------------------------------------------------------------------------
000103C8 0000                       		dc.w byte_FDD8-Map_obj51
000103CA 0000                       		dc.w byte_FDE3-Map_obj51
000103CC 02                         byte_FDD8:	dc.b 2
000103CD F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
000103D2 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
000103D7 04                         byte_FDE3:	dc.b 4
000103D8 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
000103DD 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000103E2 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000103E7 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000103EC                            		even
000103EC                            		even
000103EC                            
000103EC                            ; ===========================================================================
000103EC                            ; ---------------------------------------------------------------------------
000103EC                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000103EC                            ; ---------------------------------------------------------------------------
000103EC                            
000103EC                            Obj52:					; XREF: Obj_Index
000103EC 7000                       		moveq	#0,d0
000103EE 1028 0024                  		move.b	$24(a0),d0
000103F2 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000103F6 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000103FA                            ; ===========================================================================
000103FA 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000103FC 0000                       		dc.w Obj52_Platform-Obj52_Index
000103FE 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010400                            
00010400 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010402 2001                       		dc.b $20, 1
00010404 2002                       		dc.b $20, 2
00010406 4003                       		dc.b $40, 3
00010408 3004                       		dc.b $30, 4
0001040A                            ; ===========================================================================
0001040A                            
0001040A                            Obj52_Main:				; XREF: Obj52_Index
0001040A 5428 0024                  		addq.b	#2,$24(a0)
0001040E 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010416 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001041C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010422 6600                       		bne.s	loc_FE44
00010424 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0001042C 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010432 117C 0007 0016             		move.b	#7,$16(a0)
00010438                            
00010438                            loc_FE44:
00010438 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001043E 6600                       		bne.s	loc_FE60
00010440 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010446 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0001044C 6700                       		beq.s	loc_FE60	; if yes, branch
0001044E 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010454                            
00010454                            loc_FE60:
00010454 117C 0004 0001             		move.b	#4,1(a0)
0001045A 7000                       		moveq	#0,d0
0001045C 1028 0028                  		move.b	$28(a0),d0
00010460 E648                       		lsr.w	#3,d0
00010462 0240 001E                  		andi.w	#$1E,d0
00010466 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001046A 115A 0019                  		move.b	(a2)+,$19(a0)
0001046E 115A 001A                  		move.b	(a2)+,$1A(a0)
00010472 117C 0004 0018             		move.b	#4,$18(a0)
00010478 3168 0008 0030             		move.w	8(a0),$30(a0)
0001047E 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010484 0228 000F 0028             		andi.b	#$F,$28(a0)
0001048A                            
0001048A                            Obj52_Platform:				; XREF: Obj52_Index
0001048A 6100 0000                  		bsr.w	Obj52_Move
0001048E 7200                       		moveq	#0,d1
00010490 1228 0019                  		move.b	$19(a0),d1
00010494 4EB9 0000 792A             		jsr	(PlatformObject).l
0001049A 6000                       		bra.s	Obj52_ChkDel
0001049C                            ; ===========================================================================
0001049C                            
0001049C                            Obj52_StandOn:				; XREF: Obj52_Index
0001049C 7200                       		moveq	#0,d1
0001049E 1228 0019                  		move.b	$19(a0),d1
000104A2 4EB9 0000 7A9E             		jsr	(ExitPlatform).l
000104A8 3F28 0008                  		move.w	8(a0),-(sp)
000104AC 6100 0000                  		bsr.w	Obj52_Move
000104B0 341F                       		move.w	(sp)+,d2
000104B2 4EB9 0000 8008             		jsr	(MvSonicOnPtfm2).l
000104B8                            
000104B8                            Obj52_ChkDel:				; XREF: Obj52_Platform
000104B8 3028 0030                  		move.w	$30(a0),d0
000104BC 0240 FF80                  		andi.w	#$FF80,d0
000104C0 3238 F700                  		move.w	($FFFFF700).w,d1
000104C4 0441 0080                  		subi.w	#$80,d1
000104C8 0241 FF80                  		andi.w	#$FF80,d1
000104CC 9041                       		sub.w	d1,d0
000104CE 0C40 0280                  		cmpi.w	#$280,d0
000104D2 6200 D76C                  		bhi.w	DeleteObject
000104D6 6000 D72C                  		bra.w	DisplaySprite
000104DA                            ; ===========================================================================
000104DA                            
000104DA                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
000104DA 7000                       		moveq	#0,d0
000104DC 1028 0028                  		move.b	$28(a0),d0
000104E0 0240 000F                  		andi.w	#$F,d0
000104E4 D040                       		add.w	d0,d0
000104E6 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000104EA 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000104EE                            ; ===========================================================================
000104EE 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000104F2 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000104F6 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000104FA 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000104FE 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010502 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010504                            ; ===========================================================================
00010504                            
00010504                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010504 4E75                       		rts	
00010506                            ; ===========================================================================
00010506                            
00010506                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010506 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001050A 323C 0060                  		move.w	#$60,d1
0001050E 0828 0000 0022             		btst	#0,$22(a0)
00010514 6700                       		beq.s	loc_FF26
00010516 4440                       		neg.w	d0
00010518 D041                       		add.w	d1,d0
0001051A                            
0001051A                            loc_FF26:
0001051A 3228 0030                  		move.w	$30(a0),d1
0001051E 9240                       		sub.w	d0,d1
00010520 3141 0008                  		move.w	d1,8(a0)
00010524 4E75                       		rts	
00010526                            ; ===========================================================================
00010526                            
00010526                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010526 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0001052C 6600                       		bne.s	Obj52_02_Wait
0001052E 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010532                            
00010532                            Obj52_02_Wait:
00010532 4E75                       		rts	
00010534                            ; ===========================================================================
00010534                            
00010534                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010534 7600                       		moveq	#0,d3
00010536 1628 0019                  		move.b	$19(a0),d3
0001053A 6100 0000                  		bsr.w	ObjHitWallRight
0001053E 4A41                       		tst.w	d1		; has the platform hit a wall?
00010540 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010542 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010546 3168 0008 0030             		move.w	8(a0),$30(a0)
0001054C 4E75                       		rts	
0001054E                            ; ===========================================================================
0001054E                            
0001054E                            Obj52_03_End:
0001054E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010552 4E75                       		rts	
00010554                            ; ===========================================================================
00010554                            
00010554                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010554 7600                       		moveq	#0,d3
00010556 1628 0019                  		move.b	$19(a0),d3
0001055A 6100 0000                  		bsr.w	ObjHitWallRight
0001055E 4A41                       		tst.w	d1		; has the platform hit a wall?
00010560 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010562 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010566 3168 0008 0030             		move.w	8(a0),$30(a0)
0001056C 4E75                       		rts	
0001056E                            ; ===========================================================================
0001056E                            
0001056E                            Obj52_05_End:
0001056E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010572 4E75                       		rts	
00010574                            ; ===========================================================================
00010574                            
00010574                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010574 6100 D668                  		bsr.w	SpeedToPos
00010578 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0001057E 6100 0000                  		bsr.w	ObjHitFloor
00010582 4A41                       		tst.w	d1		; has platform hit the floor?
00010584 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010588 D368 000C                  		add.w	d1,$C(a0)
0001058C 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010590 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010594                            
00010594                            locret_FFA0:
00010594 4E75                       		rts	
00010596                            ; ===========================================================================
00010596                            
00010596                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010596 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001059A 6700                       		beq.s	Obj52_07_ChkDel
0001059C 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000105A0                            
000105A0                            Obj52_07_ChkDel:
000105A0 588F                       		addq.l	#4,sp
000105A2 3028 0030                  		move.w	$30(a0),d0
000105A6 0240 FF80                  		andi.w	#$FF80,d0
000105AA 3238 F700                  		move.w	($FFFFF700).w,d1
000105AE 0441 0080                  		subi.w	#$80,d1
000105B2 0241 FF80                  		andi.w	#$FF80,d1
000105B6 9041                       		sub.w	d1,d0
000105B8 0C40 0280                  		cmpi.w	#$280,d0
000105BC 6200 D682                  		bhi.w	DeleteObject
000105C0 4E75                       		rts	
000105C2                            ; ===========================================================================
000105C2                            
000105C2                            Obj52_Type08:				; XREF: Obj52_TypeIndex
000105C2 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000105C6 323C 0080                  		move.w	#$80,d1
000105CA 0828 0000 0022             		btst	#0,$22(a0)
000105D0 6700                       		beq.s	loc_FFE2
000105D2 4440                       		neg.w	d0
000105D4 D041                       		add.w	d1,d0
000105D6                            
000105D6                            loc_FFE2:
000105D6 3228 0032                  		move.w	$32(a0),d1
000105DA 9240                       		sub.w	d0,d1
000105DC 3141 000C                  		move.w	d1,$C(a0)
000105E0 4E75                       		rts	
000105E2                            ; ===========================================================================
000105E2                            
000105E2                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000105E2 7600                       		moveq	#0,d3
000105E4 1628 0019                  		move.b	$19(a0),d3
000105E8 D643                       		add.w	d3,d3
000105EA 7208                       		moveq	#8,d1
000105EC 0828 0000 0022             		btst	#0,$22(a0)
000105F2 6700                       		beq.s	loc_10004
000105F4 4441                       		neg.w	d1
000105F6 4443                       		neg.w	d3
000105F8                            
000105F8                            loc_10004:
000105F8 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000105FC 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000105FE 3028 0008                  		move.w	8(a0),d0
00010602 9068 0030                  		sub.w	$30(a0),d0
00010606 B043                       		cmp.w	d3,d0
00010608 6700                       		beq.s	Obj52_0A_Wait
0001060A D368 0008                  		add.w	d1,8(a0)	; move platform
0001060E 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010614 4E75                       		rts	
00010616                            ; ===========================================================================
00010616                            
00010616                            Obj52_0A_Wait:
00010616 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001061A 6600                       		bne.s	locret_1002E	; if time remains, branch
0001061C 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00010622                            
00010622                            locret_1002E:
00010622 4E75                       		rts	
00010624                            ; ===========================================================================
00010624                            
00010624                            Obj52_0A_Back:
00010624 3028 0008                  		move.w	8(a0),d0
00010628 9068 0030                  		sub.w	$30(a0),d0
0001062C 6700                       		beq.s	Obj52_0A_Reset
0001062E 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00010632 4E75                       		rts	
00010634                            ; ===========================================================================
00010634                            
00010634                            Obj52_0A_Reset:
00010634 4268 0036                  		clr.w	$36(a0)
00010638 5328 0028                  		subq.b	#1,$28(a0)
0001063C 4E75                       		rts	
0001063E                            ; ===========================================================================
0001063E                            ; ---------------------------------------------------------------------------
0001063E                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001063E                            ; ---------------------------------------------------------------------------
0001063E                            Map_obj52:
0001063E                            	include "_maps\obj52mz.asm"
0001063E                            ; ---------------------------------------------------------------------------
0001063E                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001063E                            ; ---------------------------------------------------------------------------
0001063E 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010642 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010646 0000                       		dc.w byte_1008F-Map_obj52
00010648 01                         byte_10054:	dc.b 1
00010649 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001064E 02                         byte_1005A:	dc.b 2
0001064F F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010654 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010659 04                         byte_10065:	dc.b 4
0001065A F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001065F 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010664 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010669 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001066E 04                         byte_1007A:	dc.b 4
0001066F F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010674 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010679 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001067E F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010683 03                         byte_1008F:	dc.b 3
00010684 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010689 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001068E F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010694 00                         		even
00010694 00                         		even
00010694                            
00010694                            ; ---------------------------------------------------------------------------
00010694                            ; Sprite mappings - moving block (LZ)
00010694                            ; ---------------------------------------------------------------------------
00010694                            Map_obj52a:
00010694                            	include "_maps\obj52lz.asm"
00010694                            ; ---------------------------------------------------------------------------
00010694                            ; Sprite mappings - moving block (LZ)
00010694                            ; ---------------------------------------------------------------------------
00010694 0000                       		dc.w byte_100A2-Map_obj52a
00010696 01                         byte_100A2:	dc.b 1
00010697 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001069C                            		even
0001069C                            		even
0001069C                            
0001069C                            ; ===========================================================================
0001069C                            ; ---------------------------------------------------------------------------
0001069C                            ; Object 55 - Basaran enemy (MZ)
0001069C                            ; ---------------------------------------------------------------------------
0001069C                            
0001069C                            Obj55:					; XREF: Obj_Index
0001069C 7000                       		moveq	#0,d0
0001069E 1028 0024                  		move.b	$24(a0),d0
000106A2 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000106A6 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000106AA                            ; ===========================================================================
000106AA 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000106AC 0000                       		dc.w Obj55_Action-Obj55_Index
000106AE                            ; ===========================================================================
000106AE                            
000106AE                            Obj55_Main:				; XREF: Obj55_Index
000106AE 5428 0024                  		addq.b	#2,$24(a0)
000106B2 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000106BA 317C 84B8 0002             		move.w	#$84B8,2(a0)
000106C0 117C 0004 0001             		move.b	#4,1(a0)
000106C6 117C 000C 0016             		move.b	#$C,$16(a0)
000106CC 117C 0002 0018             		move.b	#2,$18(a0)
000106D2 117C 000B 0020             		move.b	#$B,$20(a0)
000106D8 117C 0010 0019             		move.b	#$10,$19(a0)
000106DE                            
000106DE                            Obj55_Action:				; XREF: Obj55_Index
000106DE 7000                       		moveq	#0,d0
000106E0 1028 0025                  		move.b	$25(a0),d0
000106E4 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000106E8 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000106EC 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000106F2 6100 A5DA                  		bsr.w	AnimateSprite
000106F6 6000 F5B4                  		bra.w	MarkObjGone
000106FA                            ; ===========================================================================
000106FA 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000106FC 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000106FE 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010700 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010702                            ; ===========================================================================
00010702                            
00010702                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010702 343C 0080                  		move.w	#$80,d2
00010706 6100 0000                  		bsr.w	Obj55_ChkSonic
0001070A 6400                       		bcc.s	Obj55_NoDrop
0001070C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010710 3140 0036                  		move.w	d0,$36(a0)
00010714 9068 000C                  		sub.w	$C(a0),d0
00010718 6500                       		bcs.s	Obj55_NoDrop
0001071A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001071E 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00010720 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010724 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010726 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001072A D007                       		add.b	d7,d0
0001072C 0200 0007                  		andi.b	#7,d0
00010730 6600                       		bne.s	Obj55_NoDrop
00010732 117C 0001 001C             		move.b	#1,$1C(a0)
00010738 5428 0025                  		addq.b	#2,$25(a0)
0001073C                            
0001073C                            Obj55_NoDrop:
0001073C 4E75                       		rts	
0001073E                            ; ===========================================================================
0001073E                            
0001073E                            Obj55_DropFly:				; XREF: Obj55_Index2
0001073E 6100 D49E                  		bsr.w	SpeedToPos
00010742 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010748 343C 0080                  		move.w	#$80,d2
0001074C 6100 0000                  		bsr.w	Obj55_ChkSonic
00010750 3028 0036                  		move.w	$36(a0),d0
00010754 9068 000C                  		sub.w	$C(a0),d0
00010758 6500                       		bcs.s	Obj55_ChkDel
0001075A 0C40 0010                  		cmpi.w	#$10,d0
0001075E 6400                       		bcc.s	locret_10180
00010760 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010764 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001076A 117C 0002 001C             		move.b	#2,$1C(a0)
00010770 5428 0025                  		addq.b	#2,$25(a0)
00010774                            
00010774                            locret_10180:
00010774 4E75                       		rts	
00010776                            ; ===========================================================================
00010776                            
00010776                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010776 4A28 0001                  		tst.b	1(a0)
0001077A 6A00 D4C4                  		bpl.w	DeleteObject
0001077E 4E75                       		rts	
00010780                            ; ===========================================================================
00010780                            
00010780                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010780 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010784 0200 000F                  		andi.b	#$F,d0
00010788 6600                       		bne.s	loc_101A0
0001078A 303C 00C0                  		move.w	#$C0,d0
0001078E 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play flapping sound
00010794                            
00010794                            loc_101A0:
00010794 6100 D448                  		bsr.w	SpeedToPos
00010798 3038 D008                  		move.w	($FFFFD008).w,d0
0001079C 9068 0008                  		sub.w	8(a0),d0
000107A0 6400                       		bcc.s	loc_101B0
000107A2 4440                       		neg.w	d0
000107A4                            
000107A4                            loc_101B0:
000107A4 0C40 0080                  		cmpi.w	#$80,d0
000107A8 6500                       		bcs.s	locret_101C6
000107AA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000107AE D007                       		add.b	d7,d0
000107B0 0200 0007                  		andi.b	#7,d0
000107B4 6600                       		bne.s	locret_101C6
000107B6 5428 0025                  		addq.b	#2,$25(a0)
000107BA                            
000107BA                            locret_101C6:
000107BA 4E75                       		rts	
000107BC                            ; ===========================================================================
000107BC                            
000107BC                            Obj55_FlyUp:				; XREF: Obj55_Index2
000107BC 6100 D420                  		bsr.w	SpeedToPos
000107C0 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
000107C6 6100 0000                  		bsr.w	ObjHitCeiling
000107CA 4A41                       		tst.w	d1		; has basaran hit the ceiling?
000107CC 6A00                       		bpl.s	locret_101F4	; if not, branch
000107CE 9368 000C                  		sub.w	d1,$C(a0)
000107D2 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
000107D8 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
000107DC 4268 0012                  		clr.w	$12(a0)
000107E0 4228 001C                  		clr.b	$1C(a0)
000107E4 4228 0025                  		clr.b	$25(a0)
000107E8                            
000107E8                            locret_101F4:
000107E8 4E75                       		rts	
000107EA                            ; ===========================================================================
000107EA                            
000107EA                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000107EA 323C 0100                  		move.w	#$100,d1
000107EE 08E8 0000 0022             		bset	#0,$22(a0)
000107F4 3038 D008                  		move.w	($FFFFD008).w,d0
000107F8 9068 0008                  		sub.w	8(a0),d0
000107FC 6400                       		bcc.s	loc_10214
000107FE 4440                       		neg.w	d0
00010800 4441                       		neg.w	d1
00010802 08A8 0000 0022             		bclr	#0,$22(a0)
00010808                            
00010808                            loc_10214:
00010808 B042                       		cmp.w	d2,d0
0001080A 4E75                       		rts	
0001080C                            ; ===========================================================================
0001080C 6100 D3D0                  		bsr.w	SpeedToPos
00010810 6100 D3F2                  		bsr.w	DisplaySprite
00010814 4A28 0001                  		tst.b	1(a0)
00010818 6A00 D426                  		bpl.w	DeleteObject
0001081C 4E75                       		rts	
0001081E                            ; ===========================================================================
0001081E                            Ani_obj55:
0001081E                            	include "_anim\obj55.asm"
0001081E                            ; ---------------------------------------------------------------------------
0001081E                            ; Animation script - Basaran enemy
0001081E                            ; ---------------------------------------------------------------------------
0001081E 0000                       		dc.w byte_10230-Ani_obj55
00010820 0000                       		dc.w byte_10234-Ani_obj55
00010822 0000                       		dc.w byte_10238-Ani_obj55
00010824 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010828 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
0001082C 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010832                            		even
00010832                            		even
00010832                            
00010832                            ; ---------------------------------------------------------------------------
00010832                            ; Sprite mappings - Basaran enemy (MZ)
00010832                            ; ---------------------------------------------------------------------------
00010832                            Map_obj55:
00010832                            	include "_maps\obj55.asm"
00010832                            ; ---------------------------------------------------------------------------
00010832                            ; Sprite mappings - Basaran enemy (MZ)
00010832                            ; ---------------------------------------------------------------------------
00010832 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010836 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001083A 01                         byte_10246:	dc.b 1
0001083B F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010840 03                         byte_1024C:	dc.b 3
00010841 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010846 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0001084B 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010850 04                         byte_1025C:	dc.b 4
00010851 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010856 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
0001085B 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010860 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010865 04                         byte_10271:	dc.b 4
00010866 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0001086B 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010870 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010875 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0001087A                            		even
0001087A                            		even
0001087A                            
0001087A                            ; ===========================================================================
0001087A                            ; ---------------------------------------------------------------------------
0001087A                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0001087A                            ; ---------------------------------------------------------------------------
0001087A                            
0001087A                            Obj56:					; XREF: Obj_Index
0001087A 7000                       		moveq	#0,d0
0001087C 1028 0024                  		move.b	$24(a0),d0
00010880 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010884 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010888                            ; ===========================================================================
00010888 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001088A 0000                       		dc.w Obj56_Action-Obj56_Index
0001088C                            
0001088C 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001088E 2020                       		dc.b  $20, $20
00010890 1020                       		dc.b  $10, $20
00010892 201A                       		dc.b  $20, $1A
00010894 1027                       		dc.b  $10, $27
00010896 1010                       		dc.b  $10, $10
00010898 0820                       		dc.b	8, $20
0001089A 4010                       		dc.b  $40, $10
0001089C                            ; ===========================================================================
0001089C                            
0001089C                            Obj56_Main:				; XREF: Obj56_Index
0001089C 5428 0024                  		addq.b	#2,$24(a0)
000108A0 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000108A8 317C 4000 0002             		move.w	#$4000,2(a0)
000108AE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108B4 6600                       		bne.s	loc_102C8
000108B6 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
000108BC                            
000108BC                            loc_102C8:
000108BC 117C 0004 0001             		move.b	#4,1(a0)
000108C2 117C 0003 0018             		move.b	#3,$18(a0)
000108C8 7000                       		moveq	#0,d0
000108CA 1028 0028                  		move.b	$28(a0),d0
000108CE E648                       		lsr.w	#3,d0
000108D0 0240 000E                  		andi.w	#$E,d0
000108D4 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
000108D8 115A 0019                  		move.b	(a2)+,$19(a0)
000108DC 1152 0016                  		move.b	(a2),$16(a0)
000108E0 E248                       		lsr.w	#1,d0
000108E2 1140 001A                  		move.b	d0,$1A(a0)
000108E6 3168 0008 0034             		move.w	8(a0),$34(a0)
000108EC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000108F2 7000                       		moveq	#0,d0
000108F4 1012                       		move.b	(a2),d0
000108F6 D040                       		add.w	d0,d0
000108F8 3140 003A                  		move.w	d0,$3A(a0)
000108FC 7000                       		moveq	#0,d0
000108FE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010904 6700                       		beq.s	loc_10332
00010906 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001090A 0240 000F                  		andi.w	#$F,d0
0001090E 5140                       		subq.w	#8,d0
00010910 6500                       		bcs.s	loc_10332
00010912 E548                       		lsl.w	#2,d0
00010914 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010918 45F2 0000                  		lea	(a2,d0.w),a2
0001091C 4A52                       		tst.w	(a2)
0001091E 6A00                       		bpl.s	loc_10332
00010920 0868 0000 0022             		bchg	#0,$22(a0)
00010926                            
00010926                            loc_10332:
00010926 1028 0028                  		move.b	$28(a0),d0
0001092A 6A00                       		bpl.s	Obj56_Action
0001092C 0200 000F                  		andi.b	#$F,d0
00010930 1140 003C                  		move.b	d0,$3C(a0)
00010934 117C 0005 0028             		move.b	#5,$28(a0)
0001093A 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010940 6600                       		bne.s	Obj56_ChkGone
00010942 117C 000C 0028             		move.b	#$C,$28(a0)
00010948 317C 0080 003A             		move.w	#$80,$3A(a0)
0001094E                            
0001094E                            Obj56_ChkGone:
0001094E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010952 7000                       		moveq	#0,d0
00010954 1028 0023                  		move.b	$23(a0),d0
00010958 6700                       		beq.s	Obj56_Action
0001095A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010960 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010966 6700                       		beq.s	Obj56_Action
00010968 5228 0028                  		addq.b	#1,$28(a0)
0001096C 4268 003A                  		clr.w	$3A(a0)
00010970                            
00010970                            Obj56_Action:				; XREF: Obj56_Index
00010970 3F28 0008                  		move.w	8(a0),-(sp)
00010974 7000                       		moveq	#0,d0
00010976 1028 0028                  		move.b	$28(a0),d0	; get object type
0001097A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001097E D040                       		add.w	d0,d0
00010980 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010984 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010988 381F                       		move.w	(sp)+,d4
0001098A 4A28 0001                  		tst.b	1(a0)
0001098E 6A00                       		bpl.s	Obj56_ChkDel
00010990 7200                       		moveq	#0,d1
00010992 1228 0019                  		move.b	$19(a0),d1
00010996 0641 000B                  		addi.w	#$B,d1
0001099A 7400                       		moveq	#0,d2
0001099C 1428 0016                  		move.b	$16(a0),d2
000109A0 3602                       		move.w	d2,d3
000109A2 5243                       		addq.w	#1,d3
000109A4 6100 F62E                  		bsr.w	SolidObject
000109A8                            
000109A8                            Obj56_ChkDel:
000109A8 3028 0034                  		move.w	$34(a0),d0
000109AC 0240 FF80                  		andi.w	#$FF80,d0
000109B0 3238 F700                  		move.w	($FFFFF700).w,d1
000109B4 0441 0080                  		subi.w	#$80,d1
000109B8 0241 FF80                  		andi.w	#$FF80,d1
000109BC 9041                       		sub.w	d1,d0
000109BE 0C40 0280                  		cmpi.w	#$280,d0
000109C2 6200 D27C                  		bhi.w	DeleteObject
000109C6 6000 D23C                  		bra.w	DisplaySprite
000109CA                            ; ===========================================================================
000109CA 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
000109CE 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
000109D2 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
000109D6 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
000109DA 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
000109DE 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
000109E2 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
000109E6                            ; ===========================================================================
000109E6                            
000109E6                            Obj56_Type00:				; XREF: Obj56_TypeIndex
000109E6 4E75                       		rts	
000109E8                            ; ===========================================================================
000109E8                            
000109E8                            Obj56_Type01:				; XREF: Obj56_TypeIndex
000109E8 323C 0040                  		move.w	#$40,d1
000109EC 7000                       		moveq	#0,d0
000109EE 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109F2 6000                       		bra.s	Obj56_Move_LR
000109F4                            ; ===========================================================================
000109F4                            
000109F4                            Obj56_Type02:				; XREF: Obj56_TypeIndex
000109F4 323C 0080                  		move.w	#$80,d1
000109F8 7000                       		moveq	#0,d0
000109FA 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109FE                            
000109FE                            Obj56_Move_LR:
000109FE 0828 0000 0022             		btst	#0,$22(a0)
00010A04 6700                       		beq.s	loc_10416
00010A06 4440                       		neg.w	d0
00010A08 D041                       		add.w	d1,d0
00010A0A                            
00010A0A                            loc_10416:
00010A0A 3228 0034                  		move.w	$34(a0),d1
00010A0E 9240                       		sub.w	d0,d1
00010A10 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010A14 4E75                       		rts	
00010A16                            ; ===========================================================================
00010A16                            
00010A16                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010A16 323C 0040                  		move.w	#$40,d1
00010A1A 7000                       		moveq	#0,d0
00010A1C 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010A20 6000                       		bra.s	Obj56_Move_UD
00010A22                            ; ===========================================================================
00010A22                            
00010A22                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010A22 323C 0080                  		move.w	#$80,d1
00010A26 7000                       		moveq	#0,d0
00010A28 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010A2C                            
00010A2C                            Obj56_Move_UD:
00010A2C 0828 0000 0022             		btst	#0,$22(a0)
00010A32 6700                       		beq.s	loc_10444
00010A34 4440                       		neg.w	d0
00010A36 D041                       		add.w	d1,d0
00010A38                            
00010A38                            loc_10444:
00010A38 3228 0030                  		move.w	$30(a0),d1
00010A3C 9240                       		sub.w	d0,d1
00010A3E 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010A42 4E75                       		rts	
00010A44                            ; ===========================================================================
00010A44                            
00010A44                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010A44 4A28 0038                  		tst.b	$38(a0)
00010A48 6600                       		bne.s	loc_104A4
00010A4A 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A50 6600                       		bne.s	loc_1047A	; if not, branch
00010A52 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010A58 6600                       		bne.s	loc_1047A
00010A5A 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A5E 3038 D008                  		move.w	($FFFFD008).w,d0
00010A62 B068 0008                  		cmp.w	8(a0),d0
00010A66 6400                       		bcc.s	loc_1047A
00010A68 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010A6E                            
00010A6E                            loc_1047A:
00010A6E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A72 7000                       		moveq	#0,d0
00010A74 1028 003C                  		move.b	$3C(a0),d0
00010A78 0832 0000 0000             		btst	#0,(a2,d0.w)
00010A7E 6700                       		beq.s	loc_104AE
00010A80 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A86 6600                       		bne.s	loc_1049E	; if not, branch
00010A88 0C00 0003                  		cmpi.b	#3,d0
00010A8C 6600                       		bne.s	loc_1049E
00010A8E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A92                            
00010A92                            loc_1049E:
00010A92 117C 0001 0038             		move.b	#1,$38(a0)
00010A98                            
00010A98                            loc_104A4:
00010A98 4A68 003A                  		tst.w	$3A(a0)
00010A9C 6700                       		beq.s	loc_104C8
00010A9E 5568 003A                  		subq.w	#2,$3A(a0)
00010AA2                            
00010AA2                            loc_104AE:
00010AA2 3028 003A                  		move.w	$3A(a0),d0
00010AA6 0828 0000 0022             		btst	#0,$22(a0)
00010AAC 6700                       		beq.s	loc_104BC
00010AAE 4440                       		neg.w	d0
00010AB0                            
00010AB0                            loc_104BC:
00010AB0 3228 0030                  		move.w	$30(a0),d1
00010AB4 D240                       		add.w	d0,d1
00010AB6 3141 000C                  		move.w	d1,$C(a0)
00010ABA 4E75                       		rts	
00010ABC                            ; ===========================================================================
00010ABC                            
00010ABC                            loc_104C8:
00010ABC 5228 0028                  		addq.b	#1,$28(a0)
00010AC0 4228 0038                  		clr.b	$38(a0)
00010AC4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AC8 7000                       		moveq	#0,d0
00010ACA 1028 0023                  		move.b	$23(a0),d0
00010ACE 67D2                       		beq.s	loc_104AE
00010AD0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010AD6 60CA                       		bra.s	loc_104AE
00010AD8                            ; ===========================================================================
00010AD8                            
00010AD8                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010AD8 4A28 0038                  		tst.b	$38(a0)
00010ADC 6600                       		bne.s	loc_10500
00010ADE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010AE2 7000                       		moveq	#0,d0
00010AE4 1028 003C                  		move.b	$3C(a0),d0
00010AE8 4A32 0000                  		tst.b	(a2,d0.w)
00010AEC 6A00                       		bpl.s	loc_10512
00010AEE 117C 0001 0038             		move.b	#1,$38(a0)
00010AF4                            
00010AF4                            loc_10500:
00010AF4 7000                       		moveq	#0,d0
00010AF6 1028 0016                  		move.b	$16(a0),d0
00010AFA D040                       		add.w	d0,d0
00010AFC B068 003A                  		cmp.w	$3A(a0),d0
00010B00 6700                       		beq.s	loc_1052C
00010B02 5468 003A                  		addq.w	#2,$3A(a0)
00010B06                            
00010B06                            loc_10512:
00010B06 3028 003A                  		move.w	$3A(a0),d0
00010B0A 0828 0000 0022             		btst	#0,$22(a0)
00010B10 6700                       		beq.s	loc_10520
00010B12 4440                       		neg.w	d0
00010B14                            
00010B14                            loc_10520:
00010B14 3228 0030                  		move.w	$30(a0),d1
00010B18 D240                       		add.w	d0,d1
00010B1A 3141 000C                  		move.w	d1,$C(a0)
00010B1E 4E75                       		rts	
00010B20                            ; ===========================================================================
00010B20                            
00010B20                            loc_1052C:
00010B20 5328 0028                  		subq.b	#1,$28(a0)
00010B24 4228 0038                  		clr.b	$38(a0)
00010B28 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B2C 7000                       		moveq	#0,d0
00010B2E 1028 0023                  		move.b	$23(a0),d0
00010B32 67D2                       		beq.s	loc_10512
00010B34 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010B3A 60CA                       		bra.s	loc_10512
00010B3C                            ; ===========================================================================
00010B3C                            
00010B3C                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010B3C 4A28 0038                  		tst.b	$38(a0)
00010B40 6600                       		bne.s	loc_1055E
00010B42 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010B46 6700                       		beq.s	locret_10578
00010B48 117C 0001 0038             		move.b	#1,$38(a0)
00010B4E 4268 003A                  		clr.w	$3A(a0)
00010B52                            
00010B52                            loc_1055E:
00010B52 5268 0008                  		addq.w	#1,8(a0)
00010B56 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B5C 5268 003A                  		addq.w	#1,$3A(a0)
00010B60 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010B66 6600                       		bne.s	locret_10578
00010B68 4228 0028                  		clr.b	$28(a0)
00010B6C                            
00010B6C                            locret_10578:
00010B6C 4E75                       		rts	
00010B6E                            ; ===========================================================================
00010B6E                            
00010B6E                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010B6E 4A28 0038                  		tst.b	$38(a0)
00010B72 6600                       		bne.s	loc_10598
00010B74 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B78 7000                       		moveq	#0,d0
00010B7A 1028 003C                  		move.b	$3C(a0),d0
00010B7E 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B84 6700                       		beq.s	loc_105A2
00010B86 117C 0001 0038             		move.b	#1,$38(a0)
00010B8C                            
00010B8C                            loc_10598:
00010B8C 4A68 003A                  		tst.w	$3A(a0)
00010B90 6700                       		beq.s	loc_105C0
00010B92 5568 003A                  		subq.w	#2,$3A(a0)
00010B96                            
00010B96                            loc_105A2:
00010B96 3028 003A                  		move.w	$3A(a0),d0
00010B9A 0828 0000 0022             		btst	#0,$22(a0)
00010BA0 6700                       		beq.s	loc_105B4
00010BA2 4440                       		neg.w	d0
00010BA4 0640 0080                  		addi.w	#$80,d0
00010BA8                            
00010BA8                            loc_105B4:
00010BA8 3228 0034                  		move.w	$34(a0),d1
00010BAC D240                       		add.w	d0,d1
00010BAE 3141 0008                  		move.w	d1,8(a0)
00010BB2 4E75                       		rts	
00010BB4                            ; ===========================================================================
00010BB4                            
00010BB4                            loc_105C0:
00010BB4 5228 0028                  		addq.b	#1,$28(a0)
00010BB8 4228 0038                  		clr.b	$38(a0)
00010BBC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BC0 7000                       		moveq	#0,d0
00010BC2 1028 0023                  		move.b	$23(a0),d0
00010BC6 67CE                       		beq.s	loc_105A2
00010BC8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010BCE 60C6                       		bra.s	loc_105A2
00010BD0                            ; ===========================================================================
00010BD0                            
00010BD0                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010BD0 4A28 0038                  		tst.b	$38(a0)
00010BD4 6600                       		bne.s	loc_105F8
00010BD6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010BDA 7000                       		moveq	#0,d0
00010BDC 1028 003C                  		move.b	$3C(a0),d0
00010BE0 4A32 0000                  		tst.b	(a2,d0.w)
00010BE4 6A00                       		bpl.s	loc_10606
00010BE6 117C 0001 0038             		move.b	#1,$38(a0)
00010BEC                            
00010BEC                            loc_105F8:
00010BEC 303C 0080                  		move.w	#$80,d0
00010BF0 B068 003A                  		cmp.w	$3A(a0),d0
00010BF4 6700                       		beq.s	loc_10624
00010BF6 5468 003A                  		addq.w	#2,$3A(a0)
00010BFA                            
00010BFA                            loc_10606:
00010BFA 3028 003A                  		move.w	$3A(a0),d0
00010BFE 0828 0000 0022             		btst	#0,$22(a0)
00010C04 6700                       		beq.s	loc_10618
00010C06 4440                       		neg.w	d0
00010C08 0640 0080                  		addi.w	#$80,d0
00010C0C                            
00010C0C                            loc_10618:
00010C0C 3228 0034                  		move.w	$34(a0),d1
00010C10 D240                       		add.w	d0,d1
00010C12 3141 0008                  		move.w	d1,8(a0)
00010C16 4E75                       		rts	
00010C18                            ; ===========================================================================
00010C18                            
00010C18                            loc_10624:
00010C18 5328 0028                  		subq.b	#1,$28(a0)
00010C1C 4228 0038                  		clr.b	$38(a0)
00010C20 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C24 7000                       		moveq	#0,d0
00010C26 1028 0023                  		move.b	$23(a0),d0
00010C2A 67CE                       		beq.s	loc_10606
00010C2C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010C32 60C6                       		bra.s	loc_10606
00010C34                            ; ===========================================================================
00010C34                            
00010C34                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010C34 323C 0010                  		move.w	#$10,d1
00010C38 7000                       		moveq	#0,d0
00010C3A 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010C3E E248                       		lsr.w	#1,d0
00010C40 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010C44 6000                       		bra.s	Obj56_Move_Sqr
00010C46                            ; ===========================================================================
00010C46                            
00010C46                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010C46 323C 0030                  		move.w	#$30,d1
00010C4A 7000                       		moveq	#0,d0
00010C4C 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010C50 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010C54 6000                       		bra.s	Obj56_Move_Sqr
00010C56                            ; ===========================================================================
00010C56                            
00010C56                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010C56 323C 0050                  		move.w	#$50,d1
00010C5A 7000                       		moveq	#0,d0
00010C5C 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010C60 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010C64 6000                       		bra.s	Obj56_Move_Sqr
00010C66                            ; ===========================================================================
00010C66                            
00010C66                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010C66 323C 0070                  		move.w	#$70,d1
00010C6A 7000                       		moveq	#0,d0
00010C6C 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010C70 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010C74                            
00010C74                            Obj56_Move_Sqr:
00010C74 4A43                       		tst.w	d3
00010C76 6600                       		bne.s	loc_1068E
00010C78 5228 0022                  		addq.b	#1,$22(a0)
00010C7C 0228 0003 0022             		andi.b	#3,$22(a0)
00010C82                            
00010C82                            loc_1068E:
00010C82 1428 0022                  		move.b	$22(a0),d2
00010C86 0202 0003                  		andi.b	#3,d2
00010C8A 6600                       		bne.s	loc_106AE
00010C8C 9041                       		sub.w	d1,d0
00010C8E D068 0034                  		add.w	$34(a0),d0
00010C92 3140 0008                  		move.w	d0,8(a0)
00010C96 4441                       		neg.w	d1
00010C98 D268 0030                  		add.w	$30(a0),d1
00010C9C 3141 000C                  		move.w	d1,$C(a0)
00010CA0 4E75                       		rts	
00010CA2                            ; ===========================================================================
00010CA2                            
00010CA2                            loc_106AE:
00010CA2 5302                       		subq.b	#1,d2
00010CA4 6600                       		bne.s	loc_106CC
00010CA6 5341                       		subq.w	#1,d1
00010CA8 9041                       		sub.w	d1,d0
00010CAA 4440                       		neg.w	d0
00010CAC D068 0030                  		add.w	$30(a0),d0
00010CB0 3140 000C                  		move.w	d0,$C(a0)
00010CB4 5241                       		addq.w	#1,d1
00010CB6 D268 0034                  		add.w	$34(a0),d1
00010CBA 3141 0008                  		move.w	d1,8(a0)
00010CBE 4E75                       		rts	
00010CC0                            ; ===========================================================================
00010CC0                            
00010CC0                            loc_106CC:
00010CC0 5302                       		subq.b	#1,d2
00010CC2 6600                       		bne.s	loc_106EA
00010CC4 5341                       		subq.w	#1,d1
00010CC6 9041                       		sub.w	d1,d0
00010CC8 4440                       		neg.w	d0
00010CCA D068 0034                  		add.w	$34(a0),d0
00010CCE 3140 0008                  		move.w	d0,8(a0)
00010CD2 5241                       		addq.w	#1,d1
00010CD4 D268 0030                  		add.w	$30(a0),d1
00010CD8 3141 000C                  		move.w	d1,$C(a0)
00010CDC 4E75                       		rts	
00010CDE                            ; ===========================================================================
00010CDE                            
00010CDE                            loc_106EA:
00010CDE 9041                       		sub.w	d1,d0
00010CE0 D068 0030                  		add.w	$30(a0),d0
00010CE4 3140 000C                  		move.w	d0,$C(a0)
00010CE8 4441                       		neg.w	d1
00010CEA D268 0034                  		add.w	$34(a0),d1
00010CEE 3141 0008                  		move.w	d1,8(a0)
00010CF2 4E75                       		rts	
00010CF4                            ; ===========================================================================
00010CF4                            ; ---------------------------------------------------------------------------
00010CF4                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CF4                            ; ---------------------------------------------------------------------------
00010CF4                            Map_obj56:
00010CF4                            	include "_maps\obj56.asm"
00010CF4                            ; ---------------------------------------------------------------------------
00010CF4                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010CF4                            ; ---------------------------------------------------------------------------
00010CF4 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010CF8 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010CFC 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010D00 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010D04 01                         byte_10710:	dc.b 1
00010D05 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010D0A 04                         byte_10716:	dc.b 4
00010D0B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010D10 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010D15 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010D1A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010D1F 02                         byte_1072B:	dc.b 2
00010D20 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010D25 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010D2A 04                         byte_10736:	dc.b 4
00010D2B E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010D30 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010D35 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010D3A 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010D3F 03                         byte_1074B:	dc.b 3
00010D40 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010D45 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010D4A 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010D4F 01                         byte_1075B:	dc.b 1
00010D50 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010D55 02                         byte_10761:	dc.b 2
00010D56 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010D5B 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010D60 04                         byte_1076C:	dc.b 4
00010D61 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010D66 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010D6B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010D70 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010D76 00                         		even
00010D76 00                         		even
00010D76                            
00010D76                            ; ===========================================================================
00010D76                            ; ---------------------------------------------------------------------------
00010D76                            ; Object 57 - spiked balls (SYZ, LZ)
00010D76                            ; ---------------------------------------------------------------------------
00010D76                            
00010D76                            Obj57:					; XREF: Obj_Index
00010D76 7000                       		moveq	#0,d0
00010D78 1028 0024                  		move.b	$24(a0),d0
00010D7C 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010D80 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010D84                            ; ===========================================================================
00010D84 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010D86 0000                       		dc.w Obj57_Move-Obj57_Index
00010D88 0000                       		dc.w Obj57_Display-Obj57_Index
00010D8A                            ; ===========================================================================
00010D8A                            
00010D8A                            Obj57_Main:				; XREF: Obj57_Index
00010D8A 5428 0024                  		addq.b	#2,$24(a0)
00010D8E 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D96 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D9C 117C 0004 0001             		move.b	#4,1(a0)
00010DA2 117C 0004 0018             		move.b	#4,$18(a0)
00010DA8 117C 0008 0019             		move.b	#8,$19(a0)
00010DAE 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010DB4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010DBA 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010DC0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010DC6 6600                       		bne.s	loc_107E8
00010DC8 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010DCE 317C 0310 0002             		move.w	#$310,2(a0)
00010DD4 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010DDC                            
00010DDC                            loc_107E8:
00010DDC 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DE0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010DE4 4881                       		ext.w	d1
00010DE6 E741                       		asl.w	#3,d1		; multiply by 8
00010DE8 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010DEC 1028 0022                  		move.b	$22(a0),d0
00010DF0 E418                       		ror.b	#2,d0
00010DF2 0200 00C0                  		andi.b	#-$40,d0
00010DF6 1140 0026                  		move.b	d0,$26(a0)
00010DFA 45E8 0029                  		lea	$29(a0),a2
00010DFE 1228 0028                  		move.b	$28(a0),d1	; get object type
00010E02 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010E06 14FC 0000                  		move.b	#0,(a2)+
00010E0A 3601                       		move.w	d1,d3
00010E0C E94B                       		lsl.w	#4,d3
00010E0E 1143 003C                  		move.b	d3,$3C(a0)
00010E12 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010E14 6500                       		bcs.s	loc_10894
00010E16 0828 0003 0028             		btst	#3,$28(a0)
00010E1C 6700                       		beq.s	Obj57_MakeChain
00010E1E 5341                       		subq.w	#1,d1
00010E20 6500                       		bcs.s	loc_10894
00010E22                            
00010E22                            Obj57_MakeChain:
00010E22 6100 D266                  		bsr.w	SingleObjLoad
00010E26 6600                       		bne.s	loc_10894
00010E28 5228 0029                  		addq.b	#1,$29(a0)
00010E2C 3A09                       		move.w	a1,d5
00010E2E 0445 D000                  		subi.w	#-$3000,d5
00010E32 EC4D                       		lsr.w	#6,d5
00010E34 0245 007F                  		andi.w	#$7F,d5
00010E38 14C5                       		move.b	d5,(a2)+
00010E3A 137C 0004 0024             		move.b	#4,$24(a1)
00010E40 1290                       		move.b	0(a0),0(a1)
00010E42 2368 0004 0004             		move.l	4(a0),4(a1)
00010E48 3368 0002 0002             		move.w	2(a0),2(a1)
00010E4E 1368 0001 0001             		move.b	1(a0),1(a1)
00010E54 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010E5A 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010E60 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010E66 0403 0010                  		subi.b	#$10,d3
00010E6A 1343 003C                  		move.b	d3,$3C(a1)
00010E6E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010E74 6600                       		bne.s	loc_10890
00010E76 4A03                       		tst.b	d3
00010E78 6600                       		bne.s	loc_10890
00010E7A 137C 0002 001A             		move.b	#2,$1A(a1)
00010E80                            
00010E80                            loc_10890:
00010E80 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010E84                            
00010E84                            loc_10894:
00010E84 3A08                       		move.w	a0,d5
00010E86 0445 D000                  		subi.w	#-$3000,d5
00010E8A EC4D                       		lsr.w	#6,d5
00010E8C 0245 007F                  		andi.w	#$7F,d5
00010E90 14C5                       		move.b	d5,(a2)+
00010E92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E98 6600                       		bne.s	Obj57_Move
00010E9A 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010EA0 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010EA6                            
00010EA6                            Obj57_Move:				; XREF: Obj57_Index
00010EA6 6100 0000                  		bsr.w	Obj57_MoveSub
00010EAA 6000 0000                  		bra.w	Obj57_ChkDel
00010EAE                            ; ===========================================================================
00010EAE                            
00010EAE                            Obj57_MoveSub:				; XREF: Obj57_Move
00010EAE 3028 003E                  		move.w	$3E(a0),d0
00010EB2 D168 0026                  		add.w	d0,$26(a0)
00010EB6 1028 0026                  		move.b	$26(a0),d0
00010EBA 4EB9 0000 2C6A             		jsr	(CalcSine).l
00010EC0 3428 0038                  		move.w	$38(a0),d2
00010EC4 3628 003A                  		move.w	$3A(a0),d3
00010EC8 45E8 0029                  		lea	$29(a0),a2
00010ECC 7C00                       		moveq	#0,d6
00010ECE 1C1A                       		move.b	(a2)+,d6
00010ED0                            
00010ED0                            Obj57_MoveLoop:
00010ED0 7800                       		moveq	#0,d4
00010ED2 181A                       		move.b	(a2)+,d4
00010ED4 ED4C                       		lsl.w	#6,d4
00010ED6 0684 00FF D000             		addi.l	#$FFD000,d4
00010EDC 2244                       		movea.l	d4,a1
00010EDE 7800                       		moveq	#0,d4
00010EE0 1829 003C                  		move.b	$3C(a1),d4
00010EE4 2A04                       		move.l	d4,d5
00010EE6 C9C0                       		muls.w	d0,d4
00010EE8 E084                       		asr.l	#8,d4
00010EEA CBC1                       		muls.w	d1,d5
00010EEC E085                       		asr.l	#8,d5
00010EEE D842                       		add.w	d2,d4
00010EF0 DA43                       		add.w	d3,d5
00010EF2 3344 000C                  		move.w	d4,$C(a1)
00010EF6 3345 0008                  		move.w	d5,8(a1)
00010EFA 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010EFE 4E75                       		rts	
00010F00                            ; ===========================================================================
00010F00                            
00010F00                            Obj57_ChkDel:				; XREF: Obj57_Move
00010F00 3028 003A                  		move.w	$3A(a0),d0
00010F04 0240 FF80                  		andi.w	#$FF80,d0
00010F08 3238 F700                  		move.w	($FFFFF700).w,d1
00010F0C 0441 0080                  		subi.w	#$80,d1
00010F10 0241 FF80                  		andi.w	#$FF80,d1
00010F14 9041                       		sub.w	d1,d0
00010F16 0C40 0280                  		cmpi.w	#$280,d0
00010F1A 6200 0000                  		bhi.w	Obj57_Delete
00010F1E 6000 CCE4                  		bra.w	DisplaySprite
00010F22                            ; ===========================================================================
00010F22                            
00010F22                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010F22 7400                       		moveq	#0,d2
00010F24 45E8 0029                  		lea	$29(a0),a2
00010F28 141A                       		move.b	(a2)+,d2
00010F2A                            
00010F2A                            Obj57_DelLoop:
00010F2A 7000                       		moveq	#0,d0
00010F2C 101A                       		move.b	(a2)+,d0
00010F2E ED48                       		lsl.w	#6,d0
00010F30 0680 00FF D000             		addi.l	#$FFD000,d0
00010F36 2240                       		movea.l	d0,a1
00010F38 6100 CD08                  		bsr.w	DeleteObject2
00010F3C 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010F40                            
00010F40 4E75                       		rts	
00010F42                            ; ===========================================================================
00010F42                            
00010F42                            Obj57_Display:				; XREF: Obj57_Index
00010F42 6000 CCC0                  		bra.w	DisplaySprite
00010F46                            ; ===========================================================================
00010F46                            ; ---------------------------------------------------------------------------
00010F46                            ; Sprite mappings - chain of spiked balls (SYZ)
00010F46                            ; ---------------------------------------------------------------------------
00010F46                            Map_obj57:
00010F46                            	include "_maps\obj57syz.asm"
00010F46                            ; ---------------------------------------------------------------------------
00010F46                            ; Sprite mappings - chain of spiked balls (SYZ)
00010F46                            ; ---------------------------------------------------------------------------
00010F46 0000                       		dc.w byte_10958-Map_obj57
00010F48 01                         byte_10958:	dc.b 1
00010F49 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F4E                            		even
00010F4E                            		even
00010F4E                            
00010F4E                            ; ---------------------------------------------------------------------------
00010F4E                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010F4E                            ; ---------------------------------------------------------------------------
00010F4E                            Map_obj57a:
00010F4E                            	include "_maps\obj57lz.asm"
00010F4E                            ; ---------------------------------------------------------------------------
00010F4E                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010F4E                            ; ---------------------------------------------------------------------------
00010F4E 0000                       		dc.w byte_10964-Map_obj57a
00010F50 0000                       		dc.w byte_1096A-Map_obj57a
00010F52 0000                       		dc.w byte_10970-Map_obj57a
00010F54 01                         byte_10964:	dc.b 1
00010F55 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010F5A 01                         byte_1096A:	dc.b 1
00010F5B F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010F60 01                         byte_10970:	dc.b 1
00010F61 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010F66                            		even
00010F66                            		even
00010F66                            
00010F66                            ; ===========================================================================
00010F66                            ; ---------------------------------------------------------------------------
00010F66                            ; Object 58 - giant spiked balls (SYZ)
00010F66                            ; ---------------------------------------------------------------------------
00010F66                            
00010F66                            Obj58:					; XREF: Obj_Index
00010F66 7000                       		moveq	#0,d0
00010F68 1028 0024                  		move.b	$24(a0),d0
00010F6C 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010F70 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010F74                            ; ===========================================================================
00010F74 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010F76 0000                       		dc.w Obj58_Move-Obj58_Index
00010F78                            ; ===========================================================================
00010F78                            
00010F78                            Obj58_Main:				; XREF: Obj58_Index
00010F78 5428 0024                  		addq.b	#2,$24(a0)
00010F7C 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010F84 317C 0396 0002             		move.w	#$396,2(a0)
00010F8A 117C 0004 0001             		move.b	#4,1(a0)
00010F90 117C 0004 0018             		move.b	#4,$18(a0)
00010F96 117C 0018 0019             		move.b	#$18,$19(a0)
00010F9C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010FA2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010FA8 117C 0086 0020             		move.b	#$86,$20(a0)
00010FAE 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FB2 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010FB6 4881                       		ext.w	d1
00010FB8 E741                       		asl.w	#3,d1		; multiply by 8
00010FBA 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010FBE 1028 0022                  		move.b	$22(a0),d0
00010FC2 E418                       		ror.b	#2,d0
00010FC4 0200 00C0                  		andi.b	#$C0,d0
00010FC8 1140 0026                  		move.b	d0,$26(a0)
00010FCC 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010FD2                            
00010FD2                            Obj58_Move:				; XREF: Obj58_Index
00010FD2 7000                       		moveq	#0,d0
00010FD4 1028 0028                  		move.b	$28(a0),d0	; get object type
00010FD8 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010FDC D040                       		add.w	d0,d0
00010FDE 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010FE2 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010FE6 3028 003A                  		move.w	$3A(a0),d0
00010FEA 0240 FF80                  		andi.w	#$FF80,d0
00010FEE 3238 F700                  		move.w	($FFFFF700).w,d1
00010FF2 0441 0080                  		subi.w	#$80,d1
00010FF6 0241 FF80                  		andi.w	#$FF80,d1
00010FFA 9041                       		sub.w	d1,d0
00010FFC 0C40 0280                  		cmpi.w	#$280,d0
00011000 6200 CC3E                  		bhi.w	DeleteObject
00011004 6000 CBFE                  		bra.w	DisplaySprite
00011008                            ; ===========================================================================
00011008 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
0001100A 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
0001100C 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001100E 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011010                            ; ===========================================================================
00011010                            
00011010                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011010 4E75                       		rts	
00011012                            ; ===========================================================================
00011012                            
00011012                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011012 323C 0060                  		move.w	#$60,d1
00011016 7000                       		moveq	#0,d0
00011018 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001101C 0828 0000 0022             		btst	#0,$22(a0)
00011022 6700                       		beq.s	loc_10A38
00011024 4440                       		neg.w	d0
00011026 D041                       		add.w	d1,d0
00011028                            
00011028                            loc_10A38:
00011028 3228 003A                  		move.w	$3A(a0),d1
0001102C 9240                       		sub.w	d0,d1
0001102E 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011032 4E75                       		rts	
00011034                            ; ===========================================================================
00011034                            
00011034                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011034 323C 0060                  		move.w	#$60,d1
00011038 7000                       		moveq	#0,d0
0001103A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001103E 0828 0000 0022             		btst	#0,$22(a0)
00011044 6700                       		beq.s	loc_10A5C
00011046 4440                       		neg.w	d0
00011048 0640 0080                  		addi.w	#$80,d0
0001104C                            
0001104C                            loc_10A5C:
0001104C 3228 0038                  		move.w	$38(a0),d1
00011050 9240                       		sub.w	d0,d1
00011052 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011056 4E75                       		rts	
00011058                            ; ===========================================================================
00011058                            
00011058                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011058 3028 003E                  		move.w	$3E(a0),d0
0001105C D168 0026                  		add.w	d0,$26(a0)
00011060 1028 0026                  		move.b	$26(a0),d0
00011064 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001106A 3428 0038                  		move.w	$38(a0),d2
0001106E 3628 003A                  		move.w	$3A(a0),d3
00011072 7800                       		moveq	#0,d4
00011074 1828 003C                  		move.b	$3C(a0),d4
00011078 2A04                       		move.l	d4,d5
0001107A C9C0                       		muls.w	d0,d4
0001107C E084                       		asr.l	#8,d4
0001107E CBC1                       		muls.w	d1,d5
00011080 E085                       		asr.l	#8,d5
00011082 D842                       		add.w	d2,d4
00011084 DA43                       		add.w	d3,d5
00011086 3144 000C                  		move.w	d4,$C(a0)
0001108A 3145 0008                  		move.w	d5,8(a0)
0001108E 4E75                       		rts	
00011090                            ; ===========================================================================
00011090                            ; ---------------------------------------------------------------------------
00011090                            ; Sprite mappings - SBZ	spiked ball on a chain
00011090                            ; ---------------------------------------------------------------------------
00011090                            Map_obj15b:
00011090                            	include "_maps\obj15sbz.asm"
00011090                            ; ---------------------------------------------------------------------------
00011090                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011090                            ; ---------------------------------------------------------------------------
00011090 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011094 0000                       		dc.w byte_10AC6-Map_obj15b
00011096 05                         byte_10AA6:	dc.b 5
00011097 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001109C F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000110A1 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
000110A6 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
000110AB 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000110B0 01                         byte_10AC0:	dc.b 1
000110B1 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
000110B6 02                         byte_10AC6:	dc.b 2
000110B7 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
000110BC E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000110C2 00                         		even
000110C2 00                         		even
000110C2                            
000110C2                            ; ===========================================================================
000110C2                            ; ---------------------------------------------------------------------------
000110C2                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000110C2                            ; ---------------------------------------------------------------------------
000110C2                            
000110C2                            Obj59:					; XREF: Obj_Index
000110C2 7000                       		moveq	#0,d0
000110C4 1028 0024                  		move.b	$24(a0),d0
000110C8 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
000110CC 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
000110D0 3028 0032                  		move.w	$32(a0),d0
000110D4 0240 FF80                  		andi.w	#$FF80,d0
000110D8 3238 F700                  		move.w	($FFFFF700).w,d1
000110DC 0441 0080                  		subi.w	#$80,d1
000110E0 0241 FF80                  		andi.w	#$FF80,d1
000110E4 9041                       		sub.w	d1,d0
000110E6 0C40 0280                  		cmpi.w	#$280,d0
000110EA 6200 CB54                  		bhi.w	DeleteObject
000110EE 6000 CB14                  		bra.w	DisplaySprite
000110F2                            ; ===========================================================================
000110F2 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000110F4 0000                       		dc.w Obj59_Platform-Obj59_Index
000110F6 0000                       		dc.w Obj59_Action-Obj59_Index
000110F8 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000110FA                            
000110FA 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000110FC                            
000110FC 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000110FE 2001                       		dc.b $20, 1
00011100 3401                       		dc.b $34, 1
00011102 1003                       		dc.b $10, 3
00011104 2003                       		dc.b $20, 3
00011106 3403                       		dc.b $34, 3
00011108 1401                       		dc.b $14, 1
0001110A 2401                       		dc.b $24, 1
0001110C 2C01                       		dc.b $2C, 1
0001110E 1403                       		dc.b $14, 3
00011110 2403                       		dc.b $24, 3
00011112 2C03                       		dc.b $2C, 3
00011114 2005                       		dc.b $20, 5
00011116 2007                       		dc.b $20, 7
00011118 3009                       		dc.b $30, 9
0001111A                            ; ===========================================================================
0001111A                            
0001111A                            Obj59_Main:				; XREF: Obj59_Index
0001111A 5428 0024                  		addq.b	#2,$24(a0)
0001111E 7000                       		moveq	#0,d0
00011120 1028 0028                  		move.b	$28(a0),d0
00011124 6A00                       		bpl.s	Obj59_Main2
00011126 5828 0024                  		addq.b	#4,$24(a0)
0001112A 0240 007F                  		andi.w	#$7F,d0
0001112E C0FC 0006                  		mulu.w	#6,d0
00011132 3140 003C                  		move.w	d0,$3C(a0)
00011136 3140 003E                  		move.w	d0,$3E(a0)
0001113A 588F                       		addq.l	#4,sp
0001113C 4E75                       		rts	
0001113E                            ; ===========================================================================
0001113E                            
0001113E                            Obj59_Main2:
0001113E E648                       		lsr.w	#3,d0
00011140 0240 001E                  		andi.w	#$1E,d0
00011144 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011148 115A 0019                  		move.b	(a2)+,$19(a0)
0001114C 115A 001A                  		move.b	(a2)+,$1A(a0)
00011150 7000                       		moveq	#0,d0
00011152 1028 0028                  		move.b	$28(a0),d0
00011156 D040                       		add.w	d0,d0
00011158 0240 001E                  		andi.w	#$1E,d0
0001115C 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011160 101A                       		move.b	(a2)+,d0
00011162 E548                       		lsl.w	#2,d0
00011164 3140 003C                  		move.w	d0,$3C(a0)
00011168 115A 0028                  		move.b	(a2)+,$28(a0)
0001116C 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011174 317C 4000 0002             		move.w	#$4000,2(a0)
0001117A 117C 0004 0001             		move.b	#4,1(a0)
00011180 117C 0004 0018             		move.b	#4,$18(a0)
00011186 3168 0008 0032             		move.w	8(a0),$32(a0)
0001118C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011192                            
00011192                            Obj59_Platform:				; XREF: Obj59_Index
00011192 7200                       		moveq	#0,d1
00011194 1228 0019                  		move.b	$19(a0),d1
00011198 4EB9 0000 792A             		jsr	(PlatformObject).l
0001119E 6000 0000                  		bra.w	Obj59_Types
000111A2                            ; ===========================================================================
000111A2                            
000111A2                            Obj59_Action:				; XREF: Obj59_Index
000111A2 7200                       		moveq	#0,d1
000111A4 1228 0019                  		move.b	$19(a0),d1
000111A8 4EB9 0000 7A9E             		jsr	(ExitPlatform).l
000111AE 3F28 0008                  		move.w	8(a0),-(sp)
000111B2 6100 0000                  		bsr.w	Obj59_Types
000111B6 341F                       		move.w	(sp)+,d2
000111B8 4A10                       		tst.b	0(a0)
000111BA 6700                       		beq.s	locret_10BD4
000111BC 4EF9 0000 8008             		jmp	(MvSonicOnPtfm2).l
000111C2                            ; ===========================================================================
000111C2                            
000111C2                            locret_10BD4:
000111C2 4E75                       		rts	
000111C4                            ; ===========================================================================
000111C4                            
000111C4                            Obj59_Types:
000111C4 7000                       		moveq	#0,d0
000111C6 1028 0028                  		move.b	$28(a0),d0
000111CA 0240 000F                  		andi.w	#$F,d0
000111CE D040                       		add.w	d0,d0
000111D0 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
000111D4 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
000111D8                            ; ===========================================================================
000111D8 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111DC 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111E0 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111E4 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000111E8 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000111EC                            ; ===========================================================================
000111EC                            
000111EC                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000111EC 4E75                       		rts	
000111EE                            ; ===========================================================================
000111EE                            
000111EE                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000111EE 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000111F4 6600                       		bne.s	locret_10C0C
000111F6 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000111FA                            
000111FA                            locret_10C0C:
000111FA 4E75                       		rts	
000111FC                            ; ===========================================================================
000111FC                            
000111FC                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000111FC 6100 0000                  		bsr.w	Obj59_Move
00011200 3028 0034                  		move.w	$34(a0),d0
00011204 4440                       		neg.w	d0
00011206 D068 0030                  		add.w	$30(a0),d0
0001120A 3140 000C                  		move.w	d0,$C(a0)
0001120E 4E75                       		rts	
00011210                            ; ===========================================================================
00011210                            
00011210                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011210 6100 0000                  		bsr.w	Obj59_Move
00011214 3028 0034                  		move.w	$34(a0),d0
00011218 D068 0030                  		add.w	$30(a0),d0
0001121C 3140 000C                  		move.w	d0,$C(a0)
00011220 4E75                       		rts	
00011222                            ; ===========================================================================
00011222                            
00011222                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011222 6100 0000                  		bsr.w	Obj59_Move
00011226 3028 0034                  		move.w	$34(a0),d0
0001122A E240                       		asr.w	#1,d0
0001122C 4440                       		neg.w	d0
0001122E D068 0030                  		add.w	$30(a0),d0
00011232 3140 000C                  		move.w	d0,$C(a0)
00011236 3028 0034                  		move.w	$34(a0),d0
0001123A D068 0032                  		add.w	$32(a0),d0
0001123E 3140 0008                  		move.w	d0,8(a0)
00011242 4E75                       		rts	
00011244                            ; ===========================================================================
00011244                            
00011244                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011244 6100 0000                  		bsr.w	Obj59_Move
00011248 3028 0034                  		move.w	$34(a0),d0
0001124C E240                       		asr.w	#1,d0
0001124E D068 0030                  		add.w	$30(a0),d0
00011252 3140 000C                  		move.w	d0,$C(a0)
00011256 3028 0034                  		move.w	$34(a0),d0
0001125A 4440                       		neg.w	d0
0001125C D068 0032                  		add.w	$32(a0),d0
00011260 3140 0008                  		move.w	d0,8(a0)
00011264 4E75                       		rts	
00011266                            ; ===========================================================================
00011266                            
00011266                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011266 6100 0000                  		bsr.w	Obj59_Move
0001126A 3028 0034                  		move.w	$34(a0),d0
0001126E 4440                       		neg.w	d0
00011270 D068 0030                  		add.w	$30(a0),d0
00011274 3140 000C                  		move.w	d0,$C(a0)
00011278 4A28 0028                  		tst.b	$28(a0)
0001127C 6700 0000                  		beq.w	loc_10C94
00011280 4E75                       		rts	
00011282                            ; ===========================================================================
00011282                            
00011282                            loc_10C94:
00011282 0828 0003 0022             		btst	#3,$22(a0)
00011288 6700                       		beq.s	Obj59_Delete
0001128A 08E9 0001 0022             		bset	#1,$22(a1)
00011290 08A9 0003 0022             		bclr	#3,$22(a1)
00011296 137C 0002 0024             		move.b	#2,$24(a1)
0001129C                            
0001129C                            Obj59_Delete:
0001129C 6000 C9A2                  		bra.w	DeleteObject
000112A0                            
000112A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000112A0                            
000112A0                            
000112A0                            Obj59_Move:				; XREF: Obj59_Type02; et al
000112A0 3028 0038                  		move.w	$38(a0),d0
000112A4 4A28 003A                  		tst.b	$3A(a0)
000112A8 6600                       		bne.s	loc_10CC8
000112AA 0C40 0800                  		cmpi.w	#$800,d0
000112AE 6400                       		bcc.s	loc_10CD0
000112B0 0640 0010                  		addi.w	#$10,d0
000112B4 6000                       		bra.s	loc_10CD0
000112B6                            ; ===========================================================================
000112B6                            
000112B6                            loc_10CC8:
000112B6 4A40                       		tst.w	d0
000112B8 6700                       		beq.s	loc_10CD0
000112BA 0440 0010                  		subi.w	#$10,d0
000112BE                            
000112BE                            loc_10CD0:
000112BE 3140 0038                  		move.w	d0,$38(a0)
000112C2 48C0                       		ext.l	d0
000112C4 E180                       		asl.l	#8,d0
000112C6 D0A8 0034                  		add.l	$34(a0),d0
000112CA 2140 0034                  		move.l	d0,$34(a0)
000112CE 4840                       		swap	d0
000112D0 3428 003C                  		move.w	$3C(a0),d2
000112D4 B042                       		cmp.w	d2,d0
000112D6 6300                       		bls.s	loc_10CF0
000112D8 117C 0001 003A             		move.b	#1,$3A(a0)
000112DE                            
000112DE                            loc_10CF0:
000112DE D442                       		add.w	d2,d2
000112E0 B042                       		cmp.w	d2,d0
000112E2 6600                       		bne.s	locret_10CFA
000112E4 4228 0028                  		clr.b	$28(a0)
000112E8                            
000112E8                            locret_10CFA:
000112E8 4E75                       		rts	
000112EA                            ; End of function Obj59_Move
000112EA                            
000112EA                            ; ===========================================================================
000112EA                            
000112EA                            Obj59_MakeMulti:			; XREF: Obj59_Index
000112EA 5368 003C                  		subq.w	#1,$3C(a0)
000112EE 6600                       		bne.s	Obj59_ChkDel
000112F0 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000112F6 6100 CD92                  		bsr.w	SingleObjLoad
000112FA 6600                       		bne.s	Obj59_ChkDel
000112FC 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011300 3368 0008 0008             		move.w	8(a0),8(a1)
00011306 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001130C 137C 000E 0028             		move.b	#$E,$28(a1)
00011312                            
00011312                            Obj59_ChkDel:
00011312 588F                       		addq.l	#4,sp
00011314 3028 0008                  		move.w	8(a0),d0
00011318 0240 FF80                  		andi.w	#$FF80,d0
0001131C 3238 F700                  		move.w	($FFFFF700).w,d1
00011320 0441 0080                  		subi.w	#$80,d1
00011324 0241 FF80                  		andi.w	#$FF80,d1
00011328 9041                       		sub.w	d1,d0
0001132A 0C40 0280                  		cmpi.w	#$280,d0
0001132E 6200 C910                  		bhi.w	DeleteObject
00011332 4E75                       		rts	
00011334                            ; ===========================================================================
00011334                            ; ---------------------------------------------------------------------------
00011334                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011334                            ; ---------------------------------------------------------------------------
00011334                            Map_obj59:
00011334                            	include "_maps\obj59.asm"
00011334                            ; ---------------------------------------------------------------------------
00011334                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011334                            ; ---------------------------------------------------------------------------
00011334 0000                       		dc.w byte_10D4A-Map_obj59
00011336 03                         byte_10D4A:	dc.b 3
00011337 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
0001133C F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011341 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011346                            		even
00011346                            		even
00011346                            
00011346                            ; ===========================================================================
00011346                            ; ---------------------------------------------------------------------------
00011346                            ; Object 5A - platforms	moving in circles (SLZ)
00011346                            ; ---------------------------------------------------------------------------
00011346                            
00011346                            Obj5A:					; XREF: Obj_Index
00011346 7000                       		moveq	#0,d0
00011348 1028 0024                  		move.b	$24(a0),d0
0001134C 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011350 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011354 3028 0032                  		move.w	$32(a0),d0
00011358 0240 FF80                  		andi.w	#$FF80,d0
0001135C 3238 F700                  		move.w	($FFFFF700).w,d1
00011360 0441 0080                  		subi.w	#$80,d1
00011364 0241 FF80                  		andi.w	#$FF80,d1
00011368 9041                       		sub.w	d1,d0
0001136A 0C40 0280                  		cmpi.w	#$280,d0
0001136E 6200 C8D0                  		bhi.w	DeleteObject
00011372 6000 C890                  		bra.w	DisplaySprite
00011376                            ; ===========================================================================
00011376 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011378 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001137A 0000                       		dc.w Obj5A_Action-Obj5A_Index
0001137C                            ; ===========================================================================
0001137C                            
0001137C                            Obj5A_Main:				; XREF: Obj5A_Index
0001137C 5428 0024                  		addq.b	#2,$24(a0)
00011380 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011388 317C 4000 0002             		move.w	#$4000,2(a0)
0001138E 117C 0004 0001             		move.b	#4,1(a0)
00011394 117C 0004 0018             		move.b	#4,$18(a0)
0001139A 117C 0018 0019             		move.b	#$18,$19(a0)
000113A0 3168 0008 0032             		move.w	8(a0),$32(a0)
000113A6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000113AC                            
000113AC                            Obj5A_Platform:				; XREF: Obj5A_Index
000113AC 7200                       		moveq	#0,d1
000113AE 1228 0019                  		move.b	$19(a0),d1
000113B2 4EB9 0000 792A             		jsr	(PlatformObject).l
000113B8 6000 0000                  		bra.w	Obj5A_Types
000113BC                            ; ===========================================================================
000113BC                            
000113BC                            Obj5A_Action:				; XREF: Obj5A_Index
000113BC 7200                       		moveq	#0,d1
000113BE 1228 0019                  		move.b	$19(a0),d1
000113C2 4EB9 0000 7A9E             		jsr	(ExitPlatform).l
000113C8 3F28 0008                  		move.w	8(a0),-(sp)
000113CC 6100 0000                  		bsr.w	Obj5A_Types
000113D0 341F                       		move.w	(sp)+,d2
000113D2 4EF9 0000 8008             		jmp	(MvSonicOnPtfm2).l
000113D8                            ; ===========================================================================
000113D8                            
000113D8                            Obj5A_Types:
000113D8 7000                       		moveq	#0,d0
000113DA 1028 0028                  		move.b	$28(a0),d0
000113DE 0240 000C                  		andi.w	#$C,d0
000113E2 E248                       		lsr.w	#1,d0
000113E4 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000113E8 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000113EC                            ; ===========================================================================
000113EC 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000113EE 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000113F0                            ; ===========================================================================
000113F0                            
000113F0                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000113F0 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113F4 0401 0050                  		subi.b	#$50,d1
000113F8 4881                       		ext.w	d1
000113FA 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113FE 0402 0050                  		subi.b	#$50,d2
00011402 4882                       		ext.w	d2
00011404 0828 0000 0028             		btst	#0,$28(a0)
0001140A 6700                       		beq.s	loc_10E24
0001140C 4441                       		neg.w	d1
0001140E 4442                       		neg.w	d2
00011410                            
00011410                            loc_10E24:
00011410 0828 0001 0028             		btst	#1,$28(a0)
00011416 6700                       		beq.s	loc_10E30
00011418 4441                       		neg.w	d1
0001141A C342                       		exg	d1,d2
0001141C                            
0001141C                            loc_10E30:
0001141C D268 0032                  		add.w	$32(a0),d1
00011420 3141 0008                  		move.w	d1,8(a0)
00011424 D468 0030                  		add.w	$30(a0),d2
00011428 3142 000C                  		move.w	d2,$C(a0)
0001142C 4E75                       		rts	
0001142E                            ; ===========================================================================
0001142E                            
0001142E                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001142E 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011432 0401 0050                  		subi.b	#$50,d1
00011436 4881                       		ext.w	d1
00011438 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001143C 0402 0050                  		subi.b	#$50,d2
00011440 4882                       		ext.w	d2
00011442 0828 0000 0028             		btst	#0,$28(a0)
00011448 6700                       		beq.s	loc_10E62
0001144A 4441                       		neg.w	d1
0001144C 4442                       		neg.w	d2
0001144E                            
0001144E                            loc_10E62:
0001144E 0828 0001 0028             		btst	#1,$28(a0)
00011454 6700                       		beq.s	loc_10E6E
00011456 4441                       		neg.w	d1
00011458 C342                       		exg	d1,d2
0001145A                            
0001145A                            loc_10E6E:
0001145A 4441                       		neg.w	d1
0001145C D268 0032                  		add.w	$32(a0),d1
00011460 3141 0008                  		move.w	d1,8(a0)
00011464 D468 0030                  		add.w	$30(a0),d2
00011468 3142 000C                  		move.w	d2,$C(a0)
0001146C 4E75                       		rts	
0001146E                            ; ===========================================================================
0001146E                            ; ---------------------------------------------------------------------------
0001146E                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001146E                            ; ---------------------------------------------------------------------------
0001146E                            Map_obj5A:
0001146E                            	include "_maps\obj5A.asm"
0001146E                            ; ---------------------------------------------------------------------------
0001146E                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001146E                            ; ---------------------------------------------------------------------------
0001146E 0000                       		dc.w byte_10E84-Map_obj5A
00011470 02                         byte_10E84:	dc.b 2
00011471 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011476 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001147C 00                         		even
0001147C 00                         		even
0001147C                            
0001147C                            ; ===========================================================================
0001147C                            ; ---------------------------------------------------------------------------
0001147C                            ; Object 5B - blocks that form a staircase (SLZ)
0001147C                            ; ---------------------------------------------------------------------------
0001147C                            
0001147C                            Obj5B:					; XREF: Obj_Index
0001147C 7000                       		moveq	#0,d0
0001147E 1028 0024                  		move.b	$24(a0),d0
00011482 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011486 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001148A 3028 0030                  		move.w	$30(a0),d0
0001148E 0240 FF80                  		andi.w	#$FF80,d0
00011492 3238 F700                  		move.w	($FFFFF700).w,d1
00011496 0441 0080                  		subi.w	#$80,d1
0001149A 0241 FF80                  		andi.w	#$FF80,d1
0001149E 9041                       		sub.w	d1,d0
000114A0 0C40 0280                  		cmpi.w	#$280,d0
000114A4 6200 C79A                  		bhi.w	DeleteObject
000114A8 6000 C75A                  		bra.w	DisplaySprite
000114AC                            ; ===========================================================================
000114AC 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
000114AE 0000                       		dc.w Obj5B_Move-Obj5B_Index
000114B0 0000                       		dc.w Obj5B_Solid-Obj5B_Index
000114B2                            ; ===========================================================================
000114B2                            
000114B2                            Obj5B_Main:				; XREF: Obj5B_Index
000114B2 5428 0024                  		addq.b	#2,$24(a0)
000114B6 7638                       		moveq	#$38,d3
000114B8 7801                       		moveq	#1,d4
000114BA 0828 0000 0022             		btst	#0,$22(a0)
000114C0 6700                       		beq.s	loc_10EDA
000114C2 763B                       		moveq	#$3B,d3
000114C4 78FF                       		moveq	#-1,d4
000114C6                            
000114C6                            loc_10EDA:
000114C6 3428 0008                  		move.w	8(a0),d2
000114CA 2248                       		movea.l	a0,a1
000114CC 7203                       		moveq	#3,d1
000114CE 6000                       		bra.s	Obj5B_MakeBlocks
000114D0                            ; ===========================================================================
000114D0                            
000114D0                            Obj5B_Loop:
000114D0 6100 CBCE                  		bsr.w	SingleObjLoad2
000114D4 6600 0000                  		bne.w	Obj5B_Move
000114D8 137C 0004 0024             		move.b	#4,$24(a1)
000114DE                            
000114DE                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
000114DE 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000114E2 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000114EA 337C 4000 0002             		move.w	#$4000,2(a1)
000114F0 137C 0004 0001             		move.b	#4,1(a1)
000114F6 137C 0003 0018             		move.b	#3,$18(a1)
000114FC 137C 0010 0019             		move.b	#$10,$19(a1)
00011502 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011508 3342 0008                  		move.w	d2,8(a1)
0001150C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011512 3368 0008 0030             		move.w	8(a0),$30(a1)
00011518 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001151E 0642 0020                  		addi.w	#$20,d2
00011522 1343 0037                  		move.b	d3,$37(a1)
00011526 2348 003C                  		move.l	a0,$3C(a1)
0001152A D604                       		add.b	d4,d3
0001152C 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00011530                            
00011530                            Obj5B_Move:				; XREF: Obj5B_Index
00011530 7000                       		moveq	#0,d0
00011532 1028 0028                  		move.b	$28(a0),d0
00011536 0240 0007                  		andi.w	#7,d0
0001153A D040                       		add.w	d0,d0
0001153C 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00011540 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011544                            
00011544                            Obj5B_Solid:				; XREF: Obj5B_Index
00011544 2468 003C                  		movea.l	$3C(a0),a2
00011548 7000                       		moveq	#0,d0
0001154A 1028 0037                  		move.b	$37(a0),d0
0001154E 1032 0000                  		move.b	(a2,d0.w),d0
00011552 D068 0032                  		add.w	$32(a0),d0
00011556 3140 000C                  		move.w	d0,$C(a0)
0001155A 7200                       		moveq	#0,d1
0001155C 1228 0019                  		move.b	$19(a0),d1
00011560 0641 000B                  		addi.w	#$B,d1
00011564 343C 0010                  		move.w	#$10,d2
00011568 363C 0011                  		move.w	#$11,d3
0001156C 3828 0008                  		move.w	8(a0),d4
00011570 6100 EA62                  		bsr.w	SolidObject
00011574 4A04                       		tst.b	d4
00011576 6A00                       		bpl.s	loc_10F92
00011578 1544 0036                  		move.b	d4,$36(a2)
0001157C                            
0001157C                            loc_10F92:
0001157C 0828 0003 0022             		btst	#3,$22(a0)
00011582 6700                       		beq.s	locret_10FA0
00011584 157C 0001 0036             		move.b	#1,$36(a2)
0001158A                            
0001158A                            locret_10FA0:
0001158A 4E75                       		rts	
0001158C                            ; ===========================================================================
0001158C 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001158E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011590 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011592 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011594                            ; ===========================================================================
00011594                            
00011594                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011594 4A68 0034                  		tst.w	$34(a0)
00011598 6600                       		bne.s	loc_10FC0
0001159A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000115A0 6600                       		bne.s	locret_10FBE
000115A2 317C 001E 0034             		move.w	#$1E,$34(a0)
000115A8                            
000115A8                            locret_10FBE:
000115A8 4E75                       		rts	
000115AA                            ; ===========================================================================
000115AA                            
000115AA                            loc_10FC0:
000115AA 5368 0034                  		subq.w	#1,$34(a0)
000115AE 66F8                       		bne.s	locret_10FBE
000115B0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000115B4 4E75                       		rts	
000115B6                            ; ===========================================================================
000115B6                            
000115B6                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000115B6 4A68 0034                  		tst.w	$34(a0)
000115BA 6600                       		bne.s	loc_10FE0
000115BC 4A28 0036                  		tst.b	$36(a0)
000115C0 6A00                       		bpl.s	locret_10FDE
000115C2 317C 003C 0034             		move.w	#$3C,$34(a0)
000115C8                            
000115C8                            locret_10FDE:
000115C8 4E75                       		rts	
000115CA                            ; ===========================================================================
000115CA                            
000115CA                            loc_10FE0:
000115CA 5368 0034                  		subq.w	#1,$34(a0)
000115CE 6600                       		bne.s	loc_10FEC
000115D0 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000115D4 4E75                       		rts	
000115D6                            ; ===========================================================================
000115D6                            
000115D6                            loc_10FEC:
000115D6 43E8 0038                  		lea	$38(a0),a1
000115DA 3028 0034                  		move.w	$34(a0),d0
000115DE E408                       		lsr.b	#2,d0
000115E0 0200 0001                  		andi.b	#1,d0
000115E4 12C0                       		move.b	d0,(a1)+
000115E6 0A00 0001                  		eori.b	#1,d0
000115EA 12C0                       		move.b	d0,(a1)+
000115EC 0A00 0001                  		eori.b	#1,d0
000115F0 12C0                       		move.b	d0,(a1)+
000115F2 0A00 0001                  		eori.b	#1,d0
000115F6 12C0                       		move.b	d0,(a1)+
000115F8 4E75                       		rts	
000115FA                            ; ===========================================================================
000115FA                            
000115FA                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000115FA 43E8 0038                  		lea	$38(a0),a1
000115FE 0C11 0080                  		cmpi.b	#$80,(a1)
00011602 6700                       		beq.s	locret_11038
00011604 5211                       		addq.b	#1,(a1)
00011606 7200                       		moveq	#0,d1
00011608 1219                       		move.b	(a1)+,d1
0001160A 4841                       		swap	d1
0001160C E289                       		lsr.l	#1,d1
0001160E 2401                       		move.l	d1,d2
00011610 E289                       		lsr.l	#1,d1
00011612 2601                       		move.l	d1,d3
00011614 D682                       		add.l	d2,d3
00011616 4841                       		swap	d1
00011618 4842                       		swap	d2
0001161A 4843                       		swap	d3
0001161C 12C3                       		move.b	d3,(a1)+
0001161E 12C2                       		move.b	d2,(a1)+
00011620 12C1                       		move.b	d1,(a1)+
00011622                            
00011622                            locret_11038:
00011622 4E75                       		rts	
00011624 4E75                       		rts	
00011626                            ; ===========================================================================
00011626                            ; ---------------------------------------------------------------------------
00011626                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011626                            ; ---------------------------------------------------------------------------
00011626                            Map_obj5B:
00011626                            	include "_maps\obj5B.asm"
00011626                            ; ---------------------------------------------------------------------------
00011626                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011626                            ; ---------------------------------------------------------------------------
00011626 0000                       		dc.w byte_1103E-Map_obj5B
00011628 01                         byte_1103E:	dc.b 1
00011629 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001162E                            		even
0001162E                            		even
0001162E                            
0001162E                            ; ===========================================================================
0001162E                            ; ---------------------------------------------------------------------------
0001162E                            ; Object 5C - metal girders in foreground (SLZ)
0001162E                            ; ---------------------------------------------------------------------------
0001162E                            
0001162E                            Obj5C:					; XREF: Obj_Index
0001162E 7000                       		moveq	#0,d0
00011630 1028 0024                  		move.b	$24(a0),d0
00011634 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011638 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
0001163C                            ; ===========================================================================
0001163C 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001163E 0000                       		dc.w Obj5C_Display-Obj5C_Index
00011640                            ; ===========================================================================
00011640                            
00011640                            Obj5C_Main:				; XREF: Obj5C_Index
00011640 5428 0024                  		addq.b	#2,$24(a0)
00011644 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001164C 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011652 117C 0010 0019             		move.b	#$10,$19(a0)
00011658                            
00011658                            Obj5C_Display:				; XREF: Obj5C_Index
00011658 2238 F700                  		move.l	($FFFFF700).w,d1
0001165C D281                       		add.l	d1,d1
0001165E 4841                       		swap	d1
00011660 4441                       		neg.w	d1
00011662 3141 0008                  		move.w	d1,8(a0)
00011666 2238 F704                  		move.l	($FFFFF704).w,d1
0001166A D281                       		add.l	d1,d1
0001166C 4841                       		swap	d1
0001166E 0241 003F                  		andi.w	#$3F,d1
00011672 4441                       		neg.w	d1
00011674 0641 0100                  		addi.w	#$100,d1
00011678 3141 000A                  		move.w	d1,$A(a0)
0001167C 6000 C586                  		bra.w	DisplaySprite
00011680                            ; ===========================================================================
00011680                            ; ---------------------------------------------------------------------------
00011680                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011680                            ; ---------------------------------------------------------------------------
00011680                            Map_obj5C:
00011680                            	include "_maps\obj5C.asm"
00011680                            ; ---------------------------------------------------------------------------
00011680                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011680                            ; ---------------------------------------------------------------------------
00011680 0000                       		dc.w byte_11098-Map_obj5C
00011682 09                         byte_11098:	dc.b 9
00011683 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011688 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001168D C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011692 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011697 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001169C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000116A1 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000116A6 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000116AB 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000116B0                            		even
000116B0                            		even
000116B0                            
000116B0                            ; ===========================================================================
000116B0                            ; ---------------------------------------------------------------------------
000116B0                            ; Object 1B - water surface (LZ)
000116B0                            ; ---------------------------------------------------------------------------
000116B0                            
000116B0                            Obj1B:					; XREF: Obj_Index
000116B0 7000                       		moveq	#0,d0
000116B2 1028 0024                  		move.b	$24(a0),d0
000116B6 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000116BA 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
000116BE                            ; ===========================================================================
000116BE 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
000116C0 0000                       		dc.w Obj1B_Action-Obj1B_Index
000116C2                            ; ===========================================================================
000116C2                            
000116C2                            Obj1B_Main:				; XREF: Obj1B_Index
000116C2 5428 0024                  		addq.b	#2,$24(a0)
000116C6 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
000116CE 317C C300 0002             		move.w	#$C300,2(a0)
000116D4 117C 0004 0001             		move.b	#4,1(a0)
000116DA 117C 0080 0019             		move.b	#$80,$19(a0)
000116E0 3168 0008 0030             		move.w	8(a0),$30(a0)
000116E6                            
000116E6                            Obj1B_Action:				; XREF: Obj1B_Index
000116E6 3238 F700                  		move.w	($FFFFF700).w,d1
000116EA 0241 FFE0                  		andi.w	#$FFE0,d1
000116EE D268 0030                  		add.w	$30(a0),d1
000116F2 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000116F8 6700                       		beq.s	loc_11114
000116FA 0641 0020                  		addi.w	#$20,d1
000116FE                            
000116FE                            loc_11114:
000116FE 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011702 3238 F646                  		move.w	($FFFFF646).w,d1
00011706 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001170A 4A28 0032                  		tst.b	$32(a0)
0001170E 6600                       		bne.s	Obj1B_Animate
00011710 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011716 6700                       		beq.s	loc_1114A	; if not, branch
00011718 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001171C 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00011722 6000                       		bra.s	Obj1B_Display
00011724                            ; ===========================================================================
00011724                            
00011724                            Obj1B_Animate:				; XREF: loc_11114
00011724 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011728 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001172A 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00011730 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011734                            
00011734                            loc_1114A:				; XREF: loc_11114
00011734 5328 001E                  		subq.b	#1,$1E(a0)
00011738 6A00                       		bpl.s	Obj1B_Display
0001173A 117C 0007 001E             		move.b	#7,$1E(a0)
00011740 5228 001A                  		addq.b	#1,$1A(a0)
00011744 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001174A 6500                       		bcs.s	Obj1B_Display
0001174C 117C 0000 001A             		move.b	#0,$1A(a0)
00011752                            
00011752                            Obj1B_Display:
00011752 6000 C4B0                  		bra.w	DisplaySprite
00011756                            ; ===========================================================================
00011756                            ; ---------------------------------------------------------------------------
00011756                            ; Sprite mappings - water surface (LZ)
00011756                            ; ---------------------------------------------------------------------------
00011756                            Map_obj1B:
00011756                            	include "_maps\obj1B.asm"
00011756                            ; ---------------------------------------------------------------------------
00011756                            ; Sprite mappings - water surface (LZ)
00011756                            ; ---------------------------------------------------------------------------
00011756 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001175A 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001175E 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011762 03                         byte_11178:	dc.b 3
00011763 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011768 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001176D FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011772 03                         byte_11188:	dc.b 3
00011773 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011778 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001177D FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011782 03                         byte_11198:	dc.b 3
00011783 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011788 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001178D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011792 06                         byte_111A8:	dc.b 6
00011793 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011798 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001179D FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000117A2 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000117A7 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000117AC FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000117B1 06                         byte_111C7:	dc.b 6
000117B2 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000117B7 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000117BC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000117C1 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000117C6 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000117CB FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000117D0 06                         byte_111E6:	dc.b 6
000117D1 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000117D6 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000117DB FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000117E0 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000117E5 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000117EA FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000117F0 00                         		even
000117F0 00                         		even
000117F0                            
000117F0                            ; ===========================================================================
000117F0                            ; ---------------------------------------------------------------------------
000117F0                            ; Object 0B - pole that	breaks (LZ)
000117F0                            ; ---------------------------------------------------------------------------
000117F0                            
000117F0                            Obj0B:					; XREF: Obj_Index
000117F0 7000                       		moveq	#0,d0
000117F2 1028 0024                  		move.b	$24(a0),d0
000117F6 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000117FA 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000117FE                            ; ===========================================================================
000117FE 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011800 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011802 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011804                            ; ===========================================================================
00011804                            
00011804                            Obj0B_Main:				; XREF: Obj0B_Index
00011804 5428 0024                  		addq.b	#2,$24(a0)
00011808 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011810 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011816 117C 0004 0001             		move.b	#4,1(a0)
0001181C 117C 0008 0019             		move.b	#8,$19(a0)
00011822 117C 0004 0018             		move.b	#4,$18(a0)
00011828 117C 00E1 0020             		move.b	#$E1,$20(a0)
0001182E 7000                       		moveq	#0,d0
00011830 1028 0028                  		move.b	$28(a0),d0	; get object type
00011834 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011838 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
0001183C                            
0001183C                            Obj0B_Action:				; XREF: Obj0B_Index
0001183C 4A28 0032                  		tst.b	$32(a0)
00011840 6700                       		beq.s	Obj0B_Grab
00011842 4A68 0030                  		tst.w	$30(a0)
00011846 6700                       		beq.s	Obj0B_MoveUp
00011848 5368 0030                  		subq.w	#1,$30(a0)
0001184C 6600                       		bne.s	Obj0B_MoveUp
0001184E 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011854 6000                       		bra.s	Obj0B_Release
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011856 43F8 D000                  		lea	($FFFFD000).w,a1
0001185A 3028 000C                  		move.w	$C(a0),d0
0001185E 0440 0018                  		subi.w	#$18,d0
00011862 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011868 6700                       		beq.s	Obj0B_MoveDown
0001186A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0001186E B069 000C                  		cmp.w	$C(a1),d0
00011872 6500                       		bcs.s	Obj0B_MoveDown
00011874 3340 000C                  		move.w	d0,$C(a1)
00011878                            
00011878                            Obj0B_MoveDown:
00011878 0640 0024                  		addi.w	#$24,d0
0001187C 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011882 6700                       		beq.s	Obj0B_LetGo
00011884 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011888 B069 000C                  		cmp.w	$C(a1),d0
0001188C 6400                       		bcc.s	Obj0B_LetGo
0001188E 3340 000C                  		move.w	d0,$C(a1)
00011892                            
00011892                            Obj0B_LetGo:
00011892 1038 F603                  		move.b	($FFFFF603).w,d0
00011896 0240 0070                  		andi.w	#$70,d0
0001189A 6700                       		beq.s	Obj0B_Display
0001189C                            
0001189C                            Obj0B_Release:				; XREF: Obj0B_Action
0001189C 4228 0020                  		clr.b	$20(a0)
000118A0 5428 0024                  		addq.b	#2,$24(a0)
000118A4 4238 F7C8                  		clr.b	($FFFFF7C8).w
000118A8 4238 F7C9                  		clr.b	($FFFFF7C9).w
000118AC 4228 0032                  		clr.b	$32(a0)
000118B0 6000                       		bra.s	Obj0B_Display
000118B2                            ; ===========================================================================
000118B2                            
000118B2                            Obj0B_Grab:				; XREF: Obj0B_Action
000118B2 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000118B6 6700                       		beq.s	Obj0B_Display	; if not, branch
000118B8 43F8 D000                  		lea	($FFFFD000).w,a1
000118BC 3028 0008                  		move.w	8(a0),d0
000118C0 0640 0014                  		addi.w	#$14,d0
000118C4 B069 0008                  		cmp.w	8(a1),d0
000118C8 6400                       		bcc.s	Obj0B_Display
000118CA 4228 0021                  		clr.b	$21(a0)
000118CE 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000118D4 6400                       		bcc.s	Obj0B_Display
000118D6 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
000118DA 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
000118DE 3028 0008                  		move.w	8(a0),d0
000118E2 0640 0014                  		addi.w	#$14,d0
000118E6 3340 0008                  		move.w	d0,8(a1)
000118EA 08A9 0000 0022             		bclr	#0,$22(a1)
000118F0 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
000118F6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000118FC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011902 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011908                            
00011908                            Obj0B_Display:				; XREF: Obj0B_Index
00011908 6000 E3A2                  		bra.w	MarkObjGone
0001190C                            ; ===========================================================================
0001190C                            ; ---------------------------------------------------------------------------
0001190C                            ; Sprite mappings - pole that breaks (LZ)
0001190C                            ; ---------------------------------------------------------------------------
0001190C                            Map_obj0B:
0001190C                            	include "_maps\obj0B.asm"
0001190C                            ; ---------------------------------------------------------------------------
0001190C                            ; Sprite mappings - pole that breaks (LZ)
0001190C                            ; ---------------------------------------------------------------------------
0001190C 0000                       		dc.w byte_11326-Map_obj0B
0001190E 0000                       		dc.w byte_11331-Map_obj0B
00011910 02                         byte_11326:	dc.b 2			; normal pole
00011911 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011916 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001191B 04                         byte_11331:	dc.b 4			; broken pole
0001191C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011921 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011926 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001192B 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011930                            		even
00011930                            		even
00011930                            
00011930                            ; ===========================================================================
00011930                            ; ---------------------------------------------------------------------------
00011930                            ; Object 0C - flapping door (LZ)
00011930                            ; ---------------------------------------------------------------------------
00011930                            
00011930                            Obj0C:					; XREF: Obj_Index
00011930 7000                       		moveq	#0,d0
00011932 1028 0024                  		move.b	$24(a0),d0
00011936 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001193A 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
0001193E                            ; ===========================================================================
0001193E 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011940 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011942                            ; ===========================================================================
00011942                            
00011942                            Obj0C_Main:				; XREF: Obj0C_Index
00011942 5428 0024                  		addq.b	#2,$24(a0)
00011946 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
0001194E 317C 4328 0002             		move.w	#$4328,2(a0)
00011954 0028 0004 0001             		ori.b	#4,1(a0)
0001195A 117C 0028 0019             		move.b	#$28,$19(a0)
00011960 7000                       		moveq	#0,d0
00011962 1028 0028                  		move.b	$28(a0),d0	; get object type
00011966 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001196A 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0001196E                            
0001196E                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0001196E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011972 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011974 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001197A 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011980 4A28 0001                  		tst.b	1(a0)
00011984 6A00                       		bpl.s	Obj0C_Solid
00011986 303C 00BB                  		move.w	#$BB,d0
0001198A 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play door sound
00011990                            
00011990                            Obj0C_Solid:
00011990 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011996 6100 9336                  		bsr.w	AnimateSprite
0001199A 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001199E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000119A2 6600                       		bne.s	Obj0C_Display	; if yes, branch
000119A4 3038 D008                  		move.w	($FFFFD008).w,d0
000119A8 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000119AC 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000119AE 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000119B4 323C 0013                  		move.w	#$13,d1
000119B8 343C 0020                  		move.w	#$20,d2
000119BC 3602                       		move.w	d2,d3
000119BE 5243                       		addq.w	#1,d3
000119C0 3828 0008                  		move.w	8(a0),d4
000119C4 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
000119C8                            
000119C8                            Obj0C_Display:
000119C8 6000 E2E2                  		bra.w	MarkObjGone
000119CC                            ; ===========================================================================
000119CC                            Ani_obj0C:
000119CC                            	include "_anim\obj0C.asm"
000119CC                            ; ---------------------------------------------------------------------------
000119CC                            ; Animation script - flapping door (LZ)
000119CC                            ; ---------------------------------------------------------------------------
000119CC 0000                       		dc.w byte_113E6-Ani_obj0C
000119CE 0000                       		dc.w byte_113EC-Ani_obj0C
000119D0 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
000119D6 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
000119DC                            		even
000119DC                            		even
000119DC                            
000119DC                            ; ---------------------------------------------------------------------------
000119DC                            ; Sprite mappings - flapping door (LZ)
000119DC                            ; ---------------------------------------------------------------------------
000119DC                            Map_obj0C:
000119DC                            	include "_maps\obj0C.asm"
000119DC                            ; ---------------------------------------------------------------------------
000119DC                            ; Sprite mappings - flapping door (LZ)
000119DC                            ; ---------------------------------------------------------------------------
000119DC 0000                       		dc.w byte_113F8-Map_obj0C
000119DE 0000                       		dc.w byte_11403-Map_obj0C
000119E0 0000                       		dc.w byte_1140E-Map_obj0C
000119E2 02                         byte_113F8:	dc.b 2
000119E3 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000119E8 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000119ED 02                         byte_11403:	dc.b 2
000119EE DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
000119F3 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
000119F8 02                         byte_1140E:	dc.b 2
000119F9 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000119FE 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011A04 00                         		even
00011A04 00                         		even
00011A04                            
00011A04                            ; ===========================================================================
00011A04                            ; ---------------------------------------------------------------------------
00011A04                            ; Object 71 - invisible	solid blocks
00011A04                            ; ---------------------------------------------------------------------------
00011A04                            
00011A04                            Obj71:					; XREF: Obj_Index
00011A04 7000                       		moveq	#0,d0
00011A06 1028 0024                  		move.b	$24(a0),d0
00011A0A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011A0E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011A12                            ; ===========================================================================
00011A12 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011A14 0000                       		dc.w Obj71_Solid-Obj71_Index
00011A16                            ; ===========================================================================
00011A16                            
00011A16                            Obj71_Main:				; XREF: Obj71_Index
00011A16 5428 0024                  		addq.b	#2,$24(a0)
00011A1A 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011A22 317C 8680 0002             		move.w	#$8680,2(a0)
00011A28 0028 0004 0001             		ori.b	#4,1(a0)
00011A2E 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A32 1200                       		move.b	d0,d1
00011A34 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011A38 0640 0010                  		addi.w	#$10,d0
00011A3C E248                       		lsr.w	#1,d0
00011A3E 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011A42 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011A46 5241                       		addq.w	#1,d1
00011A48 E749                       		lsl.w	#3,d1
00011A4A 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011A4E                            
00011A4E                            Obj71_Solid:				; XREF: Obj71_Index
00011A4E 6100 C42E                  		bsr.w	ChkObjOnScreen
00011A52 6600                       		bne.s	Obj71_ChkDel
00011A54 7200                       		moveq	#0,d1
00011A56 1228 0019                  		move.b	$19(a0),d1
00011A5A 0641 000B                  		addi.w	#$B,d1
00011A5E 7400                       		moveq	#0,d2
00011A60 1428 0016                  		move.b	$16(a0),d2
00011A64 3602                       		move.w	d2,d3
00011A66 5243                       		addq.w	#1,d3
00011A68 3828 0008                  		move.w	8(a0),d4
00011A6C 6100 E5A8                  		bsr.w	SolidObject71
00011A70                            
00011A70                            Obj71_ChkDel:
00011A70 3028 0008                  		move.w	8(a0),d0
00011A74 0240 FF80                  		andi.w	#$FF80,d0
00011A78 3238 F700                  		move.w	($FFFFF700).w,d1
00011A7C 0441 0080                  		subi.w	#$80,d1
00011A80 0241 FF80                  		andi.w	#$FF80,d1
00011A84 9041                       		sub.w	d1,d0
00011A86 0C40 0280                  		cmpi.w	#$280,d0
00011A8A 6200                       		bhi.s	Obj71_Delete
00011A8C 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A90 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A92 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A96                            ; ===========================================================================
00011A96                            
00011A96                            Obj71_NoDisplay:
00011A96 4E75                       		rts	
00011A98                            ; ===========================================================================
00011A98                            
00011A98                            Obj71_Delete:
00011A98 4EFA C1A6                  		jmp	DeleteObject
00011A9C                            ; ===========================================================================
00011A9C                            ; ---------------------------------------------------------------------------
00011A9C                            ; Sprite mappings - invisible solid blocks
00011A9C                            ; ---------------------------------------------------------------------------
00011A9C                            Map_obj71:
00011A9C                            	include "_maps\obj71.asm"
00011A9C                            ; ---------------------------------------------------------------------------
00011A9C                            ; Sprite mappings - invisible solid blocks
00011A9C                            ; ---------------------------------------------------------------------------
00011A9C 0000                       		dc.w byte_114BC-Map_obj71
00011A9E 0000                       		dc.w byte_114D1-Map_obj71
00011AA0 0000                       		dc.w byte_114E6-Map_obj71
00011AA2 04                         byte_114BC:	dc.b 4
00011AA3 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011AA8 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011AAD 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011AB2 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011AB7 04                         byte_114D1:	dc.b 4
00011AB8 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011ABD E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011AC2 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011AC7 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011ACC 04                         byte_114E6:	dc.b 4
00011ACD E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011AD2 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011AD7 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011ADC 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011AE2 00                         		even
00011AE2 00                         		even
00011AE2                            
00011AE2                            ; ===========================================================================
00011AE2                            ; ---------------------------------------------------------------------------
00011AE2                            ; Object 5D - fans (SLZ)
00011AE2                            ; ---------------------------------------------------------------------------
00011AE2                            
00011AE2                            Obj5D:					; XREF: Obj_Index
00011AE2 7000                       		moveq	#0,d0
00011AE4 1028 0024                  		move.b	$24(a0),d0
00011AE8 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011AEC 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011AF0                            ; ===========================================================================
00011AF0 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011AF2 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011AF4                            ; ===========================================================================
00011AF4                            
00011AF4                            Obj5D_Main:				; XREF: Obj5D_Index
00011AF4 5428 0024                  		addq.b	#2,$24(a0)
00011AF8 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011B00 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011B06 0028 0004 0001             		ori.b	#4,1(a0)
00011B0C 117C 0010 0019             		move.b	#$10,$19(a0)
00011B12 117C 0004 0018             		move.b	#4,$18(a0)
00011B18                            
00011B18                            Obj5D_Delay:				; XREF: Obj5D_Index
00011B18 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011B1E 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011B20 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B24 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011B26 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011B2C 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011B32 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011B34 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011B3A                            
00011B3A                            Obj5D_Blow:
00011B3A 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011B3E 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011B42 43F8 D000                  		lea	($FFFFD000).w,a1
00011B46 3029 0008                  		move.w	8(a1),d0
00011B4A 9068 0008                  		sub.w	8(a0),d0
00011B4E 0828 0000 0022             		btst	#0,$22(a0)
00011B54 6600                       		bne.s	Obj5D_ChkSonic
00011B56 4440                       		neg.w	d0
00011B58                            
00011B58                            Obj5D_ChkSonic:
00011B58 0640 0050                  		addi.w	#$50,d0
00011B5C 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011B60 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011B62 3229 000C                  		move.w	$C(a1),d1
00011B66 0641 0060                  		addi.w	#$60,d1
00011B6A 9268 000C                  		sub.w	$C(a0),d1
00011B6E 6500                       		bcs.s	Obj5D_Animate
00011B70 0C41 0070                  		cmpi.w	#$70,d1
00011B74 6400                       		bcc.s	Obj5D_Animate
00011B76 0440 0050                  		subi.w	#$50,d0
00011B7A 6400                       		bcc.s	loc_1159A
00011B7C 4640                       		not.w	d0
00011B7E D040                       		add.w	d0,d0
00011B80                            
00011B80                            loc_1159A:
00011B80 0640 0060                  		addi.w	#$60,d0
00011B84 0828 0000 0022             		btst	#0,$22(a0)
00011B8A 6600                       		bne.s	loc_115A8
00011B8C 4440                       		neg.w	d0
00011B8E                            
00011B8E                            loc_115A8:
00011B8E 4400                       		neg.b	d0
00011B90 E840                       		asr.w	#4,d0
00011B92 0828 0000 0028             		btst	#0,$28(a0)
00011B98 6700                       		beq.s	Obj5D_MoveSonic
00011B9A 4440                       		neg.w	d0
00011B9C                            
00011B9C                            Obj5D_MoveSonic:
00011B9C D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011BA0                            
00011BA0                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011BA0 5328 001E                  		subq.b	#1,$1E(a0)
00011BA4 6A00                       		bpl.s	Obj5D_ChkDel
00011BA6 117C 0000 001E             		move.b	#0,$1E(a0)
00011BAC 5228 001B                  		addq.b	#1,$1B(a0)
00011BB0 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011BB6 6500                       		bcs.s	loc_115D8
00011BB8 117C 0000 001B             		move.b	#0,$1B(a0)
00011BBE                            
00011BBE                            loc_115D8:
00011BBE 7000                       		moveq	#0,d0
00011BC0 0828 0000 0028             		btst	#0,$28(a0)
00011BC6 6700                       		beq.s	loc_115E4
00011BC8 7002                       		moveq	#2,d0
00011BCA                            
00011BCA                            loc_115E4:
00011BCA D028 001B                  		add.b	$1B(a0),d0
00011BCE 1140 001A                  		move.b	d0,$1A(a0)
00011BD2                            
00011BD2                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011BD2 6100 C030                  		bsr.w	DisplaySprite
00011BD6 3028 0008                  		move.w	8(a0),d0
00011BDA 0240 FF80                  		andi.w	#$FF80,d0
00011BDE 3238 F700                  		move.w	($FFFFF700).w,d1
00011BE2 0441 0080                  		subi.w	#$80,d1
00011BE6 0241 FF80                  		andi.w	#$FF80,d1
00011BEA 9041                       		sub.w	d1,d0
00011BEC 0C40 0280                  		cmpi.w	#$280,d0
00011BF0 6200 C04E                  		bhi.w	DeleteObject
00011BF4 4E75                       		rts	
00011BF6                            ; ===========================================================================
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6                            ; Sprite mappings - fans (SLZ)
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6                            Map_obj5D:
00011BF6                            	include "_maps\obj5D.asm"
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6                            ; Sprite mappings - fans (SLZ)
00011BF6                            ; ---------------------------------------------------------------------------
00011BF6 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011BFA 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011BFE 0000                       		dc.w byte_1161A-Map_obj5D
00011C00 02                         byte_1161A:	dc.b 2
00011C01 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011C06 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011C0B 02                         byte_11625:	dc.b 2
00011C0C F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011C11 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011C16 02                         byte_11630:	dc.b 2
00011C17 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011C1C 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011C22 00                         		even
00011C22 00                         		even
00011C22                            
00011C22                            ; ===========================================================================
00011C22                            ; ---------------------------------------------------------------------------
00011C22                            ; Object 5E - seesaws (SLZ)
00011C22                            ; ---------------------------------------------------------------------------
00011C22                            
00011C22                            Obj5E:					; XREF: Obj_Index
00011C22 7000                       		moveq	#0,d0
00011C24 1028 0024                  		move.b	$24(a0),d0
00011C28 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011C2C 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011C30 3028 0030                  		move.w	$30(a0),d0
00011C34 0240 FF80                  		andi.w	#$FF80,d0
00011C38 3238 F700                  		move.w	($FFFFF700).w,d1
00011C3C 0441 0080                  		subi.w	#$80,d1
00011C40 0241 FF80                  		andi.w	#$FF80,d1
00011C44 9041                       		sub.w	d1,d0
00011C46 6B00 BFF8                  		bmi.w	DeleteObject
00011C4A 0C40 0280                  		cmpi.w	#$280,d0
00011C4E 6200 BFF0                  		bhi.w	DeleteObject
00011C52 6000 BFB0                  		bra.w	DisplaySprite
00011C56                            ; ===========================================================================
00011C56 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011C58 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011C5A 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011C5C 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011C5E 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011C60 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011C62                            ; ===========================================================================
00011C62                            
00011C62                            Obj5E_Main:				; XREF: Obj5E_Index
00011C62 5428 0024                  		addq.b	#2,$24(a0)
00011C66 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011C6E 317C 0374 0002             		move.w	#$374,2(a0)
00011C74 0028 0004 0001             		ori.b	#4,1(a0)
00011C7A 117C 0004 0018             		move.b	#4,$18(a0)
00011C80 117C 0030 0019             		move.b	#$30,$19(a0)
00011C86 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C8C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C90 6600                       		bne.s	loc_116D2	; if not, branch
00011C92 6100 C40C                  		bsr.w	SingleObjLoad2
00011C96 6600                       		bne.s	loc_116D2
00011C98 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C9C 5C29 0024                  		addq.b	#6,$24(a1)
00011CA0 3368 0008 0008             		move.w	8(a0),8(a1)
00011CA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011CAC 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011CB2 2348 003C                  		move.l	a0,$3C(a1)
00011CB6                            
00011CB6                            loc_116D2:
00011CB6 0828 0000 0022             		btst	#0,$22(a0)
00011CBC 6700                       		beq.s	loc_116E0
00011CBE 117C 0002 001A             		move.b	#2,$1A(a0)
00011CC4                            
00011CC4                            loc_116E0:
00011CC4 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011CCA                            
00011CCA                            Obj5E_Slope:				; XREF: Obj5E_Index
00011CCA 1228 003A                  		move.b	$3A(a0),d1
00011CCE 6100 0000                  		bsr.w	loc_11766
00011CD2 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CD8 0828 0000 001A             		btst	#0,$1A(a0)
00011CDE 6700                       		beq.s	loc_11702
00011CE0 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CE6                            
00011CE6                            loc_11702:
00011CE6 43F8 D000                  		lea	($FFFFD000).w,a1
00011CEA 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011CF0 323C 0030                  		move.w	#$30,d1
00011CF4 4EB9 0000 79FE             		jsr	(SlopeObject).l
00011CFA 4E75                       		rts	
00011CFC                            ; ===========================================================================
00011CFC                            
00011CFC                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011CFC 6100 0000                  		bsr.w	loc_1174A
00011D00 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011D06 0828 0000 001A             		btst	#0,$1A(a0)
00011D0C 6700                       		beq.s	loc_11730
00011D0E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011D14                            
00011D14                            loc_11730:
00011D14 323C 0030                  		move.w	#$30,d1
00011D18 4EB9 0000 7A9E             		jsr	(ExitPlatform).l
00011D1E 323C 0030                  		move.w	#$30,d1
00011D22 3428 0008                  		move.w	8(a0),d2
00011D26 4EB9 0000 89FC             		jsr	SlopeObject2
00011D2C 4E75                       		rts	
00011D2E                            ; ===========================================================================
00011D2E                            
00011D2E                            loc_1174A:				; XREF: Obj5E_Slope2
00011D2E 7202                       		moveq	#2,d1
00011D30 43F8 D000                  		lea	($FFFFD000).w,a1
00011D34 3028 0008                  		move.w	8(a0),d0
00011D38 9069 0008                  		sub.w	8(a1),d0
00011D3C 6400                       		bcc.s	loc_1175E
00011D3E 4440                       		neg.w	d0
00011D40 7200                       		moveq	#0,d1
00011D42                            
00011D42                            loc_1175E:
00011D42 0C40 0008                  		cmpi.w	#8,d0
00011D46 6400                       		bcc.s	loc_11766
00011D48 7201                       		moveq	#1,d1
00011D4A                            
00011D4A                            loc_11766:
00011D4A 1028 001A                  		move.b	$1A(a0),d0
00011D4E B001                       		cmp.b	d1,d0
00011D50 6700                       		beq.s	locret_11790
00011D52 6400                       		bcc.s	loc_11772
00011D54 5400                       		addq.b	#2,d0
00011D56                            
00011D56                            loc_11772:
00011D56 5300                       		subq.b	#1,d0
00011D58 1140 001A                  		move.b	d0,$1A(a0)
00011D5C 1141 003A                  		move.b	d1,$3A(a0)
00011D60 08A8 0000 0001             		bclr	#0,1(a0)
00011D66 0828 0001 001A             		btst	#1,$1A(a0)
00011D6C 6700                       		beq.s	locret_11790
00011D6E 08E8 0000 0001             		bset	#0,1(a0)
00011D74                            
00011D74                            locret_11790:
00011D74 4E75                       		rts	
00011D76                            ; ===========================================================================
00011D76                            
00011D76                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011D76 5428 0024                  		addq.b	#2,$24(a0)
00011D7A 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011D82 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011D88 0028 0004 0001             		ori.b	#4,1(a0)
00011D8E 117C 0004 0018             		move.b	#4,$18(a0)
00011D94 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D9A 117C 000C 0019             		move.b	#$C,$19(a0)
00011DA0 3168 0008 0030             		move.w	8(a0),$30(a0)
00011DA6 0668 0028 0008             		addi.w	#$28,8(a0)
00011DAC 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011DB2 117C 0001 001A             		move.b	#1,$1A(a0)
00011DB8 0828 0000 0022             		btst	#0,$22(a0)
00011DBE 6700                       		beq.s	Obj5E_MoveSpike
00011DC0 0468 0050 0008             		subi.w	#$50,8(a0)
00011DC6 117C 0002 003A             		move.b	#2,$3A(a0)
00011DCC                            
00011DCC                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011DCC 2268 003C                  		movea.l	$3C(a0),a1
00011DD0 7000                       		moveq	#0,d0
00011DD2 1028 003A                  		move.b	$3A(a0),d0
00011DD6 9029 003A                  		sub.b	$3A(a1),d0
00011DDA 6700                       		beq.s	loc_1183E
00011DDC 6400                       		bcc.s	loc_117FC
00011DDE 4400                       		neg.b	d0
00011DE0                            
00011DE0                            loc_117FC:
00011DE0 323C F7E8                  		move.w	#-$818,d1
00011DE4 343C FEEC                  		move.w	#-$114,d2
00011DE8 0C00 0001                  		cmpi.b	#1,d0
00011DEC 6700                       		beq.s	loc_11822
00011DEE 323C F510                  		move.w	#-$AF0,d1
00011DF2 343C FF34                  		move.w	#-$CC,d2
00011DF6 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011DFC 6D00                       		blt.s	loc_11822
00011DFE 323C F200                  		move.w	#-$E00,d1
00011E02 343C FF60                  		move.w	#-$A0,d2
00011E06                            
00011E06                            loc_11822:
00011E06 3141 0012                  		move.w	d1,$12(a0)
00011E0A 3142 0010                  		move.w	d2,$10(a0)
00011E0E 3028 0008                  		move.w	8(a0),d0
00011E12 9068 0030                  		sub.w	$30(a0),d0
00011E16 6400                       		bcc.s	loc_11838
00011E18 4468 0010                  		neg.w	$10(a0)
00011E1C                            
00011E1C                            loc_11838:
00011E1C 5428 0024                  		addq.b	#2,$24(a0)
00011E20 6000                       		bra.s	Obj5E_SpikeFall
00011E22                            ; ===========================================================================
00011E22                            
00011E22                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011E22 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E28 7000                       		moveq	#0,d0
00011E2A 1029 001A                  		move.b	$1A(a1),d0
00011E2E 343C 0028                  		move.w	#$28,d2
00011E32 3228 0008                  		move.w	8(a0),d1
00011E36 9268 0030                  		sub.w	$30(a0),d1
00011E3A 6400                       		bcc.s	loc_1185C
00011E3C 4442                       		neg.w	d2
00011E3E 5440                       		addq.w	#2,d0
00011E40                            
00011E40                            loc_1185C:
00011E40 D040                       		add.w	d0,d0
00011E42 3228 0034                  		move.w	$34(a0),d1
00011E46 D272 0000                  		add.w	(a2,d0.w),d1
00011E4A 3141 000C                  		move.w	d1,$C(a0)
00011E4E D468 0030                  		add.w	$30(a0),d2
00011E52 3142 0008                  		move.w	d2,8(a0)
00011E56 4268 000E                  		clr.w	$E(a0)
00011E5A 4268 000A                  		clr.w	$A(a0)
00011E5E 4E75                       		rts	
00011E60                            ; ===========================================================================
00011E60                            
00011E60                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011E60 4A68 0012                  		tst.w	$12(a0)
00011E64 6A00                       		bpl.s	loc_1189A
00011E66 6100 BD4A                  		bsr.w	ObjectFall
00011E6A 3028 0034                  		move.w	$34(a0),d0
00011E6E 0440 002F                  		subi.w	#$2F,d0
00011E72 B068 000C                  		cmp.w	$C(a0),d0
00011E76 6E00                       		bgt.s	locret_11898
00011E78 6100 BD38                  		bsr.w	ObjectFall
00011E7C                            
00011E7C                            locret_11898:
00011E7C 4E75                       		rts	
00011E7E                            ; ===========================================================================
00011E7E                            
00011E7E                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011E7E 6100 BD32                  		bsr.w	ObjectFall
00011E82 2268 003C                  		movea.l	$3C(a0),a1
00011E86 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E8C 7000                       		moveq	#0,d0
00011E8E 1029 001A                  		move.b	$1A(a1),d0
00011E92 3228 0008                  		move.w	8(a0),d1
00011E96 9268 0030                  		sub.w	$30(a0),d1
00011E9A 6400                       		bcc.s	loc_118BA
00011E9C 5440                       		addq.w	#2,d0
00011E9E                            
00011E9E                            loc_118BA:
00011E9E D040                       		add.w	d0,d0
00011EA0 3228 0034                  		move.w	$34(a0),d1
00011EA4 D272 0000                  		add.w	(a2,d0.w),d1
00011EA8 B268 000C                  		cmp.w	$C(a0),d1
00011EAC 6E00                       		bgt.s	locret_11938
00011EAE 2268 003C                  		movea.l	$3C(a0),a1
00011EB2 7202                       		moveq	#2,d1
00011EB4 4A68 0010                  		tst.w	$10(a0)
00011EB8 6B00                       		bmi.s	Obj5E_Spring
00011EBA 7200                       		moveq	#0,d1
00011EBC                            
00011EBC                            Obj5E_Spring:
00011EBC 1341 003A                  		move.b	d1,$3A(a1)
00011EC0 1141 003A                  		move.b	d1,$3A(a0)
00011EC4 B229 001A                  		cmp.b	$1A(a1),d1
00011EC8 6700                       		beq.s	loc_1192C
00011ECA 08A9 0003 0022             		bclr	#3,$22(a1)
00011ED0 6700                       		beq.s	loc_1192C
00011ED2 4229 0025                  		clr.b	$25(a1)
00011ED6 137C 0002 0024             		move.b	#2,$24(a1)
00011EDC 45F8 D000                  		lea	($FFFFD000).w,a2
00011EE0 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011EE6 446A 0012                  		neg.w	$12(a2)
00011EEA 08EA 0001 0022             		bset	#1,$22(a2)
00011EF0 08AA 0003 0022             		bclr	#3,$22(a2)
00011EF6 422A 003C                  		clr.b	$3C(a2)
00011EFA 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011F00 157C 0002 0024             		move.b	#2,$24(a2)
00011F06 303C 00CC                  		move.w	#$CC,d0
00011F0A 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play spring sound
00011F10                            
00011F10                            loc_1192C:
00011F10 4268 0010                  		clr.w	$10(a0)
00011F14 4268 0012                  		clr.w	$12(a0)
00011F18 5528 0024                  		subq.b	#2,$24(a0)
00011F1C                            
00011F1C                            locret_11938:
00011F1C 4E75                       		rts	
00011F1E                            ; ===========================================================================
00011F1E FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011F28                            
00011F28                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011F58                            		even
00011F58                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011F88                            		even
00011F88                            ; ---------------------------------------------------------------------------
00011F88                            ; Sprite mappings - seesaws (SLZ)
00011F88                            ; ---------------------------------------------------------------------------
00011F88                            Map_obj5E:
00011F88                            	include "_maps\obj5E.asm"
00011F88                            ; ---------------------------------------------------------------------------
00011F88                            ; Sprite mappings - seesaws (SLZ)
00011F88                            ; ---------------------------------------------------------------------------
00011F88 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F8C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F90 07                         byte_119AC:	dc.b 7
00011F91 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F96 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F9B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011FA0 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011FA5 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011FAA F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011FAF FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011FB4 04                         byte_119D0:	dc.b 4
00011FB5 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011FBA E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011FBF E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011FC4 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011FCA 00                         		even
00011FCA 00                         		even
00011FCA                            
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA                            Map_obj5Ea:
00011FCA                            	include "_maps\obj5Eballs.asm"
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011FCA                            ; ---------------------------------------------------------------------------
00011FCA 0000                       		dc.w byte_119EA-Map_obj5Ea
00011FCC 0000                       		dc.w byte_119F0-Map_obj5Ea
00011FCE 01                         byte_119EA:	dc.b 1
00011FCF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011FD4 01                         byte_119F0:	dc.b 1
00011FD5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011FDA                            		even
00011FDA                            		even
00011FDA                            
00011FDA                            ; ===========================================================================
00011FDA                            ; ---------------------------------------------------------------------------
00011FDA                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011FDA                            ; ---------------------------------------------------------------------------
00011FDA                            
00011FDA                            Obj5F:					; XREF: Obj_Index
00011FDA 7000                       		moveq	#0,d0
00011FDC 1028 0024                  		move.b	$24(a0),d0
00011FE0 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011FE4 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011FE8                            ; ===========================================================================
00011FE8 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011FEA 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011FEC 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011FEE 0000                       		dc.w Obj5F_End-Obj5F_Index
00011FF0                            ; ===========================================================================
00011FF0                            
00011FF0                            Obj5F_Main:				; XREF: Obj5F_Index
00011FF0 5428 0024                  		addq.b	#2,$24(a0)
00011FF4 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011FFC 317C 0400 0002             		move.w	#$400,2(a0)
00012002 0028 0004 0001             		ori.b	#4,1(a0)
00012008 117C 0003 0018             		move.b	#3,$18(a0)
0001200E 117C 000C 0019             		move.b	#$C,$19(a0)
00012014 1028 0028                  		move.b	$28(a0),d0
00012018 6700                       		beq.s	loc_11A3C
0001201A 1140 0024                  		move.b	d0,$24(a0)
0001201E 4E75                       		rts	
00012020                            ; ===========================================================================
00012020                            
00012020                            loc_11A3C:
00012020 117C 009A 0020             		move.b	#$9A,$20(a0)
00012026 0868 0000 0022             		bchg	#0,$22(a0)
0001202C                            
0001202C                            Obj5F_Action:				; XREF: Obj5F_Index
0001202C 7000                       		moveq	#0,d0
0001202E 1028 0025                  		move.b	$25(a0),d0
00012032 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012036 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
0001203A 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012040 6100 8C8C                  		bsr.w	AnimateSprite
00012044 6000 DC66                  		bra.w	MarkObjGone
00012048                            ; ===========================================================================
00012048 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
0001204A 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001204C 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001204E                            ; ===========================================================================
0001204E                            
0001204E                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001204E 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012052 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012056 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012058 5428 0025                  		addq.b	#2,$25(a0)
0001205C 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012062 317C 0010 0010             		move.w	#$10,$10(a0)
00012068 117C 0001 001C             		move.b	#1,$1C(a0)
0001206E 0868 0000 0022             		bchg	#0,$22(a0)
00012074 6700                       		beq.s	locret_11A96
00012076 4468 0010                  		neg.w	$10(a0)		; change direction
0001207A                            
0001207A                            locret_11A96:
0001207A 4E75                       		rts	
0001207C                            ; ===========================================================================
0001207C                            
0001207C                            Obj5F_Wait:				; XREF: Obj5F_Index2
0001207C 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012080 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012084 6B00                       		bmi.s	loc_11AA8
00012086 6100 BB56                  		bsr.w	SpeedToPos
0001208A 4E75                       		rts	
0001208C                            ; ===========================================================================
0001208C                            
0001208C                            loc_11AA8:
0001208C 5528 0025                  		subq.b	#2,$25(a0)
00012090 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012096 4268 0010                  		clr.w	$10(a0)		; stop walking
0001209A 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000120A0 4E75                       		rts	
000120A2                            ; ===========================================================================
000120A2                            
000120A2                            Obj5F_Explode:				; XREF: Obj5F_Index2
000120A2 5368 0030                  		subq.w	#1,$30(a0)
000120A6 6A00                       		bpl.s	locret_11AD0
000120A8 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
000120AC 117C 0000 0024             		move.b	#0,$24(a0)
000120B2                            
000120B2                            locret_11AD0:
000120B2 4E75                       		rts	
000120B4                            ; ===========================================================================
000120B4                            
000120B4                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
000120B4 3038 D008                  		move.w	($FFFFD008).w,d0
000120B8 9068 0008                  		sub.w	8(a0),d0
000120BC 6400                       		bcc.s	loc_11ADE
000120BE 4440                       		neg.w	d0
000120C0                            
000120C0                            loc_11ADE:
000120C0 0C40 0060                  		cmpi.w	#$60,d0
000120C4 6400                       		bcc.s	locret_11B5E
000120C6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000120CA 9068 000C                  		sub.w	$C(a0),d0
000120CE 6400                       		bcc.s	Obj5F_MakeFuse
000120D0 4440                       		neg.w	d0
000120D2                            
000120D2                            Obj5F_MakeFuse:
000120D2 0C40 0060                  		cmpi.w	#$60,d0
000120D6 6400                       		bcc.s	locret_11B5E
000120D8 4A78 FE08                  		tst.w	($FFFFFE08).w
000120DC 6600                       		bne.s	locret_11B5E
000120DE 117C 0004 0025             		move.b	#4,$25(a0)
000120E4 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000120EA 4268 0010                  		clr.w	$10(a0)
000120EE 117C 0002 001C             		move.b	#2,$1C(a0)
000120F4 6100 BFAA                  		bsr.w	SingleObjLoad2
000120F8 6600                       		bne.s	locret_11B5E
000120FA 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000120FE 3368 0008 0008             		move.w	8(a0),8(a1)
00012104 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001210A 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012110 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012116 137C 0004 0028             		move.b	#4,$28(a1)
0001211C 137C 0003 001C             		move.b	#3,$1C(a1)
00012122 337C 0010 0012             		move.w	#$10,$12(a1)
00012128 0828 0001 0022             		btst	#1,$22(a0)
0001212E 6700                       		beq.s	loc_11B54
00012130 4469 0012                  		neg.w	$12(a1)
00012134                            
00012134                            loc_11B54:
00012134 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
0001213A 2348 003C                  		move.l	a0,$3C(a1)
0001213E                            
0001213E                            locret_11B5E:
0001213E 4E75                       		rts	
00012140                            ; ===========================================================================
00012140                            
00012140                            Obj5F_Display:				; XREF: Obj5F_Index
00012140 6100                       		bsr.s	loc_11B70
00012142 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012148 6100 8B84                  		bsr.w	AnimateSprite
0001214C 6000 DB5E                  		bra.w	MarkObjGone
00012150                            ; ===========================================================================
00012150                            
00012150                            loc_11B70:
00012150 5368 0030                  		subq.w	#1,$30(a0)
00012154 6B00                       		bmi.s	loc_11B7C
00012156 6100 BA86                  		bsr.w	SpeedToPos
0001215A 4E75                       		rts	
0001215C                            ; ===========================================================================
0001215C                            
0001215C                            loc_11B7C:
0001215C 4268 0030                  		clr.w	$30(a0)
00012160 4228 0024                  		clr.b	$24(a0)
00012164 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001216A 7203                       		moveq	#3,d1
0001216C 2248                       		movea.l	a0,a1
0001216E 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012174 6000                       		bra.s	Obj5F_MakeShrap
00012176                            ; ===========================================================================
00012176                            
00012176                            Obj5F_Loop:
00012176 6100 BF28                  		bsr.w	SingleObjLoad2
0001217A 6600                       		bne.s	loc_11BCE
0001217C                            
0001217C                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0001217C 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012180 3368 0008 0008             		move.w	8(a0),8(a1)
00012186 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001218C 137C 0006 0028             		move.b	#6,$28(a1)
00012192 137C 0004 001C             		move.b	#4,$1C(a1)
00012198 335A 0010                  		move.w	(a2)+,$10(a1)
0001219C 335A 0012                  		move.w	(a2)+,$12(a1)
000121A0 137C 0098 0020             		move.b	#$98,$20(a1)
000121A6 08E9 0007 0001             		bset	#7,1(a1)
000121AC                            
000121AC                            loc_11BCE:
000121AC 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
000121B0                            
000121B0 117C 0006 0024             		move.b	#6,$24(a0)
000121B6                            
000121B6                            Obj5F_End:				; XREF: Obj5F_Index
000121B6 6100 BA26                  		bsr.w	SpeedToPos
000121BA 0668 0018 0012             		addi.w	#$18,$12(a0)
000121C0 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000121C6 6100 8B06                  		bsr.w	AnimateSprite
000121CA 4A28 0001                  		tst.b	1(a0)
000121CE 6A00 BA70                  		bpl.w	DeleteObject
000121D2 6000 BA30                  		bra.w	DisplaySprite
000121D6                            ; ===========================================================================
000121D6 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000121E6                            
000121E6                            Ani_obj5F:
000121E6                            	include "_anim\obj5F.asm"
000121E6                            ; ---------------------------------------------------------------------------
000121E6                            ; Animation script - Bomb enemy
000121E6                            ; ---------------------------------------------------------------------------
000121E6 0000                       		dc.w byte_11C12-Ani_obj5F
000121E8 0000                       		dc.w byte_11C16-Ani_obj5F
000121EA 0000                       		dc.w byte_11C1C-Ani_obj5F
000121EC 0000                       		dc.w byte_11C20-Ani_obj5F
000121EE 0000                       		dc.w byte_11C24-Ani_obj5F
000121F0 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000121F4 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000121FA 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000121FE 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012202 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012206                            		even
00012206                            		even
00012206                            
00012206                            ; ---------------------------------------------------------------------------
00012206                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012206                            ; ---------------------------------------------------------------------------
00012206                            Map_obj5F:
00012206                            	include "_maps\obj5F.asm"
00012206                            ; ---------------------------------------------------------------------------
00012206                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012206                            ; ---------------------------------------------------------------------------
00012206 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
0001220A 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001220E 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012212 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012216 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
0001221A 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001221E 03                         byte_11C40:	dc.b 3
0001221F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012224 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012229 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001222E 03                         byte_11C50:	dc.b 3
0001222F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012234 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012239 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001223E 03                         byte_11C60:	dc.b 3
0001223F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012244 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012249 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001224E 03                         byte_11C70:	dc.b 3
0001224F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012254 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012259 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001225E 03                         byte_11C80:	dc.b 3
0001225F F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012264 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012269 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001226E 03                         byte_11C90:	dc.b 3
0001226F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012274 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012279 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001227E 02                         byte_11CA0:	dc.b 2
0001227F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012284 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012289 02                         byte_11CAB:	dc.b 2
0001228A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001228F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012294 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012295 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001229A 01                         byte_11CBC:	dc.b 1			; fuse
0001229B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000122A0 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000122A1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000122A6 01                         byte_11CC8:	dc.b 1			; fireball
000122A7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000122AC                            		even
000122AC                            		even
000122AC                            
000122AC                            ; ===========================================================================
000122AC                            ; ---------------------------------------------------------------------------
000122AC                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000122AC                            ; ---------------------------------------------------------------------------
000122AC                            
000122AC                            Obj60:					; XREF: Obj_Index
000122AC 7000                       		moveq	#0,d0
000122AE 1028 0024                  		move.b	$24(a0),d0
000122B2 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
000122B6 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
000122BA                            ; ===========================================================================
000122BA 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
000122BC 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
000122BE 0000                       		dc.w Obj60_Display-Obj60_Index
000122C0 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
000122C2 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
000122C4                            ; ===========================================================================
000122C4                            
000122C4                            Obj60_Main:				; XREF: Obj60_Index
000122C4 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
000122CC 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
000122D2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000122D8 6700                       		beq.s	loc_11D02
000122DA 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
000122E0                            
000122E0                            loc_11D02:
000122E0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000122E6 6600                       		bne.s	loc_11D10
000122E8 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000122EE                            
000122EE                            loc_11D10:
000122EE 0028 0004 0001             		ori.b	#4,1(a0)
000122F4 117C 0004 0018             		move.b	#4,$18(a0)
000122FA 117C 000B 0020             		move.b	#$B,$20(a0)
00012300 117C 000C 0019             		move.b	#$C,$19(a0)
00012306 7400                       		moveq	#0,d2
00012308 45E8 0037                  		lea	$37(a0),a2
0001230C 264A                       		movea.l	a2,a3
0001230E 524A                       		addq.w	#1,a2
00012310 7203                       		moveq	#3,d1
00012312                            
00012312                            Obj60_MakeOrbs:
00012312 6100 BD8C                  		bsr.w	SingleObjLoad2
00012316 6600                       		bne.s	loc_11D90
00012318 5213                       		addq.b	#1,(a3)
0001231A 3A09                       		move.w	a1,d5
0001231C 0445 D000                  		subi.w	#-$3000,d5
00012320 EC4D                       		lsr.w	#6,d5
00012322 0245 007F                  		andi.w	#$7F,d5
00012326 14C5                       		move.b	d5,(a2)+
00012328 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
0001232A 137C 0006 0024             		move.b	#6,$24(a1)
00012330 2368 0004 0004             		move.l	4(a0),4(a1)
00012336 3368 0002 0002             		move.w	2(a0),2(a1)
0001233C 0029 0004 0001             		ori.b	#4,1(a1)
00012342 137C 0004 0018             		move.b	#4,$18(a1)
00012348 137C 0008 0019             		move.b	#8,$19(a1)
0001234E 137C 0003 001A             		move.b	#3,$1A(a1)
00012354 137C 0098 0020             		move.b	#$98,$20(a1)
0001235A 1342 0026                  		move.b	d2,$26(a1)
0001235E 0602 0040                  		addi.b	#$40,d2
00012362 2348 003C                  		move.l	a0,$3C(a1)
00012366 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001236A                            
0001236A                            loc_11D90:
0001236A 7001                       		moveq	#1,d0
0001236C 0828 0000 0022             		btst	#0,$22(a0)
00012372 6700                       		beq.s	Obj60_Move
00012374 4440                       		neg.w	d0
00012376                            
00012376                            Obj60_Move:
00012376 1140 0036                  		move.b	d0,$36(a0)
0001237A 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012380 5428 0024                  		addq.b	#2,$24(a0)
00012384 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001238A 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012390 6700                       		beq.s	locret_11DBC	; if not, branch
00012392 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012396                            
00012396                            locret_11DBC:
00012396 4E75                       		rts	
00012398                            ; ===========================================================================
00012398                            
00012398                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012398 3038 D008                  		move.w	($FFFFD008).w,d0
0001239C 9068 0008                  		sub.w	8(a0),d0
000123A0 6400                       		bcc.s	loc_11DCA
000123A2 4440                       		neg.w	d0
000123A4                            
000123A4                            loc_11DCA:
000123A4 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000123A8 6400                       		bcc.s	Obj60_Animate	; if not, branch
000123AA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000123AE 9068 000C                  		sub.w	$C(a0),d0
000123B2 6400                       		bcc.s	loc_11DDC
000123B4 4440                       		neg.w	d0
000123B6                            
000123B6                            loc_11DDC:
000123B6 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000123BA 6400                       		bcc.s	Obj60_Animate	; if not, branch
000123BC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000123C0 6600                       		bne.s	Obj60_Animate	; if yes, branch
000123C2 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
000123C8                            
000123C8                            Obj60_Animate:
000123C8 43F9 0000 0000             		lea	(Ani_obj60).l,a1
000123CE 6100 88FE                  		bsr.w	AnimateSprite
000123D2 6000 0000                  		bra.w	Obj60_ChkDel
000123D6                            ; ===========================================================================
000123D6                            
000123D6                            Obj60_Display:				; XREF: Obj60_Index
000123D6 6100 B806                  		bsr.w	SpeedToPos
000123DA                            
000123DA                            Obj60_ChkDel:				; XREF: Obj60_Animate
000123DA 3028 0008                  		move.w	8(a0),d0
000123DE 0240 FF80                  		andi.w	#$FF80,d0
000123E2 3238 F700                  		move.w	($FFFFF700).w,d1
000123E6 0441 0080                  		subi.w	#$80,d1
000123EA 0241 FF80                  		andi.w	#$FF80,d1
000123EE 9041                       		sub.w	d1,d0
000123F0 0C40 0280                  		cmpi.w	#$280,d0
000123F4 6200 0000                  		bhi.w	Obj60_ChkGone
000123F8 6000 B80A                  		bra.w	DisplaySprite
000123FC                            ; ===========================================================================
000123FC                            
000123FC                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000123FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012400 7000                       		moveq	#0,d0
00012402 1028 0023                  		move.b	$23(a0),d0
00012406 6700                       		beq.s	loc_11E34
00012408 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001240E                            
0001240E                            loc_11E34:
0001240E 45E8 0037                  		lea	$37(a0),a2
00012412 7400                       		moveq	#0,d2
00012414 141A                       		move.b	(a2)+,d2
00012416 5342                       		subq.w	#1,d2
00012418 6500                       		bcs.s	Obj60_Delete
0001241A                            
0001241A                            loc_11E40:
0001241A 7000                       		moveq	#0,d0
0001241C 101A                       		move.b	(a2)+,d0
0001241E ED48                       		lsl.w	#6,d0
00012420 0680 00FF D000             		addi.l	#$FFD000,d0
00012426 2240                       		movea.l	d0,a1
00012428 6100 B818                  		bsr.w	DeleteObject2
0001242C 51CA FFEC                  		dbf	d2,loc_11E40
00012430                            
00012430                            Obj60_Delete:
00012430 6000 B80E                  		bra.w	DeleteObject
00012434                            ; ===========================================================================
00012434                            
00012434                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012434 2268 003C                  		movea.l	$3C(a0),a1
00012438 0C11 0060                  		cmpi.b	#$60,0(a1)
0001243C 6600 B802                  		bne.w	DeleteObject
00012440 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012446 6600                       		bne.s	Obj60_Circle
00012448 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001244E 6600                       		bne.s	Obj60_Circle
00012450 5428 0024                  		addq.b	#2,$24(a0)
00012454 5329 0037                  		subq.b	#1,$37(a1)
00012458 6600                       		bne.s	Obj60_FireOrb
0001245A 5429 0024                  		addq.b	#2,$24(a1)
0001245E                            
0001245E                            Obj60_FireOrb:
0001245E 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012464 0829 0000 0022             		btst	#0,$22(a1)
0001246A 6700                       		beq.s	Obj60_Display2
0001246C 4468 0010                  		neg.w	$10(a0)
00012470                            
00012470                            Obj60_Display2:
00012470 6000 B792                  		bra.w	DisplaySprite
00012474                            ; ===========================================================================
00012474                            
00012474                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012474 1028 0026                  		move.b	$26(a0),d0
00012478 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001247E E841                       		asr.w	#4,d1
00012480 D269 0008                  		add.w	8(a1),d1
00012484 3141 0008                  		move.w	d1,8(a0)
00012488 E840                       		asr.w	#4,d0
0001248A D069 000C                  		add.w	$C(a1),d0
0001248E 3140 000C                  		move.w	d0,$C(a0)
00012492 1029 0036                  		move.b	$36(a1),d0
00012496 D128 0026                  		add.b	d0,$26(a0)
0001249A 6000 B768                  		bra.w	DisplaySprite
0001249E                            ; ===========================================================================
0001249E                            
0001249E                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001249E 6100 B73E                  		bsr.w	SpeedToPos
000124A2 4A28 0001                  		tst.b	1(a0)
000124A6 6A00 B798                  		bpl.w	DeleteObject
000124AA 6000 B758                  		bra.w	DisplaySprite
000124AE                            ; ===========================================================================
000124AE                            Ani_obj60:
000124AE                            	include "_anim\obj60.asm"
000124AE                            ; ---------------------------------------------------------------------------
000124AE                            ; Animation script - Orbinaut enemy
000124AE                            ; ---------------------------------------------------------------------------
000124AE 0000                       		dc.w byte_11EDA-Ani_obj60
000124B0 0000                       		dc.w byte_11EDE-Ani_obj60
000124B2 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
000124B6 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
000124BC                            		even
000124BC                            		even
000124BC                            
000124BC                            ; ---------------------------------------------------------------------------
000124BC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000124BC                            ; ---------------------------------------------------------------------------
000124BC                            Map_obj60:
000124BC                            	include "_maps\obj60.asm"
000124BC                            ; ---------------------------------------------------------------------------
000124BC                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000124BC                            ; ---------------------------------------------------------------------------
000124BC 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
000124C0 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
000124C4 01                         byte_11EEC:	dc.b 1
000124C5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000124CA 01                         byte_11EF2:	dc.b 1
000124CB F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000124D0 01                         byte_11EF8:	dc.b 1
000124D1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000124D6 01                         byte_11EFE:	dc.b 1
000124D7 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000124DC                            		even
000124DC                            		even
000124DC                            
000124DC                            ; ===========================================================================
000124DC                            ; ---------------------------------------------------------------------------
000124DC                            ; Object 16 - harpoon (LZ)
000124DC                            ; ---------------------------------------------------------------------------
000124DC                            
000124DC                            Obj16:					; XREF: Obj_Index
000124DC 7000                       		moveq	#0,d0
000124DE 1028 0024                  		move.b	$24(a0),d0
000124E2 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000124E6 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000124EA                            ; ===========================================================================
000124EA 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000124EC 0000                       		dc.w Obj16_Move-Obj16_Index
000124EE 0000                       		dc.w Obj16_Wait-Obj16_Index
000124F0                            ; ===========================================================================
000124F0                            
000124F0                            Obj16_Main:				; XREF: Obj16_Index
000124F0 5428 0024                  		addq.b	#2,$24(a0)
000124F4 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000124FC 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012502 0028 0004 0001             		ori.b	#4,1(a0)
00012508 117C 0004 0018             		move.b	#4,$18(a0)
0001250E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012514 117C 0014 0019             		move.b	#$14,$19(a0)
0001251A 317C 003C 0030             		move.w	#60,$30(a0)
00012520                            
00012520                            Obj16_Move:				; XREF: Obj16_Index
00012520 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012526 6100 87A6                  		bsr.w	AnimateSprite
0001252A 7000                       		moveq	#0,d0
0001252C 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00012530 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012536 6000 D774                  		bra.w	MarkObjGone
0001253A                            ; ===========================================================================
0001253A 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00012540                            ; ===========================================================================
00012540                            
00012540                            Obj16_Wait:				; XREF: Obj16_Index
00012540 5368 0030                  		subq.w	#1,$30(a0)
00012544 6A00                       		bpl.s	Obj16_ChkDel
00012546 317C 003C 0030             		move.w	#60,$30(a0)
0001254C 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00012550 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012556                            
00012556                            Obj16_ChkDel:
00012556 6000 D754                  		bra.w	MarkObjGone
0001255A                            ; ===========================================================================
0001255A                            Ani_obj16:
0001255A                            	include "_anim\obj16.asm"
0001255A                            ; ---------------------------------------------------------------------------
0001255A                            ; Animation script - harpoon (LZ)
0001255A                            ; ---------------------------------------------------------------------------
0001255A 0000                       		dc.w byte_11F8A-Ani_obj16
0001255C 0000                       		dc.w byte_11F8E-Ani_obj16
0001255E 0000                       		dc.w byte_11F92-Ani_obj16
00012560 0000                       		dc.w byte_11F96-Ani_obj16
00012562 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012566 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001256A 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001256E 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012572                            		even
00012572                            		even
00012572                            
00012572                            ; ---------------------------------------------------------------------------
00012572                            ; Sprite mappings - harpoon (LZ)
00012572                            ; ---------------------------------------------------------------------------
00012572                            Map_obj16:
00012572                            	include "_maps\obj16.asm"
00012572                            ; ---------------------------------------------------------------------------
00012572                            ; Sprite mappings - harpoon (LZ)
00012572                            ; ---------------------------------------------------------------------------
00012572 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012576 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001257A 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001257E 01                         byte_11FA6:	dc.b 1
0001257F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012584 01                         byte_11FAC:	dc.b 1
00012585 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001258A 02                         byte_11FB2:	dc.b 2
0001258B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012590 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012595 01                         byte_11FBD:	dc.b 1
00012596 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001259B 01                         byte_11FC3:	dc.b 1
0001259C E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000125A1 02                         byte_11FC9:	dc.b 2
000125A2 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000125A7 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000125AC                            		even
000125AC                            		even
000125AC                            
000125AC                            ; ===========================================================================
000125AC                            ; ---------------------------------------------------------------------------
000125AC                            ; Object 61 - blocks (LZ)
000125AC                            ; ---------------------------------------------------------------------------
000125AC                            
000125AC                            Obj61:					; XREF: Obj_Index
000125AC 7000                       		moveq	#0,d0
000125AE 1028 0024                  		move.b	$24(a0),d0
000125B2 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000125B6 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000125BA                            ; ===========================================================================
000125BA 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
000125BC 0000                       		dc.w Obj61_Action-Obj61_Index
000125BE                            
000125BE 1010                       Obj61_Var:	dc.b $10, $10		; width, height
000125C0 200C                       		dc.b $20, $C
000125C2 1010                       		dc.b $10, $10
000125C4 1010                       		dc.b $10, $10
000125C6                            ; ===========================================================================
000125C6                            
000125C6                            Obj61_Main:				; XREF: Obj61_Index
000125C6 5428 0024                  		addq.b	#2,$24(a0)
000125CA 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
000125D2 317C 43E6 0002             		move.w	#$43E6,2(a0)
000125D8 117C 0004 0001             		move.b	#4,1(a0)
000125DE 117C 0003 0018             		move.b	#3,$18(a0)
000125E4 7000                       		moveq	#0,d0
000125E6 1028 0028                  		move.b	$28(a0),d0
000125EA E648                       		lsr.w	#3,d0
000125EC 0240 000E                  		andi.w	#$E,d0
000125F0 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000125F4 115A 0019                  		move.b	(a2)+,$19(a0)
000125F8 1152 0016                  		move.b	(a2),$16(a0)
000125FC E248                       		lsr.w	#1,d0
000125FE 1140 001A                  		move.b	d0,$1A(a0)
00012602 3168 0008 0034             		move.w	8(a0),$34(a0)
00012608 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001260E 1028 0028                  		move.b	$28(a0),d0
00012612 0200 000F                  		andi.b	#$F,d0
00012616 6700                       		beq.s	Obj61_Action
00012618 0C00 0007                  		cmpi.b	#7,d0
0001261C 6700                       		beq.s	Obj61_Action
0001261E 117C 0001 0038             		move.b	#1,$38(a0)
00012624                            
00012624                            Obj61_Action:				; XREF: Obj61_Index
00012624 3F28 0008                  		move.w	8(a0),-(sp)
00012628 7000                       		moveq	#0,d0
0001262A 1028 0028                  		move.b	$28(a0),d0
0001262E 0240 000F                  		andi.w	#$F,d0
00012632 D040                       		add.w	d0,d0
00012634 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012638 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
0001263C 381F                       		move.w	(sp)+,d4
0001263E 4A28 0001                  		tst.b	1(a0)
00012642 6A00                       		bpl.s	Obj61_ChkDel
00012644 7200                       		moveq	#0,d1
00012646 1228 0019                  		move.b	$19(a0),d1
0001264A 0641 000B                  		addi.w	#$B,d1
0001264E 7400                       		moveq	#0,d2
00012650 1428 0016                  		move.b	$16(a0),d2
00012654 3602                       		move.w	d2,d3
00012656 5243                       		addq.w	#1,d3
00012658 6100 D97A                  		bsr.w	SolidObject
0001265C 1144 003F                  		move.b	d4,$3F(a0)
00012660 6100 0000                  		bsr.w	loc_12180
00012664                            
00012664                            Obj61_ChkDel:
00012664 3028 0034                  		move.w	$34(a0),d0
00012668 0240 FF80                  		andi.w	#$FF80,d0
0001266C 3238 F700                  		move.w	($FFFFF700).w,d1
00012670 0441 0080                  		subi.w	#$80,d1
00012674 0241 FF80                  		andi.w	#$FF80,d1
00012678 9041                       		sub.w	d1,d0
0001267A 0C40 0280                  		cmpi.w	#$280,d0
0001267E 6200 B5C0                  		bhi.w	DeleteObject
00012682 6000 B580                  		bra.w	DisplaySprite
00012686                            ; ===========================================================================
00012686 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001268A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001268E 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012692 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012696                            ; ===========================================================================
00012696                            
00012696                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012696 4E75                       		rts	
00012698                            ; ===========================================================================
00012698                            
00012698                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012698 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001269C 6600                       		bne.s	loc_120D6	; if yes, branch
0001269E 0828 0003 0022             		btst	#3,$22(a0)
000126A4 6700                       		beq.s	locret_120D4
000126A6 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000126AC                            
000126AC                            locret_120D4:
000126AC 4E75                       		rts	
000126AE                            ; ===========================================================================
000126AE                            
000126AE                            loc_120D6:
000126AE 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000126B2 66F8                       		bne.s	locret_120D4	; if time remains, branch
000126B4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000126B8 4228 0038                  		clr.b	$38(a0)
000126BC 4E75                       		rts	
000126BE                            ; ===========================================================================
000126BE                            
000126BE                            Obj61_Type02:				; XREF: Obj61_TypeIndex
000126BE 6100 B51E                  		bsr.w	SpeedToPos
000126C2 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
000126C6 6100 0000                  		bsr.w	ObjHitFloor
000126CA 4A41                       		tst.w	d1
000126CC 6A00 0000                  		bpl.w	locret_12106
000126D0 5241                       		addq.w	#1,d1
000126D2 D368 000C                  		add.w	d1,$C(a0)
000126D6 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
000126DA 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126DE                            
000126DE                            locret_12106:
000126DE 4E75                       		rts	
000126E0                            ; ===========================================================================
000126E0                            
000126E0                            Obj61_Type04:				; XREF: Obj61_TypeIndex
000126E0 6100 B4FC                  		bsr.w	SpeedToPos
000126E4 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000126E8 6100 0000                  		bsr.w	ObjHitCeiling
000126EC 4A41                       		tst.w	d1
000126EE 6A00 0000                  		bpl.w	locret_12126
000126F2 9368 000C                  		sub.w	d1,$C(a0)
000126F6 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000126FA 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126FE                            
000126FE                            locret_12126:
000126FE 4E75                       		rts	
00012700                            ; ===========================================================================
00012700                            
00012700                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012700 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012706 6600                       		bne.s	locret_12138	; if not, branch
00012708 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001270C 4228 0038                  		clr.b	$38(a0)
00012710                            
00012710                            locret_12138:
00012710 4E75                       		rts	
00012712                            ; ===========================================================================
00012712                            
00012712                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012712 3038 F646                  		move.w	($FFFFF646).w,d0
00012716 9068 000C                  		sub.w	$C(a0),d0
0001271A 6700                       		beq.s	locret_1217E
0001271C 6400                       		bcc.s	loc_12162
0001271E 0C40 FFFE                  		cmpi.w	#-2,d0
00012722 6C00                       		bge.s	loc_1214E
00012724 70FE                       		moveq	#-2,d0
00012726                            
00012726                            loc_1214E:
00012726 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001272A 6100 0000                  		bsr.w	ObjHitCeiling
0001272E 4A41                       		tst.w	d1
00012730 6A00 0000                  		bpl.w	locret_12160
00012734 9368 000C                  		sub.w	d1,$C(a0)
00012738                            
00012738                            locret_12160:
00012738 4E75                       		rts	
0001273A                            ; ===========================================================================
0001273A                            
0001273A                            loc_12162:				; XREF: Obj61_Type07
0001273A 0C40 0002                  		cmpi.w	#2,d0
0001273E 6F00                       		ble.s	loc_1216A
00012740 7002                       		moveq	#2,d0
00012742                            
00012742                            loc_1216A:
00012742 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012746 6100 0000                  		bsr.w	ObjHitFloor
0001274A 4A41                       		tst.w	d1
0001274C 6A00 0000                  		bpl.w	locret_1217E
00012750 5241                       		addq.w	#1,d1
00012752 D368 000C                  		add.w	d1,$C(a0)
00012756                            
00012756                            locret_1217E:
00012756 4E75                       		rts	
00012758                            ; ===========================================================================
00012758                            
00012758                            loc_12180:				; XREF: Obj61_Action
00012758 4A28 0038                  		tst.b	$38(a0)
0001275C 6700                       		beq.s	locret_121C0
0001275E 0828 0003 0022             		btst	#3,$22(a0)
00012764 6600                       		bne.s	loc_1219A
00012766 4A28 003E                  		tst.b	$3E(a0)
0001276A 6700                       		beq.s	locret_121C0
0001276C 5928 003E                  		subq.b	#4,$3E(a0)
00012770 6000                       		bra.s	loc_121A6
00012772                            ; ===========================================================================
00012772                            
00012772                            loc_1219A:
00012772 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012778 6700                       		beq.s	locret_121C0
0001277A 5828 003E                  		addq.b	#4,$3E(a0)
0001277E                            
0001277E                            loc_121A6:
0001277E 1028 003E                  		move.b	$3E(a0),d0
00012782 4EB9 0000 2C6A             		jsr	(CalcSine).l
00012788 323C 0400                  		move.w	#$400,d1
0001278C C1C1                       		muls.w	d1,d0
0001278E 4840                       		swap	d0
00012790 D068 0030                  		add.w	$30(a0),d0
00012794 3140 000C                  		move.w	d0,$C(a0)
00012798                            
00012798                            locret_121C0:
00012798 4E75                       		rts	
0001279A                            ; ===========================================================================
0001279A                            ; ---------------------------------------------------------------------------
0001279A                            ; Sprite mappings - blocks (LZ)
0001279A                            ; ---------------------------------------------------------------------------
0001279A                            Map_obj61:
0001279A                            	include "_maps\obj61.asm"
0001279A                            ; ---------------------------------------------------------------------------
0001279A                            ; Sprite mappings - blocks (LZ)
0001279A                            ; ---------------------------------------------------------------------------
0001279A 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001279E 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000127A2 01                         byte_121CA:	dc.b 1
000127A3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000127A8 02                         byte_121D0:	dc.b 2
000127A9 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000127AE F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000127B3 01                         byte_121DB:	dc.b 1
000127B4 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000127B9 01                         byte_121E1:	dc.b 1
000127BA F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
000127C0 00                         		even
000127C0 00                         		even
000127C0                            
000127C0                            ; ===========================================================================
000127C0                            ; ---------------------------------------------------------------------------
000127C0                            ; Object 62 - gargoyle head (LZ)
000127C0                            ; ---------------------------------------------------------------------------
000127C0                            
000127C0                            Obj62:					; XREF: Obj_Index
000127C0 7000                       		moveq	#0,d0
000127C2 1028 0024                  		move.b	$24(a0),d0
000127C6 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
000127CA 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
000127CE 6000 D4DC                  		bra.w	MarkObjGone
000127D2                            ; ===========================================================================
000127D2 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
000127D4 0000                       		dc.w Obj62_MakeFire-Obj62_Index
000127D6 0000                       		dc.w Obj62_FireBall-Obj62_Index
000127D8 0000                       		dc.w Obj62_AniFire-Obj62_Index
000127DA                            
000127DA 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000127E2                            ; ===========================================================================
000127E2                            
000127E2                            Obj62_Main:				; XREF: Obj62_Index
000127E2 5428 0024                  		addq.b	#2,$24(a0)
000127E6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000127EE 317C 42E9 0002             		move.w	#$42E9,2(a0)
000127F4 0028 0004 0001             		ori.b	#4,1(a0)
000127FA 117C 0003 0018             		move.b	#3,$18(a0)
00012800 117C 0010 0019             		move.b	#$10,$19(a0)
00012806 1028 0028                  		move.b	$28(a0),d0	; get object type
0001280A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001280E 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012814 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001281A 0228 000F 0028             		andi.b	#$F,$28(a0)
00012820                            
00012820                            Obj62_MakeFire:				; XREF: Obj62_Index
00012820 5328 001E                  		subq.b	#1,$1E(a0)
00012824 6600                       		bne.s	Obj62_NoFire
00012826 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001282C 6100 B650                  		bsr.w	ChkObjOnScreen
00012830 6600                       		bne.s	Obj62_NoFire
00012832 6100 B856                  		bsr.w	SingleObjLoad
00012836 6600                       		bne.s	Obj62_NoFire
00012838 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
0001283C 5829 0024                  		addq.b	#4,$24(a1)
00012840 3368 0008 0008             		move.w	8(a0),8(a1)
00012846 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001284C 1368 0001 0001             		move.b	1(a0),1(a1)
00012852 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012858                            
00012858                            Obj62_NoFire:
00012858 4E75                       		rts	
0001285A                            ; ===========================================================================
0001285A                            
0001285A                            Obj62_FireBall:				; XREF: Obj62_Index
0001285A 5428 0024                  		addq.b	#2,$24(a0)
0001285E 117C 0008 0016             		move.b	#8,$16(a0)
00012864 117C 0008 0017             		move.b	#8,$17(a0)
0001286A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012872 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012878 0028 0004 0001             		ori.b	#4,1(a0)
0001287E 117C 0004 0018             		move.b	#4,$18(a0)
00012884 117C 0098 0020             		move.b	#$98,$20(a0)
0001288A 117C 0008 0019             		move.b	#8,$19(a0)
00012890 117C 0002 001A             		move.b	#2,$1A(a0)
00012896 5068 000C                  		addq.w	#8,$C(a0)
0001289A 317C 0200 0010             		move.w	#$200,$10(a0)
000128A0 0828 0000 0022             		btst	#0,$22(a0)
000128A6 6600                       		bne.s	Obj62_Sound
000128A8 4468 0010                  		neg.w	$10(a0)
000128AC                            
000128AC                            Obj62_Sound:
000128AC 303C 00AE                  		move.w	#$AE,d0
000128B0 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play lava ball sound
000128B6                            
000128B6                            Obj62_AniFire:				; XREF: Obj62_Index
000128B6 1038 FE05                  		move.b	($FFFFFE05).w,d0
000128BA 0200 0007                  		andi.b	#7,d0
000128BE 6600                       		bne.s	Obj62_StopFire
000128C0 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
000128C6                            
000128C6                            Obj62_StopFire:
000128C6 6100 B316                  		bsr.w	SpeedToPos
000128CA 0828 0000 0022             		btst	#0,$22(a0)
000128D0 6600                       		bne.s	Obj62_StopFire2
000128D2 76F8                       		moveq	#-8,d3
000128D4 6100 0000                  		bsr.w	ObjHitWallLeft
000128D8 4A41                       		tst.w	d1
000128DA 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000128DE 4E75                       		rts	
000128E0                            ; ===========================================================================
000128E0                            
000128E0                            Obj62_StopFire2:
000128E0 7608                       		moveq	#8,d3
000128E2 6100 0000                  		bsr.w	ObjHitWallRight
000128E6 4A41                       		tst.w	d1
000128E8 6B00 B356                  		bmi.w	DeleteObject
000128EC 4E75                       		rts	
000128EE                            ; ===========================================================================
000128EE                            ; ---------------------------------------------------------------------------
000128EE                            ; Sprite mappings - gargoyle head (LZ)
000128EE                            ; ---------------------------------------------------------------------------
000128EE                            Map_obj62:
000128EE                            	include "_maps\obj62.asm"
000128EE                            ; ---------------------------------------------------------------------------
000128EE                            ; Sprite mappings - gargoyle head (LZ)
000128EE                            ; ---------------------------------------------------------------------------
000128EE 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
000128F2 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
000128F6 03                         byte_12320:	dc.b 3
000128F7 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000128FC F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012901 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012906 01                         byte_12330:	dc.b 1
00012907 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001290C 01                         byte_12336:	dc.b 1
0001290D FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012912                            		even
00012912                            		even
00012912                            
00012912                            ; ===========================================================================
00012912                            ; ---------------------------------------------------------------------------
00012912                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012912                            ; ---------------------------------------------------------------------------
00012912                            
00012912                            Obj63:					; XREF: Obj_Index
00012912 7000                       		moveq	#0,d0
00012914 1028 0024                  		move.b	$24(a0),d0
00012918 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001291C 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012920 3028 0030                  		move.w	$30(a0),d0
00012924 0240 FF80                  		andi.w	#$FF80,d0
00012928 3238 F700                  		move.w	($FFFFF700).w,d1
0001292C 0441 0080                  		subi.w	#$80,d1
00012930 0241 FF80                  		andi.w	#$FF80,d1
00012934 9041                       		sub.w	d1,d0
00012936 0C40 0280                  		cmpi.w	#$280,d0
0001293A 6200                       		bhi.s	loc_1236A
0001293C                            
0001293C                            Obj63_Display:				; XREF: loc_1236A
0001293C 6000 B2C6                  		bra.w	DisplaySprite
00012940                            ; ===========================================================================
00012940                            
00012940                            loc_1236A:				; XREF: Obj63
00012940 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012946 6600                       		bne.s	loc_12378
00012948 0C40 FF80                  		cmpi.w	#-$80,d0
0001294C 64EE                       		bcc.s	Obj63_Display
0001294E                            
0001294E                            loc_12378:
0001294E 1028 002F                  		move.b	$2F(a0),d0
00012952 6A00 B2EC                  		bpl.w	DeleteObject
00012956 0240 007F                  		andi.w	#$7F,d0
0001295A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
0001295E 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012964 6000 B2DA                  		bra.w	DeleteObject
00012968                            ; ===========================================================================
00012968 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001296A 0000                       		dc.w loc_124B2-Obj63_Index
0001296C 0000                       		dc.w loc_124C2-Obj63_Index
0001296E 0000                       		dc.w loc_124DE-Obj63_Index
00012970                            ; ===========================================================================
00012970                            
00012970                            Obj63_Main:				; XREF: Obj63_Index
00012970 1028 0028                  		move.b	$28(a0),d0
00012974 6B00 0000                  		bmi.w	loc_12460
00012978 5428 0024                  		addq.b	#2,$24(a0)
0001297C 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012984 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001298A 0028 0004 0001             		ori.b	#4,1(a0)
00012990 117C 0010 0019             		move.b	#$10,$19(a0)
00012996 117C 0004 0018             		move.b	#4,$18(a0)
0001299C 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000129A2 6600                       		bne.s	loc_123E2
000129A4 5828 0024                  		addq.b	#4,$24(a0)
000129A8 317C 03F6 0002             		move.w	#$3F6,2(a0)
000129AE 117C 0001 0018             		move.b	#1,$18(a0)
000129B4 6000 0000                  		bra.w	loc_124DE
000129B8                            ; ===========================================================================
000129B8                            
000129B8                            loc_123E2:
000129B8 117C 0004 001A             		move.b	#4,$1A(a0)
000129BE 7000                       		moveq	#0,d0
000129C0 1028 0028                  		move.b	$28(a0),d0
000129C4 3200                       		move.w	d0,d1
000129C6 E648                       		lsr.w	#3,d0
000129C8 0240 001E                  		andi.w	#$1E,d0
000129CC 45FA 0000                  		lea	Obj63_Data(pc),a2
000129D0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000129D4 315A 0038                  		move.w	(a2)+,$38(a0)
000129D8 315A 0030                  		move.w	(a2)+,$30(a0)
000129DC 214A 003C                  		move.l	a2,$3C(a0)
000129E0 0241 000F                  		andi.w	#$F,d1
000129E4 E549                       		lsl.w	#2,d1
000129E6 1141 0038                  		move.b	d1,$38(a0)
000129EA 117C 0004 003A             		move.b	#4,$3A(a0)
000129F0 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000129F4 6700                       		beq.s	loc_1244C
000129F6 117C 0001 003B             		move.b	#1,$3B(a0)
000129FC 4428 003A                  		neg.b	$3A(a0)
00012A00 7200                       		moveq	#0,d1
00012A02 1228 0038                  		move.b	$38(a0),d1
00012A06 D228 003A                  		add.b	$3A(a0),d1
00012A0A B228 0039                  		cmp.b	$39(a0),d1
00012A0E 6500                       		bcs.s	loc_12448
00012A10 1001                       		move.b	d1,d0
00012A12 7200                       		moveq	#0,d1
00012A14 4A00                       		tst.b	d0
00012A16 6A00                       		bpl.s	loc_12448
00012A18 1228 0039                  		move.b	$39(a0),d1
00012A1C 5901                       		subq.b	#4,d1
00012A1E                            
00012A1E                            loc_12448:
00012A1E 1141 0038                  		move.b	d1,$38(a0)
00012A22                            
00012A22                            loc_1244C:
00012A22 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012A28 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012A2E 6100 0000                  		bsr.w	Obj63_ChangeDir
00012A32 6000 0000                  		bra.w	loc_124B2
00012A36                            ; ===========================================================================
00012A36                            
00012A36                            loc_12460:				; XREF: Obj63_Main
00012A36 1140 002F                  		move.b	d0,$2F(a0)
00012A3A 0240 007F                  		andi.w	#$7F,d0
00012A3E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012A42 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012A48 6600 B1F6                  		bne.w	DeleteObject
00012A4C D040                       		add.w	d0,d0
00012A4E 0240 001E                  		andi.w	#$1E,d0
00012A52 0640 0070                  		addi.w	#$70,d0
00012A56 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012A5C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012A60 321A                       		move.w	(a2)+,d1
00012A62 2248                       		movea.l	a0,a1
00012A64 6000                       		bra.s	Obj63_MakePtfms
00012A66                            ; ===========================================================================
00012A66                            
00012A66                            Obj63_Loop:
00012A66 6100 B622                  		bsr.w	SingleObjLoad
00012A6A 6600                       		bne.s	loc_124AA
00012A6C                            
00012A6C                            Obj63_MakePtfms:			; XREF: loc_12460
00012A6C 12BC 0063                  		move.b	#$63,0(a1)
00012A70 335A 0008                  		move.w	(a2)+,8(a1)
00012A74 335A 000C                  		move.w	(a2)+,$C(a1)
00012A78 301A                       		move.w	(a2)+,d0
00012A7A 1340 0028                  		move.b	d0,$28(a1)
00012A7E                            
00012A7E                            loc_124AA:
00012A7E 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012A82                            
00012A82 588F                       		addq.l	#4,sp
00012A84 4E75                       		rts	
00012A86                            ; ===========================================================================
00012A86                            
00012A86                            loc_124B2:				; XREF: Obj63_Index
00012A86 7200                       		moveq	#0,d1
00012A88 1228 0019                  		move.b	$19(a0),d1
00012A8C 4EB9 0000 792A             		jsr	(PlatformObject).l
00012A92 6000 0000                  		bra.w	sub_12502
00012A96                            ; ===========================================================================
00012A96                            
00012A96                            loc_124C2:				; XREF: Obj63_Index
00012A96 7200                       		moveq	#0,d1
00012A98 1228 0019                  		move.b	$19(a0),d1
00012A9C 4EB9 0000 7A9E             		jsr	(ExitPlatform).l
00012AA2 3F28 0008                  		move.w	8(a0),-(sp)
00012AA6 6100 0000                  		bsr.w	sub_12502
00012AAA 341F                       		move.w	(sp)+,d2
00012AAC 4EF9 0000 8008             		jmp	(MvSonicOnPtfm2).l
00012AB2                            ; ===========================================================================
00012AB2                            
00012AB2                            loc_124DE:				; XREF: Obj63_Index
00012AB2 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012AB6 0240 0003                  		andi.w	#3,d0
00012ABA 6600                       		bne.s	loc_124FC
00012ABC 7201                       		moveq	#1,d1
00012ABE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012AC2 6700                       		beq.s	loc_124F2
00012AC4 4401                       		neg.b	d1
00012AC6                            
00012AC6                            loc_124F2:
00012AC6 D328 001A                  		add.b	d1,$1A(a0)
00012ACA 0228 0003 001A             		andi.b	#3,$1A(a0)
00012AD0                            
00012AD0                            loc_124FC:
00012AD0 588F                       		addq.l	#4,sp
00012AD2 6000 D1D8                  		bra.w	MarkObjGone
00012AD6                            
00012AD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012AD6                            
00012AD6                            
00012AD6                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012AD6 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012ADA 6700                       		beq.s	loc_12520
00012ADC 4A28 003B                  		tst.b	$3B(a0)
00012AE0 6600                       		bne.s	loc_12520
00012AE2 117C 0001 003B             		move.b	#1,$3B(a0)
00012AE8 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012AEE 4428 003A                  		neg.b	$3A(a0)
00012AF2 6000                       		bra.s	loc_12534
00012AF4                            ; ===========================================================================
00012AF4                            
00012AF4                            loc_12520:
00012AF4 3028 0008                  		move.w	8(a0),d0
00012AF8 B068 0034                  		cmp.w	$34(a0),d0
00012AFC 6600                       		bne.s	loc_1256A
00012AFE 3028 000C                  		move.w	$C(a0),d0
00012B02 B068 0036                  		cmp.w	$36(a0),d0
00012B06 6600                       		bne.s	loc_1256A
00012B08                            
00012B08                            loc_12534:
00012B08 7200                       		moveq	#0,d1
00012B0A 1228 0038                  		move.b	$38(a0),d1
00012B0E D228 003A                  		add.b	$3A(a0),d1
00012B12 B228 0039                  		cmp.b	$39(a0),d1
00012B16 6500                       		bcs.s	loc_12552
00012B18 1001                       		move.b	d1,d0
00012B1A 7200                       		moveq	#0,d1
00012B1C 4A00                       		tst.b	d0
00012B1E 6A00                       		bpl.s	loc_12552
00012B20 1228 0039                  		move.b	$39(a0),d1
00012B24 5901                       		subq.b	#4,d1
00012B26                            
00012B26                            loc_12552:
00012B26 1141 0038                  		move.b	d1,$38(a0)
00012B2A 2268 003C                  		movea.l	$3C(a0),a1
00012B2E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012B34 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012B3A 6100 0000                  		bsr.w	Obj63_ChangeDir
00012B3E                            
00012B3E                            loc_1256A:
00012B3E 6100 B09E                  		bsr.w	SpeedToPos
00012B42 4E75                       		rts	
00012B44                            ; End of function sub_12502
00012B44                            
00012B44                            
00012B44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012B44                            
00012B44                            
00012B44                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012B44 7000                       		moveq	#0,d0
00012B46 343C FF00                  		move.w	#-$100,d2
00012B4A 3028 0008                  		move.w	8(a0),d0
00012B4E 9068 0034                  		sub.w	$34(a0),d0
00012B52 6400                       		bcc.s	loc_12584
00012B54 4440                       		neg.w	d0
00012B56 4442                       		neg.w	d2
00012B58                            
00012B58                            loc_12584:
00012B58 7200                       		moveq	#0,d1
00012B5A 363C FF00                  		move.w	#-$100,d3
00012B5E 3228 000C                  		move.w	$C(a0),d1
00012B62 9268 0036                  		sub.w	$36(a0),d1
00012B66 6400                       		bcc.s	loc_12598
00012B68 4441                       		neg.w	d1
00012B6A 4443                       		neg.w	d3
00012B6C                            
00012B6C                            loc_12598:
00012B6C B240                       		cmp.w	d0,d1
00012B6E 6500                       		bcs.s	loc_125C2
00012B70 3028 0008                  		move.w	8(a0),d0
00012B74 9068 0034                  		sub.w	$34(a0),d0
00012B78 6700                       		beq.s	loc_125AE
00012B7A 48C0                       		ext.l	d0
00012B7C E180                       		asl.l	#8,d0
00012B7E 81C1                       		divs.w	d1,d0
00012B80 4440                       		neg.w	d0
00012B82                            
00012B82                            loc_125AE:
00012B82 3140 0010                  		move.w	d0,$10(a0)
00012B86 3143 0012                  		move.w	d3,$12(a0)
00012B8A 4840                       		swap	d0
00012B8C 3140 000A                  		move.w	d0,$A(a0)
00012B90 4268 000E                  		clr.w	$E(a0)
00012B94 4E75                       		rts	
00012B96                            ; ===========================================================================
00012B96                            
00012B96                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B96 3228 000C                  		move.w	$C(a0),d1
00012B9A 9268 0036                  		sub.w	$36(a0),d1
00012B9E 6700                       		beq.s	loc_125D4
00012BA0 48C1                       		ext.l	d1
00012BA2 E181                       		asl.l	#8,d1
00012BA4 83C0                       		divs.w	d0,d1
00012BA6 4441                       		neg.w	d1
00012BA8                            
00012BA8                            loc_125D4:
00012BA8 3141 0012                  		move.w	d1,$12(a0)
00012BAC 3142 0010                  		move.w	d2,$10(a0)
00012BB0 4841                       		swap	d1
00012BB2 3141 000E                  		move.w	d1,$E(a0)
00012BB6 4268 000A                  		clr.w	$A(a0)
00012BBA 4E75                       		rts	
00012BBC                            ; End of function Obj63_ChangeDir
00012BBC                            
00012BBC                            ; ===========================================================================
00012BBC 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012BBE 0000                       		dc.w word_12610-Obj63_Data
00012BC0 0000                       		dc.w word_12628-Obj63_Data
00012BC2 0000                       		dc.w word_1263C-Obj63_Data
00012BC4 0000                       		dc.w word_12650-Obj63_Data
00012BC6 0000                       		dc.w word_12668-Obj63_Data
00012BC8 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012BD8 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012BE4 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012BF4 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012BFC 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012C10 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012C24 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012C3C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012C50                            
00012C50                            ; ---------------------------------------------------------------------------
00012C50                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C50                            ; ---------------------------------------------------------------------------
00012C50                            Map_obj63:
00012C50                            	include "_maps\obj63.asm"
00012C50                            ; ---------------------------------------------------------------------------
00012C50                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012C50                            ; ---------------------------------------------------------------------------
00012C50 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012C54 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012C58 0000                       		dc.w byte_1269E-Map_obj63
00012C5A 01                         byte_12686:	dc.b 1
00012C5B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012C60 01                         byte_1268C:	dc.b 1
00012C61 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012C66 01                         byte_12692:	dc.b 1
00012C67 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012C6C 01                         byte_12698:	dc.b 1
00012C6D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012C72 01                         byte_1269E:	dc.b 1
00012C73 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012C78                            		even
00012C78                            		even
00012C78                            
00012C78                            ; ===========================================================================
00012C78                            ; ---------------------------------------------------------------------------
00012C78                            ; Object 64 - bubbles (LZ)
00012C78                            ; ---------------------------------------------------------------------------
00012C78                            
00012C78                            Obj64:					; XREF: Obj_Index
00012C78 7000                       		moveq	#0,d0
00012C7A 1028 0024                  		move.b	$24(a0),d0
00012C7E 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012C82 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012C86                            ; ===========================================================================
00012C86 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012C88 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C8A 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C8C 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C8E 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C90 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C92                            ; ===========================================================================
00012C92                            
00012C92                            Obj64_Main:				; XREF: Obj64_Index
00012C92 5428 0024                  		addq.b	#2,$24(a0)
00012C96 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C9E 317C 8348 0002             		move.w	#$8348,2(a0)
00012CA4 117C 0084 0001             		move.b	#$84,1(a0)
00012CAA 117C 0010 0019             		move.b	#$10,$19(a0)
00012CB0 117C 0001 0018             		move.b	#1,$18(a0)
00012CB6 1028 0028                  		move.b	$28(a0),d0	; get object type
00012CBA 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012CBC 5028 0024                  		addq.b	#8,$24(a0)
00012CC0 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012CC4 1140 0032                  		move.b	d0,$32(a0)
00012CC8 1140 0033                  		move.b	d0,$33(a0)
00012CCC 117C 0006 001C             		move.b	#6,$1C(a0)
00012CD2 6000 0000                  		bra.w	Obj64_BblMaker
00012CD6                            ; ===========================================================================
00012CD6                            
00012CD6                            Obj64_Bubble:				; XREF: Obj64_Main
00012CD6 1140 001C                  		move.b	d0,$1C(a0)
00012CDA 3168 0008 0030             		move.w	8(a0),$30(a0)
00012CE0 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012CE6 4EB9 0000 2C44             		jsr	(RandomNumber).l
00012CEC 1140 0026                  		move.b	d0,$26(a0)
00012CF0                            
00012CF0                            Obj64_Animate:				; XREF: Obj64_Index
00012CF0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012CF6 4EB9 0000 ACCE             		jsr	AnimateSprite
00012CFC 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012D02 6600                       		bne.s	Obj64_ChkWater
00012D04 117C 0001 002E             		move.b	#1,$2E(a0)
00012D0A                            
00012D0A                            Obj64_ChkWater:				; XREF: Obj64_Index
00012D0A 3038 F646                  		move.w	($FFFFF646).w,d0
00012D0E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012D12 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012D14                            
00012D14                            Obj64_Burst:				; XREF: Obj64_Wobble
00012D14 117C 0006 0024             		move.b	#6,$24(a0)
00012D1A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012D1E 6000 0000                  		bra.w	Obj64_Display2
00012D22                            ; ===========================================================================
00012D22                            
00012D22                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012D22 1028 0026                  		move.b	$26(a0),d0
00012D26 5228 0026                  		addq.b	#1,$26(a0)
00012D2A 0240 007F                  		andi.w	#$7F,d0
00012D2E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012D34 1031 0000                  		move.b	(a1,d0.w),d0
00012D38 4880                       		ext.w	d0
00012D3A D068 0030                  		add.w	$30(a0),d0
00012D3E 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012D42 4A28 002E                  		tst.b	$2E(a0)
00012D46 6700                       		beq.s	Obj64_Display
00012D48 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012D4C 6700                       		beq.s	Obj64_Display	; if not, branch
00012D4E                            
00012D4E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012D52 303C 00AD                  		move.w	#$AD,d0
00012D56 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012D5C 43F8 D000                  		lea	($FFFFD000).w,a1
00012D60 4269 0010                  		clr.w	$10(a1)
00012D64 4269 0012                  		clr.w	$12(a1)
00012D68 4269 0014                  		clr.w	$14(a1)
00012D6C 137C 0015 001C             		move.b	#$15,$1C(a1)
00012D72 337C 0023 003E             		move.w	#$23,$3E(a1)
00012D78 137C 0000 003C             		move.b	#0,$3C(a1)
00012D7E 08A9 0005 0022             		bclr	#5,$22(a1)
00012D84 08A9 0004 0022             		bclr	#4,$22(a1)
00012D8A 0829 0002 0022             		btst	#2,$22(a1)
00012D90 6700 FF82                  		beq.w	Obj64_Burst
00012D94 08A9 0002 0022             		bclr	#2,$22(a1)
00012D9A 137C 0013 0016             		move.b	#$13,$16(a1)
00012DA0 137C 0009 0017             		move.b	#9,$17(a1)
00012DA6 5B69 000C                  		subq.w	#5,$C(a1)
00012DAA 6000 FF68                  		bra.w	Obj64_Burst
00012DAE                            ; ===========================================================================
00012DAE                            
00012DAE                            Obj64_Display:				; XREF: Obj64_Wobble
00012DAE 6100 AE2E                  		bsr.w	SpeedToPos
00012DB2 4A28 0001                  		tst.b	1(a0)
00012DB6 6A00                       		bpl.s	Obj64_Delete
00012DB8 4EFA AE4A                  		jmp	DisplaySprite
00012DBC                            ; ===========================================================================
00012DBC                            
00012DBC                            Obj64_Delete:
00012DBC 4EFA AE82                  		jmp	DeleteObject
00012DC0                            ; ===========================================================================
00012DC0                            
00012DC0                            Obj64_Display2:				; XREF: Obj64_Index
00012DC0 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012DC6 4EB9 0000 ACCE             		jsr	AnimateSprite
00012DCC 4A28 0001                  		tst.b	1(a0)
00012DD0 6A00                       		bpl.s	Obj64_Delete2
00012DD2 4EFA AE30                  		jmp	DisplaySprite
00012DD6                            ; ===========================================================================
00012DD6                            
00012DD6                            Obj64_Delete2:
00012DD6 4EFA AE68                  		jmp	DeleteObject
00012DDA                            ; ===========================================================================
00012DDA                            
00012DDA                            Obj64_Delete3:				; XREF: Obj64_Index
00012DDA 6000 AE64                  		bra.w	DeleteObject
00012DDE                            ; ===========================================================================
00012DDE                            
00012DDE                            Obj64_BblMaker:				; XREF: Obj64_Index
00012DDE 4A68 0036                  		tst.w	$36(a0)
00012DE2 6600                       		bne.s	loc_12874
00012DE4 3038 F646                  		move.w	($FFFFF646).w,d0
00012DE8 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012DEC 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012DF0 4A28 0001                  		tst.b	1(a0)
00012DF4 6A00 0000                  		bpl.w	Obj64_ChkDel
00012DF8 5368 0038                  		subq.w	#1,$38(a0)
00012DFC 6A00 0000                  		bpl.w	loc_12914
00012E00 317C 0001 0036             		move.w	#1,$36(a0)
00012E06                            
00012E06                            loc_1283A:
00012E06 4EB9 0000 2C44             		jsr	(RandomNumber).l
00012E0C 3200                       		move.w	d0,d1
00012E0E 0240 0007                  		andi.w	#7,d0
00012E12 0C40 0006                  		cmpi.w	#6,d0
00012E16 64EE                       		bcc.s	loc_1283A
00012E18                            
00012E18 1140 0034                  		move.b	d0,$34(a0)
00012E1C 0241 000C                  		andi.w	#$C,d1
00012E20 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012E26 D2C1                       		adda.w	d1,a1
00012E28 2149 003C                  		move.l	a1,$3C(a0)
00012E2C 5328 0032                  		subq.b	#1,$32(a0)
00012E30 6A00                       		bpl.s	loc_12872
00012E32 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012E38 08E8 0007 0036             		bset	#7,$36(a0)
00012E3E                            
00012E3E                            loc_12872:
00012E3E 6000                       		bra.s	loc_1287C
00012E40                            ; ===========================================================================
00012E40                            
00012E40                            loc_12874:				; XREF: Obj64_BblMaker
00012E40 5368 0038                  		subq.w	#1,$38(a0)
00012E44 6A00 0000                  		bpl.w	loc_12914
00012E48                            
00012E48                            loc_1287C:
00012E48 4EB9 0000 2C44             		jsr	(RandomNumber).l
00012E4E 0240 001F                  		andi.w	#$1F,d0
00012E52 3140 0038                  		move.w	d0,$38(a0)
00012E56 6100 B232                  		bsr.w	SingleObjLoad
00012E5A 6600                       		bne.s	loc_128F8
00012E5C 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012E60 3368 0008 0008             		move.w	8(a0),8(a1)
00012E66 4EB9 0000 2C44             		jsr	(RandomNumber).l
00012E6C 0240 000F                  		andi.w	#$F,d0
00012E70 5140                       		subq.w	#8,d0
00012E72 D169 0008                  		add.w	d0,8(a1)
00012E76 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012E7C 7000                       		moveq	#0,d0
00012E7E 1028 0034                  		move.b	$34(a0),d0
00012E82 2468 003C                  		movea.l	$3C(a0),a2
00012E86 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E8C 0828 0007 0036             		btst	#7,$36(a0)
00012E92 6700                       		beq.s	loc_128F8
00012E94 4EB9 0000 2C44             		jsr	(RandomNumber).l
00012E9A 0240 0003                  		andi.w	#3,d0
00012E9E 6600                       		bne.s	loc_128E4
00012EA0 08E8 0006 0036             		bset	#6,$36(a0)
00012EA6 6600                       		bne.s	loc_128F8
00012EA8 137C 0002 0028             		move.b	#2,$28(a1)
00012EAE                            
00012EAE                            loc_128E4:
00012EAE 4A28 0034                  		tst.b	$34(a0)
00012EB2 6600                       		bne.s	loc_128F8
00012EB4 08E8 0006 0036             		bset	#6,$36(a0)
00012EBA 6600                       		bne.s	loc_128F8
00012EBC 137C 0002 0028             		move.b	#2,$28(a1)
00012EC2                            
00012EC2                            loc_128F8:
00012EC2 5328 0034                  		subq.b	#1,$34(a0)
00012EC6 6A00                       		bpl.s	loc_12914
00012EC8 4EB9 0000 2C44             		jsr	(RandomNumber).l
00012ECE 0240 007F                  		andi.w	#$7F,d0
00012ED2 0640 0080                  		addi.w	#$80,d0
00012ED6 D168 0038                  		add.w	d0,$38(a0)
00012EDA 4268 0036                  		clr.w	$36(a0)
00012EDE                            
00012EDE                            loc_12914:
00012EDE 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EE4 4EB9 0000 ACCE             		jsr	AnimateSprite
00012EEA                            
00012EEA                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012EEA 3028 0008                  		move.w	8(a0),d0
00012EEE 0240 FF80                  		andi.w	#$FF80,d0
00012EF2 3238 F700                  		move.w	($FFFFF700).w,d1
00012EF6 0441 0080                  		subi.w	#$80,d1
00012EFA 0241 FF80                  		andi.w	#$FF80,d1
00012EFE 9041                       		sub.w	d1,d0
00012F00 0C40 0280                  		cmpi.w	#$280,d0
00012F04 6200 AD3A                  		bhi.w	DeleteObject
00012F08 3038 F646                  		move.w	($FFFFF646).w,d0
00012F0C B068 000C                  		cmp.w	$C(a0),d0
00012F10 6500 ACF2                  		bcs.w	DisplaySprite
00012F14 4E75                       		rts	
00012F16                            ; ===========================================================================
00012F16                            ; bubble production sequence
00012F16                            
00012F16                            ; 0 = small bubble, 1 =	large bubble
00012F16                            
00012F16 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012F28                            
00012F28                            ; ===========================================================================
00012F28                            
00012F28                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012F28 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012F2C 6B00                       		bmi.s	loc_12998
00012F2E 43F8 D000                  		lea	($FFFFD000).w,a1
00012F32 3029 0008                  		move.w	8(a1),d0
00012F36 3228 0008                  		move.w	8(a0),d1
00012F3A 0441 0010                  		subi.w	#$10,d1
00012F3E B240                       		cmp.w	d0,d1
00012F40 6400                       		bcc.s	loc_12998
00012F42 0641 0020                  		addi.w	#$20,d1
00012F46 B240                       		cmp.w	d0,d1
00012F48 6500                       		bcs.s	loc_12998
00012F4A 3029 000C                  		move.w	$C(a1),d0
00012F4E 3228 000C                  		move.w	$C(a0),d1
00012F52 B240                       		cmp.w	d0,d1
00012F54 6400                       		bcc.s	loc_12998
00012F56 0641 0010                  		addi.w	#$10,d1
00012F5A B240                       		cmp.w	d0,d1
00012F5C 6500                       		bcs.s	loc_12998
00012F5E 7001                       		moveq	#1,d0
00012F60 4E75                       		rts	
00012F62                            ; ===========================================================================
00012F62                            
00012F62                            loc_12998:
00012F62 7000                       		moveq	#0,d0
00012F64 4E75                       		rts	
00012F66                            ; ===========================================================================
00012F66                            Ani_obj64:
00012F66                            	include "_anim\obj64.asm"
00012F66                            ; ---------------------------------------------------------------------------
00012F66                            ; Animation script - bubbles (LZ)
00012F66                            ; ---------------------------------------------------------------------------
00012F66 0000                       		dc.w byte_129AA-Ani_obj64
00012F68 0000                       		dc.w byte_129B0-Ani_obj64
00012F6A 0000                       		dc.w byte_129B6-Ani_obj64
00012F6C 0000                       		dc.w byte_129BE-Ani_obj64
00012F6E 0000                       		dc.w byte_129BE-Ani_obj64
00012F70 0000                       		dc.w byte_129C0-Ani_obj64
00012F72 0000                       		dc.w byte_129C6-Ani_obj64
00012F74 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012F7A 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012F80 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012F88 04FC                       byte_129BE:	dc.b 4,	$FC
00012F8A 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F90 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F96 00                         		even
00012F96 00                         		even
00012F96                            
00012F96                            ; ---------------------------------------------------------------------------
00012F96                            ; Sprite mappings - bubbles (LZ)
00012F96                            ; ---------------------------------------------------------------------------
00012F96                            Map_obj64:
00012F96                            	include "_maps\obj64.asm"
00012F96                            ; ---------------------------------------------------------------------------
00012F96                            ; Sprite mappings - bubbles (LZ)
00012F96                            ; ---------------------------------------------------------------------------
00012F96 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F9A 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F9E 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012FA2 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012FA6 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012FAA 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012FAE 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012FB2 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012FB6 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012FBA 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012FBE 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012FC2 0000                       		dc.w byte_12A9C-Map_obj64
00012FC4 01                         byte_129FA:	dc.b 1
00012FC5 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012FCA 01                         byte_12A00:	dc.b 1
00012FCB FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012FD0 01                         byte_12A06:	dc.b 1
00012FD1 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012FD6 01                         byte_12A0C:	dc.b 1
00012FD7 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012FDC 01                         byte_12A12:	dc.b 1
00012FDD F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012FE2 01                         byte_12A18:	dc.b 1
00012FE3 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012FE8 01                         byte_12A1E:	dc.b 1
00012FE9 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012FEE 04                         byte_12A24:	dc.b 4
00012FEF F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012FF4 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012FF9 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012FFE 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013003 04                         byte_12A39:	dc.b 4
00013004 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013009 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001300E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013013 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013018 01                         byte_12A4E:	dc.b 1
00013019 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001301E 01                         byte_12A54:	dc.b 1
0001301F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013024 01                         byte_12A5A:	dc.b 1
00013025 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
0001302A 01                         byte_12A60:	dc.b 1
0001302B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013030 01                         byte_12A66:	dc.b 1
00013031 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013036 01                         byte_12A6C:	dc.b 1
00013037 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
0001303C 01                         byte_12A72:	dc.b 1
0001303D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013042 01                         byte_12A78:	dc.b 1
00013043 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013048 01                         byte_12A7E:	dc.b 1
00013049 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001304E 01                         byte_12A84:	dc.b 1
0001304F F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013054 01                         byte_12A8A:	dc.b 1
00013055 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
0001305A 01                         byte_12A90:	dc.b 1
0001305B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013060 01                         byte_12A96:	dc.b 1
00013061 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013066 00                         byte_12A9C:	dc.b 0
00013068 00                         		even
00013068 00                         		even
00013068                            
00013068                            ; ===========================================================================
00013068                            ; ---------------------------------------------------------------------------
00013068                            ; Object 65 - waterfalls (LZ)
00013068                            ; ---------------------------------------------------------------------------
00013068                            
00013068                            Obj65:					; XREF: Obj_Index
00013068 7000                       		moveq	#0,d0
0001306A 1028 0024                  		move.b	$24(a0),d0
0001306E 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013072 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013076                            ; ===========================================================================
00013076 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013078 0000                       		dc.w Obj65_Animate-Obj65_Index
0001307A 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001307C 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001307E 0000                       		dc.w loc_12B36-Obj65_Index
00013080                            ; ===========================================================================
00013080                            
00013080                            Obj65_Main:				; XREF: Obj65_Index
00013080 5828 0024                  		addq.b	#4,$24(a0)
00013084 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001308C 317C 4259 0002             		move.w	#$4259,2(a0)
00013092 0028 0004 0001             		ori.b	#4,1(a0)
00013098 117C 0018 0019             		move.b	#$18,$19(a0)
0001309E 117C 0001 0018             		move.b	#1,$18(a0)
000130A4 1028 0028                  		move.b	$28(a0),d0	; get object type
000130A8 6A00                       		bpl.s	loc_12AE6
000130AA 08E8 0007 0002             		bset	#7,2(a0)
000130B0                            
000130B0                            loc_12AE6:
000130B0 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
000130B4 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
000130B8 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000130BC 6600                       		bne.s	Obj65_ChkDel	; if not, branch
000130BE 4228 0018                  		clr.b	$18(a0)
000130C2 5528 0024                  		subq.b	#2,$24(a0)
000130C6 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
000130CC 6700                       		beq.s	loc_12B0A	; if not, branch
000130CE 117C 0006 0024             		move.b	#6,$24(a0)
000130D4                            
000130D4                            loc_12B0A:
000130D4 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
000130DA 6700                       		beq.s	Obj65_Animate	; if not, branch
000130DC 117C 0008 0024             		move.b	#8,$24(a0)
000130E2                            
000130E2                            Obj65_Animate:				; XREF: Obj65_Index
000130E2 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000130E8 4EB9 0000 ACCE             		jsr	AnimateSprite
000130EE                            
000130EE                            Obj65_ChkDel:				; XREF: Obj65_Index
000130EE 6000 CBBC                  		bra.w	MarkObjGone
000130F2                            ; ===========================================================================
000130F2                            
000130F2                            Obj65_FixHeight:			; XREF: Obj65_Index
000130F2 3038 F646                  		move.w	($FFFFF646).w,d0
000130F6 0440 0010                  		subi.w	#$10,d0
000130FA 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000130FE 60E2                       		bra.s	Obj65_Animate
00013100                            ; ===========================================================================
00013100                            
00013100                            loc_12B36:				; XREF: Obj65_Index
00013100 08A8 0007 0002             		bclr	#7,2(a0)
00013106 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
0001310C 6600                       		bne.s	Obj65_Animate2
0001310E 08E8 0007 0002             		bset	#7,2(a0)
00013114                            
00013114                            Obj65_Animate2:
00013114 60CC                       		bra.s	Obj65_Animate
00013116                            ; ===========================================================================
00013116                            Ani_obj65:
00013116                            	include "_anim\obj65.asm"
00013116                            ; ---------------------------------------------------------------------------
00013116                            ; Animation script - waterfall (LZ)
00013116                            ; ---------------------------------------------------------------------------
00013116 0000                       		dc.w byte_12B4E-Ani_obj65
00013118 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001311E 00                         		even
0001311E 00                         		even
0001311E                            
0001311E                            ; ---------------------------------------------------------------------------
0001311E                            ; Sprite mappings - waterfalls (LZ)
0001311E                            ; ---------------------------------------------------------------------------
0001311E                            Map_obj65:
0001311E                            	include "_maps\obj65.asm"
0001311E                            ; ---------------------------------------------------------------------------
0001311E                            ; Sprite mappings - waterfalls (LZ)
0001311E                            ; ---------------------------------------------------------------------------
0001311E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013122 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013126 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
0001312A 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001312E 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013132 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013136 01                         byte_12B6C:	dc.b 1
00013137 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0001313C 02                         byte_12B72:	dc.b 2
0001313D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013142 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013147 02                         byte_12B7D:	dc.b 2
00013148 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001314D 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013152 01                         byte_12B88:	dc.b 1
00013153 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013158 02                         byte_12B8E:	dc.b 2
00013159 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001315E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013163 01                         byte_12B99:	dc.b 1
00013164 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013169 01                         byte_12B9F:	dc.b 1
0001316A F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001316F 01                         byte_12BA5:	dc.b 1
00013170 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013175 02                         byte_12BAB:	dc.b 2
00013176 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001317B 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013180 02                         byte_12BB6:	dc.b 2
00013181 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013186 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001318B 02                         byte_12BC1:	dc.b 2
0001318C F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013191 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013196 02                         byte_12BCC:	dc.b 2
00013197 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001319C F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000131A2 00                         		even
000131A2 00                         		even
000131A2                            
000131A2                            ; ===========================================================================
000131A2                            ; ---------------------------------------------------------------------------
000131A2                            ; Object 01 - Sonic
000131A2                            ; ---------------------------------------------------------------------------
000131A2                            
000131A2                            Obj01:					; XREF: Obj_Index
000131A2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000131A6 6700                       		beq.s	Obj01_Normal	; if not, branch
000131A8 4EF9 0000 0000             		jmp	DebugMode
000131AE                            ; ===========================================================================
000131AE                            
000131AE                            Obj01_Normal:
000131AE 7000                       		moveq	#0,d0
000131B0 1028 0024                  		move.b	$24(a0),d0
000131B4 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
000131B8 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
000131BC                            ; ===========================================================================
000131BC 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
000131BE 0000                       		dc.w Obj01_Control-Obj01_Index
000131C0 0000                       		dc.w Obj01_Hurt-Obj01_Index
000131C2 0000                       		dc.w Obj01_Death-Obj01_Index
000131C4 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
000131C6                            ; ===========================================================================
000131C6                            
000131C6                            Player_Maps:
000131C6 0000 0000                  	dc.l	Map_Sonic
000131CA 0000 0000                  	dc.l	Map_Sonic ; gronic
000131CE                            	; insert player mapping here
000131CE                            	
000131CE                            Obj01_Main:				; XREF: Obj01_Index
000131CE 5428 0024                  		addq.b	#2,$24(a0)
000131D2 117C 0013 0016             		move.b	#$13,$16(a0)
000131D8 117C 0009 0017             		move.b	#9,$17(a0)
000131DE                            		
000131DE 7000                       		moveq	#0,d0
000131E0 1038 FFE8                  		move.b	(v_character),d0
000131E4 E548                       		lsl.w	#2,d0
000131E6 43FA FFDE                  		lea 	Player_Maps(pc),a1
000131EA 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000131F0                            		
000131F0 317C 0780 0002             		move.w	#$780,2(a0)
000131F6 117C 0002 0018             		move.b	#2,$18(a0)
000131FC 117C 0018 0019             		move.b	#$18,$19(a0)
00013202 117C 0004 0001             		move.b	#4,1(a0)
00013208 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001320E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013214 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001321A                            
0001321A                            Obj01_Control:				; XREF: Obj01_Index
0001321A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001321E 6700                       		beq.s	loc_12C58	; if not, branch
00013220 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013226 6700                       		beq.s	loc_12C58	; if not, branch
00013228 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001322E 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013232 4E75                       		rts	
00013234                            ; ===========================================================================
00013234                            
00013234                            loc_12C58:
00013234 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013238 6600                       		bne.s	loc_12C64	; if yes, branch
0001323A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013240                            
00013240                            loc_12C64:
00013240 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013246 6600                       		bne.s	loc_12C7E	; if yes, branch
00013248 7000                       		moveq	#0,d0
0001324A 1028 0022                  		move.b	$22(a0),d0
0001324E 0240 0006                  		andi.w	#6,d0
00013252 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013256 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
0001325A                            
0001325A                            loc_12C7E:
0001325A 6100                       		bsr.s	Sonic_Display
0001325C 6100 0000                  		bsr.w	Sonic_RecordPos
00013260 6100 0000                  		bsr.w	Sonic_Water
00013264 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
0001326A 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013270 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013274 6700                       		beq.s	loc_12CA6
00013276 4A28 001C                  		tst.b	$1C(a0)
0001327A 6600                       		bne.s	loc_12CA6
0001327C 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013282                            
00013282                            loc_12CA6:
00013282 6100 0000                  		bsr.w	Sonic_Animate
00013286 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001328A 6B00                       		bmi.s	loc_12CB6
0001328C 4EB9 0000 0000             		jsr	TouchResponse
00013292                            
00013292                            loc_12CB6:
00013292 6100 0000                  		bsr.w	Sonic_Loops
00013296 6100 0000                  		bsr.w	LoadSonicDynPLC
0001329A 4E75                       		rts	
0001329C                            ; ===========================================================================
0001329C 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001329E 0000                       		dc.w Obj01_MdJump-Obj01_Modes
000132A0 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
000132A2 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
000132A4                            ; ---------------------------------------------------------------------------
000132A4                            ; Music	to play	after invincibility wears off
000132A4                            ; ---------------------------------------------------------------------------
000132A4                            ; ===========================================================================
000132A4                            
000132A4                            Sonic_Display:				; XREF: loc_12C7E
000132A4 3028 0030                  		move.w	$30(a0),d0
000132A8 6700                       		beq.s	Obj01_Display
000132AA 5368 0030                  		subq.w	#1,$30(a0)
000132AE E648                       		lsr.w	#3,d0
000132B0 6400                       		bcc.s	Obj01_ChkInvin
000132B2                            
000132B2                            Obj01_Display:
000132B2 4EBA A950                  		jsr	DisplaySprite
000132B6                            
000132B6                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
000132B6                             
000132B6                            Obj01_ChkInvin:
000132B6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000132BA 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
000132BE 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
000132C2 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
000132C6 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
000132CA 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
000132CE 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000132D2 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
000132D6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000132DC 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
000132E0 7000                       		moveq	#0,d0
000132E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000132E6                             
000132E6 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000132EC 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000132EE 43F9 0000 3B0A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000132F4 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132F6                             
000132F6                            Obj01_GetBgm2:
000132F6 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000132FC 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000132FE 43F9 0000 3B12             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013304 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013306                             
00013306                            Obj01_GetBgm3:
00013306 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001330C 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001330E 43F9 0000 3B18             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013314 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013316                             
00013316                            Obj01_GetBgm4:
00013316 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001331C 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001331E 43F9 0000 3B1E             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013324                             
00013324                            Obj01_PlayMusic:
00013324 1031 0000                  		move.b	(a1,d0.w),d0
00013328 4EB9 0000 15C0             		jsr	(PlaySound).l	; play normal music
0001332E                             
0001332E                            ; NineKode ends here.
0001332E                            
0001332E                            Obj01_RmvInvin:
0001332E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013334                            
00013334                            Obj01_ChkShoes:
00013334 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013338 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001333A 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001333E 6700                       		beq.s	Obj01_ExitChk
00013340 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013344 6600                       		bne.s	Obj01_ExitChk
00013346 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001334C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013352 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013358 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
0001335E 303C 00E3                  		move.w	#$E3,d0
00013362 4EF9 0000 15C0             		jmp	(PlaySound).l	; run music at normal speed
00013368                            ; ===========================================================================
00013368                            
00013368                            Obj01_ExitChk:
00013368 4E75                       		rts	
0001336A                            
0001336A                            ; ---------------------------------------------------------------------------
0001336A                            ; Subroutine to	record Sonic's previous positions for invincibility stars
0001336A                            ; ---------------------------------------------------------------------------
0001336A                            
0001336A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001336A                            
0001336A                            
0001336A                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
0001336A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001336E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013372 43F1 0000                  		lea	(a1,d0.w),a1
00013376 32E8 0008                  		move.w	8(a0),(a1)+
0001337A 32E8 000C                  		move.w	$C(a0),(a1)+
0001337E 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013382 4E75                       		rts	
00013384                            ; End of function Sonic_RecordPos
00013384                            
00013384                            ; ---------------------------------------------------------------------------
00013384                            ; Subroutine for Sonic when he's underwater
00013384                            ; ---------------------------------------------------------------------------
00013384                            
00013384                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013384                            
00013384                            
00013384                            Sonic_Water:				; XREF: loc_12C7E
00013384 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001338A 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001338C                            
0001338C                            locret_12D80:
0001338C 4E75                       		rts	
0001338E                            ; ===========================================================================
0001338E                            
0001338E                            Obj01_InWater:
0001338E 3038 F646                  		move.w	($FFFFF646).w,d0
00013392 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013396 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013398 08E8 0006 0022             		bset	#6,$22(a0)
0001339E 66EC                       		bne.s	locret_12D80
000133A0 6100 0000                  		bsr.w	ResumeMusic
000133A4 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
000133AA 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
000133B0 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
000133B6 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
000133BC 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
000133C2 E0E8 0010                  		asr	$10(a0)
000133C6 E0E8 0012                  		asr	$12(a0)
000133CA E0E8 0012                  		asr	$12(a0)
000133CE 67BC                       		beq.s	locret_12D80
000133D0 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000133D6 303C 00AA                  		move.w	#$AA,d0
000133DA 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play splash sound
000133E0                            ; ===========================================================================
000133E0                            
000133E0                            Obj01_OutWater:
000133E0 08A8 0006 0022             		bclr	#6,$22(a0)
000133E6 67A4                       		beq.s	locret_12D80
000133E8 6100 0000                  		bsr.w	ResumeMusic
000133EC 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000133F2 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000133F8 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000133FE E1E8 0012                  		asl	$12(a0)
00013402 6700 FF88                  		beq.w	locret_12D80
00013406 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001340C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013412 6E00                       		bgt.s	loc_12E0E
00013414 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001341A                            
0001341A                            loc_12E0E:
0001341A 303C 00AA                  		move.w	#$AA,d0
0001341E 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play splash sound
00013424                            ; End of function Sonic_Water
00013424                            
00013424                            ; ===========================================================================
00013424                            ; ---------------------------------------------------------------------------
00013424                            ; Modes	for controlling	Sonic
00013424                            ; ---------------------------------------------------------------------------
00013424                            
00013424                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013424 6100 0000                  		bsr.w	Sonic_Jump
00013428 6100 0000                  		bsr.w	Sonic_SlopeResist
0001342C 6100 0000                  		bsr.w	Sonic_Move
00013430 6100 0000                  		bsr.w	Sonic_Roll
00013434 6100 0000                  		bsr.w	Sonic_LevelBound
00013438 4EBA A7A4                  		jsr	SpeedToPos
0001343C 6100 0000                  		bsr.w	Sonic_AnglePos
00013440 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013444 4E75                       		rts	
00013446                            ; ===========================================================================
00013446                            
00013446                            Obj01_MdJump:				; XREF: Obj01_Modes
00013446 6100 0000                  		bsr.w	Sonic_JumpHeight
0001344A 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001344E 6100 0000                  		bsr.w	Sonic_LevelBound
00013452 4EBA A75E                  		jsr	ObjectFall
00013456 0828 0006 0022             		btst	#6,$22(a0)
0001345C 6700                       		beq.s	loc_12E5C
0001345E 0468 0028 0012             		subi.w	#$28,$12(a0)
00013464                            
00013464                            loc_12E5C:
00013464 6100 0000                  		bsr.w	Sonic_JumpAngle
00013468 6100 0000                  		bsr.w	Sonic_Floor
0001346C 4E75                       		rts	
0001346E                            ; ===========================================================================
0001346E                            
0001346E                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001346E 6100 0000                  		bsr.w	Sonic_Jump
00013472 6100 0000                  		bsr.w	Sonic_RollRepel
00013476 6100 0000                  		bsr.w	Sonic_RollSpeed
0001347A 6100 0000                  		bsr.w	Sonic_LevelBound
0001347E 4EBA A75E                  		jsr	SpeedToPos
00013482 6100 0000                  		bsr.w	Sonic_AnglePos
00013486 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001348A 4E75                       		rts	
0001348C                            ; ===========================================================================
0001348C                            
0001348C                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001348C 6100 0000                  		bsr.w	Sonic_JumpHeight
00013490 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013494 6100 0000                  		bsr.w	Sonic_LevelBound
00013498 6100 0000                  		bsr.w	Sonic_AirUnroll
0001349C 4EBA A714                  		jsr	ObjectFall
000134A0 0828 0006 0022             		btst	#6,$22(a0)
000134A6 6700                       		beq.s	loc_12EA6
000134A8 0468 0028 0012             		subi.w	#$28,$12(a0)
000134AE                            
000134AE                            loc_12EA6:
000134AE 6100 0000                  		bsr.w	Sonic_JumpAngle
000134B2 6100 0000                  		bsr.w	Sonic_Floor
000134B6 4E75                       		rts	
000134B8                            ; ---------------------------------------------------------------------------
000134B8                            ; Subroutine to	make Sonic walk/run
000134B8                            ; ---------------------------------------------------------------------------
000134B8                            
000134B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134B8                            
000134B8                            
000134B8                            Sonic_Move:				; XREF: Obj01_MdNormal
000134B8 3C38 F760                  		move.w	($FFFFF760).w,d6
000134BC 3A38 F762                  		move.w	($FFFFF762).w,d5
000134C0 3838 F764                  		move.w	($FFFFF764).w,d4
000134C4 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000134C8 6600 0000                  		bne.w	loc_12FEE
000134CC 4A68 003E                  		tst.w	$3E(a0)
000134D0 6600 0000                  		bne.w	Obj01_ResetScr
000134D4 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000134DA 6700                       		beq.s	Obj01_NotLeft	; if not, branch
000134DC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134E2 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000134E4 6100 0000                  		bsr.w	Sonic_MoveLeft
000134E8                            
000134E8                            Obj01_NotLeft:
000134E8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000134EE 6700                       		beq.s	Obj01_NotRight	; if not, branch
000134F0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000134F6 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000134F8 6100 0000                  		bsr.w	Sonic_MoveLeft
000134FC 6000                       		bra.s	Obj01_NotRight
000134FE                            
000134FE                            Obj01_MoveRight:
000134FE 6100 0000                  		bsr.w	Sonic_MoveRight
00013502                            
00013502                            Obj01_NotRight:
00013502 1028 0026                  		move.b	$26(a0),d0
00013506 0600 0020                  		addi.b	#$20,d0
0001350A 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001350E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013512 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013516 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001351A 08A8 0005 0022             		bclr	#5,$22(a0)
00013520 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013526 0828 0003 0022             		btst	#3,$22(a0)
0001352C 6700                       		beq.s	Sonic_Balance
0001352E 7000                       		moveq	#0,d0
00013530 1028 003D                  		move.b	$3D(a0),d0
00013534 ED48                       		lsl.w	#6,d0
00013536 43F8 D000                  		lea	($FFFFD000).w,a1
0001353A 43F1 0000                  		lea	(a1,d0.w),a1
0001353E 4A29 0022                  		tst.b	$22(a1)
00013542 6B00                       		bmi.s	Sonic_LookUp
00013544 7200                       		moveq	#0,d1
00013546 1229 0019                  		move.b	$19(a1),d1
0001354A 3401                       		move.w	d1,d2
0001354C D442                       		add.w	d2,d2
0001354E 5942                       		subq.w	#4,d2
00013550 D268 0008                  		add.w	8(a0),d1
00013554 9269 0008                  		sub.w	8(a1),d1
00013558 0C41 0004                  		cmpi.w	#4,d1
0001355C 6D00                       		blt.s	loc_12F6A
0001355E B242                       		cmp.w	d2,d1
00013560 6C00                       		bge.s	loc_12F5A
00013562 6000                       		bra.s	Sonic_LookUp
00013564                            ; ===========================================================================
00013564                            
00013564                            Sonic_Balance:
00013564 4EB9 0000 0000             		jsr	ObjHitFloor
0001356A 0C41 000C                  		cmpi.w	#$C,d1
0001356E 6D00                       		blt.s	Sonic_LookUp
00013570 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013576 6600                       		bne.s	loc_12F62
00013578                            
00013578                            loc_12F5A:
00013578 08A8 0000 0022             		bclr	#0,$22(a0)
0001357E 6000                       		bra.s	loc_12F70
00013580                            ; ===========================================================================
00013580                            
00013580                            loc_12F62:
00013580 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013586 6600                       		bne.s	Sonic_LookUp
00013588                            
00013588                            loc_12F6A:
00013588 08E8 0000 0022             		bset	#0,$22(a0)
0001358E                            
0001358E                            loc_12F70:
0001358E 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013594 6000                       		bra.s	Obj01_ResetScr
00013596                            ; ===========================================================================
00013596                            
00013596                            Sonic_LookUp:
00013596 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001359C 6700                       		beq.s	Sonic_Duck	; if not, branch
0001359E 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000135A4 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000135AA 6700                       		beq.s	loc_12FC2
000135AC 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000135B0 6000                       		bra.s	loc_12FC2
000135B2                            ; ===========================================================================
000135B2                            
000135B2                            Sonic_Duck:
000135B2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000135B8 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000135BA 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000135C0 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000135C6 6700                       		beq.s	loc_12FC2
000135C8 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000135CC 6000                       		bra.s	loc_12FC2
000135CE                            ; ===========================================================================
000135CE                            
000135CE                            Obj01_ResetScr:
000135CE 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
000135D4 6700                       		beq.s	loc_12FC2	; if yes, branch
000135D6 6400                       		bcc.s	loc_12FBE
000135D8 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
000135DC                            
000135DC                            loc_12FBE:
000135DC 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
000135E0                            
000135E0                            loc_12FC2:
000135E0 1038 F602                  		move.b	($FFFFF602).w,d0
000135E4 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000135E8 6600                       		bne.s	loc_12FEE	; if yes, branch
000135EA 3028 0014                  		move.w	$14(a0),d0
000135EE 6700                       		beq.s	loc_12FEE
000135F0 6B00                       		bmi.s	loc_12FE2
000135F2 9045                       		sub.w	d5,d0
000135F4 6400                       		bcc.s	loc_12FDC
000135F6 303C 0000                  		move.w	#0,d0
000135FA                            
000135FA                            loc_12FDC:
000135FA 3140 0014                  		move.w	d0,$14(a0)
000135FE 6000                       		bra.s	loc_12FEE
00013600                            ; ===========================================================================
00013600                            
00013600                            loc_12FE2:
00013600 D045                       		add.w	d5,d0
00013602 6400                       		bcc.s	loc_12FEA
00013604 303C 0000                  		move.w	#0,d0
00013608                            
00013608                            loc_12FEA:
00013608 3140 0014                  		move.w	d0,$14(a0)
0001360C                            
0001360C                            loc_12FEE:
0001360C 1028 0026                  		move.b	$26(a0),d0
00013610 4EB9 0000 2C6A             		jsr	(CalcSine).l
00013616 C3E8 0014                  		muls.w	$14(a0),d1
0001361A E081                       		asr.l	#8,d1
0001361C 3141 0010                  		move.w	d1,$10(a0)
00013620 C1E8 0014                  		muls.w	$14(a0),d0
00013624 E080                       		asr.l	#8,d0
00013626 3140 0012                  		move.w	d0,$12(a0)
0001362A                            
0001362A                            loc_1300C:
0001362A 1028 0026                  		move.b	$26(a0),d0
0001362E 0600 0040                  		addi.b	#$40,d0
00013632 6B00                       		bmi.s	locret_1307C
00013634 123C 0040                  		move.b	#$40,d1
00013638 4A68 0014                  		tst.w	$14(a0)
0001363C 6700                       		beq.s	locret_1307C
0001363E 6B00                       		bmi.s	loc_13024
00013640 4441                       		neg.w	d1
00013642                            
00013642                            loc_13024:
00013642 1028 0026                  		move.b	$26(a0),d0
00013646 D001                       		add.b	d1,d0
00013648 3F00                       		move.w	d0,-(sp)
0001364A 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001364E 301F                       		move.w	(sp)+,d0
00013650 4A41                       		tst.w	d1
00013652 6A00                       		bpl.s	locret_1307C
00013654 E141                       		asl.w	#8,d1
00013656 0600 0020                  		addi.b	#$20,d0
0001365A 0200 00C0                  		andi.b	#$C0,d0
0001365E 6700                       		beq.s	loc_13078
00013660 0C00 0040                  		cmpi.b	#$40,d0
00013664 6700                       		beq.s	loc_13066
00013666 0C00 0080                  		cmpi.b	#$80,d0
0001366A 6700                       		beq.s	loc_13060
0001366C D368 0010                  		add.w	d1,$10(a0)
00013670 08E8 0005 0022             		bset	#5,$22(a0)
00013676 317C 0000 0014             		move.w	#0,$14(a0)
0001367C 4E75                       		rts	
0001367E                            ; ===========================================================================
0001367E                            
0001367E                            loc_13060:
0001367E 9368 0012                  		sub.w	d1,$12(a0)
00013682 4E75                       		rts	
00013684                            ; ===========================================================================
00013684                            
00013684                            loc_13066:
00013684 9368 0010                  		sub.w	d1,$10(a0)
00013688 08E8 0005 0022             		bset	#5,$22(a0)
0001368E 317C 0000 0014             		move.w	#0,$14(a0)
00013694 4E75                       		rts	
00013696                            ; ===========================================================================
00013696                            
00013696                            loc_13078:
00013696 D368 0012                  		add.w	d1,$12(a0)
0001369A                            
0001369A                            locret_1307C:
0001369A 4E75                       		rts	
0001369C                            ; End of function Sonic_Move
0001369C                            
0001369C                            
0001369C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001369C                            
0001369C                            
0001369C                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001369C 3028 0014                  		move.w	$14(a0),d0
000136A0 6700                       		beq.s	loc_13086
000136A2 6A00                       		bpl.s	loc_130B2
000136A4                            
000136A4                            loc_13086:
000136A4 08E8 0000 0022             		bset	#0,$22(a0)
000136AA 6600                       		bne.s	loc_1309A
000136AC 08A8 0005 0022             		bclr	#5,$22(a0)
000136B2 117C 0001 001D             		move.b	#1,$1D(a0)
000136B8                            
000136B8                            loc_1309A:
000136B8 9045                       		sub.w	d5,d0
000136BA 3206                       		move.w	d6,d1
000136BC 4441                       		neg.w	d1
000136BE B041                       		cmp.w	d1,d0
000136C0 6E00                       		bgt.s	loc_130A6
000136C2 3001                       		move.w	d1,d0
000136C4                            
000136C4                            loc_130A6:
000136C4 3140 0014                  		move.w	d0,$14(a0)
000136C8 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000136CE 4E75                       		rts	
000136D0                            ; ===========================================================================
000136D0                            
000136D0                            loc_130B2:				; XREF: Sonic_MoveLeft
000136D0 9044                       		sub.w	d4,d0
000136D2 6400                       		bcc.s	loc_130BA
000136D4 303C FF80                  		move.w	#-$80,d0
000136D8                            
000136D8                            loc_130BA:
000136D8 3140 0014                  		move.w	d0,$14(a0)
000136DC 1028 0026                  		move.b	$26(a0),d0
000136E0 0600 0020                  		addi.b	#$20,d0
000136E4 0200 00C0                  		andi.b	#$C0,d0
000136E8 6600                       		bne.s	locret_130E8
000136EA 0C40 0400                  		cmpi.w	#$400,d0
000136EE 6D00                       		blt.s	locret_130E8
000136F0 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136F6 08A8 0000 0022             		bclr	#0,$22(a0)
000136FC 303C 00A4                  		move.w	#$A4,d0
00013700 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play stopping sound
00013706                            
00013706                            locret_130E8:
00013706 4E75                       		rts	
00013708                            ; End of function Sonic_MoveLeft
00013708                            
00013708                            
00013708                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013708                            
00013708                            
00013708                            Sonic_MoveRight:			; XREF: Sonic_Move
00013708 3028 0014                  		move.w	$14(a0),d0
0001370C 6B00                       		bmi.s	loc_13118
0001370E 08A8 0000 0022             		bclr	#0,$22(a0)
00013714 6700                       		beq.s	loc_13104
00013716 08A8 0005 0022             		bclr	#5,$22(a0)
0001371C 117C 0001 001D             		move.b	#1,$1D(a0)
00013722                            
00013722                            loc_13104:
00013722 D045                       		add.w	d5,d0
00013724 B046                       		cmp.w	d6,d0
00013726 6D00                       		blt.s	loc_1310C
00013728 3006                       		move.w	d6,d0
0001372A                            
0001372A                            loc_1310C:
0001372A 3140 0014                  		move.w	d0,$14(a0)
0001372E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013734 4E75                       		rts	
00013736                            ; ===========================================================================
00013736                            
00013736                            loc_13118:				; XREF: Sonic_MoveRight
00013736 D044                       		add.w	d4,d0
00013738 6400                       		bcc.s	loc_13120
0001373A 303C 0080                  		move.w	#$80,d0
0001373E                            
0001373E                            loc_13120:
0001373E 3140 0014                  		move.w	d0,$14(a0)
00013742 1028 0026                  		move.b	$26(a0),d0
00013746 0600 0020                  		addi.b	#$20,d0
0001374A 0200 00C0                  		andi.b	#$C0,d0
0001374E 6600                       		bne.s	locret_1314E
00013750 0C40 FC00                  		cmpi.w	#-$400,d0
00013754 6E00                       		bgt.s	locret_1314E
00013756 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001375C 08E8 0000 0022             		bset	#0,$22(a0)
00013762 303C 00A4                  		move.w	#$A4,d0
00013766 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play stopping sound
0001376C                            
0001376C                            locret_1314E:
0001376C 4E75                       		rts	
0001376E                            ; End of function Sonic_MoveRight
0001376E                            
0001376E                            ; ---------------------------------------------------------------------------
0001376E                            ; Subroutine to	change Sonic's speed as he rolls
0001376E                            ; ---------------------------------------------------------------------------
0001376E                            
0001376E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001376E                            
0001376E                            
0001376E                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001376E 3C38 F760                  		move.w	($FFFFF760).w,d6
00013772 E346                       		asl.w	#1,d6
00013774 3A38 F762                  		move.w	($FFFFF762).w,d5
00013778 E245                       		asr.w	#1,d5
0001377A 3838 F764                  		move.w	($FFFFF764).w,d4
0001377E E444                       		asr.w	#2,d4
00013780 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013784 6600 0000                  		bne.w	loc_131CC
00013788 4A68 003E                  		tst.w	$3E(a0)
0001378C 6600                       		bne.s	loc_13188
0001378E 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013794 6700                       		beq.s	loc_1317C	; if not, branch
00013796 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001379C 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
0001379E 6100 0000                  		bsr.w	Sonic_RollLeft
000137A2                            
000137A2                            loc_1317C:
000137A2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000137A8 6700                       		beq.s	loc_13188	; if not, branch
000137AA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000137B0 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000137B2 6100 0000                  		bsr.w	Sonic_RollLeft
000137B6 6000                       		bra.s	loc_13188
000137B8                            
000137B8                            SonicRS_RollRight:
000137B8 6100 0000                  		bsr.w	Sonic_RollRight
000137BC                            
000137BC                            loc_13188:
000137BC 3028 0014                  		move.w	$14(a0),d0
000137C0 6700                       		beq.s	loc_131AA
000137C2 6B00                       		bmi.s	loc_1319E
000137C4 9045                       		sub.w	d5,d0
000137C6 6400                       		bcc.s	loc_13198
000137C8 303C 0000                  		move.w	#0,d0
000137CC                            
000137CC                            loc_13198:
000137CC 3140 0014                  		move.w	d0,$14(a0)
000137D0 6000                       		bra.s	loc_131AA
000137D2                            ; ===========================================================================
000137D2                            
000137D2                            loc_1319E:				; XREF: Sonic_RollSpeed
000137D2 D045                       		add.w	d5,d0
000137D4 6400                       		bcc.s	loc_131A6
000137D6 303C 0000                  		move.w	#0,d0
000137DA                            
000137DA                            loc_131A6:
000137DA 3140 0014                  		move.w	d0,$14(a0)
000137DE                            
000137DE                            loc_131AA:
000137DE 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000137E2 6600                       		bne.s	loc_131CC	; if yes, branch
000137E4 08A8 0002 0022             		bclr	#2,$22(a0)
000137EA 117C 0013 0016             		move.b	#$13,$16(a0)
000137F0 117C 0009 0017             		move.b	#9,$17(a0)
000137F6 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000137FC 5B68 000C                  		subq.w	#5,$C(a0)
00013800                            
00013800                            loc_131CC:
00013800 1028 0026                  		move.b	$26(a0),d0
00013804 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001380A C1E8 0014                  		muls.w	$14(a0),d0
0001380E E080                       		asr.l	#8,d0
00013810 3140 0012                  		move.w	d0,$12(a0)
00013814 C3E8 0014                  		muls.w	$14(a0),d1
00013818 E081                       		asr.l	#8,d1
0001381A 0C41 1000                  		cmpi.w	#$1000,d1
0001381E 6F00                       		ble.s	loc_131F0
00013820 323C 1000                  		move.w	#$1000,d1
00013824                            
00013824                            loc_131F0:
00013824 0C41 F000                  		cmpi.w	#-$1000,d1
00013828 6C00                       		bge.s	loc_131FA
0001382A 323C F000                  		move.w	#-$1000,d1
0001382E                            
0001382E                            loc_131FA:
0001382E 3141 0010                  		move.w	d1,$10(a0)
00013832 6000 FDF6                  		bra.w	loc_1300C
00013836                            ; End of function Sonic_RollSpeed
00013836                            
00013836                            
00013836                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013836                            
00013836                            
00013836                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013836 3028 0014                  		move.w	$14(a0),d0
0001383A 6700                       		beq.s	loc_1320A
0001383C 6A00                       		bpl.s	loc_13218
0001383E                            
0001383E                            loc_1320A:
0001383E 08E8 0000 0022             		bset	#0,$22(a0)
00013844 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001384A 4E75                       		rts	
0001384C                            ; ===========================================================================
0001384C                            
0001384C                            loc_13218:
0001384C 9044                       		sub.w	d4,d0
0001384E 6400                       		bcc.s	loc_13220
00013850 303C FF80                  		move.w	#-$80,d0
00013854                            
00013854                            loc_13220:
00013854 3140 0014                  		move.w	d0,$14(a0)
00013858 4E75                       		rts	
0001385A                            ; End of function Sonic_RollLeft
0001385A                            
0001385A                            
0001385A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001385A                            
0001385A                            
0001385A                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
0001385A 3028 0014                  		move.w	$14(a0),d0
0001385E 6B00                       		bmi.s	loc_1323A
00013860 08A8 0000 0022             		bclr	#0,$22(a0)
00013866 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001386C 4E75                       		rts	
0001386E                            ; ===========================================================================
0001386E                            
0001386E                            loc_1323A:
0001386E D044                       		add.w	d4,d0
00013870 6400                       		bcc.s	loc_13242
00013872 303C 0080                  		move.w	#$80,d0
00013876                            
00013876                            loc_13242:
00013876 3140 0014                  		move.w	d0,$14(a0)
0001387A 4E75                       		rts	
0001387C                            ; End of function Sonic_RollRight
0001387C                            
0001387C                            Sonic_AirUnroll:
0001387C                            		
0001387C 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013880 6600                       		bne.s	@timer
00013882 1038 F605                  		move.b	($FFFFF605).w,d0
00013886 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
0001388A 6700                       		beq.s	@end	; if not, branch
0001388C 08A8 0002 0022             		bclr	#2,$22(a0)
00013892 117C 0013 0016             		move.b	#$13,$16(a0)
00013898 117C 0009 0017             		move.b	#9,$17(a0)
0001389E 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
000138A4 2028 0010                  		move.l	$10(a0),d0
000138A8 D080                       		add.l	d0,d0
000138AA 2140 0010                  		move.l	d0,$10(a0)
000138AE 5B68 000C                  		subq.w	#5,$C(a0)
000138B2                            	@end:
000138B2 4E75                       		rts
000138B4                            	@timer:
000138B4 5328 003A                  		subq.b	#1,$3A(a0)
000138B8 4E75                       		rts
000138BA                            
000138BA                            ; ---------------------------------------------------------------------------
000138BA                            ; Subroutine to	change Sonic's direction while jumping
000138BA                            ; ---------------------------------------------------------------------------
000138BA                            
000138BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138BA                            
000138BA                            
000138BA                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000138BA 3C38 F760                  		move.w	($FFFFF760).w,d6
000138BE 3A38 F762                  		move.w	($FFFFF762).w,d5
000138C2 E345                       		asl.w	#1,d5
000138C4 0828 0004 0022             		btst	#4,$22(a0)
000138CA 6600                       		bne.s	Obj01_ResetScr2
000138CC 3028 0010                  		move.w	$10(a0),d0
000138D0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000138D6 6700                       		beq.s	loc_13278	; if not, branch
000138D8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138DE 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000138E0 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000138E4 6E00                       		bgt.s	loc_13278
000138E6 3001                       		move.w	d1,d0
000138E8                            
000138E8                            loc_13278:
000138E8 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000138EE 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000138F0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000138F6 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
000138F8 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000138FC 6E00                       		bgt.s	Obj01_JumpMove
000138FE 3001                       		move.w	d1,d0
00013900 6000                       		bra.s	Obj01_JumpMove
00013902                            
00013902                            SonicCJD_JumpLeft:
00013902 08E8 0000 0022             		bset	#0,$22(a0)
00013908 9045                       		sub.w	d5,d0
0001390A 3206                       		move.w	d6,d1
0001390C 4441                       		neg.w	d1
0001390E B041                       		cmp.w	d1,d0
00013910                            		; bgt.s	loc_13278
00013910                            		; move.w	d1,d0
00013910 4E75                       		rts
00013912                            
00013912                            SonicCJD_JumpRight:
00013912 08A8 0000 0022             		bclr	#0,$22(a0)
00013918 D045                       		add.w	d5,d0
0001391A B046                       		cmp.w	d6,d0
0001391C 6D00                       		blt.s	Obj01_JumpMove
0001391E 3006                       		move.w	d6,d0
00013920                            
00013920                            Obj01_JumpMove:
00013920 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013924                            
00013924                            Obj01_ResetScr2:
00013924 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001392A 6700                       		beq.s	loc_132A4	; if yes, branch
0001392C 6400                       		bcc.s	loc_132A0
0001392E 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013932                            
00013932                            loc_132A0:
00013932 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013936                            
00013936                            loc_132A4:
00013936 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001393C 6500                       		bcs.s	locret_132D2	; if yes, branch
0001393E 3028 0010                  		move.w	$10(a0),d0
00013942 3200                       		move.w	d0,d1
00013944 EA41                       		asr.w	#5,d1
00013946 6700                       		beq.s	locret_132D2
00013948 6B00                       		bmi.s	loc_132C6
0001394A 9041                       		sub.w	d1,d0
0001394C 6400                       		bcc.s	loc_132C0
0001394E 303C 0000                  		move.w	#0,d0
00013952                            
00013952                            loc_132C0:
00013952 3140 0010                  		move.w	d0,$10(a0)
00013956 4E75                       		rts	
00013958                            ; ===========================================================================
00013958                            
00013958                            loc_132C6:
00013958 9041                       		sub.w	d1,d0
0001395A 6500                       		bcs.s	loc_132CE
0001395C 303C 0000                  		move.w	#0,d0
00013960                            
00013960                            loc_132CE:
00013960 3140 0010                  		move.w	d0,$10(a0)
00013964                            
00013964                            locret_132D2:
00013964 4E75                       		rts	
00013966                            ; End of function Sonic_ChgJumpDir
00013966                            
00013966                            ; ===========================================================================
00013966                            ; ---------------------------------------------------------------------------
00013966                            ; Unused subroutine to squash Sonic
00013966                            ; ---------------------------------------------------------------------------
00013966 1028 0026                  		move.b	$26(a0),d0
0001396A 0600 0020                  		addi.b	#$20,d0
0001396E 0200 00C0                  		andi.b	#$C0,d0
00013972 6600                       		bne.s	locret_13302
00013974 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013978 4A41                       		tst.w	d1
0001397A 6A00                       		bpl.s	locret_13302
0001397C 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013982 317C 0000 0010             		move.w	#0,$10(a0)
00013988 317C 0000 0012             		move.w	#0,$12(a0)
0001398E 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013994                            
00013994                            locret_13302:
00013994 4E75                       		rts	
00013996                            ; ---------------------------------------------------------------------------
00013996                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013996                            ; ---------------------------------------------------------------------------
00013996                            
00013996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013996                            
00013996                            
00013996                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013996 2228 0008                  		move.l	8(a0),d1
0001399A 3028 0010                  		move.w	$10(a0),d0
0001399E 48C0                       		ext.l	d0
000139A0 E180                       		asl.l	#8,d0
000139A2 D280                       		add.l	d0,d1
000139A4 4841                       		swap	d1
000139A6 3038 F728                  		move.w	($FFFFF728).w,d0
000139AA 0640 0010                  		addi.w	#$10,d0
000139AE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000139B0 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000139B2 3038 F72A                  		move.w	($FFFFF72A).w,d0
000139B6 0640 0128                  		addi.w	#$128,d0
000139BA 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000139BE 6600                       		bne.s	loc_13332
000139C0 0640 0040                  		addi.w	#$40,d0
000139C4                            
000139C4                            loc_13332:
000139C4 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000139C6 6300                       		bls.s	Boundary_Sides	; if yes, branch
000139C8                            
000139C8                            loc_13336:
000139C8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000139CC 0640 00E0                  		addi.w	#$E0,d0
000139D0 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000139D4 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000139D6 4E75                       		rts	
000139D8                            ; ===========================================================================
000139D8                            
000139D8                            Boundary_Bottom:
000139D8 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000139DE 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000139E2 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000139E8 6500 0000                  		bcs.w	KillSonic
000139EC 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000139F0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000139F6 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000139FC 4E75                       		rts	
000139FE                            ; ===========================================================================
000139FE                            
000139FE                            Boundary_Sides:
000139FE 3140 0008                  		move.w	d0,8(a0)
00013A02 317C 0000 000A             		move.w	#0,$A(a0)
00013A08 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013A0E 317C 0000 0014             		move.w	#0,$14(a0)
00013A14 60B2                       		bra.s	loc_13336
00013A16                            ; End of function Sonic_LevelBound
00013A16                            
00013A16                            ; ---------------------------------------------------------------------------
00013A16                            ; Subroutine allowing Sonic to roll when he's moving
00013A16                            ; ---------------------------------------------------------------------------
00013A16                            
00013A16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A16                            
00013A16                            
00013A16                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013A16 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013A1A 6600                       		bne.s	Obj01_NoRoll
00013A1C 3028 0014                  		move.w	$14(a0),d0
00013A20 6A00                       		bpl.s	loc_13392
00013A22 4440                       		neg.w	d0
00013A24                            
00013A24                            loc_13392:
00013A24 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013A28 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013A2A 1038 F602                  		move.b	($FFFFF602).w,d0
00013A2E 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013A32 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013A34 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013A3A 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013A3C                            
00013A3C                            Obj01_NoRoll:
00013A3C 4E75                       		rts	
00013A3E                            ; ===========================================================================
00013A3E                            
00013A3E                            Obj01_ChkRoll:
00013A3E 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013A44 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013A46 4E75                       		rts	
00013A48                            ; ===========================================================================
00013A48                            
00013A48                            Obj01_DoRoll:
00013A48 08E8 0002 0022             		bset	#2,$22(a0)
00013A4E 117C 000E 0016             		move.b	#$E,$16(a0)
00013A54 117C 0007 0017             		move.b	#7,$17(a0)
00013A5A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A60 5A68 000C                  		addq.w	#5,$C(a0)
00013A64 303C 00BE                  		move.w	#$BE,d0
00013A68 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play rolling sound
00013A6E 4A68 0014                  		tst.w	$14(a0)
00013A72 6600                       		bne.s	locret_133E8
00013A74 317C 0200 0014             		move.w	#$200,$14(a0)
00013A7A                            
00013A7A                            locret_133E8:
00013A7A 4E75                       		rts	
00013A7C                            ; End of function Sonic_Roll
00013A7C                            
00013A7C                            ; ---------------------------------------------------------------------------
00013A7C                            ; Subroutine allowing Sonic to jump
00013A7C                            ; ---------------------------------------------------------------------------
00013A7C                            
00013A7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A7C                            
00013A7C                            
00013A7C                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013A7C 1038 F603                  		move.b	($FFFFF603).w,d0
00013A80 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013A84 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013A88 7000                       		moveq	#0,d0
00013A8A 1028 0026                  		move.b	$26(a0),d0
00013A8E 0600 0080                  		addi.b	#$80,d0
00013A92 6100 0000                  		bsr.w	sub_14D48
00013A96 0C41 0006                  		cmpi.w	#6,d1
00013A9A 6D00 0000                  		blt.w	locret_1348E
00013A9E 343C 0680                  		move.w	#$680,d2
00013AA2 0828 0006 0022             		btst	#6,$22(a0)
00013AA8 6700                       		beq.s	loc_1341C
00013AAA 343C 0380                  		move.w	#$380,d2
00013AAE                            
00013AAE                            loc_1341C:
00013AAE 7000                       		moveq	#0,d0
00013AB0 1028 0026                  		move.b	$26(a0),d0
00013AB4 0400 0040                  		subi.b	#$40,d0
00013AB8 4EB9 0000 2C6A             		jsr	(CalcSine).l
00013ABE C3C2                       		muls.w	d2,d1
00013AC0 E081                       		asr.l	#8,d1
00013AC2 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013AC6 C1C2                       		muls.w	d2,d0
00013AC8 E080                       		asr.l	#8,d0
00013ACA D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013ACE 08E8 0001 0022             		bset	#1,$22(a0)
00013AD4 08A8 0005 0022             		bclr	#5,$22(a0)
00013ADA 588F                       		addq.l	#4,sp
00013ADC 117C 0001 003C             		move.b	#1,$3C(a0)
00013AE2 4228 0038                  		clr.b	$38(a0)
00013AE6 303C 00A0                  		move.w	#$A0,d0
00013AEA 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play jumping sound
00013AF0 117C 0013 0016             		move.b	#$13,$16(a0)
00013AF6 117C 0009 0017             		move.b	#9,$17(a0)
00013AFC 0828 0002 0022             		btst	#2,$22(a0)
00013B02 6600                       		bne.s	loc_13490
00013B04 117C 000E 0016             		move.b	#$E,$16(a0)
00013B0A 117C 0007 0017             		move.b	#7,$17(a0)
00013B10 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013B16 08E8 0002 0022             		bset	#2,$22(a0)
00013B1C 5A68 000C                  		addq.w	#5,$C(a0)
00013B20 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013B26                            
00013B26                            locret_1348E:
00013B26 4E75                       		rts	
00013B28                            ; ===========================================================================
00013B28                            
00013B28                            loc_13490:
00013B28 08E8 0004 0022             		bset	#4,$22(a0)
00013B2E 4E75                       		rts	
00013B30                            ; End of function Sonic_Jump
00013B30                            
00013B30                            
00013B30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B30                            
00013B30                            
00013B30                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B30 4A28 003C                  		tst.b	$3C(a0)
00013B34 6700                       		beq.s	loc_134C4
00013B36 323C FC00                  		move.w	#-$400,d1
00013B3A 0828 0006 0022             		btst	#6,$22(a0)
00013B40 6700                       		beq.s	loc_134AE
00013B42 323C FE00                  		move.w	#-$200,d1
00013B46                            
00013B46                            loc_134AE:
00013B46 B268 0012                  		cmp.w	$12(a0),d1
00013B4A 6F00                       		ble.s	locret_134C2
00013B4C 1038 F602                  		move.b	($FFFFF602).w,d0
00013B50 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013B54 6600                       		bne.s	locret_134C2	; if yes, branch
00013B56 3141 0012                  		move.w	d1,$12(a0)
00013B5A                            
00013B5A                            locret_134C2:
00013B5A 4E75                       		rts	
00013B5C                            ; ===========================================================================
00013B5C                            
00013B5C                            loc_134C4:
00013B5C 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013B62 6C00                       		bge.s	locret_134D2
00013B64 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013B6A                            
00013B6A                            locret_134D2:
00013B6A 4E75                       		rts	
00013B6C                            ; End of function Sonic_JumpHeight
00013B6C                            
00013B6C                            ; ---------------------------------------------------------------------------
00013B6C                            ; Subroutine to	slow Sonic walking up a	slope
00013B6C                            ; ---------------------------------------------------------------------------
00013B6C                            
00013B6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B6C                            
00013B6C                            
00013B6C                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013B6C 1028 0026                  		move.b	$26(a0),d0
00013B70 0600 0060                  		addi.b	#$60,d0
00013B74 0C00 00C0                  		cmpi.b	#$C0,d0
00013B78 6400                       		bcc.s	locret_13508
00013B7A 1028 0026                  		move.b	$26(a0),d0
00013B7E 4EB9 0000 2C6A             		jsr	(CalcSine).l
00013B84 C1FC 0020                  		muls.w	#$20,d0
00013B88 E080                       		asr.l	#8,d0
00013B8A 4A68 0014                  		tst.w	$14(a0)
00013B8E 6700                       		beq.s	locret_13508
00013B90 6B00                       		bmi.s	loc_13504
00013B92 4A40                       		tst.w	d0
00013B94 6700                       		beq.s	locret_13502
00013B96 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013B9A                            
00013B9A                            locret_13502:
00013B9A 4E75                       		rts	
00013B9C                            ; ===========================================================================
00013B9C                            
00013B9C                            loc_13504:
00013B9C D168 0014                  		add.w	d0,$14(a0)
00013BA0                            
00013BA0                            locret_13508:
00013BA0 4E75                       		rts	
00013BA2                            ; End of function Sonic_SlopeResist
00013BA2                            
00013BA2                            ; ---------------------------------------------------------------------------
00013BA2                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013BA2                            ; ---------------------------------------------------------------------------
00013BA2                            
00013BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BA2                            
00013BA2                            
00013BA2                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013BA2 1028 0026                  		move.b	$26(a0),d0
00013BA6 0600 0060                  		addi.b	#$60,d0
00013BAA 0C00 00C0                  		cmpi.b	#-$40,d0
00013BAE 6400                       		bcc.s	locret_13544
00013BB0 1028 0026                  		move.b	$26(a0),d0
00013BB4 4EB9 0000 2C6A             		jsr	(CalcSine).l
00013BBA C1FC 0050                  		muls.w	#$50,d0
00013BBE E080                       		asr.l	#8,d0
00013BC0 4A68 0014                  		tst.w	$14(a0)
00013BC4 6B00                       		bmi.s	loc_1353A
00013BC6 4A40                       		tst.w	d0
00013BC8 6A00                       		bpl.s	loc_13534
00013BCA E480                       		asr.l	#2,d0
00013BCC                            
00013BCC                            loc_13534:
00013BCC D168 0014                  		add.w	d0,$14(a0)
00013BD0 4E75                       		rts	
00013BD2                            ; ===========================================================================
00013BD2                            
00013BD2                            loc_1353A:
00013BD2 4A40                       		tst.w	d0
00013BD4 6B00                       		bmi.s	loc_13540
00013BD6 E480                       		asr.l	#2,d0
00013BD8                            
00013BD8                            loc_13540:
00013BD8 D168 0014                  		add.w	d0,$14(a0)
00013BDC                            
00013BDC                            locret_13544:
00013BDC 4E75                       		rts	
00013BDE                            ; End of function Sonic_RollRepel
00013BDE                            
00013BDE                            ; ---------------------------------------------------------------------------
00013BDE                            ; Subroutine to	push Sonic down	a slope
00013BDE                            ; ---------------------------------------------------------------------------
00013BDE                            
00013BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BDE                            
00013BDE                            
00013BDE                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013BDE 4E71                       		nop	
00013BE0 4A28 0038                  		tst.b	$38(a0)
00013BE4 6600                       		bne.s	locret_13580
00013BE6 4A68 003E                  		tst.w	$3E(a0)
00013BEA 6600                       		bne.s	loc_13582
00013BEC 1028 0026                  		move.b	$26(a0),d0
00013BF0 0600 0020                  		addi.b	#$20,d0
00013BF4 0200 00C0                  		andi.b	#$C0,d0
00013BF8 6700                       		beq.s	locret_13580
00013BFA 3028 0014                  		move.w	$14(a0),d0
00013BFE 6A00                       		bpl.s	loc_1356A
00013C00 4440                       		neg.w	d0
00013C02                            
00013C02                            loc_1356A:
00013C02 0C40 0280                  		cmpi.w	#$280,d0
00013C06 6400                       		bcc.s	locret_13580
00013C08 4268 0014                  		clr.w	$14(a0)
00013C0C 08E8 0001 0022             		bset	#1,$22(a0)
00013C12 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013C18                            
00013C18                            locret_13580:
00013C18 4E75                       		rts	
00013C1A                            ; ===========================================================================
00013C1A                            
00013C1A                            loc_13582:
00013C1A 5368 003E                  		subq.w	#1,$3E(a0)
00013C1E 4E75                       		rts	
00013C20                            ; End of function Sonic_SlopeRepel
00013C20                            
00013C20                            ; ---------------------------------------------------------------------------
00013C20                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013C20                            ; ---------------------------------------------------------------------------
00013C20                            
00013C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C20                            
00013C20                            
00013C20                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013C20 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013C24 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013C26 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013C28                            
00013C28 5400                       		addq.b	#2,d0		; increase angle
00013C2A 6400                       		bcc.s	loc_13596
00013C2C 7000                       		moveq	#0,d0
00013C2E                            
00013C2E                            loc_13596:
00013C2E 6000                       		bra.s	loc_1359E
00013C30                            ; ===========================================================================
00013C30                            
00013C30                            loc_13598:
00013C30 5500                       		subq.b	#2,d0		; decrease angle
00013C32 6400                       		bcc.s	loc_1359E
00013C34 7000                       		moveq	#0,d0
00013C36                            
00013C36                            loc_1359E:
00013C36 1140 0026                  		move.b	d0,$26(a0)
00013C3A                            
00013C3A                            locret_135A2:
00013C3A 4E75                       		rts	
00013C3C                            ; End of function Sonic_JumpAngle
00013C3C                            
00013C3C                            ; ---------------------------------------------------------------------------
00013C3C                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013C3C                            ; ---------------------------------------------------------------------------
00013C3C                            
00013C3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C3C                            
00013C3C                            
00013C3C                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013C3C 3228 0010                  		move.w	$10(a0),d1
00013C40 3428 0012                  		move.w	$12(a0),d2
00013C44 4EB9 0000 2F38             		jsr	(CalcAngle).l
00013C4A 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013C4E 0400 0020                  		subi.b	#$20,d0
00013C52 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013C56 0200 00C0                  		andi.b	#$C0,d0
00013C5A 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013C5E 0C00 0040                  		cmpi.b	#$40,d0
00013C62 6700 0000                  		beq.w	loc_13680
00013C66 0C00 0080                  		cmpi.b	#$80,d0
00013C6A 6700 0000                  		beq.w	loc_136E2
00013C6E 0C00 00C0                  		cmpi.b	#-$40,d0
00013C72 6700 0000                  		beq.w	loc_1373E
00013C76 6100 0000                  		bsr.w	Sonic_HitWall
00013C7A 4A41                       		tst.w	d1
00013C7C 6A00                       		bpl.s	loc_135F0
00013C7E 9368 0008                  		sub.w	d1,8(a0)
00013C82 317C 0000 0010             		move.w	#0,$10(a0)
00013C88                            
00013C88                            loc_135F0:
00013C88 6100 0000                  		bsr.w	sub_14EB4
00013C8C 4A41                       		tst.w	d1
00013C8E 6A00                       		bpl.s	loc_13602
00013C90 D368 0008                  		add.w	d1,8(a0)
00013C94 317C 0000 0010             		move.w	#0,$10(a0)
00013C9A                            
00013C9A                            loc_13602:
00013C9A 6100 0000                  		bsr.w	Sonic_HitFloor
00013C9E 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013CA2 4A41                       		tst.w	d1
00013CA4 6A00                       		bpl.s	locret_1367E
00013CA6 1428 0012                  		move.b	$12(a0),d2
00013CAA 5002                       		addq.b	#8,d2
00013CAC 4402                       		neg.b	d2
00013CAE B202                       		cmp.b	d2,d1
00013CB0 6C00                       		bge.s	loc_1361E
00013CB2 B002                       		cmp.b	d2,d0
00013CB4 6D00                       		blt.s	locret_1367E
00013CB6                            
00013CB6                            loc_1361E:
00013CB6 D368 000C                  		add.w	d1,$C(a0)
00013CBA 1143 0026                  		move.b	d3,$26(a0)
00013CBE 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CC2 117C 0000 001C             		move.b	#0,$1C(a0)
00013CC8 1003                       		move.b	d3,d0
00013CCA 0600 0020                  		addi.b	#$20,d0
00013CCE 0200 0040                  		andi.b	#$40,d0
00013CD2 6600                       		bne.s	loc_1365C
00013CD4 1003                       		move.b	d3,d0
00013CD6 0600 0010                  		addi.b	#$10,d0
00013CDA 0200 0020                  		andi.b	#$20,d0
00013CDE 6700                       		beq.s	loc_1364E
00013CE0 E0E8 0012                  		asr	$12(a0)
00013CE4 6000                       		bra.s	loc_13670
00013CE6                            ; ===========================================================================
00013CE6                            
00013CE6                            loc_1364E:
00013CE6 317C 0000 0012             		move.w	#0,$12(a0)
00013CEC 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013CF2 4E75                       		rts	
00013CF4                            ; ===========================================================================
00013CF4                            
00013CF4                            loc_1365C:
00013CF4 317C 0000 0010             		move.w	#0,$10(a0)
00013CFA 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013D00 6F00                       		ble.s	loc_13670
00013D02 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013D08                            
00013D08                            loc_13670:
00013D08 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D0E 4A03                       		tst.b	d3
00013D10 6A00                       		bpl.s	locret_1367E
00013D12 4468 0014                  		neg.w	$14(a0)
00013D16                            
00013D16                            locret_1367E:
00013D16 4E75                       		rts	
00013D18                            ; ===========================================================================
00013D18                            
00013D18                            loc_13680:
00013D18 6100 0000                  		bsr.w	Sonic_HitWall
00013D1C 4A41                       		tst.w	d1
00013D1E 6A00                       		bpl.s	loc_1369A
00013D20 9368 0008                  		sub.w	d1,8(a0)
00013D24 317C 0000 0010             		move.w	#0,$10(a0)
00013D2A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D30 4E75                       		rts	
00013D32                            ; ===========================================================================
00013D32                            
00013D32                            loc_1369A:
00013D32 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D36 4A41                       		tst.w	d1
00013D38 6A00                       		bpl.s	loc_136B4
00013D3A 9368 000C                  		sub.w	d1,$C(a0)
00013D3E 4A68 0012                  		tst.w	$12(a0)
00013D42 6A00                       		bpl.s	locret_136B2
00013D44 317C 0000 0012             		move.w	#0,$12(a0)
00013D4A                            
00013D4A                            locret_136B2:
00013D4A 4E75                       		rts	
00013D4C                            ; ===========================================================================
00013D4C                            
00013D4C                            loc_136B4:
00013D4C 4A68 0012                  		tst.w	$12(a0)
00013D50 6B00                       		bmi.s	locret_136E0
00013D52 6100 0000                  		bsr.w	Sonic_HitFloor
00013D56 4A41                       		tst.w	d1
00013D58 6A00                       		bpl.s	locret_136E0
00013D5A D368 000C                  		add.w	d1,$C(a0)
00013D5E 1143 0026                  		move.b	d3,$26(a0)
00013D62 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D66 117C 0000 001C             		move.b	#0,$1C(a0)
00013D6C 317C 0000 0012             		move.w	#0,$12(a0)
00013D72 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D78                            
00013D78                            locret_136E0:
00013D78 4E75                       		rts	
00013D7A                            ; ===========================================================================
00013D7A                            
00013D7A                            loc_136E2:
00013D7A 6100 0000                  		bsr.w	Sonic_HitWall
00013D7E 4A41                       		tst.w	d1
00013D80 6A00                       		bpl.s	loc_136F4
00013D82 9368 0008                  		sub.w	d1,8(a0)
00013D86 317C 0000 0010             		move.w	#0,$10(a0)
00013D8C                            
00013D8C                            loc_136F4:
00013D8C 6100 0000                  		bsr.w	sub_14EB4
00013D90 4A41                       		tst.w	d1
00013D92 6A00                       		bpl.s	loc_13706
00013D94 D368 0008                  		add.w	d1,8(a0)
00013D98 317C 0000 0010             		move.w	#0,$10(a0)
00013D9E                            
00013D9E                            loc_13706:
00013D9E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DA2 4A41                       		tst.w	d1
00013DA4 6A00                       		bpl.s	locret_1373C
00013DA6 9368 000C                  		sub.w	d1,$C(a0)
00013DAA 1003                       		move.b	d3,d0
00013DAC 0600 0020                  		addi.b	#$20,d0
00013DB0 0200 0040                  		andi.b	#$40,d0
00013DB4 6600                       		bne.s	loc_13726
00013DB6 317C 0000 0012             		move.w	#0,$12(a0)
00013DBC 4E75                       		rts	
00013DBE                            ; ===========================================================================
00013DBE                            
00013DBE                            loc_13726:
00013DBE 1143 0026                  		move.b	d3,$26(a0)
00013DC2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013DC6 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013DCC 4A03                       		tst.b	d3
00013DCE 6A00                       		bpl.s	locret_1373C
00013DD0 4468 0014                  		neg.w	$14(a0)
00013DD4                            
00013DD4                            locret_1373C:
00013DD4 4E75                       		rts	
00013DD6                            ; ===========================================================================
00013DD6                            
00013DD6                            loc_1373E:
00013DD6 6100 0000                  		bsr.w	sub_14EB4
00013DDA 4A41                       		tst.w	d1
00013DDC 6A00                       		bpl.s	loc_13758
00013DDE D368 0008                  		add.w	d1,8(a0)
00013DE2 317C 0000 0010             		move.w	#0,$10(a0)
00013DE8 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013DEE 4E75                       		rts	
00013DF0                            ; ===========================================================================
00013DF0                            
00013DF0                            loc_13758:
00013DF0 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DF4 4A41                       		tst.w	d1
00013DF6 6A00                       		bpl.s	loc_13772
00013DF8 9368 000C                  		sub.w	d1,$C(a0)
00013DFC 4A68 0012                  		tst.w	$12(a0)
00013E00 6A00                       		bpl.s	locret_13770
00013E02 317C 0000 0012             		move.w	#0,$12(a0)
00013E08                            
00013E08                            locret_13770:
00013E08 4E75                       		rts	
00013E0A                            ; ===========================================================================
00013E0A                            
00013E0A                            loc_13772:
00013E0A 4A68 0012                  		tst.w	$12(a0)
00013E0E 6B00                       		bmi.s	locret_1379E
00013E10 6100 0000                  		bsr.w	Sonic_HitFloor
00013E14 4A41                       		tst.w	d1
00013E16 6A00                       		bpl.s	locret_1379E
00013E18 D368 000C                  		add.w	d1,$C(a0)
00013E1C 1143 0026                  		move.b	d3,$26(a0)
00013E20 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E24 117C 0000 001C             		move.b	#0,$1C(a0)
00013E2A 317C 0000 0012             		move.w	#0,$12(a0)
00013E30 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013E36                            
00013E36                            locret_1379E:
00013E36 4E75                       		rts	
00013E38                            ; End of function Sonic_Floor
00013E38                            
00013E38                            ; ---------------------------------------------------------------------------
00013E38                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013E38                            ; ---------------------------------------------------------------------------
00013E38                            
00013E38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E38                            
00013E38                            
00013E38                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013E38 0828 0004 0022             		btst	#4,$22(a0)
00013E3E 6700                       		beq.s	loc_137AE
00013E40 4E71                       		nop	
00013E42 4E71                       		nop	
00013E44 4E71                       		nop	
00013E46                            
00013E46                            loc_137AE:
00013E46 08A8 0005 0022             		bclr	#5,$22(a0)
00013E4C 08A8 0001 0022             		bclr	#1,$22(a0)
00013E52 08A8 0004 0022             		bclr	#4,$22(a0)
00013E58 0828 0002 0022             		btst	#2,$22(a0)
00013E5E 6700                       		beq.s	loc_137E4
00013E60 08A8 0002 0022             		bclr	#2,$22(a0)
00013E66 117C 0013 0016             		move.b	#$13,$16(a0)
00013E6C 117C 0009 0017             		move.b	#9,$17(a0)
00013E72 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013E78 5B68 000C                  		subq.w	#5,$C(a0)
00013E7C                            
00013E7C                            loc_137E4:
00013E7C 117C 0000 003C             		move.b	#0,$3C(a0)
00013E82 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013E88 4E75                       		rts	
00013E8A                            ; End of function Sonic_ResetOnFloor
00013E8A                            
00013E8A                            ; ===========================================================================
00013E8A                            ; ---------------------------------------------------------------------------
00013E8A                            ; Sonic	when he	gets hurt
00013E8A                            ; ---------------------------------------------------------------------------
00013E8A                            
00013E8A                            Obj01_Hurt:				; XREF: Obj01_Index
00013E8A 4EBA 9D52                  		jsr	SpeedToPos
00013E8E 0668 0030 0012             		addi.w	#$30,$12(a0)
00013E94 0828 0006 0022             		btst	#6,$22(a0)
00013E9A 6700                       		beq.s	loc_1380C
00013E9C 0468 0020 0012             		subi.w	#$20,$12(a0)
00013EA2                            
00013EA2                            loc_1380C:
00013EA2 6100 0000                  		bsr.w	Sonic_HurtStop
00013EA6 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013EAA 6100 F4BE                  		bsr.w	Sonic_RecordPos
00013EAE 6100 0000                  		bsr.w	Sonic_Animate
00013EB2 6100 0000                  		bsr.w	LoadSonicDynPLC
00013EB6 4EFA 9D4C                  		jmp	DisplaySprite
00013EBA                            
00013EBA                            ; ---------------------------------------------------------------------------
00013EBA                            ; Subroutine to	stop Sonic falling after he's been hurt
00013EBA                            ; ---------------------------------------------------------------------------
00013EBA                            
00013EBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EBA                            
00013EBA                            
00013EBA                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013EBA 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013EBE 0640 00E0                  		addi.w	#$E0,d0
00013EC2 B068 000C                  		cmp.w	$C(a0),d0
00013EC6 6500 0000                  		bcs.w	KillSonic
00013ECA 6100 FD70                  		bsr.w	Sonic_Floor
00013ECE 0828 0001 0022             		btst	#1,$22(a0)
00013ED4 6600                       		bne.s	locret_13860
00013ED6 7000                       		moveq	#0,d0
00013ED8 3140 0012                  		move.w	d0,$12(a0)
00013EDC 3140 0010                  		move.w	d0,$10(a0)
00013EE0 3140 0014                  		move.w	d0,$14(a0)
00013EE4 117C 0000 001C             		move.b	#0,$1C(a0)
00013EEA 5528 0024                  		subq.b	#2,$24(a0)
00013EEE 317C 0078 0030             		move.w	#$78,$30(a0)
00013EF4                            
00013EF4                            locret_13860:
00013EF4 4E75                       		rts	
00013EF6                            ; End of function Sonic_HurtStop
00013EF6                            
00013EF6                            ; ===========================================================================
00013EF6                            ; ---------------------------------------------------------------------------
00013EF6                            ; Sonic	when he	dies
00013EF6                            ; ---------------------------------------------------------------------------
00013EF6                            
00013EF6                            Obj01_Death:				; XREF: Obj01_Index
00013EF6 6100 0000                  		bsr.w	GameOver
00013EFA 4EBA 9CB6                  		jsr	ObjectFall
00013EFE 6100 F46A                  		bsr.w	Sonic_RecordPos
00013F02 6100 0000                  		bsr.w	Sonic_Animate
00013F06 6100 0000                  		bsr.w	LoadSonicDynPLC
00013F0A 4EFA 9CF8                  		jmp	DisplaySprite
00013F0E                            
00013F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F0E                            
00013F0E                            
00013F0E                            GameOver:				; XREF: Obj01_Death
00013F0E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013F12 0640 0100                  		addi.w	#$100,d0
00013F16 B068 000C                  		cmp.w	$C(a0),d0
00013F1A 6400 0000                  		bcc.w	locret_13900
00013F1E 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013F24 5428 0024                  		addq.b	#2,$24(a0)
00013F28 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013F2C 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013F30 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013F34 6600                       		bne.s	loc_138D4
00013F36 317C 0000 003A             		move.w	#0,$3A(a0)
00013F3C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013F42 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013F48 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013F4E 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013F52                            
00013F52                            loc_138C2:
00013F52 303C 008F                  		move.w	#$8F,d0
00013F56 4EB9 0000 15C0             		jsr	(PlaySound).l	; play game over music
00013F5C 7003                       		moveq	#3,d0
00013F5E 4EF9 0000 17AA             		jmp	(LoadPLC).l	; load game over patterns
00013F64                            ; ===========================================================================
00013F64                            
00013F64                            loc_138D4:
00013F64 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013F6A 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013F6E 6700                       		beq.s	locret_13900	; if not, branch
00013F70 317C 0000 003A             		move.w	#0,$3A(a0)
00013F76 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013F7C 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013F82 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013F88 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013F8E 60C2                       		bra.s	loc_138C2
00013F90                            ; ===========================================================================
00013F90                            
00013F90                            locret_13900:
00013F90 4E75                       		rts	
00013F92                            ; End of function GameOver
00013F92                            
00013F92                            ; ===========================================================================
00013F92                            ; ---------------------------------------------------------------------------
00013F92                            ; Sonic	when the level is restarted
00013F92                            ; ---------------------------------------------------------------------------
00013F92                            
00013F92                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013F92 4A68 003A                  		tst.w	$3A(a0)
00013F96 6700                       		beq.s	locret_13914
00013F98 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013F9C 6600                       		bne.s	locret_13914
00013F9E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013FA4                            
00013FA4                            locret_13914:
00013FA4 4E75                       		rts	
00013FA6                            
00013FA6                            ; ---------------------------------------------------------------------------
00013FA6                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013FA6                            ; ---------------------------------------------------------------------------
00013FA6                            
00013FA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FA6                            
00013FA6                            
00013FA6                            Sonic_Loops:				; XREF: Obj01_Control
00013FA6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013FAC 6700                       		beq.s	loc_13926	; if yes, branch
00013FAE 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013FB2 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013FB6                            
00013FB6                            loc_13926:
00013FB6 3028 000C                  		move.w	$C(a0),d0
00013FBA E248                       		lsr.w	#1,d0
00013FBC 0240 0380                  		andi.w	#$380,d0
00013FC0 1228 0008                  		move.b	8(a0),d1
00013FC4 0241 007F                  		andi.w	#$7F,d1
00013FC8 D041                       		add.w	d1,d0
00013FCA 43F8 A400                  		lea	($FFFFA400).w,a1
00013FCE 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013FD2 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013FD6 6700 FA66                  		beq.w	Obj01_ChkRoll
00013FDA B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013FDE 6700 FA5E                  		beq.w	Obj01_ChkRoll
00013FE2 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013FE6 6700                       		beq.s	loc_13976
00013FE8 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013FEC 6700                       		beq.s	loc_13966
00013FEE 08A8 0006 0001             		bclr	#6,1(a0)
00013FF4 4E75                       		rts	
00013FF6                            ; ===========================================================================
00013FF6                            
00013FF6                            loc_13966:
00013FF6 0828 0001 0022             		btst	#1,$22(a0)
00013FFC 6700                       		beq.s	loc_13976
00013FFE 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014004 4E75                       		rts	
00014006                            ; ===========================================================================
00014006                            
00014006                            loc_13976:
00014006 3428 0008                  		move.w	8(a0),d2
0001400A 0C02 002C                  		cmpi.b	#$2C,d2
0001400E 6400                       		bcc.s	loc_13988
00014010 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014016 4E75                       		rts	
00014018                            ; ===========================================================================
00014018                            
00014018                            loc_13988:
00014018 0C02 00E0                  		cmpi.b	#-$20,d2
0001401C 6500                       		bcs.s	loc_13996
0001401E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014024 4E75                       		rts	
00014026                            ; ===========================================================================
00014026                            
00014026                            loc_13996:
00014026 0828 0006 0001             		btst	#6,1(a0)
0001402C 6600                       		bne.s	loc_139B2
0001402E 1228 0026                  		move.b	$26(a0),d1
00014032 6700                       		beq.s	locret_139C2
00014034 0C01 0080                  		cmpi.b	#-$80,d1
00014038 6200                       		bhi.s	locret_139C2
0001403A 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014040 4E75                       		rts	
00014042                            ; ===========================================================================
00014042                            
00014042                            loc_139B2:
00014042 1228 0026                  		move.b	$26(a0),d1
00014046 0C01 0080                  		cmpi.b	#-$80,d1
0001404A 6300                       		bls.s	locret_139C2
0001404C 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014052                            
00014052                            locret_139C2:
00014052 4E75                       		rts	
00014054                            ; End of function Sonic_Loops
00014054                            
00014054                            ; ---------------------------------------------------------------------------
00014054                            ; Subroutine to	animate	Sonic's sprites
00014054                            ; ---------------------------------------------------------------------------
00014054                            
00014054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014054                            
00014054                            Player_Anim:
00014054 0000 0000                  	dc.l	SonicAniData
00014058 0000 0000                  	dc.l	SonicAniData ; gronic
0001405C                            	; Insert more animation data for other characters here
0001405C                            	
0001405C                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001405C 7000                       			moveq	#0,d0
0001405E 1038 FFE8                  		move.b	(v_character),d0
00014062 E548                       		lsl.w	#2,d0
00014064 43FA FFEE                  		lea 	Player_Anim(pc),a1
00014068                            		
00014068 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
0001406C                            	
0001406C 7000                       		moveq	#0,d0
0001406E 1028 001C                  		move.b	$1C(a0),d0
00014072 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014076 6700                       		beq.s	SAnim_Do	; if not, branch
00014078 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0001407C 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014082 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014088                            
00014088                            SAnim_Do:
00014088 D040                       		add.w	d0,d0
0001408A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001408E 1011                       		move.b	(a1),d0
00014090 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014092 1228 0022                  		move.b	$22(a0),d1
00014096 0201 0001                  		andi.b	#1,d1
0001409A 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140A0 8328 0001                  		or.b	d1,1(a0)
000140A4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000140A8 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
000140AA 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
000140AE                            
000140AE                            SAnim_Do2:
000140AE 7200                       		moveq	#0,d1
000140B0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
000140B4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000140B8 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
000140BA                            
000140BA                            SAnim_Next:
000140BA 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
000140BE 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
000140C2                            
000140C2                            SAnim_Delay:
000140C2 4E75                       		rts	
000140C4                            ; ===========================================================================
000140C4                            
000140C4                            SAnim_End_FF:
000140C4 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
000140C6 6600                       		bne.s	SAnim_End_FE	; if not, branch
000140C8 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
000140CE 1029 0001                  		move.b	1(a1),d0	; read sprite number
000140D2 60E6                       		bra.s	SAnim_Next
000140D4                            ; ===========================================================================
000140D4                            
000140D4                            SAnim_End_FE:
000140D4 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
000140D6 6600                       		bne.s	SAnim_End_FD	; if not, branch
000140D8 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000140DC 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000140E0 9200                       		sub.b	d0,d1
000140E2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000140E6 60D2                       		bra.s	SAnim_Next
000140E8                            ; ===========================================================================
000140E8                            
000140E8                            SAnim_End_FD:
000140E8 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000140EA 6600                       		bne.s	SAnim_End	; if not, branch
000140EC 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000140F2                            
000140F2                            SAnim_End:
000140F2 4E75                       		rts	
000140F4                            ; ===========================================================================
000140F4                            
000140F4                            SAnim_WalkRun:				; XREF: SAnim_Do
000140F4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000140F8 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000140FA 5200                       		addq.b	#1,d0		; is animation walking/running?
000140FC 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014100 7200                       		moveq	#0,d1
00014102 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014106 1428 0022                  		move.b	$22(a0),d2
0001410A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001410E 6600                       		bne.s	loc_13A70	; if yes, branch
00014110 4600                       		not.b	d0		; reverse angle
00014112                            
00014112                            loc_13A70:
00014112 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014116 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014118 7203                       		moveq	#3,d1
0001411A                            
0001411A                            loc_13A78:
0001411A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014120 B302                       		eor.b	d1,d2
00014122 8528 0001                  		or.b	d2,1(a0)
00014126 0828 0005 0022             		btst	#5,$22(a0)
0001412C 6600 0000                  		bne.w	SAnim_Push
00014130 E808                       		lsr.b	#4,d0		; divide angle by $10
00014132 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014136 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001413A 6A00                       		bpl.s	loc_13A9C
0001413C 4442                       		neg.w	d2
0001413E                            
0001413E                            loc_13A9C:
0001413E 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014144 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014148 6400                       		bcc.s	loc_13AB4	; if yes, branch
0001414A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014150 1200                       		move.b	d0,d1
00014152 E209                       		lsr.b	#1,d1
00014154 D001                       		add.b	d1,d0
00014156                            
00014156                            loc_13AB4:
00014156 D000                       		add.b	d0,d0
00014158 1600                       		move.b	d0,d3
0001415A 4442                       		neg.w	d2
0001415C 0642 0800                  		addi.w	#$800,d2
00014160 6A00                       		bpl.s	loc_13AC2
00014162 7400                       		moveq	#0,d2
00014164                            
00014164                            loc_13AC2:
00014164 E04A                       		lsr.w	#8,d2
00014166 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001416A 6100 FF42                  		bsr.w	SAnim_Do2
0001416E D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014172 4E75                       		rts	
00014174                            ; ===========================================================================
00014174                            
00014174                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014174 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014176 6600                       		bne.s	SAnim_Push	; if not, branch
00014178 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001417C 6A00                       		bpl.s	loc_13ADE
0001417E 4442                       		neg.w	d2
00014180                            
00014180                            loc_13ADE:
00014180 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014186 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001418A 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001418C 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014192                            
00014192                            loc_13AF0:
00014192 4442                       		neg.w	d2
00014194 0642 0400                  		addi.w	#$400,d2
00014198 6A00                       		bpl.s	loc_13AFA
0001419A 7400                       		moveq	#0,d2
0001419C                            
0001419C                            loc_13AFA:
0001419C E04A                       		lsr.w	#8,d2
0001419E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000141A2 1228 0022                  		move.b	$22(a0),d1
000141A6 0201 0001                  		andi.b	#1,d1
000141AA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000141B0 8328 0001                  		or.b	d1,1(a0)
000141B4 6000 FEF8                  		bra.w	SAnim_Do2
000141B8                            ; ===========================================================================
000141B8                            
000141B8                            SAnim_Push:				; XREF: SAnim_RollJump
000141B8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000141BC 6B00                       		bmi.s	loc_13B1E
000141BE 4442                       		neg.w	d2
000141C0                            
000141C0                            loc_13B1E:
000141C0 0642 0800                  		addi.w	#$800,d2
000141C4 6A00                       		bpl.s	loc_13B26
000141C6 7400                       		moveq	#0,d2
000141C8                            
000141C8                            loc_13B26:
000141C8 EC4A                       		lsr.w	#6,d2
000141CA 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000141CE 43F9 0000 0000             		lea	(SonAni_Push).l,a1
000141D4 1228 0022                  		move.b	$22(a0),d1
000141D8 0201 0001                  		andi.b	#1,d1
000141DC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000141E2 8328 0001                  		or.b	d1,1(a0)
000141E6 6000 FEC6                  		bra.w	SAnim_Do2
000141EA                            ; End of function Sonic_Animate
000141EA                            
000141EA                            ; ===========================================================================
000141EA                            SonicAniData:
000141EA                            	include "_anim\Sonic.asm"
000141EA                            ; ---------------------------------------------------------------------------
000141EA                            ; Animation script - Sonic
000141EA                            ; ---------------------------------------------------------------------------
000141EA 0000                       		dc.w SonAni_Walk-SonicAniData
000141EC 0000                       		dc.w SonAni_Run-SonicAniData
000141EE 0000                       		dc.w SonAni_Roll-SonicAniData
000141F0 0000                       		dc.w SonAni_Roll2-SonicAniData
000141F2 0000                       		dc.w SonAni_Push-SonicAniData
000141F4 0000                       		dc.w SonAni_Wait-SonicAniData
000141F6 0000                       		dc.w SonAni_Balance-SonicAniData
000141F8 0000                       		dc.w SonAni_LookUp-SonicAniData
000141FA 0000                       		dc.w SonAni_Duck-SonicAniData
000141FC 0000                       		dc.w SonAni_Warp1-SonicAniData
000141FE 0000                       		dc.w SonAni_Warp2-SonicAniData
00014200 0000                       		dc.w SonAni_Warp3-SonicAniData
00014202 0000                       		dc.w SonAni_Warp4-SonicAniData
00014204 0000                       		dc.w SonAni_Stop-SonicAniData
00014206 0000                       		dc.w SonAni_Float1-SonicAniData
00014208 0000                       		dc.w SonAni_Float2-SonicAniData
0001420A 0000                       		dc.w SonAni_Spring-SonicAniData
0001420C 0000                       		dc.w SonAni_LZHang-SonicAniData
0001420E 0000                       		dc.w SonAni_Leap1-SonicAniData
00014210 0000                       		dc.w SonAni_Leap2-SonicAniData
00014212 0000                       		dc.w SonAni_Surf-SonicAniData
00014214 0000                       		dc.w SonAni_Bubble-SonicAniData
00014216 0000                       		dc.w SonAni_Death1-SonicAniData
00014218 0000                       		dc.w SonAni_Drown-SonicAniData
0001421A 0000                       		dc.w SonAni_Death2-SonicAniData
0001421C 0000                       		dc.w SonAni_Shrink-SonicAniData
0001421E 0000                       		dc.w SonAni_Hurt-SonicAniData
00014220 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014222 0000                       		dc.w SonAni_Blank-SonicAniData
00014224 0000                       		dc.w SonAni_Float3-SonicAniData
00014226 0000                       		dc.w SonAni_Float4-SonicAniData
00014228 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014232 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
0001423A FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014242 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
0001424A FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014252 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014268 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
0001426C 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014270 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014274 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014278 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
0001427C 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014280 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014284 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014288 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001428C 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014294 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014298 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001429C 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
000142A2 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
000142A8 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
000142AC 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
000142B4 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
000142B8 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
000142BC 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
000142C0 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
000142CA 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
000142CE 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
000142D2 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
000142D6 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000142DE 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000142E2                            		even
000142E2                            		even
000142E2                            
000142E2                            ; ---------------------------------------------------------------------------
000142E2                            ; Sonic	pattern	loading	subroutine
000142E2                            ; ---------------------------------------------------------------------------
000142E2                            
000142E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142E2                            Player_DPLC:
000142E2 0000 0000                  	dc.l	SonicDynPLC
000142E6 0000 0000                  	dc.l	SonicDynPLC ; gronic
000142EA                            	; add pointers for player dplc here
000142EA                            Player_Art:
000142EA 0000 0000                  	dc.l	Art_Sonic
000142EE 0000 0000                  	dc.l	Art_Sonic ; gronic
000142F2                            	; add pointers for player art here
000142F2                            
000142F2                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000142F2 7000                       		moveq	#0,d0
000142F4 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000142F8 B038 F766                  		cmp.b	($FFFFF766).w,d0
000142FC 6700                       		beq.s	locret_13C96
000142FE 11C0 F766                  		move.b	d0,($FFFFF766).w
00014302                            		
00014302 323C 0000                  		move.w	#0,d1
00014306 1238 FFE8                  		move.b	(v_character),d1
0001430A E549                       		lsl.w	#2,d1
0001430C 45FA FFD4                  		lea 	Player_DPLC(pc),a2
00014310                            
00014310 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014314                            		
00014314 D040                       		add.w	d0,d0
00014316 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001431A 7200                       		moveq	#0,d1
0001431C 121A                       		move.b	(a2)+,d1	; read "number of entries" value
0001431E 5301                       		subq.b	#1,d1
00014320 6B00                       		bmi.s	locret_13C96
00014322 47F8 C800                  		lea	($FFFFC800).w,a3
00014326 11FC 0001 F767             		move.b	#1,($FFFFF767).w
0001432C                            
0001432C                            SPLC_ReadEntry:
0001432C 303C 0000                  		move.w	#0,d0
00014330 1038 FFE8                  		move.b	(v_character),d0
00014334 E548                       		lsl.w	#2,d0
00014336 43FA FFB2                  		lea 	Player_Art(pc),a1
0001433A                            
0001433A 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
0001433E                            
0001433E 7400                       		moveq	#0,d2
00014340 141A                       		move.b	(a2)+,d2
00014342 3002                       		move.w	d2,d0
00014344 E808                       		lsr.b	#4,d0
00014346 E14A                       		lsl.w	#8,d2
00014348 141A                       		move.b	(a2)+,d2
0001434A EB4A                       		lsl.w	#5,d2
0001434C D3C2                       		adda.l	d2,a1
0001434E                            
0001434E                            SPLC_LoadTile:
0001434E 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014352 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014356 47EB 0020                  		lea	$20(a3),a3	; next tile
0001435A 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
0001435E                            
0001435E 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014362                            
00014362                            locret_13C96:
00014362 4E75                       		rts	
00014364                            ; End of function LoadSonicDynPLC
00014364                            
00014364                            ; ===========================================================================
00014364                            ; ---------------------------------------------------------------------------
00014364                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014364                            ; ---------------------------------------------------------------------------
00014364                            
00014364                            Obj0A:					; XREF: Obj_Index
00014364 7000                       		moveq	#0,d0
00014366 1028 0024                  		move.b	$24(a0),d0
0001436A 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
0001436E 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014372                            ; ===========================================================================
00014372 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014376 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
0001437A 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
0001437E 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014382 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014384                            ; ===========================================================================
00014384                            
00014384                            Obj0A_Main:				; XREF: Obj0A_Index
00014384 5428 0024                  		addq.b	#2,$24(a0)
00014388 217C 0001 2F96 0004        		move.l	#Map_obj64,4(a0)
00014390 317C 8348 0002             		move.w	#$8348,2(a0)
00014396 117C 0084 0001             		move.b	#$84,1(a0)
0001439C 117C 0010 0019             		move.b	#$10,$19(a0)
000143A2 117C 0001 0018             		move.b	#1,$18(a0)
000143A8 1028 0028                  		move.b	$28(a0),d0
000143AC 6A00                       		bpl.s	loc_13D00
000143AE 5028 0024                  		addq.b	#8,$24(a0)
000143B2 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
000143BA 317C 0440 0002             		move.w	#$440,2(a0)
000143C0 0240 007F                  		andi.w	#$7F,d0
000143C4 1140 0033                  		move.b	d0,$33(a0)
000143C8 6000 0000                  		bra.w	Obj0A_Countdown
000143CC                            ; ===========================================================================
000143CC                            
000143CC                            loc_13D00:
000143CC 1140 001C                  		move.b	d0,$1C(a0)
000143D0 3168 0008 0030             		move.w	8(a0),$30(a0)
000143D6 317C FF78 0012             		move.w	#-$88,$12(a0)
000143DC                            
000143DC                            Obj0A_Animate:				; XREF: Obj0A_Index
000143DC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000143E2 4EB9 0000 ACCE             		jsr	AnimateSprite
000143E8                            
000143E8                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000143E8 3038 F646                  		move.w	($FFFFF646).w,d0
000143EC B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000143F0 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000143F2 117C 0006 0024             		move.b	#6,$24(a0)
000143F8 5E28 001C                  		addq.b	#7,$1C(a0)
000143FC 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014402 6700                       		beq.s	Obj0A_Display
00014404 6000                       		bra.s	Obj0A_Display
00014406                            ; ===========================================================================
00014406                            
00014406                            Obj0A_Wobble:
00014406 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0001440A 6700                       		beq.s	loc_13D44
0001440C 5868 0030                  		addq.w	#4,$30(a0)
00014410                            
00014410                            loc_13D44:
00014410 1028 0026                  		move.b	$26(a0),d0
00014414 5228 0026                  		addq.b	#1,$26(a0)
00014418 0240 007F                  		andi.w	#$7F,d0
0001441C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014422 1031 0000                  		move.b	(a1,d0.w),d0
00014426 4880                       		ext.w	d0
00014428 D068 0030                  		add.w	$30(a0),d0
0001442C 3140 0008                  		move.w	d0,8(a0)
00014430 6100                       		bsr.s	Obj0A_ShowNumber
00014432 4EBA 97AA                  		jsr	SpeedToPos
00014436 4A28 0001                  		tst.b	1(a0)
0001443A 6A00                       		bpl.s	Obj0A_Delete
0001443C 4EFA 97C6                  		jmp	DisplaySprite
00014440                            ; ===========================================================================
00014440                            
00014440                            Obj0A_Delete:
00014440 4EFA 97FE                  		jmp	DeleteObject
00014444                            ; ===========================================================================
00014444                            
00014444                            Obj0A_Display:				; XREF: Obj0A_Index
00014444 6100                       		bsr.s	Obj0A_ShowNumber
00014446 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001444C 4EB9 0000 ACCE             		jsr	AnimateSprite
00014452 4EFA 97B0                  		jmp	DisplaySprite
00014456                            ; ===========================================================================
00014456                            
00014456                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014456 4EFA 97E8                  		jmp	DeleteObject
0001445A                            ; ===========================================================================
0001445A                            
0001445A                            Obj0A_AirLeft:				; XREF: Obj0A_Index
0001445A 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014460 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014462 5368 0038                  		subq.w	#1,$38(a0)
00014466 6600                       		bne.s	Obj0A_Display2
00014468 117C 000E 0024             		move.b	#$E,$24(a0)
0001446E 5E28 001C                  		addq.b	#7,$1C(a0)
00014472 60D0                       		bra.s	Obj0A_Display
00014474                            ; ===========================================================================
00014474                            
00014474                            Obj0A_Display2:
00014474 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001447A 4EB9 0000 ACCE             		jsr	AnimateSprite
00014480 4A28 0001                  		tst.b	1(a0)
00014484 6A00                       		bpl.s	Obj0A_Delete3
00014486 4EFA 977C                  		jmp	DisplaySprite
0001448A                            ; ===========================================================================
0001448A                            
0001448A                            Obj0A_Delete3:
0001448A 4EFA 97B4                  		jmp	DeleteObject
0001448E                            ; ===========================================================================
0001448E                            
0001448E                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
0001448E 4A68 0038                  		tst.w	$38(a0)
00014492 6700                       		beq.s	locret_13E1A
00014494 5368 0038                  		subq.w	#1,$38(a0)
00014498 6600                       		bne.s	locret_13E1A
0001449A 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000144A0 6400                       		bcc.s	locret_13E1A
000144A2 317C 000F 0038             		move.w	#$F,$38(a0)
000144A8 4268 0012                  		clr.w	$12(a0)
000144AC 117C 0080 0001             		move.b	#$80,1(a0)
000144B2 3028 0008                  		move.w	8(a0),d0
000144B6 9078 F700                  		sub.w	($FFFFF700).w,d0
000144BA 0640 0080                  		addi.w	#$80,d0
000144BE 3140 0008                  		move.w	d0,8(a0)
000144C2 3028 000C                  		move.w	$C(a0),d0
000144C6 9078 F704                  		sub.w	($FFFFF704).w,d0
000144CA 0640 0080                  		addi.w	#$80,d0
000144CE 3140 000A                  		move.w	d0,$A(a0)
000144D2 117C 000C 0024             		move.b	#$C,$24(a0)
000144D8                            
000144D8                            locret_13E1A:
000144D8 4E75                       		rts	
000144DA                            ; ===========================================================================
000144DA                            Obj0A_WobbleData:
000144DA 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000144EB 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000144FC 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001450D 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001451D FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001452A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014537 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00014544 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014551 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
0001455A                            ; ===========================================================================
0001455A                            
0001455A                            Obj0A_Countdown:			; XREF: Obj0A_Index
0001455A 4A68 002C                  		tst.w	$2C(a0)
0001455E 6600 0000                  		bne.w	loc_13F86
00014562 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014568 6400 0000                  		bcc.w	locret_1408C
0001456C 0838 0006 D022             		btst	#6,($FFFFD022).w
00014572 6700 0000                  		beq.w	locret_1408C
00014576 5368 0038                  		subq.w	#1,$38(a0)
0001457A 6A00 0000                  		bpl.w	loc_13FAC
0001457E 317C 003B 0038             		move.w	#59,$38(a0)
00014584 317C 0001 0036             		move.w	#1,$36(a0)
0001458A 4EB9 0000 2C44             		jsr	(RandomNumber).l
00014590 0240 0001                  		andi.w	#1,d0
00014594 1140 0034                  		move.b	d0,$34(a0)
00014598 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
0001459C 0C40 0019                  		cmpi.w	#$19,d0
000145A0 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000145A2 0C40 0014                  		cmpi.w	#$14,d0
000145A6 6700                       		beq.s	Obj0A_WarnSound
000145A8 0C40 000F                  		cmpi.w	#$F,d0
000145AC 6700                       		beq.s	Obj0A_WarnSound
000145AE 0C40 000C                  		cmpi.w	#$C,d0
000145B2 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
000145B4 6600                       		bne.s	loc_13F02
000145B6 303C 0092                  		move.w	#$92,d0
000145BA 4EB9 0000 15C0             		jsr	(PlaySound).l	; play countdown music
000145C0                            
000145C0                            loc_13F02:
000145C0 5328 0032                  		subq.b	#1,$32(a0)
000145C4 6A00                       		bpl.s	Obj0A_ReduceAir
000145C6 1168 0033 0032             		move.b	$33(a0),$32(a0)
000145CC 08E8 0007 0036             		bset	#7,$36(a0)
000145D2 6000                       		bra.s	Obj0A_ReduceAir
000145D4                            ; ===========================================================================
000145D4                            
000145D4                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
000145D4 303C 00C2                  		move.w	#$C2,d0
000145D8 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000145DE                            
000145DE                            Obj0A_ReduceAir:
000145DE 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000145E2 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000145E6 6100 0000                  		bsr.w	ResumeMusic
000145EA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000145F0 303C 00B2                  		move.w	#$B2,d0
000145F4 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play drowning sound
000145FA 117C 000A 0034             		move.b	#$A,$34(a0)
00014600 317C 0001 0036             		move.w	#1,$36(a0)
00014606 317C 0078 002C             		move.w	#$78,$2C(a0)
0001460C 2F08                       		move.l	a0,-(sp)
0001460E 41F8 D000                  		lea	($FFFFD000).w,a0
00014612 6100 F824                  		bsr.w	Sonic_ResetOnFloor
00014616 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001461C 08E8 0001 0022             		bset	#1,$22(a0)
00014622 08E8 0007 0002             		bset	#7,2(a0)
00014628 317C 0000 0012             		move.w	#0,$12(a0)
0001462E 317C 0000 0010             		move.w	#0,$10(a0)
00014634 317C 0000 0014             		move.w	#0,$14(a0)
0001463A 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014640 205F                       		movea.l	(sp)+,a0
00014642 4E75                       		rts	
00014644                            ; ===========================================================================
00014644                            
00014644                            loc_13F86:
00014644 5368 002C                  		subq.w	#1,$2C(a0)
00014648 6600                       		bne.s	loc_13F94
0001464A 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014650 4E75                       		rts	
00014652                            ; ===========================================================================
00014652                            
00014652                            loc_13F94:
00014652 2F08                       		move.l	a0,-(sp)
00014654 41F8 D000                  		lea	($FFFFD000).w,a0
00014658 4EBA 9584                  		jsr	SpeedToPos
0001465C 0668 0010 0012             		addi.w	#$10,$12(a0)
00014662 205F                       		movea.l	(sp)+,a0
00014664 6000                       		bra.s	loc_13FAC
00014666                            ; ===========================================================================
00014666                            
00014666                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00014666 6000                       		bra.s	Obj0A_MakeItem
00014668                            ; ===========================================================================
00014668                            
00014668                            loc_13FAC:
00014668 4A68 0036                  		tst.w	$36(a0)
0001466C 6700 0000                  		beq.w	locret_1408C
00014670 5368 003A                  		subq.w	#1,$3A(a0)
00014674 6A00 0000                  		bpl.w	locret_1408C
00014678                            
00014678                            Obj0A_MakeItem:
00014678 4EB9 0000 2C44             		jsr	(RandomNumber).l
0001467E 0240 000F                  		andi.w	#$F,d0
00014682 3140 003A                  		move.w	d0,$3A(a0)
00014686 4EBA 9A02                  		jsr	SingleObjLoad
0001468A 6600 0000                  		bne.w	locret_1408C
0001468E 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014692 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014698 7006                       		moveq	#6,d0
0001469A 0838 0000 D022             		btst	#0,($FFFFD022).w
000146A0 6700                       		beq.s	loc_13FF2
000146A2 4440                       		neg.w	d0
000146A4 137C 0040 0026             		move.b	#$40,$26(a1)
000146AA                            
000146AA                            loc_13FF2:
000146AA D169 0008                  		add.w	d0,8(a1)
000146AE 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
000146B4 137C 0006 0028             		move.b	#6,$28(a1)
000146BA 4A68 002C                  		tst.w	$2C(a0)
000146BE 6700 0000                  		beq.w	loc_1403E
000146C2 0268 0007 003A             		andi.w	#7,$3A(a0)
000146C8 0668 0000 003A             		addi.w	#0,$3A(a0)
000146CE 3038 D00C                  		move.w	($FFFFD00C).w,d0
000146D2 0440 000C                  		subi.w	#$C,d0
000146D6 3340 000C                  		move.w	d0,$C(a1)
000146DA 4EB9 0000 2C44             		jsr	(RandomNumber).l
000146E0 1340 0026                  		move.b	d0,$26(a1)
000146E4 3038 FE04                  		move.w	($FFFFFE04).w,d0
000146E8 0200 0003                  		andi.b	#3,d0
000146EC 6600                       		bne.s	loc_14082
000146EE 137C 000E 0028             		move.b	#$E,$28(a1)
000146F4 6000                       		bra.s	loc_14082
000146F6                            ; ===========================================================================
000146F6                            
000146F6                            loc_1403E:
000146F6 0828 0007 0036             		btst	#7,$36(a0)
000146FC 6700                       		beq.s	loc_14082
000146FE 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014702 E24A                       		lsr.w	#1,d2
00014704 4EB9 0000 2C44             		jsr	(RandomNumber).l
0001470A 0240 0003                  		andi.w	#3,d0
0001470E 6600                       		bne.s	loc_1406A
00014710 08E8 0006 0036             		bset	#6,$36(a0)
00014716 6600                       		bne.s	loc_14082
00014718 1342 0028                  		move.b	d2,$28(a1)
0001471C 337C 001C 0038             		move.w	#$1C,$38(a1)
00014722                            
00014722                            loc_1406A:
00014722 4A28 0034                  		tst.b	$34(a0)
00014726 6600                       		bne.s	loc_14082
00014728 08E8 0006 0036             		bset	#6,$36(a0)
0001472E 6600                       		bne.s	loc_14082
00014730 1342 0028                  		move.b	d2,$28(a1)
00014734 337C 001C 0038             		move.w	#$1C,$38(a1)
0001473A                            
0001473A                            loc_14082:
0001473A 5328 0034                  		subq.b	#1,$34(a0)
0001473E 6A00                       		bpl.s	locret_1408C
00014740 4268 0036                  		clr.w	$36(a0)
00014744                            
00014744                            locret_1408C:
00014744 4E75                       		rts	
00014746                            
00014746                            ; ---------------------------------------------------------------------------
00014746                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00014746                            ; ---------------------------------------------------------------------------
00014746                            
00014746                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014746                            
00014746                            
00014746                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00014746 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001474C                             
0001474C                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
0001474C                             
0001474C 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014750                             
00014750 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00014756 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014758 43F9 0000 3B0A             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
0001475E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014760                             
00014760                            Air_GetBgm2:
00014760 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00014766 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014768 43F9 0000 3B12             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
0001476E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014770                             
00014770                            Air_GetBgm3:
00014770 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00014776 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014778 43F9 0000 3B18             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
0001477E 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014780                             
00014780                            Air_GetBgm4:
00014780 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00014786 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014788 43F9 0000 3B1E             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
0001478E                             
0001478E                            Air_PlayMusic:
0001478E 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014792                             
00014792                            loc_140A6:
00014792 4EB9 0000 15C0             		jsr	(PlaySound).l
00014798                             
00014798                            ; NineKode ends here
00014798                            
00014798                            loc_140AC:
00014798 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0001479E 4238 D372                  		clr.b	($FFFFD372).w
000147A2 4E75                       		rts	
000147A4                            ; End of function ResumeMusic
000147A4                            
000147A4                            ; ===========================================================================
000147A4                            Ani_obj0A:
000147A4                            	include "_anim\obj0A.asm"
000147A4                            ; ---------------------------------------------------------------------------
000147A4                            ; Animation script - countdown numbers and bubbles (LZ)
000147A4                            ; ---------------------------------------------------------------------------
000147A4 0000                       		dc.w byte_140D6-Ani_obj0A
000147A6 0000                       		dc.w byte_140E0-Ani_obj0A
000147A8 0000                       		dc.w byte_140EA-Ani_obj0A
000147AA 0000                       		dc.w byte_140F4-Ani_obj0A
000147AC 0000                       		dc.w byte_140FE-Ani_obj0A
000147AE 0000                       		dc.w byte_14108-Ani_obj0A
000147B0 0000                       		dc.w byte_14112-Ani_obj0A
000147B2 0000                       		dc.w byte_14118-Ani_obj0A
000147B4 0000                       		dc.w byte_14120-Ani_obj0A
000147B6 0000                       		dc.w byte_14128-Ani_obj0A
000147B8 0000                       		dc.w byte_14130-Ani_obj0A
000147BA 0000                       		dc.w byte_14138-Ani_obj0A
000147BC 0000                       		dc.w byte_14140-Ani_obj0A
000147BE 0000                       		dc.w byte_14148-Ani_obj0A
000147C0 0000                       		dc.w byte_1414A-Ani_obj0A
000147C2 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
000147CC 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
000147D6 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000147E0 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000147EA 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000147F4 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000147FE 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014804 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001480C 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014814 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001481C 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014824 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001482C 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014834 0EFC                       byte_14148:	dc.b $E, $FC
00014836 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001483C                            		even
0001483C                            		even
0001483C                            
0001483C                            ; ---------------------------------------------------------------------------
0001483C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001483C                            ; ---------------------------------------------------------------------------
0001483C                            Map_obj0A:
0001483C                            	include "_maps\obj0A.asm"
0001483C                            ; ---------------------------------------------------------------------------
0001483C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001483C                            ; ---------------------------------------------------------------------------
0001483C 0000                       		dc.w byte_14152-Map_obj0A
0001483E 01                         byte_14152:	dc.b 1
0001483F E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014844                            		even
00014844                            		even
00014844                            
00014844                            ; ===========================================================================
00014844                            ; ---------------------------------------------------------------------------
00014844                            ; Object 38 - shield and invincibility stars
00014844                            ; ---------------------------------------------------------------------------
00014844                            
00014844                            Obj38:					; XREF: Obj_Index
00014844 7000                       		moveq	#0,d0
00014846 1028 0024                  		move.b	$24(a0),d0
0001484A 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
0001484E 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014852                            ; ===========================================================================
00014852 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014854 0000                       		dc.w Obj38_Shield-Obj38_Index
00014856 0000                       		dc.w Obj38_Stars-Obj38_Index
00014858                            ; ===========================================================================
00014858                            
00014858                            Obj38_Main:				; XREF: Obj38_Index
00014858 5428 0024                  		addq.b	#2,$24(a0)
0001485C 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014864 117C 0004 0001             		move.b	#4,1(a0)
0001486A 117C 0001 0018             		move.b	#1,$18(a0)
00014870 117C 0010 0019             		move.b	#$10,$19(a0)
00014876 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
0001487A 6600                       		bne.s	Obj38_DoStars	; if not, branch
0001487C 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014882 4E75                       		rts	
00014884                            ; ===========================================================================
00014884                            
00014884                            Obj38_DoStars:
00014884 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014888 317C 055C 0002             		move.w	#$55C,2(a0)
0001488E 4E75                       		rts	
00014890                            ; ===========================================================================
00014890                            
00014890                            Obj38_Shield:				; XREF: Obj38_Index
00014890 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014894 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014896 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001489A 6700                       		beq.s	Obj38_Delete	; if not, branch
0001489C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000148A2 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000148A8 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148AE 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000148B4 4EB9 0000 ACCE             		jsr	AnimateSprite
000148BA 4EFA 9348                  		jmp	DisplaySprite
000148BE                            ; ===========================================================================
000148BE                            
000148BE                            Obj38_RmvShield:
000148BE 4E75                       		rts	
000148C0                            ; ===========================================================================
000148C0                            
000148C0                            Obj38_Delete:
000148C0 4EFA 937E                  		jmp	DeleteObject
000148C4                            ; ===========================================================================
000148C4                            
000148C4                            Obj38_Stars:				; XREF: Obj38_Index
000148C4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000148C8 6700                       		beq.s	Obj38_Delete2	; if not, branch
000148CA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000148CE 1228 001C                  		move.b	$1C(a0),d1
000148D2 5301                       		subq.b	#1,d1
000148D4 6000                       		bra.s	Obj38_StarTrail
000148D6                            ; ===========================================================================
000148D6 E909                       		lsl.b	#4,d1
000148D8 5801                       		addq.b	#4,d1
000148DA 9001                       		sub.b	d1,d0
000148DC 1228 0030                  		move.b	$30(a0),d1
000148E0 9001                       		sub.b	d1,d0
000148E2 5801                       		addq.b	#4,d1
000148E4 0201 000F                  		andi.b	#$F,d1
000148E8 1141 0030                  		move.b	d1,$30(a0)
000148EC 6000                       		bra.s	Obj38_StarTrail2a
000148EE                            ; ===========================================================================
000148EE                            
000148EE                            Obj38_StarTrail:			; XREF: Obj38_Stars
000148EE E709                       		lsl.b	#3,d1
000148F0 1401                       		move.b	d1,d2
000148F2 D201                       		add.b	d1,d1
000148F4 D202                       		add.b	d2,d1
000148F6 5801                       		addq.b	#4,d1
000148F8 9001                       		sub.b	d1,d0
000148FA 1228 0030                  		move.b	$30(a0),d1
000148FE 9001                       		sub.b	d1,d0
00014900 5801                       		addq.b	#4,d1
00014902 0C01 0018                  		cmpi.b	#$18,d1
00014906 6500                       		bcs.s	Obj38_StarTrail2
00014908 7200                       		moveq	#0,d1
0001490A                            
0001490A                            Obj38_StarTrail2:
0001490A 1141 0030                  		move.b	d1,$30(a0)
0001490E                            
0001490E                            Obj38_StarTrail2a:
0001490E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014912 43F1 0000                  		lea	(a1,d0.w),a1
00014916 3159 0008                  		move.w	(a1)+,8(a0)
0001491A 3159 000C                  		move.w	(a1)+,$C(a0)
0001491E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014924 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001492A 4EB9 0000 ACCE             		jsr	AnimateSprite
00014930 4EFA 92D2                  		jmp	DisplaySprite
00014934                            ; ===========================================================================
00014934                            
00014934                            Obj38_Delete2:				; XREF: Obj38_Stars
00014934 4EFA 930A                  		jmp	DeleteObject
00014938                            ; ===========================================================================
00014938                            ; ---------------------------------------------------------------------------
00014938                            ; Object 4A - special stage entry from beta
00014938                            ; ---------------------------------------------------------------------------
00014938                            
00014938                            Obj4A:					; XREF: Obj_Index
00014938 7000                       		moveq	#0,d0
0001493A 1028 0024                  		move.b	$24(a0),d0
0001493E 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014942 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014946                            ; ===========================================================================
00014946 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014948 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
0001494A 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
0001494C                            ; ===========================================================================
0001494C                            
0001494C                            Obj4A_Main:				; XREF: Obj4A_Index
0001494C 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014950 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014952 4E75                       		rts	
00014954                            ; ===========================================================================
00014954                            
00014954                            Obj4A_Main2:
00014954 5428 0024                  		addq.b	#2,$24(a0)
00014958 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014960 117C 0004 0001             		move.b	#4,1(a0)
00014966 117C 0001 0018             		move.b	#1,$18(a0)
0001496C 117C 0038 0019             		move.b	#$38,$19(a0)
00014972 317C 0541 0002             		move.w	#$541,2(a0)
00014978 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
0001497E                            
0001497E                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
0001497E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014984 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001498A 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014990 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014996 4EB9 0000 ACCE             		jsr	AnimateSprite
0001499C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000149A2 6600                       		bne.s	Obj4A_Display
000149A4 4A38 D000                  		tst.b	($FFFFD000).w
000149A8 6700                       		beq.s	Obj4A_Display
000149AA 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
000149B0 303C 00A8                  		move.w	#$A8,d0
000149B4 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
000149BA                            
000149BA                            Obj4A_Display:
000149BA 4EFA 9248                  		jmp	DisplaySprite
000149BE                            ; ===========================================================================
000149BE                            
000149BE                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
000149BE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
000149C2 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
000149C4 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000149CA 4EFA 9274                  		jmp	DeleteObject
000149CE                            ; ===========================================================================
000149CE                            
000149CE                            Obj4A_Wait:
000149CE 4E75                       		rts	
000149D0                            ; ===========================================================================
000149D0                            ; ---------------------------------------------------------------------------
000149D0                            ; Object 08 - water splash (LZ)
000149D0                            ; ---------------------------------------------------------------------------
000149D0                            
000149D0                            Obj08:					; XREF: Obj_Index
000149D0 7000                       		moveq	#0,d0
000149D2 1028 0024                  		move.b	$24(a0),d0
000149D6 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
000149DA 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
000149DE                            ; ===========================================================================
000149DE 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
000149E0 0000                       		dc.w Obj08_Display-Obj08_Index
000149E2 0000                       		dc.w Obj08_Delete-Obj08_Index
000149E4                            ; ===========================================================================
000149E4                            
000149E4                            Obj08_Main:				; XREF: Obj08_Index
000149E4 5428 0024                  		addq.b	#2,$24(a0)
000149E8 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
000149F0 0028 0004 0001             		ori.b	#4,1(a0)
000149F6 117C 0001 0018             		move.b	#1,$18(a0)
000149FC 117C 0010 0019             		move.b	#$10,$19(a0)
00014A02 317C 4259 0002             		move.w	#$4259,2(a0)
00014A08 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014A0E                            
00014A0E                            Obj08_Display:				; XREF: Obj08_Index
00014A0E 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014A14 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014A1A 4EB9 0000 ACCE             		jsr	AnimateSprite
00014A20 4EFA 91E2                  		jmp	DisplaySprite
00014A24                            ; ===========================================================================
00014A24                            
00014A24                            Obj08_Delete:				; XREF: Obj08_Index
00014A24 4EFA 921A                  		jmp	DeleteObject	; delete when animation	is complete
00014A28                            ; ===========================================================================
00014A28                            Ani_obj38:
00014A28                            	include "_anim\obj38.asm"
00014A28                            ; ---------------------------------------------------------------------------
00014A28                            ; Animation script - shield and invincibility stars
00014A28                            ; ---------------------------------------------------------------------------
00014A28 0000                       		dc.w byte_14356-Ani_obj38
00014A2A 0000                       		dc.w byte_1435E-Ani_obj38
00014A2C 0000                       		dc.w byte_14364-Ani_obj38
00014A2E 0000                       		dc.w byte_1437E-Ani_obj38
00014A30 0000                       		dc.w byte_14398-Ani_obj38
00014A32 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014A3A 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014A40 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014A51 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014A5A 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014A6B 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014A74 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014A85 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014A8E                            		even
00014A8E                            		even
00014A8E                            
00014A8E                            ; ---------------------------------------------------------------------------
00014A8E                            ; Sprite mappings - shield and invincibility stars
00014A8E                            ; ---------------------------------------------------------------------------
00014A8E                            Map_obj38:
00014A8E                            	include "_maps\obj38.asm"
00014A8E                            ; ---------------------------------------------------------------------------
00014A8E                            ; Sprite mappings - shield and invincibility stars
00014A8E                            ; ---------------------------------------------------------------------------
00014A8E 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014A92 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014A96 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014A9A 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014A9E 04                         byte_143C2:	dc.b 4
00014A9F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014AA4 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014AA9 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014AAE 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014AB3 04                         byte_143D7:	dc.b 4
00014AB4 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014AB9 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014ABE 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014AC3 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014AC8 04                         byte_143EC:	dc.b 4
00014AC9 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014ACE E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014AD3 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014AD8 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014ADD 04                         byte_14401:	dc.b 4
00014ADE E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014AE3 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014AE8 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014AED 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014AF2 04                         byte_14416:	dc.b 4
00014AF3 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014AF8 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014AFD 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014B02 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014B07 04                         byte_1442B:	dc.b 4
00014B08 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014B0D E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014B12 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014B17 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014B1C 04                         byte_14440:	dc.b 4
00014B1D E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014B22 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014B27 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014B2C 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014B32 00                         		even
00014B32 00                         		even
00014B32                            
00014B32                            Ani_obj4A:
00014B32                            	include "_anim\obj4A.asm"
00014B32                            ; ---------------------------------------------------------------------------
00014B32                            ; Animation script - special stage entry effect from beta
00014B32                            ; ---------------------------------------------------------------------------
00014B32 0000                       		dc.w byte_14458-Ani_obj4A
00014B34 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014B48                            		even
00014B48                            		even
00014B48                            
00014B48                            ; ---------------------------------------------------------------------------
00014B48                            ; Sprite mappings - special stage entry	from beta
00014B48                            ; ---------------------------------------------------------------------------
00014B48                            Map_obj4A:
00014B48                            	include "_maps\obj4A.asm"
00014B48                            ; ---------------------------------------------------------------------------
00014B48                            ; Sprite mappings - special stage entry	from beta
00014B48                            ; ---------------------------------------------------------------------------
00014B48 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014B4C 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014B50 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014B54 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014B58 03                         byte_1447C:	dc.b 3
00014B59 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014B5E 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014B63 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014B68 03                         byte_1448C:	dc.b 3
00014B69 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014B6E 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014B73 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014B78 05                         byte_1449C:	dc.b 5
00014B79 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014B7E EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014B83 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014B88 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014B8D 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014B92 09                         byte_144B6:	dc.b 9
00014B93 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014B98 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014B9D 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014BA2 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014BA7 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014BAC F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014BB1 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014BB6 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014BBB F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014BC0 12                         byte_144E4:	dc.b $12
00014BC1 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014BC6 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014BCB F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014BD0 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014BD5 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014BDA 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014BDF 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014BE4 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014BE9 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014BEE 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014BF3 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014BF8 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014BFD F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014C02 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014C07 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014C0C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014C11 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014C16 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014C1B 11                         byte_1453F:	dc.b $11
00014C1C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014C21 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014C26 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014C2B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014C30 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014C35 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014C3A 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014C3F F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014C44 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014C49 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014C4E 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014C53 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014C58 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014C5D 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014C62 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014C67 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014C6C 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014C71 09                         byte_14595:	dc.b 9
00014C72 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014C77 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014C7C 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014C81 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014C86 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014C8B FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014C90 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014C95 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014C9A 04                         		dc.b 4
00014C9B 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014CA0                            		even
00014CA0                            		even
00014CA0                            
00014CA0                            Ani_obj08:
00014CA0                            	include "_anim\obj08.asm"
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0                            ; Animation script - water splash (LZ)
00014CA0                            ; ---------------------------------------------------------------------------
00014CA0 0000                       		dc.w byte_145C6-Ani_obj08
00014CA2 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014CA8                            		even
00014CA8                            		even
00014CA8                            
00014CA8                            ; ---------------------------------------------------------------------------
00014CA8                            ; Sprite mappings - water splash (LZ)
00014CA8                            ; ---------------------------------------------------------------------------
00014CA8                            Map_obj08:
00014CA8                            	include "_maps\obj08.asm"
00014CA8                            ; ---------------------------------------------------------------------------
00014CA8                            ; Sprite mappings - water splash (LZ)
00014CA8                            ; ---------------------------------------------------------------------------
00014CA8 0000                       		dc.w byte_145D2-Map_obj08
00014CAA 0000                       		dc.w byte_145DD-Map_obj08
00014CAC 0000                       		dc.w byte_145E8-Map_obj08
00014CAE 02                         byte_145D2:	dc.b 2
00014CAF F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014CB4 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014CB9 02                         byte_145DD:	dc.b 2
00014CBA E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014CBF EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014CC4 01                         byte_145E8:	dc.b 1
00014CC5 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014CCA                            		even
00014CCA                            		even
00014CCA                            
00014CCA                            ; ---------------------------------------------------------------------------
00014CCA                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014CCA                            ; ---------------------------------------------------------------------------
00014CCA                            
00014CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CCA                            
00014CCA                            
00014CCA                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014CCA 0828 0003 0022             		btst	#3,$22(a0)
00014CD0 6700                       		beq.s	loc_14602
00014CD2 7000                       		moveq	#0,d0
00014CD4 11C0 F768                  		move.b	d0,($FFFFF768).w
00014CD8 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014CDC 4E75                       		rts	
00014CDE                            ; ===========================================================================
00014CDE                            
00014CDE                            loc_14602:
00014CDE 7003                       		moveq	#3,d0
00014CE0 11C0 F768                  		move.b	d0,($FFFFF768).w
00014CE4 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014CE8 1028 0026                  		move.b	$26(a0),d0
00014CEC 0600 0020                  		addi.b	#$20,d0
00014CF0 6A00                       		bpl.s	loc_14624
00014CF2 1028 0026                  		move.b	$26(a0),d0
00014CF6 6A00                       		bpl.s	loc_1461E
00014CF8 5300                       		subq.b	#1,d0
00014CFA                            
00014CFA                            loc_1461E:
00014CFA 0600 0020                  		addi.b	#$20,d0
00014CFE 6000                       		bra.s	loc_14630
00014D00                            ; ===========================================================================
00014D00                            
00014D00                            loc_14624:
00014D00 1028 0026                  		move.b	$26(a0),d0
00014D04 6A00                       		bpl.s	loc_1462C
00014D06 5200                       		addq.b	#1,d0
00014D08                            
00014D08                            loc_1462C:
00014D08 0600 001F                  		addi.b	#$1F,d0
00014D0C                            
00014D0C                            loc_14630:
00014D0C 0200 00C0                  		andi.b	#$C0,d0
00014D10 0C00 0040                  		cmpi.b	#$40,d0
00014D14 6700 0000                  		beq.w	Sonic_WalkVertL
00014D18 0C00 0080                  		cmpi.b	#$80,d0
00014D1C 6700 0000                  		beq.w	Sonic_WalkCeiling
00014D20 0C00 00C0                  		cmpi.b	#$C0,d0
00014D24 6700 0000                  		beq.w	Sonic_WalkVertR
00014D28 3428 000C                  		move.w	$C(a0),d2
00014D2C 3628 0008                  		move.w	8(a0),d3
00014D30 7000                       		moveq	#0,d0
00014D32 1028 0016                  		move.b	$16(a0),d0
00014D36 4880                       		ext.w	d0
00014D38 D440                       		add.w	d0,d2
00014D3A 1028 0017                  		move.b	$17(a0),d0
00014D3E 4880                       		ext.w	d0
00014D40 D640                       		add.w	d0,d3
00014D42 49F8 F768                  		lea	($FFFFF768).w,a4
00014D46 367C 0010                  		movea.w	#$10,a3
00014D4A 3C3C 0000                  		move.w	#0,d6
00014D4E 7A0D                       		moveq	#$D,d5
00014D50 6100 0000                  		bsr.w	FindFloor
00014D54 3F01                       		move.w	d1,-(sp)
00014D56 3428 000C                  		move.w	$C(a0),d2
00014D5A 3628 0008                  		move.w	8(a0),d3
00014D5E 7000                       		moveq	#0,d0
00014D60 1028 0016                  		move.b	$16(a0),d0
00014D64 4880                       		ext.w	d0
00014D66 D440                       		add.w	d0,d2
00014D68 1028 0017                  		move.b	$17(a0),d0
00014D6C 4880                       		ext.w	d0
00014D6E 4440                       		neg.w	d0
00014D70 D640                       		add.w	d0,d3
00014D72 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014D76 367C 0010                  		movea.w	#$10,a3
00014D7A 3C3C 0000                  		move.w	#0,d6
00014D7E 7A0D                       		moveq	#$D,d5
00014D80 6100 0000                  		bsr.w	FindFloor
00014D84 301F                       		move.w	(sp)+,d0
00014D86 6100 0000                  		bsr.w	Sonic_Angle
00014D8A 4A41                       		tst.w	d1
00014D8C 6700                       		beq.s	locret_146BE
00014D8E 6A00                       		bpl.s	loc_146C0
00014D90 0C41 FFF2                  		cmpi.w	#-$E,d1
00014D94 6D00                       		blt.s	locret_146E6
00014D96 D368 000C                  		add.w	d1,$C(a0)
00014D9A                            
00014D9A                            locret_146BE:
00014D9A 4E75                       		rts	
00014D9C                            ; ===========================================================================
00014D9C                            
00014D9C                            loc_146C0:
00014D9C 0C41 000E                  		cmpi.w	#$E,d1
00014DA0 6E00                       		bgt.s	loc_146CC
00014DA2                            
00014DA2                            loc_146C6:
00014DA2 D368 000C                  		add.w	d1,$C(a0)
00014DA6 4E75                       		rts	
00014DA8                            ; ===========================================================================
00014DA8                            
00014DA8                            loc_146CC:
00014DA8 4A28 0038                  		tst.b	$38(a0)
00014DAC 66F4                       		bne.s	loc_146C6
00014DAE 08E8 0001 0022             		bset	#1,$22(a0)
00014DB4 08A8 0005 0022             		bclr	#5,$22(a0)
00014DBA 117C 0001 001D             		move.b	#1,$1D(a0)
00014DC0 4E75                       		rts	
00014DC2                            ; ===========================================================================
00014DC2                            
00014DC2                            locret_146E6:
00014DC2 4E75                       		rts	
00014DC4                            ; End of function Sonic_AnglePos
00014DC4                            
00014DC4                            ; ===========================================================================
00014DC4 2428 0008                  		move.l	8(a0),d2
00014DC8 3028 0010                  		move.w	$10(a0),d0
00014DCC 48C0                       		ext.l	d0
00014DCE E180                       		asl.l	#8,d0
00014DD0 9480                       		sub.l	d0,d2
00014DD2 2142 0008                  		move.l	d2,8(a0)
00014DD6 303C 0038                  		move.w	#$38,d0
00014DDA 48C0                       		ext.l	d0
00014DDC E180                       		asl.l	#8,d0
00014DDE 9680                       		sub.l	d0,d3
00014DE0 2143 000C                  		move.l	d3,$C(a0)
00014DE4 4E75                       		rts	
00014DE6                            ; ===========================================================================
00014DE6                            
00014DE6                            locret_1470A:
00014DE6 4E75                       		rts	
00014DE8                            ; ===========================================================================
00014DE8 2628 000C                  		move.l	$C(a0),d3
00014DEC 3028 0012                  		move.w	$12(a0),d0
00014DF0 0440 0038                  		subi.w	#$38,d0
00014DF4 3140 0012                  		move.w	d0,$12(a0)
00014DF8 48C0                       		ext.l	d0
00014DFA E180                       		asl.l	#8,d0
00014DFC 9680                       		sub.l	d0,d3
00014DFE 2143 000C                  		move.l	d3,$C(a0)
00014E02 4E75                       		rts	
00014E04 4E75                       		rts	
00014E06                            ; ===========================================================================
00014E06 2428 0008                  		move.l	8(a0),d2
00014E0A 2628 000C                  		move.l	$C(a0),d3
00014E0E 3028 0010                  		move.w	$10(a0),d0
00014E12 48C0                       		ext.l	d0
00014E14 E180                       		asl.l	#8,d0
00014E16 9480                       		sub.l	d0,d2
00014E18 3028 0012                  		move.w	$12(a0),d0
00014E1C 48C0                       		ext.l	d0
00014E1E E180                       		asl.l	#8,d0
00014E20 9680                       		sub.l	d0,d3
00014E22 2142 0008                  		move.l	d2,8(a0)
00014E26 2143 000C                  		move.l	d3,$C(a0)
00014E2A 4E75                       		rts	
00014E2C                            
00014E2C                            ; ---------------------------------------------------------------------------
00014E2C                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014E2C                            ; ---------------------------------------------------------------------------
00014E2C                            
00014E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E2C                            
00014E2C                            
00014E2C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014E2C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014E30 B240                       		cmp.w	d0,d1
00014E32 6F00                       		ble.s	loc_1475E
00014E34 1438 F768                  		move.b	($FFFFF768).w,d2
00014E38 3200                       		move.w	d0,d1
00014E3A                            
00014E3A                            loc_1475E:
00014E3A 0802 0000                  		btst	#0,d2
00014E3E 6600                       		bne.s	loc_1476A
00014E40 1142 0026                  		move.b	d2,$26(a0)
00014E44 4E75                       		rts	
00014E46                            ; ===========================================================================
00014E46                            
00014E46                            loc_1476A:
00014E46 1428 0026                  		move.b	$26(a0),d2
00014E4A 0602 0020                  		addi.b	#$20,d2
00014E4E 0202 00C0                  		andi.b	#$C0,d2
00014E52 1142 0026                  		move.b	d2,$26(a0)
00014E56 4E75                       		rts	
00014E58                            ; End of function Sonic_Angle
00014E58                            
00014E58                            ; ---------------------------------------------------------------------------
00014E58                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014E58                            ; ---------------------------------------------------------------------------
00014E58                            
00014E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E58                            
00014E58                            
00014E58                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014E58 3428 000C                  		move.w	$C(a0),d2
00014E5C 3628 0008                  		move.w	8(a0),d3
00014E60 7000                       		moveq	#0,d0
00014E62 1028 0017                  		move.b	$17(a0),d0
00014E66 4880                       		ext.w	d0
00014E68 4440                       		neg.w	d0
00014E6A D440                       		add.w	d0,d2
00014E6C 1028 0016                  		move.b	$16(a0),d0
00014E70 4880                       		ext.w	d0
00014E72 D640                       		add.w	d0,d3
00014E74 49F8 F768                  		lea	($FFFFF768).w,a4
00014E78 367C 0010                  		movea.w	#$10,a3
00014E7C 3C3C 0000                  		move.w	#0,d6
00014E80 7A0D                       		moveq	#$D,d5
00014E82 6100 0000                  		bsr.w	FindWall
00014E86 3F01                       		move.w	d1,-(sp)
00014E88 3428 000C                  		move.w	$C(a0),d2
00014E8C 3628 0008                  		move.w	8(a0),d3
00014E90 7000                       		moveq	#0,d0
00014E92 1028 0017                  		move.b	$17(a0),d0
00014E96 4880                       		ext.w	d0
00014E98 D440                       		add.w	d0,d2
00014E9A 1028 0016                  		move.b	$16(a0),d0
00014E9E 4880                       		ext.w	d0
00014EA0 D640                       		add.w	d0,d3
00014EA2 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EA6 367C 0010                  		movea.w	#$10,a3
00014EAA 3C3C 0000                  		move.w	#0,d6
00014EAE 7A0D                       		moveq	#$D,d5
00014EB0 6100 0000                  		bsr.w	FindWall
00014EB4 301F                       		move.w	(sp)+,d0
00014EB6 6100 FF74                  		bsr.w	Sonic_Angle
00014EBA 4A41                       		tst.w	d1
00014EBC 6700                       		beq.s	locret_147F0
00014EBE 6A00                       		bpl.s	loc_147F2
00014EC0 0C41 FFF2                  		cmpi.w	#-$E,d1
00014EC4 6D00 FF20                  		blt.w	locret_1470A
00014EC8 D368 0008                  		add.w	d1,8(a0)
00014ECC                            
00014ECC                            locret_147F0:
00014ECC 4E75                       		rts	
00014ECE                            ; ===========================================================================
00014ECE                            
00014ECE                            loc_147F2:
00014ECE 0C41 000E                  		cmpi.w	#$E,d1
00014ED2 6E00                       		bgt.s	loc_147FE
00014ED4                            
00014ED4                            loc_147F8:
00014ED4 D368 0008                  		add.w	d1,8(a0)
00014ED8 4E75                       		rts	
00014EDA                            ; ===========================================================================
00014EDA                            
00014EDA                            loc_147FE:
00014EDA 4A28 0038                  		tst.b	$38(a0)
00014EDE 66F4                       		bne.s	loc_147F8
00014EE0 08E8 0001 0022             		bset	#1,$22(a0)
00014EE6 08A8 0005 0022             		bclr	#5,$22(a0)
00014EEC 117C 0001 001D             		move.b	#1,$1D(a0)
00014EF2 4E75                       		rts	
00014EF4                            ; End of function Sonic_WalkVertR
00014EF4                            
00014EF4                            ; ---------------------------------------------------------------------------
00014EF4                            ; Subroutine allowing Sonic to walk upside-down
00014EF4                            ; ---------------------------------------------------------------------------
00014EF4                            
00014EF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EF4                            
00014EF4                            
00014EF4                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014EF4 3428 000C                  		move.w	$C(a0),d2
00014EF8 3628 0008                  		move.w	8(a0),d3
00014EFC 7000                       		moveq	#0,d0
00014EFE 1028 0016                  		move.b	$16(a0),d0
00014F02 4880                       		ext.w	d0
00014F04 9440                       		sub.w	d0,d2
00014F06 0A42 000F                  		eori.w	#$F,d2
00014F0A 1028 0017                  		move.b	$17(a0),d0
00014F0E 4880                       		ext.w	d0
00014F10 D640                       		add.w	d0,d3
00014F12 49F8 F768                  		lea	($FFFFF768).w,a4
00014F16 367C FFF0                  		movea.w	#-$10,a3
00014F1A 3C3C 1000                  		move.w	#$1000,d6
00014F1E 7A0D                       		moveq	#$D,d5
00014F20 6100 0000                  		bsr.w	FindFloor
00014F24 3F01                       		move.w	d1,-(sp)
00014F26 3428 000C                  		move.w	$C(a0),d2
00014F2A 3628 0008                  		move.w	8(a0),d3
00014F2E 7000                       		moveq	#0,d0
00014F30 1028 0016                  		move.b	$16(a0),d0
00014F34 4880                       		ext.w	d0
00014F36 9440                       		sub.w	d0,d2
00014F38 0A42 000F                  		eori.w	#$F,d2
00014F3C 1028 0017                  		move.b	$17(a0),d0
00014F40 4880                       		ext.w	d0
00014F42 9640                       		sub.w	d0,d3
00014F44 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F48 367C FFF0                  		movea.w	#-$10,a3
00014F4C 3C3C 1000                  		move.w	#$1000,d6
00014F50 7A0D                       		moveq	#$D,d5
00014F52 6100 0000                  		bsr.w	FindFloor
00014F56 301F                       		move.w	(sp)+,d0
00014F58 6100 FED2                  		bsr.w	Sonic_Angle
00014F5C 4A41                       		tst.w	d1
00014F5E 6700                       		beq.s	locret_14892
00014F60 6A00                       		bpl.s	loc_14894
00014F62 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F66 6D00 FE5A                  		blt.w	locret_146E6
00014F6A 9368 000C                  		sub.w	d1,$C(a0)
00014F6E                            
00014F6E                            locret_14892:
00014F6E 4E75                       		rts	
00014F70                            ; ===========================================================================
00014F70                            
00014F70                            loc_14894:
00014F70 0C41 000E                  		cmpi.w	#$E,d1
00014F74 6E00                       		bgt.s	loc_148A0
00014F76                            
00014F76                            loc_1489A:
00014F76 9368 000C                  		sub.w	d1,$C(a0)
00014F7A 4E75                       		rts	
00014F7C                            ; ===========================================================================
00014F7C                            
00014F7C                            loc_148A0:
00014F7C 4A28 0038                  		tst.b	$38(a0)
00014F80 66F4                       		bne.s	loc_1489A
00014F82 08E8 0001 0022             		bset	#1,$22(a0)
00014F88 08A8 0005 0022             		bclr	#5,$22(a0)
00014F8E 117C 0001 001D             		move.b	#1,$1D(a0)
00014F94 4E75                       		rts	
00014F96                            ; End of function Sonic_WalkCeiling
00014F96                            
00014F96                            ; ---------------------------------------------------------------------------
00014F96                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014F96                            ; ---------------------------------------------------------------------------
00014F96                            
00014F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F96                            
00014F96                            
00014F96                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014F96 3428 000C                  		move.w	$C(a0),d2
00014F9A 3628 0008                  		move.w	8(a0),d3
00014F9E 7000                       		moveq	#0,d0
00014FA0 1028 0017                  		move.b	$17(a0),d0
00014FA4 4880                       		ext.w	d0
00014FA6 9440                       		sub.w	d0,d2
00014FA8 1028 0016                  		move.b	$16(a0),d0
00014FAC 4880                       		ext.w	d0
00014FAE 9640                       		sub.w	d0,d3
00014FB0 0A43 000F                  		eori.w	#$F,d3
00014FB4 49F8 F768                  		lea	($FFFFF768).w,a4
00014FB8 367C FFF0                  		movea.w	#-$10,a3
00014FBC 3C3C 0800                  		move.w	#$800,d6
00014FC0 7A0D                       		moveq	#$D,d5
00014FC2 6100 0000                  		bsr.w	FindWall
00014FC6 3F01                       		move.w	d1,-(sp)
00014FC8 3428 000C                  		move.w	$C(a0),d2
00014FCC 3628 0008                  		move.w	8(a0),d3
00014FD0 7000                       		moveq	#0,d0
00014FD2 1028 0017                  		move.b	$17(a0),d0
00014FD6 4880                       		ext.w	d0
00014FD8 D440                       		add.w	d0,d2
00014FDA 1028 0016                  		move.b	$16(a0),d0
00014FDE 4880                       		ext.w	d0
00014FE0 9640                       		sub.w	d0,d3
00014FE2 0A43 000F                  		eori.w	#$F,d3
00014FE6 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FEA 367C FFF0                  		movea.w	#-$10,a3
00014FEE 3C3C 0800                  		move.w	#$800,d6
00014FF2 7A0D                       		moveq	#$D,d5
00014FF4 6100 0000                  		bsr.w	FindWall
00014FF8 301F                       		move.w	(sp)+,d0
00014FFA 6100 FE30                  		bsr.w	Sonic_Angle
00014FFE 4A41                       		tst.w	d1
00015000 6700                       		beq.s	locret_14934
00015002 6A00                       		bpl.s	loc_14936
00015004 0C41 FFF2                  		cmpi.w	#-$E,d1
00015008 6D00 FDDC                  		blt.w	locret_1470A
0001500C 9368 0008                  		sub.w	d1,8(a0)
00015010                            
00015010                            locret_14934:
00015010 4E75                       		rts	
00015012                            ; ===========================================================================
00015012                            
00015012                            loc_14936:
00015012 0C41 000E                  		cmpi.w	#$E,d1
00015016 6E00                       		bgt.s	loc_14942
00015018                            
00015018                            loc_1493C:
00015018 9368 0008                  		sub.w	d1,8(a0)
0001501C 4E75                       		rts	
0001501E                            ; ===========================================================================
0001501E                            
0001501E                            loc_14942:
0001501E 4A28 0038                  		tst.b	$38(a0)
00015022 66F4                       		bne.s	loc_1493C
00015024 08E8 0001 0022             		bset	#1,$22(a0)
0001502A 08A8 0005 0022             		bclr	#5,$22(a0)
00015030 117C 0001 001D             		move.b	#1,$1D(a0)
00015036 4E75                       		rts	
00015038                            ; End of function Sonic_WalkVertL
00015038                            
00015038                            ; ---------------------------------------------------------------------------
00015038                            ; Subroutine to	find which tile	the object is standing on
00015038                            ; ---------------------------------------------------------------------------
00015038                            
00015038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015038                            
00015038                            
00015038                            Floor_ChkTile:				; XREF: FindFloor; et al
00015038 3002                       		move.w	d2,d0
0001503A E248                       		lsr.w	#1,d0
0001503C 0240 0380                  		andi.w	#$380,d0
00015040 3203                       		move.w	d3,d1
00015042 E049                       		lsr.w	#8,d1
00015044 0241 007F                  		andi.w	#$7F,d1
00015048 D041                       		add.w	d1,d0
0001504A 72FF                       		moveq	#-1,d1
0001504C 43F8 A400                  		lea	($FFFFA400).w,a1
00015050 1231 0000                  		move.b	(a1,d0.w),d1
00015054 6700                       		beq.s	loc_14996
00015056 6B00                       		bmi.s	loc_1499A
00015058 5301                       		subq.b	#1,d1
0001505A 4881                       		ext.w	d1
0001505C EE59                       		ror.w	#7,d1
0001505E 3002                       		move.w	d2,d0
00015060 D040                       		add.w	d0,d0
00015062 0240 01E0                  		andi.w	#$1E0,d0
00015066 D240                       		add.w	d0,d1
00015068 3003                       		move.w	d3,d0
0001506A E648                       		lsr.w	#3,d0
0001506C 0240 001E                  		andi.w	#$1E,d0
00015070 D240                       		add.w	d0,d1
00015072                            
00015072                            loc_14996:
00015072 2241                       		movea.l	d1,a1
00015074 4E75                       		rts	
00015076                            ; ===========================================================================
00015076                            
00015076                            loc_1499A:
00015076 0241 007F                  		andi.w	#$7F,d1
0001507A 0828 0006 0001             		btst	#6,1(a0)
00015080 6700                       		beq.s	loc_149B2
00015082 5241                       		addq.w	#1,d1
00015084 0C41 0029                  		cmpi.w	#$29,d1
00015088 6600                       		bne.s	loc_149B2
0001508A 323C 0051                  		move.w	#$51,d1
0001508E                            
0001508E                            loc_149B2:
0001508E 5301                       		subq.b	#1,d1
00015090 EE59                       		ror.w	#7,d1
00015092 3002                       		move.w	d2,d0
00015094 D040                       		add.w	d0,d0
00015096 0240 01E0                  		andi.w	#$1E0,d0
0001509A D240                       		add.w	d0,d1
0001509C 3003                       		move.w	d3,d0
0001509E E648                       		lsr.w	#3,d0
000150A0 0240 001E                  		andi.w	#$1E,d0
000150A4 D240                       		add.w	d0,d1
000150A6 2241                       		movea.l	d1,a1
000150A8 4E75                       		rts	
000150AA                            ; End of function Floor_ChkTile
000150AA                            
000150AA                            
000150AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150AA                            
000150AA                            
000150AA                            FindFloor:				; XREF: Sonic_AnglePos; et al
000150AA 618C                       		bsr.s	Floor_ChkTile
000150AC 3011                       		move.w	(a1),d0
000150AE 3800                       		move.w	d0,d4
000150B0 0240 07FF                  		andi.w	#$7FF,d0
000150B4 6700                       		beq.s	loc_149DE
000150B6 0B04                       		btst	d5,d4
000150B8 6600                       		bne.s	loc_149EC
000150BA                            
000150BA                            loc_149DE:
000150BA D44B                       		add.w	a3,d2
000150BC 6100 0000                  		bsr.w	FindFloor2
000150C0 944B                       		sub.w	a3,d2
000150C2 0641 0010                  		addi.w	#$10,d1
000150C6 4E75                       		rts	
000150C8                            ; ===========================================================================
000150C8                            
000150C8                            loc_149EC:
000150C8 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
000150CC 1032 0000                  		move.b	(a2,d0.w),d0
000150D0 0240 00FF                  		andi.w	#$FF,d0
000150D4 67E4                       		beq.s	loc_149DE
000150D6 45F9 0000 0000             		lea	(AngleMap).l,a2
000150DC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150E0 E948                       		lsl.w	#4,d0
000150E2 3203                       		move.w	d3,d1
000150E4 0804 000B                  		btst	#$B,d4
000150E8 6700                       		beq.s	loc_14A12
000150EA 4641                       		not.w	d1
000150EC 4414                       		neg.b	(a4)
000150EE                            
000150EE                            loc_14A12:
000150EE 0804 000C                  		btst	#$C,d4
000150F2 6700                       		beq.s	loc_14A22
000150F4 0614 0040                  		addi.b	#$40,(a4)
000150F8 4414                       		neg.b	(a4)
000150FA 0414 0040                  		subi.b	#$40,(a4)
000150FE                            
000150FE                            loc_14A22:
000150FE 0241 000F                  		andi.w	#$F,d1
00015102 D240                       		add.w	d0,d1
00015104 45F9 0000 0000             		lea	(CollArray1).l,a2
0001510A 1032 1000                  		move.b	(a2,d1.w),d0
0001510E 4880                       		ext.w	d0
00015110 BD44                       		eor.w	d6,d4
00015112 0804 000C                  		btst	#$C,d4
00015116 6700                       		beq.s	loc_14A3E
00015118 4440                       		neg.w	d0
0001511A                            
0001511A                            loc_14A3E:
0001511A 4A40                       		tst.w	d0
0001511C 679C                       		beq.s	loc_149DE
0001511E 6B00                       		bmi.s	loc_14A5A
00015120 0C00 0010                  		cmpi.b	#$10,d0
00015124 6700                       		beq.s	loc_14A66
00015126 3202                       		move.w	d2,d1
00015128 0241 000F                  		andi.w	#$F,d1
0001512C D041                       		add.w	d1,d0
0001512E 323C 000F                  		move.w	#$F,d1
00015132 9240                       		sub.w	d0,d1
00015134 4E75                       		rts	
00015136                            ; ===========================================================================
00015136                            
00015136                            loc_14A5A:
00015136 3202                       		move.w	d2,d1
00015138 0241 000F                  		andi.w	#$F,d1
0001513C D041                       		add.w	d1,d0
0001513E 6A00 FF7A                  		bpl.w	loc_149DE
00015142                            
00015142                            loc_14A66:
00015142 944B                       		sub.w	a3,d2
00015144 6100 0000                  		bsr.w	FindFloor2
00015148 D44B                       		add.w	a3,d2
0001514A 0441 0010                  		subi.w	#$10,d1
0001514E 4E75                       		rts	
00015150                            ; End of function FindFloor
00015150                            
00015150                            
00015150                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015150                            
00015150                            
00015150                            FindFloor2:				; XREF: FindFloor
00015150 6100 FEE6                  		bsr.w	Floor_ChkTile
00015154 3011                       		move.w	(a1),d0
00015156 3800                       		move.w	d0,d4
00015158 0240 07FF                  		andi.w	#$7FF,d0
0001515C 6700                       		beq.s	loc_14A86
0001515E 0B04                       		btst	d5,d4
00015160 6600                       		bne.s	loc_14A94
00015162                            
00015162                            loc_14A86:
00015162 323C 000F                  		move.w	#$F,d1
00015166 3002                       		move.w	d2,d0
00015168 0240 000F                  		andi.w	#$F,d0
0001516C 9240                       		sub.w	d0,d1
0001516E 4E75                       		rts	
00015170                            ; ===========================================================================
00015170                            
00015170                            loc_14A94:
00015170 2478 F796                  		movea.l	($FFFFF796).w,a2
00015174 1032 0000                  		move.b	(a2,d0.w),d0
00015178 0240 00FF                  		andi.w	#$FF,d0
0001517C 67E4                       		beq.s	loc_14A86
0001517E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015184 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015188 E948                       		lsl.w	#4,d0
0001518A 3203                       		move.w	d3,d1
0001518C 0804 000B                  		btst	#$B,d4
00015190 6700                       		beq.s	loc_14ABA
00015192 4641                       		not.w	d1
00015194 4414                       		neg.b	(a4)
00015196                            
00015196                            loc_14ABA:
00015196 0804 000C                  		btst	#$C,d4
0001519A 6700                       		beq.s	loc_14ACA
0001519C 0614 0040                  		addi.b	#$40,(a4)
000151A0 4414                       		neg.b	(a4)
000151A2 0414 0040                  		subi.b	#$40,(a4)
000151A6                            
000151A6                            loc_14ACA:
000151A6 0241 000F                  		andi.w	#$F,d1
000151AA D240                       		add.w	d0,d1
000151AC 45F9 0000 0000             		lea	(CollArray1).l,a2
000151B2 1032 1000                  		move.b	(a2,d1.w),d0
000151B6 4880                       		ext.w	d0
000151B8 BD44                       		eor.w	d6,d4
000151BA 0804 000C                  		btst	#$C,d4
000151BE 6700                       		beq.s	loc_14AE6
000151C0 4440                       		neg.w	d0
000151C2                            
000151C2                            loc_14AE6:
000151C2 4A40                       		tst.w	d0
000151C4 679C                       		beq.s	loc_14A86
000151C6 6B00                       		bmi.s	loc_14AFC
000151C8 3202                       		move.w	d2,d1
000151CA 0241 000F                  		andi.w	#$F,d1
000151CE D041                       		add.w	d1,d0
000151D0 323C 000F                  		move.w	#$F,d1
000151D4 9240                       		sub.w	d0,d1
000151D6 4E75                       		rts	
000151D8                            ; ===========================================================================
000151D8                            
000151D8                            loc_14AFC:
000151D8 3202                       		move.w	d2,d1
000151DA 0241 000F                  		andi.w	#$F,d1
000151DE D041                       		add.w	d1,d0
000151E0 6A00 FF80                  		bpl.w	loc_14A86
000151E4 4641                       		not.w	d1
000151E6 4E75                       		rts	
000151E8                            ; End of function FindFloor2
000151E8                            
000151E8                            
000151E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151E8                            
000151E8                            
000151E8                            FindWall:				; XREF: Sonic_WalkVertR; et al
000151E8 6100 FE4E                  		bsr.w	Floor_ChkTile
000151EC 3011                       		move.w	(a1),d0
000151EE 3800                       		move.w	d0,d4
000151F0 0240 07FF                  		andi.w	#$7FF,d0
000151F4 6700                       		beq.s	loc_14B1E
000151F6 0B04                       		btst	d5,d4
000151F8 6600                       		bne.s	loc_14B2C
000151FA                            
000151FA                            loc_14B1E:
000151FA D64B                       		add.w	a3,d3
000151FC 6100 0000                  		bsr.w	FindWall2
00015200 964B                       		sub.w	a3,d3
00015202 0641 0010                  		addi.w	#$10,d1
00015206 4E75                       		rts	
00015208                            ; ===========================================================================
00015208                            
00015208                            loc_14B2C:
00015208 2478 F796                  		movea.l	($FFFFF796).w,a2
0001520C 1032 0000                  		move.b	(a2,d0.w),d0
00015210 0240 00FF                  		andi.w	#$FF,d0
00015214 67E4                       		beq.s	loc_14B1E
00015216 45F9 0000 0000             		lea	(AngleMap).l,a2
0001521C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015220 E948                       		lsl.w	#4,d0
00015222 3202                       		move.w	d2,d1
00015224 0804 000C                  		btst	#$C,d4
00015228 6700                       		beq.s	loc_14B5A
0001522A 4641                       		not.w	d1
0001522C 0614 0040                  		addi.b	#$40,(a4)
00015230 4414                       		neg.b	(a4)
00015232 0414 0040                  		subi.b	#$40,(a4)
00015236                            
00015236                            loc_14B5A:
00015236 0804 000B                  		btst	#$B,d4
0001523A 6700                       		beq.s	loc_14B62
0001523C 4414                       		neg.b	(a4)
0001523E                            
0001523E                            loc_14B62:
0001523E 0241 000F                  		andi.w	#$F,d1
00015242 D240                       		add.w	d0,d1
00015244 45F9 0000 0000             		lea	(CollArray2).l,a2
0001524A 1032 1000                  		move.b	(a2,d1.w),d0
0001524E 4880                       		ext.w	d0
00015250 BD44                       		eor.w	d6,d4
00015252 0804 000B                  		btst	#$B,d4
00015256 6700                       		beq.s	loc_14B7E
00015258 4440                       		neg.w	d0
0001525A                            
0001525A                            loc_14B7E:
0001525A 4A40                       		tst.w	d0
0001525C 679C                       		beq.s	loc_14B1E
0001525E 6B00                       		bmi.s	loc_14B9A
00015260 0C00 0010                  		cmpi.b	#$10,d0
00015264 6700                       		beq.s	loc_14BA6
00015266 3203                       		move.w	d3,d1
00015268 0241 000F                  		andi.w	#$F,d1
0001526C D041                       		add.w	d1,d0
0001526E 323C 000F                  		move.w	#$F,d1
00015272 9240                       		sub.w	d0,d1
00015274 4E75                       		rts	
00015276                            ; ===========================================================================
00015276                            
00015276                            loc_14B9A:
00015276 3203                       		move.w	d3,d1
00015278 0241 000F                  		andi.w	#$F,d1
0001527C D041                       		add.w	d1,d0
0001527E 6A00 FF7A                  		bpl.w	loc_14B1E
00015282                            
00015282                            loc_14BA6:
00015282 964B                       		sub.w	a3,d3
00015284 6100 0000                  		bsr.w	FindWall2
00015288 D64B                       		add.w	a3,d3
0001528A 0441 0010                  		subi.w	#$10,d1
0001528E 4E75                       		rts	
00015290                            ; End of function FindWall
00015290                            
00015290                            
00015290                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015290                            
00015290                            
00015290                            FindWall2:				; XREF: FindWall
00015290 6100 FDA6                  		bsr.w	Floor_ChkTile
00015294 3011                       		move.w	(a1),d0
00015296 3800                       		move.w	d0,d4
00015298 0240 07FF                  		andi.w	#$7FF,d0
0001529C 6700                       		beq.s	loc_14BC6
0001529E 0B04                       		btst	d5,d4
000152A0 6600                       		bne.s	loc_14BD4
000152A2                            
000152A2                            loc_14BC6:
000152A2 323C 000F                  		move.w	#$F,d1
000152A6 3003                       		move.w	d3,d0
000152A8 0240 000F                  		andi.w	#$F,d0
000152AC 9240                       		sub.w	d0,d1
000152AE 4E75                       		rts	
000152B0                            ; ===========================================================================
000152B0                            
000152B0                            loc_14BD4:
000152B0 2478 F796                  		movea.l	($FFFFF796).w,a2
000152B4 1032 0000                  		move.b	(a2,d0.w),d0
000152B8 0240 00FF                  		andi.w	#$FF,d0
000152BC 67E4                       		beq.s	loc_14BC6
000152BE 45F9 0000 0000             		lea	(AngleMap).l,a2
000152C4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152C8 E948                       		lsl.w	#4,d0
000152CA 3202                       		move.w	d2,d1
000152CC 0804 000C                  		btst	#$C,d4
000152D0 6700                       		beq.s	loc_14C02
000152D2 4641                       		not.w	d1
000152D4 0614 0040                  		addi.b	#$40,(a4)
000152D8 4414                       		neg.b	(a4)
000152DA 0414 0040                  		subi.b	#$40,(a4)
000152DE                            
000152DE                            loc_14C02:
000152DE 0804 000B                  		btst	#$B,d4
000152E2 6700                       		beq.s	loc_14C0A
000152E4 4414                       		neg.b	(a4)
000152E6                            
000152E6                            loc_14C0A:
000152E6 0241 000F                  		andi.w	#$F,d1
000152EA D240                       		add.w	d0,d1
000152EC 45F9 0000 0000             		lea	(CollArray2).l,a2
000152F2 1032 1000                  		move.b	(a2,d1.w),d0
000152F6 4880                       		ext.w	d0
000152F8 BD44                       		eor.w	d6,d4
000152FA 0804 000B                  		btst	#$B,d4
000152FE 6700                       		beq.s	loc_14C26
00015300 4440                       		neg.w	d0
00015302                            
00015302                            loc_14C26:
00015302 4A40                       		tst.w	d0
00015304 679C                       		beq.s	loc_14BC6
00015306 6B00                       		bmi.s	loc_14C3C
00015308 3203                       		move.w	d3,d1
0001530A 0241 000F                  		andi.w	#$F,d1
0001530E D041                       		add.w	d1,d0
00015310 323C 000F                  		move.w	#$F,d1
00015314 9240                       		sub.w	d0,d1
00015316 4E75                       		rts	
00015318                            ; ===========================================================================
00015318                            
00015318                            loc_14C3C:
00015318 3203                       		move.w	d3,d1
0001531A 0241 000F                  		andi.w	#$F,d1
0001531E D041                       		add.w	d1,d0
00015320 6A00 FF80                  		bpl.w	loc_14BC6
00015324 4641                       		not.w	d1
00015326 4E75                       		rts	
00015328                            ; End of function FindWall2
00015328                            
00015328                            ; ---------------------------------------------------------------------------
00015328                            ; Unused floor/wall subroutine - logs something	to do with collision
00015328                            ; ---------------------------------------------------------------------------
00015328                            
00015328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015328                            
00015328                            
00015328                            FloorLog_Unk:				; XREF: Level
00015328 4E75                       		rts	
0001532A                            
0001532A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015330 45F9 0000 0000             		lea	(CollArray1).l,a2
00015336 363C 00FF                  		move.w	#$FF,d3
0001533A                            
0001533A                            loc_14C5E:
0001533A 7A10                       		moveq	#$10,d5
0001533C 343C 000F                  		move.w	#$F,d2
00015340                            
00015340                            loc_14C64:
00015340 7800                       		moveq	#0,d4
00015342 323C 000F                  		move.w	#$F,d1
00015346                            
00015346                            loc_14C6A:
00015346 3019                       		move.w	(a1)+,d0
00015348 EAA8                       		lsr.l	d5,d0
0001534A D944                       		addx.w	d4,d4
0001534C 51C9 FFF8                  		dbf	d1,loc_14C6A
00015350                            
00015350 34C4                       		move.w	d4,(a2)+
00015352 92FC 0020                  		suba.w	#$20,a1
00015356 5345                       		subq.w	#1,d5
00015358 51CA FFE6                  		dbf	d2,loc_14C64
0001535C                            
0001535C D2FC 0020                  		adda.w	#$20,a1
00015360 51CB FFD8                  		dbf	d3,loc_14C5E
00015364                            
00015364 43F9 0000 0000             		lea	(CollArray1).l,a1
0001536A 45F9 0000 0000             		lea	(CollArray2).l,a2
00015370 6100                       		bsr.s	FloorLog_Unk2
00015372 43F9 0000 0000             		lea	(CollArray1).l,a1
00015378 45F9 0000 0000             		lea	(CollArray1).l,a2
0001537E                            
0001537E                            ; End of function FloorLog_Unk
0001537E                            
0001537E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001537E                            
0001537E                            
0001537E                            FloorLog_Unk2:				; XREF: FloorLog_Unk
0001537E 363C 0FFF                  		move.w	#$FFF,d3
00015382                            
00015382                            loc_14CA6:
00015382 7400                       		moveq	#0,d2
00015384 323C 000F                  		move.w	#$F,d1
00015388 3019                       		move.w	(a1)+,d0
0001538A 6700                       		beq.s	loc_14CD4
0001538C 6B00                       		bmi.s	loc_14CBE
0001538E                            
0001538E                            loc_14CB2:
0001538E E248                       		lsr.w	#1,d0
00015390 6400                       		bcc.s	loc_14CB8
00015392 5202                       		addq.b	#1,d2
00015394                            
00015394                            loc_14CB8:
00015394 51C9 FFF8                  		dbf	d1,loc_14CB2
00015398                            
00015398 6000                       		bra.s	loc_14CD6
0001539A                            ; ===========================================================================
0001539A                            
0001539A                            loc_14CBE:
0001539A 0C40 FFFF                  		cmpi.w	#-1,d0
0001539E 6700                       		beq.s	loc_14CD0
000153A0                            
000153A0                            loc_14CC4:
000153A0 E348                       		lsl.w	#1,d0
000153A2 6400                       		bcc.s	loc_14CCA
000153A4 5302                       		subq.b	#1,d2
000153A6                            
000153A6                            loc_14CCA:
000153A6 51C9 FFF8                  		dbf	d1,loc_14CC4
000153AA                            
000153AA 6000                       		bra.s	loc_14CD6
000153AC                            ; ===========================================================================
000153AC                            
000153AC                            loc_14CD0:
000153AC 303C 0010                  		move.w	#$10,d0
000153B0                            
000153B0                            loc_14CD4:
000153B0 3400                       		move.w	d0,d2
000153B2                            
000153B2                            loc_14CD6:
000153B2 14C2                       		move.b	d2,(a2)+
000153B4 51CB FFCC                  		dbf	d3,loc_14CA6
000153B8                            
000153B8 4E75                       		rts	
000153BA                            
000153BA                            ; End of function FloorLog_Unk2
000153BA                            
000153BA                            
000153BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153BA                            
000153BA                            
000153BA                            Sonic_WalkSpeed:			; XREF: Sonic_Move
000153BA 2628 0008                  		move.l	8(a0),d3
000153BE 2428 000C                  		move.l	$C(a0),d2
000153C2 3228 0010                  		move.w	$10(a0),d1
000153C6 48C1                       		ext.l	d1
000153C8 E181                       		asl.l	#8,d1
000153CA D681                       		add.l	d1,d3
000153CC 3228 0012                  		move.w	$12(a0),d1
000153D0 48C1                       		ext.l	d1
000153D2 E181                       		asl.l	#8,d1
000153D4 D481                       		add.l	d1,d2
000153D6 4842                       		swap	d2
000153D8 4843                       		swap	d3
000153DA 11C0 F768                  		move.b	d0,($FFFFF768).w
000153DE 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000153E2 1200                       		move.b	d0,d1
000153E4 0600 0020                  		addi.b	#$20,d0
000153E8 6A00                       		bpl.s	loc_14D1A
000153EA 1001                       		move.b	d1,d0
000153EC 6A00                       		bpl.s	loc_14D14
000153EE 5300                       		subq.b	#1,d0
000153F0                            
000153F0                            loc_14D14:
000153F0 0600 0020                  		addi.b	#$20,d0
000153F4 6000                       		bra.s	loc_14D24
000153F6                            ; ===========================================================================
000153F6                            
000153F6                            loc_14D1A:
000153F6 1001                       		move.b	d1,d0
000153F8 6A00                       		bpl.s	loc_14D20
000153FA 5200                       		addq.b	#1,d0
000153FC                            
000153FC                            loc_14D20:
000153FC 0600 001F                  		addi.b	#$1F,d0
00015400                            
00015400                            loc_14D24:
00015400 0200 00C0                  		andi.b	#$C0,d0
00015404 6700 0000                  		beq.w	loc_14DF0
00015408 0C00 0080                  		cmpi.b	#$80,d0
0001540C 6700 0000                  		beq.w	loc_14F7C
00015410 0201 0038                  		andi.b	#$38,d1
00015414 6600                       		bne.s	loc_14D3C
00015416 5042                       		addq.w	#8,d2
00015418                            
00015418                            loc_14D3C:
00015418 0C00 0040                  		cmpi.b	#$40,d0
0001541C 6700 0000                  		beq.w	loc_1504A
00015420 6000 0000                  		bra.w	loc_14EBC
00015424                            
00015424                            ; End of function Sonic_WalkSpeed
00015424                            
00015424                            
00015424                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015424                            
00015424                            
00015424                            sub_14D48:				; XREF: Sonic_Jump
00015424 11C0 F768                  		move.b	d0,($FFFFF768).w
00015428 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001542C 0600 0020                  		addi.b	#$20,d0
00015430 0200 00C0                  		andi.b	#$C0,d0
00015434 0C00 0040                  		cmpi.b	#$40,d0
00015438 6700 0000                  		beq.w	loc_14FD6
0001543C 0C00 0080                  		cmpi.b	#$80,d0
00015440 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015444 0C00 00C0                  		cmpi.b	#$C0,d0
00015448 6700 0000                  		beq.w	sub_14E50
0001544C                            
0001544C                            ; End of function sub_14D48
0001544C                            
0001544C                            ; ---------------------------------------------------------------------------
0001544C                            ; Subroutine to	make Sonic land	on the floor after jumping
0001544C                            ; ---------------------------------------------------------------------------
0001544C                            
0001544C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001544C                            
0001544C                            
0001544C                            Sonic_HitFloor:				; XREF: Sonic_Floor
0001544C 3428 000C                  		move.w	$C(a0),d2
00015450 3628 0008                  		move.w	8(a0),d3
00015454 7000                       		moveq	#0,d0
00015456 1028 0016                  		move.b	$16(a0),d0
0001545A 4880                       		ext.w	d0
0001545C D440                       		add.w	d0,d2
0001545E 1028 0017                  		move.b	$17(a0),d0
00015462 4880                       		ext.w	d0
00015464 D640                       		add.w	d0,d3
00015466 49F8 F768                  		lea	($FFFFF768).w,a4
0001546A 367C 0010                  		movea.w	#$10,a3
0001546E 3C3C 0000                  		move.w	#0,d6
00015472 7A0D                       		moveq	#$D,d5
00015474 6100 FC34                  		bsr.w	FindFloor
00015478 3F01                       		move.w	d1,-(sp)
0001547A 3428 000C                  		move.w	$C(a0),d2
0001547E 3628 0008                  		move.w	8(a0),d3
00015482 7000                       		moveq	#0,d0
00015484 1028 0016                  		move.b	$16(a0),d0
00015488 4880                       		ext.w	d0
0001548A D440                       		add.w	d0,d2
0001548C 1028 0017                  		move.b	$17(a0),d0
00015490 4880                       		ext.w	d0
00015492 9640                       		sub.w	d0,d3
00015494 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015498 367C 0010                  		movea.w	#$10,a3
0001549C 3C3C 0000                  		move.w	#0,d6
000154A0 7A0D                       		moveq	#$D,d5
000154A2 6100 FC06                  		bsr.w	FindFloor
000154A6 301F                       		move.w	(sp)+,d0
000154A8 143C 0000                  		move.b	#0,d2
000154AC                            
000154AC                            loc_14DD0:
000154AC 1638 F76A                  		move.b	($FFFFF76A).w,d3
000154B0 B240                       		cmp.w	d0,d1
000154B2 6F00                       		ble.s	loc_14DDE
000154B4 1638 F768                  		move.b	($FFFFF768).w,d3
000154B8 C141                       		exg	d0,d1
000154BA                            
000154BA                            loc_14DDE:
000154BA 0803 0000                  		btst	#0,d3
000154BE 6700                       		beq.s	locret_14DE6
000154C0 1602                       		move.b	d2,d3
000154C2                            
000154C2                            locret_14DE6:
000154C2 4E75                       		rts	
000154C4                            
000154C4                            ; End of function Sonic_HitFloor
000154C4                            
000154C4                            ; ===========================================================================
000154C4 3428 000C                  		move.w	$C(a0),d2
000154C8 3628 0008                  		move.w	8(a0),d3
000154CC                            
000154CC                            loc_14DF0:				; XREF: Sonic_WalkSpeed
000154CC 0642 000A                  		addi.w	#$A,d2
000154D0 49F8 F768                  		lea	($FFFFF768).w,a4
000154D4 367C 0010                  		movea.w	#$10,a3
000154D8 3C3C 0000                  		move.w	#0,d6
000154DC 7A0E                       		moveq	#$E,d5
000154DE 6100 FBCA                  		bsr.w	FindFloor
000154E2 143C 0000                  		move.b	#0,d2
000154E6                            
000154E6                            loc_14E0A:				; XREF: sub_14EB4
000154E6 1638 F768                  		move.b	($FFFFF768).w,d3
000154EA 0803 0000                  		btst	#0,d3
000154EE 6700                       		beq.s	locret_14E16
000154F0 1602                       		move.b	d2,d3
000154F2                            
000154F2                            locret_14E16:
000154F2 4E75                       		rts	
000154F4                            
000154F4                            ; ---------------------------------------------------------------------------
000154F4                            ; Subroutine allowing objects to interact with the floor
000154F4                            ; ---------------------------------------------------------------------------
000154F4                            
000154F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F4                            
000154F4                            
000154F4                            ObjHitFloor:
000154F4 3628 0008                  		move.w	8(a0),d3
000154F8                            
000154F8                            ; End of function ObjHitFloor
000154F8                            
000154F8                            
000154F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F8                            
000154F8                            
000154F8                            ObjHitFloor2:
000154F8 3428 000C                  		move.w	$C(a0),d2
000154FC 7000                       		moveq	#0,d0
000154FE 1028 0016                  		move.b	$16(a0),d0
00015502 4880                       		ext.w	d0
00015504 D440                       		add.w	d0,d2
00015506 49F8 F768                  		lea	($FFFFF768).w,a4
0001550A 18BC 0000                  		move.b	#0,(a4)
0001550E 367C 0010                  		movea.w	#$10,a3
00015512 3C3C 0000                  		move.w	#0,d6
00015516 7A0D                       		moveq	#$D,d5
00015518 6100 FB90                  		bsr.w	FindFloor
0001551C 1638 F768                  		move.b	($FFFFF768).w,d3
00015520 0803 0000                  		btst	#0,d3
00015524 6700                       		beq.s	locret_14E4E
00015526 163C 0000                  		move.b	#0,d3
0001552A                            
0001552A                            locret_14E4E:
0001552A 4E75                       		rts	
0001552C                            ; End of function ObjHitFloor2
0001552C                            
0001552C                            
0001552C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001552C                            
0001552C                            
0001552C                            sub_14E50:				; XREF: sub_14D48
0001552C 3428 000C                  		move.w	$C(a0),d2
00015530 3628 0008                  		move.w	8(a0),d3
00015534 7000                       		moveq	#0,d0
00015536 1028 0017                  		move.b	$17(a0),d0
0001553A 4880                       		ext.w	d0
0001553C 9440                       		sub.w	d0,d2
0001553E 1028 0016                  		move.b	$16(a0),d0
00015542 4880                       		ext.w	d0
00015544 D640                       		add.w	d0,d3
00015546 49F8 F768                  		lea	($FFFFF768).w,a4
0001554A 367C 0010                  		movea.w	#$10,a3
0001554E 3C3C 0000                  		move.w	#0,d6
00015552 7A0E                       		moveq	#$E,d5
00015554 6100 FC92                  		bsr.w	FindWall
00015558 3F01                       		move.w	d1,-(sp)
0001555A 3428 000C                  		move.w	$C(a0),d2
0001555E 3628 0008                  		move.w	8(a0),d3
00015562 7000                       		moveq	#0,d0
00015564 1028 0017                  		move.b	$17(a0),d0
00015568 4880                       		ext.w	d0
0001556A D440                       		add.w	d0,d2
0001556C 1028 0016                  		move.b	$16(a0),d0
00015570 4880                       		ext.w	d0
00015572 D640                       		add.w	d0,d3
00015574 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015578 367C 0010                  		movea.w	#$10,a3
0001557C 3C3C 0000                  		move.w	#0,d6
00015580 7A0E                       		moveq	#$E,d5
00015582 6100 FC64                  		bsr.w	FindWall
00015586 301F                       		move.w	(sp)+,d0
00015588 143C 00C0                  		move.b	#-$40,d2
0001558C 6000 FF1E                  		bra.w	loc_14DD0
00015590                            
00015590                            ; End of function sub_14E50
00015590                            
00015590                            
00015590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015590                            
00015590                            
00015590                            sub_14EB4:				; XREF: Sonic_Floor
00015590 3428 000C                  		move.w	$C(a0),d2
00015594 3628 0008                  		move.w	8(a0),d3
00015598                            
00015598                            loc_14EBC:
00015598 0643 000A                  		addi.w	#$A,d3
0001559C 49F8 F768                  		lea	($FFFFF768).w,a4
000155A0 367C 0010                  		movea.w	#$10,a3
000155A4 3C3C 0000                  		move.w	#0,d6
000155A8 7A0E                       		moveq	#$E,d5
000155AA 6100 FC3C                  		bsr.w	FindWall
000155AE 143C 00C0                  		move.b	#-$40,d2
000155B2 6000 FF32                  		bra.w	loc_14E0A
000155B6                            
000155B6                            ; End of function sub_14EB4
000155B6                            
000155B6                            ; ---------------------------------------------------------------------------
000155B6                            ; Subroutine to	detect when an object hits a wall to its right
000155B6                            ; ---------------------------------------------------------------------------
000155B6                            
000155B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155B6                            
000155B6                            
000155B6                            ObjHitWallRight:
000155B6 D668 0008                  		add.w	8(a0),d3
000155BA 3428 000C                  		move.w	$C(a0),d2
000155BE 49F8 F768                  		lea	($FFFFF768).w,a4
000155C2 18BC 0000                  		move.b	#0,(a4)
000155C6 367C 0010                  		movea.w	#$10,a3
000155CA 3C3C 0000                  		move.w	#0,d6
000155CE 7A0E                       		moveq	#$E,d5
000155D0 6100 FC16                  		bsr.w	FindWall
000155D4 1638 F768                  		move.b	($FFFFF768).w,d3
000155D8 0803 0000                  		btst	#0,d3
000155DC 6700                       		beq.s	locret_14F06
000155DE 163C 00C0                  		move.b	#-$40,d3
000155E2                            
000155E2                            locret_14F06:
000155E2 4E75                       		rts	
000155E4                            
000155E4                            ; End of function ObjHitWallRight
000155E4                            
000155E4                            ; ---------------------------------------------------------------------------
000155E4                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000155E4                            ; touches them
000155E4                            ; ---------------------------------------------------------------------------
000155E4                            
000155E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155E4                            
000155E4                            
000155E4                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000155E4 3428 000C                  		move.w	$C(a0),d2
000155E8 3628 0008                  		move.w	8(a0),d3
000155EC 7000                       		moveq	#0,d0
000155EE 1028 0016                  		move.b	$16(a0),d0
000155F2 4880                       		ext.w	d0
000155F4 9440                       		sub.w	d0,d2
000155F6 0A42 000F                  		eori.w	#$F,d2
000155FA 1028 0017                  		move.b	$17(a0),d0
000155FE 4880                       		ext.w	d0
00015600 D640                       		add.w	d0,d3
00015602 49F8 F768                  		lea	($FFFFF768).w,a4
00015606 367C FFF0                  		movea.w	#-$10,a3
0001560A 3C3C 1000                  		move.w	#$1000,d6
0001560E 7A0E                       		moveq	#$E,d5
00015610 6100 FA98                  		bsr.w	FindFloor
00015614 3F01                       		move.w	d1,-(sp)
00015616 3428 000C                  		move.w	$C(a0),d2
0001561A 3628 0008                  		move.w	8(a0),d3
0001561E 7000                       		moveq	#0,d0
00015620 1028 0016                  		move.b	$16(a0),d0
00015624 4880                       		ext.w	d0
00015626 9440                       		sub.w	d0,d2
00015628 0A42 000F                  		eori.w	#$F,d2
0001562C 1028 0017                  		move.b	$17(a0),d0
00015630 4880                       		ext.w	d0
00015632 9640                       		sub.w	d0,d3
00015634 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015638 367C FFF0                  		movea.w	#-$10,a3
0001563C 3C3C 1000                  		move.w	#$1000,d6
00015640 7A0E                       		moveq	#$E,d5
00015642 6100 FA66                  		bsr.w	FindFloor
00015646 301F                       		move.w	(sp)+,d0
00015648 143C 0080                  		move.b	#-$80,d2
0001564C 6000 FE5E                  		bra.w	loc_14DD0
00015650                            ; End of function Sonic_DontRunOnWalls
00015650                            
00015650                            ; ===========================================================================
00015650 3428 000C                  		move.w	$C(a0),d2
00015654 3628 0008                  		move.w	8(a0),d3
00015658                            
00015658                            loc_14F7C:
00015658 0442 000A                  		subi.w	#$A,d2
0001565C 0A42 000F                  		eori.w	#$F,d2
00015660 49F8 F768                  		lea	($FFFFF768).w,a4
00015664 367C FFF0                  		movea.w	#-$10,a3
00015668 3C3C 1000                  		move.w	#$1000,d6
0001566C 7A0E                       		moveq	#$E,d5
0001566E 6100 FA3A                  		bsr.w	FindFloor
00015672 143C 0080                  		move.b	#-$80,d2
00015676 6000 FE6E                  		bra.w	loc_14E0A
0001567A                            
0001567A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001567A                            
0001567A                            
0001567A                            ObjHitCeiling:
0001567A 3428 000C                  		move.w	$C(a0),d2
0001567E 3628 0008                  		move.w	8(a0),d3
00015682 7000                       		moveq	#0,d0
00015684 1028 0016                  		move.b	$16(a0),d0
00015688 4880                       		ext.w	d0
0001568A 9440                       		sub.w	d0,d2
0001568C 0A42 000F                  		eori.w	#$F,d2
00015690 49F8 F768                  		lea	($FFFFF768).w,a4
00015694 367C FFF0                  		movea.w	#-$10,a3
00015698 3C3C 1000                  		move.w	#$1000,d6
0001569C 7A0E                       		moveq	#$E,d5
0001569E 6100 FA0A                  		bsr.w	FindFloor
000156A2 1638 F768                  		move.b	($FFFFF768).w,d3
000156A6 0803 0000                  		btst	#0,d3
000156AA 6700                       		beq.s	locret_14FD4
000156AC 163C 0080                  		move.b	#-$80,d3
000156B0                            
000156B0                            locret_14FD4:
000156B0 4E75                       		rts	
000156B2                            ; End of function ObjHitCeiling
000156B2                            
000156B2                            ; ===========================================================================
000156B2                            
000156B2                            loc_14FD6:				; XREF: sub_14D48
000156B2 3428 000C                  		move.w	$C(a0),d2
000156B6 3628 0008                  		move.w	8(a0),d3
000156BA 7000                       		moveq	#0,d0
000156BC 1028 0017                  		move.b	$17(a0),d0
000156C0 4880                       		ext.w	d0
000156C2 9440                       		sub.w	d0,d2
000156C4 1028 0016                  		move.b	$16(a0),d0
000156C8 4880                       		ext.w	d0
000156CA 9640                       		sub.w	d0,d3
000156CC 0A43 000F                  		eori.w	#$F,d3
000156D0 49F8 F768                  		lea	($FFFFF768).w,a4
000156D4 367C FFF0                  		movea.w	#-$10,a3
000156D8 3C3C 0800                  		move.w	#$800,d6
000156DC 7A0E                       		moveq	#$E,d5
000156DE 6100 FB08                  		bsr.w	FindWall
000156E2 3F01                       		move.w	d1,-(sp)
000156E4 3428 000C                  		move.w	$C(a0),d2
000156E8 3628 0008                  		move.w	8(a0),d3
000156EC 7000                       		moveq	#0,d0
000156EE 1028 0017                  		move.b	$17(a0),d0
000156F2 4880                       		ext.w	d0
000156F4 D440                       		add.w	d0,d2
000156F6 1028 0016                  		move.b	$16(a0),d0
000156FA 4880                       		ext.w	d0
000156FC 9640                       		sub.w	d0,d3
000156FE 0A43 000F                  		eori.w	#$F,d3
00015702 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015706 367C FFF0                  		movea.w	#-$10,a3
0001570A 3C3C 0800                  		move.w	#$800,d6
0001570E 7A0E                       		moveq	#$E,d5
00015710 6100 FAD6                  		bsr.w	FindWall
00015714 301F                       		move.w	(sp)+,d0
00015716 143C 0040                  		move.b	#$40,d2
0001571A 6000 FD90                  		bra.w	loc_14DD0
0001571E                            
0001571E                            ; ---------------------------------------------------------------------------
0001571E                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001571E                            ; ---------------------------------------------------------------------------
0001571E                            
0001571E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001571E                            
0001571E                            
0001571E                            Sonic_HitWall:				; XREF: Sonic_Floor
0001571E 3428 000C                  		move.w	$C(a0),d2
00015722 3628 0008                  		move.w	8(a0),d3
00015726                            
00015726                            loc_1504A:
00015726 0443 000A                  		subi.w	#$A,d3
0001572A 0A43 000F                  		eori.w	#$F,d3
0001572E 49F8 F768                  		lea	($FFFFF768).w,a4
00015732 367C FFF0                  		movea.w	#-$10,a3
00015736 3C3C 0800                  		move.w	#$800,d6
0001573A 7A0E                       		moveq	#$E,d5
0001573C 6100 FAAA                  		bsr.w	FindWall
00015740 143C 0040                  		move.b	#$40,d2
00015744 6000 FDA0                  		bra.w	loc_14E0A
00015748                            ; End of function Sonic_HitWall
00015748                            
00015748                            ; ---------------------------------------------------------------------------
00015748                            ; Subroutine to	detect when an object hits a wall to its left
00015748                            ; ---------------------------------------------------------------------------
00015748                            
00015748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015748                            
00015748                            
00015748                            ObjHitWallLeft:
00015748 D668 0008                  		add.w	8(a0),d3
0001574C 3428 000C                  		move.w	$C(a0),d2
00015750 49F8 F768                  		lea	($FFFFF768).w,a4
00015754 18BC 0000                  		move.b	#0,(a4)
00015758 367C FFF0                  		movea.w	#-$10,a3
0001575C 3C3C 0800                  		move.w	#$800,d6
00015760 7A0E                       		moveq	#$E,d5
00015762 6100 FA84                  		bsr.w	FindWall
00015766 1638 F768                  		move.b	($FFFFF768).w,d3
0001576A 0803 0000                  		btst	#0,d3
0001576E 6700                       		beq.s	locret_15098
00015770 163C 0040                  		move.b	#$40,d3
00015774                            
00015774                            locret_15098:
00015774 4E75                       		rts	
00015776                            ; End of function ObjHitWallLeft
00015776                            
00015776                            ; ===========================================================================
00015776                            ; ---------------------------------------------------------------------------
00015776                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00015776                            ; ---------------------------------------------------------------------------
00015776                            
00015776                            Obj66:					; XREF: Obj_Index
00015776 7000                       		moveq	#0,d0
00015778 1028 0024                  		move.b	$24(a0),d0
0001577C 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015780 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015784                            ; ===========================================================================
00015784 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00015786 0000                       		dc.w Obj66_Action-Obj66_Index
00015788 0000                       		dc.w Obj66_Display-Obj66_Index
0001578A 0000                       		dc.w Obj66_Release-Obj66_Index
0001578C                            ; ===========================================================================
0001578C                            
0001578C                            Obj66_Main:				; XREF: Obj66_Index
0001578C 5428 0024                  		addq.b	#2,$24(a0)
00015790 323C 0001                  		move.w	#1,d1
00015794 2248                       		movea.l	a0,a1
00015796 6000                       		bra.s	Obj66_MakeItem
00015798                            ; ===========================================================================
00015798                            
00015798                            Obj66_Loop:
00015798 6100 88F0                  		bsr.w	SingleObjLoad
0001579C 6600                       		bne.s	loc_150FE
0001579E 12BC 0066                  		move.b	#$66,0(a1)
000157A2 5829 0024                  		addq.b	#4,$24(a1)
000157A6 3368 0008 0008             		move.w	8(a0),8(a1)
000157AC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000157B2 137C 0003 0018             		move.b	#3,$18(a1)
000157B8 137C 0010 001A             		move.b	#$10,$1A(a1)
000157BE                            
000157BE                            Obj66_MakeItem:				; XREF: Obj66_Main
000157BE 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
000157C6 337C 4348 0002             		move.w	#$4348,2(a1)
000157CC 0029 0004 0001             		ori.b	#4,1(a1)
000157D2 137C 0038 0019             		move.b	#$38,$19(a1)
000157D8                            
000157D8                            loc_150FE:
000157D8 51C9 FFBE                  		dbf	d1,Obj66_Loop
000157DC                            
000157DC 117C 0030 0019             		move.b	#$30,$19(a0)
000157E2 117C 0004 0018             		move.b	#4,$18(a0)
000157E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000157EE 117C 0001 0034             		move.b	#1,$34(a0)
000157F4 1168 0028 0038             		move.b	$28(a0),$38(a0)
000157FA                            
000157FA                            Obj66_Action:				; XREF: Obj66_Index
000157FA 6100 0000                  		bsr.w	Obj66_ChkSwitch
000157FE 4A28 0001                  		tst.b	1(a0)
00015802 6A00 0000                  		bpl.w	Obj66_Display
00015806 323C 0030                  		move.w	#$30,d1
0001580A 3401                       		move.w	d1,d2
0001580C 3602                       		move.w	d2,d3
0001580E 5243                       		addq.w	#1,d3
00015810 3828 0008                  		move.w	8(a0),d4
00015814 6100 A7BE                  		bsr.w	SolidObject
00015818 0828 0005 0022             		btst	#5,$22(a0)
0001581E 6700 0000                  		beq.w	Obj66_Display
00015822 43F8 D000                  		lea	($FFFFD000).w,a1
00015826 720E                       		moveq	#$E,d1
00015828 3029 0008                  		move.w	8(a1),d0
0001582C B068 0008                  		cmp.w	8(a0),d0
00015830 6500                       		bcs.s	Obj66_GrabSonic
00015832 7207                       		moveq	#7,d1
00015834                            
00015834                            Obj66_GrabSonic:
00015834 B228 001A                  		cmp.b	$1A(a0),d1
00015838 6600                       		bne.s	Obj66_Display
0001583A 1141 0032                  		move.b	d1,$32(a0)
0001583E 5828 0024                  		addq.b	#4,$24(a0)
00015842 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015848 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
0001584E 337C 0800 0014             		move.w	#$800,$14(a1)
00015854 337C 0000 0010             		move.w	#0,$10(a1)
0001585A 337C 0000 0012             		move.w	#0,$12(a1)
00015860 08A8 0005 0022             		bclr	#5,$22(a0)
00015866 08A9 0005 0022             		bclr	#5,$22(a1)
0001586C 08E9 0001 0022             		bset	#1,$22(a1)
00015872 3429 0008                  		move.w	8(a1),d2
00015876 3629 000C                  		move.w	$C(a1),d3
0001587A 6100 0000                  		bsr.w	Obj66_ChgPos
0001587E D569 0008                  		add.w	d2,8(a1)
00015882 D769 000C                  		add.w	d3,$C(a1)
00015886 E0E9 0008                  		asr	8(a1)
0001588A E0E9 000C                  		asr	$C(a1)
0001588E                            
0001588E                            Obj66_Display:				; XREF: Obj66_Index
0001588E 6000 A41C                  		bra.w	MarkObjGone
00015892                            ; ===========================================================================
00015892                            
00015892                            Obj66_Release:				; XREF: Obj66_Index
00015892 1028 001A                  		move.b	$1A(a0),d0
00015896 0C00 0004                  		cmpi.b	#4,d0
0001589A 6700                       		beq.s	loc_151C8
0001589C 0C00 0007                  		cmpi.b	#7,d0
000158A0 6600                       		bne.s	loc_151F8
000158A2                            
000158A2                            loc_151C8:
000158A2 B028 0032                  		cmp.b	$32(a0),d0
000158A6 6700                       		beq.s	loc_151F8
000158A8 43F8 D000                  		lea	($FFFFD000).w,a1
000158AC 337C 0000 0010             		move.w	#0,$10(a1)
000158B2 337C 0800 0012             		move.w	#$800,$12(a1)
000158B8 0C00 0004                  		cmpi.b	#4,d0
000158BC 6700                       		beq.s	loc_151F0
000158BE 337C 0800 0010             		move.w	#$800,$10(a1)
000158C4 337C 0800 0012             		move.w	#$800,$12(a1)
000158CA                            
000158CA                            loc_151F0:
000158CA 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
000158CE 5928 0024                  		subq.b	#4,$24(a0)
000158D2                            
000158D2                            loc_151F8:
000158D2 6100                       		bsr.s	Obj66_ChkSwitch
000158D4 6100                       		bsr.s	Obj66_ChgPos
000158D6 6000 A3D4                  		bra.w	MarkObjGone
000158DA                            
000158DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158DA                            
000158DA                            
000158DA                            Obj66_ChkSwitch:			; XREF: Obj66_Action
000158DA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000158DE 7000                       		moveq	#0,d0
000158E0 1028 0038                  		move.b	$38(a0),d0
000158E4 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
000158EA 6700                       		beq.s	loc_15224	; if not, branch
000158EC 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
000158F0 6600                       		bne.s	Obj66_Animate	; if yes, branch
000158F2 4428 0034                  		neg.b	$34(a0)
000158F6 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
000158FC 6000                       		bra.s	Obj66_Animate
000158FE                            ; ===========================================================================
000158FE                            
000158FE                            loc_15224:
000158FE 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015902                            
00015902                            Obj66_Animate:
00015902 5328 001E                  		subq.b	#1,$1E(a0)
00015906 6A00                       		bpl.s	locret_15246
00015908 117C 0007 001E             		move.b	#7,$1E(a0)
0001590E 1228 0034                  		move.b	$34(a0),d1
00015912 1028 001A                  		move.b	$1A(a0),d0
00015916 D001                       		add.b	d1,d0
00015918 0200 000F                  		andi.b	#$F,d0
0001591C 1140 001A                  		move.b	d0,$1A(a0)
00015920                            
00015920                            locret_15246:
00015920 4E75                       		rts	
00015922                            ; End of function Obj66_ChkSwitch
00015922                            
00015922                            
00015922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015922                            
00015922                            
00015922                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015922 43F8 D000                  		lea	($FFFFD000).w,a1
00015926 7000                       		moveq	#0,d0
00015928 1028 001A                  		move.b	$1A(a0),d0
0001592C D040                       		add.w	d0,d0
0001592E 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015932 101A                       		move.b	(a2)+,d0
00015934 4880                       		ext.w	d0
00015936 D068 0008                  		add.w	8(a0),d0
0001593A 3340 0008                  		move.w	d0,8(a1)
0001593E 101A                       		move.b	(a2)+,d0
00015940 4880                       		ext.w	d0
00015942 D068 000C                  		add.w	$C(a0),d0
00015946 3340 000C                  		move.w	d0,$C(a1)
0001594A 4E75                       		rts	
0001594C                            ; End of function Obj66_ChgPos
0001594C                            
0001594C                            ; ===========================================================================
0001594C E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015950 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015954 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015958 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
0001595C 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015960 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015964 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015968 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
0001596C                            ; ---------------------------------------------------------------------------
0001596C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001596C                            ; ---------------------------------------------------------------------------
0001596C                            Map_obj66:
0001596C                            	include "_maps\obj66.asm"
0001596C                            ; ---------------------------------------------------------------------------
0001596C                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
0001596C                            ; ---------------------------------------------------------------------------
0001596C 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015970 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015974 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015978 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
0001597C 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015980 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015984 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015988 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
0001598C 0000                       		dc.w byte_154A4-Map_obj66
0001598E 06                         byte_152B4:	dc.b 6
0001598F E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015994 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015999 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
0001599E E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000159A3 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000159A8 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
000159AD 06                         byte_152D3:	dc.b 6
000159AE F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
000159B3 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
000159B8 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
000159BD F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
000159C2 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
000159C7 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
000159CC 06                         byte_152F2:	dc.b 6
000159CD 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
000159D2 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
000159D7 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
000159DC 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
000159E1 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
000159E6 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
000159EB 06                         byte_15311:	dc.b 6
000159EC 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
000159F1 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
000159F6 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
000159FB 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015A00 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015A05 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015A0A 06                         byte_15330:	dc.b 6
00015A0B 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015A10 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015A15 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015A1A 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015A1F 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015A24 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015A29 06                         byte_1534F:	dc.b 6
00015A2A 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015A2F 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015A34 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015A39 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015A3E 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015A43 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015A48 06                         byte_1536E:	dc.b 6
00015A49 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015A4E 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015A53 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015A58 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015A5D 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015A62 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015A67 06                         byte_1538D:	dc.b 6
00015A68 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015A6D F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015A72 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015A77 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015A7C 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015A81 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015A86 06                         byte_153AC:	dc.b 6
00015A87 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015A8C 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015A91 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015A96 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015A9B 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015AA0 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015AA5 06                         byte_153CB:	dc.b 6
00015AA6 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015AAB E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015AB0 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015AB5 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015ABA F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015ABF F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015AC4 06                         byte_153EA:	dc.b 6
00015AC5 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015ACA E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015ACF D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015AD4 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015AD9 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015ADE E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015AE3 06                         byte_15409:	dc.b 6
00015AE4 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015AE9 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015AEE CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015AF3 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015AF8 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015AFD E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015B02 06                         byte_15428:	dc.b 6
00015B03 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015B08 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015B0D C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015B12 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015B17 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015B1C E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015B21 06                         byte_15447:	dc.b 6
00015B22 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015B27 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015B2C CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015B31 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015B36 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015B3B E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015B40 06                         byte_15466:	dc.b 6
00015B41 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015B46 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015B4B D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015B50 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015B55 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015B5A E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015B5F 06                         byte_15485:	dc.b 6
00015B60 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015B65 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015B6A DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015B6F DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015B74 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015B79 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015B7E 0C                         byte_154A4:	dc.b $C
00015B7F C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015B84 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015B89 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015B8E C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015B93 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015B98 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015B9D 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015BA2 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015BA7 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015BAC 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015BB1 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015BB6 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015BBC 00                         		even
00015BBC 00                         		even
00015BBC                            
00015BBC                            ; ===========================================================================
00015BBC                            ; ---------------------------------------------------------------------------
00015BBC                            ; Object 67 - disc that	you run	around (SBZ)
00015BBC                            ; ---------------------------------------------------------------------------
00015BBC                            
00015BBC                            Obj67:					; XREF: Obj_Index
00015BBC 7000                       		moveq	#0,d0
00015BBE 1028 0024                  		move.b	$24(a0),d0
00015BC2 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015BC6 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015BCA                            ; ===========================================================================
00015BCA 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015BCC 0000                       		dc.w Obj67_Action-Obj67_Index
00015BCE                            ; ===========================================================================
00015BCE                            
00015BCE                            Obj67_Main:				; XREF: Obj67_Index
00015BCE 5428 0024                  		addq.b	#2,$24(a0)
00015BD2 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015BDA 317C C344 0002             		move.w	#$C344,2(a0)
00015BE0 117C 0004 0001             		move.b	#4,1(a0)
00015BE6 117C 0004 0018             		move.b	#4,$18(a0)
00015BEC 117C 0008 0019             		move.b	#8,$19(a0)
00015BF2 3168 0008 0032             		move.w	8(a0),$32(a0)
00015BF8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015BFE 117C 0018 0034             		move.b	#$18,$34(a0)
00015C04 117C 0048 0038             		move.b	#$48,$38(a0)
00015C0A 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C0E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015C12 6700                       		beq.s	loc_15546
00015C14 117C 0010 0034             		move.b	#$10,$34(a0)
00015C1A 117C 0038 0038             		move.b	#$38,$38(a0)
00015C20                            
00015C20                            loc_15546:
00015C20 1228 0028                  		move.b	$28(a0),d1	; get object type
00015C24 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015C28 4881                       		ext.w	d1
00015C2A E741                       		asl.w	#3,d1
00015C2C 3141 0036                  		move.w	d1,$36(a0)
00015C30 1028 0022                  		move.b	$22(a0),d0
00015C34 E418                       		ror.b	#2,d0
00015C36 0200 00C0                  		andi.b	#-$40,d0
00015C3A 1140 0026                  		move.b	d0,$26(a0)
00015C3E                            
00015C3E                            Obj67_Action:				; XREF: Obj67_Index
00015C3E 6100 0000                  		bsr.w	Obj67_MoveSonic
00015C42 6100 0000                  		bsr.w	Obj67_MoveSpot
00015C46 6000 0000                  		bra.w	Obj67_ChkDel
00015C4A                            ; ===========================================================================
00015C4A                            
00015C4A                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015C4A 7400                       		moveq	#0,d2
00015C4C 1428 0038                  		move.b	$38(a0),d2
00015C50 3602                       		move.w	d2,d3
00015C52 D643                       		add.w	d3,d3
00015C54 43F8 D000                  		lea	($FFFFD000).w,a1
00015C58 3029 0008                  		move.w	8(a1),d0
00015C5C 9068 0032                  		sub.w	$32(a0),d0
00015C60 D042                       		add.w	d2,d0
00015C62 B043                       		cmp.w	d3,d0
00015C64 6400                       		bcc.s	loc_155A8
00015C66 3229 000C                  		move.w	$C(a1),d1
00015C6A 9268 0030                  		sub.w	$30(a0),d1
00015C6E D242                       		add.w	d2,d1
00015C70 B243                       		cmp.w	d3,d1
00015C72 6400                       		bcc.s	loc_155A8
00015C74 0829 0001 0022             		btst	#1,$22(a1)
00015C7A 6700                       		beq.s	loc_155B8
00015C7C 4228 003A                  		clr.b	$3A(a0)
00015C80 4E75                       		rts	
00015C82                            ; ===========================================================================
00015C82                            
00015C82                            loc_155A8:
00015C82 4A28 003A                  		tst.b	$3A(a0)
00015C86 6700                       		beq.s	locret_155B6
00015C88 4229 0038                  		clr.b	$38(a1)
00015C8C 4228 003A                  		clr.b	$3A(a0)
00015C90                            
00015C90                            locret_155B6:
00015C90 4E75                       		rts	
00015C92                            ; ===========================================================================
00015C92                            
00015C92                            loc_155B8:
00015C92 4A28 003A                  		tst.b	$3A(a0)
00015C96 6600                       		bne.s	loc_155E2
00015C98 117C 0001 003A             		move.b	#1,$3A(a0)
00015C9E 0829 0002 0022             		btst	#2,$22(a1)
00015CA4 6600                       		bne.s	loc_155D0
00015CA6 4229 001C                  		clr.b	$1C(a1)
00015CAA                            
00015CAA                            loc_155D0:
00015CAA 08A9 0005 0022             		bclr	#5,$22(a1)
00015CB0 137C 0001 001D             		move.b	#1,$1D(a1)
00015CB6 137C 0001 0038             		move.b	#1,$38(a1)
00015CBC                            
00015CBC                            loc_155E2:
00015CBC 3029 0014                  		move.w	$14(a1),d0
00015CC0 4A68 0036                  		tst.w	$36(a0)
00015CC4 6A00                       		bpl.s	loc_15608
00015CC6 0C40 FC00                  		cmpi.w	#-$400,d0
00015CCA 6F00                       		ble.s	loc_155FA
00015CCC 337C FC00 0014             		move.w	#-$400,$14(a1)
00015CD2 4E75                       		rts	
00015CD4                            ; ===========================================================================
00015CD4                            
00015CD4                            loc_155FA:
00015CD4 0C40 F100                  		cmpi.w	#-$F00,d0
00015CD8 6C00                       		bge.s	locret_15606
00015CDA 337C F100 0014             		move.w	#-$F00,$14(a1)
00015CE0                            
00015CE0                            locret_15606:
00015CE0 4E75                       		rts	
00015CE2                            ; ===========================================================================
00015CE2                            
00015CE2                            loc_15608:
00015CE2 0C40 0400                  		cmpi.w	#$400,d0
00015CE6 6C00                       		bge.s	loc_15616
00015CE8 337C 0400 0014             		move.w	#$400,$14(a1)
00015CEE 4E75                       		rts	
00015CF0                            ; ===========================================================================
00015CF0                            
00015CF0                            loc_15616:
00015CF0 0C40 0F00                  		cmpi.w	#$F00,d0
00015CF4 6F00                       		ble.s	locret_15622
00015CF6 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015CFC                            
00015CFC                            locret_15622:
00015CFC 4E75                       		rts	
00015CFE                            ; ===========================================================================
00015CFE                            
00015CFE                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015CFE 3028 0036                  		move.w	$36(a0),d0
00015D02 D168 0026                  		add.w	d0,$26(a0)
00015D06 1028 0026                  		move.b	$26(a0),d0
00015D0A 4EB9 0000 2C6A             		jsr	(CalcSine).l
00015D10 3428 0030                  		move.w	$30(a0),d2
00015D14 3628 0032                  		move.w	$32(a0),d3
00015D18 7800                       		moveq	#0,d4
00015D1A 1828 0034                  		move.b	$34(a0),d4
00015D1E E14C                       		lsl.w	#8,d4
00015D20 2A04                       		move.l	d4,d5
00015D22 C9C0                       		muls.w	d0,d4
00015D24 4844                       		swap	d4
00015D26 CBC1                       		muls.w	d1,d5
00015D28 4845                       		swap	d5
00015D2A D842                       		add.w	d2,d4
00015D2C DA43                       		add.w	d3,d5
00015D2E 3144 000C                  		move.w	d4,$C(a0)
00015D32 3145 0008                  		move.w	d5,8(a0)
00015D36 4E75                       		rts	
00015D38                            ; ===========================================================================
00015D38                            
00015D38                            Obj67_ChkDel:				; XREF: Obj67_Action
00015D38 3028 0032                  		move.w	$32(a0),d0
00015D3C 0240 FF80                  		andi.w	#-$80,d0
00015D40 3238 F700                  		move.w	($FFFFF700).w,d1
00015D44 0441 0080                  		subi.w	#$80,d1
00015D48 0241 FF80                  		andi.w	#-$80,d1
00015D4C 9041                       		sub.w	d1,d0
00015D4E 0C40 0280                  		cmpi.w	#$280,d0
00015D52 6200                       		bhi.s	Obj67_Delete
00015D54 4EF9 0000 DC04             		jmp	DisplaySprite
00015D5A                            ; ===========================================================================
00015D5A                            
00015D5A                            Obj67_Delete:
00015D5A 4EF9 0000 DC40             		jmp	DeleteObject
00015D60                            ; ===========================================================================
00015D60                            ; ---------------------------------------------------------------------------
00015D60                            ; Sprite mappings - disc that you run around (SBZ)
00015D60                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015D60                            ; part of the level tiles.)
00015D60                            ; ---------------------------------------------------------------------------
00015D60                            Map_obj67:
00015D60                            	include "_maps\obj67.asm"
00015D60                            ; ---------------------------------------------------------------------------
00015D60                            ; Sprite mappings - disc that you run around (SBZ)
00015D60                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015D60                            ; part of the level tiles.)
00015D60                            ; ---------------------------------------------------------------------------
00015D60 0000                       		dc.w byte_15688-Map_obj67
00015D62 01                         byte_15688:	dc.b 1
00015D63 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015D68                            		even
00015D68                            		even
00015D68                            
00015D68                            ; ===========================================================================
00015D68                            ; ---------------------------------------------------------------------------
00015D68                            ; Object 68 - conveyor belts (SBZ)
00015D68                            ; ---------------------------------------------------------------------------
00015D68                            
00015D68                            Obj68:					; XREF: Obj_Index
00015D68 7000                       		moveq	#0,d0
00015D6A 1028 0024                  		move.b	$24(a0),d0
00015D6E 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015D72 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015D76                            ; ===========================================================================
00015D76 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015D78 0000                       		dc.w Obj68_Action-Obj68_Index
00015D7A                            ; ===========================================================================
00015D7A                            
00015D7A                            Obj68_Main:				; XREF: Obj68_Index
00015D7A 5428 0024                  		addq.b	#2,$24(a0)
00015D7E 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015D84 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D88 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015D8C 6700                       		beq.s	loc_156BA	; if zero, branch
00015D8E 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015D94                            
00015D94                            loc_156BA:
00015D94 1228 0028                  		move.b	$28(a0),d1	; get object type
00015D98 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015D9C 4881                       		ext.w	d1
00015D9E E841                       		asr.w	#4,d1
00015DA0 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015DA4                            
00015DA4                            Obj68_Action:				; XREF: Obj68_Index
00015DA4 6100                       		bsr.s	Obj68_MoveSonic
00015DA6 3028 0008                  		move.w	8(a0),d0
00015DAA 0240 FF80                  		andi.w	#$FF80,d0
00015DAE 3238 F700                  		move.w	($FFFFF700).w,d1
00015DB2 0441 0080                  		subi.w	#$80,d1
00015DB6 0241 FF80                  		andi.w	#$FF80,d1
00015DBA 9041                       		sub.w	d1,d0
00015DBC 0C40 0280                  		cmpi.w	#$280,d0
00015DC0 6200                       		bhi.s	Obj68_Delete
00015DC2 4E75                       		rts	
00015DC4                            ; ===========================================================================
00015DC4                            
00015DC4                            Obj68_Delete:
00015DC4 4EF9 0000 DC40             		jmp	DeleteObject
00015DCA                            ; ===========================================================================
00015DCA                            
00015DCA                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015DCA 7400                       		moveq	#0,d2
00015DCC 1428 0038                  		move.b	$38(a0),d2
00015DD0 3602                       		move.w	d2,d3
00015DD2 D643                       		add.w	d3,d3
00015DD4 43F8 D000                  		lea	($FFFFD000).w,a1
00015DD8 3029 0008                  		move.w	8(a1),d0
00015DDC 9068 0008                  		sub.w	8(a0),d0
00015DE0 D042                       		add.w	d2,d0
00015DE2 B043                       		cmp.w	d3,d0
00015DE4 6400                       		bcc.s	locret_1572E
00015DE6 3229 000C                  		move.w	$C(a1),d1
00015DEA 9268 000C                  		sub.w	$C(a0),d1
00015DEE 0641 0030                  		addi.w	#$30,d1
00015DF2 0C41 0030                  		cmpi.w	#$30,d1
00015DF6 6400                       		bcc.s	locret_1572E
00015DF8 0829 0001 0022             		btst	#1,$22(a1)
00015DFE 6600                       		bne.s	locret_1572E
00015E00 3028 0036                  		move.w	$36(a0),d0
00015E04 D169 0008                  		add.w	d0,8(a1)
00015E08                            
00015E08                            locret_1572E:
00015E08 4E75                       		rts	
00015E0A                            
00015E0A                            ; ===========================================================================
00015E0A                            ; ---------------------------------------------------------------------------
00015E0A                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015E0A                            ; ---------------------------------------------------------------------------
00015E0A                            
00015E0A                            Obj69:					; XREF: Obj_Index
00015E0A 7000                       		moveq	#0,d0
00015E0C 1028 0024                  		move.b	$24(a0),d0
00015E10 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015E14 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015E18                            ; ===========================================================================
00015E18 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015E1A 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015E1C 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015E1E                            ; ===========================================================================
00015E1E                            
00015E1E                            Obj69_Main:				; XREF: Obj69_Index
00015E1E 5428 0024                  		addq.b	#2,$24(a0)
00015E22 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015E2A 317C 4492 0002             		move.w	#$4492,2(a0)
00015E30 0028 0004 0001             		ori.b	#4,1(a0)
00015E36 117C 0080 0019             		move.b	#$80,$19(a0)
00015E3C 7000                       		moveq	#0,d0
00015E3E 1028 0028                  		move.b	$28(a0),d0
00015E42 0240 000F                  		andi.w	#$F,d0
00015E46 C0FC 003C                  		mulu.w	#$3C,d0
00015E4A 3140 0032                  		move.w	d0,$32(a0)
00015E4E 4A28 0028                  		tst.b	$28(a0)
00015E52 6A00                       		bpl.s	Obj69_Trapdoor
00015E54 5428 0024                  		addq.b	#2,$24(a0)
00015E58 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015E60 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015E66 117C 0010 0019             		move.b	#$10,$19(a0)
00015E6C 117C 0002 001C             		move.b	#2,$1C(a0)
00015E72 7000                       		moveq	#0,d0
00015E74 1028 0028                  		move.b	$28(a0),d0	; get object type
00015E78 3200                       		move.w	d0,d1
00015E7A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015E7E C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015E82 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015E86 3140 0032                  		move.w	d0,$32(a0)
00015E8A 0241 0070                  		andi.w	#$70,d1
00015E8E 0641 0010                  		addi.w	#$10,d1
00015E92 E549                       		lsl.w	#2,d1
00015E94 5341                       		subq.w	#1,d1
00015E96 3141 0036                  		move.w	d1,$36(a0)
00015E9A 6000                       		bra.s	Obj69_Spinner
00015E9C                            ; ===========================================================================
00015E9C                            
00015E9C                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015E9C 5368 0030                  		subq.w	#1,$30(a0)
00015EA0 6A00                       		bpl.s	Obj69_Animate
00015EA2 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015EA8 0868 0000 001C             		bchg	#0,$1C(a0)
00015EAE 4A28 0001                  		tst.b	1(a0)
00015EB2 6A00                       		bpl.s	Obj69_Animate
00015EB4 303C 00BB                  		move.w	#$BB,d0
00015EB8 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play door sound
00015EBE                            
00015EBE                            Obj69_Animate:
00015EBE 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015EC4 4EB9 0000 ACCE             		jsr	AnimateSprite
00015ECA 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015ECE 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015ED0 323C 004B                  		move.w	#$4B,d1
00015ED4 343C 000C                  		move.w	#$C,d2
00015ED8 3602                       		move.w	d2,d3
00015EDA 5243                       		addq.w	#1,d3
00015EDC 3828 0008                  		move.w	8(a0),d4
00015EE0 6100 A0F2                  		bsr.w	SolidObject
00015EE4 6000 9DC6                  		bra.w	MarkObjGone
00015EE8                            ; ===========================================================================
00015EE8                            
00015EE8                            Obj69_NotSolid:
00015EE8 0828 0003 0022             		btst	#3,$22(a0)
00015EEE 6700                       		beq.s	Obj69_Display
00015EF0 43F8 D000                  		lea	($FFFFD000).w,a1
00015EF4 08A9 0003 0022             		bclr	#3,$22(a1)
00015EFA 08A8 0003 0022             		bclr	#3,$22(a0)
00015F00 4228 0025                  		clr.b	$25(a0)
00015F04                            
00015F04                            Obj69_Display:
00015F04 6000 9DA6                  		bra.w	MarkObjGone
00015F08                            ; ===========================================================================
00015F08                            
00015F08                            Obj69_Spinner:				; XREF: Obj69_Index
00015F08 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F0C C068 0036                  		and.w	$36(a0),d0
00015F10 6600                       		bne.s	Obj69_Delay
00015F12 117C 0001 0034             		move.b	#1,$34(a0)
00015F18                            
00015F18                            Obj69_Delay:
00015F18 4A28 0034                  		tst.b	$34(a0)
00015F1C 6700                       		beq.s	Obj69_Animate2
00015F1E 5368 0030                  		subq.w	#1,$30(a0)
00015F22 6A00                       		bpl.s	Obj69_Animate2
00015F24 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015F2A 4228 0034                  		clr.b	$34(a0)
00015F2E 0868 0000 001C             		bchg	#0,$1C(a0)
00015F34                            
00015F34                            Obj69_Animate2:
00015F34 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015F3A 4EB9 0000 ACCE             		jsr	AnimateSprite
00015F40 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015F44 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015F46 323C 001B                  		move.w	#$1B,d1
00015F4A 343C 0007                  		move.w	#7,d2
00015F4E 3602                       		move.w	d2,d3
00015F50 5243                       		addq.w	#1,d3
00015F52 3828 0008                  		move.w	8(a0),d4
00015F56 6100 A07C                  		bsr.w	SolidObject
00015F5A 6000 9D50                  		bra.w	MarkObjGone
00015F5E                            ; ===========================================================================
00015F5E                            
00015F5E                            Obj69_NotSolid2:
00015F5E 0828 0003 0022             		btst	#3,$22(a0)
00015F64 6700                       		beq.s	Obj69_Display2
00015F66 43F8 D000                  		lea	($FFFFD000).w,a1
00015F6A 08A9 0003 0022             		bclr	#3,$22(a1)
00015F70 08A8 0003 0022             		bclr	#3,$22(a0)
00015F76 4228 0025                  		clr.b	$25(a0)
00015F7A                            
00015F7A                            Obj69_Display2:
00015F7A 6000 9D30                  		bra.w	MarkObjGone
00015F7E                            ; ===========================================================================
00015F7E                            Ani_obj69:
00015F7E                            	include "_anim\obj69.asm"
00015F7E                            ; ---------------------------------------------------------------------------
00015F7E                            ; Animation script - trapdoor (SBZ)
00015F7E                            ; ---------------------------------------------------------------------------
00015F7E 0000                       		dc.w byte_158AC-Ani_obj69
00015F80 0000                       		dc.w byte_158B2-Ani_obj69
00015F82 0000                       		dc.w byte_158B8-Ani_obj69
00015F84 0000                       		dc.w byte_158CC-Ani_obj69
00015F86 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015F8C 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015F92 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015F9F 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015FA6 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015FB3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015FBA                            		even
00015FBA                            		even
00015FBA                            
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            ; Sprite mappings - trapdoor (SBZ)
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            Map_obj69:
00015FBA                            	include "_maps\obj69.asm"
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA                            ; Sprite mappings - trapdoor (SBZ)
00015FBA                            ; ---------------------------------------------------------------------------
00015FBA 0000                       		dc.w byte_158E6-Map_obj69
00015FBC 0000                       		dc.w byte_158FB-Map_obj69
00015FBE 0000                       		dc.w byte_15924-Map_obj69
00015FC0 04                         byte_158E6:	dc.b 4
00015FC1 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015FC6 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015FCB F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015FD0 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015FD5 08                         byte_158FB:	dc.b 8
00015FD6 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015FDB 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015FE0 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015FE5 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015FEA F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015FEF 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015FF4 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015FF9 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015FFE 04                         byte_15924:	dc.b 4
00015FFF 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016004 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016009 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
0001600E 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016014 00                         		even
00016014 00                         		even
00016014                            
00016014                            ; ---------------------------------------------------------------------------
00016014                            ; Sprite mappings - spinning platforms (SBZ)
00016014                            ; ---------------------------------------------------------------------------
00016014                            Map_obj69a:
00016014                            	include "_maps\obj69a.asm"
00016014                            ; ---------------------------------------------------------------------------
00016014                            ; Sprite mappings - spinning platforms (SBZ)
00016014                            ; ---------------------------------------------------------------------------
00016014 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016018 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
0001601C 0000                       		dc.w byte_15970-Map_obj69a
0001601E 02                         byte_15944:	dc.b 2
0001601F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016024 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016029 02                         byte_1594F:	dc.b 2
0001602A F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
0001602F 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016034 02                         byte_1595A:	dc.b 2
00016035 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001603A 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
0001603F 02                         byte_15965:	dc.b 2
00016040 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016045 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001604A 02                         byte_15970:	dc.b 2
0001604B F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016050 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016056 00                         		even
00016056 00                         		even
00016056                            
00016056                            ; ===========================================================================
00016056                            ; ---------------------------------------------------------------------------
00016056                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016056                            ; ---------------------------------------------------------------------------
00016056                            
00016056                            Obj6A:					; XREF: Obj_Index
00016056 7000                       		moveq	#0,d0
00016058 1028 0024                  		move.b	$24(a0),d0
0001605C 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016060 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016064                            ; ===========================================================================
00016064 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016066 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016068                            ; ===========================================================================
00016068                            
00016068                            Obj6A_Main:				; XREF: Obj6A_Index
00016068 5428 0024                  		addq.b	#2,$24(a0)
0001606C 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016074 317C 43B5 0002             		move.w	#$43B5,2(a0)
0001607A 117C 0004 0001             		move.b	#4,1(a0)
00016080 117C 0004 0018             		move.b	#4,$18(a0)
00016086 117C 0020 0019             		move.b	#$20,$19(a0)
0001608C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016092 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016098 0C28 0003 0028             		cmpi.b	#3,$28(a0)
0001609E 6400                       		bcc.s	Obj6A_Action
000160A0 117C 00A2 0020             		move.b	#$A2,$20(a0)
000160A6                            
000160A6                            Obj6A_Action:				; XREF: Obj6A_Index
000160A6 7000                       		moveq	#0,d0
000160A8 1028 0028                  		move.b	$28(a0),d0
000160AC 0240 0007                  		andi.w	#7,d0
000160B0 D040                       		add.w	d0,d0
000160B2 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
000160B6 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
000160BA 3028 003A                  		move.w	$3A(a0),d0
000160BE 0240 FF80                  		andi.w	#$FF80,d0
000160C2 3238 F700                  		move.w	($FFFFF700).w,d1
000160C6 0441 0080                  		subi.w	#$80,d1
000160CA 0241 FF80                  		andi.w	#$FF80,d1
000160CE 9041                       		sub.w	d1,d0
000160D0 0C40 0280                  		cmpi.w	#$280,d0
000160D4 6200                       		bhi.s	Obj6A_Delete
000160D6 4EF9 0000 DC04             		jmp	DisplaySprite
000160DC                            ; ===========================================================================
000160DC                            
000160DC                            Obj6A_Delete:
000160DC 4EF9 0000 DC40             		jmp	DeleteObject
000160E2                            ; ===========================================================================
000160E2 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000160E6 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000160EA 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000160EC                            ; ===========================================================================
000160EC                            
000160EC                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000160EC 4E75                       		rts	
000160EE                            ; ===========================================================================
000160EE                            
000160EE                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000160EE 323C 0060                  		move.w	#$60,d1
000160F2 7000                       		moveq	#0,d0
000160F4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000160F8 0828 0000 0022             		btst	#0,$22(a0)
000160FE 6700                       		beq.s	Obj6A_Animate01
00016100 4440                       		neg.w	d0
00016102 D041                       		add.w	d1,d0
00016104                            
00016104                            Obj6A_Animate01:
00016104 3228 003A                  		move.w	$3A(a0),d1
00016108 9240                       		sub.w	d0,d1
0001610A 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
0001610E 5328 001E                  		subq.b	#1,$1E(a0)
00016112 6A00                       		bpl.s	loc_15A46
00016114 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001611A 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016120                            
00016120                            loc_15A46:
00016120 4A28 0001                  		tst.b	1(a0)
00016124 6A00                       		bpl.s	locret_15A60
00016126 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001612A 0240 000F                  		andi.w	#$F,d0
0001612E 6600                       		bne.s	locret_15A60
00016130 303C 00B0                  		move.w	#$B0,d0
00016134 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play saw sound
0001613A                            
0001613A                            locret_15A60:
0001613A 4E75                       		rts	
0001613C                            ; ===========================================================================
0001613C                            
0001613C                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
0001613C 323C 0030                  		move.w	#$30,d1
00016140 7000                       		moveq	#0,d0
00016142 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016146 0828 0000 0022             		btst	#0,$22(a0)
0001614C 6700                       		beq.s	Obj6A_Animate02
0001614E 4440                       		neg.w	d0
00016150 0640 0080                  		addi.w	#$80,d0
00016154                            
00016154                            Obj6A_Animate02:
00016154 3228 0038                  		move.w	$38(a0),d1
00016158 9240                       		sub.w	d0,d1
0001615A 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
0001615E 5328 001E                  		subq.b	#1,$1E(a0)
00016162 6A00                       		bpl.s	loc_15A96
00016164 117C 0002 001E             		move.b	#2,$1E(a0)
0001616A 0868 0000 001A             		bchg	#0,$1A(a0)
00016170                            
00016170                            loc_15A96:
00016170 4A28 0001                  		tst.b	1(a0)
00016174 6A00                       		bpl.s	locret_15AB0
00016176 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001617A 0C00 0018                  		cmpi.b	#$18,d0
0001617E 6600                       		bne.s	locret_15AB0
00016180 303C 00B0                  		move.w	#$B0,d0
00016184 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play saw sound
0001618A                            
0001618A                            locret_15AB0:
0001618A 4E75                       		rts	
0001618C                            ; ===========================================================================
0001618C                            
0001618C                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
0001618C 4A28 003D                  		tst.b	$3D(a0)
00016190 6600                       		bne.s	Obj6A_Animate03
00016192 3038 D008                  		move.w	($FFFFD008).w,d0
00016196 0440 00C0                  		subi.w	#$C0,d0
0001619A 6500                       		bcs.s	loc_15B02
0001619C 9068 0008                  		sub.w	8(a0),d0
000161A0 6500                       		bcs.s	loc_15B02
000161A2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000161A6 0440 0080                  		subi.w	#$80,d0
000161AA B068 000C                  		cmp.w	$C(a0),d0
000161AE 6400                       		bcc.s	locret_15B04
000161B0 0640 0100                  		addi.w	#$100,d0
000161B4 B068 000C                  		cmp.w	$C(a0),d0
000161B8 6500                       		bcs.s	locret_15B04
000161BA 117C 0001 003D             		move.b	#1,$3D(a0)
000161C0 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
000161C6 117C 00A2 0020             		move.b	#$A2,$20(a0)
000161CC 117C 0002 001A             		move.b	#2,$1A(a0)
000161D2 303C 00B0                  		move.w	#$B0,d0
000161D6 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play saw sound
000161DC                            
000161DC                            loc_15B02:
000161DC 588F                       		addq.l	#4,sp
000161DE                            
000161DE                            locret_15B04:
000161DE 4E75                       		rts	
000161E0                            ; ===========================================================================
000161E0                            
000161E0                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000161E0 4EB9 0000 DBDE             		jsr	SpeedToPos
000161E6 3168 0008 003A             		move.w	8(a0),$3A(a0)
000161EC 5328 001E                  		subq.b	#1,$1E(a0)
000161F0 6A00                       		bpl.s	locret_15B24
000161F2 117C 0002 001E             		move.b	#2,$1E(a0)
000161F8 0868 0000 001A             		bchg	#0,$1A(a0)
000161FE                            
000161FE                            locret_15B24:
000161FE 4E75                       		rts	
00016200                            ; ===========================================================================
00016200                            
00016200                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016200 4A28 003D                  		tst.b	$3D(a0)
00016204 6600                       		bne.s	Obj6A_Animate04
00016206 3038 D008                  		move.w	($FFFFD008).w,d0
0001620A 0640 00E0                  		addi.w	#$E0,d0
0001620E 9068 0008                  		sub.w	8(a0),d0
00016212 6400                       		bcc.s	loc_15B74
00016214 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016218 0440 0080                  		subi.w	#$80,d0
0001621C B068 000C                  		cmp.w	$C(a0),d0
00016220 6400                       		bcc.s	locret_15B76
00016222 0640 0100                  		addi.w	#$100,d0
00016226 B068 000C                  		cmp.w	$C(a0),d0
0001622A 6500                       		bcs.s	locret_15B76
0001622C 117C 0001 003D             		move.b	#1,$3D(a0)
00016232 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016238 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001623E 117C 0002 001A             		move.b	#2,$1A(a0)
00016244 303C 00B0                  		move.w	#$B0,d0
00016248 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play saw sound
0001624E                            
0001624E                            loc_15B74:
0001624E 588F                       		addq.l	#4,sp
00016250                            
00016250                            locret_15B76:
00016250 4E75                       		rts	
00016252                            ; ===========================================================================
00016252                            
00016252                            Obj6A_Animate04:
00016252 4EB9 0000 DBDE             		jsr	SpeedToPos
00016258 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001625E 5328 001E                  		subq.b	#1,$1E(a0)
00016262 6A00                       		bpl.s	locret_15B96
00016264 117C 0002 001E             		move.b	#2,$1E(a0)
0001626A 0868 0000 001A             		bchg	#0,$1A(a0)
00016270                            
00016270                            locret_15B96:
00016270 4E75                       		rts	
00016272                            ; ===========================================================================
00016272                            ; ---------------------------------------------------------------------------
00016272                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016272                            ; ---------------------------------------------------------------------------
00016272                            Map_obj6A:
00016272                            	include "_maps\obj6A.asm"
00016272                            ; ---------------------------------------------------------------------------
00016272                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016272                            ; ---------------------------------------------------------------------------
00016272 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016276 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
0001627A 07                         byte_15BA0:	dc.b 7
0001627B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016280 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016285 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001628A E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001628F E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016294 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016299 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001629E 07                         byte_15BC4:	dc.b 7
0001629F C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000162A4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000162A9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000162AE E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000162B3 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000162B8 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000162BD 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000162C2 04                         byte_15BE8:	dc.b 4
000162C3 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000162C8 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000162CD 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000162D2 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000162D7 04                         byte_15BFD:	dc.b 4
000162D8 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000162DD E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000162E2 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000162E7 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000162EC                            		even
000162EC                            		even
000162EC                            
000162EC                            ; ===========================================================================
000162EC                            ; ---------------------------------------------------------------------------
000162EC                            ; Object 6B - stomper (SBZ)
000162EC                            ; ---------------------------------------------------------------------------
000162EC                            
000162EC                            Obj6B:					; XREF: Obj_Index
000162EC 7000                       		moveq	#0,d0
000162EE 1028 0024                  		move.b	$24(a0),d0
000162F2 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000162F6 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000162FA                            ; ===========================================================================
000162FA 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000162FC 0000                       		dc.w Obj6B_Action-Obj6B_Index
000162FE                            
000162FE 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016302 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016306 1C20 4004                  		dc.b  $1C, $20,	$40,   4
0001630A 1C20 6004                  		dc.b  $1C, $20,	$60,   4
0001630E 8040 0005                  		dc.b  $80, $40,	  0,   5
00016312                            ; ===========================================================================
00016312                            
00016312                            Obj6B_Main:				; XREF: Obj6B_Index
00016312 5428 0024                  		addq.b	#2,$24(a0)
00016316 7000                       		moveq	#0,d0
00016318 1028 0028                  		move.b	$28(a0),d0
0001631C E448                       		lsr.w	#2,d0
0001631E 0240 001C                  		andi.w	#$1C,d0
00016322 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016326 115B 0019                  		move.b	(a3)+,$19(a0)
0001632A 115B 0016                  		move.b	(a3)+,$16(a0)
0001632E E448                       		lsr.w	#2,d0
00016330 1140 001A                  		move.b	d0,$1A(a0)
00016334 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
0001633C 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016342 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016348 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
0001634A 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016350 6700                       		beq.s	Obj6B_SBZ3
00016352                            
00016352                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016352 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016356 7000                       		moveq	#0,d0
00016358 1028 0023                  		move.b	$23(a0),d0
0001635C 6700                       		beq.s	Obj6B_Delete
0001635E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016364                            
00016364                            Obj6B_Delete:
00016364 4EF9 0000 DC40             		jmp	DeleteObject
0001636A                            ; ===========================================================================
0001636A                            
0001636A                            Obj6B_SBZ3:				; XREF: Obj6B_Main
0001636A 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016370 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016376 6600                       		bne.s	Obj6B_SBZ12
00016378 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001637C 7000                       		moveq	#0,d0
0001637E 1028 0023                  		move.b	$23(a0),d0
00016382 6700                       		beq.s	Obj6B_SBZ12
00016384 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001638A 6700                       		beq.s	Obj6B_SBZ12
0001638C 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016390 60C0                       		bra.s	Obj6B_ChkGone
00016392                            ; ===========================================================================
00016392                            
00016392                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016392 0028 0004 0001             		ori.b	#4,1(a0)
00016398 117C 0004 0018             		move.b	#4,$18(a0)
0001639E 3168 0008 0034             		move.w	8(a0),$34(a0)
000163A4 3168 000C 0030             		move.w	$C(a0),$30(a0)
000163AA 7000                       		moveq	#0,d0
000163AC 101B                       		move.b	(a3)+,d0
000163AE 3140 003C                  		move.w	d0,$3C(a0)
000163B2 7000                       		moveq	#0,d0
000163B4 1028 0028                  		move.b	$28(a0),d0
000163B8 6A00                       		bpl.s	Obj6B_Action
000163BA 0200 000F                  		andi.b	#$F,d0
000163BE 1140 003E                  		move.b	d0,$3E(a0)
000163C2 1153 0028                  		move.b	(a3),$28(a0)
000163C6 0C13 0005                  		cmpi.b	#5,(a3)
000163CA 6600                       		bne.s	Obj6B_ChkGone2
000163CC 08E8 0004 0001             		bset	#4,1(a0)
000163D2                            
000163D2                            Obj6B_ChkGone2:
000163D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163D6 7000                       		moveq	#0,d0
000163D8 1028 0023                  		move.b	$23(a0),d0
000163DC 6700                       		beq.s	Obj6B_Action
000163DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000163E4                            
000163E4                            Obj6B_Action:				; XREF: Obj6B_Index
000163E4 3F28 0008                  		move.w	8(a0),-(sp)
000163E8 7000                       		moveq	#0,d0
000163EA 1028 0028                  		move.b	$28(a0),d0
000163EE 0240 000F                  		andi.w	#$F,d0
000163F2 D040                       		add.w	d0,d0
000163F4 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000163F8 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000163FC 381F                       		move.w	(sp)+,d4
000163FE 4A28 0001                  		tst.b	1(a0)
00016402 6A00                       		bpl.s	Obj6B_ChkDel
00016404 7200                       		moveq	#0,d1
00016406 1228 0019                  		move.b	$19(a0),d1
0001640A 0641 000B                  		addi.w	#$B,d1
0001640E 7400                       		moveq	#0,d2
00016410 1428 0016                  		move.b	$16(a0),d2
00016414 3602                       		move.w	d2,d3
00016416 5243                       		addq.w	#1,d3
00016418 6100 9BBA                  		bsr.w	SolidObject
0001641C                            
0001641C                            Obj6B_ChkDel:
0001641C 3028 0034                  		move.w	$34(a0),d0
00016420 0240 FF80                  		andi.w	#$FF80,d0
00016424 3238 F700                  		move.w	($FFFFF700).w,d1
00016428 0441 0080                  		subi.w	#$80,d1
0001642C 0241 FF80                  		andi.w	#$FF80,d1
00016430 9041                       		sub.w	d1,d0
00016432 0C40 0280                  		cmpi.w	#$280,d0
00016436 6200                       		bhi.s	loc_15D64
00016438 4EF9 0000 DC04             		jmp	DisplaySprite
0001643E                            ; ===========================================================================
0001643E                            
0001643E                            loc_15D64:
0001643E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016444 6600                       		bne.s	Obj6B_Delete2
00016446 4238 F7CB                  		clr.b	($FFFFF7CB).w
0001644A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001644E 7000                       		moveq	#0,d0
00016450 1028 0023                  		move.b	$23(a0),d0
00016454 6700                       		beq.s	Obj6B_Delete2
00016456 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001645C                            
0001645C                            Obj6B_Delete2:
0001645C 4EF9 0000 DC40             		jmp	DeleteObject
00016462                            ; ===========================================================================
00016462 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016466 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
0001646A 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
0001646E                            ; ===========================================================================
0001646E                            
0001646E                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
0001646E 4E75                       		rts	
00016470                            ; ===========================================================================
00016470                            
00016470                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016470 4A28 0038                  		tst.b	$38(a0)
00016474 6600                       		bne.s	loc_15DB4
00016476 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001647A 7000                       		moveq	#0,d0
0001647C 1028 003E                  		move.b	$3E(a0),d0
00016480 0832 0000 0000             		btst	#0,(a2,d0.w)
00016486 6700                       		beq.s	loc_15DC2
00016488 117C 0001 0038             		move.b	#1,$38(a0)
0001648E                            
0001648E                            loc_15DB4:
0001648E 3028 003C                  		move.w	$3C(a0),d0
00016492 B068 003A                  		cmp.w	$3A(a0),d0
00016496 6700                       		beq.s	loc_15DE0
00016498 5468 003A                  		addq.w	#2,$3A(a0)
0001649C                            
0001649C                            loc_15DC2:
0001649C 3028 003A                  		move.w	$3A(a0),d0
000164A0 0828 0000 0022             		btst	#0,$22(a0)
000164A6 6700                       		beq.s	loc_15DD4
000164A8 4440                       		neg.w	d0
000164AA 0640 0080                  		addi.w	#$80,d0
000164AE                            
000164AE                            loc_15DD4:
000164AE 3228 0034                  		move.w	$34(a0),d1
000164B2 9240                       		sub.w	d0,d1
000164B4 3141 0008                  		move.w	d1,8(a0)
000164B8 4E75                       		rts	
000164BA                            ; ===========================================================================
000164BA                            
000164BA                            loc_15DE0:
000164BA 5228 0028                  		addq.b	#1,$28(a0)
000164BE 317C 00B4 0036             		move.w	#$B4,$36(a0)
000164C4 4228 0038                  		clr.b	$38(a0)
000164C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000164CC 7000                       		moveq	#0,d0
000164CE 1028 0023                  		move.b	$23(a0),d0
000164D2 67C8                       		beq.s	loc_15DC2
000164D4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000164DA 60C0                       		bra.s	loc_15DC2
000164DC                            ; ===========================================================================
000164DC                            
000164DC                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000164DC 4A28 0038                  		tst.b	$38(a0)
000164E0 6600                       		bne.s	loc_15E14
000164E2 5368 0036                  		subq.w	#1,$36(a0)
000164E6 6600                       		bne.s	loc_15E1E
000164E8 117C 0001 0038             		move.b	#1,$38(a0)
000164EE                            
000164EE                            loc_15E14:
000164EE 4A68 003A                  		tst.w	$3A(a0)
000164F2 6700                       		beq.s	loc_15E3C
000164F4 5568 003A                  		subq.w	#2,$3A(a0)
000164F8                            
000164F8                            loc_15E1E:
000164F8 3028 003A                  		move.w	$3A(a0),d0
000164FC 0828 0000 0022             		btst	#0,$22(a0)
00016502 6700                       		beq.s	loc_15E30
00016504 4440                       		neg.w	d0
00016506 0640 0080                  		addi.w	#$80,d0
0001650A                            
0001650A                            loc_15E30:
0001650A 3228 0034                  		move.w	$34(a0),d1
0001650E 9240                       		sub.w	d0,d1
00016510 3141 0008                  		move.w	d1,8(a0)
00016514 4E75                       		rts	
00016516                            ; ===========================================================================
00016516                            
00016516                            loc_15E3C:
00016516 5328 0028                  		subq.b	#1,$28(a0)
0001651A 4228 0038                  		clr.b	$38(a0)
0001651E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016522 7000                       		moveq	#0,d0
00016524 1028 0023                  		move.b	$23(a0),d0
00016528 67CE                       		beq.s	loc_15E1E
0001652A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016530 60C6                       		bra.s	loc_15E1E
00016532                            ; ===========================================================================
00016532                            
00016532                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00016532 4A28 0038                  		tst.b	$38(a0)
00016536 6600                       		bne.s	loc_15E7C
00016538 4A68 003A                  		tst.w	$3A(a0)
0001653C 6700                       		beq.s	loc_15E6A
0001653E 5368 003A                  		subq.w	#1,$3A(a0)
00016542 6000                       		bra.s	loc_15E8E
00016544                            ; ===========================================================================
00016544                            
00016544                            loc_15E6A:
00016544 5368 0036                  		subq.w	#1,$36(a0)
00016548 6A00                       		bpl.s	loc_15E8E
0001654A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016550 117C 0001 0038             		move.b	#1,$38(a0)
00016556                            
00016556                            loc_15E7C:
00016556 5068 003A                  		addq.w	#8,$3A(a0)
0001655A 3028 003A                  		move.w	$3A(a0),d0
0001655E B068 003C                  		cmp.w	$3C(a0),d0
00016562 6600                       		bne.s	loc_15E8E
00016564 4228 0038                  		clr.b	$38(a0)
00016568                            
00016568                            loc_15E8E:
00016568 3028 003A                  		move.w	$3A(a0),d0
0001656C 0828 0000 0022             		btst	#0,$22(a0)
00016572 6700                       		beq.s	loc_15EA0
00016574 4440                       		neg.w	d0
00016576 0640 0038                  		addi.w	#$38,d0
0001657A                            
0001657A                            loc_15EA0:
0001657A 3228 0030                  		move.w	$30(a0),d1
0001657E D240                       		add.w	d0,d1
00016580 3141 000C                  		move.w	d1,$C(a0)
00016584 4E75                       		rts	
00016586                            ; ===========================================================================
00016586                            
00016586                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00016586 4A28 0038                  		tst.b	$38(a0)
0001658A 6600                       		bne.s	loc_15ED0
0001658C 4A68 003A                  		tst.w	$3A(a0)
00016590 6700                       		beq.s	loc_15EBE
00016592 5168 003A                  		subq.w	#8,$3A(a0)
00016596 6000                       		bra.s	loc_15EF0
00016598                            ; ===========================================================================
00016598                            
00016598                            loc_15EBE:
00016598 5368 0036                  		subq.w	#1,$36(a0)
0001659C 6A00                       		bpl.s	loc_15EF0
0001659E 317C 003C 0036             		move.w	#$3C,$36(a0)
000165A4 117C 0001 0038             		move.b	#1,$38(a0)
000165AA                            
000165AA                            loc_15ED0:
000165AA 3028 003A                  		move.w	$3A(a0),d0
000165AE B068 003C                  		cmp.w	$3C(a0),d0
000165B2 6700                       		beq.s	loc_15EE0
000165B4 5068 003A                  		addq.w	#8,$3A(a0)
000165B8 6000                       		bra.s	loc_15EF0
000165BA                            ; ===========================================================================
000165BA                            
000165BA                            loc_15EE0:
000165BA 5368 0036                  		subq.w	#1,$36(a0)
000165BE 6A00                       		bpl.s	loc_15EF0
000165C0 317C 003C 0036             		move.w	#$3C,$36(a0)
000165C6 4228 0038                  		clr.b	$38(a0)
000165CA                            
000165CA                            loc_15EF0:
000165CA 3028 003A                  		move.w	$3A(a0),d0
000165CE 0828 0000 0022             		btst	#0,$22(a0)
000165D4 6700                       		beq.s	loc_15F02
000165D6 4440                       		neg.w	d0
000165D8 0640 0038                  		addi.w	#$38,d0
000165DC                            
000165DC                            loc_15F02:
000165DC 3228 0030                  		move.w	$30(a0),d1
000165E0 D240                       		add.w	d0,d1
000165E2 3141 000C                  		move.w	d1,$C(a0)
000165E6 4E75                       		rts	
000165E8                            ; ===========================================================================
000165E8                            
000165E8                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000165E8 4A28 0038                  		tst.b	$38(a0)
000165EC 6600                       		bne.s	loc_15F3E
000165EE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000165F2 7000                       		moveq	#0,d0
000165F4 1028 003E                  		move.b	$3E(a0),d0
000165F8 0832 0000 0000             		btst	#0,(a2,d0.w)
000165FE 6700                       		beq.s	locret_15F5C
00016600 117C 0001 0038             		move.b	#1,$38(a0)
00016606 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001660A 7000                       		moveq	#0,d0
0001660C 1028 0023                  		move.b	$23(a0),d0
00016610 6700                       		beq.s	loc_15F3E
00016612 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016618                            
00016618                            loc_15F3E:
00016618 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016620 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016628 3168 0008 0034             		move.w	8(a0),$34(a0)
0001662E 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00016634 6700                       		beq.s	loc_15F5E
00016636                            
00016636                            locret_15F5C:
00016636 4E75                       		rts	
00016638                            ; ===========================================================================
00016638                            
00016638                            loc_15F5E:
00016638 4228 0028                  		clr.b	$28(a0)
0001663C 4228 0038                  		clr.b	$38(a0)
00016640 4E75                       		rts	
00016642                            ; ===========================================================================
00016642                            ; ---------------------------------------------------------------------------
00016642                            ; Sprite mappings - stomper and	platforms (SBZ)
00016642                            ; ---------------------------------------------------------------------------
00016642                            Map_obj6B:
00016642                            	include "_maps\obj6B.asm"
00016642                            ; ---------------------------------------------------------------------------
00016642                            ; Sprite mappings - stomper and	platforms (SBZ)
00016642                            ; ---------------------------------------------------------------------------
00016642 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00016646 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
0001664A 0000                       		dc.w byte_15FB0-Map_obj6B
0001664C 04                         byte_15F72:	dc.b 4
0001664D F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00016652 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00016657 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
0001665C F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016661 08                         byte_15F87:	dc.b 8
00016662 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00016667 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
0001666C E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016671 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016676 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
0001667B 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016680 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016685 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001668A 0E                         byte_15FB0:	dc.b $E
0001668B C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016690 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016695 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001669A C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001669F C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000166A4 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
000166A9 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
000166AE C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
000166B3 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
000166B8 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
000166BD E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
000166C2 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
000166C7 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
000166CC 200F 0058 80               		dc.b $20, $F, 0, $58, $80
000166D2 00                         		even
000166D2 00                         		even
000166D2                            
000166D2                            ; ===========================================================================
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            ; Object 6C - vanishing	platforms (SBZ)
000166D2                            ; ---------------------------------------------------------------------------
000166D2                            
000166D2                            Obj6C:					; XREF: Obj_Index
000166D2 7000                       		moveq	#0,d0
000166D4 1028 0024                  		move.b	$24(a0),d0
000166D8 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000166DC 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000166E0                            ; ===========================================================================
000166E0 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000166E2 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000166E4 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000166E6 0000                       		dc.w loc_16068-Obj6C_Index
000166E8                            ; ===========================================================================
000166E8                            
000166E8                            Obj6C_Main:				; XREF: Obj6C_Index
000166E8 5C28 0024                  		addq.b	#6,$24(a0)
000166EC 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000166F4 317C 44C3 0002             		move.w	#$44C3,2(a0)
000166FA 0028 0004 0001             		ori.b	#4,1(a0)
00016700 117C 0010 0019             		move.b	#$10,$19(a0)
00016706 117C 0004 0018             		move.b	#4,$18(a0)
0001670C 7000                       		moveq	#0,d0
0001670E 1028 0028                  		move.b	$28(a0),d0	; get object type
00016712 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016716 5240                       		addq.w	#1,d0		; add 1
00016718 EF48                       		lsl.w	#7,d0		; multiply by $80
0001671A 3200                       		move.w	d0,d1
0001671C 5340                       		subq.w	#1,d0
0001671E 3140 0030                  		move.w	d0,$30(a0)
00016722 3140 0032                  		move.w	d0,$32(a0)
00016726 7000                       		moveq	#0,d0
00016728 1028 0028                  		move.b	$28(a0),d0	; get object type
0001672C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016730 0641 0080                  		addi.w	#$80,d1
00016734 C0C1                       		mulu.w	d1,d0
00016736 E088                       		lsr.l	#8,d0
00016738 3140 0036                  		move.w	d0,$36(a0)
0001673C 5341                       		subq.w	#1,d1
0001673E 3141 0038                  		move.w	d1,$38(a0)
00016742                            
00016742                            loc_16068:				; XREF: Obj6C_Index
00016742 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016746 9068 0036                  		sub.w	$36(a0),d0
0001674A C068 0038                  		and.w	$38(a0),d0
0001674E 6600                       		bne.s	Obj6C_Animate
00016750 5928 0024                  		subq.b	#4,$24(a0)
00016754 6000                       		bra.s	Obj6C_Vanish
00016756                            ; ===========================================================================
00016756                            
00016756                            Obj6C_Animate:
00016756 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001675C 4EB9 0000 ACCE             		jsr	AnimateSprite
00016762 6000 9548                  		bra.w	MarkObjGone
00016766                            ; ===========================================================================
00016766                            
00016766                            Obj6C_Vanish:				; XREF: Obj6C_Index
00016766 5368 0030                  		subq.w	#1,$30(a0)
0001676A 6A00                       		bpl.s	loc_160AA
0001676C 317C 007F 0030             		move.w	#127,$30(a0)
00016772 4A28 001C                  		tst.b	$1C(a0)
00016776 6700                       		beq.s	loc_160A4
00016778 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001677E                            
0001677E                            loc_160A4:
0001677E 0868 0000 001C             		bchg	#0,$1C(a0)
00016784                            
00016784                            loc_160AA:
00016784 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001678A 4EB9 0000 ACCE             		jsr	AnimateSprite
00016790 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016796 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016798 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0001679E 6600                       		bne.s	loc_160D6
000167A0 7200                       		moveq	#0,d1
000167A2 1228 0019                  		move.b	$19(a0),d1
000167A6 4EB9 0000 792A             		jsr	(PlatformObject).l
000167AC 6000 94FE                  		bra.w	MarkObjGone
000167B0                            ; ===========================================================================
000167B0                            
000167B0                            loc_160D6:
000167B0 7200                       		moveq	#0,d1
000167B2 1228 0019                  		move.b	$19(a0),d1
000167B6 4EB9 0000 7A9E             		jsr	(ExitPlatform).l
000167BC 3428 0008                  		move.w	8(a0),d2
000167C0 4EB9 0000 8008             		jsr	(MvSonicOnPtfm2).l
000167C6 6000 94E4                  		bra.w	MarkObjGone
000167CA                            ; ===========================================================================
000167CA                            
000167CA                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
000167CA 0828 0003 0022             		btst	#3,$22(a0)
000167D0 6700                       		beq.s	Obj6C_Display
000167D2 43F8 D000                  		lea	($FFFFD000).w,a1
000167D6 08A9 0003 0022             		bclr	#3,$22(a1)
000167DC 08A8 0003 0022             		bclr	#3,$22(a0)
000167E2 117C 0002 0024             		move.b	#2,$24(a0)
000167E8 4228 0025                  		clr.b	$25(a0)
000167EC                            
000167EC                            Obj6C_Display:
000167EC 6000 94BE                  		bra.w	MarkObjGone
000167F0                            ; ===========================================================================
000167F0                            Ani_obj6C:
000167F0                            	include "_anim\obj6C.asm"
000167F0                            ; ---------------------------------------------------------------------------
000167F0                            ; Animation script - vanishing platforms (SBZ)
000167F0                            ; ---------------------------------------------------------------------------
000167F0 0000                       		dc.w byte_1611A-Ani_obj6C
000167F2 0000                       		dc.w byte_16122-Ani_obj6C
000167F4 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000167FC 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016804                            		even
00016804                            		even
00016804                            
00016804                            ; ---------------------------------------------------------------------------
00016804                            ; Sprite mappings - vanishing platforms	(SBZ)
00016804                            ; ---------------------------------------------------------------------------
00016804                            Map_obj6C:
00016804                            	include "_maps\obj6C.asm"
00016804                            ; ---------------------------------------------------------------------------
00016804                            ; Sprite mappings - vanishing platforms	(SBZ)
00016804                            ; ---------------------------------------------------------------------------
00016804 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016808 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001680C 01                         byte_16132:	dc.b 1
0001680D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016812 01                         byte_16138:	dc.b 1
00016813 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016818 01                         byte_1613E:	dc.b 1
00016819 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001681E 00                         byte_16144:	dc.b 0
00016820 00                         		even
00016820 00                         		even
00016820                            
00016820                            ; ===========================================================================
00016820                            ; ---------------------------------------------------------------------------
00016820                            ; Object 6E - electrocution orbs (SBZ)
00016820                            ; ---------------------------------------------------------------------------
00016820                            
00016820                            Obj6E:					; XREF: Obj_Index
00016820 7000                       		moveq	#0,d0
00016822 1028 0024                  		move.b	$24(a0),d0
00016826 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001682A 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001682E                            ; ===========================================================================
0001682E 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016830 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016832                            ; ===========================================================================
00016832                            
00016832                            Obj6E_Main:				; XREF: Obj6E_Index
00016832 5428 0024                  		addq.b	#2,$24(a0)
00016836 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001683E 317C 047E 0002             		move.w	#$47E,2(a0)
00016844 0028 0004 0001             		ori.b	#4,1(a0)
0001684A 117C 0028 0019             		move.b	#$28,$19(a0)
00016850 7000                       		moveq	#0,d0
00016852 1028 0028                  		move.b	$28(a0),d0	; read object type
00016856 E948                       		lsl.w	#4,d0		; multiply by $10
00016858 5340                       		subq.w	#1,d0
0001685A 3140 0034                  		move.w	d0,$34(a0)
0001685E                            
0001685E                            Obj6E_Shock:				; XREF: Obj6E_Index
0001685E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016862 C068 0034                  		and.w	$34(a0),d0
00016866 6600                       		bne.s	Obj6E_Animate
00016868 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
0001686E 4A28 0001                  		tst.b	1(a0)
00016872 6A00                       		bpl.s	Obj6E_Animate
00016874 303C 00B1                  		move.w	#$B1,d0
00016878 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play electricity sound
0001687E                            
0001687E                            Obj6E_Animate:
0001687E 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016884 4EB9 0000 ACCE             		jsr	AnimateSprite
0001688A 117C 0000 0020             		move.b	#0,$20(a0)
00016890 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016896 6600                       		bne.s	Obj6E_Display	; if not, branch
00016898 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
0001689E                            
0001689E                            Obj6E_Display:
0001689E 6000 940C                  		bra.w	MarkObjGone
000168A2                            ; ===========================================================================
000168A2                            Ani_obj6E:
000168A2                            	include "_anim\obj6E.asm"
000168A2                            ; ---------------------------------------------------------------------------
000168A2                            ; Animation script - electrocution orbs (SBZ)
000168A2                            ; ---------------------------------------------------------------------------
000168A2 0000                       		dc.w byte_161CC-Ani_obj6E
000168A4 0000                       		dc.w byte_161D0-Ani_obj6E
000168A6 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000168AA 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
000168BA                            		even
000168BA                            		even
000168BA                            
000168BA                            ; ---------------------------------------------------------------------------
000168BA                            ; Sprite mappings - electrocution orbs (SBZ)
000168BA                            ; ---------------------------------------------------------------------------
000168BA                            Map_obj6E:
000168BA                            	include "_maps\obj6E.asm"
000168BA                            Map_26ed:
000168BA 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
000168BC 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
000168BE 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
000168C0 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
000168C2 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
000168C4 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
000168C6 01                         Map_26ed_C: 	dc.b $1
000168C7 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
000168CC 02                         Map_26ed_12: 	dc.b $2
000168CD F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000168D2 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000168D7 06                         Map_26ed_1D: 	dc.b $6
000168D8 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000168DD 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000168E2 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
000168E7 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
000168EC F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
000168F1 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
000168F6 08                         Map_26ed_3C: 	dc.b $8
000168F7 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000168FC 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016901 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016906 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001690B F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016910 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016915 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001691A F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001691F 06                         Map_26ed_65: 	dc.b $6
00016920 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016925 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001692A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001692F F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016934 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016939 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001693E 04                         Map_26ed_84: 	dc.b $4
0001693F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016944 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016949 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001694E F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016954 00                         	even
00016954 00                         	even
00016954                            
00016954                            ; ===========================================================================
00016954                            ; ---------------------------------------------------------------------------
00016954                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016954                            ; ---------------------------------------------------------------------------
00016954                            
00016954                            Obj6F:					; XREF: Obj_Index
00016954 7000                       		moveq	#0,d0
00016956 1028 0024                  		move.b	$24(a0),d0
0001695A 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
0001695E 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016962 3028 0030                  		move.w	$30(a0),d0
00016966 0240 FF80                  		andi.w	#$FF80,d0
0001696A 3238 F700                  		move.w	($FFFFF700).w,d1
0001696E 0441 0080                  		subi.w	#$80,d1
00016972 0241 FF80                  		andi.w	#$FF80,d1
00016976 9041                       		sub.w	d1,d0
00016978 0C40 0280                  		cmpi.w	#$280,d0
0001697C 6200                       		bhi.s	loc_1629A
0001697E                            
0001697E                            Obj6F_Display:
0001697E 4EF9 0000 DC04             		jmp	DisplaySprite
00016984                            ; ===========================================================================
00016984                            
00016984                            loc_1629A:
00016984 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
0001698A 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
0001698C 0C40 FF80                  		cmpi.w	#-$80,d0
00016990 64EC                       		bcc.s	Obj6F_Display
00016992                            
00016992                            Obj6F_Act1or2:
00016992 1028 002F                  		move.b	$2F(a0),d0
00016996 6A00                       		bpl.s	Obj6F_Delete
00016998 0240 007F                  		andi.w	#$7F,d0
0001699C 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000169A0 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000169A6                            
000169A6                            Obj6F_Delete:
000169A6 4EF9 0000 DC40             		jmp	DeleteObject
000169AC                            ; ===========================================================================
000169AC 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000169AE 0000                       		dc.w loc_163D8-Obj6F_Index
000169B0                            ; ===========================================================================
000169B0                            
000169B0                            Obj6F_Main:				; XREF: Obj6F_Index
000169B0 1028 0028                  		move.b	$28(a0),d0
000169B4 6B00 0000                  		bmi.w	loc_16380
000169B8 5428 0024                  		addq.b	#2,$24(a0)
000169BC 217C 0001 6014 0004        		move.l	#Map_obj69a,4(a0)
000169C4 317C 04DF 0002             		move.w	#$4DF,2(a0)
000169CA 117C 0010 0019             		move.b	#$10,$19(a0)
000169D0 0028 0004 0001             		ori.b	#4,1(a0)
000169D6 117C 0004 0018             		move.b	#4,$18(a0)
000169DC 7000                       		moveq	#0,d0
000169DE 1028 0028                  		move.b	$28(a0),d0
000169E2 3200                       		move.w	d0,d1
000169E4 E648                       		lsr.w	#3,d0
000169E6 0240 001E                  		andi.w	#$1E,d0
000169EA 45FA 0000                  		lea	off_164A6(pc),a2
000169EE D4F2 0000                  		adda.w	(a2,d0.w),a2
000169F2 315A 0038                  		move.w	(a2)+,$38(a0)
000169F6 315A 0030                  		move.w	(a2)+,$30(a0)
000169FA 214A 003C                  		move.l	a2,$3C(a0)
000169FE 0241 000F                  		andi.w	#$F,d1
00016A02 E549                       		lsl.w	#2,d1
00016A04 1141 0038                  		move.b	d1,$38(a0)
00016A08 117C 0004 003A             		move.b	#4,$3A(a0)
00016A0E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016A12 6700                       		beq.s	loc_16356
00016A14 117C 0001 003B             		move.b	#1,$3B(a0)
00016A1A 4428 003A                  		neg.b	$3A(a0)
00016A1E 7200                       		moveq	#0,d1
00016A20 1228 0038                  		move.b	$38(a0),d1
00016A24 D228 003A                  		add.b	$3A(a0),d1
00016A28 B228 0039                  		cmp.b	$39(a0),d1
00016A2C 6500                       		bcs.s	loc_16352
00016A2E 1001                       		move.b	d1,d0
00016A30 7200                       		moveq	#0,d1
00016A32 4A00                       		tst.b	d0
00016A34 6A00                       		bpl.s	loc_16352
00016A36 1228 0039                  		move.b	$39(a0),d1
00016A3A 5901                       		subq.b	#4,d1
00016A3C                            
00016A3C                            loc_16352:
00016A3C 1141 0038                  		move.b	d1,$38(a0)
00016A40                            
00016A40                            loc_16356:
00016A40 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016A46 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016A4C 4A41                       		tst.w	d1
00016A4E 6600                       		bne.s	loc_1636C
00016A50 117C 0001 001C             		move.b	#1,$1C(a0)
00016A56                            
00016A56                            loc_1636C:
00016A56 0C41 0008                  		cmpi.w	#8,d1
00016A5A 6600                       		bne.s	loc_16378
00016A5C 117C 0000 001C             		move.b	#0,$1C(a0)
00016A62                            
00016A62                            loc_16378:
00016A62 6100 C0E0                  		bsr.w	Obj63_ChangeDir
00016A66 6000 0000                  		bra.w	loc_163D8
00016A6A                            ; ===========================================================================
00016A6A                            
00016A6A                            loc_16380:				; XREF: Obj6F_Main
00016A6A 1140 002F                  		move.b	d0,$2F(a0)
00016A6E 0240 007F                  		andi.w	#$7F,d0
00016A72 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016A76 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016A7C 6700                       		beq.s	loc_1639A
00016A7E 4EF9 0000 DC40             		jmp	DeleteObject
00016A84                            ; ===========================================================================
00016A84                            
00016A84                            loc_1639A:
00016A84 D040                       		add.w	d0,d0
00016A86 0240 001E                  		andi.w	#$1E,d0
00016A8A 0640 0080                  		addi.w	#$80,d0
00016A8E 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016A94 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016A98 321A                       		move.w	(a2)+,d1
00016A9A 2248                       		movea.l	a0,a1
00016A9C 6000                       		bra.s	Obj6F_LoadPform
00016A9E                            ; ===========================================================================
00016A9E                            
00016A9E                            Obj6F_Loop:
00016A9E 4EB9 0000 E08A             		jsr	SingleObjLoad
00016AA4 6600                       		bne.s	loc_163D0
00016AA6                            
00016AA6                            Obj6F_LoadPform:			; XREF: loc_1639A
00016AA6 12BC 006F                  		move.b	#$6F,0(a1)
00016AAA 335A 0008                  		move.w	(a2)+,8(a1)
00016AAE 335A 000C                  		move.w	(a2)+,$C(a1)
00016AB2 301A                       		move.w	(a2)+,d0
00016AB4 1340 0028                  		move.b	d0,$28(a1)
00016AB8                            
00016AB8                            loc_163D0:
00016AB8 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016ABC                            
00016ABC 588F                       		addq.l	#4,sp
00016ABE 4E75                       		rts	
00016AC0                            ; ===========================================================================
00016AC0                            
00016AC0                            loc_163D8:				; XREF: Obj6F_Index
00016AC0 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016AC6 4EB9 0000 ACCE             		jsr	AnimateSprite
00016ACC 4A28 001A                  		tst.b	$1A(a0)
00016AD0 6600                       		bne.s	loc_16404
00016AD2 3F28 0008                  		move.w	8(a0),-(sp)
00016AD6 6100 0000                  		bsr.w	loc_16424
00016ADA 323C 001B                  		move.w	#$1B,d1
00016ADE 343C 0007                  		move.w	#7,d2
00016AE2 3602                       		move.w	d2,d3
00016AE4 5243                       		addq.w	#1,d3
00016AE6 381F                       		move.w	(sp)+,d4
00016AE8 6000 94EA                  		bra.w	SolidObject
00016AEC                            ; ===========================================================================
00016AEC                            
00016AEC                            loc_16404:
00016AEC 0828 0003 0022             		btst	#3,$22(a0)
00016AF2 6700                       		beq.s	loc_16420
00016AF4 43F8 D000                  		lea	($FFFFD000).w,a1
00016AF8 08A9 0003 0022             		bclr	#3,$22(a1)
00016AFE 08A8 0003 0022             		bclr	#3,$22(a0)
00016B04 4228 0025                  		clr.b	$25(a0)
00016B08                            
00016B08                            loc_16420:
00016B08 6000 0002                  		bra.w	*+4
00016B0C                            
00016B0C                            loc_16424:
00016B0C 3028 0008                  		move.w	8(a0),d0
00016B10 B068 0034                  		cmp.w	$34(a0),d0
00016B14 6600                       		bne.s	loc_16484
00016B16 3028 000C                  		move.w	$C(a0),d0
00016B1A B068 0036                  		cmp.w	$36(a0),d0
00016B1E 6600                       		bne.s	loc_16484
00016B20 7200                       		moveq	#0,d1
00016B22 1228 0038                  		move.b	$38(a0),d1
00016B26 D228 003A                  		add.b	$3A(a0),d1
00016B2A B228 0039                  		cmp.b	$39(a0),d1
00016B2E 6500                       		bcs.s	loc_16456
00016B30 1001                       		move.b	d1,d0
00016B32 7200                       		moveq	#0,d1
00016B34 4A00                       		tst.b	d0
00016B36 6A00                       		bpl.s	loc_16456
00016B38 1228 0039                  		move.b	$39(a0),d1
00016B3C 5901                       		subq.b	#4,d1
00016B3E                            
00016B3E                            loc_16456:
00016B3E 1141 0038                  		move.b	d1,$38(a0)
00016B42 2268 003C                  		movea.l	$3C(a0),a1
00016B46 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016B4C 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016B52 4A41                       		tst.w	d1
00016B54 6600                       		bne.s	loc_16474
00016B56 117C 0001 001C             		move.b	#1,$1C(a0)
00016B5C                            
00016B5C                            loc_16474:
00016B5C 0C41 0008                  		cmpi.w	#8,d1
00016B60 6600                       		bne.s	loc_16480
00016B62 117C 0000 001C             		move.b	#0,$1C(a0)
00016B68                            
00016B68                            loc_16480:
00016B68 6100 BFDA                  		bsr.w	Obj63_ChangeDir
00016B6C                            
00016B6C                            loc_16484:
00016B6C 4EF9 0000 DBDE             		jmp	SpeedToPos
00016B72                            ; ===========================================================================
00016B72                            Ani_obj6F:
00016B72                            	include "_anim\obj6F.asm"
00016B72                            ; ---------------------------------------------------------------------------
00016B72                            ; Animation script - platform on conveyor belt (SBZ)
00016B72                            ; ---------------------------------------------------------------------------
00016B72 0000                       		dc.w byte_1648E-Ani_obj6F
00016B74 0000                       		dc.w byte_164A2-Ani_obj6F
00016B76 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016B83 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016B8A 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016B8E 00                         		even
00016B8E 00                         		even
00016B8E                            
00016B8E 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016B94 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016B9A 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016BAE 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016BC2 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016BD6 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016BEA 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016BFE 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016C12                            ; ===========================================================================
00016C12                            ; ---------------------------------------------------------------------------
00016C12                            ; Object 70 - large girder block (SBZ)
00016C12                            ; ---------------------------------------------------------------------------
00016C12                            
00016C12                            Obj70:					; XREF: Obj_Index
00016C12 7000                       		moveq	#0,d0
00016C14 1028 0024                  		move.b	$24(a0),d0
00016C18 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016C1C 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016C20                            ; ===========================================================================
00016C20 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016C22 0000                       		dc.w Obj70_Action-Obj70_Index
00016C24                            ; ===========================================================================
00016C24                            
00016C24                            Obj70_Main:				; XREF: Obj70_Index
00016C24 5428 0024                  		addq.b	#2,$24(a0)
00016C28 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016C30 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016C36 0028 0004 0001             		ori.b	#4,1(a0)
00016C3C 117C 0004 0018             		move.b	#4,$18(a0)
00016C42 117C 0060 0019             		move.b	#$60,$19(a0)
00016C48 117C 0018 0016             		move.b	#$18,$16(a0)
00016C4E 3168 0008 0032             		move.w	8(a0),$32(a0)
00016C54 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016C5A 6100 0000                  		bsr.w	Obj70_Move2
00016C5E                            
00016C5E                            Obj70_Action:				; XREF: Obj70_Index
00016C5E 3F28 0008                  		move.w	8(a0),-(sp)
00016C62 4A68 003A                  		tst.w	$3A(a0)
00016C66 6700                       		beq.s	Obj70_Move
00016C68 5368 003A                  		subq.w	#1,$3A(a0)
00016C6C 6600                       		bne.s	Obj70_Solid
00016C6E                            
00016C6E                            Obj70_Move:
00016C6E 4EB9 0000 DBDE             		jsr	SpeedToPos
00016C74 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016C78 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016C7A 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016C7E                            
00016C7E                            Obj70_Solid:
00016C7E 381F                       		move.w	(sp)+,d4
00016C80 4A28 0001                  		tst.b	1(a0)
00016C84 6A00                       		bpl.s	Obj70_ChkDel
00016C86 7200                       		moveq	#0,d1
00016C88 1228 0019                  		move.b	$19(a0),d1
00016C8C 0641 000B                  		addi.w	#$B,d1
00016C90 7400                       		moveq	#0,d2
00016C92 1428 0016                  		move.b	$16(a0),d2
00016C96 3602                       		move.w	d2,d3
00016C98 5243                       		addq.w	#1,d3
00016C9A 6100 9338                  		bsr.w	SolidObject
00016C9E                            
00016C9E                            Obj70_ChkDel:
00016C9E 3028 0032                  		move.w	$32(a0),d0
00016CA2 0240 FF80                  		andi.w	#$FF80,d0
00016CA6 3238 F700                  		move.w	($FFFFF700).w,d1
00016CAA 0441 0080                  		subi.w	#$80,d1
00016CAE 0241 FF80                  		andi.w	#$FF80,d1
00016CB2 9041                       		sub.w	d1,d0
00016CB4 0C40 0280                  		cmpi.w	#$280,d0
00016CB8 6200                       		bhi.s	Obj70_Delete
00016CBA 4EF9 0000 DC04             		jmp	DisplaySprite
00016CC0                            ; ===========================================================================
00016CC0                            
00016CC0                            Obj70_Delete:
00016CC0 4EF9 0000 DC40             		jmp	DeleteObject
00016CC6                            ; ===========================================================================
00016CC6                            
00016CC6                            Obj70_Move2:				; XREF: Obj70_Main
00016CC6 1028 0038                  		move.b	$38(a0),d0
00016CCA 0240 0018                  		andi.w	#$18,d0
00016CCE 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016CD4 43F1 0000                  		lea	(a1,d0.w),a1
00016CD8 3159 0010                  		move.w	(a1)+,$10(a0)
00016CDC 3159 0012                  		move.w	(a1)+,$12(a0)
00016CE0 3159 0034                  		move.w	(a1)+,$34(a0)
00016CE4 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016CE8 317C 0007 003A             		move.w	#7,$3A(a0)
00016CEE 4E75                       		rts	
00016CF0                            ; ===========================================================================
00016CF0 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016CF8 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016D00 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016D08 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016D10                            ; ---------------------------------------------------------------------------
00016D10                            ; Sprite mappings - large girder block (SBZ)
00016D10                            ; ---------------------------------------------------------------------------
00016D10                            Map_obj70:
00016D10                            	include "_maps\obj70.asm"
00016D10                            ; ---------------------------------------------------------------------------
00016D10                            ; Sprite mappings - large girder block (SBZ)
00016D10                            ; ---------------------------------------------------------------------------
00016D10 0000                       		dc.w byte_1662A-Map_obj70
00016D12 0C                         byte_1662A:	dc.b $C
00016D13 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016D18 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016D1D E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016D22 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016D27 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016D2C 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016D31 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016D36 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016D3B E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016D40 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016D45 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016D4A 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016D50 00                         		even
00016D50 00                         		even
00016D50                            
00016D50                            ; ===========================================================================
00016D50                            ; ---------------------------------------------------------------------------
00016D50                            ; Object 72 - teleporter (SBZ)
00016D50                            ; ---------------------------------------------------------------------------
00016D50                            
00016D50                            Obj72:					; XREF: Obj_Index
00016D50 7000                       		moveq	#0,d0
00016D52 1028 0024                  		move.b	$24(a0),d0
00016D56 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016D5A 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016D5E 3028 0008                  		move.w	8(a0),d0
00016D62 0240 FF80                  		andi.w	#$FF80,d0
00016D66 3238 F700                  		move.w	($FFFFF700).w,d1
00016D6A 0441 0080                  		subi.w	#$80,d1
00016D6E 0241 FF80                  		andi.w	#$FF80,d1
00016D72 9041                       		sub.w	d1,d0
00016D74 0C40 0280                  		cmpi.w	#$280,d0
00016D78 6200                       		bhi.s	Obj72_Delete
00016D7A 4E75                       		rts	
00016D7C                            ; ===========================================================================
00016D7C                            
00016D7C                            Obj72_Delete:
00016D7C 4EF9 0000 DC40             		jmp	DeleteObject
00016D82                            ; ===========================================================================
00016D82 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016D84 0000                       		dc.w loc_166C8-Obj72_Index
00016D86 0000                       		dc.w loc_1675E-Obj72_Index
00016D88 0000                       		dc.w loc_16798-Obj72_Index
00016D8A                            ; ===========================================================================
00016D8A                            
00016D8A                            Obj72_Main:				; XREF: Obj72_Index
00016D8A 5428 0024                  		addq.b	#2,$24(a0)
00016D8E 1028 0028                  		move.b	$28(a0),d0
00016D92 D040                       		add.w	d0,d0
00016D94 0240 001E                  		andi.w	#$1E,d0
00016D98 45FA 0000                  		lea	Obj72_Data(pc),a2
00016D9C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016DA0 315A 003A                  		move.w	(a2)+,$3A(a0)
00016DA4 214A 003C                  		move.l	a2,$3C(a0)
00016DA8 315A 0036                  		move.w	(a2)+,$36(a0)
00016DAC 315A 0038                  		move.w	(a2)+,$38(a0)
00016DB0                            
00016DB0                            loc_166C8:				; XREF: Obj72_Index
00016DB0 43F8 D000                  		lea	($FFFFD000).w,a1
00016DB4 3029 0008                  		move.w	8(a1),d0
00016DB8 9068 0008                  		sub.w	8(a0),d0
00016DBC 0828 0000 0022             		btst	#0,$22(a0)
00016DC2 6700                       		beq.s	loc_166E0
00016DC4 0640 000F                  		addi.w	#$F,d0
00016DC8                            
00016DC8                            loc_166E0:
00016DC8 0C40 0010                  		cmpi.w	#$10,d0
00016DCC 6400                       		bcc.s	locret_1675C
00016DCE 3229 000C                  		move.w	$C(a1),d1
00016DD2 9268 000C                  		sub.w	$C(a0),d1
00016DD6 0641 0020                  		addi.w	#$20,d1
00016DDA 0C41 0040                  		cmpi.w	#$40,d1
00016DDE 6400                       		bcc.s	locret_1675C
00016DE0 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016DE4 6600                       		bne.s	locret_1675C
00016DE6 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016DEC 6600                       		bne.s	loc_1670E
00016DEE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016DF4 6500                       		bcs.s	locret_1675C
00016DF6                            
00016DF6                            loc_1670E:
00016DF6 5428 0024                  		addq.b	#2,$24(a0)
00016DFA 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016E00 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016E06 337C 0800 0014             		move.w	#$800,$14(a1)
00016E0C 337C 0000 0010             		move.w	#0,$10(a1)
00016E12 337C 0000 0012             		move.w	#0,$12(a1)
00016E18 08A8 0005 0022             		bclr	#5,$22(a0)
00016E1E 08A9 0005 0022             		bclr	#5,$22(a1)
00016E24 08E9 0001 0022             		bset	#1,$22(a1)
00016E2A 3368 0008 0008             		move.w	8(a0),8(a1)
00016E30 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016E36 4228 0032                  		clr.b	$32(a0)
00016E3A 303C 00BE                  		move.w	#$BE,d0
00016E3E 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016E44                            
00016E44                            locret_1675C:
00016E44 4E75                       		rts	
00016E46                            ; ===========================================================================
00016E46                            
00016E46                            loc_1675E:				; XREF: Obj72_Index
00016E46 43F8 D000                  		lea	($FFFFD000).w,a1
00016E4A 1028 0032                  		move.b	$32(a0),d0
00016E4E 5428 0032                  		addq.b	#2,$32(a0)
00016E52 4EB9 0000 2C6A             		jsr	(CalcSine).l
00016E58 EA40                       		asr.w	#5,d0
00016E5A 3428 000C                  		move.w	$C(a0),d2
00016E5E 9440                       		sub.w	d0,d2
00016E60 3342 000C                  		move.w	d2,$C(a1)
00016E64 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016E6A 6600                       		bne.s	locret_16796
00016E6C 6100 0000                  		bsr.w	sub_1681C
00016E70 5428 0024                  		addq.b	#2,$24(a0)
00016E74 303C 00BC                  		move.w	#$BC,d0
00016E78 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play teleport sound
00016E7E                            
00016E7E                            locret_16796:
00016E7E 4E75                       		rts	
00016E80                            ; ===========================================================================
00016E80                            
00016E80                            loc_16798:				; XREF: Obj72_Index
00016E80 588F                       		addq.l	#4,sp
00016E82 43F8 D000                  		lea	($FFFFD000).w,a1
00016E86 5328 002E                  		subq.b	#1,$2E(a0)
00016E8A 6A00                       		bpl.s	loc_167DA
00016E8C 3368 0036 0008             		move.w	$36(a0),8(a1)
00016E92 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016E98 7200                       		moveq	#0,d1
00016E9A 1228 003A                  		move.b	$3A(a0),d1
00016E9E 5801                       		addq.b	#4,d1
00016EA0 B228 003B                  		cmp.b	$3B(a0),d1
00016EA4 6500                       		bcs.s	loc_167C2
00016EA6 7200                       		moveq	#0,d1
00016EA8 6000                       		bra.s	loc_16800
00016EAA                            ; ===========================================================================
00016EAA                            
00016EAA                            loc_167C2:
00016EAA 1141 003A                  		move.b	d1,$3A(a0)
00016EAE 2468 003C                  		movea.l	$3C(a0),a2
00016EB2 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016EB8 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016EBE 6000 0000                  		bra.w	sub_1681C
00016EC2                            ; ===========================================================================
00016EC2                            
00016EC2                            loc_167DA:
00016EC2 2429 0008                  		move.l	8(a1),d2
00016EC6 2629 000C                  		move.l	$C(a1),d3
00016ECA 3029 0010                  		move.w	$10(a1),d0
00016ECE 48C0                       		ext.l	d0
00016ED0 E180                       		asl.l	#8,d0
00016ED2 D480                       		add.l	d0,d2
00016ED4 3029 0012                  		move.w	$12(a1),d0
00016ED8 48C0                       		ext.l	d0
00016EDA E180                       		asl.l	#8,d0
00016EDC D680                       		add.l	d0,d3
00016EDE 2342 0008                  		move.l	d2,8(a1)
00016EE2 2343 000C                  		move.l	d3,$C(a1)
00016EE6 4E75                       		rts	
00016EE8                            ; ===========================================================================
00016EE8                            
00016EE8                            loc_16800:
00016EE8 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016EEE 4228 0024                  		clr.b	$24(a0)
00016EF2 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016EF6 337C 0000 0010             		move.w	#0,$10(a1)
00016EFC 337C 0200 0012             		move.w	#$200,$12(a1)
00016F02 4E75                       		rts	
00016F04                            
00016F04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F04                            
00016F04                            
00016F04                            sub_1681C:
00016F04 7000                       		moveq	#0,d0
00016F06 343C 1000                  		move.w	#$1000,d2
00016F0A 3028 0036                  		move.w	$36(a0),d0
00016F0E 9069 0008                  		sub.w	8(a1),d0
00016F12 6C00                       		bge.s	loc_16830
00016F14 4440                       		neg.w	d0
00016F16 4442                       		neg.w	d2
00016F18                            
00016F18                            loc_16830:
00016F18 7200                       		moveq	#0,d1
00016F1A 363C 1000                  		move.w	#$1000,d3
00016F1E 3228 0038                  		move.w	$38(a0),d1
00016F22 9269 000C                  		sub.w	$C(a1),d1
00016F26 6C00                       		bge.s	loc_16844
00016F28 4441                       		neg.w	d1
00016F2A 4443                       		neg.w	d3
00016F2C                            
00016F2C                            loc_16844:
00016F2C B240                       		cmp.w	d0,d1
00016F2E 6500                       		bcs.s	loc_1687A
00016F30 7200                       		moveq	#0,d1
00016F32 3228 0038                  		move.w	$38(a0),d1
00016F36 9269 000C                  		sub.w	$C(a1),d1
00016F3A 4841                       		swap	d1
00016F3C 83C3                       		divs.w	d3,d1
00016F3E 7000                       		moveq	#0,d0
00016F40 3028 0036                  		move.w	$36(a0),d0
00016F44 9069 0008                  		sub.w	8(a1),d0
00016F48 6700                       		beq.s	loc_16866
00016F4A 4840                       		swap	d0
00016F4C 81C1                       		divs.w	d1,d0
00016F4E                            
00016F4E                            loc_16866:
00016F4E 3340 0010                  		move.w	d0,$10(a1)
00016F52 3343 0012                  		move.w	d3,$12(a1)
00016F56 4A41                       		tst.w	d1
00016F58 6A00                       		bpl.s	loc_16874
00016F5A 4441                       		neg.w	d1
00016F5C                            
00016F5C                            loc_16874:
00016F5C 3141 002E                  		move.w	d1,$2E(a0)
00016F60 4E75                       		rts	
00016F62                            ; ===========================================================================
00016F62                            
00016F62                            loc_1687A:
00016F62 7000                       		moveq	#0,d0
00016F64 3028 0036                  		move.w	$36(a0),d0
00016F68 9069 0008                  		sub.w	8(a1),d0
00016F6C 4840                       		swap	d0
00016F6E 81C2                       		divs.w	d2,d0
00016F70 7200                       		moveq	#0,d1
00016F72 3228 0038                  		move.w	$38(a0),d1
00016F76 9269 000C                  		sub.w	$C(a1),d1
00016F7A 6700                       		beq.s	loc_16898
00016F7C 4841                       		swap	d1
00016F7E 83C0                       		divs.w	d0,d1
00016F80                            
00016F80                            loc_16898:
00016F80 3341 0012                  		move.w	d1,$12(a1)
00016F84 3342 0010                  		move.w	d2,$10(a1)
00016F88 4A40                       		tst.w	d0
00016F8A 6A00                       		bpl.s	loc_168A6
00016F8C 4440                       		neg.w	d0
00016F8E                            
00016F8E                            loc_168A6:
00016F8E 3140 002E                  		move.w	d0,$2E(a0)
00016F92 4E75                       		rts	
00016F94                            ; End of function sub_1681C
00016F94                            
00016F94                            ; ===========================================================================
00016F94 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016F9A 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016FA0 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016FA4 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016FAA 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016FB0 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016FB6 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016FBC 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016FC2 0884 0298 0894             		dc.w $884, $298, $894
00016FC8 0270 0894 0190             		dc.w $270, $894, $190
00016FCE 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016FD4 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016FDA 1184 0498 1158             		dc.w $1184, $498, $1158
00016FE0 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016FE6 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016FEC 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016FF2 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016FF8 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016FFE 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017004 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001700A 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017010 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017016 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
0001701C                            ; ===========================================================================
0001701C                            ; ---------------------------------------------------------------------------
0001701C                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
0001701C                            ; ---------------------------------------------------------------------------
0001701C                            
0001701C                            Obj78:					; XREF: Obj_Index
0001701C 7000                       		moveq	#0,d0
0001701E 1028 0024                  		move.b	$24(a0),d0
00017022 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017026 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001702A                            ; ===========================================================================
0001702A 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
0001702C 0000                       		dc.w Obj78_Action-Obj78_Index
0001702E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017030 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017032 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017034 0000                       		dc.w Obj78_Delete-Obj78_Index
00017036 0000                       		dc.w loc_16CC0-Obj78_Index
00017038                            ; ===========================================================================
00017038                            
00017038                            locret_16950:
00017038 4E75                       		rts	
0001703A                            ; ===========================================================================
0001703A                            
0001703A                            Obj78_Main:				; XREF: Obj78_Index
0001703A 117C 0007 0016             		move.b	#7,$16(a0)
00017040 117C 0008 0017             		move.b	#8,$17(a0)
00017046 4EB9 0000 DBB2             		jsr	ObjectFall
0001704C 4EBA E4A6                  		jsr	ObjHitFloor
00017050 4A41                       		tst.w	d1
00017052 6AE4                       		bpl.s	locret_16950
00017054 D368 000C                  		add.w	d1,$C(a0)
00017058 4268 0012                  		clr.w	$12(a0)
0001705C 5428 0024                  		addq.b	#2,$24(a0)
00017060 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017068 317C 22B0 0002             		move.w	#$22B0,2(a0)
0001706E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017074 6700                       		beq.s	loc_16996
00017076 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
0001707C                            
0001707C                            loc_16996:
0001707C 0228 0003 0001             		andi.b	#3,1(a0)
00017082 0028 0004 0001             		ori.b	#4,1(a0)
00017088 1168 0001 0022             		move.b	1(a0),$22(a0)
0001708E 117C 0004 0018             		move.b	#4,$18(a0)
00017094 117C 0008 0019             		move.b	#8,$19(a0)
0001709A 117C 000B 0020             		move.b	#$B,$20(a0)
000170A0 3428 0008                  		move.w	8(a0),d2
000170A4 7A0C                       		moveq	#$C,d5
000170A6 0828 0000 0022             		btst	#0,$22(a0)
000170AC 6700                       		beq.s	loc_169CA
000170AE 4445                       		neg.w	d5
000170B0                            
000170B0                            loc_169CA:
000170B0 1C3C 0004                  		move.b	#4,d6
000170B4 7600                       		moveq	#0,d3
000170B6 7804                       		moveq	#4,d4
000170B8 2448                       		movea.l	a0,a2
000170BA 7202                       		moveq	#2,d1
000170BC                            
000170BC                            Obj78_LoadBody:
000170BC 4EB9 0000 E0A0             		jsr	SingleObjLoad2
000170C2 6600                       		bne.s	Obj78_QuitLoad
000170C4 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
000170C8 1346 0024                  		move.b	d6,$24(a1)
000170CC 5406                       		addq.b	#2,d6
000170CE 2368 0004 0004             		move.l	4(a0),4(a1)
000170D4 3368 0002 0002             		move.w	2(a0),2(a1)
000170DA 137C 0005 0018             		move.b	#5,$18(a1)
000170E0 137C 0008 0019             		move.b	#8,$19(a1)
000170E6 137C 00CB 0020             		move.b	#$CB,$20(a1)
000170EC D445                       		add.w	d5,d2
000170EE 3342 0008                  		move.w	d2,8(a1)
000170F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170F8 1368 0022 0022             		move.b	$22(a0),$22(a1)
000170FE 1368 0022 0001             		move.b	$22(a0),1(a1)
00017104 137C 0008 001A             		move.b	#8,$1A(a1)
0001710A 234A 003C                  		move.l	a2,$3C(a1)
0001710E 1344 003C                  		move.b	d4,$3C(a1)
00017112 5804                       		addq.b	#4,d4
00017114 2449                       		movea.l	a1,a2
00017116                            
00017116                            Obj78_QuitLoad:
00017116 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001711A                            
0001711A 117C 0007 002A             		move.b	#7,$2A(a0)
00017120 4228 003C                  		clr.b	$3C(a0)
00017124                            
00017124                            Obj78_Action:				; XREF: Obj78_Index
00017124 4A28 0022                  		tst.b	$22(a0)
00017128 6B00 0000                  		bmi.w	loc_16C96
0001712C 7000                       		moveq	#0,d0
0001712E 1028 0025                  		move.b	$25(a0),d0
00017132 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017136 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001713A 1228 002B                  		move.b	$2B(a0),d1
0001713E 6A00                       		bpl.s	Obj78_Display
00017140 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017146 1028 0026                  		move.b	$26(a0),d0
0001714A 0240 007F                  		andi.w	#$7F,d0
0001714E 5828 0026                  		addq.b	#4,$26(a0)
00017152 1031 0000                  		move.b	(a1,d0.w),d0
00017156 6A00                       		bpl.s	Obj78_AniHead
00017158 08A8 0007 002B             		bclr	#7,$2B(a0)
0001715E 6000                       		bra.s	Obj78_Display
00017160                            ; ===========================================================================
00017160                            
00017160                            Obj78_AniHead:
00017160 0201 0010                  		andi.b	#$10,d1
00017164 D001                       		add.b	d1,d0
00017166 1140 001A                  		move.b	d0,$1A(a0)
0001716A                            
0001716A                            Obj78_Display:
0001716A 3028 0008                  		move.w	8(a0),d0
0001716E 0240 FF80                  		andi.w	#$FF80,d0
00017172 3238 F700                  		move.w	($FFFFF700).w,d1
00017176 0441 0080                  		subi.w	#$80,d1
0001717A 0241 FF80                  		andi.w	#$FF80,d1
0001717E 9041                       		sub.w	d1,d0
00017180 0C40 0280                  		cmpi.w	#$280,d0
00017184 6200 0000                  		bhi.w	Obj78_ChkGone
00017188 4EF9 0000 DC04             		jmp	DisplaySprite
0001718E                            ; ===========================================================================
0001718E                            
0001718E                            Obj78_ChkGone:
0001718E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017192 7000                       		moveq	#0,d0
00017194 1028 0023                  		move.b	$23(a0),d0
00017198 6700                       		beq.s	loc_16ABC
0001719A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000171A0                            
000171A0                            loc_16ABC:
000171A0 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000171A6 4E75                       		rts	
000171A8                            ; ===========================================================================
000171A8                            
000171A8                            Obj78_Delete:				; XREF: Obj78_Index
000171A8 4EF9 0000 DC40             		jmp	DeleteObject
000171AE                            ; ===========================================================================
000171AE 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000171B0 0000                       		dc.w loc_16B02-Obj78_Index2
000171B2                            ; ===========================================================================
000171B2                            
000171B2                            Obj78_Move:				; XREF: Obj78_Index2
000171B2 5328 002A                  		subq.b	#1,$2A(a0)
000171B6 6B00                       		bmi.s	Obj78_Move2
000171B8 4E75                       		rts	
000171BA                            ; ===========================================================================
000171BA                            
000171BA                            Obj78_Move2:
000171BA 5428 0025                  		addq.b	#2,$25(a0)
000171BE 117C 0010 002A             		move.b	#$10,$2A(a0)
000171C4 317C FF40 0010             		move.w	#-$C0,$10(a0)
000171CA 317C 0040 0014             		move.w	#$40,$14(a0)
000171D0 0868 0004 002B             		bchg	#4,$2B(a0)
000171D6 6600                       		bne.s	loc_16AFC
000171D8 4268 0010                  		clr.w	$10(a0)
000171DC 4468 0014                  		neg.w	$14(a0)
000171E0                            
000171E0                            loc_16AFC:
000171E0 08E8 0007 002B             		bset	#7,$2B(a0)
000171E6                            
000171E6                            loc_16B02:				; XREF: Obj78_Index2
000171E6 5328 002A                  		subq.b	#1,$2A(a0)
000171EA 6B00                       		bmi.s	loc_16B5E
000171EC 2F28 0008                  		move.l	8(a0),-(sp)
000171F0 2428 0008                  		move.l	8(a0),d2
000171F4 3028 0010                  		move.w	$10(a0),d0
000171F8 0828 0000 0022             		btst	#0,$22(a0)
000171FE 6700                       		beq.s	loc_16B1E
00017200 4440                       		neg.w	d0
00017202                            
00017202                            loc_16B1E:
00017202 48C0                       		ext.l	d0
00017204 E180                       		asl.l	#8,d0
00017206 D480                       		add.l	d0,d2
00017208 2142 0008                  		move.l	d2,8(a0)
0001720C 4EBA E2E6                  		jsr	ObjHitFloor
00017210 241F                       		move.l	(sp)+,d2
00017212 0C41 FFF8                  		cmpi.w	#-8,d1
00017216 6D00                       		blt.s	loc_16B70
00017218 0C41 000C                  		cmpi.w	#$C,d1
0001721C 6C00                       		bge.s	loc_16B70
0001721E D368 000C                  		add.w	d1,$C(a0)
00017222 4842                       		swap	d2
00017224 B468 0008                  		cmp.w	8(a0),d2
00017228 6700                       		beq.s	locret_16B5C
0001722A 7000                       		moveq	#0,d0
0001722C 1028 003C                  		move.b	$3C(a0),d0
00017230 5228 003C                  		addq.b	#1,$3C(a0)
00017234 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001723A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001723E                            
0001723E                            locret_16B5C:
0001723E 4E75                       		rts	
00017240                            ; ===========================================================================
00017240                            
00017240                            loc_16B5E:
00017240 5528 0025                  		subq.b	#2,$25(a0)
00017244 117C 0007 002A             		move.b	#7,$2A(a0)
0001724A 317C 0000 0010             		move.w	#0,$10(a0)
00017250 4E75                       		rts	
00017252                            ; ===========================================================================
00017252                            
00017252                            loc_16B70:
00017252 2142 0008                  		move.l	d2,8(a0)
00017256 0868 0000 0022             		bchg	#0,$22(a0)
0001725C 1168 0022 0001             		move.b	$22(a0),1(a0)
00017262 7000                       		moveq	#0,d0
00017264 1028 003C                  		move.b	$3C(a0),d0
00017268 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
0001726E 5228 003C                  		addq.b	#1,$3C(a0)
00017272 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017278 4E75                       		rts	
0001727A                            ; ===========================================================================
0001727A                            
0001727A                            Obj78_BodySeg2:				; XREF: Obj78_Index
0001727A 2268 003C                  		movea.l	$3C(a0),a1
0001727E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017284 6A00                       		bpl.s	Obj78_BodySeg1
00017286 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001728C 1028 0026                  		move.b	$26(a0),d0
00017290 0240 007F                  		andi.w	#$7F,d0
00017294 5828 0026                  		addq.b	#4,$26(a0)
00017298 4A31 0004                  		tst.b	4(a1,d0.w)
0001729C 6A00                       		bpl.s	Obj78_AniBody
0001729E 5828 0026                  		addq.b	#4,$26(a0)
000172A2                            
000172A2                            Obj78_AniBody:
000172A2 1031 0000                  		move.b	(a1,d0.w),d0
000172A6 5000                       		addq.b	#8,d0
000172A8 1140 001A                  		move.b	d0,$1A(a0)
000172AC                            
000172AC                            Obj78_BodySeg1:				; XREF: Obj78_Index
000172AC 2268 003C                  		movea.l	$3C(a0),a1
000172B0 4A28 0022                  		tst.b	$22(a0)
000172B4 6B00 0000                  		bmi.w	loc_16C90
000172B8 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000172BE 1169 0025 0025             		move.b	$25(a1),$25(a0)
000172C4 6700 0000                  		beq.w	loc_16C64
000172C8 3169 0014 0014             		move.w	$14(a1),$14(a0)
000172CE 3029 0010                  		move.w	$10(a1),d0
000172D2 D069 0014                  		add.w	$14(a1),d0
000172D6 3140 0010                  		move.w	d0,$10(a0)
000172DA 2428 0008                  		move.l	8(a0),d2
000172DE 2602                       		move.l	d2,d3
000172E0 3028 0010                  		move.w	$10(a0),d0
000172E4 0828 0000 0022             		btst	#0,$22(a0)
000172EA 6700                       		beq.s	loc_16C0C
000172EC 4440                       		neg.w	d0
000172EE                            
000172EE                            loc_16C0C:
000172EE 48C0                       		ext.l	d0
000172F0 E180                       		asl.l	#8,d0
000172F2 D480                       		add.l	d0,d2
000172F4 2142 0008                  		move.l	d2,8(a0)
000172F8 4843                       		swap	d3
000172FA B668 0008                  		cmp.w	8(a0),d3
000172FE 6700                       		beq.s	loc_16C64
00017300 7000                       		moveq	#0,d0
00017302 1028 003C                  		move.b	$3C(a0),d0
00017306 1231 002C                  		move.b	$2C(a1,d0.w),d1
0001730A 0C01 0080                  		cmpi.b	#-$80,d1
0001730E 6600                       		bne.s	loc_16C50
00017310 4843                       		swap	d3
00017312 2143 0008                  		move.l	d3,8(a0)
00017316 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001731A 0868 0000 0022             		bchg	#0,$22(a0)
00017320 1168 0022 0001             		move.b	$22(a0),1(a0)
00017326 5228 003C                  		addq.b	#1,$3C(a0)
0001732A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017330 6000                       		bra.s	loc_16C64
00017332                            ; ===========================================================================
00017332                            
00017332                            loc_16C50:
00017332 4881                       		ext.w	d1
00017334 D368 000C                  		add.w	d1,$C(a0)
00017338 5228 003C                  		addq.b	#1,$3C(a0)
0001733C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017342 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017346                            
00017346                            loc_16C64:
00017346 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
0001734C 6700                       		beq.s	loc_16C90
0001734E 0C11 0027                  		cmpi.b	#$27,0(a1)
00017352 6700                       		beq.s	loc_16C7C
00017354 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
0001735A 6600                       		bne.s	loc_16C82
0001735C                            
0001735C                            loc_16C7C:
0001735C 117C 000A 0024             		move.b	#$A,$24(a0)
00017362                            
00017362                            loc_16C82:
00017362 4EF9 0000 DC04             		jmp	DisplaySprite
00017368                            
00017368                            ; ===========================================================================
00017368 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017370                            ; ===========================================================================
00017370                            
00017370                            loc_16C90:
00017370 08E9 0007 0022             		bset	#7,$22(a1)
00017376                            
00017376                            loc_16C96:
00017376 7000                       		moveq	#0,d0
00017378 1028 0024                  		move.b	$24(a0),d0
0001737C 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017380 0828 0000 0022             		btst	#0,$22(a0)
00017386 6700                       		beq.s	loc_16CAA
00017388 4440                       		neg.w	d0
0001738A                            
0001738A                            loc_16CAA:
0001738A 3140 0010                  		move.w	d0,$10(a0)
0001738E 317C FC00 0012             		move.w	#-$400,$12(a0)
00017394 117C 000C 0024             		move.b	#$C,$24(a0)
0001739A 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000173A0                            
000173A0                            loc_16CC0:				; XREF: Obj78_Index
000173A0 4EB9 0000 DBB2             		jsr	ObjectFall
000173A6 4A68 0012                  		tst.w	$12(a0)
000173AA 6B00                       		bmi.s	loc_16CE0
000173AC 4EBA E146                  		jsr	ObjHitFloor
000173B0 4A41                       		tst.w	d1
000173B2 6A00                       		bpl.s	loc_16CE0
000173B4 D368 000C                  		add.w	d1,$C(a0)
000173B8 317C FC00 0012             		move.w	#-$400,$12(a0)
000173BE                            
000173BE                            loc_16CE0:
000173BE 4A28 0001                  		tst.b	1(a0)
000173C2 6A00 FDCA                  		bpl.w	Obj78_ChkGone
000173C6 4EF9 0000 DC04             		jmp	DisplaySprite
000173CC                            ; ===========================================================================
000173CC                            Ani_obj78:
000173CC                            	include "_anim\obj78.asm"
000173CC                            ; ---------------------------------------------------------------------------
000173CC                            ; Animation script - Caterkiller enemy (uses non-standard format)
000173CC                            ; ---------------------------------------------------------------------------
000173CC 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000173DC 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000173EC 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000173FC 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
0001740C 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
0001741C 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
0001742C 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
0001743C 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
0001744C                            	even
0001744C                            	even
0001744C                            
0001744C                            ; ---------------------------------------------------------------------------
0001744C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001744C                            ; ---------------------------------------------------------------------------
0001744C                            Map_obj78:
0001744C                            	include "_maps\obj78.asm"
0001744C                            ; ---------------------------------------------------------------------------
0001744C                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
0001744C                            ; ---------------------------------------------------------------------------
0001744C 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017450 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017454 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017458 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
0001745C 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017460 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017464 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017468 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
0001746C 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017470 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017474 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017478 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
0001747C 01                         byte_16D9E:	dc.b 1
0001747D F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017482 01                         byte_16DA4:	dc.b 1
00017483 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017488 01                         byte_16DAA:	dc.b 1
00017489 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001748E 01                         byte_16DB0:	dc.b 1
0001748F EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017494 01                         byte_16DB6:	dc.b 1
00017495 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
0001749A 01                         byte_16DBC:	dc.b 1
0001749B ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000174A0 01                         byte_16DC2:	dc.b 1
000174A1 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000174A6 01                         byte_16DC8:	dc.b 1
000174A7 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
000174AC 01                         byte_16DCE:	dc.b 1
000174AD F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000174B2 01                         byte_16DD4:	dc.b 1
000174B3 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
000174B8 01                         byte_16DDA:	dc.b 1
000174B9 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
000174BE 01                         byte_16DE0:	dc.b 1
000174BF F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000174C4 01                         byte_16DE6:	dc.b 1
000174C5 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000174CA 01                         byte_16DEC:	dc.b 1
000174CB F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000174D0 01                         byte_16DF2:	dc.b 1
000174D1 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000174D6 01                         byte_16DF8:	dc.b 1
000174D7 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000174DC 01                         byte_16DFE:	dc.b 1
000174DD F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000174E2 01                         byte_16E04:	dc.b 1
000174E3 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000174E8 01                         byte_16E0A:	dc.b 1
000174E9 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000174EE 01                         byte_16E10:	dc.b 1
000174EF EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000174F4 01                         byte_16E16:	dc.b 1
000174F5 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000174FA 01                         byte_16E1C:	dc.b 1
000174FB ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017500 01                         byte_16E22:	dc.b 1
00017501 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00017506 01                         byte_16E28:	dc.b 1
00017507 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
0001750C                            		even
0001750C                            		even
0001750C                            
0001750C                            ; ===========================================================================
0001750C                            ; ---------------------------------------------------------------------------
0001750C                            ; Object 79 - lamppost
0001750C                            ; ---------------------------------------------------------------------------
0001750C                            
0001750C                            Obj79:					; XREF: Obj_Index
0001750C 7000                       		moveq	#0,d0
0001750E 1028 0024                  		move.b	$24(a0),d0
00017512 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00017516 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
0001751A 4EFA 8790                  		jmp	MarkObjGone
0001751E                            ; ===========================================================================
0001751E 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017520 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017522 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00017524 0000                       		dc.w Obj79_Twirl-Obj79_Index
00017526                            ; ===========================================================================
00017526                            
00017526                            Obj79_Main:				; XREF: Obj79_Index
00017526 5428 0024                  		addq.b	#2,$24(a0)
0001752A 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00017532 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017538 117C 0004 0001             		move.b	#4,1(a0)
0001753E 117C 0008 0019             		move.b	#8,$19(a0)
00017544 117C 0005 0018             		move.b	#5,$18(a0)
0001754A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001754E 7000                       		moveq	#0,d0
00017550 1028 0023                  		move.b	$23(a0),d0
00017554 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001755A 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017560 6600                       		bne.s	Obj79_RedLamp
00017562 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017566 0201 007F                  		andi.b	#$7F,d1
0001756A 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
0001756E 0202 007F                  		andi.b	#$7F,d2
00017572 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00017574 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00017576                            
00017576                            Obj79_RedLamp:
00017576 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001757C 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00017582 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017588 4E75                       		rts	
0001758A                            ; ===========================================================================
0001758A                            
0001758A                            Obj79_BlueLamp:				; XREF: Obj79_Index
0001758A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001758E 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017592 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017596 6B00 0000                  		bmi.w	locret_16F90
0001759A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001759E 0201 007F                  		andi.b	#$7F,d1
000175A2 1428 0028                  		move.b	$28(a0),d2
000175A6 0202 007F                  		andi.b	#$7F,d2
000175AA B202                       		cmp.b	d2,d1
000175AC 6500                       		bcs.s	Obj79_HitLamp
000175AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175B2 7000                       		moveq	#0,d0
000175B4 1028 0023                  		move.b	$23(a0),d0
000175B8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000175BE 117C 0004 0024             		move.b	#4,$24(a0)
000175C4 117C 0003 001A             		move.b	#3,$1A(a0)
000175CA 6000 0000                  		bra.w	locret_16F90
000175CE                            ; ===========================================================================
000175CE                            
000175CE                            Obj79_HitLamp:
000175CE 3038 D008                  		move.w	($FFFFD008).w,d0
000175D2 9068 0008                  		sub.w	8(a0),d0
000175D6 5040                       		addq.w	#8,d0
000175D8 0C40 0010                  		cmpi.w	#$10,d0
000175DC 6400 0000                  		bcc.w	locret_16F90
000175E0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000175E4 9068 000C                  		sub.w	$C(a0),d0
000175E8 0640 0040                  		addi.w	#$40,d0
000175EC 0C40 0068                  		cmpi.w	#$68,d0
000175F0 6400                       		bcc.s	locret_16F90
000175F2 303C 00A1                  		move.w	#$A1,d0
000175F6 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play lamppost sound
000175FC 5428 0024                  		addq.b	#2,$24(a0)
00017600 4EB9 0000 E08A             		jsr	SingleObjLoad
00017606 6600                       		bne.s	loc_16F76
00017608 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
0001760C 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017612 3368 0008 0030             		move.w	8(a0),$30(a1)
00017618 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001761E 0469 0018 0032             		subi.w	#$18,$32(a1)
00017624 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
0001762C 337C 07A0 0002             		move.w	#$7A0,2(a1)
00017632 137C 0004 0001             		move.b	#4,1(a1)
00017638 137C 0008 0019             		move.b	#8,$19(a1)
0001763E 137C 0004 0018             		move.b	#4,$18(a1)
00017644 137C 0002 001A             		move.b	#2,$1A(a1)
0001764A 337C 0020 0036             		move.w	#$20,$36(a1)
00017650                            
00017650                            loc_16F76:
00017650 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00017656 6100 0000                  		bsr.w	Obj79_StoreInfo
0001765A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001765E 7000                       		moveq	#0,d0
00017660 1028 0023                  		move.b	$23(a0),d0
00017664 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001766A                            
0001766A                            locret_16F90:
0001766A 4E75                       		rts	
0001766C                            ; ===========================================================================
0001766C                            
0001766C                            Obj79_AfterHit:				; XREF: Obj79_Index
0001766C 4E75                       		rts	
0001766E                            ; ===========================================================================
0001766E                            
0001766E                            Obj79_Twirl:				; XREF: Obj79_Index
0001766E 5368 0036                  		subq.w	#1,$36(a0)
00017672 6A00                       		bpl.s	loc_16FA0
00017674 117C 0004 0024             		move.b	#4,$24(a0)
0001767A                            
0001767A                            loc_16FA0:
0001767A 1028 0026                  		move.b	$26(a0),d0
0001767E 0428 0010 0026             		subi.b	#$10,$26(a0)
00017684 0400 0040                  		subi.b	#$40,d0
00017688 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001768E C3FC 0C00                  		muls.w	#$C00,d1
00017692 4841                       		swap	d1
00017694 D268 0030                  		add.w	$30(a0),d1
00017698 3141 0008                  		move.w	d1,8(a0)
0001769C C1FC 0C00                  		muls.w	#$C00,d0
000176A0 4840                       		swap	d0
000176A2 D068 0032                  		add.w	$32(a0),d0
000176A6 3140 000C                  		move.w	d0,$C(a0)
000176AA 4E75                       		rts	
000176AC                            ; ===========================================================================
000176AC                            ; ---------------------------------------------------------------------------
000176AC                            ; Subroutine to	store information when you hit a lamppost
000176AC                            ; ---------------------------------------------------------------------------
000176AC                            
000176AC                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
000176AC 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
000176B2 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
000176B8 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
000176BE 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
000176C4 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
000176CA 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
000176D0 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
000176D6 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000176DC 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000176E2 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000176E8 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000176EE 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000176F4 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000176FA 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017700 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00017706 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
0001770C 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017712 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017718 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001771E 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017724 4E75                       		rts	
00017726                            
00017726                            ; ---------------------------------------------------------------------------
00017726                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017726                            ; ---------------------------------------------------------------------------
00017726                            
00017726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017726                            
00017726                            
00017726                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00017726 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
0001772C 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00017732 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017738 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001773E 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00017744 4278 FE20                  		clr.w	($FFFFFE20).w
00017748 4238 FE1B                  		clr.b	($FFFFFE1B).w
0001774C 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00017752 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017758 5338 FE24                  		subq.b	#1,($FFFFFE24).w
0001775C 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00017762 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017768 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
0001776E 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00017774 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
0001777A 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017780 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00017786 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
0001778C 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017792 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017798 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
0001779E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000177A4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000177AA 6600                       		bne.s	loc_170E4
000177AC 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
000177B2 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000177B8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000177BE                            
000177BE                            loc_170E4:
000177BE 4A38 FE30                  		tst.b	($FFFFFE30).w
000177C2 6A00                       		bpl.s	locret_170F6
000177C4 3038 FE32                  		move.w	($FFFFFE32).w,d0
000177C8 0440 00A0                  		subi.w	#$A0,d0
000177CC 31C0 F728                  		move.w	d0,($FFFFF728).w
000177D0                            
000177D0                            locret_170F6:
000177D0 4E75                       		rts	
000177D2                            ; End of function Obj79_LoadInfo
000177D2                            
000177D2                            ; ===========================================================================
000177D2                            ; ---------------------------------------------------------------------------
000177D2                            ; Sprite mappings - lamppost
000177D2                            ; ---------------------------------------------------------------------------
000177D2                            Map_obj79:
000177D2                            	include "_maps\obj79.asm"
000177D2                            ; ---------------------------------------------------------------------------
000177D2                            ; Sprite mappings - lamppost
000177D2                            ; ---------------------------------------------------------------------------
000177D2 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
000177D6 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000177DA 06                         byte_17100:	dc.b 6
000177DB E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000177E0 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000177E5 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000177EA F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000177EF D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000177F4 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000177F9 04                         byte_1711F:	dc.b 4
000177FA E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000177FF E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017804 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017809 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001780E 02                         byte_17134:	dc.b 2
0001780F F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017814 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017819 06                         byte_1713F:	dc.b 6
0001781A E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001781F E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017824 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017829 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001782E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017833 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017838                            		even
00017838                            		even
00017838                            
00017838                            ; ===========================================================================
00017838                            ; ---------------------------------------------------------------------------
00017838                            ; Object 7D - hidden points at the end of a level
00017838                            ; ---------------------------------------------------------------------------
00017838                            
00017838                            Obj7D:					; XREF: Obj_Index
00017838 7000                       		moveq	#0,d0
0001783A 1028 0024                  		move.b	$24(a0),d0
0001783E 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017842 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017846                            ; ===========================================================================
00017846 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017848 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001784A                            ; ===========================================================================
0001784A                            
0001784A                            Obj7D_Main:				; XREF: Obj7D_Index
0001784A 7410                       		moveq	#$10,d2
0001784C 3602                       		move.w	d2,d3
0001784E D643                       		add.w	d3,d3
00017850 43F8 D000                  		lea	($FFFFD000).w,a1
00017854 3029 0008                  		move.w	8(a1),d0
00017858 9068 0008                  		sub.w	8(a0),d0
0001785C D042                       		add.w	d2,d0
0001785E B043                       		cmp.w	d3,d0
00017860 6400                       		bcc.s	Obj7D_ChkDel
00017862 3229 000C                  		move.w	$C(a1),d1
00017866 9268 000C                  		sub.w	$C(a0),d1
0001786A D242                       		add.w	d2,d1
0001786C B243                       		cmp.w	d3,d1
0001786E 6400                       		bcc.s	Obj7D_ChkDel
00017870 4A78 FE08                  		tst.w	($FFFFFE08).w
00017874 6600                       		bne.s	Obj7D_ChkDel
00017876 4A38 F7CD                  		tst.b	($FFFFF7CD).w
0001787A 6600                       		bne.s	Obj7D_ChkDel
0001787C 5428 0024                  		addq.b	#2,$24(a0)
00017880 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017888 317C 84B6 0002             		move.w	#$84B6,2(a0)
0001788E 0028 0004 0001             		ori.b	#4,1(a0)
00017894 117C 0000 0018             		move.b	#0,$18(a0)
0001789A 117C 0010 0019             		move.b	#$10,$19(a0)
000178A0 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000178A6 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000178AC 303C 00C9                  		move.w	#$C9,d0
000178B0 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play bonus sound
000178B6 7000                       		moveq	#0,d0
000178B8 1028 0028                  		move.b	$28(a0),d0
000178BC D040                       		add.w	d0,d0
000178BE 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
000178C2 4EB9 0000 0000             		jsr	AddPoints
000178C8                            
000178C8                            Obj7D_ChkDel:
000178C8 3028 0008                  		move.w	8(a0),d0
000178CC 0240 FF80                  		andi.w	#$FF80,d0
000178D0 3238 F700                  		move.w	($FFFFF700).w,d1
000178D4 0441 0080                  		subi.w	#$80,d1
000178D8 0241 FF80                  		andi.w	#$FF80,d1
000178DC 9041                       		sub.w	d1,d0
000178DE 0C40 0280                  		cmpi.w	#$280,d0
000178E2 6200                       		bhi.s	Obj7D_Delete
000178E4 4E75                       		rts	
000178E6                            ; ===========================================================================
000178E6                            
000178E6                            Obj7D_Delete:
000178E6 4EF9 0000 DC40             		jmp	DeleteObject
000178EC                            ; ===========================================================================
000178EC 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
000178EE 03E8                       		dc.w 1000
000178F0 0064                       		dc.w 100
000178F2 0001                       		dc.w 1
000178F4                            ; ===========================================================================
000178F4                            
000178F4                            Obj7D_DelayDel:				; XREF: Obj7D_Index
000178F4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
000178F8 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
000178FA 3028 0008                  		move.w	8(a0),d0
000178FE 0240 FF80                  		andi.w	#-$80,d0
00017902 3238 F700                  		move.w	($FFFFF700).w,d1
00017906 0441 0080                  		subi.w	#$80,d1
0001790A 0241 FF80                  		andi.w	#-$80,d1
0001790E 9041                       		sub.w	d1,d0
00017910 0C40 0280                  		cmpi.w	#$280,d0
00017914 6200                       		bhi.s	Obj7D_Delete2
00017916 4EF9 0000 DC04             		jmp	DisplaySprite
0001791C                            ; ===========================================================================
0001791C                            
0001791C                            Obj7D_Delete2:
0001791C 4EF9 0000 DC40             		jmp	DeleteObject
00017922                            ; ===========================================================================
00017922                            ; ---------------------------------------------------------------------------
00017922                            ; Sprite mappings - hidden points at the end of	a level
00017922                            ; ---------------------------------------------------------------------------
00017922                            Map_obj7D:
00017922                            	include "_maps\obj7D.asm"
00017922                            ; ---------------------------------------------------------------------------
00017922                            ; Sprite mappings - hidden points at the end of	a level
00017922                            ; ---------------------------------------------------------------------------
00017922 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017926 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001792A 00                         byte_17250:	dc.b 0
0001792B 01                         byte_17251:	dc.b 1
0001792C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017931 01                         byte_17257:	dc.b 1
00017932 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017937 01                         byte_1725D:	dc.b 1
00017938 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001793E 00                         		even
0001793E 00                         		even
0001793E                            
0001793E                            ; ===========================================================================
0001793E                            ; ---------------------------------------------------------------------------
0001793E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001793E                            ; ---------------------------------------------------------------------------
0001793E                            
0001793E                            Obj8A:					; XREF: Obj_Index
0001793E 7000                       		moveq	#0,d0
00017940 1028 0024                  		move.b	$24(a0),d0
00017944 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017948 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
0001794C                            ; ===========================================================================
0001794C 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
0001794E 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017950                            ; ===========================================================================
00017950                            
00017950                            Obj8A_Main:				; XREF: Obj8A_Index
00017950 5428 0024                  		addq.b	#2,$24(a0)
00017954 317C 0120 0008             		move.w	#$120,8(a0)
0001795A 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017960 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017968 317C 05A0 0002             		move.w	#$5A0,2(a0)
0001796E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017972 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017976 117C 0000 0001             		move.b	#0,1(a0)
0001797C 117C 0000 0018             		move.b	#0,$18(a0)
00017982 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017988 6600                       		bne.s	Obj8A_Display	; if not, branch
0001798A 317C 00A6 0002             		move.w	#$A6,2(a0)
00017990 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017996 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001799A 6700                       		beq.s	Obj8A_Display	; if not, branch
0001799C 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000179A2 6600                       		bne.s	Obj8A_Display	; if not, branch
000179A4 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000179AA 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000179B0 4EF9 0000 DC40             		jmp	DeleteObject
000179B6                            ; ===========================================================================
000179B6                            
000179B6                            Obj8A_Display:				; XREF: Obj8A_Index
000179B6 4EF9 0000 DC04             		jmp	DisplaySprite
000179BC                            ; ===========================================================================
000179BC                            ; ---------------------------------------------------------------------------
000179BC                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
000179BC                            ; ---------------------------------------------------------------------------
000179BC                            Map_obj8A:
000179BC                            	include "_maps\obj8A.asm"
000179BC                            ; --------------------------------------------------------------------------------
000179BC                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
000179BC                            ; --------------------------------------------------------------------------------
000179BC                            
000179BC                            SME_MD8yg:	
000179BC 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
000179C0 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
000179C4 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
000179C8 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
000179CC 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
000179D0 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
000179D2 0E                         SME_MD8yg_16:	dc.b $E	
000179D3 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
000179D8 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
000179DD F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
000179E2 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
000179E7 F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
000179EC F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
000179F1 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
000179F6 F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
000179FB F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
00017A00 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
00017A05 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
00017A0A F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017A0F F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
00017A14 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
00017A19 10                         SME_MD8yg_5D:	dc.b $10	
00017A1A D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017A1F D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
00017A24 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
00017A29 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017A2E D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
00017A33 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
00017A38 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017A3D D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
00017A42 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
00017A47 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
00017A4C 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
00017A51 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
00017A56 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
00017A5B 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
00017A60 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
00017A65 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
00017A6A 0A                         SME_MD8yg_AE:	dc.b $A	
00017A6B D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
00017A70 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
00017A75 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
00017A7A D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
00017A7F D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
00017A84 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
00017A89 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
00017A8E 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
00017A93 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
00017A98 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
00017A9D 18                         SME_MD8yg_E1:	dc.b $18	
00017A9E D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
00017AA3 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
00017AA8 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
00017AAD D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
00017AB2 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017AB7 D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
00017ABC D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
00017AC1 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
00017AC6 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017ACB D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
00017AD0 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
00017AD5 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
00017ADA D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
00017ADF D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017AE4 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
00017AE9 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
00017AEE 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017AF3 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017AF8 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017AFD 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017B02 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
00017B07 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017B0C 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017B11 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017B16 14                         SME_MD8yg_15A:	dc.b $14	
00017B17 D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017B1C D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017B21 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017B26 D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017B2B D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017B30 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017B35 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017B3A 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017B3F 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017B44 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017B49 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017B4E 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017B53 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017B58 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017B5D 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017B62 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017B67 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017B6C 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017B71 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017B76 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017B7B 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017B7C D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017B81 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017B86 D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017B8B D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017B90 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017B95 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017B9A D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017B9F D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017BA4 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017BA9 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017BAE D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017BB3 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017BB8 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017BBD 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017BC2 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017BC7 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017BCC 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017BD1 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017BD6 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017BDB 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017BE0 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017BE5 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017BEA 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017BEF 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017BF4 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017BF9 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017BFE 17                         SME_MD8yg_242:	dc.b $17	
00017BFF D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017C04 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017C09 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017C0E D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017C13 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017C18 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017C1D D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017C22 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017C27 D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017C2C D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017C31 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017C36 D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017C3B 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017C40 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017C45 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017C4A 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017C4F 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017C54 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017C59 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017C5E 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017C63 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017C68 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017C6D 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017C72 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017C73 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017C78 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017C7D D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017C82 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017C87 D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017C8C D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017C91 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017C96 D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017C9B D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017CA0 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017CA5 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017CAA D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017CAF D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017CB4 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017CB9 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017CBE 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017CC3 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017CC8 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017CCD 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017CD2 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017CD7 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017CDC 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017CE1 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017CE6 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017CEB 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017CF0 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017CF5 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017CFA 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017CFF 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017D04 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017D09 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017D0E 0F                         SME_MD8yg_352:	dc.b $F	
00017D0F F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017D14 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017D19 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017D1E F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017D23 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017D28 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017D2D F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017D32 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017D37 F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017D3C F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017D41 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017D46 F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017D4B F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017D50 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017D55 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017D5A 08                         SME_MD8yg_39E:	dc.b 8	
00017D5B 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017D60 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017D65 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017D6A 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017D6F 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017D74 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017D79 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017D7E 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017D83 17                         SME_MD8yg_3C7:	dc.b $17	
00017D84 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017D89 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017D8E E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017D93 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017D98 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017D9D D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017DA2 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017DA7 E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017DAC D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017DB1 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017DB6 D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017DBB D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017DC0 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017DC5 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017DCA E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017DCF E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017DD4 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017DD9 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017DDE F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017DE3 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017DE8 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017DED D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017DF2 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017DF8 00                         		even
00017DF8 00                         		even
00017DF8                            
00017DF8                            ; ===========================================================================
00017DF8                            ; ---------------------------------------------------------------------------
00017DF8                            ; Object 3D - matthew boss - modified by GK89
00017DF8                            ; ---------------------------------------------------------------------------
00017DF8                            
00017DF8                            Obj3D:					; XREF: Obj_Index
00017DF8 7000                       		moveq	#0,d0
00017DFA 1028 0024                  		move.b	$24(a0),d0
00017DFE 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017E02 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017E06                            ; ===========================================================================
00017E06 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017E08 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017E0A 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017E0C 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017E0E                            
00017E0E 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017E10 0401                       		dc.b 4,	1
00017E12 0607                       		dc.b 6,	7
00017E14                            ; ===========================================================================
00017E14                            
00017E14                            Obj3D_Main:				; XREF: Obj3D_Index
00017E14 45F9 0001 7E0E             		lea	(Obj3D_ObjData).l,a2
00017E1A 2248                       		movea.l	a0,a1
00017E1C 7202                       		moveq	#2,d1
00017E1E 6000                       		bra.s	Obj3D_LoadBoss
00017E20                            ; ===========================================================================
00017E20                            
00017E20                            Obj3D_Loop:
00017E20 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00017E26 6600                       		bne.s	loc_17772
00017E28                            
00017E28                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017E28 135A 0024                  		move.b	(a2)+,$24(a1)
00017E2C 12BC 003D                  		move.b	#$3D,0(a1)
00017E30 3368 0008 0008             		move.w	8(a0),8(a1)
00017E36 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017E3C 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017E44 337C 0400 0002             		move.w	#$400,2(a1)
00017E4A 137C 0004 0001             		move.b	#4,1(a1)
00017E50 137C 0020 0019             		move.b	#$20,$19(a1)
00017E56 137C 0003 0018             		move.b	#3,$18(a1)
00017E5C 135A 001C                  		move.b	(a2)+,$1C(a1)
00017E60 2348 0034                  		move.l	a0,$34(a1)
00017E64 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017E68                            
00017E68                            loc_17772:
00017E68 3168 0008 0030             		move.w	8(a0),$30(a0)
00017E6E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017E74 117C 000F 0020             		move.b	#$F,$20(a0)
00017E7A 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00017E80                            
00017E80                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017E80 7000                       		moveq	#0,d0
00017E82 1028 0025                  		move.b	$25(a0),d0
00017E86 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017E8A 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017E8E 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017E94 4EB9 0000 ACCE             		jsr	AnimateSprite
00017E9A 1028 0022                  		move.b	$22(a0),d0
00017E9E 0200 0003                  		andi.b	#3,d0
00017EA2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017EA8 8128 0001                  		or.b	d0,1(a0)
00017EAC 4EF9 0000 DC04             		jmp	DisplaySprite
00017EB2                            ; ===========================================================================
00017EB2 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017EB4 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017EB6 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017EB8 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017EBA 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017EBC 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017EBE 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017EC0                            ; ===========================================================================
00017EC0                            
00017EC0                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017EC0 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00017EC6 6100 0000                  		bsr.w	BossMove
00017ECA 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017ED0 6600                       		bne.s	loc_177E6
00017ED2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017ED8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017EDC                            
00017EDC                            loc_177E6:
00017EDC 1028 003F                  		move.b	$3F(a0),d0
00017EE0 4EB9 0000 2C6A             		jsr	(CalcSine).l
00017EE6 EC40                       		asr.w	#6,d0
00017EE8 D068 0038                  		add.w	$38(a0),d0
00017EEC 3140 000C                  		move.w	d0,$C(a0)
00017EF0 3168 0030 0008             		move.w	$30(a0),8(a0)
00017EF6 5428 003F                  		addq.b	#2,$3F(a0)
00017EFA 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017F00 6400                       		bcc.s	locret_1784A
00017F02 4A28 0022                  		tst.b	$22(a0)
00017F06 6B00                       		bmi.s	loc_1784C
00017F08 4A28 0020                  		tst.b	$20(a0)
00017F0C 6600                       		bne.s	locret_1784A
00017F0E 4A28 003E                  		tst.b	$3E(a0)
00017F12 6600                       		bne.s	Obj3D_ShipFlash
00017F14 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017F1A 303C 00AC                  		move.w	#$AC,d0
00017F1E 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017F24                            
00017F24                            Obj3D_ShipFlash:
00017F24 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017F28 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017F2A 4A51                       		tst.w	(a1)
00017F2C 6600                       		bne.s	loc_1783C
00017F2E 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017F32                            
00017F32                            loc_1783C:
00017F32 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017F34 5328 003E                  		subq.b	#1,$3E(a0)
00017F38 6600                       		bne.s	locret_1784A
00017F3A 117C 000F 0020             		move.b	#$F,$20(a0)
00017F40                            
00017F40                            locret_1784A:
00017F40 4E75                       		rts	
00017F42                            ; ===========================================================================
00017F42                            
00017F42                            loc_1784C:				; XREF: loc_177E6
00017F42 7064                       		moveq	#100,d0
00017F44 6100 0000                  		bsr.w	AddPoints
00017F48 117C 0008 0025             		move.b	#8,$25(a0)
00017F4E 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017F54 4E75                       		rts	
00017F56                            
00017F56                            ; ---------------------------------------------------------------------------
00017F56                            ; Defeated boss	subroutine
00017F56                            ; ---------------------------------------------------------------------------
00017F56                            
00017F56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F56                            
00017F56                            
00017F56                            BossDefeated:
00017F56 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017F5A 0200 0007                  		andi.b	#7,d0
00017F5E 6600                       		bne.s	locret_178A2
00017F60 4EB9 0000 E08A             		jsr	SingleObjLoad
00017F66 6600                       		bne.s	locret_178A2
00017F68 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017F6C 3368 0008 0008             		move.w	8(a0),8(a1)
00017F72 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017F78 4EB9 0000 2C44             		jsr	(RandomNumber).l
00017F7E 3200                       		move.w	d0,d1
00017F80 7200                       		moveq	#0,d1
00017F82 1200                       		move.b	d0,d1
00017F84 E409                       		lsr.b	#2,d1
00017F86 0441 0020                  		subi.w	#$20,d1
00017F8A D369 0008                  		add.w	d1,8(a1)
00017F8E E048                       		lsr.w	#8,d0
00017F90 E608                       		lsr.b	#3,d0
00017F92 D169 000C                  		add.w	d0,$C(a1)
00017F96                            
00017F96                            locret_178A2:
00017F96 4E75                       		rts	
00017F98                            ; End of function BossDefeated
00017F98                            
00017F98                            ; ---------------------------------------------------------------------------
00017F98                            ; Subroutine to	move a boss
00017F98                            ; ---------------------------------------------------------------------------
00017F98                            
00017F98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017F98                            
00017F98                            
00017F98                            BossMove:
00017F98 2428 0030                  		move.l	$30(a0),d2
00017F9C 2628 0038                  		move.l	$38(a0),d3
00017FA0 3028 0010                  		move.w	$10(a0),d0
00017FA4 48C0                       		ext.l	d0
00017FA6 E180                       		asl.l	#8,d0
00017FA8 D480                       		add.l	d0,d2
00017FAA 3028 0012                  		move.w	$12(a0),d0
00017FAE 48C0                       		ext.l	d0
00017FB0 E180                       		asl.l	#8,d0
00017FB2 D680                       		add.l	d0,d3
00017FB4 2142 0030                  		move.l	d2,$30(a0)
00017FB8 2143 0038                  		move.l	d3,$38(a0)
00017FBC 4E75                       		rts	
00017FBE                            ; End of function BossMove
00017FBE                            
00017FBE                            ; ===========================================================================
00017FBE                            
00017FBE                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00017FBE 6100 FFD8                  		bsr.w	BossMove
00017FC2 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017FC8 6600                       		bne.s	loc_17916
00017FCA 317C 0000 0010             		move.w	#0,$10(a0)
00017FD0 317C 0000 0012             		move.w	#0,$12(a0)
00017FD6 5428 0025                  		addq.b	#2,$25(a0)
00017FDA 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00017FE0 6600                       		bne.s	loc_17910
00017FE2 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017FE6 3368 0030 0008             		move.w	$30(a0),8(a1)
00017FEC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017FF2 2348 0034                  		move.l	a0,$34(a1)
00017FF6                            
00017FF6                            loc_17910:
00017FF6 317C 0077 003C             		move.w	#$77,$3C(a0)
00017FFC                            
00017FFC                            loc_17916:
00017FFC 6000 FEDE                  		bra.w	loc_177E6
00018000                            ; ===========================================================================
00018000                            
00018000                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018000 5368 003C                  		subq.w	#1,$3C(a0)
00018004 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001800A 5428 0025                  		addq.b	#2,$25(a0)
0001800E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018014 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018018 9068 0008                  		sub.w	8(a0),d0		 
0001801C 6A00                       		bpl.s	Obj3D_left			 
0001801E 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018024 6000                       		bra.s	Obj3D_right		 
00018026 08A8 0005 0022             		bclr	#5,$22(a0)
0001802C 4EB9 0000 0000              		jsr     loc_17950
00018032 4E75                       		rts
00018034                            ; ===========================================================================
00018034                            
00018034                            Obj3D_right:
00018034 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001803A 4E75                       		Rts
0001803C                            
0001803C                            Obj3D_left:
0001803C 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018042 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018048 6600                       		bne.s	RTSboss  	; if not, branch
0001804A 0868 0000 0022              		bchg	#0,$22(a0)
00018050                            
00018050                            RTSboss:	    
00018050 4E75                       		rts
00018052                             ; ===========================================================================
00018052                            
00018052                            Obj3D_UpStuff:
00018052 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018056 9068 000C                  		sub.w	$C(a0),d0		 
0001805A 6A00                       		bpl.s	Obj3D_down			 
0001805C 6000                        		bra.s	Obj3D_up		 
0001805E 08A8 0005 0022             		bclr	#5,$22(a0)
00018064                             
00018064                            Obj3D_up:		
00018064 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001806A 4E75                        	    rts
0001806C                            
0001806C                            Obj3D_down:
0001806C 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018072                            
00018072                            loc_17950:
00018072 6000 FE68                  		bra.w	loc_177E6
00018076                            ; ===========================================================================
00018076                            
00018076                            loc_17954:				; XREF: Obj3D_ShipIndex
00018076 5368 003C                  		subq.w	#1,$3C(a0)
0001807A 6B00                       		bmi.s	loc_17960
0001807C 6100 FF1A                  		bsr.w	BossMove
00018080 6000                       		bra.s	loc_17976
00018082                            ; ===========================================================================
00018082                            
00018082                            loc_17960:
00018082 0868 0000 0022             		bchg	#0,$22(a0)
00018088 317C 003F 003C             		move.w	#$3F,$3C(a0)
0001808E 5528 0025                  		subq.b	#2,$25(a0)
00018092 317C 0000 0010             		move.w	#0,$10(a0)
00018098                            
00018098                            loc_17976:
00018098 6000 FE42                  		bra.w	loc_177E6
0001809C                            ; ===========================================================================
0001809C                            
0001809C                            loc_1797A:				; XREF: Obj3D_ShipIndex
0001809C 5368 003C                  		subq.w	#1,$3C(a0)
000180A0 6B00                       		bmi.s	loc_17984
000180A2 6000 FEB2                  		bra.w	BossDefeated
000180A6                            ; ===========================================================================
000180A6                            
000180A6                            loc_17984:
000180A6 08E8 0000 0022             		bset	#0,$22(a0)
000180AC 08A8 0007 0022             		bclr	#7,$22(a0)
000180B2 4268 0010                  		clr.w	$10(a0)
000180B6 5428 0025                  		addq.b	#2,$25(a0)
000180BA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000180C0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000180C4 6600                       		bne.s	locret_179AA
000180C6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000180CC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000180D2 6000 FE82                  		bra.w	BossDefeated
000180D6                            
000180D6                            locret_179AA:
000180D6 4E75                       		rts	
000180D8                            ; ===========================================================================
000180D8                            
000180D8                            loc_179AC:				; XREF: Obj3D_ShipIndex
000180D8 4EB9 0000 DBB2             		jsr ObjectFall		
000180DE 5268 003C                  		addq.w	#1,$3C(a0)
000180E2 6700                       		beq.s	loc_179BC
000180E4 6A00                       		bpl.s	loc_179C2
000180E6 6000                       		bra.s	loc_179EE
000180E8                            ; ===========================================================================
000180E8                            
000180E8                            loc_179BC:
000180E8 4268 0012                  		clr.w	$12(a0)
000180EC 6000                       		bra.s	loc_179EE
000180EE                            ; ===========================================================================
000180EE                            
000180EE                            loc_179C2:
000180EE 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000180F4 6500                       		bcs.s	loc_179DA
000180F6 6700                       		beq.s	loc_179E0
000180F8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000180FE 6500                       		bcs.s	loc_179EE
00018100 5428 0025                  		addq.b	#2,$25(a0)
00018104 6000                       		bra.s	loc_179EE
00018106                            ; ===========================================================================
00018106                            
00018106                            loc_179DA:
00018106 5168 0012                  		subq.w	#8,$12(a0)
0001810A 6000                       		bra.s	loc_179EE
0001810C 6000 FE48                  		bra.w	BossDefeated
00018110                            ; ===========================================================================
00018110                            
00018110                            loc_179E0:
00018110 4268 0012                  		clr.w	$12(a0)
00018114 303C 0081                  		move.w	#$81,d0
00018118 4EB9 0000 15C0             		jsr	(PlaySound).l	; play GHZ music
0001811E                            
0001811E                            loc_179EE:
0001811E 6100 FE78                  		bsr.w	BossMove
00018122 6000 FDB8                  		bra.w	loc_177E6
00018126                            ; ===========================================================================
00018126                            
00018126                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018126 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
0001812C 6700                       		beq.s	loc_17A10
0001812E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018132 6000                       		bra.s	loc_17A16
00018134                            ; ===========================================================================
00018134                            
00018134                            loc_17A10:
00018134 4A28 0001                  		tst.b	1(a0)
00018138 6A00                       		bpl.s	Obj3D_ShipDel
0001813A                            
0001813A                            loc_17A16:
0001813A 6100 FE5C                  		bsr.w	BossMove
0001813E 6000 FD9C                  		bra.w	loc_177E6
00018142                            ; ===========================================================================
00018142                            
00018142                            Obj3D_ShipDel:
00018142 4EF9 0000 DC40             		jmp	DeleteObject
00018148                            ; ===========================================================================
00018148                            
00018148                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018148 7000                       		moveq	#0,d0
0001814A 7201                       		moveq	#1,d1
0001814C 2268 0034                  		movea.l	$34(a0),a1
00018150 1029 0025                  		move.b	$25(a1),d0
00018154 5900                       		subq.b	#4,d0
00018156 6600                       		bne.s	loc_17A3E
00018158 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
0001815E 6600                       		bne.s	loc_17A46
00018160 7204                       		moveq	#4,d1
00018162                            
00018162                            loc_17A3E:
00018162 5D00                       		subq.b	#6,d0
00018164 6B00                       		bmi.s	loc_17A46
00018166 720A                       		moveq	#$A,d1
00018168 6000                       		bra.s	loc_17A5A
0001816A                            ; ===========================================================================
0001816A                            
0001816A                            loc_17A46:
0001816A 4A29 0020                  		tst.b	$20(a1)
0001816E 6600                       		bne.s	loc_17A50
00018170 7205                       		moveq	#5,d1
00018172 6000                       		bra.s	loc_17A5A
00018174                            ; ===========================================================================
00018174                            
00018174                            loc_17A50:
00018174 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001817A 6500                       		bcs.s	loc_17A5A
0001817C 7204                       		moveq	#4,d1
0001817E                            
0001817E                            loc_17A5A:
0001817E 1141 001C                  		move.b	d1,$1C(a0)
00018182 5500                       		subq.b	#2,d0
00018184 6600                       		bne.s	Obj3D_FaceDisp
00018186 117C 0006 001C             		move.b	#6,$1C(a0)
0001818C 4A28 0001                  		tst.b	1(a0)
00018190 6A00                       		bpl.s	Obj3D_FaceDel
00018192                            
00018192                            Obj3D_FaceDisp:
00018192 6000                       		bra.s	Obj3D_Display
00018194                            ; ===========================================================================
00018194                            
00018194                            Obj3D_FaceDel:
00018194 4EF9 0000 DC40             		jmp	DeleteObject
0001819A                            ; ===========================================================================
0001819A                            
0001819A                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001819A 117C 0007 001C             		move.b	#7,$1C(a0)
000181A0 2268 0034                  		movea.l	$34(a0),a1
000181A4 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000181AA 6600                       		bne.s	loc_17A96
000181AC 117C 000B 001C             		move.b	#$B,$1C(a0)
000181B2 4A28 0001                  		tst.b	1(a0)
000181B6 6A00                       		bpl.s	Obj3D_FlameDel
000181B8 6000                       		bra.s	Obj3D_FlameDisp
000181BA                            ; ===========================================================================
000181BA                            
000181BA                            loc_17A96:
000181BA 3029 0010                  		move.w	$10(a1),d0
000181BE 6700                       		beq.s	Obj3D_FlameDisp
000181C0 117C 0008 001C             		move.b	#8,$1C(a0)
000181C6                            
000181C6                            Obj3D_FlameDisp:
000181C6 6000                       		bra.s	Obj3D_Display
000181C8                            ; ===========================================================================
000181C8                            
000181C8                            Obj3D_FlameDel:
000181C8 4EF9 0000 DC40             		jmp	DeleteObject
000181CE                            ; ===========================================================================
000181CE                            
000181CE                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000181CE 2268 0034                  		movea.l	$34(a0),a1
000181D2 3169 0008 0008             		move.w	8(a1),8(a0)
000181D8 3169 000C 000C             		move.w	$C(a1),$C(a0)
000181DE 1169 0022 0022             		move.b	$22(a1),$22(a0)
000181E4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000181EA 4EB9 0000 ACCE             		jsr	AnimateSprite
000181F0 1028 0022                  		move.b	$22(a0),d0
000181F4 0200 0003                  		andi.b	#3,d0
000181F8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000181FE 8128 0001                  		or.b	d0,1(a0)
00018202 4EF9 0000 DC04             		jmp	DisplaySprite
00018208                            ; ===========================================================================
00018208                            ; ---------------------------------------------------------------------------
00018208                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018208                            ; ---------------------------------------------------------------------------
00018208                            
00018208                            Obj48:					; XREF: Obj_Index
00018208 7000                       		moveq	#0,d0
0001820A 1028 0024                  		move.b	$24(a0),d0
0001820E 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018212 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018216                            ; ===========================================================================
00018216 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018218 0000                       		dc.w Obj48_Base-Obj48_Index
0001821A 0000                       		dc.w Obj48_Display2-Obj48_Index
0001821C 0000                       		dc.w loc_17C68-Obj48_Index
0001821E 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018220                            ; ===========================================================================
00018220                            
00018220                            Obj48_Main:				; XREF: Obj48_Index
00018220 5428 0024                  		addq.b	#2,$24(a0)
00018224 317C 4080 0026             		move.w	#$4080,$26(a0)
0001822A 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018230 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018238 317C 046C 0002             		move.w	#$46C,2(a0)
0001823E 45E8 0028                  		lea	$28(a0),a2
00018242 14FC 0000                  		move.b	#0,(a2)+
00018246 7205                       		moveq	#5,d1
00018248 2248                       		movea.l	a0,a1
0001824A 6000                       		bra.s	loc_17B60
0001824C                            ; ===========================================================================
0001824C                            
0001824C                            Obj48_MakeLinks:
0001824C 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00018252 6600                       		bne.s	Obj48_MakeBall
00018254 3368 0008 0008             		move.w	8(a0),8(a1)
0001825A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018260 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018264 137C 0006 0024             		move.b	#6,$24(a1)
0001826A 237C 0000 8122 0004        		move.l	#Map_obj15,4(a1)
00018272 337C 0380 0002             		move.w	#$380,2(a1)
00018278 137C 0001 001A             		move.b	#1,$1A(a1)
0001827E 5228 0028                  		addq.b	#1,$28(a0)
00018282                            
00018282                            loc_17B60:				; XREF: Obj48_Main
00018282 3A09                       		move.w	a1,d5
00018284 0445 D000                  		subi.w	#$D000,d5
00018288 EC4D                       		lsr.w	#6,d5
0001828A 0245 007F                  		andi.w	#$7F,d5
0001828E 14C5                       		move.b	d5,(a2)+
00018290 137C 0004 0001             		move.b	#4,1(a1)
00018296 137C 0008 0019             		move.b	#8,$19(a1)
0001829C 137C 0006 0018             		move.b	#6,$18(a1)
000182A2 2368 0034 0034             		move.l	$34(a0),$34(a1)
000182A8 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000182AC                            
000182AC                            Obj48_MakeBall:
000182AC 137C 0008 0024             		move.b	#8,$24(a1)
000182B2 237C 0000 8680 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000182BA 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000182C0 137C 0001 001A             		move.b	#1,$1A(a1)
000182C6 137C 0005 0018             		move.b	#5,$18(a1)
000182CC 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000182D2 4E75                       		rts	
000182D4                            ; ===========================================================================
000182D4                            
000182D4 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000182DA                            
000182DA                            ; ===========================================================================
000182DA                            
000182DA                            Obj48_Base:				; XREF: Obj48_Index
000182DA 47F9 0001 82D4             		lea	(Obj48_PosData).l,a3
000182E0 45E8 0028                  		lea	$28(a0),a2
000182E4 7C00                       		moveq	#0,d6
000182E6 1C1A                       		move.b	(a2)+,d6
000182E8                            
000182E8                            loc_17BC6:
000182E8 7800                       		moveq	#0,d4
000182EA 181A                       		move.b	(a2)+,d4
000182EC ED4C                       		lsl.w	#6,d4
000182EE 0684 00FF D000             		addi.l	#$FFD000,d4
000182F4 2244                       		movea.l	d4,a1
000182F6 101B                       		move.b	(a3)+,d0
000182F8 B029 003C                  		cmp.b	$3C(a1),d0
000182FC 6700                       		beq.s	loc_17BE0
000182FE 5229 003C                  		addq.b	#1,$3C(a1)
00018302                            
00018302                            loc_17BE0:
00018302 51CE FFE4                  		dbf	d6,loc_17BC6
00018306                            
00018306 B029 003C                  		cmp.b	$3C(a1),d0
0001830A 6600                       		bne.s	loc_17BFA
0001830C 2268 0034                  		movea.l	$34(a0),a1
00018310 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018316 6600                       		bne.s	loc_17BFA
00018318 5428 0024                  		addq.b	#2,$24(a0)
0001831C                            
0001831C                            loc_17BFA:
0001831C 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018322 6700                       		beq.s	Obj48_Display
00018324 5268 0032                  		addq.w	#1,$32(a0)
00018328                            
00018328                            Obj48_Display:
00018328 6100 0000                  		bsr.w	sub_17C2A
0001832C 1028 0026                  		move.b	$26(a0),d0
00018330 4EB9 0000 8094             		jsr	(Obj15_Move2).l
00018336 4EF9 0000 DC04             		jmp	DisplaySprite
0001833C                            ; ===========================================================================
0001833C                            
0001833C                            Obj48_Display2:				; XREF: Obj48_Index
0001833C 6100 0000                  		bsr.w	sub_17C2A
00018340 4EB9 0000 8054             		jsr	(Obj48_Move).l
00018346 4EF9 0000 DC04             		jmp	DisplaySprite
0001834C                            
0001834C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001834C                            
0001834C                            
0001834C                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
0001834C 2268 0034                  		movea.l	$34(a0),a1
00018350 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018356 6400                       		bcc.s	loc_17C3C
00018358 0868 0000 001A             		bchg	#0,$1A(a0)
0001835E                            
0001835E                            loc_17C3C:
0001835E 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018364 3029 000C                  		move.w	$C(a1),d0
00018368 D068 0032                  		add.w	$32(a0),d0
0001836C 3140 0038                  		move.w	d0,$38(a0)
00018370 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018376 4A29 0022                  		tst.b	$22(a1)
0001837A 6A00                       		bpl.s	locret_17C66
0001837C 10BC 003F                  		move.b	#$3F,0(a0)
00018380 117C 0000 0024             		move.b	#0,$24(a0)
00018386                            
00018386                            locret_17C66:
00018386 4E75                       		rts	
00018388                            ; End of function sub_17C2A
00018388                            
00018388                            ; ===========================================================================
00018388                            
00018388                            loc_17C68:				; XREF: Obj48_Index
00018388 2268 0034                  		movea.l	$34(a0),a1
0001838C 4A29 0022                  		tst.b	$22(a1)
00018390 6A00                       		bpl.s	Obj48_Display3
00018392 10BC 003F                  		move.b	#$3F,0(a0)
00018396 117C 0000 0024             		move.b	#0,$24(a0)
0001839C                            
0001839C                            Obj48_Display3:
0001839C 4EF9 0000 DC04             		jmp	DisplaySprite
000183A2                            ; ===========================================================================
000183A2                            
000183A2                            Obj48_ChkVanish:			; XREF: Obj48_Index
000183A2 7000                       		moveq	#0,d0
000183A4 4A28 001A                  		tst.b	$1A(a0)
000183A8 6600                       		bne.s	Obj48_Vanish
000183AA 5200                       		addq.b	#1,d0
000183AC                            
000183AC                            Obj48_Vanish:
000183AC 1140 001A                  		move.b	d0,$1A(a0)
000183B0 2268 0034                  		movea.l	$34(a0),a1
000183B4 4A29 0022                  		tst.b	$22(a1)
000183B8 6A00                       		bpl.s	Obj48_Display4
000183BA 117C 0000 0020             		move.b	#0,$20(a0)
000183C0 6100 FB94                  		bsr.w	BossDefeated
000183C4 5328 003C                  		subq.b	#1,$3C(a0)
000183C8 6A00                       		bpl.s	Obj48_Display4
000183CA 10BC 003F                  		move.b	#$3F,(a0)
000183CE 117C 0000 0024             		move.b	#0,$24(a0)
000183D4                            
000183D4                            Obj48_Display4:
000183D4 4EF9 0000 DC04             		jmp	DisplaySprite
000183DA                            ; ===========================================================================
000183DA                            Ani_Eggman:
000183DA                            	include "_anim\Eggman.asm"
000183DA                            ; ---------------------------------------------------------------------------
000183DA                            ; Animation script - Eggman (bosses)
000183DA                            ; ---------------------------------------------------------------------------
000183DA 0000                       		dc.w byte_17CD4-Ani_Eggman
000183DC 0000                       		dc.w byte_17CD8-Ani_Eggman
000183DE 0000                       		dc.w byte_17CDC-Ani_Eggman
000183E0 0000                       		dc.w byte_17CE0-Ani_Eggman
000183E2 0000                       		dc.w byte_17CE4-Ani_Eggman
000183E4 0000                       		dc.w byte_17CE8-Ani_Eggman
000183E6 0000                       		dc.w byte_17CEC-Ani_Eggman
000183E8 0000                       		dc.w byte_17CF0-Ani_Eggman
000183EA 0000                       		dc.w byte_17CF4-Ani_Eggman
000183EC 0000                       		dc.w byte_17CF8-Ani_Eggman
000183EE 0000                       		dc.w byte_17CFC-Ani_Eggman
000183F0 0000                       		dc.w byte_17D00-Ani_Eggman
000183F2 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000183F6 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000183FA 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000183FE 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018402 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00018406 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001840A 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
0001840E 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018412 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00018416 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001841A 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
0001841E 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001842A                            		even
0001842A                            		even
0001842A                            
0001842A                            ; ---------------------------------------------------------------------------
0001842A                            ; Sprite mappings - Eggman (boss levels)
0001842A                            ; ---------------------------------------------------------------------------
0001842A                            Map_Eggman:
0001842A                            	include "_maps\Eggman.asm"
0001842A                            Map_dc7e:
0001842A 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001842C 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001842E 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018430 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018432 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00018434 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00018436 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018438 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
0001843A 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001843C 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001843E 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018440 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018442 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00018444 06                         Map_dc7e_1A: 	dc.b $6
00018445 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
0001844A EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001844F FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00018454 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018459 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001845E 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018463 02                         Map_dc7e_39: 	dc.b $2
00018464 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018469 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001846E 02                         Map_dc7e_44: 	dc.b $2
0001846F E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018474 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018479 03                         Map_dc7e_4F: 	dc.b $3
0001847A E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001847F EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00018484 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018489 03                         Map_dc7e_5F: 	dc.b $3
0001848A E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001848F EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00018494 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018499 03                         Map_dc7e_6F: 	dc.b $3
0001849A E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001849F EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000184A4 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000184A9 03                         Map_dc7e_7F: 	dc.b $3
000184AA E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000184AF E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000184B4 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000184B9 04                         Map_dc7e_8F: 	dc.b $4
000184BA E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000184BF E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000184C4 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000184C9 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000184CE 01                         Map_dc7e_A4: 	dc.b $1
000184CF 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000184D4 01                         Map_dc7e_AA: 	dc.b $1
000184D5 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000184DA 00                         Map_dc7e_B0: 	dc.b $0
000184DB 02                         Map_dc7e_B1: 	dc.b $2
000184DC 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000184E1 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000184E6 02                         Map_dc7e_BC: 	dc.b $2
000184E7 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000184EC 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000184F2 00                         	even
000184F2 00                         	even
000184F2                            
000184F2                            ; ---------------------------------------------------------------------------
000184F2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000184F2                            ; ---------------------------------------------------------------------------
000184F2                            Map_BossItems:
000184F2                            	include "_maps\Boss items.asm"
000184F2                            ; ---------------------------------------------------------------------------
000184F2                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000184F2                            ; ---------------------------------------------------------------------------
000184F2 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000184F6 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
000184FA 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
000184FE 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018502 01                         byte_17DE4:	dc.b 1
00018503 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018508 02                         byte_17DEA:	dc.b 2
00018509 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001850E F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018513 00                         		dc.b 0
00018514 01                         byte_17DF6:	dc.b 1
00018515 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
0001851A 01                         byte_17DFC:	dc.b 1
0001851B 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018520 01                         byte_17E02:	dc.b 1
00018521 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00018526 04                         byte_17E08:	dc.b 4
00018527 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001852C F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018531 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00018536 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
0001853B 00                         		dc.b 0
0001853C 02                         byte_17E1E:	dc.b 2
0001853D 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018542 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00018547 00                         		dc.b 0
00018548 02                         byte_17E2A:	dc.b 2
00018549 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001854E 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00018554 00                         		even
00018554 00                         		even
00018554                            
00018554                            ; ===========================================================================
00018554                            ; ---------------------------------------------------------------------------
00018554                            ; Object 77 - Eggman (LZ)
00018554                            ; ---------------------------------------------------------------------------
00018554                            
00018554                            Obj77:					; XREF: Obj_Index
00018554 7000                       		moveq	#0,d0
00018556 1028 0024                  		move.b	$24(a0),d0
0001855A 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
0001855E 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018562                            ; ===========================================================================
00018562 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018564 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018566 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018568 0000                       		dc.w Obj77_FlameMain-Obj77_Index
0001856A                            
0001856A 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
0001856C 0401                       		dc.b 4,	1
0001856E 0607                       		dc.b 6,	7
00018570                            ; ===========================================================================
00018570                            
00018570                            Obj77_Main:				; XREF: Obj77_Index
00018570 317C 1E10 0008             		move.w	#$1E10,8(a0)
00018576 317C 05C0 000C             		move.w	#$5C0,$C(a0)
0001857C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018582 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018588 117C 000F 0020             		move.b	#$F,$20(a0)
0001858E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018594 117C 0004 0018             		move.b	#4,$18(a0)
0001859A 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001859E 2248                       		movea.l	a0,a1
000185A0 7202                       		moveq	#2,d1
000185A2 6000                       		bra.s	Obj77_LoadBoss
000185A4                            ; ===========================================================================
000185A4                            
000185A4                            Obj77_Loop:
000185A4 4EB9 0000 E0A0             		jsr	SingleObjLoad2
000185AA 6600                       		bne.s	Obj77_ShipMain
000185AC 12BC 0077                  		move.b	#$77,0(a1)
000185B0 3368 0008 0008             		move.w	8(a0),8(a1)
000185B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000185BC                            
000185BC                            Obj77_LoadBoss:				; XREF: Obj77_Main
000185BC 08A8 0000 0022             		bclr	#0,$22(a0)
000185C2 4229 0025                  		clr.b	$25(a1)
000185C6 135A 0024                  		move.b	(a2)+,$24(a1)
000185CA 135A 001C                  		move.b	(a2)+,$1C(a1)
000185CE 1368 0018 0018             		move.b	$18(a0),$18(a1)
000185D4 237C 0001 842A 0004        		move.l	#Map_Eggman,4(a1)
000185DC 337C 0400 0002             		move.w	#$400,2(a1)
000185E2 137C 0004 0001             		move.b	#4,1(a1)
000185E8 137C 0020 0019             		move.b	#$20,$19(a1)
000185EE 2348 0034                  		move.l	a0,$34(a1)
000185F2 51C9 FFB0                  		dbf	d1,Obj77_Loop
000185F6                            
000185F6                            Obj77_ShipMain:
000185F6 43F8 D000                  		lea	($FFFFD000).w,a1
000185FA 7000                       		moveq	#0,d0
000185FC 1028 0025                  		move.b	$25(a0),d0
00018600 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018604 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00018608 43F9 0001 83DA             		lea	(Ani_Eggman).l,a1
0001860E 4EB9 0000 ACCE             		jsr	AnimateSprite
00018614 7003                       		moveq	#3,d0
00018616 C028 0022                  		and.b	$22(a0),d0
0001861A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018620 8128 0001                  		or.b	d0,1(a0)
00018624 4EF9 0000 DC04             		jmp	DisplaySprite
0001862A                            ; ===========================================================================
0001862A 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
0001862E 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018632 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018636 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001863A                            ; ===========================================================================
0001863A                            
0001863A                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001863A 3029 0008                  		move.w	8(a1),d0
0001863E 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018642 6500                       		bcs.s	loc_17F38
00018644 317C FE80 0012             		move.w	#-$180,$12(a0)
0001864A 317C 0060 0010             		move.w	#$60,$10(a0)
00018650 5428 0025                  		addq.b	#2,$25(a0)
00018654                            
00018654                            loc_17F38:
00018654 6100 F942                  		bsr.w	BossMove
00018658 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001865E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018664                            
00018664                            loc_17F48:
00018664 4A28 003D                  		tst.b	$3D(a0)
00018668 6600                       		bne.s	loc_17F8E
0001866A 4A28 0022                  		tst.b	$22(a0)
0001866E 6B00                       		bmi.s	loc_17F92
00018670 4A28 0020                  		tst.b	$20(a0)
00018674 6600                       		bne.s	locret_17F8C
00018676 4A28 003E                  		tst.b	$3E(a0)
0001867A 6600                       		bne.s	loc_17F70
0001867C 117C 0020 003E             		move.b	#$20,$3E(a0)
00018682 303C 00AC                  		move.w	#$AC,d0
00018686 4EB9 0000 15C6             		jsr	(PlaySound_Special).l
0001868C                            
0001868C                            loc_17F70:
0001868C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018690 7000                       		moveq	#0,d0
00018692 4A51                       		tst.w	(a1)
00018694 6600                       		bne.s	loc_17F7E
00018696 303C 0EEE                  		move.w	#$EEE,d0
0001869A                            
0001869A                            loc_17F7E:
0001869A 3280                       		move.w	d0,(a1)
0001869C 5328 003E                  		subq.b	#1,$3E(a0)
000186A0 6600                       		bne.s	locret_17F8C
000186A2 117C 000F 0020             		move.b	#$F,$20(a0)
000186A8                            
000186A8                            locret_17F8C:
000186A8 4E75                       		rts	
000186AA                            ; ===========================================================================
000186AA                            
000186AA                            loc_17F8E:				; XREF: loc_17F48
000186AA 6000 F8AA                  		bra.w	BossDefeated
000186AE                            ; ===========================================================================
000186AE                            
000186AE                            loc_17F92:				; XREF: loc_17F48
000186AE 7064                       		moveq	#100,d0
000186B0 6100 0000                  		bsr.w	AddPoints
000186B4 117C 00FF 003D             		move.b	#-1,$3D(a0)
000186BA 4E75                       		rts	
000186BC                            ; ===========================================================================
000186BC                            
000186BC                            loc_17FA0:				; XREF: Obj77_ShipIndex
000186BC 70FE                       		moveq	#-2,d0
000186BE 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000186C4 6500                       		bcs.s	loc_17FB6
000186C6 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000186CC 4268 0010                  		clr.w	$10(a0)
000186D0 5240                       		addq.w	#1,d0
000186D2                            
000186D2                            loc_17FB6:
000186D2 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000186D8 6E00                       		bgt.s	loc_17FCA
000186DA 317C 0500 0038             		move.w	#$500,$38(a0)
000186E0 4268 0012                  		clr.w	$12(a0)
000186E4 5240                       		addq.w	#1,d0
000186E6                            
000186E6                            loc_17FCA:
000186E6 6600                       		bne.s	loc_17FDC
000186E8 317C 0140 0010             		move.w	#$140,$10(a0)
000186EE 317C FE00 0012             		move.w	#-$200,$12(a0)
000186F4 5428 0025                  		addq.b	#2,$25(a0)
000186F8                            
000186F8                            loc_17FDC:
000186F8 6000 FF5A                  		bra.w	loc_17F38
000186FC                            ; ===========================================================================
000186FC                            
000186FC                            loc_17FE0:				; XREF: Obj77_ShipIndex
000186FC 70FE                       		moveq	#-2,d0
000186FE 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018704 6500                       		bcs.s	loc_17FF6
00018706 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001870C 4268 0010                  		clr.w	$10(a0)
00018710 5240                       		addq.w	#1,d0
00018712                            
00018712                            loc_17FF6:
00018712 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00018718 6E00                       		bgt.s	loc_1800A
0001871A 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018720 4268 0012                  		clr.w	$12(a0)
00018724 5240                       		addq.w	#1,d0
00018726                            
00018726                            loc_1800A:
00018726 6600                       		bne.s	loc_1801A
00018728 317C FE80 0012             		move.w	#-$180,$12(a0)
0001872E 5428 0025                  		addq.b	#2,$25(a0)
00018732 4228 003F                  		clr.b	$3F(a0)
00018736                            
00018736                            loc_1801A:
00018736 6000 FF1C                  		bra.w	loc_17F38
0001873A                            ; ===========================================================================
0001873A                            
0001873A                            loc_1801E:				; XREF: Obj77_ShipIndex
0001873A 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018740 6E00                       		bgt.s	loc_1804E
00018742 317C 0100 0038             		move.w	#$100,$38(a0)
00018748 317C 0140 0010             		move.w	#$140,$10(a0)
0001874E 317C FF80 0012             		move.w	#-$80,$12(a0)
00018754 4A28 003D                  		tst.b	$3D(a0)
00018758 6700                       		beq.s	loc_18046
0001875A E1E8 0010                  		asl	$10(a0)
0001875E E1E8 0012                  		asl	$12(a0)
00018762                            
00018762                            loc_18046:
00018762 5428 0025                  		addq.b	#2,$25(a0)
00018766 6000 FEEC                  		bra.w	loc_17F38
0001876A                            ; ===========================================================================
0001876A                            
0001876A                            loc_1804E:
0001876A 08E8 0000 0022             		bset	#0,$22(a0)
00018770 5428 003F                  		addq.b	#2,$3F(a0)
00018774 1028 003F                  		move.b	$3F(a0),d0
00018778 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001877E 4A41                       		tst.w	d1
00018780 6A00                       		bpl.s	loc_1806C
00018782 08A8 0000 0022             		bclr	#0,$22(a0)
00018788                            
00018788                            loc_1806C:
00018788 E840                       		asr.w	#4,d0
0001878A 4840                       		swap	d0
0001878C 4240                       		clr.w	d0
0001878E D0A8 0030                  		add.l	$30(a0),d0
00018792 4840                       		swap	d0
00018794 3140 0008                  		move.w	d0,8(a0)
00018798 3028 0012                  		move.w	$12(a0),d0
0001879C 3238 D00C                  		move.w	($FFFFD00C).w,d1
000187A0 9268 000C                  		sub.w	$C(a0),d1
000187A4 6500                       		bcs.s	loc_180A2
000187A6 0441 0048                  		subi.w	#$48,d1
000187AA 6500                       		bcs.s	loc_180A2
000187AC E240                       		asr.w	#1,d0
000187AE 0441 0028                  		subi.w	#$28,d1
000187B2 6500                       		bcs.s	loc_180A2
000187B4 E240                       		asr.w	#1,d0
000187B6 0441 0028                  		subi.w	#$28,d1
000187BA 6500                       		bcs.s	loc_180A2
000187BC 7000                       		moveq	#0,d0
000187BE                            
000187BE                            loc_180A2:
000187BE 48C0                       		ext.l	d0
000187C0 E180                       		asl.l	#8,d0
000187C2 4A28 003D                  		tst.b	$3D(a0)
000187C6 6700                       		beq.s	loc_180AE
000187C8 D080                       		add.l	d0,d0
000187CA                            
000187CA                            loc_180AE:
000187CA D1A8 0038                  		add.l	d0,$38(a0)
000187CE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000187D4 6000 FE8E                  		bra.w	loc_17F48
000187D8                            ; ===========================================================================
000187D8                            
000187D8                            loc_180BC:				; XREF: Obj77_ShipIndex
000187D8 70FE                       		moveq	#-2,d0
000187DA 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
000187E0 6500                       		bcs.s	loc_180D2
000187E2 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
000187E8 4268 0010                  		clr.w	$10(a0)
000187EC 5240                       		addq.w	#1,d0
000187EE                            
000187EE                            loc_180D2:
000187EE 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
000187F4 6E00                       		bgt.s	loc_180E6
000187F6 317C 00C0 0038             		move.w	#$C0,$38(a0)
000187FC 4268 0012                  		clr.w	$12(a0)
00018800 5240                       		addq.w	#1,d0
00018802                            
00018802                            loc_180E6:
00018802 6600                       		bne.s	loc_180F2
00018804 5428 0025                  		addq.b	#2,$25(a0)
00018808 08A8 0000 0022             		bclr	#0,$22(a0)
0001880E                            
0001880E                            loc_180F2:
0001880E 6000 FE44                  		bra.w	loc_17F38
00018812                            ; ===========================================================================
00018812                            
00018812                            loc_180F6:				; XREF: Obj77_ShipIndex
00018812 4A28 003D                  		tst.b	$3D(a0)
00018816 6600                       		bne.s	loc_18112
00018818 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
0001881E 6D00                       		blt.s	loc_18126
00018820 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018826 6E00                       		bgt.s	loc_18126
00018828 117C 0032 003C             		move.b	#$32,$3C(a0)
0001882E                            
0001882E                            loc_18112:
0001882E 303C 0082                  		move.w	#$82,d0
00018832 4EB9 0000 15C0             		jsr	(PlaySound).l	; play LZ music
00018838 08E8 0000 0022             		bset	#0,$22(a0)
0001883E 5428 0025                  		addq.b	#2,$25(a0)
00018842                            
00018842                            loc_18126:
00018842 6000 FE10                  		bra.w	loc_17F38
00018846                            ; ===========================================================================
00018846                            
00018846                            loc_1812A:				; XREF: Obj77_ShipIndex
00018846 4A28 003D                  		tst.b	$3D(a0)
0001884A 6600                       		bne.s	loc_18136
0001884C 5328 003C                  		subq.b	#1,$3C(a0)
00018850 6600                       		bne.s	loc_1814E
00018852                            
00018852                            loc_18136:
00018852 4228 003C                  		clr.b	$3C(a0)
00018856 317C 0400 0010             		move.w	#$400,$10(a0)
0001885C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018862 4228 003D                  		clr.b	$3D(a0)
00018866 5428 0025                  		addq.b	#2,$25(a0)
0001886A                            
0001886A                            loc_1814E:
0001886A 6000 FDE8                  		bra.w	loc_17F38
0001886E                            ; ===========================================================================
0001886E                            
0001886E                            loc_18152:				; XREF: Obj77_ShipIndex
0001886E 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018874 6400                       		bcc.s	loc_18160
00018876 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001887A 6000                       		bra.s	loc_18166
0001887C                            ; ===========================================================================
0001887C                            
0001887C                            loc_18160:
0001887C 4A28 0001                  		tst.b	1(a0)
00018880 6A00                       		bpl.s	Obj77_ShipDel
00018882                            
00018882                            loc_18166:
00018882 6000 FDD0                  		bra.w	loc_17F38
00018886                            ; ===========================================================================
00018886                            
00018886                            Obj77_ShipDel:
00018886 4EF9 0000 DC40             		jmp	DeleteObject
0001888C                            ; ===========================================================================
0001888C                            
0001888C                            Obj77_FaceMain:				; XREF: Obj77_Index
0001888C 2268 0034                  		movea.l	$34(a0),a1
00018890 1011                       		move.b	(a1),d0
00018892 B010                       		cmp.b	(a0),d0
00018894 6600                       		bne.s	Obj77_FaceDel
00018896 7000                       		moveq	#0,d0
00018898 1029 0025                  		move.b	$25(a1),d0
0001889C 7201                       		moveq	#1,d1
0001889E 4A28 003D                  		tst.b	$3D(a0)
000188A2 6700                       		beq.s	loc_1818C
000188A4 720A                       		moveq	#$A,d1
000188A6 6000                       		bra.s	loc_181A0
000188A8                            ; ===========================================================================
000188A8                            
000188A8                            loc_1818C:
000188A8 4A29 0020                  		tst.b	$20(a1)
000188AC 6600                       		bne.s	loc_18196
000188AE 7205                       		moveq	#5,d1
000188B0 6000                       		bra.s	loc_181A0
000188B2                            ; ===========================================================================
000188B2                            
000188B2                            loc_18196:
000188B2 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000188B8 6500                       		bcs.s	loc_181A0
000188BA 7204                       		moveq	#4,d1
000188BC                            
000188BC                            loc_181A0:
000188BC 1141 001C                  		move.b	d1,$1C(a0)
000188C0 0C00 000E                  		cmpi.b	#$E,d0
000188C4 6600                       		bne.s	loc_181B6
000188C6 117C 0006 001C             		move.b	#6,$1C(a0)
000188CC 4A28 0001                  		tst.b	1(a0)
000188D0 6A00                       		bpl.s	Obj77_FaceDel
000188D2                            
000188D2                            loc_181B6:
000188D2 6000                       		bra.s	Obj77_Display
000188D4                            ; ===========================================================================
000188D4                            
000188D4                            Obj77_FaceDel:
000188D4 4EF9 0000 DC40             		jmp	DeleteObject
000188DA                            ; ===========================================================================
000188DA                            
000188DA                            Obj77_FlameMain:			; XREF: Obj77_Index
000188DA 117C 0007 001C             		move.b	#7,$1C(a0)
000188E0 2268 0034                  		movea.l	$34(a0),a1
000188E4 1011                       		move.b	(a1),d0
000188E6 B010                       		cmp.b	(a0),d0
000188E8 6600                       		bne.s	Obj77_FlameDel
000188EA 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000188F0 6600                       		bne.s	loc_181F0
000188F2 117C 000B 001C             		move.b	#$B,$1C(a0)
000188F8 4A28 0001                  		tst.b	1(a0)
000188FC 6A00                       		bpl.s	Obj77_FlameDel
000188FE 6000                       		bra.s	loc_181F0
00018900                            ; ===========================================================================
00018900 4A69 0010                  		tst.w	$10(a1)
00018904 6700                       		beq.s	loc_181F0
00018906 117C 0008 001C             		move.b	#8,$1C(a0)
0001890C                            
0001890C                            loc_181F0:
0001890C 6000                       		bra.s	Obj77_Display
0001890E                            ; ===========================================================================
0001890E                            
0001890E                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
0001890E 4EF9 0000 DC40             		jmp	DeleteObject
00018914                            ; ===========================================================================
00018914                            
00018914                            Obj77_Display:
00018914 43F9 0001 83DA             		lea	(Ani_Eggman).l,a1
0001891A 4EB9 0000 ACCE             		jsr	AnimateSprite
00018920 2268 0034                  		movea.l	$34(a0),a1
00018924 3169 0008 0008             		move.w	8(a1),8(a0)
0001892A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018930 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018936 7003                       		moveq	#3,d0
00018938 C028 0022                  		and.b	$22(a0),d0
0001893C 0228 00FC 0001             		andi.b	#-4,1(a0)
00018942 8128 0001                  		or.b	d0,1(a0)
00018946 4EF9 0000 DC04             		jmp	DisplaySprite
0001894C                            ; ===========================================================================
0001894C                            ; ---------------------------------------------------------------------------
0001894C                            ; Object 73 - Eggman (MZ)
0001894C                            ; ---------------------------------------------------------------------------
0001894C                            
0001894C                            Obj73:					; XREF: Obj_Index
0001894C 7000                       		moveq	#0,d0
0001894E 1028 0024                  		move.b	$24(a0),d0
00018952 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018956 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001895A                            ; ===========================================================================
0001895A 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001895C 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001895E 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018960 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018962 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018964                            
00018964 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018967 0401 04                    		dc.b 4,	1, 4
0001896A 0607 04                    		dc.b 6,	7, 4
0001896D 0800 03                    		dc.b 8,	0, 3
00018970                            ; ===========================================================================
00018970                            
00018970                            Obj73_Main:				; XREF: Obj73_Index
00018970 3168 0008 0030             		move.w	8(a0),$30(a0)
00018976 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001897C 117C 000F 0020             		move.b	#$F,$20(a0)
00018982 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018988 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001898C 2248                       		movea.l	a0,a1
0001898E 7203                       		moveq	#3,d1
00018990 6000                       		bra.s	Obj73_LoadBoss
00018992                            ; ===========================================================================
00018992                            
00018992                            Obj73_Loop:
00018992 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00018998 6600                       		bne.s	Obj73_ShipMain
0001899A 12BC 0073                  		move.b	#$73,0(a1)
0001899E 3368 0008 0008             		move.w	8(a0),8(a1)
000189A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000189AA                            
000189AA                            Obj73_LoadBoss:				; XREF: Obj73_Main
000189AA 08A8 0000 0022             		bclr	#0,$22(a0)
000189B0 4229 0025                  		clr.b	$25(a1)
000189B4 135A 0024                  		move.b	(a2)+,$24(a1)
000189B8 135A 001C                  		move.b	(a2)+,$1C(a1)
000189BC 135A 0018                  		move.b	(a2)+,$18(a1)
000189C0 237C 0001 842A 0004        		move.l	#Map_Eggman,4(a1)
000189C8 337C 0400 0002             		move.w	#$400,2(a1)
000189CE 137C 0004 0001             		move.b	#4,1(a1)
000189D4 137C 0020 0019             		move.b	#$20,$19(a1)
000189DA 2348 0034                  		move.l	a0,$34(a1)
000189DE 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000189E2                            
000189E2                            Obj73_ShipMain:
000189E2 7000                       		moveq	#0,d0
000189E4 1028 0025                  		move.b	$25(a0),d0
000189E8 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000189EC 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000189F0 43F9 0001 83DA             		lea	(Ani_Eggman).l,a1
000189F6 4EB9 0000 ACCE             		jsr	AnimateSprite
000189FC 7003                       		moveq	#3,d0
000189FE C028 0022                  		and.b	$22(a0),d0
00018A02 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018A08 8128 0001                  		or.b	d0,1(a0)
00018A0C 4EF9 0000 DC04             		jmp	DisplaySprite
00018A12                            ; ===========================================================================
00018A12 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018A14 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018A16 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018A18 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018A1A 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018A1C                            ; ===========================================================================
00018A1C                            
00018A1C                            loc_18302:				; XREF: Obj73_ShipIndex
00018A1C 1028 003F                  		move.b	$3F(a0),d0
00018A20 5428 003F                  		addq.b	#2,$3F(a0)
00018A24 4EB9 0000 2C6A             		jsr	(CalcSine).l
00018A2A E440                       		asr.w	#2,d0
00018A2C 3140 0012                  		move.w	d0,$12(a0)
00018A30 317C FF00 0010             		move.w	#-$100,$10(a0)
00018A36 6100 F560                  		bsr.w	BossMove
00018A3A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018A40 6600                       		bne.s	loc_18334
00018A42 5428 0025                  		addq.b	#2,$25(a0)
00018A46 4228 0028                  		clr.b	$28(a0)
00018A4A 42A8 0010                  		clr.l	$10(a0)
00018A4E                            
00018A4E                            loc_18334:
00018A4E 4EB9 0000 2C44             		jsr	(RandomNumber).l
00018A54 1140 0034                  		move.b	d0,$34(a0)
00018A58                            
00018A58                            loc_1833E:
00018A58 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018A5E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018A64 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018A6A 6400                       		bcc.s	locret_18390
00018A6C 4A28 0022                  		tst.b	$22(a0)
00018A70 6B00                       		bmi.s	loc_18392
00018A72 4A28 0020                  		tst.b	$20(a0)
00018A76 6600                       		bne.s	locret_18390
00018A78 4A28 003E                  		tst.b	$3E(a0)
00018A7C 6600                       		bne.s	loc_18374
00018A7E 117C 0028 003E             		move.b	#$28,$3E(a0)
00018A84 303C 00AC                  		move.w	#$AC,d0
00018A88 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018A8E                            
00018A8E                            loc_18374:
00018A8E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018A92 7000                       		moveq	#0,d0
00018A94 4A51                       		tst.w	(a1)
00018A96 6600                       		bne.s	loc_18382
00018A98 303C 0EEE                  		move.w	#$EEE,d0
00018A9C                            
00018A9C                            loc_18382:
00018A9C 3280                       		move.w	d0,(a1)
00018A9E 5328 003E                  		subq.b	#1,$3E(a0)
00018AA2 6600                       		bne.s	locret_18390
00018AA4 117C 000F 0020             		move.b	#$F,$20(a0)
00018AAA                            
00018AAA                            locret_18390:
00018AAA 4E75                       		rts	
00018AAC                            ; ===========================================================================
00018AAC                            
00018AAC                            loc_18392:				; XREF: loc_1833E
00018AAC 7064                       		moveq	#100,d0
00018AAE 6100 0000                  		bsr.w	AddPoints
00018AB2 117C 0004 0025             		move.b	#4,$25(a0)
00018AB8 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018ABE 4268 0010                  		clr.w	$10(a0)
00018AC2 4E75                       		rts	
00018AC4                            ; ===========================================================================
00018AC4                            
00018AC4                            loc_183AA:				; XREF: Obj73_ShipIndex
00018AC4 7000                       		moveq	#0,d0
00018AC6 1028 0028                  		move.b	$28(a0),d0
00018ACA 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018ACE 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018AD2 0228 0006 0028             		andi.b	#6,$28(a0)
00018AD8 6000 FF7E                  		bra.w	loc_1833E
00018ADC                            ; ===========================================================================
00018ADC 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018ADE 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018AE0 0000                       		dc.w loc_183CA-off_183C2
00018AE2 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018AE4                            ; ===========================================================================
00018AE4                            
00018AE4                            loc_183CA:				; XREF: off_183C2
00018AE4 4A68 0010                  		tst.w	$10(a0)
00018AE8 6600                       		bne.s	loc_183FE
00018AEA 7040                       		moveq	#$40,d0
00018AEC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018AF2 6700                       		beq.s	loc_183E6
00018AF4 6500                       		bcs.s	loc_183DE
00018AF6 4440                       		neg.w	d0
00018AF8                            
00018AF8                            loc_183DE:
00018AF8 3140 0012                  		move.w	d0,$12(a0)
00018AFC 6000 F49A                  		bra.w	BossMove
00018B00                            ; ===========================================================================
00018B00                            
00018B00                            loc_183E6:
00018B00 317C 0200 0010             		move.w	#$200,$10(a0)
00018B06 317C 0100 0012             		move.w	#$100,$12(a0)
00018B0C 0828 0000 0022             		btst	#0,$22(a0)
00018B12 6600                       		bne.s	loc_183FE
00018B14 4468 0010                  		neg.w	$10(a0)
00018B18                            
00018B18                            loc_183FE:
00018B18 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018B1E 6400                       		bcc.s	Obj73_MakeLava
00018B20 6100 F476                  		bsr.w	BossMove
00018B24 5968 0012                  		subq.w	#4,$12(a0)
00018B28                            
00018B28                            Obj73_MakeLava:
00018B28 5328 0034                  		subq.b	#1,$34(a0)
00018B2C 6400                       		bcc.s	loc_1845C
00018B2E 4EB9 0000 E08A             		jsr	SingleObjLoad
00018B34 6600                       		bne.s	loc_1844A
00018B36 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018B3A 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018B40 4EB9 0000 2C44             		jsr	(RandomNumber).l
00018B46 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018B4C 80FC 0050                  		divu.w	#$50,d0
00018B50 4840                       		swap	d0
00018B52 0640 1878                  		addi.w	#$1878,d0
00018B56 3340 0008                  		move.w	d0,8(a1)
00018B5A EE09                       		lsr.b	#7,d1
00018B5C 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018B62                            
00018B62                            loc_1844A:
00018B62 4EB9 0000 2C44             		jsr	(RandomNumber).l
00018B68 0200 001F                  		andi.b	#$1F,d0
00018B6C 0600 0040                  		addi.b	#$40,d0
00018B70 1140 0034                  		move.b	d0,$34(a0)
00018B74                            
00018B74                            loc_1845C:
00018B74 0828 0000 0022             		btst	#0,$22(a0)
00018B7A 6700                       		beq.s	loc_18474
00018B7C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018B82 6D00                       		blt.s	locret_1849C
00018B84 317C 1910 0030             		move.w	#$1910,$30(a0)
00018B8A 6000                       		bra.s	loc_18482
00018B8C                            ; ===========================================================================
00018B8C                            
00018B8C                            loc_18474:
00018B8C 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018B92 6E00                       		bgt.s	locret_1849C
00018B94 317C 1830 0030             		move.w	#$1830,$30(a0)
00018B9A                            
00018B9A                            loc_18482:
00018B9A 4268 0010                  		clr.w	$10(a0)
00018B9E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018BA4 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018BAA 6400                       		bcc.s	loc_18498
00018BAC 4468 0012                  		neg.w	$12(a0)
00018BB0                            
00018BB0                            loc_18498:
00018BB0 5428 0028                  		addq.b	#2,$28(a0)
00018BB4                            
00018BB4                            locret_1849C:
00018BB4 4E75                       		rts	
00018BB6                            ; ===========================================================================
00018BB6                            
00018BB6                            Obj73_MakeLava2:			; XREF: off_183C2
00018BB6 6100 F3E0                  		bsr.w	BossMove
00018BBA 3028 0038                  		move.w	$38(a0),d0
00018BBE 0440 022C                  		subi.w	#$22C,d0
00018BC2 6E00                       		bgt.s	locret_184F4
00018BC4 303C 022C                  		move.w	#$22C,d0
00018BC8 4A68 0012                  		tst.w	$12(a0)
00018BCC 6700                       		beq.s	loc_184EA
00018BCE 4268 0012                  		clr.w	$12(a0)
00018BD2 317C 0050 003C             		move.w	#$50,$3C(a0)
00018BD8 0868 0000 0022             		bchg	#0,$22(a0)
00018BDE 4EB9 0000 E08A             		jsr	SingleObjLoad
00018BE4 6600                       		bne.s	loc_184EA
00018BE6 3368 0030 0008             		move.w	$30(a0),8(a1)
00018BEC 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018BF2 0669 0018 000C             		addi.w	#$18,$C(a1)
00018BF8 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018BFC 137C 0001 0028             		move.b	#1,$28(a1)
00018C02                            
00018C02                            loc_184EA:
00018C02 5368 003C                  		subq.w	#1,$3C(a0)
00018C06 6600                       		bne.s	locret_184F4
00018C08 5428 0028                  		addq.b	#2,$28(a0)
00018C0C                            
00018C0C                            locret_184F4:
00018C0C 4E75                       		rts	
00018C0E                            ; ===========================================================================
00018C0E                            
00018C0E                            loc_184F6:				; XREF: Obj73_ShipIndex
00018C0E 5368 003C                  		subq.w	#1,$3C(a0)
00018C12 6B00                       		bmi.s	loc_18500
00018C14 6000 F340                  		bra.w	BossDefeated
00018C18                            ; ===========================================================================
00018C18                            
00018C18                            loc_18500:
00018C18 08E8 0000 0022             		bset	#0,$22(a0)
00018C1E 08A8 0007 0022             		bclr	#7,$22(a0)
00018C24 4268 0010                  		clr.w	$10(a0)
00018C28 5428 0025                  		addq.b	#2,$25(a0)
00018C2C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018C32 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018C36 6600                       		bne.s	locret_1852A
00018C38 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018C3E 4268 0012                  		clr.w	$12(a0)
00018C42                            
00018C42                            locret_1852A:
00018C42 4E75                       		rts	
00018C44                            ; ===========================================================================
00018C44                            
00018C44                            loc_1852C:				; XREF: Obj73_ShipIndex
00018C44 5268 003C                  		addq.w	#1,$3C(a0)
00018C48 6700                       		beq.s	loc_18544
00018C4A 6A00                       		bpl.s	loc_1854E
00018C4C 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018C52 6400                       		bcc.s	loc_18544
00018C54 0668 0018 0012             		addi.w	#$18,$12(a0)
00018C5A 6000                       		bra.s	loc_1857A
00018C5C                            ; ===========================================================================
00018C5C                            
00018C5C                            loc_18544:
00018C5C 4268 0012                  		clr.w	$12(a0)
00018C60 4268 003C                  		clr.w	$3C(a0)
00018C64 6000                       		bra.s	loc_1857A
00018C66                            ; ===========================================================================
00018C66                            
00018C66                            loc_1854E:
00018C66 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018C6C 6500                       		bcs.s	loc_18566
00018C6E 6700                       		beq.s	loc_1856C
00018C70 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018C76 6500                       		bcs.s	loc_1857A
00018C78 5428 0025                  		addq.b	#2,$25(a0)
00018C7C 6000                       		bra.s	loc_1857A
00018C7E                            ; ===========================================================================
00018C7E                            
00018C7E                            loc_18566:
00018C7E 5168 0012                  		subq.w	#8,$12(a0)
00018C82 6000                       		bra.s	loc_1857A
00018C84                            ; ===========================================================================
00018C84                            
00018C84                            loc_1856C:
00018C84 4268 0012                  		clr.w	$12(a0)
00018C88 303C 0083                  		move.w	#$83,d0
00018C8C 4EB9 0000 15C0             		jsr	(PlaySound).l	; play MZ music
00018C92                            
00018C92                            loc_1857A:
00018C92 6100 F304                  		bsr.w	BossMove
00018C96 6000 FDC0                  		bra.w	loc_1833E
00018C9A                            ; ===========================================================================
00018C9A                            
00018C9A                            loc_18582:				; XREF: Obj73_ShipIndex
00018C9A 317C 0500 0010             		move.w	#$500,$10(a0)
00018CA0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018CA6 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018CAC 6400                       		bcc.s	loc_1859C
00018CAE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018CB2 6000                       		bra.s	loc_185A2
00018CB4                            ; ===========================================================================
00018CB4                            
00018CB4                            loc_1859C:
00018CB4 4A28 0001                  		tst.b	1(a0)
00018CB8 6A00                       		bpl.s	Obj73_ShipDel
00018CBA                            
00018CBA                            loc_185A2:
00018CBA 6100 F2DC                  		bsr.w	BossMove
00018CBE 6000 FD98                  		bra.w	loc_1833E
00018CC2                            ; ===========================================================================
00018CC2                            
00018CC2                            Obj73_ShipDel:
00018CC2 4EF9 0000 DC40             		jmp	DeleteObject
00018CC8                            ; ===========================================================================
00018CC8                            
00018CC8                            Obj73_FaceMain:				; XREF: Obj73_Index
00018CC8 7000                       		moveq	#0,d0
00018CCA 7201                       		moveq	#1,d1
00018CCC 2268 0034                  		movea.l	$34(a0),a1
00018CD0 1029 0025                  		move.b	$25(a1),d0
00018CD4 5540                       		subq.w	#2,d0
00018CD6 6600                       		bne.s	loc_185D2
00018CD8 0829 0001 0028             		btst	#1,$28(a1)
00018CDE 6700                       		beq.s	loc_185DA
00018CE0 4A69 0012                  		tst.w	$12(a1)
00018CE4 6600                       		bne.s	loc_185DA
00018CE6 7204                       		moveq	#4,d1
00018CE8 6000                       		bra.s	loc_185EE
00018CEA                            ; ===========================================================================
00018CEA                            
00018CEA                            loc_185D2:
00018CEA 5500                       		subq.b	#2,d0
00018CEC 6B00                       		bmi.s	loc_185DA
00018CEE 720A                       		moveq	#$A,d1
00018CF0 6000                       		bra.s	loc_185EE
00018CF2                            ; ===========================================================================
00018CF2                            
00018CF2                            loc_185DA:
00018CF2 4A29 0020                  		tst.b	$20(a1)
00018CF6 6600                       		bne.s	loc_185E4
00018CF8 7205                       		moveq	#5,d1
00018CFA 6000                       		bra.s	loc_185EE
00018CFC                            ; ===========================================================================
00018CFC                            
00018CFC                            loc_185E4:
00018CFC 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018D02 6500                       		bcs.s	loc_185EE
00018D04 7204                       		moveq	#4,d1
00018D06                            
00018D06                            loc_185EE:
00018D06 1141 001C                  		move.b	d1,$1C(a0)
00018D0A 5900                       		subq.b	#4,d0
00018D0C 6600                       		bne.s	loc_18602
00018D0E 117C 0006 001C             		move.b	#6,$1C(a0)
00018D14 4A28 0001                  		tst.b	1(a0)
00018D18 6A00                       		bpl.s	Obj73_FaceDel
00018D1A                            
00018D1A                            loc_18602:
00018D1A 6000                       		bra.s	Obj73_Display
00018D1C                            ; ===========================================================================
00018D1C                            
00018D1C                            Obj73_FaceDel:
00018D1C 4EF9 0000 DC40             		jmp	DeleteObject
00018D22                            ; ===========================================================================
00018D22                            
00018D22                            Obj73_FlameMain:			; XREF: Obj73_Index
00018D22 117C 0007 001C             		move.b	#7,$1C(a0)
00018D28 2268 0034                  		movea.l	$34(a0),a1
00018D2C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018D32 6D00                       		blt.s	loc_1862A
00018D34 117C 000B 001C             		move.b	#$B,$1C(a0)
00018D3A 4A28 0001                  		tst.b	1(a0)
00018D3E 6A00                       		bpl.s	Obj73_FlameDel
00018D40 6000                       		bra.s	loc_18636
00018D42                            ; ===========================================================================
00018D42                            
00018D42                            loc_1862A:
00018D42 4A69 0010                  		tst.w	$10(a1)
00018D46 6700                       		beq.s	loc_18636
00018D48 117C 0008 001C             		move.b	#8,$1C(a0)
00018D4E                            
00018D4E                            loc_18636:
00018D4E 6000                       		bra.s	Obj73_Display
00018D50                            ; ===========================================================================
00018D50                            
00018D50                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018D50 4EF9 0000 DC40             		jmp	DeleteObject
00018D56                            ; ===========================================================================
00018D56                            
00018D56                            Obj73_Display:
00018D56 43F9 0001 83DA             		lea	(Ani_Eggman).l,a1
00018D5C 4EB9 0000 ACCE             		jsr	AnimateSprite
00018D62                            
00018D62                            loc_1864A:
00018D62 2268 0034                  		movea.l	$34(a0),a1
00018D66 3169 0008 0008             		move.w	8(a1),8(a0)
00018D6C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018D72 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018D78 7003                       		moveq	#3,d0
00018D7A C028 0022                  		and.b	$22(a0),d0
00018D7E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018D84 8128 0001                  		or.b	d0,1(a0)
00018D88 4EF9 0000 DC04             		jmp	DisplaySprite
00018D8E                            ; ===========================================================================
00018D8E                            
00018D8E                            Obj73_TubeMain:				; XREF: Obj73_Index
00018D8E 2268 0034                  		movea.l	$34(a0),a1
00018D92 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018D98 6600                       		bne.s	loc_18688
00018D9A 4A28 0001                  		tst.b	1(a0)
00018D9E 6A00                       		bpl.s	Obj73_TubeDel
00018DA0                            
00018DA0                            loc_18688:
00018DA0 217C 0001 84F2 0004        		move.l	#Map_BossItems,4(a0)
00018DA8 317C 246C 0002             		move.w	#$246C,2(a0)
00018DAE 117C 0004 001A             		move.b	#4,$1A(a0)
00018DB4 60AC                       		bra.s	loc_1864A
00018DB6                            ; ===========================================================================
00018DB6                            
00018DB6                            Obj73_TubeDel:
00018DB6 4EF9 0000 DC40             		jmp	DeleteObject
00018DBC                            ; ===========================================================================
00018DBC                            ; ---------------------------------------------------------------------------
00018DBC                            ; Object 74 - lava that	Eggman drops (MZ)
00018DBC                            ; ---------------------------------------------------------------------------
00018DBC                            
00018DBC                            Obj74:					; XREF: Obj_Index
00018DBC 7000                       		moveq	#0,d0
00018DBE 1028 0024                  		move.b	$24(a0),d0
00018DC2 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018DC6 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018DCA 4EF9 0000 DC04             		jmp	DisplaySprite
00018DD0                            ; ===========================================================================
00018DD0 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018DD2 0000                       		dc.w Obj74_Action-Obj74_Index
00018DD4 0000                       		dc.w loc_18886-Obj74_Index
00018DD6 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018DD8                            ; ===========================================================================
00018DD8                            
00018DD8                            Obj74_Main:				; XREF: Obj74_Index
00018DD8 117C 0008 0016             		move.b	#8,$16(a0)
00018DDE 117C 0008 0017             		move.b	#8,$17(a0)
00018DE4 217C 0000 B8C2 0004        		move.l	#Map_obj14,4(a0)
00018DEC 317C 0345 0002             		move.w	#$345,2(a0)
00018DF2 117C 0004 0001             		move.b	#4,1(a0)
00018DF8 117C 0005 0018             		move.b	#5,$18(a0)
00018DFE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018E04 117C 0008 0019             		move.b	#8,$19(a0)
00018E0A 5428 0024                  		addq.b	#2,$24(a0)
00018E0E 4A28 0028                  		tst.b	$28(a0)
00018E12 6600                       		bne.s	loc_1870A
00018E14 117C 008B 0020             		move.b	#$8B,$20(a0)
00018E1A 5428 0024                  		addq.b	#2,$24(a0)
00018E1E 6000 0000                  		bra.w	loc_18886
00018E22                            ; ===========================================================================
00018E22                            
00018E22                            loc_1870A:
00018E22 117C 001E 0029             		move.b	#$1E,$29(a0)
00018E28 303C 00AE                  		move.w	#$AE,d0
00018E2C 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play lava sound
00018E32                            
00018E32                            Obj74_Action:				; XREF: Obj74_Index
00018E32 7000                       		moveq	#0,d0
00018E34 1028 0025                  		move.b	$25(a0),d0
00018E38 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018E3C 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018E40 4EB9 0000 DBDE             		jsr	SpeedToPos
00018E46 43F9 0000 EABE             		lea	(Ani_obj14).l,a1
00018E4C 4EB9 0000 ACCE             		jsr	AnimateSprite
00018E52 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018E58 6200                       		bhi.s	Obj74_Delete
00018E5A 4E75                       		rts	
00018E5C                            ; ===========================================================================
00018E5C                            
00018E5C                            Obj74_Delete:
00018E5C 4EF9 0000 DC40             		jmp	DeleteObject
00018E62                            ; ===========================================================================
00018E62 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018E64 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018E66 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018E68 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018E6A                            ; ===========================================================================
00018E6A                            
00018E6A                            Obj74_Drop:				; XREF: Obj74_Index2
00018E6A 08E8 0001 0022             		bset	#1,$22(a0)
00018E70 5328 0029                  		subq.b	#1,$29(a0)
00018E74 6A00                       		bpl.s	locret_18780
00018E76 117C 008B 0020             		move.b	#$8B,$20(a0)
00018E7C 4228 0028                  		clr.b	$28(a0)
00018E80 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E86 08A8 0001 0022             		bclr	#1,$22(a0)
00018E8C 6100 C666                  		bsr.w	ObjHitFloor
00018E90 4A41                       		tst.w	d1
00018E92 6A00                       		bpl.s	locret_18780
00018E94 5428 0025                  		addq.b	#2,$25(a0)
00018E98                            
00018E98                            locret_18780:
00018E98 4E75                       		rts	
00018E9A                            ; ===========================================================================
00018E9A                            
00018E9A                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018E9A 5568 000C                  		subq.w	#2,$C(a0)
00018E9E 08E8 0007 0002             		bset	#7,2(a0)
00018EA4 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018EAA 4268 0012                  		clr.w	$12(a0)
00018EAE 3168 0008 0030             		move.w	8(a0),$30(a0)
00018EB4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018EBA 117C 0003 0029             		move.b	#3,$29(a0)
00018EC0 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00018EC6 6600                       		bne.s	loc_187CA
00018EC8 47D1                       		lea	(a1),a3
00018ECA 45D0                       		lea	(a0),a2
00018ECC 7003                       		moveq	#3,d0
00018ECE                            
00018ECE                            Obj74_Loop:
00018ECE 26DA                       		move.l	(a2)+,(a3)+
00018ED0 26DA                       		move.l	(a2)+,(a3)+
00018ED2 26DA                       		move.l	(a2)+,(a3)+
00018ED4 26DA                       		move.l	(a2)+,(a3)+
00018ED6 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018EDA                            
00018EDA 4469 0010                  		neg.w	$10(a1)
00018EDE 5429 0025                  		addq.b	#2,$25(a1)
00018EE2                            
00018EE2                            loc_187CA:
00018EE2 5428 0025                  		addq.b	#2,$25(a0)
00018EE6 4E75                       		rts	
00018EE8                            
00018EE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018EE8                            
00018EE8                            
00018EE8                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018EE8 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00018EEE 6600                       		bne.s	locret_187EE
00018EF0 3368 0008 0008             		move.w	8(a0),8(a1)
00018EF6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018EFC 12BC 0074                  		move.b	#$74,(a1)
00018F00 337C 0067 0028             		move.w	#$67,$28(a1)
00018F06                            
00018F06                            locret_187EE:
00018F06 4E75                       		rts	
00018F08                            ; End of function Obj74_Duplicate2
00018F08                            
00018F08                            ; ===========================================================================
00018F08                            
00018F08                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018F08 6100 C5EA                  		bsr.w	ObjHitFloor
00018F0C 4A41                       		tst.w	d1
00018F0E 6A00                       		bpl.s	loc_18826
00018F10 3028 0008                  		move.w	8(a0),d0
00018F14 0C40 1940                  		cmpi.w	#$1940,d0
00018F18 6E00                       		bgt.s	loc_1882C
00018F1A 3228 0030                  		move.w	$30(a0),d1
00018F1E B240                       		cmp.w	d0,d1
00018F20 6700                       		beq.s	loc_1881E
00018F22 0240 0010                  		andi.w	#$10,d0
00018F26 0241 0010                  		andi.w	#$10,d1
00018F2A B240                       		cmp.w	d0,d1
00018F2C 6700                       		beq.s	loc_1881E
00018F2E 61B8                       		bsr.s	Obj74_Duplicate2
00018F30 3168 0008 0032             		move.w	8(a0),$32(a0)
00018F36                            
00018F36                            loc_1881E:
00018F36 3168 0008 0030             		move.w	8(a0),$30(a0)
00018F3C 4E75                       		rts	
00018F3E                            ; ===========================================================================
00018F3E                            
00018F3E                            loc_18826:
00018F3E 5428 0025                  		addq.b	#2,$25(a0)
00018F42 4E75                       		rts	
00018F44                            ; ===========================================================================
00018F44                            
00018F44                            loc_1882C:
00018F44 5428 0024                  		addq.b	#2,$24(a0)
00018F48 4E75                       		rts	
00018F4A                            ; ===========================================================================
00018F4A                            
00018F4A                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018F4A 08A8 0001 0022             		bclr	#1,$22(a0)
00018F50 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018F56 3028 0008                  		move.w	8(a0),d0
00018F5A 9068 0032                  		sub.w	$32(a0),d0
00018F5E 6A00                       		bpl.s	loc_1884A
00018F60 4440                       		neg.w	d0
00018F62                            
00018F62                            loc_1884A:
00018F62 0C40 0012                  		cmpi.w	#$12,d0
00018F66 6600                       		bne.s	loc_18856
00018F68 08A8 0007 0002             		bclr	#7,2(a0)
00018F6E                            
00018F6E                            loc_18856:
00018F6E 6100 C584                  		bsr.w	ObjHitFloor
00018F72 4A41                       		tst.w	d1
00018F74 6A00                       		bpl.s	locret_1887E
00018F76 5328 0029                  		subq.b	#1,$29(a0)
00018F7A 6700                       		beq.s	Obj74_Delete2
00018F7C 4268 0012                  		clr.w	$12(a0)
00018F80 3168 0032 0008             		move.w	$32(a0),8(a0)
00018F86 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018F8C 08E8 0007 0002             		bset	#7,2(a0)
00018F92 5528 0025                  		subq.b	#2,$25(a0)
00018F96                            
00018F96                            locret_1887E:
00018F96 4E75                       		rts	
00018F98                            ; ===========================================================================
00018F98                            
00018F98                            Obj74_Delete2:
00018F98 4EF9 0000 DC40             		jmp	DeleteObject
00018F9E                            ; ===========================================================================
00018F9E                            
00018F9E                            loc_18886:				; XREF: Obj74_Index
00018F9E 08E8 0007 0002             		bset	#7,2(a0)
00018FA4 5328 0029                  		subq.b	#1,$29(a0)
00018FA8 6600                       		bne.s	Obj74_Animate
00018FAA 117C 0001 001C             		move.b	#1,$1C(a0)
00018FB0 5968 000C                  		subq.w	#4,$C(a0)
00018FB4 4228 0020                  		clr.b	$20(a0)
00018FB8                            
00018FB8                            Obj74_Animate:
00018FB8 43F9 0000 EABE             		lea	(Ani_obj14).l,a1
00018FBE 4EF9 0000 ACCE             		jmp	AnimateSprite
00018FC4                            ; ===========================================================================
00018FC4                            
00018FC4                            Obj74_Delete3:				; XREF: Obj74_Index
00018FC4 4EF9 0000 DC40             		jmp	DeleteObject
00018FCA                            ; ===========================================================================
00018FCA                            
00018FCA                            Obj7A_Delete:
00018FCA 4EF9 0000 DC40             		jmp	DeleteObject
00018FD0                            ; ===========================================================================
00018FD0                            ; ---------------------------------------------------------------------------
00018FD0                            ; Object 7A - Eggman (SLZ)
00018FD0                            ; ---------------------------------------------------------------------------
00018FD0                            
00018FD0                            Obj7A:					; XREF: Obj_Index
00018FD0 7000                       		moveq	#0,d0
00018FD2 1028 0024                  		move.b	$24(a0),d0
00018FD6 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018FDA 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018FDE                            ; ===========================================================================
00018FDE 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018FE0 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018FE2 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018FE4 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018FE6 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018FE8                            
00018FE8 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018FEB 0401 04                    		dc.b 4,	1, 4
00018FEE 0607 04                    		dc.b 6,	7, 4
00018FF1 0800 03                    		dc.b 8,	0, 3
00018FF4                            ; ===========================================================================
00018FF4                            
00018FF4                            Obj7A_Main:				; XREF: Obj7A_Index
00018FF4 317C 2188 0008             		move.w	#$2188,8(a0)
00018FFA 317C 0228 000C             		move.w	#$228,$C(a0)
00019000 3168 0008 0030             		move.w	8(a0),$30(a0)
00019006 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001900C 117C 000F 0020             		move.b	#$F,$20(a0)
00019012 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019018 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
0001901C 2248                       		movea.l	a0,a1
0001901E 7203                       		moveq	#3,d1
00019020 6000                       		bra.s	Obj7A_LoadBoss
00019022                            ; ===========================================================================
00019022                            
00019022                            Obj7A_Loop:
00019022 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00019028 6600                       		bne.s	loc_1895C
0001902A 12BC 007A                  		move.b	#$7A,0(a1)
0001902E 3368 0008 0008             		move.w	8(a0),8(a1)
00019034 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001903A                            
0001903A                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001903A 08A8 0000 0022             		bclr	#0,$22(a0)
00019040 4229 0025                  		clr.b	$25(a1)
00019044 135A 0024                  		move.b	(a2)+,$24(a1)
00019048 135A 001C                  		move.b	(a2)+,$1C(a1)
0001904C 135A 0018                  		move.b	(a2)+,$18(a1)
00019050 237C 0001 842A 0004        		move.l	#Map_Eggman,4(a1)
00019058 337C 0400 0002             		move.w	#$400,2(a1)
0001905E 137C 0004 0001             		move.b	#4,1(a1)
00019064 137C 0020 0019             		move.b	#$20,$19(a1)
0001906A 2348 0034                  		move.l	a0,$34(a1)
0001906E 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019072                            
00019072                            loc_1895C:
00019072 43F8 D040                  		lea	($FFFFD040).w,a1
00019076 45E8 002A                  		lea	$2A(a0),a2
0001907A 705E                       		moveq	#$5E,d0
0001907C 723E                       		moveq	#$3E,d1
0001907E                            
0001907E                            loc_18968:
0001907E B011                       		cmp.b	(a1),d0
00019080 6600                       		bne.s	loc_18974
00019082 4A29 0028                  		tst.b	$28(a1)
00019086 6700                       		beq.s	loc_18974
00019088 34C9                       		move.w	a1,(a2)+
0001908A                            
0001908A                            loc_18974:
0001908A D2FC 0040                  		adda.w	#$40,a1
0001908E 51C9 FFEE                  		dbf	d1,loc_18968
00019092                            
00019092                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019092 7000                       		moveq	#0,d0
00019094 1028 0025                  		move.b	$25(a0),d0
00019098 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
0001909C 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000190A0 43F9 0001 83DA             		lea	(Ani_Eggman).l,a1
000190A6 4EB9 0000 ACCE             		jsr	AnimateSprite
000190AC 7003                       		moveq	#3,d0
000190AE C028 0022                  		and.b	$22(a0),d0
000190B2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000190B8 8128 0001                  		or.b	d0,1(a0)
000190BC 4EF9 0000 DC04             		jmp	DisplaySprite
000190C2                            ; ===========================================================================
000190C2 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000190C4 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000190C6 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000190C8 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000190CA 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000190CC 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000190CE                            ; ===========================================================================
000190CE                            
000190CE                            loc_189B8:				; XREF: Obj7A_ShipIndex
000190CE 317C FF00 0010             		move.w	#-$100,$10(a0)
000190D4 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000190DA 6400                       		bcc.s	loc_189CA
000190DC 5428 0025                  		addq.b	#2,$25(a0)
000190E0                            
000190E0                            loc_189CA:
000190E0 6100 EEB6                  		bsr.w	BossMove
000190E4 1028 003F                  		move.b	$3F(a0),d0
000190E8 5428 003F                  		addq.b	#2,$3F(a0)
000190EC 4EB9 0000 2C6A             		jsr	(CalcSine).l
000190F2 EC40                       		asr.w	#6,d0
000190F4 D068 0038                  		add.w	$38(a0),d0
000190F8 3140 000C                  		move.w	d0,$C(a0)
000190FC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019102 6000                       		bra.s	loc_189FE
00019104                            ; ===========================================================================
00019104                            
00019104                            loc_189EE:
00019104 6100 EE92                  		bsr.w	BossMove
00019108 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001910E 3168 0030 0008             		move.w	$30(a0),8(a0)
00019114                            
00019114                            loc_189FE:
00019114 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001911A 6400                       		bcc.s	locret_18A44
0001911C 4A28 0022                  		tst.b	$22(a0)
00019120 6B00                       		bmi.s	loc_18A46
00019122 4A28 0020                  		tst.b	$20(a0)
00019126 6600                       		bne.s	locret_18A44
00019128 4A28 003E                  		tst.b	$3E(a0)
0001912C 6600                       		bne.s	loc_18A28
0001912E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019134 303C 00AC                  		move.w	#$AC,d0
00019138 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001913E                            
0001913E                            loc_18A28:
0001913E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019142 7000                       		moveq	#0,d0
00019144 4A51                       		tst.w	(a1)
00019146 6600                       		bne.s	loc_18A36
00019148 303C 0EEE                  		move.w	#$EEE,d0
0001914C                            
0001914C                            loc_18A36:
0001914C 3280                       		move.w	d0,(a1)
0001914E 5328 003E                  		subq.b	#1,$3E(a0)
00019152 6600                       		bne.s	locret_18A44
00019154 117C 000F 0020             		move.b	#$F,$20(a0)
0001915A                            
0001915A                            locret_18A44:
0001915A 4E75                       		rts	
0001915C                            ; ===========================================================================
0001915C                            
0001915C                            loc_18A46:
0001915C 7064                       		moveq	#100,d0
0001915E 6100 0000                  		bsr.w	AddPoints
00019162 117C 0006 0025             		move.b	#6,$25(a0)
00019168 117C 0078 003C             		move.b	#$78,$3C(a0)
0001916E 4268 0010                  		clr.w	$10(a0)
00019172 4E75                       		rts	
00019174                            ; ===========================================================================
00019174                            
00019174                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019174 3028 0030                  		move.w	$30(a0),d0
00019178 317C 0200 0010             		move.w	#$200,$10(a0)
0001917E 0828 0000 0022             		btst	#0,$22(a0)
00019184 6600                       		bne.s	loc_18A7C
00019186 4468 0010                  		neg.w	$10(a0)
0001918A 0C40 2008                  		cmpi.w	#$2008,d0
0001918E 6E00                       		bgt.s	loc_18A88
00019190 6000                       		bra.s	loc_18A82
00019192                            ; ===========================================================================
00019192                            
00019192                            loc_18A7C:
00019192 0C40 2138                  		cmpi.w	#$2138,d0
00019196 6D00                       		blt.s	loc_18A88
00019198                            
00019198                            loc_18A82:
00019198 0868 0000 0022             		bchg	#0,$22(a0)
0001919E                            
0001919E                            loc_18A88:
0001919E 3028 0008                  		move.w	8(a0),d0
000191A2 72FF                       		moveq	#-1,d1
000191A4 7402                       		moveq	#2,d2
000191A6 45E8 002A                  		lea	$2A(a0),a2
000191AA 7828                       		moveq	#$28,d4
000191AC 4A68 0010                  		tst.w	$10(a0)
000191B0 6A00                       		bpl.s	loc_18A9E
000191B2 4444                       		neg.w	d4
000191B4                            
000191B4                            loc_18A9E:
000191B4 321A                       		move.w	(a2)+,d1
000191B6 2641                       		movea.l	d1,a3
000191B8 082B 0003 0022             		btst	#3,$22(a3)
000191BE 6600                       		bne.s	loc_18AB4
000191C0 362B 0008                  		move.w	8(a3),d3
000191C4 D644                       		add.w	d4,d3
000191C6 9640                       		sub.w	d0,d3
000191C8 6700                       		beq.s	loc_18AC0
000191CA                            
000191CA                            loc_18AB4:
000191CA 51CA FFE8                  		dbf	d2,loc_18A9E
000191CE                            
000191CE 1142 0028                  		move.b	d2,$28(a0)
000191D2 6000 FF0C                  		bra.w	loc_189CA
000191D6                            ; ===========================================================================
000191D6                            
000191D6                            loc_18AC0:
000191D6 1142 0028                  		move.b	d2,$28(a0)
000191DA 5428 0025                  		addq.b	#2,$25(a0)
000191DE 117C 0028 003C             		move.b	#$28,$3C(a0)
000191E4 6000 FEFA                  		bra.w	loc_189CA
000191E8                            ; ===========================================================================
000191E8                            
000191E8                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000191E8 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000191EE 6600                       		bne.s	loc_18B36
000191F0 70FF                       		moveq	#-1,d0
000191F2 1028 0028                  		move.b	$28(a0),d0
000191F6 4880                       		ext.w	d0
000191F8 6B00                       		bmi.s	loc_18B40
000191FA 5540                       		subq.w	#2,d0
000191FC 4440                       		neg.w	d0
000191FE D040                       		add.w	d0,d0
00019200 43E8 002A                  		lea	$2A(a0),a1
00019204 3031 0000                  		move.w	(a1,d0.w),d0
00019208 2440                       		movea.l	d0,a2
0001920A 43F8 D040                  		lea	($FFFFD040).w,a1
0001920E 723E                       		moveq	#$3E,d1
00019210                            
00019210                            loc_18AFA:
00019210 B0A9 003C                  		cmp.l	$3C(a1),d0
00019214 6700                       		beq.s	loc_18B40
00019216 D2FC 0040                  		adda.w	#$40,a1
0001921A 51C9 FFF4                  		dbf	d1,loc_18AFA
0001921E                            
0001921E 2F08                       		move.l	a0,-(sp)
00019220 41D2                       		lea	(a2),a0
00019222 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00019228 205F                       		movea.l	(sp)+,a0
0001922A 6600                       		bne.s	loc_18B40
0001922C 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019230 3368 0008 0008             		move.w	8(a0),8(a1)
00019236 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001923C 0669 0020 000C             		addi.w	#$20,$C(a1)
00019242 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019248 234A 003C                  		move.l	a2,$3C(a1)
0001924C                            
0001924C                            loc_18B36:
0001924C 5328 003C                  		subq.b	#1,$3C(a0)
00019250 6700                       		beq.s	loc_18B40
00019252 6000 FEC0                  		bra.w	loc_189FE
00019256                            ; ===========================================================================
00019256                            
00019256                            loc_18B40:
00019256 5528 0025                  		subq.b	#2,$25(a0)
0001925A 6000 FE84                  		bra.w	loc_189CA
0001925E                            ; ===========================================================================
0001925E                            
0001925E                            loc_18B48:				; XREF: Obj7A_ShipIndex
0001925E 5328 003C                  		subq.b	#1,$3C(a0)
00019262 6B00                       		bmi.s	loc_18B52
00019264 6000 ECF0                  		bra.w	BossDefeated
00019268                            ; ===========================================================================
00019268                            
00019268                            loc_18B52:
00019268 5428 0025                  		addq.b	#2,$25(a0)
0001926C 4268 0012                  		clr.w	$12(a0)
00019270 08E8 0000 0022             		bset	#0,$22(a0)
00019276 08A8 0007 0022             		bclr	#7,$22(a0)
0001927C 4268 0010                  		clr.w	$10(a0)
00019280 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019286 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001928A 6600                       		bne.s	loc_18B7C
0001928C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019292                            
00019292                            loc_18B7C:
00019292 6000 FE80                  		bra.w	loc_189FE
00019296                            ; ===========================================================================
00019296                            
00019296                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019296 5228 003C                  		addq.b	#1,$3C(a0)
0001929A 6700                       		beq.s	loc_18B90
0001929C 6A00                       		bpl.s	loc_18B96
0001929E 0668 0018 0012             		addi.w	#$18,$12(a0)
000192A4 6000                       		bra.s	loc_18BC2
000192A6                            ; ===========================================================================
000192A6                            
000192A6                            loc_18B90:
000192A6 4268 0012                  		clr.w	$12(a0)
000192AA 6000                       		bra.s	loc_18BC2
000192AC                            ; ===========================================================================
000192AC                            
000192AC                            loc_18B96:
000192AC 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000192B2 6500                       		bcs.s	loc_18BAE
000192B4 6700                       		beq.s	loc_18BB4
000192B6 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000192BC 6500                       		bcs.s	loc_18BC2
000192BE 5428 0025                  		addq.b	#2,$25(a0)
000192C2 6000                       		bra.s	loc_18BC2
000192C4                            ; ===========================================================================
000192C4                            
000192C4                            loc_18BAE:
000192C4 5168 0012                  		subq.w	#8,$12(a0)
000192C8 6000                       		bra.s	loc_18BC2
000192CA                            ; ===========================================================================
000192CA                            
000192CA                            loc_18BB4:
000192CA 4268 0012                  		clr.w	$12(a0)
000192CE 303C 0084                  		move.w	#$84,d0
000192D2 4EB9 0000 15C0             		jsr	(PlaySound).l	; play SLZ music
000192D8                            
000192D8                            loc_18BC2:
000192D8 6000 FE2A                  		bra.w	loc_189EE
000192DC                            ; ===========================================================================
000192DC                            
000192DC                            loc_18BC6:				; XREF: Obj7A_ShipIndex
000192DC 317C 0400 0010             		move.w	#$400,$10(a0)
000192E2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000192E8 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
000192EE 6400                       		bcc.s	loc_18BE0
000192F0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000192F4 6000                       		bra.s	loc_18BE8
000192F6                            ; ===========================================================================
000192F6                            
000192F6                            loc_18BE0:
000192F6 4A28 0001                  		tst.b	1(a0)
000192FA 6A00 FCCE                  		bpl.w	Obj7A_Delete
000192FE                            
000192FE                            loc_18BE8:
000192FE 6100 EC98                  		bsr.w	BossMove
00019302 6000 FDDC                  		bra.w	loc_189CA
00019306                            ; ===========================================================================
00019306                            
00019306                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019306 7000                       		moveq	#0,d0
00019308 7201                       		moveq	#1,d1
0001930A 2268 0034                  		movea.l	$34(a0),a1
0001930E 1029 0025                  		move.b	$25(a1),d0
00019312 0C00 0006                  		cmpi.b	#6,d0
00019316 6B00                       		bmi.s	loc_18C06
00019318 720A                       		moveq	#$A,d1
0001931A 6000                       		bra.s	loc_18C1A
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            loc_18C06:
0001931C 4A29 0020                  		tst.b	$20(a1)
00019320 6600                       		bne.s	loc_18C10
00019322 7205                       		moveq	#5,d1
00019324 6000                       		bra.s	loc_18C1A
00019326                            ; ===========================================================================
00019326                            
00019326                            loc_18C10:
00019326 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001932C 6500                       		bcs.s	loc_18C1A
0001932E 7204                       		moveq	#4,d1
00019330                            
00019330                            loc_18C1A:
00019330 1141 001C                  		move.b	d1,$1C(a0)
00019334 0C00 000A                  		cmpi.b	#$A,d0
00019338 6600                       		bne.s	loc_18C32
0001933A 117C 0006 001C             		move.b	#6,$1C(a0)
00019340 4A28 0001                  		tst.b	1(a0)
00019344 6A00 FC84                  		bpl.w	Obj7A_Delete
00019348                            
00019348                            loc_18C32:
00019348 6000                       		bra.s	loc_18C6C
0001934A                            ; ===========================================================================
0001934A                            
0001934A                            Obj7A_FlameMain:			; XREF: Obj7A_Index
0001934A 117C 0008 001C             		move.b	#8,$1C(a0)
00019350 2268 0034                  		movea.l	$34(a0),a1
00019354 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001935A 6600                       		bne.s	loc_18C56
0001935C 4A28 0001                  		tst.b	1(a0)
00019360 6A00 FC68                  		bpl.w	Obj7A_Delete
00019364 117C 000B 001C             		move.b	#$B,$1C(a0)
0001936A 6000                       		bra.s	loc_18C6C
0001936C                            ; ===========================================================================
0001936C                            
0001936C                            loc_18C56:
0001936C 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019372 6E00                       		bgt.s	loc_18C6C
00019374 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001937A 6D00                       		blt.s	loc_18C6C
0001937C 117C 0007 001C             		move.b	#7,$1C(a0)
00019382                            
00019382                            loc_18C6C:
00019382 43F9 0001 83DA             		lea	(Ani_Eggman).l,a1
00019388 4EB9 0000 ACCE             		jsr	AnimateSprite
0001938E                            
0001938E                            loc_18C78:
0001938E 2268 0034                  		movea.l	$34(a0),a1
00019392 3169 0008 0008             		move.w	8(a1),8(a0)
00019398 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001939E 1169 0022 0022             		move.b	$22(a1),$22(a0)
000193A4 7003                       		moveq	#3,d0
000193A6 C028 0022                  		and.b	$22(a0),d0
000193AA 0228 00FC 0001             		andi.b	#-4,1(a0)
000193B0 8128 0001                  		or.b	d0,1(a0)
000193B4 4EF9 0000 DC04             		jmp	DisplaySprite
000193BA                            ; ===========================================================================
000193BA                            
000193BA                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000193BA 2268 0034                  		movea.l	$34(a0),a1
000193BE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000193C4 6600                       		bne.s	loc_18CB8
000193C6 4A28 0001                  		tst.b	1(a0)
000193CA 6A00 FBFE                  		bpl.w	Obj7A_Delete
000193CE                            
000193CE                            loc_18CB8:
000193CE 217C 0001 84F2 0004        		move.l	#Map_BossItems,4(a0)
000193D6 317C 246C 0002             		move.w	#$246C,2(a0)
000193DC 117C 0003 001A             		move.b	#3,$1A(a0)
000193E2 60AA                       		bra.s	loc_18C78
000193E4                            ; ===========================================================================
000193E4                            ; ---------------------------------------------------------------------------
000193E4                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
000193E4                            ; ---------------------------------------------------------------------------
000193E4                            
000193E4                            Obj7B:					; XREF: Obj_Index
000193E4 7000                       		moveq	#0,d0
000193E6 1028 0024                  		move.b	$24(a0),d0
000193EA 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
000193EE 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
000193F2 3028 0030                  		move.w	$30(a0),d0
000193F6 0240 FF80                  		andi.w	#$FF80,d0
000193FA 3238 F700                  		move.w	($FFFFF700).w,d1
000193FE 0441 0080                  		subi.w	#$80,d1
00019402 0241 FF80                  		andi.w	#$FF80,d1
00019406 9041                       		sub.w	d1,d0
00019408 6B00 FBC0                  		bmi.w	Obj7A_Delete
0001940C 0C40 0280                  		cmpi.w	#$280,d0
00019410 6200 FBB8                  		bhi.w	Obj7A_Delete
00019414 4EF9 0000 DC04             		jmp	DisplaySprite
0001941A                            ; ===========================================================================
0001941A 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
0001941C 0000                       		dc.w Obj7B_Fall-Obj7B_Index
0001941E 0000                       		dc.w loc_18DC6-Obj7B_Index
00019420 0000                       		dc.w loc_18EAA-Obj7B_Index
00019422 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019424 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019426                            ; ===========================================================================
00019426                            
00019426                            Obj7B_Main:				; XREF: Obj7B_Index
00019426 217C 0001 1FCA 0004        		move.l	#Map_obj5Ea,4(a0)
0001942E 317C 0518 0002             		move.w	#$518,2(a0)
00019434 117C 0001 001A             		move.b	#1,$1A(a0)
0001943A 0028 0004 0001             		ori.b	#4,1(a0)
00019440 117C 0004 0018             		move.b	#4,$18(a0)
00019446 117C 008B 0020             		move.b	#$8B,$20(a0)
0001944C 117C 000C 0019             		move.b	#$C,$19(a0)
00019452 2268 003C                  		movea.l	$3C(a0),a1
00019456 3169 0008 0030             		move.w	8(a1),$30(a0)
0001945C 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019462 08E8 0000 0022             		bset	#0,$22(a0)
00019468 3028 0008                  		move.w	8(a0),d0
0001946C B069 0008                  		cmp.w	8(a1),d0
00019470 6E00                       		bgt.s	loc_18D68
00019472 08A8 0000 0022             		bclr	#0,$22(a0)
00019478 117C 0002 003A             		move.b	#2,$3A(a0)
0001947E                            
0001947E                            loc_18D68:
0001947E 5428 0024                  		addq.b	#2,$24(a0)
00019482                            
00019482                            Obj7B_Fall:				; XREF: Obj7B_Index
00019482 4EB9 0000 DBB2             		jsr	ObjectFall
00019488 2268 003C                  		movea.l	$3C(a0),a1
0001948C 45F9 0000 0000             		lea	(word_19018).l,a2
00019492 7000                       		moveq	#0,d0
00019494 1029 001A                  		move.b	$1A(a1),d0
00019498 3228 0008                  		move.w	8(a0),d1
0001949C 9268 0030                  		sub.w	$30(a0),d1
000194A0 6400                       		bcc.s	loc_18D8E
000194A2 5440                       		addq.w	#2,d0
000194A4                            
000194A4                            loc_18D8E:
000194A4 D040                       		add.w	d0,d0
000194A6 3228 0034                  		move.w	$34(a0),d1
000194AA D272 0000                  		add.w	(a2,d0.w),d1
000194AE B268 000C                  		cmp.w	$C(a0),d1
000194B2 6E00                       		bgt.s	locret_18DC4
000194B4 2268 003C                  		movea.l	$3C(a0),a1
000194B8 7202                       		moveq	#2,d1
000194BA 0828 0000 0022             		btst	#0,$22(a0)
000194C0 6700                       		beq.s	loc_18DAE
000194C2 7200                       		moveq	#0,d1
000194C4                            
000194C4                            loc_18DAE:
000194C4 317C 00F0 0028             		move.w	#$F0,$28(a0)
000194CA 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000194D0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000194D6 6000 0000                  		bra.w	loc_18FA2
000194DA                            ; ===========================================================================
000194DA                            
000194DA                            locret_18DC4:
000194DA 4E75                       		rts	
000194DC                            ; ===========================================================================
000194DC                            
000194DC                            loc_18DC6:				; XREF: Obj7B_Index
000194DC 2268 003C                  		movea.l	$3C(a0),a1
000194E0 7000                       		moveq	#0,d0
000194E2 1028 003A                  		move.b	$3A(a0),d0
000194E6 9029 003A                  		sub.b	$3A(a1),d0
000194EA 6700                       		beq.s	loc_18E2A
000194EC 6400                       		bcc.s	loc_18DDA
000194EE 4400                       		neg.b	d0
000194F0                            
000194F0                            loc_18DDA:
000194F0 323C F7E8                  		move.w	#-$818,d1
000194F4 343C FEEC                  		move.w	#-$114,d2
000194F8 0C00 0001                  		cmpi.b	#1,d0
000194FC 6700                       		beq.s	loc_18E00
000194FE 323C F6A0                  		move.w	#-$960,d1
00019502 343C FF0C                  		move.w	#-$F4,d2
00019506 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001950C 6D00                       		blt.s	loc_18E00
0001950E 323C F5E0                  		move.w	#-$A20,d1
00019512 343C FF80                  		move.w	#-$80,d2
00019516                            
00019516                            loc_18E00:
00019516 3141 0012                  		move.w	d1,$12(a0)
0001951A 3142 0010                  		move.w	d2,$10(a0)
0001951E 3028 0008                  		move.w	8(a0),d0
00019522 9068 0030                  		sub.w	$30(a0),d0
00019526 6400                       		bcc.s	loc_18E16
00019528 4468 0010                  		neg.w	$10(a0)
0001952C                            
0001952C                            loc_18E16:
0001952C 117C 0001 001A             		move.b	#1,$1A(a0)
00019532 317C 0020 0028             		move.w	#$20,$28(a0)
00019538 5428 0024                  		addq.b	#2,$24(a0)
0001953C 6000 0000                  		bra.w	loc_18EAA
00019540                            ; ===========================================================================
00019540                            
00019540                            loc_18E2A:				; XREF: loc_18DC6
00019540 45F9 0000 0000             		lea	(word_19018).l,a2
00019546 7000                       		moveq	#0,d0
00019548 1029 001A                  		move.b	$1A(a1),d0
0001954C 343C 0028                  		move.w	#$28,d2
00019550 3228 0008                  		move.w	8(a0),d1
00019554 9268 0030                  		sub.w	$30(a0),d1
00019558 6400                       		bcc.s	loc_18E48
0001955A 4442                       		neg.w	d2
0001955C 5440                       		addq.w	#2,d0
0001955E                            
0001955E                            loc_18E48:
0001955E D040                       		add.w	d0,d0
00019560 3228 0034                  		move.w	$34(a0),d1
00019564 D272 0000                  		add.w	(a2,d0.w),d1
00019568 3141 000C                  		move.w	d1,$C(a0)
0001956C D468 0030                  		add.w	$30(a0),d2
00019570 3142 0008                  		move.w	d2,8(a0)
00019574 4268 000E                  		clr.w	$E(a0)
00019578 4268 000A                  		clr.w	$A(a0)
0001957C 5368 0028                  		subq.w	#1,$28(a0)
00019580 6600                       		bne.s	loc_18E7A
00019582 317C 0020 0028             		move.w	#$20,$28(a0)
00019588 117C 0008 0024             		move.b	#8,$24(a0)
0001958E 4E75                       		rts	
00019590                            ; ===========================================================================
00019590                            
00019590                            loc_18E7A:
00019590 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00019596 6600                       		bne.s	loc_18E88
00019598 117C 0005 001F             		move.b	#5,$1F(a0)
0001959E                            
0001959E                            loc_18E88:
0001959E 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000195A4 6600                       		bne.s	loc_18E96
000195A6 117C 0002 001F             		move.b	#2,$1F(a0)
000195AC                            
000195AC                            loc_18E96:
000195AC 5328 001E                  		subq.b	#1,$1E(a0)
000195B0 6E00                       		bgt.s	locret_18EA8
000195B2 0868 0000 001A             		bchg	#0,$1A(a0)
000195B8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000195BE                            
000195BE                            locret_18EA8:
000195BE 4E75                       		rts	
000195C0                            ; ===========================================================================
000195C0                            
000195C0                            loc_18EAA:				; XREF: Obj7B_Index
000195C0 43F8 D040                  		lea	($FFFFD040).w,a1
000195C4 707A                       		moveq	#$7A,d0
000195C6 7240                       		moveq	#$40,d1
000195C8 743E                       		moveq	#$3E,d2
000195CA                            
000195CA                            loc_18EB4:
000195CA B011                       		cmp.b	(a1),d0
000195CC 6700                       		beq.s	loc_18EC0
000195CE D2C1                       		adda.w	d1,a1
000195D0 51CA FFF8                  		dbf	d2,loc_18EB4
000195D4                            
000195D4 6000                       		bra.s	loc_18F38
000195D6                            ; ===========================================================================
000195D6                            
000195D6                            loc_18EC0:
000195D6 3029 0008                  		move.w	8(a1),d0
000195DA 3229 000C                  		move.w	$C(a1),d1
000195DE 3428 0008                  		move.w	8(a0),d2
000195E2 3628 000C                  		move.w	$C(a0),d3
000195E6 45FA 0000                  		lea	byte_19022(pc),a2
000195EA 47FA 0000                  		lea	byte_19026(pc),a3
000195EE 181A                       		move.b	(a2)+,d4
000195F0 4884                       		ext.w	d4
000195F2 D044                       		add.w	d4,d0
000195F4 181B                       		move.b	(a3)+,d4
000195F6 4884                       		ext.w	d4
000195F8 D444                       		add.w	d4,d2
000195FA B440                       		cmp.w	d0,d2
000195FC 6500                       		bcs.s	loc_18F38
000195FE 181A                       		move.b	(a2)+,d4
00019600 4884                       		ext.w	d4
00019602 D044                       		add.w	d4,d0
00019604 181B                       		move.b	(a3)+,d4
00019606 4884                       		ext.w	d4
00019608 D444                       		add.w	d4,d2
0001960A B042                       		cmp.w	d2,d0
0001960C 6500                       		bcs.s	loc_18F38
0001960E 181A                       		move.b	(a2)+,d4
00019610 4884                       		ext.w	d4
00019612 D244                       		add.w	d4,d1
00019614 181B                       		move.b	(a3)+,d4
00019616 4884                       		ext.w	d4
00019618 D644                       		add.w	d4,d3
0001961A B641                       		cmp.w	d1,d3
0001961C 6500                       		bcs.s	loc_18F38
0001961E 181A                       		move.b	(a2)+,d4
00019620 4884                       		ext.w	d4
00019622 D244                       		add.w	d4,d1
00019624 181B                       		move.b	(a3)+,d4
00019626 4884                       		ext.w	d4
00019628 D644                       		add.w	d4,d3
0001962A B243                       		cmp.w	d3,d1
0001962C 6500                       		bcs.s	loc_18F38
0001962E 5428 0024                  		addq.b	#2,$24(a0)
00019632 4268 0028                  		clr.w	$28(a0)
00019636 4229 0020                  		clr.b	$20(a1)
0001963A 5329 0021                  		subq.b	#1,$21(a1)
0001963E 6600                       		bne.s	loc_18F38
00019640 08E9 0007 0022             		bset	#7,$22(a1)
00019646 4268 0010                  		clr.w	$10(a0)
0001964A 4268 0012                  		clr.w	$12(a0)
0001964E                            
0001964E                            loc_18F38:
0001964E 4A68 0012                  		tst.w	$12(a0)
00019652 6A00                       		bpl.s	loc_18F5C
00019654 4EB9 0000 DBB2             		jsr	ObjectFall
0001965A 3028 0034                  		move.w	$34(a0),d0
0001965E 0440 002F                  		subi.w	#$2F,d0
00019662 B068 000C                  		cmp.w	$C(a0),d0
00019666 6E00                       		bgt.s	loc_18F58
00019668 4EB9 0000 DBB2             		jsr	ObjectFall
0001966E                            
0001966E                            loc_18F58:
0001966E 6000 FF20                  		bra.w	loc_18E7A
00019672                            ; ===========================================================================
00019672                            
00019672                            loc_18F5C:
00019672 4EB9 0000 DBB2             		jsr	ObjectFall
00019678 2268 003C                  		movea.l	$3C(a0),a1
0001967C 45F9 0000 0000             		lea	(word_19018).l,a2
00019682 7000                       		moveq	#0,d0
00019684 1029 001A                  		move.b	$1A(a1),d0
00019688 3228 0008                  		move.w	8(a0),d1
0001968C 9268 0030                  		sub.w	$30(a0),d1
00019690 6400                       		bcc.s	loc_18F7E
00019692 5440                       		addq.w	#2,d0
00019694                            
00019694                            loc_18F7E:
00019694 D040                       		add.w	d0,d0
00019696 3228 0034                  		move.w	$34(a0),d1
0001969A D272 0000                  		add.w	(a2,d0.w),d1
0001969E B268 000C                  		cmp.w	$C(a0),d1
000196A2 6ECA                       		bgt.s	loc_18F58
000196A4 2268 003C                  		movea.l	$3C(a0),a1
000196A8 7202                       		moveq	#2,d1
000196AA 4A68 0010                  		tst.w	$10(a0)
000196AE 6B00                       		bmi.s	loc_18F9C
000196B0 7200                       		moveq	#0,d1
000196B2                            
000196B2                            loc_18F9C:
000196B2 317C 0000 0028             		move.w	#0,$28(a0)
000196B8                            
000196B8                            loc_18FA2:
000196B8 1341 003A                  		move.b	d1,$3A(a1)
000196BC 1141 003A                  		move.b	d1,$3A(a0)
000196C0 B229 001A                  		cmp.b	$1A(a1),d1
000196C4 6700                       		beq.s	loc_19008
000196C6 08A9 0003 0022             		bclr	#3,$22(a1)
000196CC 6700                       		beq.s	loc_19008
000196CE 4229 0025                  		clr.b	$25(a1)
000196D2 137C 0002 0024             		move.b	#2,$24(a1)
000196D8 45F8 D000                  		lea	($FFFFD000).w,a2
000196DC 3568 0012 0012             		move.w	$12(a0),$12(a2)
000196E2 446A 0012                  		neg.w	$12(a2)
000196E6 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
000196EC 6600                       		bne.s	loc_18FDC
000196EE E0EA 0012                  		asr	$12(a2)
000196F2                            
000196F2                            loc_18FDC:
000196F2 08EA 0001 0022             		bset	#1,$22(a2)
000196F8 08AA 0003 0022             		bclr	#3,$22(a2)
000196FE 422A 003C                  		clr.b	$3C(a2)
00019702 2F08                       		move.l	a0,-(sp)
00019704 41D2                       		lea	(a2),a0
00019706 4EBA A336                  		jsr	Obj01_ChkRoll
0001970A 205F                       		movea.l	(sp)+,a0
0001970C 157C 0002 0024             		move.b	#2,$24(a2)
00019712 303C 00CC                  		move.w	#$CC,d0
00019716 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001971C                            
0001971C                            loc_19008:
0001971C 4268 0010                  		clr.w	$10(a0)
00019720 4268 0012                  		clr.w	$12(a0)
00019724 5428 0024                  		addq.b	#2,$24(a0)
00019728 6000 FE66                  		bra.w	loc_18E7A
0001972C                            ; ===========================================================================
0001972C FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019736                            		even
00019736 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001973A                            		even
0001973A 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001973E                            		even
0001973E                            ; ===========================================================================
0001973E                            
0001973E                            Obj7B_Explode:				; XREF: Obj7B_Index
0001973E 10BC 003F                  		move.b	#$3F,(a0)
00019742 4228 0024                  		clr.b	$24(a0)
00019746 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001974C 6700                       		beq.s	Obj7B_MakeFrag
0001974E 4E75                       		rts	
00019750                            ; ===========================================================================
00019750                            
00019750                            Obj7B_MakeFrag:
00019750 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019756 7203                       		moveq	#3,d1
00019758 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001975C                            
0001975C                            Obj7B_Loop:
0001975C 4EB9 0000 E08A             		jsr	SingleObjLoad
00019762 6600                       		bne.s	loc_1909A
00019764 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019768 137C 000A 0024             		move.b	#$A,$24(a1)
0001976E 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00019776 137C 0003 0018             		move.b	#3,$18(a1)
0001977C 337C 0518 0002             		move.w	#$518,2(a1)
00019782 3368 0008 0008             		move.w	8(a0),8(a1)
00019788 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001978E 335A 0010                  		move.w	(a2)+,$10(a1)
00019792 335A 0012                  		move.w	(a2)+,$12(a1)
00019796 137C 0098 0020             		move.b	#$98,$20(a1)
0001979C 0029 0004 0001             		ori.b	#4,1(a1)
000197A2 08E9 0007 0001             		bset	#7,1(a1)
000197A8 137C 000C 0019             		move.b	#$C,$19(a1)
000197AE                            
000197AE                            loc_1909A:
000197AE 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000197B2                            
000197B2 4E75                       		rts	
000197B4                            ; ===========================================================================
000197B4 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000197B8 FF60 FDC0                  		dc.w $FF60, $FDC0
000197BC 0100 FCC0                  		dc.w $100, $FCC0
000197C0 00A0 FDC0                  		dc.w $A0, $FDC0
000197C4                            ; ===========================================================================
000197C4                            
000197C4                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000197C4 4EB9 0000 DBDE             		jsr	SpeedToPos
000197CA 3168 0008 0030             		move.w	8(a0),$30(a0)
000197D0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000197D6 0668 0018 0012             		addi.w	#$18,$12(a0)
000197DC 7004                       		moveq	#4,d0
000197DE C078 FE0E                  		and.w	($FFFFFE0E).w,d0
000197E2 E448                       		lsr.w	#2,d0
000197E4 1140 001A                  		move.b	d0,$1A(a0)
000197E8 4A28 0001                  		tst.b	1(a0)
000197EC 6A00 F7DC                  		bpl.w	Obj7A_Delete
000197F0 4E75                       		rts	
000197F2                            ; ===========================================================================
000197F2                            ; ---------------------------------------------------------------------------
000197F2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000197F2                            ; ---------------------------------------------------------------------------
000197F2                            Map_obj7B:
000197F2                            	include "_maps\obj7B.asm"
000197F2                            ; ---------------------------------------------------------------------------
000197F2                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
000197F2                            ; ---------------------------------------------------------------------------
000197F2 0000                       		dc.w byte_190E2-Map_obj7B
000197F4 0000                       		dc.w byte_190E8-Map_obj7B
000197F6 01                         byte_190E2:	dc.b 1
000197F7 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000197FC 01                         byte_190E8:	dc.b 1
000197FD FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019802                            		even
00019802                            		even
00019802                            
00019802                            ; ===========================================================================
00019802                            ; ---------------------------------------------------------------------------
00019802                            ; Object 75 - Eggman (SYZ)
00019802                            ; ---------------------------------------------------------------------------
00019802                            
00019802                            Obj75:					; XREF: Obj_Index
00019802 7000                       		moveq	#0,d0
00019804 1028 0024                  		move.b	$24(a0),d0
00019808 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001980C 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019810                            ; ===========================================================================
00019810 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019812 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019814 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019816 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019818 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001981A                            
0001981A 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001981D 0401 05                    		dc.b 4,	1, 5
00019820 0607 05                    		dc.b 6,	7, 5
00019823 0800 05                    		dc.b 8,	0, 5
00019826                            ; ===========================================================================
00019826                            
00019826                            Obj75_Main:				; XREF: Obj75_Index
00019826 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001982C 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019832 3168 0008 0030             		move.w	8(a0),$30(a0)
00019838 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001983E 117C 000F 0020             		move.b	#$F,$20(a0)
00019844 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001984A 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001984E 2248                       		movea.l	a0,a1
00019850 7203                       		moveq	#3,d1
00019852 6000                       		bra.s	Obj75_LoadBoss
00019854                            ; ===========================================================================
00019854                            
00019854                            Obj75_Loop:
00019854 4EB9 0000 E0A0             		jsr	SingleObjLoad2
0001985A 6600                       		bne.s	Obj75_ShipMain
0001985C 12BC 0075                  		move.b	#$75,(a1)
00019860 3368 0008 0008             		move.w	8(a0),8(a1)
00019866 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001986C                            
0001986C                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001986C 08A8 0000 0022             		bclr	#0,$22(a0)
00019872 4229 0025                  		clr.b	$25(a1)
00019876 135A 0024                  		move.b	(a2)+,$24(a1)
0001987A 135A 001C                  		move.b	(a2)+,$1C(a1)
0001987E 135A 0018                  		move.b	(a2)+,$18(a1)
00019882 237C 0001 842A 0004        		move.l	#Map_Eggman,4(a1)
0001988A 337C 0400 0002             		move.w	#$400,2(a1)
00019890 137C 0004 0001             		move.b	#4,1(a1)
00019896 137C 0020 0019             		move.b	#$20,$19(a1)
0001989C 2348 0034                  		move.l	a0,$34(a1)
000198A0 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000198A4                            
000198A4                            Obj75_ShipMain:				; XREF: Obj75_Index
000198A4 7000                       		moveq	#0,d0
000198A6 1028 0025                  		move.b	$25(a0),d0
000198AA 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000198AE 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000198B2 43F9 0001 83DA             		lea	(Ani_Eggman).l,a1
000198B8 4EB9 0000 ACCE             		jsr	AnimateSprite
000198BE 7003                       		moveq	#3,d0
000198C0 C028 0022                  		and.b	$22(a0),d0
000198C4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000198CA 8128 0001                  		or.b	d0,1(a0)
000198CE 4EF9 0000 DC04             		jmp	DisplaySprite
000198D4                            ; ===========================================================================
000198D4 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000198D8 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000198DC 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000198E0                            ; ===========================================================================
000198E0                            
000198E0                            loc_191CC:				; XREF: Obj75_ShipIndex
000198E0 317C FF00 0010             		move.w	#-$100,$10(a0)
000198E6 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000198EC 6400                       		bcc.s	loc_191DE
000198EE 5428 0025                  		addq.b	#2,$25(a0)
000198F2                            
000198F2                            loc_191DE:
000198F2 1028 003F                  		move.b	$3F(a0),d0
000198F6 5428 003F                  		addq.b	#2,$3F(a0)
000198FA 4EB9 0000 2C6A             		jsr	(CalcSine).l
00019900 E440                       		asr.w	#2,d0
00019902 3140 0012                  		move.w	d0,$12(a0)
00019906                            
00019906                            loc_191F2:
00019906 6100 E690                  		bsr.w	BossMove
0001990A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019910 3168 0030 0008             		move.w	$30(a0),8(a0)
00019916                            
00019916                            loc_19202:
00019916 3028 0008                  		move.w	8(a0),d0
0001991A 0440 2C00                  		subi.w	#$2C00,d0
0001991E EA48                       		lsr.w	#5,d0
00019920 1140 0034                  		move.b	d0,$34(a0)
00019924 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001992A 6400                       		bcc.s	locret_19256
0001992C 4A28 0022                  		tst.b	$22(a0)
00019930 6B00                       		bmi.s	loc_19258
00019932 4A28 0020                  		tst.b	$20(a0)
00019936 6600                       		bne.s	locret_19256
00019938 4A28 003E                  		tst.b	$3E(a0)
0001993C 6600                       		bne.s	loc_1923A
0001993E 117C 0020 003E             		move.b	#$20,$3E(a0)
00019944 303C 00AC                  		move.w	#$AC,d0
00019948 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001994E                            
0001994E                            loc_1923A:
0001994E 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019952 7000                       		moveq	#0,d0
00019954 4A51                       		tst.w	(a1)
00019956 6600                       		bne.s	loc_19248
00019958 303C 0EEE                  		move.w	#$EEE,d0
0001995C                            
0001995C                            loc_19248:
0001995C 3280                       		move.w	d0,(a1)
0001995E 5328 003E                  		subq.b	#1,$3E(a0)
00019962 6600                       		bne.s	locret_19256
00019964 117C 000F 0020             		move.b	#$F,$20(a0)
0001996A                            
0001996A                            locret_19256:
0001996A 4E75                       		rts	
0001996C                            ; ===========================================================================
0001996C                            
0001996C                            loc_19258:				; XREF: loc_19202
0001996C 7064                       		moveq	#100,d0
0001996E 6100 0000                  		bsr.w	AddPoints
00019972 117C 0006 0025             		move.b	#6,$25(a0)
00019978 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001997E 4268 0010                  		clr.w	$10(a0)
00019982 4E75                       		rts	
00019984                            ; ===========================================================================
00019984                            
00019984                            loc_19270:				; XREF: Obj75_ShipIndex
00019984 3028 0030                  		move.w	$30(a0),d0
00019988 317C 0140 0010             		move.w	#$140,$10(a0)
0001998E 0828 0000 0022             		btst	#0,$22(a0)
00019994 6600                       		bne.s	loc_1928E
00019996 4468 0010                  		neg.w	$10(a0)
0001999A 0C40 2C08                  		cmpi.w	#$2C08,d0
0001999E 6E00                       		bgt.s	loc_1929E
000199A0 6000                       		bra.s	loc_19294
000199A2                            ; ===========================================================================
000199A2                            
000199A2                            loc_1928E:
000199A2 0C40 2D38                  		cmpi.w	#$2D38,d0
000199A6 6D00                       		blt.s	loc_1929E
000199A8                            
000199A8                            loc_19294:
000199A8 0868 0000 0022             		bchg	#0,$22(a0)
000199AE 4228 003D                  		clr.b	$3D(a0)
000199B2                            
000199B2                            loc_1929E:
000199B2 0440 2C10                  		subi.w	#$2C10,d0
000199B6 0240 001F                  		andi.w	#$1F,d0
000199BA 0440 001F                  		subi.w	#$1F,d0
000199BE 6A00                       		bpl.s	loc_192AE
000199C0 4440                       		neg.w	d0
000199C2                            
000199C2                            loc_192AE:
000199C2 5340                       		subq.w	#1,d0
000199C4 6E00                       		bgt.s	loc_192E8
000199C6 4A28 003D                  		tst.b	$3D(a0)
000199CA 6600                       		bne.s	loc_192E8
000199CC 3238 D008                  		move.w	($FFFFD008).w,d1
000199D0 0441 2C00                  		subi.w	#$2C00,d1
000199D4 EA41                       		asr.w	#5,d1
000199D6 B228 0034                  		cmp.b	$34(a0),d1
000199DA 6600                       		bne.s	loc_192E8
000199DC 7000                       		moveq	#0,d0
000199DE 1028 0034                  		move.b	$34(a0),d0
000199E2 EB40                       		asl.w	#5,d0
000199E4 0640 2C10                  		addi.w	#$2C10,d0
000199E8 3140 0030                  		move.w	d0,$30(a0)
000199EC 6100 0000                  		bsr.w	Obj75_FindBlocks
000199F0 5428 0025                  		addq.b	#2,$25(a0)
000199F4 4268 0028                  		clr.w	$28(a0)
000199F8 4268 0010                  		clr.w	$10(a0)
000199FC                            
000199FC                            loc_192E8:
000199FC 6000 FEF4                  		bra.w	loc_191DE
00019A00                            ; ===========================================================================
00019A00                            
00019A00                            loc_192EC:				; XREF: Obj75_ShipIndex
00019A00 7000                       		moveq	#0,d0
00019A02 1028 0028                  		move.b	$28(a0),d0
00019A06 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019A0A 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019A0E                            ; ===========================================================================
00019A0E 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019A10 0000                       		dc.w loc_19348-off_192FA
00019A12 0000                       		dc.w loc_1938E-off_192FA
00019A14 0000                       		dc.w loc_193D0-off_192FA
00019A16                            ; ===========================================================================
00019A16                            
00019A16                            loc_19302:				; XREF: off_192FA
00019A16 317C 0180 0012             		move.w	#$180,$12(a0)
00019A1C 3028 0038                  		move.w	$38(a0),d0
00019A20 0C40 0556                  		cmpi.w	#$556,d0
00019A24 6500                       		bcs.s	loc_19344
00019A26 317C 0556 0038             		move.w	#$556,$38(a0)
00019A2C 4268 003C                  		clr.w	$3C(a0)
00019A30 70FF                       		moveq	#-1,d0
00019A32 3028 0036                  		move.w	$36(a0),d0
00019A36 6700                       		beq.s	loc_1933C
00019A38 2240                       		movea.l	d0,a1
00019A3A 137C 00FF 0029             		move.b	#-1,$29(a1)
00019A40 117C 00FF 0029             		move.b	#-1,$29(a0)
00019A46 2348 0034                  		move.l	a0,$34(a1)
00019A4A 317C 0032 003C             		move.w	#$32,$3C(a0)
00019A50                            
00019A50                            loc_1933C:
00019A50 4268 0012                  		clr.w	$12(a0)
00019A54 5428 0028                  		addq.b	#2,$28(a0)
00019A58                            
00019A58                            loc_19344:
00019A58 6000 FEAC                  		bra.w	loc_191F2
00019A5C                            ; ===========================================================================
00019A5C                            
00019A5C                            loc_19348:				; XREF: off_192FA
00019A5C 5368 003C                  		subq.w	#1,$3C(a0)
00019A60 6A00                       		bpl.s	loc_19366
00019A62 5428 0028                  		addq.b	#2,$28(a0)
00019A66 317C F800 0012             		move.w	#-$800,$12(a0)
00019A6C 4A68 0036                  		tst.w	$36(a0)
00019A70 6600                       		bne.s	loc_19362
00019A72 E0E8 0012                  		asr	$12(a0)
00019A76                            
00019A76                            loc_19362:
00019A76 7000                       		moveq	#0,d0
00019A78 6000                       		bra.s	loc_1937C
00019A7A                            ; ===========================================================================
00019A7A                            
00019A7A                            loc_19366:
00019A7A 7000                       		moveq	#0,d0
00019A7C 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019A82 6E00                       		bgt.s	loc_1937C
00019A84 7002                       		moveq	#2,d0
00019A86 0828 0001 003D             		btst	#1,$3D(a0)
00019A8C 6700                       		beq.s	loc_1937C
00019A8E 4440                       		neg.w	d0
00019A90                            
00019A90                            loc_1937C:
00019A90 D068 0038                  		add.w	$38(a0),d0
00019A94 3140 000C                  		move.w	d0,$C(a0)
00019A98 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A9E 6000 FE76                  		bra.w	loc_19202
00019AA2                            ; ===========================================================================
00019AA2                            
00019AA2                            loc_1938E:				; XREF: off_192FA
00019AA2 303C 04DA                  		move.w	#$4DA,d0
00019AA6 4A68 0036                  		tst.w	$36(a0)
00019AAA 6700                       		beq.s	loc_1939C
00019AAC 0440 0018                  		subi.w	#$18,d0
00019AB0                            
00019AB0                            loc_1939C:
00019AB0 B068 0038                  		cmp.w	$38(a0),d0
00019AB4 6D00                       		blt.s	loc_193BE
00019AB6 317C 0008 003C             		move.w	#8,$3C(a0)
00019ABC 4A68 0036                  		tst.w	$36(a0)
00019AC0 6700                       		beq.s	loc_193B4
00019AC2 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019AC8                            
00019AC8                            loc_193B4:
00019AC8 5428 0028                  		addq.b	#2,$28(a0)
00019ACC 4268 0012                  		clr.w	$12(a0)
00019AD0 6000                       		bra.s	loc_193CC
00019AD2                            ; ===========================================================================
00019AD2                            
00019AD2                            loc_193BE:
00019AD2 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019AD8 6C00                       		bge.s	loc_193CC
00019ADA 0668 000C 0012             		addi.w	#$C,$12(a0)
00019AE0                            
00019AE0                            loc_193CC:
00019AE0 6000 FE24                  		bra.w	loc_191F2
00019AE4                            ; ===========================================================================
00019AE4                            
00019AE4                            loc_193D0:				; XREF: off_192FA
00019AE4 5368 003C                  		subq.w	#1,$3C(a0)
00019AE8 6E00                       		bgt.s	loc_19406
00019AEA 6B00                       		bmi.s	loc_193EE
00019AEC 70FF                       		moveq	#-1,d0
00019AEE 3028 0036                  		move.w	$36(a0),d0
00019AF2 6700                       		beq.s	loc_193E8
00019AF4 2240                       		movea.l	d0,a1
00019AF6 137C 000A 0029             		move.b	#$A,$29(a1)
00019AFC                            
00019AFC                            loc_193E8:
00019AFC 4268 0036                  		clr.w	$36(a0)
00019B00 6000                       		bra.s	loc_19406
00019B02                            ; ===========================================================================
00019B02                            
00019B02                            loc_193EE:
00019B02 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019B08 6600                       		bne.s	loc_19406
00019B0A 4228 0029                  		clr.b	$29(a0)
00019B0E 5528 0025                  		subq.b	#2,$25(a0)
00019B12 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019B18 6000                       		bra.s	loc_19446
00019B1A                            ; ===========================================================================
00019B1A                            
00019B1A                            loc_19406:
00019B1A 7001                       		moveq	#1,d0
00019B1C 4A68 0036                  		tst.w	$36(a0)
00019B20 6700                       		beq.s	loc_19410
00019B22 7002                       		moveq	#2,d0
00019B24                            
00019B24                            loc_19410:
00019B24 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019B2A 6700                       		beq.s	loc_19424
00019B2C 6D00                       		blt.s	loc_1941C
00019B2E 4440                       		neg.w	d0
00019B30                            
00019B30                            loc_1941C:
00019B30 4A68 0036                  		tst.w	$36(a0)
00019B34 D168 0038                  		add.w	d0,$38(a0)
00019B38                            
00019B38                            loc_19424:
00019B38 7000                       		moveq	#0,d0
00019B3A 4A68 0036                  		tst.w	$36(a0)
00019B3E 6700                       		beq.s	loc_19438
00019B40 7002                       		moveq	#2,d0
00019B42 0828 0000 003D             		btst	#0,$3D(a0)
00019B48 6700                       		beq.s	loc_19438
00019B4A 4440                       		neg.w	d0
00019B4C                            
00019B4C                            loc_19438:
00019B4C D068 0038                  		add.w	$38(a0),d0
00019B50 3140 000C                  		move.w	d0,$C(a0)
00019B54 3168 0030 0008             		move.w	$30(a0),8(a0)
00019B5A                            
00019B5A                            loc_19446:
00019B5A 6000 FDBA                  		bra.w	loc_19202
00019B5E                            
00019B5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019B5E                            
00019B5E                            
00019B5E                            Obj75_FindBlocks:			; XREF: loc_192AE
00019B5E 4268 0036                  		clr.w	$36(a0)
00019B62 43F8 D040                  		lea	($FFFFD040).w,a1
00019B66 703E                       		moveq	#$3E,d0
00019B68 7276                       		moveq	#$76,d1
00019B6A 1428 0034                  		move.b	$34(a0),d2
00019B6E                            
00019B6E                            Obj75_FindLoop:
00019B6E B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019B70 6600                       		bne.s	loc_1946A	; if not, branch
00019B72 B429 0028                  		cmp.b	$28(a1),d2
00019B76 6600                       		bne.s	loc_1946A
00019B78 3149 0036                  		move.w	a1,$36(a0)
00019B7C 6000                       		bra.s	locret_19472
00019B7E                            ; ===========================================================================
00019B7E                            
00019B7E                            loc_1946A:
00019B7E 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019B82 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019B86                            
00019B86                            locret_19472:
00019B86 4E75                       		rts	
00019B88                            ; End of function Obj75_FindBlocks
00019B88                            
00019B88                            ; ===========================================================================
00019B88                            
00019B88                            loc_19474:				; XREF: Obj75_ShipIndex
00019B88 5368 003C                  		subq.w	#1,$3C(a0)
00019B8C 6B00                       		bmi.s	loc_1947E
00019B8E 6000 E3C6                  		bra.w	BossDefeated
00019B92                            ; ===========================================================================
00019B92                            
00019B92                            loc_1947E:
00019B92 5428 0025                  		addq.b	#2,$25(a0)
00019B96 4268 0012                  		clr.w	$12(a0)
00019B9A 08E8 0000 0022             		bset	#0,$22(a0)
00019BA0 08A8 0007 0022             		bclr	#7,$22(a0)
00019BA6 4268 0010                  		clr.w	$10(a0)
00019BAA 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019BB0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019BB4 6600                       		bne.s	loc_194A8
00019BB6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019BBC                            
00019BBC                            loc_194A8:
00019BBC 6000 FD58                  		bra.w	loc_19202
00019BC0                            ; ===========================================================================
00019BC0                            
00019BC0                            loc_194AC:				; XREF: Obj75_ShipIndex
00019BC0 5268 003C                  		addq.w	#1,$3C(a0)
00019BC4 6700                       		beq.s	loc_194BC
00019BC6 6A00                       		bpl.s	loc_194C2
00019BC8 0668 0018 0012             		addi.w	#$18,$12(a0)
00019BCE 6000                       		bra.s	loc_194EE
00019BD0                            ; ===========================================================================
00019BD0                            
00019BD0                            loc_194BC:
00019BD0 4268 0012                  		clr.w	$12(a0)
00019BD4 6000                       		bra.s	loc_194EE
00019BD6                            ; ===========================================================================
00019BD6                            
00019BD6                            loc_194C2:
00019BD6 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019BDC 6500                       		bcs.s	loc_194DA
00019BDE 6700                       		beq.s	loc_194E0
00019BE0 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019BE6 6500                       		bcs.s	loc_194EE
00019BE8 5428 0025                  		addq.b	#2,$25(a0)
00019BEC 6000                       		bra.s	loc_194EE
00019BEE                            ; ===========================================================================
00019BEE                            
00019BEE                            loc_194DA:
00019BEE 5168 0012                  		subq.w	#8,$12(a0)
00019BF2 6000                       		bra.s	loc_194EE
00019BF4                            ; ===========================================================================
00019BF4                            
00019BF4                            loc_194E0:
00019BF4 4268 0012                  		clr.w	$12(a0)
00019BF8 303C 0085                  		move.w	#$85,d0
00019BFC 4EB9 0000 15C0             		jsr	(PlaySound).l	; play SYZ music
00019C02                            
00019C02                            loc_194EE:
00019C02 6000 FD02                  		bra.w	loc_191F2
00019C06                            ; ===========================================================================
00019C06                            
00019C06                            loc_194F2:				; XREF: Obj75_ShipIndex
00019C06 317C 0400 0010             		move.w	#$400,$10(a0)
00019C0C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019C12 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019C18 6400                       		bcc.s	loc_1950C
00019C1A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019C1E 6000                       		bra.s	loc_19512
00019C20                            ; ===========================================================================
00019C20                            
00019C20                            loc_1950C:
00019C20 4A28 0001                  		tst.b	1(a0)
00019C24 6A00                       		bpl.s	Obj75_ShipDelete
00019C26                            
00019C26                            loc_19512:
00019C26 6100 E370                  		bsr.w	BossMove
00019C2A 6000 FCC6                  		bra.w	loc_191DE
00019C2E                            ; ===========================================================================
00019C2E                            
00019C2E                            Obj75_ShipDelete:
00019C2E 4EF9 0000 DC40             		jmp	DeleteObject
00019C34                            ; ===========================================================================
00019C34                            
00019C34                            Obj75_FaceMain:				; XREF: Obj75_Index
00019C34 7201                       		moveq	#1,d1
00019C36 2268 0034                  		movea.l	$34(a0),a1
00019C3A 7000                       		moveq	#0,d0
00019C3C 1029 0025                  		move.b	$25(a1),d0
00019C40 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019C44 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019C48 1141 001C                  		move.b	d1,$1C(a0)
00019C4C 1010                       		move.b	(a0),d0
00019C4E B011                       		cmp.b	(a1),d0
00019C50 6600                       		bne.s	Obj75_FaceDelete
00019C52 6000                       		bra.s	loc_195BE
00019C54                            ; ===========================================================================
00019C54                            
00019C54                            Obj75_FaceDelete:
00019C54 4EF9 0000 DC40             		jmp	DeleteObject
00019C5A                            ; ===========================================================================
00019C5A 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019C5E 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019C62 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019C66                            ; ===========================================================================
00019C66                            
00019C66                            loc_19552:				; XREF: off_19546
00019C66 720A                       		moveq	#$A,d1
00019C68 4E75                       		rts	
00019C6A                            ; ===========================================================================
00019C6A                            
00019C6A                            loc_19556:				; XREF: off_19546
00019C6A 7206                       		moveq	#6,d1
00019C6C 4E75                       		rts	
00019C6E                            ; ===========================================================================
00019C6E                            
00019C6E                            loc_1955A:				; XREF: off_19546
00019C6E 7000                       		moveq	#0,d0
00019C70 1029 0028                  		move.b	$28(a1),d0
00019C74 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019C78 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019C7C                            ; ===========================================================================
00019C7C 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019C80 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019C84                            ; ===========================================================================
00019C84                            
00019C84                            loc_19570:				; XREF: off_19568
00019C84 6000                       		bra.s	loc_19574
00019C86                            ; ===========================================================================
00019C86                            
00019C86                            loc_19572:				; XREF: off_19568
00019C86 7206                       		moveq	#6,d1
00019C88                            
00019C88                            loc_19574:				; XREF: off_19546
00019C88 4A29 0020                  		tst.b	$20(a1)
00019C8C 6600                       		bne.s	loc_1957E
00019C8E 7205                       		moveq	#5,d1
00019C90 4E75                       		rts	
00019C92                            ; ===========================================================================
00019C92                            
00019C92                            loc_1957E:
00019C92 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019C98 6500                       		bcs.s	locret_19588
00019C9A 7204                       		moveq	#4,d1
00019C9C                            
00019C9C                            locret_19588:
00019C9C 4E75                       		rts	
00019C9E                            ; ===========================================================================
00019C9E                            
00019C9E                            Obj75_FlameMain:			; XREF: Obj75_Index
00019C9E 117C 0007 001C             		move.b	#7,$1C(a0)
00019CA4 2268 0034                  		movea.l	$34(a0),a1
00019CA8 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019CAE 6600                       		bne.s	loc_195AA
00019CB0 117C 000B 001C             		move.b	#$B,$1C(a0)
00019CB6 4A28 0001                  		tst.b	1(a0)
00019CBA 6A00                       		bpl.s	Obj75_FlameDelete
00019CBC 6000                       		bra.s	loc_195B6
00019CBE                            ; ===========================================================================
00019CBE                            
00019CBE                            loc_195AA:
00019CBE 4A69 0010                  		tst.w	$10(a1)
00019CC2 6700                       		beq.s	loc_195B6
00019CC4 117C 0008 001C             		move.b	#8,$1C(a0)
00019CCA                            
00019CCA                            loc_195B6:
00019CCA 6000                       		bra.s	loc_195BE
00019CCC                            ; ===========================================================================
00019CCC                            
00019CCC                            Obj75_FlameDelete:
00019CCC 4EF9 0000 DC40             		jmp	DeleteObject
00019CD2                            ; ===========================================================================
00019CD2                            
00019CD2                            loc_195BE:
00019CD2 43F9 0001 83DA             		lea	(Ani_Eggman).l,a1
00019CD8 4EB9 0000 ACCE             		jsr	AnimateSprite
00019CDE 2268 0034                  		movea.l	$34(a0),a1
00019CE2 3169 0008 0008             		move.w	8(a1),8(a0)
00019CE8 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019CEE                            
00019CEE                            loc_195DA:
00019CEE 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019CF4 7003                       		moveq	#3,d0
00019CF6 C028 0022                  		and.b	$22(a0),d0
00019CFA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019D00 8128 0001                  		or.b	d0,1(a0)
00019D04 4EF9 0000 DC04             		jmp	DisplaySprite
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019D0A 217C 0001 84F2 0004        		move.l	#Map_BossItems,4(a0)
00019D12 317C 246C 0002             		move.w	#$246C,2(a0)
00019D18 117C 0005 001A             		move.b	#5,$1A(a0)
00019D1E 2268 0034                  		movea.l	$34(a0),a1
00019D22 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019D28 6600                       		bne.s	loc_1961C
00019D2A 4A28 0001                  		tst.b	1(a0)
00019D2E 6A00                       		bpl.s	Obj75_SpikeDelete
00019D30                            
00019D30                            loc_1961C:
00019D30 3169 0008 0008             		move.w	8(a1),8(a0)
00019D36 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D3C 3028 003C                  		move.w	$3C(a0),d0
00019D40 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019D46 6600                       		bne.s	loc_19652
00019D48 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019D4E 6700                       		beq.s	loc_1964C
00019D50 4A29 0028                  		tst.b	$28(a1)
00019D54 6600                       		bne.s	loc_19658
00019D56 0C40 0094                  		cmpi.w	#$94,d0
00019D5A 6C00                       		bge.s	loc_19658
00019D5C 5E40                       		addq.w	#7,d0
00019D5E 6000                       		bra.s	loc_19658
00019D60                            ; ===========================================================================
00019D60                            
00019D60                            loc_1964C:
00019D60 4A69 003C                  		tst.w	$3C(a1)
00019D64 6A00                       		bpl.s	loc_19658
00019D66                            
00019D66                            loc_19652:
00019D66 4A40                       		tst.w	d0
00019D68 6F00                       		ble.s	loc_19658
00019D6A 5B40                       		subq.w	#5,d0
00019D6C                            
00019D6C                            loc_19658:
00019D6C 3140 003C                  		move.w	d0,$3C(a0)
00019D70 E440                       		asr.w	#2,d0
00019D72 D168 000C                  		add.w	d0,$C(a0)
00019D76 117C 0008 0019             		move.b	#8,$19(a0)
00019D7C 117C 000C 0016             		move.b	#$C,$16(a0)
00019D82 4228 0020                  		clr.b	$20(a0)
00019D86 2268 0034                  		movea.l	$34(a0),a1
00019D8A 4A29 0020                  		tst.b	$20(a1)
00019D8E 6700                       		beq.s	loc_19688
00019D90 4A29 0029                  		tst.b	$29(a1)
00019D94 6600                       		bne.s	loc_19688
00019D96 117C 0084 0020             		move.b	#$84,$20(a0)
00019D9C                            
00019D9C                            loc_19688:
00019D9C 6000 FF50                  		bra.w	loc_195DA
00019DA0                            ; ===========================================================================
00019DA0                            
00019DA0                            Obj75_SpikeDelete:
00019DA0 4EF9 0000 DC40             		jmp	DeleteObject
00019DA6                            ; ===========================================================================
00019DA6                            ; ---------------------------------------------------------------------------
00019DA6                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019DA6                            ; ---------------------------------------------------------------------------
00019DA6                            
00019DA6                            Obj76:					; XREF: Obj_Index
00019DA6 7000                       		moveq	#0,d0
00019DA8 1028 0024                  		move.b	$24(a0),d0
00019DAC 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019DB0 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019DB4                            ; ===========================================================================
00019DB4 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019DB6 0000                       		dc.w Obj76_Action-Obj76_Index
00019DB8 0000                       		dc.w loc_19762-Obj76_Index
00019DBA                            ; ===========================================================================
00019DBA                            
00019DBA                            Obj76_Main:				; XREF: Obj76_Index
00019DBA 7800                       		moveq	#0,d4
00019DBC 3A3C 2C10                  		move.w	#$2C10,d5
00019DC0 7C09                       		moveq	#9,d6
00019DC2 43D0                       		lea	(a0),a1
00019DC4 6000                       		bra.s	Obj76_MakeBlock
00019DC6                            ; ===========================================================================
00019DC6                            
00019DC6                            Obj76_Loop:
00019DC6 4EB9 0000 E08A             		jsr	SingleObjLoad
00019DCC 6600                       		bne.s	Obj76_ExitLoop
00019DCE                            
00019DCE                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019DCE 12BC 0076                  		move.b	#$76,(a1)
00019DD2 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019DDA 337C 4000 0002             		move.w	#$4000,2(a1)
00019DE0 137C 0004 0001             		move.b	#4,1(a1)
00019DE6 137C 0010 0019             		move.b	#$10,$19(a1)
00019DEC 137C 0010 0016             		move.b	#$10,$16(a1)
00019DF2 137C 0003 0018             		move.b	#3,$18(a1)
00019DF8 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019DFC 337C 0582 000C             		move.w	#$582,$C(a1)
00019E02 3344 0028                  		move.w	d4,$28(a1)
00019E06 0644 0101                  		addi.w	#$101,d4
00019E0A 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019E0E 5429 0024                  		addq.b	#2,$24(a1)
00019E12 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019E16                            
00019E16                            Obj76_ExitLoop:
00019E16 4E75                       		rts	
00019E18                            ; ===========================================================================
00019E18                            
00019E18                            Obj76_Action:				; XREF: Obj76_Index
00019E18 1028 0029                  		move.b	$29(a0),d0
00019E1C B028 0028                  		cmp.b	$28(a0),d0
00019E20 6700                       		beq.s	Obj76_Solid
00019E22 4A00                       		tst.b	d0
00019E24 6B00                       		bmi.s	loc_19718
00019E26                            
00019E26                            loc_19712:
00019E26 6100 0000                  		bsr.w	Obj76_Break
00019E2A 6000                       		bra.s	Obj76_Display
00019E2C                            ; ===========================================================================
00019E2C                            
00019E2C                            loc_19718:
00019E2C 2268 0034                  		movea.l	$34(a0),a1
00019E30 4A29 0021                  		tst.b	$21(a1)
00019E34 67F0                       		beq.s	loc_19712
00019E36 3169 0008 0008             		move.w	8(a1),8(a0)
00019E3C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E42 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019E48 B2C8                       		cmpa.w	a0,a1
00019E4A 6500                       		bcs.s	Obj76_Display
00019E4C 3029 0012                  		move.w	$12(a1),d0
00019E50 48C0                       		ext.l	d0
00019E52 E080                       		asr.l	#8,d0
00019E54 D168 000C                  		add.w	d0,$C(a0)
00019E58 6000                       		bra.s	Obj76_Display
00019E5A                            ; ===========================================================================
00019E5A                            
00019E5A                            Obj76_Solid:				; XREF: Obj76_Action
00019E5A 323C 001B                  		move.w	#$1B,d1
00019E5E 343C 0010                  		move.w	#$10,d2
00019E62 363C 0011                  		move.w	#$11,d3
00019E66 3828 0008                  		move.w	8(a0),d4
00019E6A 4EB9 0000 FFD4             		jsr	SolidObject
00019E70                            
00019E70                            Obj76_Display:				; XREF: Obj76_Action
00019E70 4EF9 0000 DC04             		jmp	DisplaySprite
00019E76                            ; ===========================================================================
00019E76                            
00019E76                            loc_19762:				; XREF: Obj76_Index
00019E76 4A28 0001                  		tst.b	1(a0)
00019E7A 6A00                       		bpl.s	Obj76_Delete
00019E7C 4EB9 0000 DBB2             		jsr	ObjectFall
00019E82 4EF9 0000 DC04             		jmp	DisplaySprite
00019E88                            ; ===========================================================================
00019E88                            
00019E88                            Obj76_Delete:
00019E88 4EF9 0000 DC40             		jmp	DeleteObject
00019E8E                            
00019E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019E8E                            
00019E8E                            
00019E8E                            Obj76_Break:				; XREF: Obj76_Action
00019E8E 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019E92 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019E96 7801                       		moveq	#1,d4
00019E98 7203                       		moveq	#3,d1
00019E9A 7438                       		moveq	#$38,d2
00019E9C 5428 0024                  		addq.b	#2,$24(a0)
00019EA0 117C 0008 0019             		move.b	#8,$19(a0)
00019EA6 117C 0008 0016             		move.b	#8,$16(a0)
00019EAC 43D0                       		lea	(a0),a1
00019EAE 6000                       		bra.s	Obj76_MakeFrag
00019EB0                            ; ===========================================================================
00019EB0                            
00019EB0                            Obj76_LoopFrag:
00019EB0 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00019EB6 6600                       		bne.s	loc_197D4
00019EB8                            
00019EB8                            Obj76_MakeFrag:
00019EB8 45D0                       		lea	(a0),a2
00019EBA 47D1                       		lea	(a1),a3
00019EBC 7603                       		moveq	#3,d3
00019EBE                            
00019EBE                            loc_197AA:
00019EBE 26DA                       		move.l	(a2)+,(a3)+
00019EC0 26DA                       		move.l	(a2)+,(a3)+
00019EC2 26DA                       		move.l	(a2)+,(a3)+
00019EC4 26DA                       		move.l	(a2)+,(a3)+
00019EC6 51CB FFF6                  		dbf	d3,loc_197AA
00019ECA                            
00019ECA 335C 0010                  		move.w	(a4)+,$10(a1)
00019ECE 335C 0012                  		move.w	(a4)+,$12(a1)
00019ED2 361D                       		move.w	(a5)+,d3
00019ED4 D769 0008                  		add.w	d3,8(a1)
00019ED8 361D                       		move.w	(a5)+,d3
00019EDA D769 000C                  		add.w	d3,$C(a1)
00019EDE 1344 001A                  		move.b	d4,$1A(a1)
00019EE2 5244                       		addq.w	#1,d4
00019EE4 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019EE8                            
00019EE8                            loc_197D4:
00019EE8 303C 00CB                  		move.w	#$CB,d0
00019EEC 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play smashing sound
00019EF2                            ; End of function Obj76_Break
00019EF2                            
00019EF2                            ; ===========================================================================
00019EF2 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019EF6 0180 FE00                  		dc.w $180, $FE00
00019EFA FF00 FF00                  		dc.w $FF00, $FF00
00019EFE 0100 FF00                  		dc.w $100, $FF00
00019F02 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019F06 0010 0000                  		dc.w $10, 0
00019F0A 0000 0010                  		dc.w 0,	$10
00019F0E 0010 0010                  		dc.w $10, $10
00019F12                            ; ---------------------------------------------------------------------------
00019F12                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019F12                            ; ---------------------------------------------------------------------------
00019F12                            Map_obj76:
00019F12                            	include "_maps\obj76.asm"
00019F12                            ; ---------------------------------------------------------------------------
00019F12                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019F12                            ; ---------------------------------------------------------------------------
00019F12 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019F16 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019F1A 0000                       		dc.w byte_19826-Map_obj76
00019F1C 02                         byte_19808:	dc.b 2
00019F1D F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019F22 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019F27 00                         		dc.b 0
00019F28 01                         byte_19814:	dc.b 1
00019F29 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019F2E 01                         byte_1981A:	dc.b 1
00019F2F F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019F34 01                         byte_19820:	dc.b 1
00019F35 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019F3A 01                         byte_19826:	dc.b 1
00019F3B F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019F40                            		even
00019F40                            		even
00019F40                            
00019F40                            ; ===========================================================================
00019F40                            
00019F40                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019F40 4EF9 0000 DC40             		jmp	DeleteObject
00019F46                            ; ===========================================================================
00019F46                            ; ---------------------------------------------------------------------------
00019F46                            ; Object 82 - Eggman (SBZ2)
00019F46                            ; ---------------------------------------------------------------------------
00019F46                            
00019F46                            Obj82:					; XREF: Obj_Index
00019F46 7000                       		moveq	#0,d0
00019F48 1028 0024                  		move.b	$24(a0),d0
00019F4C 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019F50 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019F54                            ; ===========================================================================
00019F54 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019F56 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019F58 0000                       		dc.w Obj82_Switch-Obj82_Index
00019F5A                            
00019F5A 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019F5D 0400 03                    		dc.b 4,	0, 3
00019F60                            ; ===========================================================================
00019F60                            
00019F60                            Obj82_Main:				; XREF: Obj82_Index
00019F60 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019F64 317C 2160 0008             		move.w	#$2160,8(a0)
00019F6A 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019F70 117C 000F 0020             		move.b	#$F,$20(a0)
00019F76 117C 0010 0021             		move.b	#$10,$21(a0)
00019F7C 08A8 0000 0022             		bclr	#0,$22(a0)
00019F82 4228 0025                  		clr.b	$25(a0)
00019F86 115A 0024                  		move.b	(a2)+,$24(a0)
00019F8A 115A 001C                  		move.b	(a2)+,$1C(a0)
00019F8E 115A 0018                  		move.b	(a2)+,$18(a0)
00019F92 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019F9A 317C 0400 0002             		move.w	#$400,2(a0)
00019FA0 117C 0004 0001             		move.b	#4,1(a0)
00019FA6 08E8 0007 0001             		bset	#7,1(a0)
00019FAC 117C 0020 0019             		move.b	#$20,$19(a0)
00019FB2 4EB9 0000 E0A0             		jsr	SingleObjLoad2
00019FB8 6600                       		bne.s	Obj82_Eggman
00019FBA 2348 0034                  		move.l	a0,$34(a1)
00019FBE 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019FC2 337C 2130 0008             		move.w	#$2130,8(a1)
00019FC8 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019FCE 4228 0025                  		clr.b	$25(a0)
00019FD2 135A 0024                  		move.b	(a2)+,$24(a1)
00019FD6 135A 001C                  		move.b	(a2)+,$1C(a1)
00019FDA 135A 0018                  		move.b	(a2)+,$18(a1)
00019FDE 237C 0000 C3F8 0004        		move.l	#Map_obj32,4(a1)
00019FE6 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019FEC 137C 0004 0001             		move.b	#4,1(a1)
00019FF2 08E9 0007 0001             		bset	#7,1(a1)
00019FF8 137C 0010 0019             		move.b	#$10,$19(a1)
00019FFE 137C 0000 001A             		move.b	#0,$1A(a1)
0001A004                            
0001A004                            Obj82_Eggman:				; XREF: Obj82_Index
0001A004 7000                       		moveq	#0,d0
0001A006 1028 0025                  		move.b	$25(a0),d0
0001A00A 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A00E 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A012 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A016 4EB9 0000 ACCE             		jsr	AnimateSprite
0001A01C 4EF9 0000 DC04             		jmp	DisplaySprite
0001A022                            ; ===========================================================================
0001A022 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A024 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A026 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A028 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A02A                            ; ===========================================================================
0001A02A                            
0001A02A                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A02A 3028 0008                  		move.w	8(a0),d0
0001A02E 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A032 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A036 6400                       		bcc.s	loc_19934	; if not, branch
0001A038 5428 0025                  		addq.b	#2,$25(a0)
0001A03C 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A042 117C 0001 001C             		move.b	#1,$1C(a0)
0001A048                            
0001A048                            loc_19934:				; XREF: Obj82_EggIndex
0001A048 4EF9 0000 DBDE             		jmp	SpeedToPos
0001A04E                            ; ===========================================================================
0001A04E                            
0001A04E                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A04E 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A052 6600                       		bne.s	loc_19954	; if time remains, branch
0001A054 5428 0025                  		addq.b	#2,$25(a0)
0001A058 117C 0002 001C             		move.b	#2,$1C(a0)
0001A05E 5868 000C                  		addq.w	#4,$C(a0)
0001A062 317C 000F 003C             		move.w	#15,$3C(a0)
0001A068                            
0001A068                            loc_19954:
0001A068 60DE                       		bra.s	loc_19934
0001A06A                            ; ===========================================================================
0001A06A                            
0001A06A                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A06A 5368 003C                  		subq.w	#1,$3C(a0)
0001A06E 6E00                       		bgt.s	loc_199D0
0001A070 6600                       		bne.s	loc_1996A
0001A072 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A078 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A07E                            
0001A07E                            loc_1996A:
0001A07E 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A084 6E00                       		bgt.s	loc_19976
0001A086 4268 0010                  		clr.w	$10(a0)
0001A08A                            
0001A08A                            loc_19976:
0001A08A 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A090 4A68 0012                  		tst.w	$12(a0)
0001A094 6B00                       		bmi.s	Obj82_FindBlocks
0001A096 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A09C 6500                       		bcs.s	Obj82_FindBlocks
0001A09E 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A0A4 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A0AA 6500                       		bcs.s	Obj82_FindBlocks
0001A0AC 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A0B2 4268 0012                  		clr.w	$12(a0)
0001A0B6                            
0001A0B6                            Obj82_FindBlocks:
0001A0B6 3028 0010                  		move.w	$10(a0),d0
0001A0BA 8068 0012                  		or.w	$12(a0),d0
0001A0BE 6600                       		bne.s	loc_199D0
0001A0C0 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A0C4 703E                       		moveq	#$3E,d0
0001A0C6 7240                       		moveq	#$40,d1
0001A0C8                            
0001A0C8                            Obj82_FindLoop:	
0001A0C8 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A0CA 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A0CE 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A0D2                            
0001A0D2 6600                       		bne.s	loc_199D0
0001A0D4 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A0DA 5428 0025                  		addq.b	#2,$25(a0)
0001A0DE 117C 0001 001C             		move.b	#1,$1C(a0)
0001A0E4                            
0001A0E4                            loc_199D0:
0001A0E4 6000 FF62                  		bra.w	loc_19934
0001A0E8                            ; ===========================================================================
0001A0E8                            
0001A0E8                            Obj82_Switch:				; XREF: Obj82_Index
0001A0E8 7000                       		moveq	#0,d0
0001A0EA 1028 0025                  		move.b	$25(a0),d0
0001A0EE 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A0F2 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A0F6                            ; ===========================================================================
0001A0F6 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A0F8 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A0FA                            ; ===========================================================================
0001A0FA                            
0001A0FA                            loc_199E6:				; XREF: Obj82_SwIndex
0001A0FA 2268 0034                  		movea.l	$34(a0),a1
0001A0FE 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A104 6600                       		bne.s	Obj82_SwDisplay
0001A106 117C 0001 001A             		move.b	#1,$1A(a0)
0001A10C 5428 0025                  		addq.b	#2,$25(a0)
0001A110                            
0001A110                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A110 4EF9 0000 DC04             		jmp	DisplaySprite
0001A116                            ; ===========================================================================
0001A116                            Ani_obj82:
0001A116                            	include "_anim\obj82.asm"
0001A116                            ; ---------------------------------------------------------------------------
0001A116                            ; Animation script - Eggman (SBZ2)
0001A116                            ; ---------------------------------------------------------------------------
0001A116 0000                       		dc.w byte_19A10-Ani_obj82
0001A118 0000                       		dc.w byte_19A14-Ani_obj82
0001A11A 0000                       		dc.w byte_19A18-Ani_obj82
0001A11C 0000                       		dc.w byte_19A20-Ani_obj82
0001A11E 0000                       		dc.w byte_19A24-Ani_obj82
0001A120 0000                       		dc.w byte_19A2A-Ani_obj82
0001A122 0000                       		dc.w byte_19A30-Ani_obj82
0001A124 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A128 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A12C 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A134 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A138 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A13E 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A144 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A148                            		even
0001A148                            		even
0001A148                            
0001A148                            ; ---------------------------------------------------------------------------
0001A148                            ; Sprite mappings - Eggman (SBZ2)
0001A148                            ; ---------------------------------------------------------------------------
0001A148                            Map_obj82:
0001A148                            	include "_maps\obj82.asm"
0001A148                            ; ================================================================================
0001A148                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A148                            ; ================================================================================
0001A148                            
0001A148                            DATAA16Z12RYSAF:
0001A148 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A14C 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A150 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A154 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A158 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A15C 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A15E 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A15F FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A164 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A169 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A16E 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A16F E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A174 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A179 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A17E FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A183 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A184 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A189 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A18E 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A193 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A198 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A199 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A19E 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A1A3 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A1A8 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A1A9 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A1AE 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A1B3 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A1B8 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A1BD 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A1BE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A1C3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A1C8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A1CD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A1D2 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A1D3 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A1D8 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A1DD 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A1E2 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A1E7 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A1EC F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A1F1 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A1F6 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A1F7 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A1FC E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A201 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A206 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A20B 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A20C 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A211 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A216 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A21B 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A220 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A225 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A226 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A22B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A230 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A235 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A23A E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A23F F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A244 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A249 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A24E 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A24F EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A254 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A259 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A25E                            	even
0001A25E                            	even
0001A25E                            
0001A25E                            ; ===========================================================================
0001A25E                            ; ---------------------------------------------------------------------------
0001A25E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A25E                            ; ---------------------------------------------------------------------------
0001A25E                            
0001A25E                            Obj83:					; XREF: Obj_Index
0001A25E 7000                       		moveq	#0,d0
0001A260 1028 0024                  		move.b	$24(a0),d0
0001A264 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A268 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A26C                            ; ===========================================================================
0001A26C 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A26E 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A270 0000                       		dc.w loc_19C36-Obj83_Index
0001A272 0000                       		dc.w loc_19C62-Obj83_Index
0001A274 0000                       		dc.w loc_19C72-Obj83_Index
0001A276 0000                       		dc.w loc_19C80-Obj83_Index
0001A278                            ; ===========================================================================
0001A278                            
0001A278                            Obj83_Main:				; XREF: Obj83_Index
0001A278 317C 2080 0008             		move.w	#$2080,8(a0)
0001A27E 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A284 117C 0080 0019             		move.b	#$80,$19(a0)
0001A28A 117C 0010 0016             		move.b	#$10,$16(a0)
0001A290 117C 0004 0001             		move.b	#4,1(a0)
0001A296 08E8 0007 0001             		bset	#7,1(a0)
0001A29C 7800                       		moveq	#0,d4
0001A29E 3A3C 2010                  		move.w	#$2010,d5
0001A2A2 7C07                       		moveq	#7,d6
0001A2A4 45E8 0030                  		lea	$30(a0),a2
0001A2A8                            
0001A2A8                            Obj83_MakeBlock:
0001A2A8 4EB9 0000 E08A             		jsr	SingleObjLoad
0001A2AE 6600                       		bne.s	Obj83_ExitMake
0001A2B0 34C9                       		move.w	a1,(a2)+
0001A2B2 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A2B6 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A2BE 337C 4518 0002             		move.w	#$4518,2(a1)
0001A2C4 137C 0004 0001             		move.b	#4,1(a1)
0001A2CA 137C 0010 0019             		move.b	#$10,$19(a1)
0001A2D0 137C 0010 0016             		move.b	#$10,$16(a1)
0001A2D6 137C 0003 0018             		move.b	#3,$18(a1)
0001A2DC 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A2E0 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A2E6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A2EA 137C 0008 0024             		move.b	#8,$24(a1)
0001A2F0 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A2F4                            
0001A2F4                            Obj83_ExitMake:
0001A2F4 5428 0024                  		addq.b	#2,$24(a0)
0001A2F8 4E75                       		rts	
0001A2FA                            ; ===========================================================================
0001A2FA                            
0001A2FA                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A2FA 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A300 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A302 4228 001A                  		clr.b	$1A(a0)
0001A306 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A30A                            
0001A30A                            Obj83_Solid:
0001A30A 7000                       		moveq	#0,d0
0001A30C 1028 001A                  		move.b	$1A(a0),d0
0001A310 4400                       		neg.b	d0
0001A312 4880                       		ext.w	d0
0001A314 5040                       		addq.w	#8,d0
0001A316 E940                       		asl.w	#4,d0
0001A318 383C 2100                  		move.w	#$2100,d4
0001A31C 9840                       		sub.w	d0,d4
0001A31E 1140 0019                  		move.b	d0,$19(a0)
0001A322 3144 0008                  		move.w	d4,8(a0)
0001A326 720B                       		moveq	#$B,d1
0001A328 D240                       		add.w	d0,d1
0001A32A 7410                       		moveq	#$10,d2
0001A32C 7611                       		moveq	#$11,d3
0001A32E 4EF9 0000 FFD4             		jmp	SolidObject
0001A334                            ; ===========================================================================
0001A334                            
0001A334                            loc_19C36:				; XREF: Obj83_Index
0001A334 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A33A 6400                       		bcc.s	Obj83_Solid2
0001A33C 70FF                       		moveq	#-1,d0
0001A33E 1028 001A                  		move.b	$1A(a0),d0
0001A342 4880                       		ext.w	d0
0001A344 D040                       		add.w	d0,d0
0001A346 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A34A 2240                       		movea.l	d0,a1
0001A34C 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A352 5228 001A                  		addq.b	#1,$1A(a0)
0001A356 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A35C 6700                       		beq.s	loc_19C62
0001A35E                            
0001A35E                            Obj83_Solid2:
0001A35E 60AA                       		bra.s	Obj83_Solid
0001A360                            ; ===========================================================================
0001A360                            
0001A360                            loc_19C62:				; XREF: Obj83_Index
0001A360 08A8 0003 0022             		bclr	#3,$22(a0)
0001A366 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A36C 6000 FBD2                  		bra.w	loc_1982C
0001A370                            ; ===========================================================================
0001A370                            
0001A370                            loc_19C72:				; XREF: Obj83_Index
0001A370 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A376 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A378 4EF9 0000 DC04             		jmp	DisplaySprite
0001A37E                            ; ===========================================================================
0001A37E                            
0001A37E                            loc_19C80:				; XREF: Obj83_Index
0001A37E 4A28 0001                  		tst.b	1(a0)
0001A382 6A00 FBBC                  		bpl.w	loc_1982C
0001A386 4EB9 0000 DBB2             		jsr	ObjectFall
0001A38C 4EF9 0000 DC04             		jmp	DisplaySprite
0001A392                            ; ===========================================================================
0001A392                            
0001A392                            Obj83_Break:				; XREF: loc_19C72
0001A392 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A396 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A39A 7801                       		moveq	#1,d4
0001A39C 7203                       		moveq	#3,d1
0001A39E 7438                       		moveq	#$38,d2
0001A3A0 5428 0024                  		addq.b	#2,$24(a0)
0001A3A4 117C 0008 0019             		move.b	#8,$19(a0)
0001A3AA 117C 0008 0016             		move.b	#8,$16(a0)
0001A3B0 43D0                       		lea	(a0),a1
0001A3B2 6000                       		bra.s	Obj83_MakeFrag
0001A3B4                            ; ===========================================================================
0001A3B4                            
0001A3B4                            Obj83_LoopFrag:
0001A3B4 4EB9 0000 E0A0             		jsr	SingleObjLoad2
0001A3BA 6600                       		bne.s	Obj83_BreakSnd
0001A3BC                            
0001A3BC                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A3BC 45D0                       		lea	(a0),a2
0001A3BE 47D1                       		lea	(a1),a3
0001A3C0 7603                       		moveq	#3,d3
0001A3C2                            
0001A3C2                            loc_19CC4:
0001A3C2 26DA                       		move.l	(a2)+,(a3)+
0001A3C4 26DA                       		move.l	(a2)+,(a3)+
0001A3C6 26DA                       		move.l	(a2)+,(a3)+
0001A3C8 26DA                       		move.l	(a2)+,(a3)+
0001A3CA 51CB FFF6                  		dbf	d3,loc_19CC4
0001A3CE                            
0001A3CE 335C 0012                  		move.w	(a4)+,$12(a1)
0001A3D2 361D                       		move.w	(a5)+,d3
0001A3D4 D769 0008                  		add.w	d3,8(a1)
0001A3D8 361D                       		move.w	(a5)+,d3
0001A3DA D769 000C                  		add.w	d3,$C(a1)
0001A3DE 1344 001A                  		move.b	d4,$1A(a1)
0001A3E2 5244                       		addq.w	#1,d4
0001A3E4 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A3E8                            
0001A3E8                            Obj83_BreakSnd:
0001A3E8 303C 00CB                  		move.w	#$CB,d0
0001A3EC 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A3F2 4EF9 0000 DC04             		jmp	DisplaySprite
0001A3F8                            ; ===========================================================================
0001A3F8 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A3FC 0120 00C0                  		dc.w $120, $C0
0001A400 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A404 0010 0000                  		dc.w $10, 0
0001A408 0000 0010                  		dc.w 0,	$10
0001A40C 0010 0010                  		dc.w $10, $10
0001A410                            ; ---------------------------------------------------------------------------
0001A410                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A410                            ; ---------------------------------------------------------------------------
0001A410                            Map_obj83:
0001A410                            	include "_maps\obj83.asm"
0001A410                            ; ---------------------------------------------------------------------------
0001A410                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A410                            ; ---------------------------------------------------------------------------
0001A410 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A414 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A418 0000                       		dc.w byte_19D46-Map_obj83
0001A41A 01                         byte_19D1C:	dc.b 1
0001A41B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A420 02                         byte_19D22:	dc.b 2
0001A421 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A426 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A42B 00                         		dc.b 0
0001A42C 02                         byte_19D2E:	dc.b 2
0001A42D F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A432 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A437 00                         		dc.b 0
0001A438 02                         byte_19D3A:	dc.b 2
0001A439 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A43E F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A443 00                         		dc.b 0
0001A444 02                         byte_19D46:	dc.b 2
0001A445 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A44A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A450 00                         		even
0001A450 00                         		even
0001A450                            
0001A450                            ; ===========================================================================
0001A450                            ; ---------------------------------------------------------------------------
0001A450                            ; Object 85 - Eggman (FZ)
0001A450                            ; ---------------------------------------------------------------------------
0001A450                            
0001A450                            Obj85_Delete:
0001A450 4EF9 0000 DC40             		jmp	DeleteObject
0001A456                            ; ===========================================================================
0001A456                            
0001A456                            Obj85:					; XREF: Obj_Index
0001A456 7000                       		moveq	#0,d0
0001A458 1028 0024                  		move.b	$24(a0),d0
0001A45C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A460 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A464                            ; ===========================================================================
0001A464 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A466 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A468 0000                       		dc.w loc_1A38E-Obj85_Index
0001A46A 0000                       		dc.w loc_1A346-Obj85_Index
0001A46C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A46E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A470 0000                       		dc.w loc_1A264-Obj85_Index
0001A472                            
0001A472 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A478 0001 A148                  		dc.l Map_obj82		; mappings pointer
0001A47C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A482 0000 0000                  		dc.l Map_obj84
0001A486 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A48C 0000 0000                  		dc.l Map_FZBoss
0001A490 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A496 0001 A148                  		dc.l Map_obj82
0001A49A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A4A0 0001 842A                  		dc.l Map_Eggman
0001A4A4 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A4AA 0001 842A                  		dc.l Map_Eggman
0001A4AE                            
0001A4AE 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A4B3 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A4B8 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A4BD 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A4C2 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A4C7 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A4CC                            ; ===========================================================================
0001A4CC                            
0001A4CC                            Obj85_Main:				; XREF: Obj85_Index
0001A4CC 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A4D0 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A4D4 2248                       		movea.l	a0,a1
0001A4D6 7205                       		moveq	#5,d1
0001A4D8 6000                       		bra.s	Obj85_LoadBoss
0001A4DA                            ; ===========================================================================
0001A4DA                            
0001A4DA                            Obj85_Loop:
0001A4DA 4EB9 0000 E0A0             		jsr	SingleObjLoad2
0001A4E0 6600                       		bne.s	loc_19E20
0001A4E2                            
0001A4E2                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A4E2 12BC 0085                  		move.b	#$85,(a1)
0001A4E6 335A 0008                  		move.w	(a2)+,8(a1)
0001A4EA 335A 000C                  		move.w	(a2)+,$C(a1)
0001A4EE 335A 0002                  		move.w	(a2)+,2(a1)
0001A4F2 235A 0004                  		move.l	(a2)+,4(a1)
0001A4F6 135B 0024                  		move.b	(a3)+,$24(a1)
0001A4FA 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A4FE 135B 0018                  		move.b	(a3)+,$18(a1)
0001A502 135B 0017                  		move.b	(a3)+,$17(a1)
0001A506 135B 0016                  		move.b	(a3)+,$16(a1)
0001A50A 137C 0004 0001             		move.b	#4,1(a1)
0001A510 08E8 0007 0001             		bset	#7,1(a0)
0001A516 2348 0034                  		move.l	a0,$34(a1)
0001A51A 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A51E                            
0001A51E                            loc_19E20:
0001A51E 45E8 0036                  		lea	$36(a0),a2
0001A522 4EB9 0000 E08A             		jsr	SingleObjLoad
0001A528 6600                       		bne.s	loc_19E5A
0001A52A 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A52E 3489                       		move.w	a1,(a2)
0001A530 2348 0034                  		move.l	a0,$34(a1)
0001A534 45E8 0038                  		lea	$38(a0),a2
0001A538 7400                       		moveq	#0,d2
0001A53A 7203                       		moveq	#3,d1
0001A53C                            
0001A53C                            loc_19E3E:
0001A53C 4EB9 0000 E0A0             		jsr	SingleObjLoad2
0001A542 6600                       		bne.s	loc_19E5A
0001A544 34C9                       		move.w	a1,(a2)+
0001A546 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A54A 2348 0034                  		move.l	a0,$34(a1)
0001A54E 1342 0028                  		move.b	d2,$28(a1)
0001A552 5442                       		addq.w	#2,d2
0001A554 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A558                            
0001A558                            loc_19E5A:
0001A558 317C 0000 0034             		move.w	#0,$34(a0)
0001A55E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A564 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A56A                            
0001A56A                            Obj85_Eggman:				; XREF: Obj85_Index
0001A56A 7000                       		moveq	#0,d0
0001A56C 1028 0034                  		move.b	$34(a0),d0
0001A570 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A574 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A578 4EF9 0000 DC04             		jmp	DisplaySprite
0001A57E                            ; ===========================================================================
0001A57E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A582 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A586 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A58A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A58E                            ; ===========================================================================
0001A58E                            
0001A58E                            loc_19E90:				; XREF: off_19E80
0001A58E 4AB8 F680                  		tst.l	($FFFFF680).w
0001A592 6600                       		bne.s	loc_19EA2
0001A594 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A59A 6500                       		bcs.s	loc_19EA2
0001A59C 5428 0034                  		addq.b	#2,$34(a0)
0001A5A0                            
0001A5A0                            loc_19EA2:
0001A5A0 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A5A4 4E75                       		rts	
0001A5A6                            ; ===========================================================================
0001A5A6                            
0001A5A6                            loc_19EA8:				; XREF: off_19E80
0001A5A6 4A68 0030                  		tst.w	$30(a0)
0001A5AA 6A00                       		bpl.s	loc_19F10
0001A5AC 4268 0030                  		clr.w	$30(a0)
0001A5B0 4EB9 0000 2C44             		jsr	(RandomNumber).l
0001A5B6 0240 000C                  		andi.w	#$C,d0
0001A5BA 3200                       		move.w	d0,d1
0001A5BC 5441                       		addq.w	#2,d1
0001A5BE 4A80                       		tst.l	d0
0001A5C0 6A00                       		bpl.s	loc_19EC6
0001A5C2 C141                       		exg	d1,d0
0001A5C4                            
0001A5C4                            loc_19EC6:
0001A5C4 43FA 0000                  		lea	word_19FD6(pc),a1
0001A5C8 3031 0000                  		move.w	(a1,d0.w),d0
0001A5CC 3231 1000                  		move.w	(a1,d1.w),d1
0001A5D0 3140 0030                  		move.w	d0,$30(a0)
0001A5D4 74FF                       		moveq	#-1,d2
0001A5D6 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A5DA 2242                       		movea.l	d2,a1
0001A5DC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5E2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A5E8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A5EC 2242                       		movea.l	d2,a1
0001A5EE 137C 0001 0029             		move.b	#1,$29(a1)
0001A5F4 337C 0000 0030             		move.w	#0,$30(a1)
0001A5FA 317C 0001 0032             		move.w	#1,$32(a0)
0001A600 4228 0035                  		clr.b	$35(a0)
0001A604 303C 00B7                  		move.w	#$B7,d0
0001A608 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A60E                            
0001A60E                            loc_19F10:
0001A60E 4A68 0032                  		tst.w	$32(a0)
0001A612 6B00 0000                  		bmi.w	loc_19FA6
0001A616 08A8 0000 0022             		bclr	#0,$22(a0)
0001A61C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A620 9068 0008                  		sub.w	8(a0),d0
0001A624 6500                       		bcs.s	loc_19F2E
0001A626 08E8 0000 0022             		bset	#0,$22(a0)
0001A62C                            
0001A62C                            loc_19F2E:
0001A62C 323C 002B                  		move.w	#$2B,d1
0001A630 343C 0014                  		move.w	#$14,d2
0001A634 363C 0014                  		move.w	#$14,d3
0001A638 3828 0008                  		move.w	8(a0),d4
0001A63C 4EB9 0000 FFD4             		jsr	SolidObject
0001A642 4A44                       		tst.w	d4
0001A644 6E00                       		bgt.s	loc_19F50
0001A646                            
0001A646                            loc_19F48:
0001A646 4A28 0035                  		tst.b	$35(a0)
0001A64A 6600                       		bne.s	loc_19F88
0001A64C 6000                       		bra.s	loc_19F96
0001A64E                            ; ===========================================================================
0001A64E                            
0001A64E                            loc_19F50:
0001A64E 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A652 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A658 66EC                       		bne.s	loc_19F48
0001A65A 303C 0300                  		move.w	#$300,d0
0001A65E 0828 0000 0022             		btst	#0,$22(a0)
0001A664 6600                       		bne.s	loc_19F6A
0001A666 4440                       		neg.w	d0
0001A668                            
0001A668                            loc_19F6A:
0001A668 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A66C 4A28 0035                  		tst.b	$35(a0)
0001A670 6600                       		bne.s	loc_19F88
0001A672 5328 0021                  		subq.b	#1,$21(a0)
0001A676 117C 0064 0035             		move.b	#$64,$35(a0)
0001A67C 303C 00AC                  		move.w	#$AC,d0
0001A680 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A686                            
0001A686                            loc_19F88:
0001A686 5328 0035                  		subq.b	#1,$35(a0)
0001A68A 6700                       		beq.s	loc_19F96
0001A68C 117C 0003 001C             		move.b	#3,$1C(a0)
0001A692 6000                       		bra.s	loc_19F9C
0001A694                            ; ===========================================================================
0001A694                            
0001A694                            loc_19F96:
0001A694 117C 0001 001C             		move.b	#1,$1C(a0)
0001A69A                            
0001A69A                            loc_19F9C:
0001A69A 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A69E 4EF9 0000 ACCE             		jmp	AnimateSprite
0001A6A4                            ; ===========================================================================
0001A6A4                            
0001A6A4                            loc_19FA6:
0001A6A4 4A28 0021                  		tst.b	$21(a0)
0001A6A8 6700                       		beq.s	loc_19FBC
0001A6AA 5428 0034                  		addq.b	#2,$34(a0)
0001A6AE 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A6B4 4268 0032                  		clr.w	$32(a0)
0001A6B8 4E75                       		rts	
0001A6BA                            ; ===========================================================================
0001A6BA                            
0001A6BA                            loc_19FBC:
0001A6BA 117C 0006 0034             		move.b	#6,$34(a0)
0001A6C0 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A6C6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A6CC 117C 0014 0016             		move.b	#$14,$16(a0)
0001A6D2 4E75                       		rts	
0001A6D4                            ; ===========================================================================
0001A6D4 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A6E4                            ; ===========================================================================
0001A6E4                            
0001A6E4                            loc_19FE6:				; XREF: off_19E80
0001A6E4 70FF                       		moveq	#-1,d0
0001A6E6 3028 0036                  		move.w	$36(a0),d0
0001A6EA 2240                       		movea.l	d0,a1
0001A6EC 4A68 0030                  		tst.w	$30(a0)
0001A6F0 6A00                       		bpl.s	loc_1A000
0001A6F2 4268 0030                  		clr.w	$30(a0)
0001A6F6 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A6FC 6100                       		bsr.s	loc_1A020
0001A6FE                            
0001A6FE                            loc_1A000:
0001A6FE 700F                       		moveq	#$F,d0
0001A700 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A704 6600                       		bne.s	loc_1A00A
0001A706 6100                       		bsr.s	loc_1A020
0001A708                            
0001A708                            loc_1A00A:
0001A708 4A68 0032                  		tst.w	$32(a0)
0001A70C 6700                       		beq.s	locret_1A01E
0001A70E 5528 0034                  		subq.b	#2,$34(a0)
0001A712 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A718 4268 0032                  		clr.w	$32(a0)
0001A71C                            
0001A71C                            locret_1A01E:
0001A71C 4E75                       		rts	
0001A71E                            ; ===========================================================================
0001A71E                            
0001A71E                            loc_1A020:
0001A71E 303C 00B1                  		move.w	#$B1,d0
0001A722 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A728                            ; ===========================================================================
0001A728                            
0001A728                            loc_1A02A:				; XREF: off_19E80
0001A728 117C 0030 0017             		move.b	#$30,$17(a0)
0001A72E 08E8 0000 0022             		bset	#0,$22(a0)
0001A734 4EB9 0000 DBDE             		jsr	SpeedToPos
0001A73A 117C 0006 001A             		move.b	#6,$1A(a0)
0001A740 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A746 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A74C 6500                       		bcs.s	loc_1A070
0001A74E 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A754 5428 0034                  		addq.b	#2,$34(a0)
0001A758 117C 0020 0017             		move.b	#$20,$17(a0)
0001A75E 317C 0100 0010             		move.w	#$100,$10(a0)
0001A764 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A76A 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A76E                            
0001A76E                            loc_1A070:
0001A76E 6000 0000                  		bra.w	loc_1A166
0001A772                            ; ===========================================================================
0001A772                            
0001A772                            loc_1A074:				; XREF: off_19E80
0001A772 08E8 0000 0022             		bset	#0,$22(a0)
0001A778 117C 0004 001C             		move.b	#4,$1C(a0)
0001A77E 4EB9 0000 DBDE             		jsr	SpeedToPos
0001A784 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A78A 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A790 6500                       		bcs.s	loc_1A09A
0001A792 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A798                            
0001A798                            loc_1A09A:
0001A798 317C 0400 0010             		move.w	#$400,$10(a0)
0001A79E 3028 0008                  		move.w	8(a0),d0
0001A7A2 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A7A6 6A00                       		bpl.s	loc_1A0B4
0001A7A8 317C 0500 0010             		move.w	#$500,$10(a0)
0001A7AE 6000 0000                  		bra.w	loc_1A0F2
0001A7B2                            ; ===========================================================================
0001A7B2                            
0001A7B2                            loc_1A0B4:
0001A7B2 0440 0070                  		subi.w	#$70,d0
0001A7B6 6500                       		bcs.s	loc_1A0F2
0001A7B8 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A7BE 5140                       		subq.w	#8,d0
0001A7C0 6500                       		bcs.s	loc_1A0F2
0001A7C2 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A7C8 5140                       		subq.w	#8,d0
0001A7CA 6500                       		bcs.s	loc_1A0F2
0001A7CC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A7D2 5140                       		subq.w	#8,d0
0001A7D4 6500                       		bcs.s	loc_1A0F2
0001A7D6 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A7DC 5140                       		subq.w	#8,d0
0001A7DE 6500                       		bcs.s	loc_1A0F2
0001A7E0 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A7E6 0440 0038                  		subi.w	#$38,d0
0001A7EA 6500                       		bcs.s	loc_1A0F2
0001A7EC 4268 0010                  		clr.w	$10(a0)
0001A7F0                            
0001A7F0                            loc_1A0F2:
0001A7F0 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A7F6 6500                       		bcs.s	loc_1A110
0001A7F8 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A7FE 317C 0240 0010             		move.w	#$240,$10(a0)
0001A804 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A80A 5428 0034                  		addq.b	#2,$34(a0)
0001A80E                            
0001A80E                            loc_1A110:
0001A80E 6000                       		bra.s	loc_1A15C
0001A810                            ; ===========================================================================
0001A810                            
0001A810                            loc_1A112:				; XREF: off_19E80
0001A810 4EB9 0000 DBDE             		jsr	SpeedToPos
0001A816 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A81C 6500                       		bcs.s	loc_1A124
0001A81E 4268 0010                  		clr.w	$10(a0)
0001A822                            
0001A822                            loc_1A124:
0001A822 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A828 4A68 0012                  		tst.w	$12(a0)
0001A82C 6B00                       		bmi.s	loc_1A142
0001A82E 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A834 6500                       		bcs.s	loc_1A142
0001A836 317C 0592 000C             		move.w	#$592,$C(a0)
0001A83C 4268 0012                  		clr.w	$12(a0)
0001A840                            
0001A840                            loc_1A142:
0001A840 3028 0010                  		move.w	$10(a0),d0
0001A844 8068 0012                  		or.w	$12(a0),d0
0001A848 6600                       		bne.s	loc_1A15C
0001A84A 5428 0034                  		addq.b	#2,$34(a0)
0001A84E 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A854 117C 0001 0021             		move.b	#1,$21(a0)
0001A85A                            
0001A85A                            loc_1A15C:
0001A85A 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A85E 4EB9 0000 ACCE             		jsr	AnimateSprite
0001A864                            
0001A864                            loc_1A166:
0001A864 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A86A 6C00                       		bge.s	loc_1A172
0001A86C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A870                            
0001A870                            loc_1A172:
0001A870 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A876 6C00                       		bge.s	locret_1A190
0001A878 323C 001B                  		move.w	#$1B,d1
0001A87C 343C 0070                  		move.w	#$70,d2
0001A880 363C 0071                  		move.w	#$71,d3
0001A884 3828 0008                  		move.w	8(a0),d4
0001A888 4EF9 0000 FFD4             		jmp	SolidObject
0001A88E                            ; ===========================================================================
0001A88E                            
0001A88E                            locret_1A190:
0001A88E 4E75                       		rts	
0001A890                            ; ===========================================================================
0001A890                            
0001A890                            loc_1A192:				; XREF: off_19E80
0001A890 217C 0001 842A 0004        		move.l	#Map_Eggman,4(a0)
0001A898 317C 0400 0002             		move.w	#$400,2(a0)
0001A89E 117C 0000 001C             		move.b	#0,$1C(a0)
0001A8A4 08E8 0000 0022             		bset	#0,$22(a0)
0001A8AA 4EB9 0000 DBDE             		jsr	SpeedToPos
0001A8B0 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A8B6 6400                       		bcc.s	loc_1A1D0
0001A8B8 317C 0180 0010             		move.w	#$180,$10(a0)
0001A8BE 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A8C4 117C 000F 0020             		move.b	#$F,$20(a0)
0001A8CA 5428 0034                  		addq.b	#2,$34(a0)
0001A8CE                            
0001A8CE                            loc_1A1D0:
0001A8CE 6000 FF8A                  		bra.w	loc_1A15C
0001A8D2                            ; ===========================================================================
0001A8D2                            
0001A8D2                            loc_1A1D4:				; XREF: off_19E80
0001A8D2 08E8 0000 0022             		bset	#0,$22(a0)
0001A8D8 4EB9 0000 DBDE             		jsr	SpeedToPos
0001A8DE 4A68 0030                  		tst.w	$30(a0)
0001A8E2 6600                       		bne.s	loc_1A1FC
0001A8E4 4A28 0020                  		tst.b	$20(a0)
0001A8E8 6600                       		bne.s	loc_1A216
0001A8EA 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A8F0 303C 00AC                  		move.w	#$AC,d0
0001A8F4 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A8FA                            
0001A8FA                            loc_1A1FC:
0001A8FA 5368 0030                  		subq.w	#1,$30(a0)
0001A8FE 6600                       		bne.s	loc_1A216
0001A900 4A28 0022                  		tst.b	$22(a0)
0001A904 6A00                       		bpl.s	loc_1A210
0001A906 317C 0060 0012             		move.w	#$60,$12(a0)
0001A90C 6000                       		bra.s	loc_1A216
0001A90E                            ; ===========================================================================
0001A90E                            
0001A90E                            loc_1A210:
0001A90E 117C 000F 0020             		move.b	#$F,$20(a0)
0001A914                            
0001A914                            loc_1A216:
0001A914 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A91A 6D00                       		blt.s	loc_1A23A
0001A91C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A922 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A928 4278 D014                  		clr.w	($FFFFD014).w
0001A92C 4A68 0012                  		tst.w	$12(a0)
0001A930 6A00                       		bpl.s	loc_1A248
0001A932 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A938                            
0001A938                            loc_1A23A:
0001A938 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A93E 6D00                       		blt.s	loc_1A248
0001A940 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A946                            
0001A946                            loc_1A248:
0001A946 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A94C 6500                       		bcs.s	loc_1A260
0001A94E 4A28 0001                  		tst.b	1(a0)
0001A952 6B00                       		bmi.s	loc_1A260
0001A954 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A95A 6000 FAF4                  		bra.w	Obj85_Delete
0001A95E                            ; ===========================================================================
0001A95E                            
0001A95E                            loc_1A260:
0001A95E 6000 FEFA                  		bra.w	loc_1A15C
0001A962                            ; ===========================================================================
0001A962                            
0001A962                            loc_1A264:				; XREF: Obj85_Index
0001A962 2268 0034                  		movea.l	$34(a0),a1
0001A966 1011                       		move.b	(a1),d0
0001A968 B010                       		cmp.b	(a0),d0
0001A96A 6600 FAE4                  		bne.w	Obj85_Delete
0001A96E 117C 0007 001C             		move.b	#7,$1C(a0)
0001A974 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A97A 6C00                       		bge.s	loc_1A280
0001A97C 6000                       		bra.s	loc_1A2A6
0001A97E                            ; ===========================================================================
0001A97E                            
0001A97E                            loc_1A280:
0001A97E 4A69 0010                  		tst.w	$10(a1)
0001A982 6700                       		beq.s	loc_1A28C
0001A984 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A98A                            
0001A98A                            loc_1A28C:
0001A98A 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A98E 4EB9 0000 ACCE             		jsr	AnimateSprite
0001A994                            
0001A994                            loc_1A296:
0001A994 2268 0034                  		movea.l	$34(a0),a1
0001A998 3169 0008 0008             		move.w	8(a1),8(a0)
0001A99E 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A9A4                            
0001A9A4                            loc_1A2A6:
0001A9A4 2268 0034                  		movea.l	$34(a0),a1
0001A9A8 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A9AE 7003                       		moveq	#3,d0
0001A9B0 C028 0022                  		and.b	$22(a0),d0
0001A9B4 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A9BA 8128 0001                  		or.b	d0,1(a0)
0001A9BE 4EF9 0000 DC04             		jmp	DisplaySprite
0001A9C4                            ; ===========================================================================
0001A9C4                            
0001A9C4                            loc_1A2C6:				; XREF: Obj85_Index
0001A9C4 2268 0034                  		movea.l	$34(a0),a1
0001A9C8 1011                       		move.b	(a1),d0
0001A9CA B010                       		cmp.b	(a0),d0
0001A9CC 6600 FA82                  		bne.w	Obj85_Delete
0001A9D0 0CA9 0001 842A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9D8 6700                       		beq.s	loc_1A2E4
0001A9DA 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A9E0 60C2                       		bra.s	loc_1A2A6
0001A9E2                            ; ===========================================================================
0001A9E2                            
0001A9E2                            loc_1A2E4:
0001A9E2 117C 0001 001C             		move.b	#1,$1C(a0)
0001A9E8 4A29 0021                  		tst.b	$21(a1)
0001A9EC 6F00                       		ble.s	loc_1A312
0001A9EE 117C 0006 001C             		move.b	#6,$1C(a0)
0001A9F4 217C 0001 842A 0004        		move.l	#Map_Eggman,4(a0)
0001A9FC 317C 0400 0002             		move.w	#$400,2(a0)
0001AA02 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001AA06 4EB9 0000 ACCE             		jsr	AnimateSprite
0001AA0C 6000 FF86                  		bra.w	loc_1A296
0001AA10                            ; ===========================================================================
0001AA10                            
0001AA10                            loc_1A312:
0001AA10 4A28 0001                  		tst.b	1(a0)
0001AA14 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AA18 6100 D53C                  		bsr.w	BossDefeated
0001AA1C 117C 0002 0018             		move.b	#2,$18(a0)
0001AA22 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA28 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AA30 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AA36 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AA3A 4EB9 0000 ACCE             		jsr	AnimateSprite
0001AA40 6000 FF52                  		bra.w	loc_1A296
0001AA44                            ; ===========================================================================
0001AA44                            
0001AA44                            loc_1A346:				; XREF: Obj85_Index
0001AA44 08E8 0000 0022             		bset	#0,$22(a0)
0001AA4A 2268 0034                  		movea.l	$34(a0),a1
0001AA4E 0CA9 0001 842A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AA56 6700                       		beq.s	loc_1A35E
0001AA58 6000 FF4A                  		bra.w	loc_1A2A6
0001AA5C                            ; ===========================================================================
0001AA5C                            
0001AA5C                            loc_1A35E:
0001AA5C 3169 0008 0008             		move.w	8(a1),8(a0)
0001AA62 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AA68 4A28 001E                  		tst.b	$1E(a0)
0001AA6C 6600                       		bne.s	loc_1A376
0001AA6E 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AA74                            
0001AA74                            loc_1A376:
0001AA74 5328 001E                  		subq.b	#1,$1E(a0)
0001AA78 6E00                       		bgt.s	loc_1A38A
0001AA7A 5228 001A                  		addq.b	#1,$1A(a0)
0001AA7E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AA84 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AA88                            
0001AA88                            loc_1A38A:
0001AA88 6000 FF0A                  		bra.w	loc_1A296
0001AA8C                            ; ===========================================================================
0001AA8C                            
0001AA8C                            loc_1A38E:				; XREF: Obj85_Index
0001AA8C 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AA92 3038 D008                  		move.w	($FFFFD008).w,d0
0001AA96 9068 0008                  		sub.w	8(a0),d0
0001AA9A 6500                       		bcs.s	loc_1A3A6
0001AA9C 4A28 0001                  		tst.b	1(a0)
0001AAA0 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AAA4                            
0001AAA4                            loc_1A3A6:
0001AAA4 4EF9 0000 DC04             		jmp	DisplaySprite
0001AAAA                            ; ===========================================================================
0001AAAA                            
0001AAAA                            loc_1A3AC:				; XREF: Obj85_Index
0001AAAA 117C 0000 001A             		move.b	#0,$1A(a0)
0001AAB0 08E8 0000 0022             		bset	#0,$22(a0)
0001AAB6 2268 0034                  		movea.l	$34(a0),a1
0001AABA 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AAC0 6600                       		bne.s	loc_1A3D0
0001AAC2 0CA9 0001 842A 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AACA 6700 F984                  		beq.w	Obj85_Delete
0001AACE                            
0001AACE                            loc_1A3D0:
0001AACE 6000 FED4                  		bra.w	loc_1A2A6
0001AAD2                            ; ===========================================================================
0001AAD2                            Ani_obj85:
0001AAD2                            	include "_anim\obj85.asm"
0001AAD2                            ; ---------------------------------------------------------------------------
0001AAD2                            ; Animation script - Eggman (FZ)
0001AAD2                            ; ---------------------------------------------------------------------------
0001AAD2 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AAD4 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AAD8                            		even
0001AAD8                            		even
0001AAD8                            
0001AAD8                            Map_Eggman2:
0001AAD8                            	include "_maps\Eggman2.asm"
0001AAD8                            ; ---------------------------------------------------------------------------
0001AAD8                            ; Sprite mappings - Eggman (FZ)
0001AAD8                            ; ---------------------------------------------------------------------------
0001AAD8 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AADA 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AADC 06                         byte_1A3DE:	dc.b 6
0001AADD E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AAE2 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AAE7 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AAEC FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AAF1 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AAF6 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AAFB 06                         byte_1A3FD:	dc.b 6
0001AAFC E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AB01 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AB06 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AB0B FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AB10 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AB15 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AB1A                            		even
0001AB1A                            		even
0001AB1A                            
0001AB1A                            Map_FZBoss:
0001AB1A                            	include "_maps\FZ boss.asm"
0001AB1A                            ; ---------------------------------------------------------------------------
0001AB1A                            ; Sprite mappings - boss (FZ)
0001AB1A                            ; ---------------------------------------------------------------------------
0001AB1A 0000                       		dc.w byte_1A422-Map_FZBoss
0001AB1C 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AB1E 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AB20 02                         byte_1A422:	dc.b 2
0001AB21 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AB26 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AB2B 03                         byte_1A42D:	dc.b 3
0001AB2C 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AB31 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AB36 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AB3B 02                         byte_1A43D:	dc.b 2
0001AB3C 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AB41 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AB46                            		even
0001AB46                            		even
0001AB46                            
0001AB46                            ; ===========================================================================
0001AB46                            
0001AB46                            Obj84_Delete:
0001AB46 4EF9 0000 DC40             		jmp	DeleteObject
0001AB4C                            ; ===========================================================================
0001AB4C                            ; ---------------------------------------------------------------------------
0001AB4C                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AB4C                            ; ---------------------------------------------------------------------------
0001AB4C                            
0001AB4C                            Obj84:					; XREF: Obj_Index
0001AB4C 7000                       		moveq	#0,d0
0001AB4E 1028 0024                  		move.b	$24(a0),d0
0001AB52 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AB56 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AB5A                            ; ===========================================================================
0001AB5A 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AB5C 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AB5E 0000                       		dc.w loc_1A57E-Obj84_Index
0001AB60                            
0001AB60 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AB64 2550 0620                  		dc.w $2550, $620
0001AB68 2490 04C0                  		dc.w $2490, $4C0
0001AB6C 2510 04C0                  		dc.w $2510, $4C0
0001AB70                            ; ===========================================================================
0001AB70                            
0001AB70                            Obj84_Main:				; XREF: Obj84_Index
0001AB70 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AB74 7000                       		moveq	#0,d0
0001AB76 1028 0028                  		move.b	$28(a0),d0
0001AB7A D040                       		add.w	d0,d0
0001AB7C D2C0                       		adda.w	d0,a1
0001AB7E 117C 0004 0001             		move.b	#4,1(a0)
0001AB84 08E8 0007 0001             		bset	#7,1(a0)
0001AB8A 08E8 0004 0001             		bset	#4,1(a0)
0001AB90 317C 0300 0002             		move.w	#$300,2(a0)
0001AB96 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AB9E 3159 0008                  		move.w	(a1)+,8(a0)
0001ABA2 3151 000C                  		move.w	(a1),$C(a0)
0001ABA6 3159 0038                  		move.w	(a1)+,$38(a0)
0001ABAA 117C 0020 0016             		move.b	#$20,$16(a0)
0001ABB0 117C 0060 0017             		move.b	#$60,$17(a0)
0001ABB6 117C 0020 0019             		move.b	#$20,$19(a0)
0001ABBC 117C 0060 0016             		move.b	#$60,$16(a0)
0001ABC2 117C 0003 0018             		move.b	#3,$18(a0)
0001ABC8 5428 0024                  		addq.b	#2,$24(a0)
0001ABCC                            
0001ABCC                            loc_1A4CE:				; XREF: Obj84_Index
0001ABCC 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ABD2 6F00                       		ble.s	loc_1A4DC
0001ABD4 08E8 0001 0001             		bset	#1,1(a0)
0001ABDA                            
0001ABDA                            loc_1A4DC:
0001ABDA 42A8 003C                  		clr.l	$3C(a0)
0001ABDE 4A28 0029                  		tst.b	$29(a0)
0001ABE2 6700                       		beq.s	loc_1A4EA
0001ABE4 5428 0024                  		addq.b	#2,$24(a0)
0001ABE8                            
0001ABE8                            loc_1A4EA:
0001ABE8 2028 003C                  		move.l	$3C(a0),d0
0001ABEC 2228 0038                  		move.l	$38(a0),d1
0001ABF0 D280                       		add.l	d0,d1
0001ABF2 4841                       		swap	d1
0001ABF4 3141 000C                  		move.w	d1,$C(a0)
0001ABF8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001ABFE 6600                       		bne.s	loc_1A524
0001AC00 4A68 0030                  		tst.w	$30(a0)
0001AC04 6A00                       		bpl.s	loc_1A524
0001AC06 70F6                       		moveq	#-$A,d0
0001AC08 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AC0E 6F00                       		ble.s	loc_1A514
0001AC10 700E                       		moveq	#$E,d0
0001AC12                            
0001AC12                            loc_1A514:
0001AC12 D240                       		add.w	d0,d1
0001AC14 2268 0034                  		movea.l	$34(a0),a1
0001AC18 3341 000C                  		move.w	d1,$C(a1)
0001AC1C 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC22                            
0001AC22                            loc_1A524:
0001AC22 323C 002B                  		move.w	#$2B,d1
0001AC26 343C 0060                  		move.w	#$60,d2
0001AC2A 363C 0061                  		move.w	#$61,d3
0001AC2E 3828 0008                  		move.w	8(a0),d4
0001AC32 4EB9 0000 FFD4             		jsr	SolidObject
0001AC38 7000                       		moveq	#0,d0
0001AC3A 3228 003C                  		move.w	$3C(a0),d1
0001AC3E 6A00                       		bpl.s	loc_1A550
0001AC40 4441                       		neg.w	d1
0001AC42 5141                       		subq.w	#8,d1
0001AC44 6500                       		bcs.s	loc_1A55C
0001AC46 5200                       		addq.b	#1,d0
0001AC48 E841                       		asr.w	#4,d1
0001AC4A D041                       		add.w	d1,d0
0001AC4C 6000                       		bra.s	loc_1A55C
0001AC4E                            ; ===========================================================================
0001AC4E                            
0001AC4E                            loc_1A550:
0001AC4E 0441 0027                  		subi.w	#$27,d1
0001AC52 6500                       		bcs.s	loc_1A55C
0001AC54 5200                       		addq.b	#1,d0
0001AC56 E841                       		asr.w	#4,d1
0001AC58 D041                       		add.w	d1,d0
0001AC5A                            
0001AC5A                            loc_1A55C:
0001AC5A 1140 001A                  		move.b	d0,$1A(a0)
0001AC5E 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC62 9068 0008                  		sub.w	8(a0),d0
0001AC66 6B00                       		bmi.s	loc_1A578
0001AC68 0440 0140                  		subi.w	#$140,d0
0001AC6C 6B00                       		bmi.s	loc_1A578
0001AC6E 4A28 0001                  		tst.b	1(a0)
0001AC72 6A00 FED2                  		bpl.w	Obj84_Delete
0001AC76                            
0001AC76                            loc_1A578:
0001AC76 4EF9 0000 DC04             		jmp	DisplaySprite
0001AC7C                            ; ===========================================================================
0001AC7C                            
0001AC7C                            loc_1A57E:				; XREF: Obj84_Index
0001AC7C 7000                       		moveq	#0,d0
0001AC7E 1028 0028                  		move.b	$28(a0),d0
0001AC82 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AC86 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AC8A 6000 FF5C                  		bra.w	loc_1A4EA
0001AC8E                            ; ===========================================================================
0001AC8E 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AC90 0000                       		dc.w loc_1A598-off_1A590
0001AC92 0000                       		dc.w loc_1A604-off_1A590
0001AC94 0000                       		dc.w loc_1A604-off_1A590
0001AC96                            ; ===========================================================================
0001AC96                            
0001AC96                            loc_1A598:				; XREF: off_1A590
0001AC96 4A28 0029                  		tst.b	$29(a0)
0001AC9A 6600                       		bne.s	loc_1A5D4
0001AC9C 2268 0034                  		movea.l	$34(a0),a1
0001ACA0 4A29 0021                  		tst.b	$21(a1)
0001ACA4 6600                       		bne.s	loc_1A5B4
0001ACA6 6100 D2AE                  		bsr.w	BossDefeated
0001ACAA 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ACB2                            
0001ACB2                            loc_1A5B4:
0001ACB2 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ACBA 6400                       		bcc.s	locret_1A602
0001ACBC 42A8 003C                  		clr.l	$3C(a0)
0001ACC0 2268 0034                  		movea.l	$34(a0),a1
0001ACC4 5369 0032                  		subq.w	#1,$32(a1)
0001ACC8 4269 0030                  		clr.w	$30(a1)
0001ACCC 5528 0024                  		subq.b	#2,$24(a0)
0001ACD0 4E75                       		rts	
0001ACD2                            ; ===========================================================================
0001ACD2                            
0001ACD2                            loc_1A5D4:
0001ACD2 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ACD8 6C00                       		bge.s	loc_1A5E4
0001ACDA 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ACE2                            
0001ACE2                            loc_1A5E4:
0001ACE2 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ACEA 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ACF0 6E00                       		bgt.s	locret_1A602
0001ACF2 4268 003E                  		clr.w	$3E(a0)
0001ACF6 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ACFC 4228 0029                  		clr.b	$29(a0)
0001AD00                            
0001AD00                            locret_1A602:
0001AD00 4E75                       		rts	
0001AD02                            ; ===========================================================================
0001AD02                            
0001AD02                            loc_1A604:				; XREF: off_1A590
0001AD02 08E8 0001 0001             		bset	#1,1(a0)
0001AD08 4A28 0029                  		tst.b	$29(a0)
0001AD0C 6600                       		bne.s	loc_1A646
0001AD0E 2268 0034                  		movea.l	$34(a0),a1
0001AD12 4A29 0021                  		tst.b	$21(a1)
0001AD16 6600                       		bne.s	loc_1A626
0001AD18 6100 D23C                  		bsr.w	BossDefeated
0001AD1C 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AD24                            
0001AD24                            loc_1A626:
0001AD24 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AD2C 6400                       		bcc.s	locret_1A674
0001AD2E 42A8 003C                  		clr.l	$3C(a0)
0001AD32 2268 0034                  		movea.l	$34(a0),a1
0001AD36 5369 0032                  		subq.w	#1,$32(a1)
0001AD3A 4269 0030                  		clr.w	$30(a1)
0001AD3E 5528 0024                  		subq.b	#2,$24(a0)
0001AD42 4E75                       		rts	
0001AD44                            ; ===========================================================================
0001AD44                            
0001AD44                            loc_1A646:
0001AD44 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AD4A 6D00                       		blt.s	loc_1A656
0001AD4C 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AD54                            
0001AD54                            loc_1A656:
0001AD54 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AD5C 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AD62 6D00                       		blt.s	locret_1A674
0001AD64 4268 003E                  		clr.w	$3E(a0)
0001AD68 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AD6E 4228 0029                  		clr.b	$29(a0)
0001AD72                            
0001AD72                            locret_1A674:
0001AD72 4E75                       		rts	
0001AD74                            ; ===========================================================================
0001AD74                            ; ---------------------------------------------------------------------------
0001AD74                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AD74                            ; ---------------------------------------------------------------------------
0001AD74                            Map_obj84:
0001AD74                            	include "_maps\obj84.asm"
0001AD74                            ; ---------------------------------------------------------------------------
0001AD74                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AD74                            ; ---------------------------------------------------------------------------
0001AD74 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AD78 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AD7C 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AD80 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AD84 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AD88 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AD8C 06                         byte_1A68E:	dc.b 6
0001AD8D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD92 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD97 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD9C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ADA1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ADA6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADAB 08                         byte_1A6AD:	dc.b 8
0001ADAC A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ADB1 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ADB6 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ADBB B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ADC0 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ADC5 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADCA D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ADCF D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ADD4 0A                         byte_1A6D6:	dc.b $A
0001ADD5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ADDA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ADDF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ADE4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ADE9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ADEE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADF3 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ADF8 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ADFD F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AE02 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AE07 0C                         byte_1A709:	dc.b $C
0001AE08 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE0D A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE12 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE17 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE1C B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE21 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE26 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE2B D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE30 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AE35 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AE3A 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AE3F 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AE44 0D                         byte_1A746:	dc.b $D
0001AE45 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE4A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE4F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE54 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE59 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE5E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE63 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE68 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE6D F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AE72 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AE77 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AE7C 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AE81 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AE86 0E                         byte_1A788:	dc.b $E
0001AE87 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE8C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE91 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE96 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE9B B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEA0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEA5 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AEAA D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AEAF F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AEB4 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AEB9 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AEBE 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AEC3 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AEC8 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AECD 02                         byte_1A7CF:	dc.b 2
0001AECE F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AED3 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AED8                            		even
0001AED8                            		even
0001AED8                            
0001AED8                            ; ===========================================================================
0001AED8                            ; ---------------------------------------------------------------------------
0001AED8                            ; Object 86 - energy balls (FZ)
0001AED8                            ; ---------------------------------------------------------------------------
0001AED8                            
0001AED8                            Obj86:					; XREF: Obj_Index
0001AED8 7000                       		moveq	#0,d0
0001AEDA 1028 0024                  		move.b	$24(a0),d0
0001AEDE 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AEE2 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AEE6                            ; ===========================================================================
0001AEE6 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AEE8 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AEEA 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AEEC 0000                       		dc.w loc_1A962-Obj86_Index
0001AEEE 0000                       		dc.w loc_1A982-Obj86_Index
0001AEF0                            ; ===========================================================================
0001AEF0                            
0001AEF0                            Obj86_Main:				; XREF: Obj86_Index
0001AEF0 317C 2588 0008             		move.w	#$2588,8(a0)
0001AEF6 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AEFC 317C 0300 0002             		move.w	#$300,2(a0)
0001AF02 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AF0A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF10 117C 0003 0018             		move.b	#3,$18(a0)
0001AF16 117C 0008 0017             		move.b	#8,$17(a0)
0001AF1C 117C 0008 0016             		move.b	#8,$16(a0)
0001AF22 117C 0004 0001             		move.b	#4,1(a0)
0001AF28 08E8 0007 0001             		bset	#7,1(a0)
0001AF2E 5428 0024                  		addq.b	#2,$24(a0)
0001AF32                            
0001AF32                            Obj86_Generator:			; XREF: Obj86_Index
0001AF32 2268 0034                  		movea.l	$34(a0),a1
0001AF36 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AF3C 6600                       		bne.s	loc_1A850
0001AF3E 10BC 003F                  		move.b	#$3F,(a0)
0001AF42 117C 0000 0024             		move.b	#0,$24(a0)
0001AF48 4EF9 0000 DC04             		jmp	DisplaySprite
0001AF4E                            ; ===========================================================================
0001AF4E                            
0001AF4E                            loc_1A850:
0001AF4E 117C 0000 001C             		move.b	#0,$1C(a0)
0001AF54 4A28 0029                  		tst.b	$29(a0)
0001AF58 6700                       		beq.s	loc_1A86C
0001AF5A 5428 0024                  		addq.b	#2,$24(a0)
0001AF5E 117C 0001 001C             		move.b	#1,$1C(a0)
0001AF64 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AF6A                            
0001AF6A                            loc_1A86C:
0001AF6A 323C 0013                  		move.w	#$13,d1
0001AF6E 343C 0008                  		move.w	#8,d2
0001AF72 363C 0011                  		move.w	#$11,d3
0001AF76 3828 0008                  		move.w	8(a0),d4
0001AF7A 4EB9 0000 FFD4             		jsr	SolidObject
0001AF80 3038 D008                  		move.w	($FFFFD008).w,d0
0001AF84 9068 0008                  		sub.w	8(a0),d0
0001AF88 6B00                       		bmi.s	loc_1A89A
0001AF8A 0440 0140                  		subi.w	#$140,d0
0001AF8E 6B00                       		bmi.s	loc_1A89A
0001AF90 4A28 0001                  		tst.b	1(a0)
0001AF94 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AF98                            
0001AF98                            loc_1A89A:
0001AF98 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AF9C 4EB9 0000 ACCE             		jsr	AnimateSprite
0001AFA2 4EF9 0000 DC04             		jmp	DisplaySprite
0001AFA8                            ; ===========================================================================
0001AFA8                            
0001AFA8                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AFA8 4A28 0029                  		tst.b	$29(a0)
0001AFAC 6700 0000                  		beq.w	loc_1A954
0001AFB0 4228 0029                  		clr.b	$29(a0)
0001AFB4 D068 0030                  		add.w	$30(a0),d0
0001AFB8 0240 001E                  		andi.w	#$1E,d0
0001AFBC D4C0                       		adda.w	d0,a2
0001AFBE 5868 0030                  		addq.w	#4,$30(a0)
0001AFC2 4268 0032                  		clr.w	$32(a0)
0001AFC6 7403                       		moveq	#3,d2
0001AFC8                            
0001AFC8                            Obj86_Loop:
0001AFC8 4EB9 0000 E0A0             		jsr	SingleObjLoad2
0001AFCE 6600 0000                  		bne.w	loc_1A954
0001AFD2 12BC 0086                  		move.b	#$86,(a1)
0001AFD6 3368 0008 0008             		move.w	8(a0),8(a1)
0001AFDC 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AFE2 137C 0008 0024             		move.b	#8,$24(a1)
0001AFE8 337C 2300 0002             		move.w	#$2300,2(a1)
0001AFEE 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AFF6 137C 000C 0016             		move.b	#$C,$16(a1)
0001AFFC 137C 000C 0017             		move.b	#$C,$17(a1)
0001B002 137C 0000 0020             		move.b	#0,$20(a1)
0001B008 137C 0003 0018             		move.b	#3,$18(a1)
0001B00E 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B014 137C 0004 0001             		move.b	#4,1(a1)
0001B01A 08E9 0007 0001             		bset	#7,1(a1)
0001B020 2348 0034                  		move.l	a0,$34(a1)
0001B024 4EB9 0000 2C44             		jsr	(RandomNumber).l
0001B02A 3228 0032                  		move.w	$32(a0),d1
0001B02E C3FC FFB1                  		muls.w	#-$4F,d1
0001B032 0641 2578                  		addi.w	#$2578,d1
0001B036 0240 001F                  		andi.w	#$1F,d0
0001B03A 0440 0010                  		subi.w	#$10,d0
0001B03E D041                       		add.w	d1,d0
0001B040 3340 0030                  		move.w	d0,$30(a1)
0001B044 5268 0032                  		addq.w	#1,$32(a0)
0001B048 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B04E 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B052                            
0001B052                            loc_1A954:
0001B052 4A68 0032                  		tst.w	$32(a0)
0001B056 6600                       		bne.s	loc_1A95E
0001B058 5428 0024                  		addq.b	#2,$24(a0)
0001B05C                            
0001B05C                            loc_1A95E:
0001B05C 6000 FF0C                  		bra.w	loc_1A86C
0001B060                            ; ===========================================================================
0001B060                            
0001B060                            loc_1A962:				; XREF: Obj86_Index
0001B060 117C 0002 001C             		move.b	#2,$1C(a0)
0001B066 4A68 0038                  		tst.w	$38(a0)
0001B06A 6600                       		bne.s	loc_1A97E
0001B06C 117C 0002 0024             		move.b	#2,$24(a0)
0001B072 2268 0034                  		movea.l	$34(a0),a1
0001B076 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B07C                            
0001B07C                            loc_1A97E:
0001B07C 6000 FEEC                  		bra.w	loc_1A86C
0001B080                            ; ===========================================================================
0001B080                            
0001B080                            loc_1A982:				; XREF: Obj86_Index
0001B080 7000                       		moveq	#0,d0
0001B082 1028 0025                  		move.b	$25(a0),d0
0001B086 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B08A 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B08E 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B092 4EB9 0000 ACCE             		jsr	AnimateSprite
0001B098 4EF9 0000 DC04             		jmp	DisplaySprite
0001B09E                            ; ===========================================================================
0001B09E 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B0A0 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B0A2 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B0A4                            ; ===========================================================================
0001B0A4                            
0001B0A4                            loc_1A9A6:				; XREF: Obj86_Index2
0001B0A4 3028 0030                  		move.w	$30(a0),d0
0001B0A8 9068 0008                  		sub.w	8(a0),d0
0001B0AC E940                       		asl.w	#4,d0
0001B0AE 3140 0010                  		move.w	d0,$10(a0)
0001B0B2 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B0B8 5428 0025                  		addq.b	#2,$25(a0)
0001B0BC 4E75                       		rts	
0001B0BE                            ; ===========================================================================
0001B0BE                            
0001B0BE                            loc_1A9C0:				; XREF: Obj86_Index2
0001B0BE 4A68 0010                  		tst.w	$10(a0)
0001B0C2 6700                       		beq.s	loc_1A9E6
0001B0C4 4EB9 0000 DBDE             		jsr	SpeedToPos
0001B0CA 3028 0008                  		move.w	8(a0),d0
0001B0CE 9068 0030                  		sub.w	$30(a0),d0
0001B0D2 6400                       		bcc.s	loc_1A9E6
0001B0D4 4268 0010                  		clr.w	$10(a0)
0001B0D8 D168 0008                  		add.w	d0,8(a0)
0001B0DC 2268 0034                  		movea.l	$34(a0),a1
0001B0E0 5369 0032                  		subq.w	#1,$32(a1)
0001B0E4                            
0001B0E4                            loc_1A9E6:
0001B0E4 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0EA 5368 0028                  		subq.w	#1,$28(a0)
0001B0EE 6600                       		bne.s	locret_1AA1C
0001B0F0 5428 0025                  		addq.b	#2,$25(a0)
0001B0F4 117C 0001 001C             		move.b	#1,$1C(a0)
0001B0FA 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B100 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B106 7000                       		moveq	#0,d0
0001B108 3038 D008                  		move.w	($FFFFD008).w,d0
0001B10C 9068 0008                  		sub.w	8(a0),d0
0001B110 3140 0010                  		move.w	d0,$10(a0)
0001B114 317C 0140 0012             		move.w	#$140,$12(a0)
0001B11A                            
0001B11A                            locret_1AA1C:
0001B11A 4E75                       		rts	
0001B11C                            ; ===========================================================================
0001B11C                            
0001B11C                            loc_1AA1E:				; XREF: Obj86_Index2
0001B11C 4EB9 0000 DBDE             		jsr	SpeedToPos
0001B122 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B128 6400                       		bcc.s	loc_1AA34
0001B12A 5368 0028                  		subq.w	#1,$28(a0)
0001B12E 6700                       		beq.s	loc_1AA34
0001B130 4E75                       		rts	
0001B132                            ; ===========================================================================
0001B132                            
0001B132                            loc_1AA34:
0001B132 2268 0034                  		movea.l	$34(a0),a1
0001B136 5369 0038                  		subq.w	#1,$38(a1)
0001B13A 6000 FA0A                  		bra.w	Obj84_Delete
0001B13E                            ; ===========================================================================
0001B13E                            Ani_obj86:
0001B13E                            	include "_anim\obj86.asm"
0001B13E                            ; ---------------------------------------------------------------------------
0001B13E                            ; Animation script - energy ball launcher (FZ)
0001B13E                            ; ---------------------------------------------------------------------------
0001B13E 0000                       		dc.w byte_1AA46-Ani_obj86
0001B140 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B142 0000                       		dc.w byte_1AA50-Ani_obj86
0001B144 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B148 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B14E 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B154                            		even
0001B154                            		even
0001B154                            
0001B154                            ; ---------------------------------------------------------------------------
0001B154                            ; Sprite mappings - energy ball	launcher (FZ)
0001B154                            ; ---------------------------------------------------------------------------
0001B154                            Map_obj86:
0001B154                            	include "_maps\obj86.asm"
0001B154                            ; ---------------------------------------------------------------------------
0001B154                            ; Sprite mappings - energy ball	launcher (FZ)
0001B154                            ; ---------------------------------------------------------------------------
0001B154 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B158 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B15C 01                         byte_1AA5E:	dc.b 1
0001B15D F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B162 01                         byte_1AA64:	dc.b 1
0001B163 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B168 01                         byte_1AA6A:	dc.b 1
0001B169 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B16E 01                         byte_1AA70:	dc.b 1
0001B16F F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B174                            		even
0001B174                            		even
0001B174                            
0001B174                            Ani_obj86a:
0001B174                            	include "_anim\obj86a.asm"
0001B174                            ; ---------------------------------------------------------------------------
0001B174                            ; Animation script - energy balls (FZ)
0001B174                            ; ---------------------------------------------------------------------------
0001B174 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B176 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B178 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B187 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B196 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B19A 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B1A4                            		even
0001B1A4                            		even
0001B1A4                            
0001B1A4                            ; ---------------------------------------------------------------------------
0001B1A4                            ; Sprite mappings - energy balls (FZ)
0001B1A4                            ; ---------------------------------------------------------------------------
0001B1A4                            Map_obj86a:
0001B1A4                            	include "_maps\obj86a.asm"
0001B1A4                            ; ---------------------------------------------------------------------------
0001B1A4                            ; Sprite mappings - energy balls (FZ)
0001B1A4                            ; ---------------------------------------------------------------------------
0001B1A4 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B1A8 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B1AC 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B1B0 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B1B4 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B1B8 0000                       		dc.w byte_1AB20-Map_obj86a
0001B1BA 02                         byte_1AABC:	dc.b 2
0001B1BB F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B1C0 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B1C5 02                         byte_1AAC7:	dc.b 2
0001B1C6 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B1CB F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B1D0 02                         byte_1AAD2:	dc.b 2
0001B1D1 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B1D6 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B1DB 02                         byte_1AADD:	dc.b 2
0001B1DC F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B1E1 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B1E6 02                         byte_1AAE8:	dc.b 2
0001B1E7 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B1EC 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B1F1 02                         byte_1AAF3:	dc.b 2
0001B1F2 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B1F7 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B1FC 01                         byte_1AAFE:	dc.b 1
0001B1FD F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B202 01                         byte_1AB04:	dc.b 1
0001B203 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B208 02                         byte_1AB0A:	dc.b 2
0001B209 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B20E 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B213 02                         byte_1AB15:	dc.b 2
0001B214 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B219 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B21E 00                         byte_1AB20:	dc.b 0
0001B220 00                         		even
0001B220 00                         		even
0001B220                            
0001B220                            ; ===========================================================================
0001B220                            ; ---------------------------------------------------------------------------
0001B220                            ; Object 3E - prison capsule
0001B220                            ; ---------------------------------------------------------------------------
0001B220                            
0001B220                            Obj3E:					; XREF: Obj_Index
0001B220 7000                       		moveq	#0,d0
0001B222 1028 0024                  		move.b	$24(a0),d0
0001B226 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B22A 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B22E 3028 0008                  		move.w	8(a0),d0
0001B232 0240 FF80                  		andi.w	#$FF80,d0
0001B236 3238 F700                  		move.w	($FFFFF700).w,d1
0001B23A 0441 0080                  		subi.w	#$80,d1
0001B23E 0241 FF80                  		andi.w	#$FF80,d1
0001B242 9041                       		sub.w	d1,d0
0001B244 0C40 0280                  		cmpi.w	#$280,d0
0001B248 6200                       		bhi.s	Obj3E_Delete
0001B24A 4EF9 0000 DC04             		jmp	DisplaySprite
0001B250                            ; ===========================================================================
0001B250                            
0001B250                            Obj3E_Delete:
0001B250 4EF9 0000 DC40             		jmp	DeleteObject
0001B256                            ; ===========================================================================
0001B256 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B258 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B25A 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B25C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B25E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B260 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B262 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B264 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B266                            
0001B266 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B26A 040C 0501                  		dc.b 4,	$C, 5, 1
0001B26E 0610 0403                  		dc.b 6,	$10, 4,	3
0001B272 0810 0305                  		dc.b 8,	$10, 3,	5
0001B276                            ; ===========================================================================
0001B276                            
0001B276                            Obj3E_Main:				; XREF: Obj3E_Index
0001B276 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B27E 317C 049D 0002             		move.w	#$49D,2(a0)
0001B284 117C 0004 0001             		move.b	#4,1(a0)
0001B28A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B290 7000                       		moveq	#0,d0
0001B292 1028 0028                  		move.b	$28(a0),d0
0001B296 E548                       		lsl.w	#2,d0
0001B298 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B29C 1159 0024                  		move.b	(a1)+,$24(a0)
0001B2A0 1159 0019                  		move.b	(a1)+,$19(a0)
0001B2A4 1159 0018                  		move.b	(a1)+,$18(a0)
0001B2A8 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B2AC 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B2B0 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B2B2 117C 0006 0020             		move.b	#6,$20(a0)
0001B2B8 117C 0008 0021             		move.b	#8,$21(a0)
0001B2BE                            
0001B2BE                            Obj3E_Not02:
0001B2BE 4E75                       		rts	
0001B2C0                            ; ===========================================================================
0001B2C0                            
0001B2C0                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B2C0 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B2C6 6700                       		beq.s	Obj3E_ChkOpened
0001B2C8 323C 002B                  		move.w	#$2B,d1
0001B2CC 343C 0018                  		move.w	#$18,d2
0001B2D0 363C 0018                  		move.w	#$18,d3
0001B2D4 3828 0008                  		move.w	8(a0),d4
0001B2D8 4EF9 0000 FFD4             		jmp	SolidObject
0001B2DE                            ; ===========================================================================
0001B2DE                            
0001B2DE                            Obj3E_ChkOpened:
0001B2DE 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B2E2 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B2E4 4228 0025                  		clr.b	$25(a0)
0001B2E8 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B2EE 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B2F4                            
0001B2F4                            Obj3E_DoOpen:
0001B2F4 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B2FA 4E75                       		rts	
0001B2FC                            ; ===========================================================================
0001B2FC                            
0001B2FC                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B2FC 323C 0017                  		move.w	#$17,d1
0001B300 343C 0008                  		move.w	#8,d2
0001B304 363C 0008                  		move.w	#8,d3
0001B308 3828 0008                  		move.w	8(a0),d4
0001B30C 4EB9 0000 FFD4             		jsr	SolidObject
0001B312 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B318 4EB9 0000 ACCE             		jsr	AnimateSprite
0001B31E 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B324 4A28 0025                  		tst.b	$25(a0)
0001B328 6700                       		beq.s	locret_1AC60
0001B32A 5068 000C                  		addq.w	#8,$C(a0)
0001B32E 117C 000A 0024             		move.b	#$A,$24(a0)
0001B334 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B33A 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B33E 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B342 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B348 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B34E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B350 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B356 6000                       		bra.s	Obj3E_ContinueCode
0001B358                            
0001B358                            Obj3E_MoveLeft:
0001B358 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B35E                            
0001B35E                            Obj3E_ContinueCode:
0001B35E 4228 0025                  		clr.b	$25(a0)
0001B362 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B368 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B36E                            
0001B36E                            locret_1AC60:
0001B36E 4E75                       		rts	
0001B370                            ; ===========================================================================
0001B370                            
0001B370                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B370 7007                       		moveq	#7,d0
0001B372 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B376 6600                       		bne.s	loc_1ACA0
0001B378 4EB9 0000 E08A             		jsr	SingleObjLoad
0001B37E 6600                       		bne.s	loc_1ACA0
0001B380 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B384 3368 0008 0008             		move.w	8(a0),8(a1)
0001B38A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B390 4EB9 0000 2C44             		jsr	(RandomNumber).l
0001B396 7200                       		moveq	#0,d1
0001B398 1200                       		move.b	d0,d1
0001B39A E409                       		lsr.b	#2,d1
0001B39C 0441 0020                  		subi.w	#$20,d1
0001B3A0 D369 0008                  		add.w	d1,8(a1)
0001B3A4 E048                       		lsr.w	#8,d0
0001B3A6 E608                       		lsr.b	#3,d0
0001B3A8 D169 000C                  		add.w	d0,$C(a1)
0001B3AC                            
0001B3AC                            loc_1ACA0:
0001B3AC 5368 001E                  		subq.w	#1,$1E(a0)
0001B3B0 6700                       		beq.s	Obj3E_MakeAnimal
0001B3B2 4E75                       		rts	
0001B3B4                            ; ===========================================================================
0001B3B4                            
0001B3B4                            Obj3E_MakeAnimal:
0001B3B4 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B3BA 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B3C0 117C 0006 001A             		move.b	#6,$1A(a0)
0001B3C6 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B3CC 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B3D2 7C07                       		moveq	#7,d6
0001B3D4 3A3C 009A                  		move.w	#$9A,d5
0001B3D8 78E4                       		moveq	#-$1C,d4
0001B3DA                            
0001B3DA                            Obj3E_Loop:
0001B3DA 4EB9 0000 E08A             		jsr	SingleObjLoad
0001B3E0 6600                       		bne.s	locret_1ACF8
0001B3E2 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B3E6 3368 0008 0008             		move.w	8(a0),8(a1)
0001B3EC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B3F2 D969 0008                  		add.w	d4,8(a1)
0001B3F6 5E44                       		addq.w	#7,d4
0001B3F8 3345 0036                  		move.w	d5,$36(a1)
0001B3FC 5145                       		subq.w	#8,d5
0001B3FE 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B402                            
0001B402                            locret_1ACF8:
0001B402 4E75                       		rts	
0001B404                            ; ===========================================================================
0001B404                            
0001B404                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B404 7007                       		moveq	#7,d0
0001B406 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B40A 6600                       		bne.s	loc_1AD38
0001B40C 4EB9 0000 E08A             		jsr	SingleObjLoad
0001B412 6600                       		bne.s	loc_1AD38
0001B414 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B418 3368 0008 0008             		move.w	8(a0),8(a1)
0001B41E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B424 4EB9 0000 2C44             		jsr	(RandomNumber).l
0001B42A 0240 001F                  		andi.w	#$1F,d0
0001B42E 5D40                       		subq.w	#6,d0
0001B430 4A41                       		tst.w	d1
0001B432 6A00                       		bpl.s	loc_1AD2E
0001B434 4440                       		neg.w	d0
0001B436                            
0001B436                            loc_1AD2E:
0001B436 D169 0008                  		add.w	d0,8(a1)
0001B43A 337C 000C 0036             		move.w	#$C,$36(a1)
0001B440                            
0001B440                            loc_1AD38:
0001B440 5368 001E                  		subq.w	#1,$1E(a0)
0001B444 6600                       		bne.s	locret_1AD48
0001B446 5428 0024                  		addq.b	#2,$24(a0)
0001B44A 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B450                            
0001B450                            locret_1AD48:
0001B450 4E75                       		rts	
0001B452                            ; ===========================================================================
0001B452                            
0001B452                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B452 703E                       		moveq	#$3E,d0
0001B454 7228                       		moveq	#$28,d1
0001B456 7440                       		moveq	#$40,d2
0001B458 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B45C                            
0001B45C                            Obj3E_FindObj28:
0001B45C B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B45E 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B460 D2C2                       		adda.w	d2,a1		; next object RAM
0001B462 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B466                            
0001B466 4EB9 0000 F290             		jsr	GotThroughAct
0001B46C 4EF9 0000 DC40             		jmp	DeleteObject
0001B472                            ; ===========================================================================
0001B472                            
0001B472                            Obj3E_Obj28Found:
0001B472 4E75                       		rts	
0001B474                            ; ===========================================================================
0001B474                            Ani_obj3E:
0001B474                            	include "_anim\obj3E.asm"
0001B474                            ; ---------------------------------------------------------------------------
0001B474                            ; Animation script - prison capsule
0001B474                            ; ---------------------------------------------------------------------------
0001B474 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B476 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B478 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B47C                            		even
0001B47C                            		even
0001B47C                            
0001B47C                            ; ---------------------------------------------------------------------------
0001B47C                            ; Sprite mappings - prison capsule
0001B47C                            ; ---------------------------------------------------------------------------
0001B47C                            Map_obj3E:
0001B47C                            	include "_maps\obj3E.asm"
0001B47C                            ; ---------------------------------------------------------------------------
0001B47C                            ; Sprite mappings - prison capsule
0001B47C                            ; ---------------------------------------------------------------------------
0001B47C 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B480 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B484 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B488 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B48A 07                         byte_1AD82:	dc.b 7
0001B48B E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B490 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B495 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B49A F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B49F F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B4A4 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B4A9 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B4AE 01                         byte_1ADA6:	dc.b 1
0001B4AF F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B4B4 06                         byte_1ADAC:	dc.b 6
0001B4B5 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B4BA 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B4BF 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B4C4 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B4C9 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B4CE 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B4D3 01                         byte_1ADCB:	dc.b 1
0001B4D4 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B4D9 02                         byte_1ADD1:	dc.b 2
0001B4DA E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B4DF 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B4E4 01                         byte_1ADDC:	dc.b 1
0001B4E5 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B4EA 00                         byte_1ADE2:	dc.b 0
0001B4EC 00                         		even
0001B4EC 00                         		even
0001B4EC                            
0001B4EC                            ; ---------------------------------------------------------------------------
0001B4EC                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B4EC                            ; ---------------------------------------------------------------------------
0001B4EC                            
0001B4EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B4EC                            
0001B4EC                            
0001B4EC                            TouchResponse:				; XREF: Obj01
0001B4EC 4E71                       		nop	
0001B4EE 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B4F2 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B4F6 5142                       		subq.w	#8,d2
0001B4F8 7A00                       		moveq	#0,d5
0001B4FA 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B4FE 5705                       		subq.b	#3,d5
0001B500 9645                       		sub.w	d5,d3
0001B502 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B508 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B50A 0643 000C                  		addi.w	#$C,d3
0001B50E 7A0A                       		moveq	#$A,d5
0001B510                            
0001B510                            Touch_NoDuck:
0001B510 383C 0010                  		move.w	#$10,d4
0001B514 DA45                       		add.w	d5,d5
0001B516 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B51A 3C3C 005F                  		move.w	#$5F,d6
0001B51E                            
0001B51E                            Touch_Loop:
0001B51E 4A29 0001                  		tst.b	1(a1)
0001B522 6A00                       		bpl.s	Touch_NextObj
0001B524 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B528 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B52A                            
0001B52A                            Touch_NextObj:
0001B52A 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B52E 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B532                            
0001B532 7000                       		moveq	#0,d0
0001B534 4E75                       		rts	
0001B536                            ; ===========================================================================
0001B536 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B538 0C14                       		dc.b   $C, $14
0001B53A 140C                       		dc.b  $14,  $C
0001B53C 0410                       		dc.b	4, $10
0001B53E 0C12                       		dc.b   $C, $12
0001B540 1010                       		dc.b  $10, $10
0001B542 0606                       		dc.b	6,   6
0001B544 180C                       		dc.b  $18,  $C
0001B546 0C10                       		dc.b   $C, $10
0001B548 100C                       		dc.b  $10,  $C
0001B54A 0808                       		dc.b	8,   8
0001B54C 1410                       		dc.b  $14, $10
0001B54E 1408                       		dc.b  $14,   8
0001B550 0E0E                       		dc.b   $E,  $E
0001B552 1818                       		dc.b  $18, $18
0001B554 2810                       		dc.b  $28, $10
0001B556 1018                       		dc.b  $10, $18
0001B558 0810                       		dc.b	8, $10
0001B55A 2070                       		dc.b  $20, $70
0001B55C 4020                       		dc.b  $40, $20
0001B55E 8020                       		dc.b  $80, $20
0001B560 2020                       		dc.b  $20, $20
0001B562 0808                       		dc.b	8,   8
0001B564 0404                       		dc.b	4,   4
0001B566 2008                       		dc.b  $20,   8
0001B568 0C0C                       		dc.b   $C,  $C
0001B56A 0804                       		dc.b	8,   4
0001B56C 1804                       		dc.b  $18,   4
0001B56E 2804                       		dc.b  $28,   4
0001B570 0408                       		dc.b	4,   8
0001B572 0418                       		dc.b	4, $18
0001B574 0428                       		dc.b	4, $28
0001B576 0420                       		dc.b	4, $20
0001B578 1818                       		dc.b  $18, $18
0001B57A 0C18                       		dc.b   $C, $18
0001B57C 4808                       		dc.b  $48,   8
0001B57E                            ; ===========================================================================
0001B57E                            
0001B57E                            Touch_Height:				; XREF: TouchResponse
0001B57E 0240 003F                  		andi.w	#$3F,d0
0001B582 D040                       		add.w	d0,d0
0001B584 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B588 7200                       		moveq	#0,d1
0001B58A 121A                       		move.b	(a2)+,d1
0001B58C 3029 0008                  		move.w	8(a1),d0
0001B590 9041                       		sub.w	d1,d0
0001B592 9042                       		sub.w	d2,d0
0001B594 6400                       		bcc.s	loc_1AE98
0001B596 D241                       		add.w	d1,d1
0001B598 D041                       		add.w	d1,d0
0001B59A 6500                       		bcs.s	Touch_Width
0001B59C 6000 FF8C                  		bra.w	Touch_NextObj
0001B5A0                            ; ===========================================================================
0001B5A0                            
0001B5A0                            loc_1AE98:
0001B5A0 B044                       		cmp.w	d4,d0
0001B5A2 6200 FF86                  		bhi.w	Touch_NextObj
0001B5A6                            
0001B5A6                            Touch_Width:
0001B5A6 7200                       		moveq	#0,d1
0001B5A8 121A                       		move.b	(a2)+,d1
0001B5AA 3029 000C                  		move.w	$C(a1),d0
0001B5AE 9041                       		sub.w	d1,d0
0001B5B0 9043                       		sub.w	d3,d0
0001B5B2 6400                       		bcc.s	loc_1AEB6
0001B5B4 D241                       		add.w	d1,d1
0001B5B6 D240                       		add.w	d0,d1
0001B5B8 6500                       		bcs.s	Touch_ChkValue
0001B5BA 6000 FF6E                  		bra.w	Touch_NextObj
0001B5BE                            ; ===========================================================================
0001B5BE                            
0001B5BE                            loc_1AEB6:
0001B5BE B045                       		cmp.w	d5,d0
0001B5C0 6200 FF68                  		bhi.w	Touch_NextObj
0001B5C4                            
0001B5C4                            Touch_ChkValue:
0001B5C4 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B5C8 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B5CC 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B5D0 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B5D4 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B5D8 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B5DA 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B5DE                            
0001B5DE                            ; touch	response is $40-$7F
0001B5DE                            
0001B5DE 1029 0020                  		move.b	$20(a1),d0
0001B5E2 0200 003F                  		andi.b	#$3F,d0
0001B5E6 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B5EA 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B5EC 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B5F2 6400 0000                  		bcc.w	locret_1AEF2
0001B5F6 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B5FA                            
0001B5FA                            locret_1AEF2:
0001B5FA 4E75                       		rts	
0001B5FC                            ; ===========================================================================
0001B5FC                            
0001B5FC                            Touch_Monitor:
0001B5FC 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B600 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B602 3028 000C                  		move.w	$C(a0),d0
0001B606 0440 0010                  		subi.w	#$10,d0
0001B60A B069 000C                  		cmp.w	$C(a1),d0
0001B60E 6500                       		bcs.s	locret_1AF2E
0001B610 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B614 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B61A 4A29 0025                  		tst.b	$25(a1)
0001B61E 6600                       		bne.s	locret_1AF2E
0001B620 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B624 4E75                       		rts	
0001B626                            ; ===========================================================================
0001B626                            
0001B626                            loc_1AF1E:
0001B626 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B62C 6600                       		bne.s	locret_1AF2E
0001B62E 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B632 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B636                            
0001B636                            locret_1AF2E:
0001B636 4E75                       		rts	
0001B638                            ; ===========================================================================
0001B638                            
0001B638                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B638 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B63C 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B63E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B644 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B648                            
0001B648                            loc_1AF40:
0001B648 4A29 0021                  		tst.b	$21(a1)
0001B64C 6700                       		beq.s	Touch_KillEnemy
0001B64E 4468 0010                  		neg.w	$10(a0)
0001B652 4468 0012                  		neg.w	$12(a0)
0001B656 E0E8 0010                  		asr	$10(a0)
0001B65A E0E8 0012                  		asr	$12(a0)
0001B65E 137C 0000 0020             		move.b	#0,$20(a1)
0001B664 5329 0021                  		subq.b	#1,$21(a1)
0001B668 6600                       		bne.s	locret_1AF68
0001B66A 08E9 0007 0022             		bset	#7,$22(a1)
0001B670                            
0001B670                            locret_1AF68:
0001B670 4E75                       		rts	
0001B672                            ; ===========================================================================
0001B672                            
0001B672                            Touch_KillEnemy:
0001B672 08E9 0007 0022             		bset	#7,$22(a1)
0001B678 7000                       		moveq	#0,d0
0001B67A 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B67E 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B682 0C40 0006                  		cmpi.w	#6,d0
0001B686 6500                       		bcs.s	loc_1AF82
0001B688 7006                       		moveq	#6,d0
0001B68A                            
0001B68A                            loc_1AF82:
0001B68A 3340 003E                  		move.w	d0,$3E(a1)
0001B68E 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B692 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B698 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B69A 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B69E 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B6A4                            
0001B6A4                            loc_1AF9C:
0001B6A4 6100 0000                  		bsr.w	AddPoints
0001B6A8 7400                       		moveq	#0,d2	; GMZ
0001B6AA 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B6AC 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B6AE                            
0001B6AE                            TouchKE_Explode:
0001B6AE 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B6B2 137C 0000 0024             		move.b	#0,$24(a1)
0001B6B8 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B6BC                            
0001B6BC                            TouchKE_NextExplosion:
0001B6BC 5802                       		addq.b	#4,d2
0001B6BE 4EB9 0000 E08A             		jsr	SingleObjLoad
0001B6C4 6600                       		bne.s	TouchKE_NoExplosion
0001B6C6 336A 0008 0008             		move.w	8(a2),8(a1)
0001B6CC 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B6D2 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B6D6                            
0001B6D6                            TouchKE_NoExplosion:
0001B6D6 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B6D8 4A68 0012                  		tst.w	$12(a0)
0001B6DC 6B00                       		bmi.s	loc_1AFC2
0001B6DE 3028 000C                  		move.w	$C(a0),d0
0001B6E2 B069 000C                  		cmp.w	$C(a1),d0
0001B6E6 6400                       		bcc.s	loc_1AFCA
0001B6E8 4468 0012                  		neg.w	$12(a0)
0001B6EC 4E75                       		rts	
0001B6EE                            ; ===========================================================================
0001B6EE                            
0001B6EE                            loc_1AFC2:
0001B6EE 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B6F4 4E75                       		rts	
0001B6F6                            ; ===========================================================================
0001B6F6                            
0001B6F6                            loc_1AFCA:
0001B6F6 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B6FC 4E75                       		rts	
0001B6FE                            ; ===========================================================================
0001B6FE 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B706                            ; ===========================================================================
0001B706                            
0001B706                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B706 08E9 0007 0022             		bset	#7,$22(a1)
0001B70C                            
0001B70C                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B70C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B710 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B712                            
0001B712                            loc_1AFE6:				; XREF: Touch_Hurt
0001B712 70FF                       		moveq	#-1,d0
0001B714 4E75                       		rts	
0001B716                            ; ===========================================================================
0001B716                            
0001B716                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B716 4E71                       		nop	
0001B718 4A68 0030                  		tst.w	$30(a0)
0001B71C 66F4                       		bne.s	loc_1AFE6
0001B71E 2449                       		movea.l	a1,a2
0001B720                            
0001B720                            ; End of function TouchResponse
0001B720                            ; continue straight to HurtSonic
0001B720                            
0001B720                            ; ---------------------------------------------------------------------------
0001B720                            ; Hurting Sonic	subroutine
0001B720                            ; ---------------------------------------------------------------------------
0001B720                            
0001B720                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B720                            
0001B720                            
0001B720                            HurtSonic:
0001B720 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B724 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B726 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B72A 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B72E 4EB9 0000 E08A             		jsr	SingleObjLoad
0001B734 6600                       		bne.s	Hurt_Shield
0001B736 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B73A 3368 0008 0008             		move.w	8(a0),8(a1)
0001B740 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B746                            
0001B746                            Hurt_Shield:
0001B746 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B74C 117C 0004 0024             		move.b	#4,$24(a0)
0001B752 6100 86E4                  		bsr.w	Sonic_ResetOnFloor
0001B756 08E8 0001 0022             		bset	#1,$22(a0)
0001B75C 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B762 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B768 0828 0006 0022             		btst	#6,$22(a0)
0001B76E 6700                       		beq.s	Hurt_Reverse
0001B770 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B776 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B77C                            
0001B77C                            Hurt_Reverse:
0001B77C 3028 0008                  		move.w	8(a0),d0
0001B780 B06A 0008                  		cmp.w	8(a2),d0
0001B784 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B786 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B78A                            
0001B78A                            Hurt_ChkSpikes:
0001B78A 317C 0000 0014             		move.w	#0,$14(a0)
0001B790 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B796 317C 0078 0030             		move.w	#$78,$30(a0)
0001B79C 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B7A0 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B7A4 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B7A6 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B7AA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B7AC 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B7B0                            
0001B7B0                            Hurt_Sound:
0001B7B0 4EB9 0000 15C6             		jsr	(PlaySound_Special).l
0001B7B6 70FF                       		moveq	#-1,d0
0001B7B8 4E75                       		rts	
0001B7BA                            ; ===========================================================================
0001B7BA                            
0001B7BA                            Hurt_NoRings:
0001B7BA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B7BE 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B7C2                            ; End of function HurtSonic
0001B7C2                            
0001B7C2                            ; ---------------------------------------------------------------------------
0001B7C2                            ; Subroutine to	kill Sonic
0001B7C2                            ; ---------------------------------------------------------------------------
0001B7C2                            
0001B7C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B7C2                            
0001B7C2                            
0001B7C2                            KillSonic:
0001B7C2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B7C6 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B7C8 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B7CE 117C 0006 0024             		move.b	#6,$24(a0)
0001B7D4 6100 8662                  		bsr.w	Sonic_ResetOnFloor
0001B7D8 08E8 0001 0022             		bset	#1,$22(a0)
0001B7DE 317C F900 0012             		move.w	#-$700,$12(a0)
0001B7E4 317C 0000 0010             		move.w	#0,$10(a0)
0001B7EA 317C 0000 0014             		move.w	#0,$14(a0)
0001B7F0 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B7F6 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B7FC 08E8 0007 0002             		bset	#7,2(a0)
0001B802 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B806 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B80A 6600                       		bne.s	Kill_Sound
0001B80C 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B810                            
0001B810                            Kill_Sound:
0001B810 4EB9 0000 15C6             		jsr	(PlaySound_Special).l
0001B816                            
0001B816                            Kill_NoDeath:
0001B816 70FF                       		moveq	#-1,d0
0001B818 4E75                       		rts	
0001B81A                            ; End of function KillSonic
0001B81A                            
0001B81A                            
0001B81A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B81A                            
0001B81A                            
0001B81A                            Touch_Special:				; XREF: Touch_ChkValue
0001B81A 1229 0020                  		move.b	$20(a1),d1
0001B81E 0201 003F                  		andi.b	#$3F,d1
0001B822 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B826 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B828 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B82C 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B82E 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B832 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B834 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B838 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B83A 4E75                       		rts	
0001B83C                            ; ===========================================================================
0001B83C                            
0001B83C                            Touch_CatKiller:			; XREF: Touch_Special
0001B83C 6000 FEC8                  		bra.w	loc_1AFDA
0001B840                            ; ===========================================================================
0001B840                            
0001B840                            Touch_Yadrin:				; XREF: Touch_Special
0001B840 9A40                       		sub.w	d0,d5
0001B842 0C45 0008                  		cmpi.w	#8,d5
0001B846 6400                       		bcc.s	loc_1B144
0001B848 3029 0008                  		move.w	8(a1),d0
0001B84C 5940                       		subq.w	#4,d0
0001B84E 0829 0000 0022             		btst	#0,$22(a1)
0001B854 6700                       		beq.s	loc_1B130
0001B856 0440 0010                  		subi.w	#$10,d0
0001B85A                            
0001B85A                            loc_1B130:
0001B85A 9042                       		sub.w	d2,d0
0001B85C 6400                       		bcc.s	loc_1B13C
0001B85E 0640 0018                  		addi.w	#$18,d0
0001B862 6500                       		bcs.s	loc_1B140
0001B864 6000                       		bra.s	loc_1B144
0001B866                            ; ===========================================================================
0001B866                            
0001B866                            loc_1B13C:
0001B866 B044                       		cmp.w	d4,d0
0001B868 6200                       		bhi.s	loc_1B144
0001B86A                            
0001B86A                            loc_1B140:
0001B86A 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B86E                            ; ===========================================================================
0001B86E                            
0001B86E                            loc_1B144:
0001B86E 6000 FDC8                  		bra.w	Touch_Enemy
0001B872                            ; ===========================================================================
0001B872                            
0001B872                            Touch_D7orE1:				; XREF: Touch_Special
0001B872 5229 0021                  		addq.b	#1,$21(a1)
0001B876 4E75                       		rts	
0001B878                            ; End of function Touch_Special
0001B878                            
0001B878                            ; ---------------------------------------------------------------------------
0001B878                            ; Subroutine to	show the special stage layout
0001B878                            ; ---------------------------------------------------------------------------
0001B878                            
0001B878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B878                            
0001B878                            
0001B878                            SS_ShowLayout:				; XREF: SpecialStage
0001B878 6100 0000                  		bsr.w	SS_AniWallsRings
0001B87C 6100 0000                  		bsr.w	SS_AniItems
0001B880 3F05                       		move.w	d5,-(sp)
0001B882 43F8 8000                  		lea	($FFFF8000).w,a1
0001B886 1038 F780                  		move.b	($FFFFF780).w,d0
0001B88A 0200 00FC                  		andi.b	#$FC,d0
0001B88E 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001B894 3800                       		move.w	d0,d4
0001B896 3A01                       		move.w	d1,d5
0001B898 C9FC 0018                  		muls.w	#$18,d4
0001B89C CBFC 0018                  		muls.w	#$18,d5
0001B8A0 7400                       		moveq	#0,d2
0001B8A2 3438 F700                  		move.w	($FFFFF700).w,d2
0001B8A6 84FC 0018                  		divu.w	#$18,d2
0001B8AA 4842                       		swap	d2
0001B8AC 4442                       		neg.w	d2
0001B8AE 0642 FF4C                  		addi.w	#-$B4,d2
0001B8B2 7600                       		moveq	#0,d3
0001B8B4 3638 F704                  		move.w	($FFFFF704).w,d3
0001B8B8 86FC 0018                  		divu.w	#$18,d3
0001B8BC 4843                       		swap	d3
0001B8BE 4443                       		neg.w	d3
0001B8C0 0643 FF4C                  		addi.w	#-$B4,d3
0001B8C4 3E3C 000F                  		move.w	#$F,d7
0001B8C8                            
0001B8C8                            loc_1B19E:
0001B8C8 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B8CC 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B8D0 4440                       		neg.w	d0
0001B8D2 C3C2                       		muls.w	d2,d1
0001B8D4 C1C3                       		muls.w	d3,d0
0001B8D6 2C00                       		move.l	d0,d6
0001B8D8 DC81                       		add.l	d1,d6
0001B8DA 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B8DE C1C2                       		muls.w	d2,d0
0001B8E0 C3C3                       		muls.w	d3,d1
0001B8E2 D280                       		add.l	d0,d1
0001B8E4 2406                       		move.l	d6,d2
0001B8E6 3C3C 000F                  		move.w	#$F,d6
0001B8EA                            
0001B8EA                            loc_1B1C0:
0001B8EA 2002                       		move.l	d2,d0
0001B8EC E080                       		asr.l	#8,d0
0001B8EE 32C0                       		move.w	d0,(a1)+
0001B8F0 2001                       		move.l	d1,d0
0001B8F2 E080                       		asr.l	#8,d0
0001B8F4 32C0                       		move.w	d0,(a1)+
0001B8F6 D485                       		add.l	d5,d2
0001B8F8 D284                       		add.l	d4,d1
0001B8FA 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B8FE                            
0001B8FE 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B902 0643 0018                  		addi.w	#$18,d3
0001B906 51CF FFC0                  		dbf	d7,loc_1B19E
0001B90A                            
0001B90A 3A1F                       		move.w	(sp)+,d5
0001B90C 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B912 7000                       		moveq	#0,d0
0001B914 3038 F704                  		move.w	($FFFFF704).w,d0
0001B918 80FC 0018                  		divu.w	#$18,d0
0001B91C C0FC 0080                  		mulu.w	#$80,d0
0001B920 D1C0                       		adda.l	d0,a0
0001B922 7000                       		moveq	#0,d0
0001B924 3038 F700                  		move.w	($FFFFF700).w,d0
0001B928 80FC 0018                  		divu.w	#$18,d0
0001B92C D0C0                       		adda.w	d0,a0
0001B92E 49F8 8000                  		lea	($FFFF8000).w,a4
0001B932 3E3C 000F                  		move.w	#$F,d7
0001B936                            
0001B936                            loc_1B20C:
0001B936 3C3C 000F                  		move.w	#$F,d6
0001B93A                            
0001B93A                            loc_1B210:
0001B93A 7000                       		moveq	#0,d0
0001B93C 1018                       		move.b	(a0)+,d0
0001B93E 6700                       		beq.s	loc_1B268
0001B940 0C00 004E                  		cmpi.b	#$4E,d0
0001B944 6200                       		bhi.s	loc_1B268
0001B946 3614                       		move.w	(a4),d3
0001B948 0643 0120                  		addi.w	#$120,d3
0001B94C 0C43 0070                  		cmpi.w	#$70,d3
0001B950 6500                       		bcs.s	loc_1B268
0001B952 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B956 6400                       		bcc.s	loc_1B268
0001B958 342C 0002                  		move.w	2(a4),d2
0001B95C 0642 00F0                  		addi.w	#$F0,d2
0001B960 0C42 0070                  		cmpi.w	#$70,d2
0001B964 6500                       		bcs.s	loc_1B268
0001B966 0C42 0170                  		cmpi.w	#$170,d2
0001B96A 6400                       		bcc.s	loc_1B268
0001B96C 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B972 E748                       		lsl.w	#3,d0
0001B974 4BF5 0000                  		lea	(a5,d0.w),a5
0001B978 225D                       		movea.l	(a5)+,a1
0001B97A 321D                       		move.w	(a5)+,d1
0001B97C D241                       		add.w	d1,d1
0001B97E D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B982 365D                       		movea.w	(a5)+,a3
0001B984 7200                       		moveq	#0,d1
0001B986 1219                       		move.b	(a1)+,d1
0001B988 5301                       		subq.b	#1,d1
0001B98A 6B00                       		bmi.s	loc_1B268
0001B98C 4EB9 0000 DD62             		jsr	sub_D762
0001B992                            
0001B992                            loc_1B268:
0001B992 584C                       		addq.w	#4,a4
0001B994 51CE FFA4                  		dbf	d6,loc_1B210
0001B998                            
0001B998 41E8 0070                  		lea	$70(a0),a0
0001B99C 51CF FF98                  		dbf	d7,loc_1B20C
0001B9A0                            
0001B9A0 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B9A4 0C05 0050                  		cmpi.b	#$50,d5
0001B9A8 6700                       		beq.s	loc_1B288
0001B9AA 24BC 0000 0000             		move.l	#0,(a2)
0001B9B0 4E75                       		rts	
0001B9B2                            ; ===========================================================================
0001B9B2                            
0001B9B2                            loc_1B288:
0001B9B2 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B9B8 4E75                       		rts	
0001B9BA                            ; End of function SS_ShowLayout
0001B9BA                            
0001B9BA                            ; ---------------------------------------------------------------------------
0001B9BA                            ; Subroutine to	animate	walls and rings	in the special stage
0001B9BA                            ; ---------------------------------------------------------------------------
0001B9BA                            
0001B9BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9BA                            
0001B9BA                            
0001B9BA                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B9BA 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B9C0 7000                       		moveq	#0,d0
0001B9C2 1038 F780                  		move.b	($FFFFF780).w,d0
0001B9C6 E408                       		lsr.b	#2,d0
0001B9C8 0240 000F                  		andi.w	#$F,d0
0001B9CC 7223                       		moveq	#$23,d1
0001B9CE                            
0001B9CE                            loc_1B2A4:
0001B9CE 3280                       		move.w	d0,(a1)
0001B9D0 5049                       		addq.w	#8,a1
0001B9D2 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B9D6                            
0001B9D6 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B9DC 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B9E0 6A00                       		bpl.s	loc_1B2C8
0001B9E2 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B9E8 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B9EC 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B9F2                            
0001B9F2                            loc_1B2C8:
0001B9F2 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B9F8 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B9FC 6A00                       		bpl.s	loc_1B2E4
0001B9FE 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BA04 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BA08 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BA0E                            
0001BA0E                            loc_1B2E4:
0001BA0E 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BA12 1340 0138                  		move.b	d0,$138(a1)
0001BA16 1340 0160                  		move.b	d0,$160(a1)
0001BA1A 1340 0148                  		move.b	d0,$148(a1)
0001BA1E 1340 0150                  		move.b	d0,$150(a1)
0001BA22 1340 01D8                  		move.b	d0,$1D8(a1)
0001BA26 1340 01E0                  		move.b	d0,$1E0(a1)
0001BA2A 1340 01E8                  		move.b	d0,$1E8(a1)
0001BA2E 1340 01F0                  		move.b	d0,$1F0(a1)
0001BA32 1340 01F8                  		move.b	d0,$1F8(a1)
0001BA36 1340 0200                  		move.b	d0,$200(a1)
0001BA3A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BA3E 6A00                       		bpl.s	loc_1B326
0001BA40 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BA46 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BA4A 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BA50                            
0001BA50                            loc_1B326:
0001BA50 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BA54 1340 0168                  		move.b	d0,$168(a1)
0001BA58 1340 0170                  		move.b	d0,$170(a1)
0001BA5C 1340 0178                  		move.b	d0,$178(a1)
0001BA60 1340 0180                  		move.b	d0,$180(a1)
0001BA64 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BA68 6A00                       		bpl.s	loc_1B350
0001BA6A 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BA70 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BA74 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BA7A                            
0001BA7A                            loc_1B350:
0001BA7A 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BA80 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BA86 7000                       		moveq	#0,d0
0001BA88 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BA8C D040                       		add.w	d0,d0
0001BA8E 41F0 0000                  		lea	(a0,d0.w),a0
0001BA92 3290                       		move.w	(a0),(a1)
0001BA94 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA9A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BAA0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BAA6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BAAC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BAB2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BAB8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BABE D0FC 0020                  		adda.w	#$20,a0
0001BAC2 D2FC 0048                  		adda.w	#$48,a1
0001BAC6 3290                       		move.w	(a0),(a1)
0001BAC8 3368 0002 0008             		move.w	2(a0),8(a1)
0001BACE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BAD4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BADA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BAE0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BAE6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BAEC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BAF2 D0FC 0020                  		adda.w	#$20,a0
0001BAF6 D2FC 0048                  		adda.w	#$48,a1
0001BAFA 3290                       		move.w	(a0),(a1)
0001BAFC 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB02 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB08 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB0E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB14 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB1A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB20 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB26 D0FC 0020                  		adda.w	#$20,a0
0001BB2A D2FC 0048                  		adda.w	#$48,a1
0001BB2E 3290                       		move.w	(a0),(a1)
0001BB30 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB36 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB3C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB42 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB48 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB4E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB54 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB5A D0FC 0020                  		adda.w	#$20,a0
0001BB5E D2FC 0048                  		adda.w	#$48,a1
0001BB62 4E75                       		rts	
0001BB64                            ; End of function SS_AniWallsRings
0001BB64                            
0001BB64                            ; ===========================================================================
0001BB64 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BB74 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BB84 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BB94 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BBA4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BBB4 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BBC4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BBD4 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BBE4                            ; ---------------------------------------------------------------------------
0001BBE4                            ; Subroutine to	remove items when you collect them in the special stage
0001BBE4                            ; ---------------------------------------------------------------------------
0001BBE4                            
0001BBE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBE4                            
0001BBE4                            
0001BBE4                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BBE4 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BBEA 303C 001F                  		move.w	#$1F,d0
0001BBEE                            
0001BBEE                            loc_1B4C4:
0001BBEE 4A12                       		tst.b	(a2)
0001BBF0 6700                       		beq.s	locret_1B4CE
0001BBF2 504A                       		addq.w	#8,a2
0001BBF4 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BBF8                            
0001BBF8                            locret_1B4CE:
0001BBF8 4E75                       		rts	
0001BBFA                            ; End of function SS_RemoveCollectedItem
0001BBFA                            
0001BBFA                            ; ---------------------------------------------------------------------------
0001BBFA                            ; Subroutine to	animate	special	stage items when you touch them
0001BBFA                            ; ---------------------------------------------------------------------------
0001BBFA                            
0001BBFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBFA                            
0001BBFA                            
0001BBFA                            SS_AniItems:				; XREF: SS_ShowLayout
0001BBFA 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BC00 3E3C 001F                  		move.w	#$1F,d7
0001BC04                            
0001BC04                            loc_1B4DA:
0001BC04 7000                       		moveq	#0,d0
0001BC06 1010                       		move.b	(a0),d0
0001BC08 6700                       		beq.s	loc_1B4E8
0001BC0A E548                       		lsl.w	#2,d0
0001BC0C 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BC10 4E91                       		jsr	(a1)
0001BC12                            
0001BC12                            loc_1B4E8:
0001BC12 5048                       		addq.w	#8,a0
0001BC14                            
0001BC14                            loc_1B4EA:
0001BC14 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BC18                            
0001BC18 4E75                       		rts	
0001BC1A                            ; End of function SS_AniItems
0001BC1A                            
0001BC1A                            ; ===========================================================================
0001BC1A 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BC1E 0000 0000                  		dc.l SS_AniBumper
0001BC22 0000 0000                  		dc.l SS_Ani1Up
0001BC26 0000 0000                  		dc.l SS_AniReverse
0001BC2A 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BC2E 0000 0000                  		dc.l SS_AniGlassBlock
0001BC32                            ; ===========================================================================
0001BC32                            
0001BC32                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BC32 5328 0002                  		subq.b	#1,2(a0)
0001BC36 6A00                       		bpl.s	locret_1B530
0001BC38 117C 0005 0002             		move.b	#5,2(a0)
0001BC3E 7000                       		moveq	#0,d0
0001BC40 1028 0003                  		move.b	3(a0),d0
0001BC44 5228 0003                  		addq.b	#1,3(a0)
0001BC48 2268 0004                  		movea.l	4(a0),a1
0001BC4C 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BC50 1280                       		move.b	d0,(a1)
0001BC52 6600                       		bne.s	locret_1B530
0001BC54 4290                       		clr.l	(a0)
0001BC56 42A8 0004                  		clr.l	4(a0)
0001BC5A                            
0001BC5A                            locret_1B530:
0001BC5A 4E75                       		rts	
0001BC5C                            ; ===========================================================================
0001BC5C 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BC62                            ; ===========================================================================
0001BC62                            
0001BC62                            SS_AniBumper:				; XREF: SS_AniIndex
0001BC62 5328 0002                  		subq.b	#1,2(a0)
0001BC66 6A00                       		bpl.s	locret_1B566
0001BC68 117C 0007 0002             		move.b	#7,2(a0)
0001BC6E 7000                       		moveq	#0,d0
0001BC70 1028 0003                  		move.b	3(a0),d0
0001BC74 5228 0003                  		addq.b	#1,3(a0)
0001BC78 2268 0004                  		movea.l	4(a0),a1
0001BC7C 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BC80 6600                       		bne.s	loc_1B564
0001BC82 4290                       		clr.l	(a0)
0001BC84 42A8 0004                  		clr.l	4(a0)
0001BC88 12BC 0025                  		move.b	#$25,(a1)
0001BC8C 4E75                       		rts	
0001BC8E                            ; ===========================================================================
0001BC8E                            
0001BC8E                            loc_1B564:
0001BC8E 1280                       		move.b	d0,(a1)
0001BC90                            
0001BC90                            locret_1B566:
0001BC90 4E75                       		rts	
0001BC92                            ; ===========================================================================
0001BC92 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BC98                            ; ===========================================================================
0001BC98                            
0001BC98                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BC98 5328 0002                  		subq.b	#1,2(a0)
0001BC9C 6A00                       		bpl.s	locret_1B596
0001BC9E 117C 0005 0002             		move.b	#5,2(a0)
0001BCA4 7000                       		moveq	#0,d0
0001BCA6 1028 0003                  		move.b	3(a0),d0
0001BCAA 5228 0003                  		addq.b	#1,3(a0)
0001BCAE 2268 0004                  		movea.l	4(a0),a1
0001BCB2 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BCB6 1280                       		move.b	d0,(a1)
0001BCB8 6600                       		bne.s	locret_1B596
0001BCBA 4290                       		clr.l	(a0)
0001BCBC 42A8 0004                  		clr.l	4(a0)
0001BCC0                            
0001BCC0                            locret_1B596:
0001BCC0 4E75                       		rts	
0001BCC2                            ; ===========================================================================
0001BCC2 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BCC8                            ; ===========================================================================
0001BCC8                            
0001BCC8                            SS_AniReverse:				; XREF: SS_AniIndex
0001BCC8 5328 0002                  		subq.b	#1,2(a0)
0001BCCC 6A00                       		bpl.s	locret_1B5CC
0001BCCE 117C 0007 0002             		move.b	#7,2(a0)
0001BCD4 7000                       		moveq	#0,d0
0001BCD6 1028 0003                  		move.b	3(a0),d0
0001BCDA 5228 0003                  		addq.b	#1,3(a0)
0001BCDE 2268 0004                  		movea.l	4(a0),a1
0001BCE2 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BCE6 6600                       		bne.s	loc_1B5CA
0001BCE8 4290                       		clr.l	(a0)
0001BCEA 42A8 0004                  		clr.l	4(a0)
0001BCEE 12BC 002B                  		move.b	#$2B,(a1)
0001BCF2 4E75                       		rts	
0001BCF4                            ; ===========================================================================
0001BCF4                            
0001BCF4                            loc_1B5CA:
0001BCF4 1280                       		move.b	d0,(a1)
0001BCF6                            
0001BCF6                            locret_1B5CC:
0001BCF6 4E75                       		rts	
0001BCF8                            ; ===========================================================================
0001BCF8 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BCFE                            ; ===========================================================================
0001BCFE                            
0001BCFE                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BCFE 5328 0002                  		subq.b	#1,2(a0)
0001BD02 6A00                       		bpl.s	locret_1B60C
0001BD04 117C 0005 0002             		move.b	#5,2(a0)
0001BD0A 7000                       		moveq	#0,d0
0001BD0C 1028 0003                  		move.b	3(a0),d0
0001BD10 5228 0003                  		addq.b	#1,3(a0)
0001BD14 2268 0004                  		movea.l	4(a0),a1
0001BD18 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BD1C 1280                       		move.b	d0,(a1)
0001BD1E 6600                       		bne.s	locret_1B60C
0001BD20 4290                       		clr.l	(a0)
0001BD22 42A8 0004                  		clr.l	4(a0)
0001BD26 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BD2C 303C 00A8                  		move.w	#$A8,d0
0001BD30 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BD36                            
0001BD36                            locret_1B60C:
0001BD36 4E75                       		rts	
0001BD38                            ; ===========================================================================
0001BD38 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BD3E                            ; ===========================================================================
0001BD3E                            
0001BD3E                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BD3E 5328 0002                  		subq.b	#1,2(a0)
0001BD42 6A00                       		bpl.s	locret_1B640
0001BD44 117C 0001 0002             		move.b	#1,2(a0)
0001BD4A 7000                       		moveq	#0,d0
0001BD4C 1028 0003                  		move.b	3(a0),d0
0001BD50 5228 0003                  		addq.b	#1,3(a0)
0001BD54 2268 0004                  		movea.l	4(a0),a1
0001BD58 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BD5C 1280                       		move.b	d0,(a1)
0001BD5E 6600                       		bne.s	locret_1B640
0001BD60 12A8 0004                  		move.b	4(a0),(a1)
0001BD64 4290                       		clr.l	(a0)
0001BD66 42A8 0004                  		clr.l	4(a0)
0001BD6A                            
0001BD6A                            locret_1B640:
0001BD6A 4E75                       		rts	
0001BD6C                            ; ===========================================================================
0001BD6C 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BD76                            ; ---------------------------------------------------------------------------
0001BD76                            ; Special stage	layout pointers
0001BD76                            ; ---------------------------------------------------------------------------
0001BD76                            SS_LayoutIndex:
0001BD76                            	include "_inc\Special stage layout pointers.asm"
0001BD76                            ; ---------------------------------------------------------------------------
0001BD76                            ; Special stage	layout pointers
0001BD76                            ; ---------------------------------------------------------------------------
0001BD76 0000 0000                  	dc.l SS_1
0001BD7A 0000 0000                  	dc.l SS_2
0001BD7E 0000 0000                  	dc.l SS_3
0001BD82 0000 0000                  	dc.l SS_4
0001BD86 0000 0000                  	dc.l SS_5
0001BD8A 0000 0000                  	dc.l SS_6
0001BD8E                            	even
0001BD8E                            	even
0001BD8E                            
0001BD8E                            ; ---------------------------------------------------------------------------
0001BD8E                            ; Special stage	start locations
0001BD8E                            ; ---------------------------------------------------------------------------
0001BD8E                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BDA6                            		even
0001BDA6                            
0001BDA6                            ; ---------------------------------------------------------------------------
0001BDA6                            ; Subroutine to	load special stage layout
0001BDA6                            ; ---------------------------------------------------------------------------
0001BDA6                            
0001BDA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDA6                            
0001BDA6                            
0001BDA6                            SS_Load:				; XREF: SpecialStage
0001BDA6 7000                       		moveq	#0,d0
0001BDA8 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BDAC 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BDB0 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BDB6 6500                       		bcs.s	SS_ChkEmldNum
0001BDB8 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BDBE                            
0001BDBE                            SS_ChkEmldNum:
0001BDBE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BDC4 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BDC6 7200                       		moveq	#0,d1
0001BDC8 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BDCC 5301                       		subq.b	#1,d1
0001BDCE 6500                       		bcs.s	SS_LoadData
0001BDD0 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BDD4                            
0001BDD4                            SS_ChkEmldLoop:	
0001BDD4 B033 1000                  		cmp.b	(a3,d1.w),d0
0001BDD8 6600                       		bne.s	SS_ChkEmldRepeat
0001BDDA 60CA                       		bra.s	SS_Load
0001BDDC                            ; ===========================================================================
0001BDDC                            
0001BDDC                            SS_ChkEmldRepeat:
0001BDDC 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BDE0                            
0001BDE0                            SS_LoadData:
0001BDE0 E548                       		lsl.w	#2,d0
0001BDE2 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BDE6 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BDEA 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BDEE 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BDF2 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BDF8 303C 0000                  		move.w	#0,d0
0001BDFC 4EB9 0000 1948             		jsr	(EniDec).l
0001BE02 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BE08 303C 0FFF                  		move.w	#$FFF,d0
0001BE0C                            
0001BE0C                            SS_ClrRAM3:
0001BE0C 4299                       		clr.l	(a1)+
0001BE0E 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BE12                            
0001BE12 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BE18 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BE1E 723F                       		moveq	#$3F,d1
0001BE20                            
0001BE20                            loc_1B6F6:
0001BE20 743F                       		moveq	#$3F,d2
0001BE22                            
0001BE22                            loc_1B6F8:
0001BE22 12D8                       		move.b	(a0)+,(a1)+
0001BE24 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BE28                            
0001BE28 43E9 0040                  		lea	$40(a1),a1
0001BE2C 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BE30                            
0001BE30 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BE36 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BE3C 724D                       		moveq	#$4D,d1
0001BE3E                            
0001BE3E                            loc_1B714:
0001BE3E 22D8                       		move.l	(a0)+,(a1)+
0001BE40 32FC 0000                  		move.w	#0,(a1)+
0001BE44 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BE4A 32D8                       		move.w	(a0)+,(a1)+
0001BE4C 51C9 FFF0                  		dbf	d1,loc_1B714
0001BE50                            
0001BE50 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BE56 323C 003F                  		move.w	#$3F,d1
0001BE5A                            
0001BE5A                            loc_1B730:
0001BE5A                            
0001BE5A 4299                       		clr.l	(a1)+
0001BE5C 51C9 FFFC                  		dbf	d1,loc_1B730
0001BE60                            
0001BE60 4E75                       		rts	
0001BE62                            ; End of function SS_Load
0001BE62                            
0001BE62                            ; ===========================================================================
0001BE62                            ; ---------------------------------------------------------------------------
0001BE62                            ; Special stage	mappings and VRAM pointers
0001BE62                            ; ---------------------------------------------------------------------------
0001BE62                            SS_MapIndex:
0001BE62                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BE62                            ; ---------------------------------------------------------------------------
0001BE62                            ; Special stage	mappings and VRAM pointers
0001BE62                            ; ---------------------------------------------------------------------------
0001BE62 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BE66 0142                       	dc.w $142		; VRAM setting
0001BE68 0000 0000                  	dc.l Map_SSWalls
0001BE6C 0142                       	dc.w $142
0001BE6E 0000 0000                  	dc.l Map_SSWalls
0001BE72 0142                       	dc.w $142
0001BE74 0000 0000                  	dc.l Map_SSWalls
0001BE78 0142                       	dc.w $142
0001BE7A 0000 0000                  	dc.l Map_SSWalls
0001BE7E 0142                       	dc.w $142
0001BE80 0000 0000                  	dc.l Map_SSWalls
0001BE84 0142                       	dc.w $142
0001BE86 0000 0000                  	dc.l Map_SSWalls
0001BE8A 0142                       	dc.w $142
0001BE8C 0000 0000                  	dc.l Map_SSWalls
0001BE90 0142                       	dc.w $142
0001BE92 0000 0000                  	dc.l Map_SSWalls
0001BE96 0142                       	dc.w $142
0001BE98 0000 0000                  	dc.l Map_SSWalls
0001BE9C 2142                       	dc.w $2142
0001BE9E 0000 0000                  	dc.l Map_SSWalls
0001BEA2 2142                       	dc.w $2142
0001BEA4 0000 0000                  	dc.l Map_SSWalls
0001BEA8 2142                       	dc.w $2142
0001BEAA 0000 0000                  	dc.l Map_SSWalls
0001BEAE 2142                       	dc.w $2142
0001BEB0 0000 0000                  	dc.l Map_SSWalls
0001BEB4 2142                       	dc.w $2142
0001BEB6 0000 0000                  	dc.l Map_SSWalls
0001BEBA 2142                       	dc.w $2142
0001BEBC 0000 0000                  	dc.l Map_SSWalls
0001BEC0 2142                       	dc.w $2142
0001BEC2 0000 0000                  	dc.l Map_SSWalls
0001BEC6 2142                       	dc.w $2142
0001BEC8 0000 0000                  	dc.l Map_SSWalls
0001BECC 2142                       	dc.w $2142
0001BECE 0000 0000                  	dc.l Map_SSWalls
0001BED2 4142                       	dc.w $4142
0001BED4 0000 0000                  	dc.l Map_SSWalls
0001BED8 4142                       	dc.w $4142
0001BEDA 0000 0000                  	dc.l Map_SSWalls
0001BEDE 4142                       	dc.w $4142
0001BEE0 0000 0000                  	dc.l Map_SSWalls
0001BEE4 4142                       	dc.w $4142
0001BEE6 0000 0000                  	dc.l Map_SSWalls
0001BEEA 4142                       	dc.w $4142
0001BEEC 0000 0000                  	dc.l Map_SSWalls
0001BEF0 4142                       	dc.w $4142
0001BEF2 0000 0000                  	dc.l Map_SSWalls
0001BEF6 4142                       	dc.w $4142
0001BEF8 0000 0000                  	dc.l Map_SSWalls
0001BEFC 4142                       	dc.w $4142
0001BEFE 0000 0000                  	dc.l Map_SSWalls
0001BF02 4142                       	dc.w $4142
0001BF04 0000 0000                  	dc.l Map_SSWalls
0001BF08 6142                       	dc.w $6142
0001BF0A 0000 0000                  	dc.l Map_SSWalls
0001BF0E 6142                       	dc.w $6142
0001BF10 0000 0000                  	dc.l Map_SSWalls
0001BF14 6142                       	dc.w $6142
0001BF16 0000 0000                  	dc.l Map_SSWalls
0001BF1A 6142                       	dc.w $6142
0001BF1C 0000 0000                  	dc.l Map_SSWalls
0001BF20 6142                       	dc.w $6142
0001BF22 0000 0000                  	dc.l Map_SSWalls
0001BF26 6142                       	dc.w $6142
0001BF28 0000 0000                  	dc.l Map_SSWalls
0001BF2C 6142                       	dc.w $6142
0001BF2E 0000 0000                  	dc.l Map_SSWalls
0001BF32 6142                       	dc.w $6142
0001BF34 0000 0000                  	dc.l Map_SSWalls
0001BF38 6142                       	dc.w $6142
0001BF3A 0000 F0F8                  	dc.l Map_obj47
0001BF3E 023B                       	dc.w $23B
0001BF40 0000 0000                  	dc.l Map_SS_R
0001BF44 0570                       	dc.w $570
0001BF46 0000 0000                  	dc.l Map_SS_R
0001BF4A 0251                       	dc.w $251
0001BF4C 0000 0000                  	dc.l Map_SS_R
0001BF50 0370                       	dc.w $370
0001BF52 0000 0000                  	dc.l Map_SS_Up
0001BF56 0263                       	dc.w $263
0001BF58 0000 0000                  	dc.l Map_SS_Down
0001BF5C 0263                       	dc.w $263
0001BF5E 0000 0000                  	dc.l Map_SS_R
0001BF62 22F0                       	dc.w $22F0
0001BF64 0000 0000                  	dc.l Map_SS_Glass
0001BF68 0470                       	dc.w $470
0001BF6A 0000 0000                  	dc.l Map_SS_Glass
0001BF6E 05F0                       	dc.w $5F0
0001BF70 0000 0000                  	dc.l Map_SS_Glass
0001BF74 65F0                       	dc.w $65F0
0001BF76 0000 0000                  	dc.l Map_SS_Glass
0001BF7A 25F0                       	dc.w $25F0
0001BF7C 0000 0000                  	dc.l Map_SS_Glass
0001BF80 45F0                       	dc.w $45F0
0001BF82 0000 0000                  	dc.l Map_SS_R
0001BF86 02F0                       	dc.w $2F0
0001BF88 0100 F0F8                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BF8C 023B                       	dc.w $23B
0001BF8E 0200 F0F8                  	dc.l Map_obj47+$2000000
0001BF92 023B                       	dc.w $23B
0001BF94 0000 0000                  	dc.l Map_SS_R
0001BF98 0797                       	dc.w $797
0001BF9A 0000 0000                  	dc.l Map_SS_R
0001BF9E 07A0                       	dc.w $7A0
0001BFA0 0000 0000                  	dc.l Map_SS_R
0001BFA4 07A9                       	dc.w $7A9
0001BFA6 0000 0000                  	dc.l Map_SS_R
0001BFAA 0797                       	dc.w $797
0001BFAC 0000 0000                  	dc.l Map_SS_R
0001BFB0 07A0                       	dc.w $7A0
0001BFB2 0000 0000                  	dc.l Map_SS_R
0001BFB6 07A9                       	dc.w $7A9
0001BFB8 0000 A46C                  	dc.l Map_obj25
0001BFBC 27B2                       	dc.w $27B2
0001BFBE 0000 0000                  	dc.l Map_SS_Chaos3
0001BFC2 0770                       	dc.w $770
0001BFC4 0000 0000                  	dc.l Map_SS_Chaos3
0001BFC8 2770                       	dc.w $2770
0001BFCA 0000 0000                  	dc.l Map_SS_Chaos3
0001BFCE 4770                       	dc.w $4770
0001BFD0 0000 0000                  	dc.l Map_SS_Chaos3
0001BFD4 6770                       	dc.w $6770
0001BFD6 0000 0000                  	dc.l Map_SS_Chaos1
0001BFDA 0770                       	dc.w $770
0001BFDC 0000 0000                  	dc.l Map_SS_Chaos2
0001BFE0 0770                       	dc.w $770
0001BFE2 0000 0000                  	dc.l Map_SS_R
0001BFE6 04F0                       	dc.w $4F0
0001BFE8 0400 A46C                  	dc.l Map_obj25+$4000000
0001BFEC 27B2                       	dc.w $27B2
0001BFEE 0500 A46C                  	dc.l Map_obj25+$5000000
0001BFF2 27B2                       	dc.w $27B2
0001BFF4 0600 A46C                  	dc.l Map_obj25+$6000000
0001BFF8 27B2                       	dc.w $27B2
0001BFFA 0700 A46C                  	dc.l Map_obj25+$7000000
0001BFFE 27B2                       	dc.w $27B2
0001C000 0000 0000                  	dc.l Map_SS_Glass
0001C004 23F0                       	dc.w $23F0
0001C006 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C00A 23F0                       	dc.w $23F0
0001C00C 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C010 23F0                       	dc.w $23F0
0001C012 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C016 23F0                       	dc.w $23F0
0001C018 0000 0000                  	dc.l Map_SS_R+$2000000
0001C01C 04F0                       	dc.w $4F0
0001C01E 0000 0000                  	dc.l Map_SS_Glass
0001C022 05F0                       	dc.w $5F0
0001C024 0000 0000                  	dc.l Map_SS_Glass
0001C028 65F0                       	dc.w $65F0
0001C02A 0000 0000                  	dc.l Map_SS_Glass
0001C02E 25F0                       	dc.w $25F0
0001C030 0000 0000                  	dc.l Map_SS_Glass
0001C034 45F0                       	dc.w $45F0
0001C034 45F0                       	dc.w $45F0
0001C036                            
0001C036                            ; ---------------------------------------------------------------------------
0001C036                            ; Sprite mappings - special stage "R" block
0001C036                            ; ---------------------------------------------------------------------------
0001C036                            Map_SS_R:
0001C036                            	include "_maps\SSRblock.asm"
0001C036                            ; ---------------------------------------------------------------------------
0001C036                            ; Sprite mappings - special stage "R" block
0001C036                            ; ---------------------------------------------------------------------------
0001C036 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C03A 0000                       		dc.w byte_1B91E-Map_SS_R
0001C03C 01                         byte_1B912:	dc.b 1
0001C03D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C042 01                         byte_1B918:	dc.b 1
0001C043 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C048 00                         byte_1B91E:	dc.b 0
0001C04A 00                         		even
0001C04A 00                         		even
0001C04A                            
0001C04A                            ; ---------------------------------------------------------------------------
0001C04A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C04A                            ; ---------------------------------------------------------------------------
0001C04A                            Map_SS_Glass:
0001C04A                            	include "_maps\SSglassblock.asm"
0001C04A                            ; ---------------------------------------------------------------------------
0001C04A                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C04A                            ; ---------------------------------------------------------------------------
0001C04A 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C04E 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C052 01                         byte_1B928:	dc.b 1
0001C053 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C058 01                         byte_1B92E:	dc.b 1
0001C059 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C05E 01                         byte_1B934:	dc.b 1
0001C05F F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C064 01                         byte_1B93A:	dc.b 1
0001C065 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C06A                            		even
0001C06A                            		even
0001C06A                            
0001C06A                            ; ---------------------------------------------------------------------------
0001C06A                            ; Sprite mappings - special stage "UP" block
0001C06A                            ; ---------------------------------------------------------------------------
0001C06A                            Map_SS_Up:
0001C06A                            	include "_maps\SSUPblock.asm"
0001C06A                            ; ---------------------------------------------------------------------------
0001C06A                            ; Sprite mappings - special stage "UP" block
0001C06A                            ; ---------------------------------------------------------------------------
0001C06A 0000                       		dc.w byte_1B944-Map_SS_Up
0001C06C 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C06E 01                         byte_1B944:	dc.b 1
0001C06F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C074 01                         byte_1B94A:	dc.b 1
0001C075 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C07A                            		even
0001C07A                            		even
0001C07A                            
0001C07A                            ; ---------------------------------------------------------------------------
0001C07A                            ; Sprite mappings - special stage "DOWN" block
0001C07A                            ; ---------------------------------------------------------------------------
0001C07A                            Map_SS_Down:
0001C07A                            	include "_maps\SSDOWNblock.asm"
0001C07A                            ; ---------------------------------------------------------------------------
0001C07A                            ; Sprite mappings - special stage "DOWN" block
0001C07A                            ; ---------------------------------------------------------------------------
0001C07A 0000                       		dc.w byte_1B954-Map_SS_Down
0001C07C 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C07E 01                         byte_1B954:	dc.b 1
0001C07F F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C084 01                         byte_1B95A:	dc.b 1
0001C085 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C08A                            		even
0001C08A                            		even
0001C08A                            
0001C08A                            ; ---------------------------------------------------------------------------
0001C08A                            ; Sprite mappings - special stage chaos	emeralds
0001C08A                            ; ---------------------------------------------------------------------------
0001C08A 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C08C 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C08E 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C090 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C092 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C094 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C096 01                         byte_1B96C:	dc.b 1
0001C097 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C09C 01                         byte_1B972:	dc.b 1
0001C09D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C0A2 01                         byte_1B978:	dc.b 1
0001C0A3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C0A8 01                         byte_1B97E:	dc.b 1
0001C0A9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C0AE                            		even
0001C0AE                            ; ===========================================================================
0001C0AE                            ; ---------------------------------------------------------------------------
0001C0AE                            ; Object 09 - Sonic (special stage)
0001C0AE                            ; ---------------------------------------------------------------------------
0001C0AE                            
0001C0AE                            Obj09:					; XREF: Obj_Index
0001C0AE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C0B2 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C0B4 6100 0000                  		bsr.w	SS_FixCamera
0001C0B8 6000 0000                  		bra.w	DebugMode
0001C0BC                            ; ===========================================================================
0001C0BC                            
0001C0BC                            Obj09_Normal:
0001C0BC 7000                       		moveq	#0,d0
0001C0BE 1028 0024                  		move.b	$24(a0),d0
0001C0C2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C0C6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C0CA                            ; ===========================================================================
0001C0CA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C0CC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C0CE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C0D0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C0D2                            ; ===========================================================================
0001C0D2                            
0001C0D2                            Obj09_Main:				; XREF: Obj09_Index
0001C0D2 5428 0024                  		addq.b	#2,$24(a0)
0001C0D6 117C 000E 0016             		move.b	#$E,$16(a0)
0001C0DC 117C 0007 0017             		move.b	#7,$17(a0)
0001C0E2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C0EA 317C 0780 0002             		move.w	#$780,2(a0)
0001C0F0 117C 0004 0001             		move.b	#4,1(a0)
0001C0F6 117C 0000 0018             		move.b	#0,$18(a0)
0001C0FC 117C 0002 001C             		move.b	#2,$1C(a0)
0001C102 08E8 0002 0022             		bset	#2,$22(a0)
0001C108 08E8 0001 0022             		bset	#1,$22(a0)
0001C10E                            
0001C10E                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C10E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C112 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C114 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C11A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C11C 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C122                            
0001C122                            Obj09_NoDebug:
0001C122 117C 0000 0030             		move.b	#0,$30(a0)
0001C128 7000                       		moveq	#0,d0
0001C12A 1028 0022                  		move.b	$22(a0),d0
0001C12E 0240 0002                  		andi.w	#2,d0
0001C132 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C136 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C13A 4EBA 81B6                  		jsr	LoadSonicDynPLC
0001C13E 4EF9 0000 DC04             		jmp	DisplaySprite
0001C144                            ; ===========================================================================
0001C144 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C146 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C148                            ; ===========================================================================
0001C148                            
0001C148                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C148 6100 0000                  		bsr.w	Obj09_Jump
0001C14C 6100 0000                  		bsr.w	Obj09_Move
0001C150 6100 0000                  		bsr.w	Obj09_Fall
0001C154 6000                       		bra.s	Obj09_Display
0001C156                            ; ===========================================================================
0001C156                            
0001C156                            Obj09_InAir:				; XREF: Obj09_Modes
0001C156 6100 0000                  		bsr.w	nullsub_2
0001C15A 6100 0000                  		bsr.w	Obj09_Move
0001C15E 6100 0000                  		bsr.w	Obj09_Fall
0001C162                            
0001C162                            Obj09_Display:				; XREF: Obj09_OnWall
0001C162 6100 0000                  		bsr.w	Obj09_ChkItems
0001C166 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C16A 4EB9 0000 DBDE             		jsr	SpeedToPos
0001C170 6100 0000                  		bsr.w	SS_FixCamera
0001C174 3038 F780                  		move.w	($FFFFF780).w,d0
0001C178 D078 F782                  		add.w	($FFFFF782).w,d0
0001C17C 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C180 4EB9 0001 405C             		jsr	Sonic_Animate
0001C186 4E75                       		rts	
0001C188                            
0001C188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C188                            
0001C188                            
0001C188                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C188 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C18E 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C190 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C194                            
0001C194                            Obj09_ChkRight:
0001C194 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C19A 6700                       		beq.s	loc_1BA78	; if not, branch
0001C19C 6100 0000                  		bsr.w	Obj09_MoveRight
0001C1A0                            
0001C1A0                            loc_1BA78:
0001C1A0 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1A4 0200 000C                  		andi.b	#$C,d0
0001C1A8 6600                       		bne.s	loc_1BAA8
0001C1AA 3028 0014                  		move.w	$14(a0),d0
0001C1AE 6700                       		beq.s	loc_1BAA8
0001C1B0 6B00                       		bmi.s	loc_1BA9A
0001C1B2 0440 000C                  		subi.w	#$C,d0
0001C1B6 6400                       		bcc.s	loc_1BA94
0001C1B8 303C 0000                  		move.w	#0,d0
0001C1BC                            
0001C1BC                            loc_1BA94:
0001C1BC 3140 0014                  		move.w	d0,$14(a0)
0001C1C0 6000                       		bra.s	loc_1BAA8
0001C1C2                            ; ===========================================================================
0001C1C2                            
0001C1C2                            loc_1BA9A:
0001C1C2 0640 000C                  		addi.w	#$C,d0
0001C1C6 6400                       		bcc.s	loc_1BAA4
0001C1C8 303C 0000                  		move.w	#0,d0
0001C1CC                            
0001C1CC                            loc_1BAA4:
0001C1CC 3140 0014                  		move.w	d0,$14(a0)
0001C1D0                            
0001C1D0                            loc_1BAA8:
0001C1D0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C1D4 0600 0020                  		addi.b	#$20,d0
0001C1D8 0200 00C0                  		andi.b	#$C0,d0
0001C1DC 4400                       		neg.b	d0
0001C1DE 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001C1E4 C3E8 0014                  		muls.w	$14(a0),d1
0001C1E8 D3A8 0008                  		add.l	d1,8(a0)
0001C1EC C1E8 0014                  		muls.w	$14(a0),d0
0001C1F0 D1A8 000C                  		add.l	d0,$C(a0)
0001C1F4 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C1F8 2428 000C                  		move.l	$C(a0),d2
0001C1FC 2628 0008                  		move.l	8(a0),d3
0001C200 6100 0000                  		bsr.w	sub_1BCE8
0001C204 6700                       		beq.s	loc_1BAF2
0001C206 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C20A 93A8 0008                  		sub.l	d1,8(a0)
0001C20E 91A8 000C                  		sub.l	d0,$C(a0)
0001C212 317C 0000 0014             		move.w	#0,$14(a0)
0001C218 4E75                       		rts	
0001C21A                            ; ===========================================================================
0001C21A                            
0001C21A                            loc_1BAF2:
0001C21A 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C21E 4E75                       		rts	
0001C220                            ; End of function Obj09_Move
0001C220                            
0001C220                            
0001C220                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C220                            
0001C220                            
0001C220                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C220 08E8 0000 0022             		bset	#0,$22(a0)
0001C226 3028 0014                  		move.w	$14(a0),d0
0001C22A 6700                       		beq.s	loc_1BB06
0001C22C 6A00                       		bpl.s	loc_1BB1A
0001C22E                            
0001C22E                            loc_1BB06:
0001C22E 0440 000C                  		subi.w	#$C,d0
0001C232 0C40 F800                  		cmpi.w	#-$800,d0
0001C236 6E00                       		bgt.s	loc_1BB14
0001C238 303C F800                  		move.w	#-$800,d0
0001C23C                            
0001C23C                            loc_1BB14:
0001C23C 3140 0014                  		move.w	d0,$14(a0)
0001C240 4E75                       		rts	
0001C242                            ; ===========================================================================
0001C242                            
0001C242                            loc_1BB1A:
0001C242 0440 0040                  		subi.w	#$40,d0
0001C246 6400                       		bcc.s	loc_1BB22
0001C248 4E71                       		nop	
0001C24A                            
0001C24A                            loc_1BB22:
0001C24A 3140 0014                  		move.w	d0,$14(a0)
0001C24E 4E75                       		rts	
0001C250                            ; End of function Obj09_MoveLeft
0001C250                            
0001C250                            
0001C250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C250                            
0001C250                            
0001C250                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C250 08A8 0000 0022             		bclr	#0,$22(a0)
0001C256 3028 0014                  		move.w	$14(a0),d0
0001C25A 6B00                       		bmi.s	loc_1BB48
0001C25C 0640 000C                  		addi.w	#$C,d0
0001C260 0C40 0800                  		cmpi.w	#$800,d0
0001C264 6D00                       		blt.s	loc_1BB42
0001C266 303C 0800                  		move.w	#$800,d0
0001C26A                            
0001C26A                            loc_1BB42:
0001C26A 3140 0014                  		move.w	d0,$14(a0)
0001C26E 6000                       		bra.s	locret_1BB54
0001C270                            ; ===========================================================================
0001C270                            
0001C270                            loc_1BB48:
0001C270 0640 0040                  		addi.w	#$40,d0
0001C274 6400                       		bcc.s	loc_1BB50
0001C276 4E71                       		nop	
0001C278                            
0001C278                            loc_1BB50:
0001C278 3140 0014                  		move.w	d0,$14(a0)
0001C27C                            
0001C27C                            locret_1BB54:
0001C27C 4E75                       		rts	
0001C27E                            ; End of function Obj09_MoveRight
0001C27E                            
0001C27E                            
0001C27E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C27E                            
0001C27E                            
0001C27E                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C27E 1038 F603                  		move.b	($FFFFF603).w,d0
0001C282 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C286 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C288 1038 F780                  		move.b	($FFFFF780).w,d0
0001C28C 0200 00FC                  		andi.b	#$FC,d0
0001C290 4400                       		neg.b	d0
0001C292 0400 0040                  		subi.b	#$40,d0
0001C296 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001C29C C3FC 0680                  		muls.w	#$680,d1
0001C2A0 E081                       		asr.l	#8,d1
0001C2A2 3141 0010                  		move.w	d1,$10(a0)
0001C2A6 C1FC 0680                  		muls.w	#$680,d0
0001C2AA E080                       		asr.l	#8,d0
0001C2AC 3140 0012                  		move.w	d0,$12(a0)
0001C2B0 08E8 0001 0022             		bset	#1,$22(a0)
0001C2B6 303C 00A0                  		move.w	#$A0,d0
0001C2BA 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C2C0                            
0001C2C0                            Obj09_NoJump:
0001C2C0 4E75                       		rts	
0001C2C2                            ; End of function Obj09_Jump
0001C2C2                            
0001C2C2                            
0001C2C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2C2                            
0001C2C2                            
0001C2C2                            nullsub_2:				; XREF: Obj09_InAir
0001C2C2 4E75                       		rts	
0001C2C4                            ; End of function nullsub_2
0001C2C4                            
0001C2C4                            ; ===========================================================================
0001C2C4                            ; ---------------------------------------------------------------------------
0001C2C4                            ; unused subroutine to limit Sonic's upward vertical speed
0001C2C4                            ; ---------------------------------------------------------------------------
0001C2C4 323C FC00                  		move.w	#-$400,d1
0001C2C8 B268 0012                  		cmp.w	$12(a0),d1
0001C2CC 6F00                       		ble.s	locret_1BBB4
0001C2CE 1038 F602                  		move.b	($FFFFF602).w,d0
0001C2D2 0200 0070                  		andi.b	#$70,d0
0001C2D6 6600                       		bne.s	locret_1BBB4
0001C2D8 3141 0012                  		move.w	d1,$12(a0)
0001C2DC                            
0001C2DC                            locret_1BBB4:
0001C2DC 4E75                       		rts	
0001C2DE                            ; ---------------------------------------------------------------------------
0001C2DE                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C2DE                            ; ---------------------------------------------------------------------------
0001C2DE                            
0001C2DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2DE                            
0001C2DE                            
0001C2DE                            SS_FixCamera:				; XREF: Obj09
0001C2DE 3428 000C                  		move.w	$C(a0),d2
0001C2E2 3628 0008                  		move.w	8(a0),d3
0001C2E6 3038 F700                  		move.w	($FFFFF700).w,d0
0001C2EA 0443 00A0                  		subi.w	#$A0,d3
0001C2EE 6500                       		bcs.s	loc_1BBCE
0001C2F0 9043                       		sub.w	d3,d0
0001C2F2 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C2F6                            
0001C2F6                            loc_1BBCE:
0001C2F6 3038 F704                  		move.w	($FFFFF704).w,d0
0001C2FA 0442 0070                  		subi.w	#$70,d2
0001C2FE 6500                       		bcs.s	locret_1BBDE
0001C300 9042                       		sub.w	d2,d0
0001C302 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C306                            
0001C306                            locret_1BBDE:
0001C306 4E75                       		rts	
0001C308                            ; End of function SS_FixCamera
0001C308                            
0001C308                            ; ===========================================================================
0001C308                            
0001C308                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C308 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C30E 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C314 6600                       		bne.s	loc_1BBF4
0001C316 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C31C                            
0001C31C                            loc_1BBF4:
0001C31C 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C322 6D00                       		blt.s	loc_1BC12
0001C324 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C32A 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C330 5428 0024                  		addq.b	#2,$24(a0)
0001C334 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C33A                            
0001C33A                            loc_1BC12:
0001C33A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C33E D078 F782                  		add.w	($FFFFF782).w,d0
0001C342 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C346 4EB9 0001 405C             		jsr	Sonic_Animate
0001C34C 4EB9 0001 42F2             		jsr	LoadSonicDynPLC
0001C352 6100 FF8A                  		bsr.w	SS_FixCamera
0001C356 4EF9 0000 DC04             		jmp	DisplaySprite
0001C35C                            ; ===========================================================================
0001C35C                            
0001C35C                            Obj09_Exit2:				; XREF: Obj09_Index
0001C35C 5368 0038                  		subq.w	#1,$38(a0)
0001C360 6600                       		bne.s	loc_1BC40
0001C362 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C368                            
0001C368                            loc_1BC40:
0001C368 4EB9 0001 405C             		jsr	Sonic_Animate
0001C36E 4EB9 0001 42F2             		jsr	LoadSonicDynPLC
0001C374 6100 FF68                  		bsr.w	SS_FixCamera
0001C378 4EF9 0000 DC04             		jmp	DisplaySprite
0001C37E                            
0001C37E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C37E                            
0001C37E                            
0001C37E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C37E 2428 000C                  		move.l	$C(a0),d2
0001C382 2628 0008                  		move.l	8(a0),d3
0001C386 1038 F780                  		move.b	($FFFFF780).w,d0
0001C38A 0200 00FC                  		andi.b	#$FC,d0
0001C38E 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001C394 3828 0010                  		move.w	$10(a0),d4
0001C398 48C4                       		ext.l	d4
0001C39A E184                       		asl.l	#8,d4
0001C39C C1FC 002A                  		muls.w	#$2A,d0
0001C3A0 D084                       		add.l	d4,d0
0001C3A2 3828 0012                  		move.w	$12(a0),d4
0001C3A6 48C4                       		ext.l	d4
0001C3A8 E184                       		asl.l	#8,d4
0001C3AA C3FC 002A                  		muls.w	#$2A,d1
0001C3AE D284                       		add.l	d4,d1
0001C3B0 D680                       		add.l	d0,d3
0001C3B2 6100 0000                  		bsr.w	sub_1BCE8
0001C3B6 6700                       		beq.s	loc_1BCB0
0001C3B8 9680                       		sub.l	d0,d3
0001C3BA 7000                       		moveq	#0,d0
0001C3BC 3140 0010                  		move.w	d0,$10(a0)
0001C3C0 08A8 0001 0022             		bclr	#1,$22(a0)
0001C3C6 D481                       		add.l	d1,d2
0001C3C8 6100 0000                  		bsr.w	sub_1BCE8
0001C3CC 6700                       		beq.s	loc_1BCC6
0001C3CE 9481                       		sub.l	d1,d2
0001C3D0 7200                       		moveq	#0,d1
0001C3D2 3141 0012                  		move.w	d1,$12(a0)
0001C3D6 4E75                       		rts	
0001C3D8                            ; ===========================================================================
0001C3D8                            
0001C3D8                            loc_1BCB0:
0001C3D8 D481                       		add.l	d1,d2
0001C3DA 6100 0000                  		bsr.w	sub_1BCE8
0001C3DE 6700                       		beq.s	loc_1BCD4
0001C3E0 9481                       		sub.l	d1,d2
0001C3E2 7200                       		moveq	#0,d1
0001C3E4 3141 0012                  		move.w	d1,$12(a0)
0001C3E8 08A8 0001 0022             		bclr	#1,$22(a0)
0001C3EE                            
0001C3EE                            loc_1BCC6:
0001C3EE E080                       		asr.l	#8,d0
0001C3F0 E081                       		asr.l	#8,d1
0001C3F2 3140 0010                  		move.w	d0,$10(a0)
0001C3F6 3141 0012                  		move.w	d1,$12(a0)
0001C3FA 4E75                       		rts	
0001C3FC                            ; ===========================================================================
0001C3FC                            
0001C3FC                            loc_1BCD4:
0001C3FC E080                       		asr.l	#8,d0
0001C3FE E081                       		asr.l	#8,d1
0001C400 3140 0010                  		move.w	d0,$10(a0)
0001C404 3141 0012                  		move.w	d1,$12(a0)
0001C408 08E8 0001 0022             		bset	#1,$22(a0)
0001C40E 4E75                       		rts	
0001C410                            ; End of function Obj09_Fall
0001C410                            
0001C410                            
0001C410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C410                            
0001C410                            
0001C410                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C410 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C416 7800                       		moveq	#0,d4
0001C418 4842                       		swap	d2
0001C41A 3802                       		move.w	d2,d4
0001C41C 4842                       		swap	d2
0001C41E 0644 0044                  		addi.w	#$44,d4
0001C422 88FC 0018                  		divu.w	#$18,d4
0001C426 C8FC 0080                  		mulu.w	#$80,d4
0001C42A D3C4                       		adda.l	d4,a1
0001C42C 7800                       		moveq	#0,d4
0001C42E 4843                       		swap	d3
0001C430 3803                       		move.w	d3,d4
0001C432 4843                       		swap	d3
0001C434 0644 0014                  		addi.w	#$14,d4
0001C438 88FC 0018                  		divu.w	#$18,d4
0001C43C D2C4                       		adda.w	d4,a1
0001C43E 7A00                       		moveq	#0,d5
0001C440 1819                       		move.b	(a1)+,d4
0001C442 6100                       		bsr.s	sub_1BD30
0001C444 1819                       		move.b	(a1)+,d4
0001C446 6100                       		bsr.s	sub_1BD30
0001C448 D2FC 007E                  		adda.w	#$7E,a1
0001C44C 1819                       		move.b	(a1)+,d4
0001C44E 6100                       		bsr.s	sub_1BD30
0001C450 1819                       		move.b	(a1)+,d4
0001C452 6100                       		bsr.s	sub_1BD30
0001C454 4A05                       		tst.b	d5
0001C456 4E75                       		rts	
0001C458                            ; End of function sub_1BCE8
0001C458                            
0001C458                            
0001C458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C458                            
0001C458                            
0001C458                            sub_1BD30:				; XREF: sub_1BCE8
0001C458 6700                       		beq.s	locret_1BD44
0001C45A 0C04 0028                  		cmpi.b	#$28,d4
0001C45E 6700                       		beq.s	locret_1BD44
0001C460 0C04 003A                  		cmpi.b	#$3A,d4
0001C464 6500                       		bcs.s	loc_1BD46
0001C466 0C04 004B                  		cmpi.b	#$4B,d4
0001C46A 6400                       		bcc.s	loc_1BD46
0001C46C                            
0001C46C                            locret_1BD44:
0001C46C 4E75                       		rts	
0001C46E                            ; ===========================================================================
0001C46E                            
0001C46E                            loc_1BD46:
0001C46E 1144 0030                  		move.b	d4,$30(a0)
0001C472 2149 0032                  		move.l	a1,$32(a0)
0001C476 7AFF                       		moveq	#-1,d5
0001C478 4E75                       		rts	
0001C47A                            ; End of function sub_1BD30
0001C47A                            
0001C47A                            
0001C47A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C47A                            
0001C47A                            
0001C47A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C47A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C480 7800                       		moveq	#0,d4
0001C482 3828 000C                  		move.w	$C(a0),d4
0001C486 0644 0050                  		addi.w	#$50,d4
0001C48A 88FC 0018                  		divu.w	#$18,d4
0001C48E C8FC 0080                  		mulu.w	#$80,d4
0001C492 D3C4                       		adda.l	d4,a1
0001C494 7800                       		moveq	#0,d4
0001C496 3828 0008                  		move.w	8(a0),d4
0001C49A 0644 0020                  		addi.w	#$20,d4
0001C49E 88FC 0018                  		divu.w	#$18,d4
0001C4A2 D2C4                       		adda.w	d4,a1
0001C4A4 1811                       		move.b	(a1),d4
0001C4A6 6600                       		bne.s	Obj09_ChkCont
0001C4A8 4A28 003A                  		tst.b	$3A(a0)
0001C4AC 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C4B0 7800                       		moveq	#0,d4
0001C4B2 4E75                       		rts	
0001C4B4                            ; ===========================================================================
0001C4B4                            
0001C4B4                            Obj09_ChkCont:
0001C4B4 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C4B8 6600                       		bne.s	Obj09_Chk1Up
0001C4BA 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C4BE 6600                       		bne.s	Obj09_GetCont
0001C4C0 14BC 0001                  		move.b	#1,(a2)
0001C4C4 2549 0004                  		move.l	a1,4(a2)
0001C4C8                            
0001C4C8                            Obj09_GetCont:
0001C4C8 4EB9 0000 A154             		jsr	CollectRing
0001C4CE 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C4D4 6500                       		bcs.s	Obj09_NoCont
0001C4D6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C4DC 6600                       		bne.s	Obj09_NoCont
0001C4DE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C4E2 303C 00BF                  		move.w	#$BF,d0
0001C4E6 4EB9 0000 15C0             		jsr	(PlaySound).l	; play extra continue sound
0001C4EC                            
0001C4EC                            Obj09_NoCont:
0001C4EC 7800                       		moveq	#0,d4
0001C4EE 4E75                       		rts	
0001C4F0                            ; ===========================================================================
0001C4F0                            
0001C4F0                            Obj09_Chk1Up:
0001C4F0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C4F4 6600                       		bne.s	Obj09_ChkEmer
0001C4F6 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C4FA 6600                       		bne.s	Obj09_Get1Up
0001C4FC 14BC 0003                  		move.b	#3,(a2)
0001C500 2549 0004                  		move.l	a1,4(a2)
0001C504                            
0001C504                            Obj09_Get1Up:
0001C504 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C508 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C50C 303C 0088                  		move.w	#$88,d0
0001C510 4EB9 0000 15C0             		jsr	(PlaySound).l	; play extra life music
0001C516 7800                       		moveq	#0,d4
0001C518 4E75                       		rts	
0001C51A                            ; ===========================================================================
0001C51A                            
0001C51A                            Obj09_ChkEmer:
0001C51A 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C51E 6500                       		bcs.s	Obj09_ChkGhost
0001C520 0C04 0040                  		cmpi.b	#$40,d4
0001C524 6200                       		bhi.s	Obj09_ChkGhost
0001C526 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C52A 6600                       		bne.s	Obj09_GetEmer
0001C52C 14BC 0005                  		move.b	#5,(a2)
0001C530 2549 0004                  		move.l	a1,4(a2)
0001C534                            
0001C534                            Obj09_GetEmer:
0001C534 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C53A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C53C 0404 003B                  		subi.b	#$3B,d4
0001C540 7000                       		moveq	#0,d0
0001C542 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C546 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C54A 1584 0000                  		move.b	d4,(a2,d0.w)
0001C54E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C552                            
0001C552                            Obj09_NoEmer:
0001C552 303C 0093                  		move.w	#$93,d0
0001C556 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play emerald music
0001C55C 7800                       		moveq	#0,d4
0001C55E 4E75                       		rts	
0001C560                            ; ===========================================================================
0001C560                            
0001C560                            Obj09_ChkGhost:
0001C560 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C564 6600                       		bne.s	Obj09_ChkGhostTag
0001C566 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C56C                            
0001C56C                            Obj09_ChkGhostTag:
0001C56C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C570 6600                       		bne.s	Obj09_NoGhost
0001C572 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C578 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C57A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C580                            
0001C580                            Obj09_NoGhost:
0001C580 78FF                       		moveq	#-1,d4
0001C582 4E75                       		rts	
0001C584                            ; ===========================================================================
0001C584                            
0001C584                            Obj09_MakeGhostSolid:
0001C584 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C58A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C58C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C592 723F                       		moveq	#$3F,d1
0001C594                            
0001C594                            Obj09_GhostLoop2:
0001C594 743F                       		moveq	#$3F,d2
0001C596                            
0001C596                            Obj09_GhostLoop:
0001C596 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C59A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C59C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C5A0                            
0001C5A0                            Obj09_NoReplace:
0001C5A0 5249                       		addq.w	#1,a1
0001C5A2 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C5A6 43E9 0040                  		lea	$40(a1),a1
0001C5AA 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C5AE                            
0001C5AE                            Obj09_GhostNotSolid:
0001C5AE 4228 003A                  		clr.b	$3A(a0)
0001C5B2 7800                       		moveq	#0,d4
0001C5B4 4E75                       		rts	
0001C5B6                            ; End of function Obj09_ChkItems
0001C5B6                            
0001C5B6                            
0001C5B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5B6                            
0001C5B6                            
0001C5B6                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C5B6 1028 0030                  		move.b	$30(a0),d0
0001C5BA 6600                       		bne.s	Obj09_ChkBumper
0001C5BC 5328 0036                  		subq.b	#1,$36(a0)
0001C5C0 6A00                       		bpl.s	loc_1BEA0
0001C5C2 117C 0000 0036             		move.b	#0,$36(a0)
0001C5C8                            
0001C5C8                            loc_1BEA0:
0001C5C8 5328 0037                  		subq.b	#1,$37(a0)
0001C5CC 6A00                       		bpl.s	locret_1BEAC
0001C5CE 117C 0000 0037             		move.b	#0,$37(a0)
0001C5D4                            
0001C5D4                            locret_1BEAC:
0001C5D4 4E75                       		rts	
0001C5D6                            ; ===========================================================================
0001C5D6                            
0001C5D6                            Obj09_ChkBumper:
0001C5D6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C5DA 6600                       		bne.s	Obj09_GOAL
0001C5DC 2228 0032                  		move.l	$32(a0),d1
0001C5E0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C5E6 3401                       		move.w	d1,d2
0001C5E8 0241 007F                  		andi.w	#$7F,d1
0001C5EC C2FC 0018                  		mulu.w	#$18,d1
0001C5F0 0441 0014                  		subi.w	#$14,d1
0001C5F4 EE4A                       		lsr.w	#7,d2
0001C5F6 0242 007F                  		andi.w	#$7F,d2
0001C5FA C4FC 0018                  		mulu.w	#$18,d2
0001C5FE 0442 0044                  		subi.w	#$44,d2
0001C602 9268 0008                  		sub.w	8(a0),d1
0001C606 9468 000C                  		sub.w	$C(a0),d2
0001C60A 4EB9 0000 2F38             		jsr	(CalcAngle).l
0001C610 4EB9 0000 2C6A             		jsr	(CalcSine).l
0001C616 C3FC F900                  		muls.w	#-$700,d1
0001C61A E081                       		asr.l	#8,d1
0001C61C 3141 0010                  		move.w	d1,$10(a0)
0001C620 C1FC F900                  		muls.w	#-$700,d0
0001C624 E080                       		asr.l	#8,d0
0001C626 3140 0012                  		move.w	d0,$12(a0)
0001C62A 08E8 0001 0022             		bset	#1,$22(a0)
0001C630 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C634 6600                       		bne.s	Obj09_BumpSnd
0001C636 14BC 0002                  		move.b	#2,(a2)
0001C63A 2028 0032                  		move.l	$32(a0),d0
0001C63E 5380                       		subq.l	#1,d0
0001C640 2540 0004                  		move.l	d0,4(a2)
0001C644                            
0001C644                            Obj09_BumpSnd:
0001C644 303C 00B4                  		move.w	#$B4,d0
0001C648 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C64E                            ; ===========================================================================
0001C64E                            
0001C64E                            Obj09_GOAL:
0001C64E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C652 6600                       		bne.s	Obj09_UPblock
0001C654 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C658 303C 00A8                  		move.w	#$A8,d0		; change item
0001C65C 4EB9 0000 15C6             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C662 4E75                       		rts	
0001C664                            ; ===========================================================================
0001C664                            
0001C664                            Obj09_UPblock:
0001C664 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C668 6600                       		bne.s	Obj09_DOWNblock
0001C66A 4A28 0036                  		tst.b	$36(a0)
0001C66E 6600 0000                  		bne.w	Obj09_NoGlass
0001C672 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C678 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C67E 6700                       		beq.s	Obj09_UPsnd
0001C680 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C684 2268 0032                  		movea.l	$32(a0),a1
0001C688 5389                       		subq.l	#1,a1
0001C68A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C68E                            
0001C68E                            Obj09_UPsnd:
0001C68E 303C 00A9                  		move.w	#$A9,d0
0001C692 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C698                            ; ===========================================================================
0001C698                            
0001C698                            Obj09_DOWNblock:
0001C698 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C69C 6600                       		bne.s	Obj09_Rblock
0001C69E 4A28 0036                  		tst.b	$36(a0)
0001C6A2 6600 0000                  		bne.w	Obj09_NoGlass
0001C6A6 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C6AC 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C6B2 6600                       		bne.s	Obj09_DOWNsnd
0001C6B4 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C6B8 2268 0032                  		movea.l	$32(a0),a1
0001C6BC 5389                       		subq.l	#1,a1
0001C6BE 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C6C2                            
0001C6C2                            Obj09_DOWNsnd:
0001C6C2 303C 00A9                  		move.w	#$A9,d0
0001C6C6 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C6CC                            ; ===========================================================================
0001C6CC                            
0001C6CC                            Obj09_Rblock:
0001C6CC 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C6D0 6600                       		bne.s	Obj09_ChkGlass
0001C6D2 4A28 0037                  		tst.b	$37(a0)
0001C6D6 6600 0000                  		bne.w	Obj09_NoGlass
0001C6DA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C6E0 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C6E4 6600                       		bne.s	Obj09_RevStage
0001C6E6 14BC 0004                  		move.b	#4,(a2)
0001C6EA 2028 0032                  		move.l	$32(a0),d0
0001C6EE 5380                       		subq.l	#1,d0
0001C6F0 2540 0004                  		move.l	d0,4(a2)
0001C6F4                            
0001C6F4                            Obj09_RevStage:
0001C6F4 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C6F8 303C 00A9                  		move.w	#$A9,d0
0001C6FC 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play sound
0001C702                            ; ===========================================================================
0001C702                            
0001C702                            Obj09_ChkGlass:
0001C702 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C706 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C708 0C00 002E                  		cmpi.b	#$2E,d0
0001C70C 6700                       		beq.s	Obj09_Glass
0001C70E 0C00 002F                  		cmpi.b	#$2F,d0
0001C712 6700                       		beq.s	Obj09_Glass
0001C714 0C00 0030                  		cmpi.b	#$30,d0
0001C718 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C71A                            
0001C71A                            Obj09_Glass:
0001C71A 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C71E 6600                       		bne.s	Obj09_GlassSnd
0001C720 14BC 0006                  		move.b	#6,(a2)
0001C724 2268 0032                  		movea.l	$32(a0),a1
0001C728 5389                       		subq.l	#1,a1
0001C72A 2549 0004                  		move.l	a1,4(a2)
0001C72E 1011                       		move.b	(a1),d0
0001C730 5200                       		addq.b	#1,d0		; change glass type when touched
0001C732 0C00 0030                  		cmpi.b	#$30,d0
0001C736 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C738 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C73A                            
0001C73A                            Obj09_GlassUpdate:
0001C73A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C73E                            
0001C73E                            Obj09_GlassSnd:
0001C73E 303C 00BA                  		move.w	#$BA,d0
0001C742 4EF9 0000 15C6             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C748                            ; ===========================================================================
0001C748                            
0001C748                            Obj09_NoGlass:
0001C748 4E75                       		rts	
0001C74A                            ; End of function Obj09_ChkItems2
0001C74A                            
0001C74A                            ; ===========================================================================
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A                            ; Object 10 - blank
0001C74A                            ; ---------------------------------------------------------------------------
0001C74A                            
0001C74A                            Obj10:					; XREF: Obj_Index
0001C74A 4E75                       		rts	
0001C74C                            ; ---------------------------------------------------------------------------
0001C74C                            ; Subroutine to	animate	level graphics
0001C74C                            ; ---------------------------------------------------------------------------
0001C74C                            
0001C74C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C74C                            
0001C74C                            
0001C74C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C74C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C750 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C752 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C758 6100 0000                  		bsr.w	AniArt_GiantRing
0001C75C 7000                       		moveq	#0,d0
0001C75E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C762 D040                       		add.w	d0,d0
0001C764 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C768 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C76C                            ; ===========================================================================
0001C76C                            
0001C76C                            AniArt_Pause:
0001C76C 4E75                       		rts	
0001C76E                            ; End of function AniArt_Load
0001C76E                            
0001C76E                            ; ===========================================================================
0001C76E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C772 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C776 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C77A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C77C                            ; ===========================================================================
0001C77C                            ; ---------------------------------------------------------------------------
0001C77C                            ; Animated pattern routine - Green Hill
0001C77C                            ; ---------------------------------------------------------------------------
0001C77C                            
0001C77C                            AniArt_GHZ:				; XREF: AniArt_Index
0001C77C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C780 6A00                       		bpl.s	loc_1C08A
0001C782 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C788 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C78E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C792 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C796 0240 0001                  		andi.w	#1,d0
0001C79A 6700                       		beq.s	loc_1C078
0001C79C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C7A0                            
0001C7A0                            loc_1C078:
0001C7A0 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C7AA 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C7AE 6000 0000                  		bra.w	LoadTiles
0001C7B2                            ; ===========================================================================
0001C7B2                            
0001C7B2                            loc_1C08A:
0001C7B2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C7B6 6A00                       		bpl.s	loc_1C0C0
0001C7B8 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C7BE 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C7C4 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C7C8 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C7CC 0240 0001                  		andi.w	#1,d0
0001C7D0 6700                       		beq.s	loc_1C0AE
0001C7D2 43E9 0200                  		lea	$200(a1),a1
0001C7D6                            
0001C7D6                            loc_1C0AE:
0001C7D6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C7E0 323C 000F                  		move.w	#$F,d1
0001C7E4 6000 0000                  		bra.w	LoadTiles
0001C7E8                            ; ===========================================================================
0001C7E8                            
0001C7E8                            loc_1C0C0:
0001C7E8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C7EC 6A00                       		bpl.s	locret_1C10C
0001C7EE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C7F4 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C7F8 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C7FC 0240 0003                  		andi.w	#3,d0
0001C800 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C804 0800 0000                  		btst	#0,d0
0001C808 6600                       		bne.s	loc_1C0E8
0001C80A 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C810                            
0001C810                            loc_1C0E8:
0001C810 EF48                       		lsl.w	#7,d0
0001C812 3200                       		move.w	d0,d1
0001C814 D040                       		add.w	d0,d0
0001C816 D041                       		add.w	d1,d0
0001C818 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C822 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C828 43F1 0000                  		lea	(a1,d0.w),a1
0001C82C 323C 000B                  		move.w	#$B,d1
0001C830 6100 0000                  		bsr.w	LoadTiles
0001C834                            
0001C834                            locret_1C10C:
0001C834 4E75                       		rts	
0001C836                            ; ===========================================================================
0001C836 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C83A                            ; ===========================================================================
0001C83A                            ; ---------------------------------------------------------------------------
0001C83A                            ; Animated pattern routine - Marble
0001C83A                            ; ---------------------------------------------------------------------------
0001C83A                            
0001C83A                            AniArt_MZ:				; XREF: AniArt_Index
0001C83A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C83E 6A00                       		bpl.s	loc_1C150
0001C840 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C846 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C84C 7000                       		moveq	#0,d0
0001C84E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C852 5200                       		addq.b	#1,d0
0001C854 0C00 0003                  		cmpi.b	#3,d0
0001C858 6600                       		bne.s	loc_1C134
0001C85A 7000                       		moveq	#0,d0
0001C85C                            
0001C85C                            loc_1C134:
0001C85C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C860 C0FC 0100                  		mulu.w	#$100,d0
0001C864 D2C0                       		adda.w	d0,a1
0001C866 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C870 323C 0007                  		move.w	#7,d1
0001C874 6100 0000                  		bsr.w	LoadTiles
0001C878                            
0001C878                            loc_1C150:
0001C878 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C87C 6A00                       		bpl.s	loc_1C1AE
0001C87E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C884 7000                       		moveq	#0,d0
0001C886 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C88A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C890 EE58                       		ror.w	#7,d0
0001C892 D8C0                       		adda.w	d0,a4
0001C894 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C89E 7600                       		moveq	#0,d3
0001C8A0 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C8A4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8A8 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C8AC 343C 0003                  		move.w	#3,d2
0001C8B0                            
0001C8B0                            loc_1C188:
0001C8B0 3003                       		move.w	d3,d0
0001C8B2 D040                       		add.w	d0,d0
0001C8B4 0240 001E                  		andi.w	#$1E,d0
0001C8B8 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C8BE 3033 0000                  		move.w	(a3,d0.w),d0
0001C8C2 47F3 0000                  		lea	(a3,d0.w),a3
0001C8C6 224C                       		movea.l	a4,a1
0001C8C8 323C 001F                  		move.w	#$1F,d1
0001C8CC 4E93                       		jsr	(a3)
0001C8CE 5843                       		addq.w	#4,d3
0001C8D0 51CA FFDE                  		dbf	d2,loc_1C188
0001C8D4 4E75                       		rts	
0001C8D6                            ; ===========================================================================
0001C8D6                            
0001C8D6                            loc_1C1AE:
0001C8D6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8DA 6A00 0000                  		bpl.w	locret_1C1EA
0001C8DE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C8E4 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C8EA 7000                       		moveq	#0,d0
0001C8EC 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C8F0 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C8F4 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C8FA C0FC 00C0                  		mulu.w	#$C0,d0
0001C8FE D2C0                       		adda.w	d0,a1
0001C900 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C90A 323C 0005                  		move.w	#5,d1
0001C90E 6000 0000                  		bra.w	LoadTiles
0001C912                            ; ===========================================================================
0001C912                            
0001C912                            locret_1C1EA:
0001C912 4E75                       		rts	
0001C914                            ; ===========================================================================
0001C914                            ; ---------------------------------------------------------------------------
0001C914                            ; Animated pattern routine - Scrap Brain
0001C914                            ; ---------------------------------------------------------------------------
0001C914                            
0001C914                            AniArt_SBZ:				; XREF: AniArt_Index
0001C914 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C918 6700                       		beq.s	loc_1C1F8
0001C91A 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C91E 6000                       		bra.s	loc_1C250
0001C920                            ; ===========================================================================
0001C920                            
0001C920                            loc_1C1F8:
0001C920 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C924 6A00                       		bpl.s	loc_1C250
0001C926 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C92C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C932 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C93C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C940 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C944 0240 0007                  		andi.w	#7,d0
0001C948 6700                       		beq.s	loc_1C234
0001C94A 5340                       		subq.w	#1,d0
0001C94C C0FC 0180                  		mulu.w	#$180,d0
0001C950 43F1 0000                  		lea	(a1,d0.w),a1
0001C954 323C 000B                  		move.w	#$B,d1
0001C958 6000 0000                  		bra.w	LoadTiles
0001C95C                            ; ===========================================================================
0001C95C                            
0001C95C                            loc_1C234:
0001C95C 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C962                            
0001C962                            loc_1C23A:
0001C962 323C 0005                  		move.w	#5,d1
0001C966 6100 0000                  		bsr.w	LoadTiles
0001C96A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C970 323C 0005                  		move.w	#5,d1
0001C974 6000 0000                  		bra.w	LoadTiles
0001C978                            ; ===========================================================================
0001C978                            
0001C978                            loc_1C250:
0001C978 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C97C 6700                       		beq.s	loc_1C25C
0001C97E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C982 6000                       		bra.s	locret_1C2A0
0001C984                            ; ===========================================================================
0001C984                            
0001C984                            loc_1C25C:
0001C984 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C988 6A00                       		bpl.s	locret_1C2A0
0001C98A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C990 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C996 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C9A0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C9A4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9A8 0240 0007                  		andi.w	#7,d0
0001C9AC 6700                       		beq.s	loc_1C298
0001C9AE 5340                       		subq.w	#1,d0
0001C9B0 C0FC 0180                  		mulu.w	#$180,d0
0001C9B4 43F1 0000                  		lea	(a1,d0.w),a1
0001C9B8 323C 000B                  		move.w	#$B,d1
0001C9BC 6000 0000                  		bra.w	LoadTiles
0001C9C0                            ; ===========================================================================
0001C9C0                            
0001C9C0                            loc_1C298:
0001C9C0 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C9C6 609A                       		bra.s	loc_1C23A
0001C9C8                            ; ===========================================================================
0001C9C8                            
0001C9C8                            locret_1C2A0:
0001C9C8 4E75                       		rts	
0001C9CA                            ; ===========================================================================
0001C9CA                            ; ---------------------------------------------------------------------------
0001C9CA                            ; Animated pattern routine - ending sequence
0001C9CA                            ; ---------------------------------------------------------------------------
0001C9CA                            
0001C9CA                            AniArt_Ending:				; XREF: AniArt_Index
0001C9CA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9CE 6A00                       		bpl.s	loc_1C2F4
0001C9D0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C9D6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C9DC 45F8 9400                  		lea	($FFFF9400).w,a2
0001C9E0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C9E4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C9E8 0240 0001                  		andi.w	#1,d0
0001C9EC 6700                       		beq.s	loc_1C2CE
0001C9EE 43E9 0200                  		lea	$200(a1),a1
0001C9F2 45EA 0200                  		lea	$200(a2),a2
0001C9F6                            
0001C9F6                            loc_1C2CE:
0001C9F6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CA00 323C 000F                  		move.w	#$F,d1
0001CA04 6100 0000                  		bsr.w	LoadTiles
0001CA08 224A                       		movea.l	a2,a1
0001CA0A 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CA14 323C 000F                  		move.w	#$F,d1
0001CA18 6000 0000                  		bra.w	LoadTiles
0001CA1C                            ; ===========================================================================
0001CA1C                            
0001CA1C                            loc_1C2F4:
0001CA1C 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA20 6A00                       		bpl.s	loc_1C33C
0001CA22 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA28 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CA2C 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CA30 0240 0007                  		andi.w	#7,d0
0001CA34 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CA38 EF48                       		lsl.w	#7,d0
0001CA3A 3200                       		move.w	d0,d1
0001CA3C D040                       		add.w	d0,d0
0001CA3E D041                       		add.w	d1,d0
0001CA40 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CA4A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CA50 43F1 0000                  		lea	(a1,d0.w),a1
0001CA54 323C 000B                  		move.w	#$B,d1
0001CA58 6000 0000                  		bra.w	LoadTiles
0001CA5C                            ; ===========================================================================
0001CA5C 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CA64                            ; ===========================================================================
0001CA64                            
0001CA64                            loc_1C33C:
0001CA64 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CA68 6A00                       		bpl.s	loc_1C37A
0001CA6A 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CA70 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CA74 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CA78 0240 0003                  		andi.w	#3,d0
0001CA7C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CA80 E148                       		lsl.w	#8,d0
0001CA82 D040                       		add.w	d0,d0
0001CA84 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CA8E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CA92 43F1 0000                  		lea	(a1,d0.w),a1
0001CA96 323C 000F                  		move.w	#$F,d1
0001CA9A 6000 0000                  		bra.w	LoadTiles
0001CA9E                            ; ===========================================================================
0001CA9E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CAA2                            ; ===========================================================================
0001CAA2                            
0001CAA2                            loc_1C37A:
0001CAA2 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CAA6 6A00                       		bpl.s	locret_1C3B4
0001CAA8 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CAAE 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CAB2 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CAB6 0240 0003                  		andi.w	#3,d0
0001CABA 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CABE E148                       		lsl.w	#8,d0
0001CAC0 D040                       		add.w	d0,d0
0001CAC2 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CACC 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CAD0 43F1 0000                  		lea	(a1,d0.w),a1
0001CAD4 323C 000F                  		move.w	#$F,d1
0001CAD8 6000 0000                  		bra.w	LoadTiles
0001CADC                            ; ===========================================================================
0001CADC                            
0001CADC                            locret_1C3B4:
0001CADC 4E75                       		rts	
0001CADE                            ; ===========================================================================
0001CADE                            
0001CADE                            AniArt_none:				; XREF: AniArt_Index
0001CADE 4E75                       		rts	
0001CAE0                            
0001CAE0                            ; ---------------------------------------------------------------------------
0001CAE0                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CAE0                            ; ---------------------------------------------------------------------------
0001CAE0                            
0001CAE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAE0                            
0001CAE0                            
0001CAE0                            LoadTiles:
0001CAE0 2C99                       		move.l	(a1)+,(a6)
0001CAE2 2C99                       		move.l	(a1)+,(a6)
0001CAE4 2C99                       		move.l	(a1)+,(a6)
0001CAE6 2C99                       		move.l	(a1)+,(a6)
0001CAE8 2C99                       		move.l	(a1)+,(a6)
0001CAEA 2C99                       		move.l	(a1)+,(a6)
0001CAEC 2C99                       		move.l	(a1)+,(a6)
0001CAEE 2C99                       		move.l	(a1)+,(a6)
0001CAF0 51C9 FFEE                  		dbf	d1,LoadTiles
0001CAF4 4E75                       		rts	
0001CAF6                            ; End of function LoadTiles
0001CAF6                            
0001CAF6                            ; ===========================================================================
0001CAF6                            ; ---------------------------------------------------------------------------
0001CAF6                            ; Animated pattern routine - more Marble Zone
0001CAF6                            ; ---------------------------------------------------------------------------
0001CAF6 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CAFA 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CAFE 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CB02 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CB06 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CB0A 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CB0E 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CB12 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CB16                            ; ===========================================================================
0001CB16                            
0001CB16                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CB16 2C91                       		move.l	(a1),(a6)
0001CB18 43E9 0010                  		lea	$10(a1),a1
0001CB1C 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CB20 4E75                       		rts	
0001CB22                            ; ===========================================================================
0001CB22                            
0001CB22                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CB22 2029 0002                  		move.l	2(a1),d0
0001CB26 1029 0001                  		move.b	1(a1),d0
0001CB2A E098                       		ror.l	#8,d0
0001CB2C 2C80                       		move.l	d0,(a6)
0001CB2E 43E9 0010                  		lea	$10(a1),a1
0001CB32 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CB36 4E75                       		rts	
0001CB38                            ; ===========================================================================
0001CB38                            
0001CB38                            loc_1C410:				; XREF: AniArt_MZextra
0001CB38 2CA9 0002                  		move.l	2(a1),(a6)
0001CB3C 43E9 0010                  		lea	$10(a1),a1
0001CB40 51C9 FFF6                  		dbf	d1,loc_1C410
0001CB44 4E75                       		rts	
0001CB46                            ; ===========================================================================
0001CB46                            
0001CB46                            loc_1C41E:				; XREF: AniArt_MZextra
0001CB46 2029 0004                  		move.l	4(a1),d0
0001CB4A 1029 0003                  		move.b	3(a1),d0
0001CB4E E098                       		ror.l	#8,d0
0001CB50 2C80                       		move.l	d0,(a6)
0001CB52 43E9 0010                  		lea	$10(a1),a1
0001CB56 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CB5A 4E75                       		rts	
0001CB5C                            ; ===========================================================================
0001CB5C                            
0001CB5C                            loc_1C434:				; XREF: AniArt_MZextra
0001CB5C 2CA9 0004                  		move.l	4(a1),(a6)
0001CB60 43E9 0010                  		lea	$10(a1),a1
0001CB64 51C9 FFF6                  		dbf	d1,loc_1C434
0001CB68 4E75                       		rts	
0001CB6A                            ; ===========================================================================
0001CB6A                            
0001CB6A                            loc_1C442:				; XREF: AniArt_MZextra
0001CB6A 2029 0006                  		move.l	6(a1),d0
0001CB6E 1029 0005                  		move.b	5(a1),d0
0001CB72 E098                       		ror.l	#8,d0
0001CB74 2C80                       		move.l	d0,(a6)
0001CB76 43E9 0010                  		lea	$10(a1),a1
0001CB7A 51C9 FFEE                  		dbf	d1,loc_1C442
0001CB7E 4E75                       		rts	
0001CB80                            ; ===========================================================================
0001CB80                            
0001CB80                            loc_1C458:				; XREF: AniArt_MZextra
0001CB80 2CA9 0006                  		move.l	6(a1),(a6)
0001CB84 43E9 0010                  		lea	$10(a1),a1
0001CB88 51C9 FFF6                  		dbf	d1,loc_1C458
0001CB8C 4E75                       		rts	
0001CB8E                            ; ===========================================================================
0001CB8E                            
0001CB8E                            loc_1C466:				; XREF: AniArt_MZextra
0001CB8E 2029 0008                  		move.l	8(a1),d0
0001CB92 1029 0007                  		move.b	7(a1),d0
0001CB96 E098                       		ror.l	#8,d0
0001CB98 2C80                       		move.l	d0,(a6)
0001CB9A 43E9 0010                  		lea	$10(a1),a1
0001CB9E 51C9 FFEE                  		dbf	d1,loc_1C466
0001CBA2 4E75                       		rts	
0001CBA4                            ; ===========================================================================
0001CBA4                            
0001CBA4                            loc_1C47C:				; XREF: AniArt_MZextra
0001CBA4 2CA9 0008                  		move.l	8(a1),(a6)
0001CBA8 43E9 0010                  		lea	$10(a1),a1
0001CBAC 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CBB0 4E75                       		rts	
0001CBB2                            ; ===========================================================================
0001CBB2                            
0001CBB2                            loc_1C48A:				; XREF: AniArt_MZextra
0001CBB2 2029 000A                  		move.l	$A(a1),d0
0001CBB6 1029 0009                  		move.b	9(a1),d0
0001CBBA E098                       		ror.l	#8,d0
0001CBBC 2C80                       		move.l	d0,(a6)
0001CBBE 43E9 0010                  		lea	$10(a1),a1
0001CBC2 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CBC6 4E75                       		rts	
0001CBC8                            ; ===========================================================================
0001CBC8                            
0001CBC8                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CBC8 2CA9 000A                  		move.l	$A(a1),(a6)
0001CBCC 43E9 0010                  		lea	$10(a1),a1
0001CBD0 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CBD4 4E75                       		rts	
0001CBD6                            ; ===========================================================================
0001CBD6                            
0001CBD6                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CBD6 2029 000C                  		move.l	$C(a1),d0
0001CBDA 1029 000B                  		move.b	$B(a1),d0
0001CBDE E098                       		ror.l	#8,d0
0001CBE0 2C80                       		move.l	d0,(a6)
0001CBE2 43E9 0010                  		lea	$10(a1),a1
0001CBE6 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CBEA 4E75                       		rts	
0001CBEC                            ; ===========================================================================
0001CBEC                            
0001CBEC                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CBEC 2CA9 000C                  		move.l	$C(a1),(a6)
0001CBF0 43E9 0010                  		lea	$10(a1),a1
0001CBF4 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CBF8 4E75                       		rts	
0001CBFA                            ; ===========================================================================
0001CBFA                            
0001CBFA                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CBFA 2029 000C                  		move.l	$C(a1),d0
0001CBFE E198                       		rol.l	#8,d0
0001CC00 1011                       		move.b	0(a1),d0
0001CC02 2C80                       		move.l	d0,(a6)
0001CC04 43E9 0010                  		lea	$10(a1),a1
0001CC08 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CC0C 4E75                       		rts	
0001CC0E                            ; ===========================================================================
0001CC0E                            
0001CC0E                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CC0E 3CA9 000E                  		move.w	$E(a1),(a6)
0001CC12 3C91                       		move.w	0(a1),(a6)
0001CC14 43E9 0010                  		lea	$10(a1),a1
0001CC18 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CC1C 4E75                       		rts	
0001CC1E                            ; ===========================================================================
0001CC1E                            
0001CC1E                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CC1E 2011                       		move.l	0(a1),d0
0001CC20 1029 000F                  		move.b	$F(a1),d0
0001CC24 E098                       		ror.l	#8,d0
0001CC26 2C80                       		move.l	d0,(a6)
0001CC28 43E9 0010                  		lea	$10(a1),a1
0001CC2C 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CC30 4E75                       		rts	
0001CC32                            
0001CC32                            ; ---------------------------------------------------------------------------
0001CC32                            ; Animated pattern routine - giant ring
0001CC32                            ; ---------------------------------------------------------------------------
0001CC32                            
0001CC32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC32                            
0001CC32                            
0001CC32                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CC32 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CC36 6600                       		bne.s	loc_1C518
0001CC38 4E75                       		rts	
0001CC3A                            ; ===========================================================================
0001CC3A                            
0001CC3A                            loc_1C518:
0001CC3A 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CC40 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CC46 7000                       		moveq	#0,d0
0001CC48 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CC4C 43F1 0000                  		lea	(a1,d0.w),a1
0001CC50 0640 8000                  		addi.w	#$8000,d0
0001CC54 E588                       		lsl.l	#2,d0
0001CC56 E448                       		lsr.w	#2,d0
0001CC58 0040 4000                  		ori.w	#$4000,d0
0001CC5C 4840                       		swap	d0
0001CC5E 2D40 0004                  		move.l	d0,4(a6)
0001CC62 323C 000D                  		move.w	#$D,d1
0001CC66 6000 FE78                  		bra.w	LoadTiles
0001CC6A                            ; End of function AniArt_GiantRing
0001CC6A                            
0001CC6A                            ; ===========================================================================
0001CC6A                            ; ---------------------------------------------------------------------------
0001CC6A                            ; Object 21 - SCORE, TIME, RINGS
0001CC6A                            ; ---------------------------------------------------------------------------
0001CC6A                            
0001CC6A                            Obj21:					; XREF: Obj_Index
0001CC6A 7000                       		moveq	#0,d0
0001CC6C 1028 0024                  		move.b	$24(a0),d0
0001CC70 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CC74 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CC78                            ; ===========================================================================
0001CC78 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CC7A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CC7C                            ; ===========================================================================
0001CC7C                            
0001CC7C                            Obj21_Main:				; XREF: Obj21_Main
0001CC7C 5428 0024                  		addq.b	#2,$24(a0)
0001CC80 317C 0090 0008             		move.w	#$90,8(a0)
0001CC86 317C 0108 000A             		move.w	#$108,$A(a0)
0001CC8C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CC94 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CC9A 117C 0000 0001             		move.b	#0,1(a0)
0001CCA0 117C 0000 0018             		move.b	#0,$18(a0)
0001CCA6                            
0001CCA6                            Obj21_Flash:				; XREF: Obj21_Main
0001CCA6 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CCAA 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CCAC 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CCB0 4EF9 0000 DC04             		jmp	DisplaySprite
0001CCB6                            ; ===========================================================================
0001CCB6                            
0001CCB6                            Obj21_Flash2:
0001CCB6 7000                       		moveq	#0,d0
0001CCB8 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CCBE 6600                       		bne.s	Obj21_Display
0001CCC0 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CCC2 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CCC8 6600                       		bne.s	Obj21_Display	; if not, branch
0001CCCA 5440                       		addq.w	#2,d0		; make time counter flash red
0001CCCC                            
0001CCCC                            Obj21_Display:
0001CCCC 1140 001A                  		move.b	d0,$1A(a0)
0001CCD0 4EF9 0000 DC04             		jmp	DisplaySprite
0001CCD6                            ; ===========================================================================
0001CCD6                            ; ---------------------------------------------------------------------------
0001CCD6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CCD6                            ; ---------------------------------------------------------------------------
0001CCD6                            Map_obj21:
0001CCD6                            	include "_maps\obj21.asm"
0001CCD6                            ; ---------------------------------------------------------------------------
0001CCD6                            ; Sprite mappings - SCORE, TIME, RINGS
0001CCD6                            ; ---------------------------------------------------------------------------
0001CCD6 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CCDA 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CCDE 0A                         byte_1C5BC:	dc.b $A
0001CCDF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CCE4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CCE9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CCEE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CCF3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CCF8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CCFD A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CD02 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD07 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD0C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CD11 00                         		dc.b 0
0001CD12 0A                         byte_1C5F0:	dc.b $A
0001CD13 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD18 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD1D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD22 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CD27 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD2C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CD31 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CD36 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD3B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD40 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CD45 00                         		dc.b 0
0001CD46 0A                         byte_1C624:	dc.b $A
0001CD47 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD4C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD51 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD56 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CD5B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD60 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CD65 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CD6A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CD6F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CD74 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CD79 00                         		dc.b 0
0001CD7A 0A                         byte_1C658:	dc.b $A
0001CD7B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD80 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD85 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD8A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CD8F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD94 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CD99 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CD9E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CDA3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CDA8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CDAE 00                         		even
0001CDAE 00                         		even
0001CDAE                            
0001CDAE                            ; ---------------------------------------------------------------------------
0001CDAE                            ; Add points subroutine
0001CDAE                            ; ---------------------------------------------------------------------------
0001CDAE                            
0001CDAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDAE                            
0001CDAE                            
0001CDAE                            AddPoints:
0001CDAE 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CDB4 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CDB8 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CDBC D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CDBE 223C 000F 423F             		move.l	#999999,d1
0001CDC4 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CDC6 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CDCA 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CDCC 2481                       		move.l	d1,(a2)
0001CDCE                            
0001CDCE                            loc_1C6AC:
0001CDCE 2013                       		move.l	(a3),d0
0001CDD0 B092                       		cmp.l	(a2),d0
0001CDD2 6500 0000                  		bcs.w	locret_1C6B6
0001CDD6 2480                       		move.l	d0,(a2)
0001CDD8                            
0001CDD8                            locret_1C6B6:
0001CDD8 4E75                       		rts	
0001CDDA                            ; End of function AddPoints
0001CDDA                            
0001CDDA                            ; ---------------------------------------------------------------------------
0001CDDA                            ; Subroutine to	update the HUD
0001CDDA                            ; ---------------------------------------------------------------------------
0001CDDA                            
0001CDDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDDA                            
0001CDDA                            
0001CDDA                            HudUpdate:
0001CDDA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CDDE 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CDE2 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CDE6 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CDE8 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CDEC 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CDF2 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CDF6 6100 0000                  		bsr.w	Hud_Score
0001CDFA                            
0001CDFA                            Hud_ChkRings:
0001CDFA 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDFE 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CE00 6A00                       		bpl.s	loc_1C6E4
0001CE02 6100 0000                  		bsr.w	Hud_LoadZero
0001CE06                            
0001CE06                            loc_1C6E4:
0001CE06 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CE0A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CE10 7200                       		moveq	#0,d1
0001CE12 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CE16 6100 0000                  		bsr.w	Hud_Rings
0001CE1A                            
0001CE1A                            Hud_ChkTime:
0001CE1A 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CE1E 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CE20 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CE24 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CE26 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CE2A 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CE30 6700                       		beq.s	TimeOver	; if yes, branch
0001CE32 5221                       		addq.b	#1,-(a1)
0001CE34 0C11 003C                  		cmpi.b	#60,(a1)
0001CE38 6500                       		bcs.s	Hud_ChkLives
0001CE3A 12BC 0000                  		move.b	#0,(a1)
0001CE3E 5221                       		addq.b	#1,-(a1)
0001CE40 0C11 003C                  		cmpi.b	#60,(a1)
0001CE44 6500                       		bcs.s	loc_1C734
0001CE46 12BC 0000                  		move.b	#0,(a1)
0001CE4A 5221                       		addq.b	#1,-(a1)
0001CE4C 0C11 0009                  		cmpi.b	#9,(a1)
0001CE50 6500                       		bcs.s	loc_1C734
0001CE52 12BC 0009                  		move.b	#9,(a1)
0001CE56                            
0001CE56                            loc_1C734:
0001CE56 203C 5E40 0003             		move.l	#$5E400003,d0
0001CE5C 7200                       		moveq	#0,d1
0001CE5E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CE62 6100 0000                  		bsr.w	Hud_Mins
0001CE66 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CE6C 7200                       		moveq	#0,d1
0001CE6E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CE72 6100 0000                  		bsr.w	Hud_Secs
0001CE76                            
0001CE76                            Hud_ChkLives:
0001CE76 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CE7A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CE7C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CE80 6100 0000                  		bsr.w	Hud_Lives
0001CE84                            
0001CE84                            Hud_ChkBonus:
0001CE84 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CE88 6700                       		beq.s	Hud_End		; if not, branch
0001CE8A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CE8E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CE98 7200                       		moveq	#0,d1
0001CE9A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CE9E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CEA2 7200                       		moveq	#0,d1
0001CEA4 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CEA8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CEAC                            
0001CEAC                            Hud_End:
0001CEAC 4E75                       		rts	
0001CEAE                            ; ===========================================================================
0001CEAE                            
0001CEAE                            TimeOver:				; XREF: Hud_ChkTime
0001CEAE 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CEB2 41F8 D000                  		lea	($FFFFD000).w,a0
0001CEB6 2448                       		movea.l	a0,a2
0001CEB8 6100 E908                  		bsr.w	KillSonic
0001CEBC 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CEC2 4E75                       		rts	
0001CEC4                            ; ===========================================================================
0001CEC4                            
0001CEC4                            HudDebug:				; XREF: HudUpdate
0001CEC4 6100 0000                  		bsr.w	HudDb_XY
0001CEC8 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CECC 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CECE 6A00                       		bpl.s	HudDb_Rings
0001CED0 6100 0000                  		bsr.w	Hud_LoadZero
0001CED4                            
0001CED4                            HudDb_Rings:
0001CED4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CED8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CEDE 7200                       		moveq	#0,d1
0001CEE0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CEE4 6100 0000                  		bsr.w	Hud_Rings
0001CEE8                            
0001CEE8                            HudDb_ObjCount:
0001CEE8 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CEEE 7200                       		moveq	#0,d1
0001CEF0 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CEF4 6100 0000                  		bsr.w	Hud_Secs
0001CEF8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CEFC 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CEFE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CF02 6100 0000                  		bsr.w	Hud_Lives
0001CF06                            
0001CF06                            HudDb_ChkBonus:
0001CF06 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CF0A 6700                       		beq.s	HudDb_End	; if not, branch
0001CF0C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CF10 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CF1A 7200                       		moveq	#0,d1
0001CF1C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CF20 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF24 7200                       		moveq	#0,d1
0001CF26 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CF2A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF2E                            
0001CF2E                            HudDb_End:
0001CF2E 4E75                       		rts	
0001CF30                            ; End of function HudUpdate
0001CF30                            
0001CF30                            ; ---------------------------------------------------------------------------
0001CF30                            ; Subroutine to	load "0" on the	HUD
0001CF30                            ; ---------------------------------------------------------------------------
0001CF30                            
0001CF30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF30                            
0001CF30                            
0001CF30                            Hud_LoadZero:				; XREF: HudUpdate
0001CF30 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CF3A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CF3E 343C 0002                  		move.w	#2,d2
0001CF42 6000                       		bra.s	loc_1C83E
0001CF44                            ; End of function Hud_LoadZero
0001CF44                            
0001CF44                            ; ---------------------------------------------------------------------------
0001CF44                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CF44                            ; ---------------------------------------------------------------------------
0001CF44                            
0001CF44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF44                            
0001CF44                            
0001CF44                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CF44 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF4A 6100 0000                  		bsr.w	Hud_Lives
0001CF4E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CF58 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CF5C 343C 000E                  		move.w	#$E,d2
0001CF60                            
0001CF60                            loc_1C83E:				; XREF: Hud_LoadZero
0001CF60 43FA 0000                  		lea	Art_Hud(pc),a1
0001CF64                            
0001CF64                            loc_1C842:
0001CF64 323C 000F                  		move.w	#$F,d1
0001CF68 101A                       		move.b	(a2)+,d0
0001CF6A 6B00                       		bmi.s	loc_1C85E
0001CF6C 4880                       		ext.w	d0
0001CF6E EB48                       		lsl.w	#5,d0
0001CF70 47F1 0000                  		lea	(a1,d0.w),a3
0001CF74                            
0001CF74                            loc_1C852:
0001CF74 2C9B                       		move.l	(a3)+,(a6)
0001CF76 51C9 FFFC                  		dbf	d1,loc_1C852
0001CF7A                            
0001CF7A                            loc_1C858:
0001CF7A 51CA FFE8                  		dbf	d2,loc_1C842
0001CF7E                            
0001CF7E 4E75                       		rts	
0001CF80                            ; ===========================================================================
0001CF80                            
0001CF80                            loc_1C85E:
0001CF80 2CBC 0000 0000             		move.l	#0,(a6)
0001CF86 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CF8A                            
0001CF8A 60EE                       		bra.s	loc_1C858
0001CF8C                            ; End of function Hud_Base
0001CF8C                            
0001CF8C                            ; ===========================================================================
0001CF8C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CF98 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CF9C                            ; ---------------------------------------------------------------------------
0001CF9C                            ; Subroutine to	load debug mode	numbers	patterns
0001CF9C                            ; ---------------------------------------------------------------------------
0001CF9C                            
0001CF9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF9C                            
0001CF9C                            
0001CF9C                            HudDb_XY:				; XREF: HudDebug
0001CF9C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CFA6 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CFAA 4841                       		swap	d1
0001CFAC 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CFB0 6100                       		bsr.s	HudDb_XY2
0001CFB2 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CFB6 4841                       		swap	d1
0001CFB8 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CFBC                            ; End of function HudDb_XY
0001CFBC                            
0001CFBC                            
0001CFBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFBC                            
0001CFBC                            
0001CFBC                            HudDb_XY2:
0001CFBC 7C07                       		moveq	#7,d6
0001CFBE 43F9 0000 05FA             		lea	(Art_Text).l,a1
0001CFC4                            
0001CFC4                            HudDb_XYLoop:
0001CFC4 E959                       		rol.w	#4,d1
0001CFC6 3401                       		move.w	d1,d2
0001CFC8 0242 000F                  		andi.w	#$F,d2
0001CFCC 0C42 000A                  		cmpi.w	#$A,d2
0001CFD0 6500                       		bcs.s	loc_1C8B2
0001CFD2 5E42                       		addq.w	#7,d2
0001CFD4                            
0001CFD4                            loc_1C8B2:
0001CFD4 EB4A                       		lsl.w	#5,d2
0001CFD6 47F1 2000                  		lea	(a1,d2.w),a3
0001CFDA 2C9B                       		move.l	(a3)+,(a6)
0001CFDC 2C9B                       		move.l	(a3)+,(a6)
0001CFDE 2C9B                       		move.l	(a3)+,(a6)
0001CFE0 2C9B                       		move.l	(a3)+,(a6)
0001CFE2 2C9B                       		move.l	(a3)+,(a6)
0001CFE4 2C9B                       		move.l	(a3)+,(a6)
0001CFE6 2C9B                       		move.l	(a3)+,(a6)
0001CFE8 2C9B                       		move.l	(a3)+,(a6)
0001CFEA 4841                       		swap	d1
0001CFEC 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CFF0                            
0001CFF0 4E75                       		rts	
0001CFF2                            ; End of function HudDb_XY2
0001CFF2                            
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            ; Subroutine to	load rings numbers patterns
0001CFF2                            ; ---------------------------------------------------------------------------
0001CFF2                            
0001CFF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFF2                            
0001CFF2                            
0001CFF2                            Hud_Rings:				; XREF: HudUpdate
0001CFF2 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CFF8 7C02                       		moveq	#2,d6
0001CFFA 6000                       		bra.s	Hud_LoadArt
0001CFFC                            ; End of function Hud_Rings
0001CFFC                            
0001CFFC                            ; ---------------------------------------------------------------------------
0001CFFC                            ; Subroutine to	load score numbers patterns
0001CFFC                            ; ---------------------------------------------------------------------------
0001CFFC                            
0001CFFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFFC                            
0001CFFC                            
0001CFFC                            Hud_Score:				; XREF: HudUpdate
0001CFFC 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D002 7C05                       		moveq	#5,d6
0001D004                            
0001D004                            Hud_LoadArt:
0001D004 7800                       		moveq	#0,d4
0001D006 43FA 0000                  		lea	Art_Hud(pc),a1
0001D00A                            
0001D00A                            Hud_ScoreLoop:
0001D00A 7400                       		moveq	#0,d2
0001D00C 261A                       		move.l	(a2)+,d3
0001D00E                            
0001D00E                            loc_1C8EC:
0001D00E 9283                       		sub.l	d3,d1
0001D010 6500                       		bcs.s	loc_1C8F4
0001D012 5242                       		addq.w	#1,d2
0001D014 60F8                       		bra.s	loc_1C8EC
0001D016                            ; ===========================================================================
0001D016                            
0001D016                            loc_1C8F4:
0001D016 D283                       		add.l	d3,d1
0001D018 4A42                       		tst.w	d2
0001D01A 6700                       		beq.s	loc_1C8FE
0001D01C 383C 0001                  		move.w	#1,d4
0001D020                            
0001D020                            loc_1C8FE:
0001D020 4A44                       		tst.w	d4
0001D022 6700                       		beq.s	loc_1C92C
0001D024 ED4A                       		lsl.w	#6,d2
0001D026 2D40 0004                  		move.l	d0,4(a6)
0001D02A 47F1 2000                  		lea	(a1,d2.w),a3
0001D02E 2C9B                       		move.l	(a3)+,(a6)
0001D030 2C9B                       		move.l	(a3)+,(a6)
0001D032 2C9B                       		move.l	(a3)+,(a6)
0001D034 2C9B                       		move.l	(a3)+,(a6)
0001D036 2C9B                       		move.l	(a3)+,(a6)
0001D038 2C9B                       		move.l	(a3)+,(a6)
0001D03A 2C9B                       		move.l	(a3)+,(a6)
0001D03C 2C9B                       		move.l	(a3)+,(a6)
0001D03E 2C9B                       		move.l	(a3)+,(a6)
0001D040 2C9B                       		move.l	(a3)+,(a6)
0001D042 2C9B                       		move.l	(a3)+,(a6)
0001D044 2C9B                       		move.l	(a3)+,(a6)
0001D046 2C9B                       		move.l	(a3)+,(a6)
0001D048 2C9B                       		move.l	(a3)+,(a6)
0001D04A 2C9B                       		move.l	(a3)+,(a6)
0001D04C 2C9B                       		move.l	(a3)+,(a6)
0001D04E                            
0001D04E                            loc_1C92C:
0001D04E 0680 0040 0000             		addi.l	#$400000,d0
0001D054 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D058                            
0001D058 4E75                       		rts	
0001D05A                            ; End of function Hud_Score
0001D05A                            
0001D05A                            ; ---------------------------------------------------------------------------
0001D05A                            ; Subroutine to	load countdown numbers on the continue screen
0001D05A                            ; ---------------------------------------------------------------------------
0001D05A                            
0001D05A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D05A                            
0001D05A                            
0001D05A                            ContScrCounter:				; XREF: ContinueScreen
0001D05A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D064 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D06A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D070 7C01                       		moveq	#1,d6
0001D072 7800                       		moveq	#0,d4
0001D074 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D078                            
0001D078                            ContScr_Loop:
0001D078 7400                       		moveq	#0,d2
0001D07A 261A                       		move.l	(a2)+,d3
0001D07C                            
0001D07C                            loc_1C95A:
0001D07C 9283                       		sub.l	d3,d1
0001D07E 6500                       		bcs.s	loc_1C962
0001D080 5242                       		addq.w	#1,d2
0001D082 60F8                       		bra.s	loc_1C95A
0001D084                            ; ===========================================================================
0001D084                            
0001D084                            loc_1C962:
0001D084 D283                       		add.l	d3,d1
0001D086 ED4A                       		lsl.w	#6,d2
0001D088 47F1 2000                  		lea	(a1,d2.w),a3
0001D08C 2C9B                       		move.l	(a3)+,(a6)
0001D08E 2C9B                       		move.l	(a3)+,(a6)
0001D090 2C9B                       		move.l	(a3)+,(a6)
0001D092 2C9B                       		move.l	(a3)+,(a6)
0001D094 2C9B                       		move.l	(a3)+,(a6)
0001D096 2C9B                       		move.l	(a3)+,(a6)
0001D098 2C9B                       		move.l	(a3)+,(a6)
0001D09A 2C9B                       		move.l	(a3)+,(a6)
0001D09C 2C9B                       		move.l	(a3)+,(a6)
0001D09E 2C9B                       		move.l	(a3)+,(a6)
0001D0A0 2C9B                       		move.l	(a3)+,(a6)
0001D0A2 2C9B                       		move.l	(a3)+,(a6)
0001D0A4 2C9B                       		move.l	(a3)+,(a6)
0001D0A6 2C9B                       		move.l	(a3)+,(a6)
0001D0A8 2C9B                       		move.l	(a3)+,(a6)
0001D0AA 2C9B                       		move.l	(a3)+,(a6)
0001D0AC 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D0B0                            
0001D0B0 4E75                       		rts	
0001D0B2                            ; End of function ContScrCounter
0001D0B2                            
0001D0B2                            ; ===========================================================================
0001D0B2                            ; ---------------------------------------------------------------------------
0001D0B2                            ; HUD counter sizes
0001D0B2                            ; ---------------------------------------------------------------------------
0001D0B2 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D0B6 0000 2710                  Hud_10000:	dc.l 10000
0001D0BA 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D0BE 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D0C2 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D0C6 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D0CA                            
0001D0CA                            ; ---------------------------------------------------------------------------
0001D0CA                            ; Subroutine to	load time numbers patterns
0001D0CA                            ; ---------------------------------------------------------------------------
0001D0CA                            
0001D0CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0CA                            
0001D0CA                            
0001D0CA                            Hud_Mins:				; XREF: Hud_ChkTime
0001D0CA 45F9 0001 D0C6             		lea	(Hud_1).l,a2
0001D0D0 7C00                       		moveq	#0,d6
0001D0D2 6000                       		bra.s	loc_1C9BA
0001D0D4                            ; End of function Hud_Mins
0001D0D4                            
0001D0D4                            
0001D0D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0D4                            
0001D0D4                            
0001D0D4                            Hud_Secs:				; XREF: Hud_ChkTime
0001D0D4 45F9 0001 D0C2             		lea	(Hud_10).l,a2
0001D0DA 7C01                       		moveq	#1,d6
0001D0DC                            
0001D0DC                            loc_1C9BA:
0001D0DC 7800                       		moveq	#0,d4
0001D0DE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D0E2                            
0001D0E2                            Hud_TimeLoop:
0001D0E2 7400                       		moveq	#0,d2
0001D0E4 261A                       		move.l	(a2)+,d3
0001D0E6                            
0001D0E6                            loc_1C9C4:
0001D0E6 9283                       		sub.l	d3,d1
0001D0E8 6500                       		bcs.s	loc_1C9CC
0001D0EA 5242                       		addq.w	#1,d2
0001D0EC 60F8                       		bra.s	loc_1C9C4
0001D0EE                            ; ===========================================================================
0001D0EE                            
0001D0EE                            loc_1C9CC:
0001D0EE D283                       		add.l	d3,d1
0001D0F0 4A42                       		tst.w	d2
0001D0F2 6700                       		beq.s	loc_1C9D6
0001D0F4 383C 0001                  		move.w	#1,d4
0001D0F8                            
0001D0F8                            loc_1C9D6:
0001D0F8 ED4A                       		lsl.w	#6,d2
0001D0FA 2D40 0004                  		move.l	d0,4(a6)
0001D0FE 47F1 2000                  		lea	(a1,d2.w),a3
0001D102 2C9B                       		move.l	(a3)+,(a6)
0001D104 2C9B                       		move.l	(a3)+,(a6)
0001D106 2C9B                       		move.l	(a3)+,(a6)
0001D108 2C9B                       		move.l	(a3)+,(a6)
0001D10A 2C9B                       		move.l	(a3)+,(a6)
0001D10C 2C9B                       		move.l	(a3)+,(a6)
0001D10E 2C9B                       		move.l	(a3)+,(a6)
0001D110 2C9B                       		move.l	(a3)+,(a6)
0001D112 2C9B                       		move.l	(a3)+,(a6)
0001D114 2C9B                       		move.l	(a3)+,(a6)
0001D116 2C9B                       		move.l	(a3)+,(a6)
0001D118 2C9B                       		move.l	(a3)+,(a6)
0001D11A 2C9B                       		move.l	(a3)+,(a6)
0001D11C 2C9B                       		move.l	(a3)+,(a6)
0001D11E 2C9B                       		move.l	(a3)+,(a6)
0001D120 2C9B                       		move.l	(a3)+,(a6)
0001D122 0680 0040 0000             		addi.l	#$400000,d0
0001D128 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D12C                            
0001D12C 4E75                       		rts	
0001D12E                            ; End of function Hud_Secs
0001D12E                            
0001D12E                            ; ---------------------------------------------------------------------------
0001D12E                            ; Subroutine to	load time/ring bonus numbers patterns
0001D12E                            ; ---------------------------------------------------------------------------
0001D12E                            
0001D12E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D12E                            
0001D12E                            
0001D12E                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D12E 45F9 0001 D0BA             		lea	(Hud_1000).l,a2
0001D134 7C03                       		moveq	#3,d6
0001D136 7800                       		moveq	#0,d4
0001D138 43FA 0000                  		lea	Art_Hud(pc),a1
0001D13C                            
0001D13C                            Hud_BonusLoop:
0001D13C 7400                       		moveq	#0,d2
0001D13E 261A                       		move.l	(a2)+,d3
0001D140                            
0001D140                            loc_1CA1E:
0001D140 9283                       		sub.l	d3,d1
0001D142 6500                       		bcs.s	loc_1CA26
0001D144 5242                       		addq.w	#1,d2
0001D146 60F8                       		bra.s	loc_1CA1E
0001D148                            ; ===========================================================================
0001D148                            
0001D148                            loc_1CA26:
0001D148 D283                       		add.l	d3,d1
0001D14A 4A42                       		tst.w	d2
0001D14C 6700                       		beq.s	loc_1CA30
0001D14E 383C 0001                  		move.w	#1,d4
0001D152                            
0001D152                            loc_1CA30:
0001D152 4A44                       		tst.w	d4
0001D154 6700                       		beq.s	Hud_ClrBonus
0001D156 ED4A                       		lsl.w	#6,d2
0001D158 47F1 2000                  		lea	(a1,d2.w),a3
0001D15C 2C9B                       		move.l	(a3)+,(a6)
0001D15E 2C9B                       		move.l	(a3)+,(a6)
0001D160 2C9B                       		move.l	(a3)+,(a6)
0001D162 2C9B                       		move.l	(a3)+,(a6)
0001D164 2C9B                       		move.l	(a3)+,(a6)
0001D166 2C9B                       		move.l	(a3)+,(a6)
0001D168 2C9B                       		move.l	(a3)+,(a6)
0001D16A 2C9B                       		move.l	(a3)+,(a6)
0001D16C 2C9B                       		move.l	(a3)+,(a6)
0001D16E 2C9B                       		move.l	(a3)+,(a6)
0001D170 2C9B                       		move.l	(a3)+,(a6)
0001D172 2C9B                       		move.l	(a3)+,(a6)
0001D174 2C9B                       		move.l	(a3)+,(a6)
0001D176 2C9B                       		move.l	(a3)+,(a6)
0001D178 2C9B                       		move.l	(a3)+,(a6)
0001D17A 2C9B                       		move.l	(a3)+,(a6)
0001D17C                            
0001D17C                            loc_1CA5A:
0001D17C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D180                            
0001D180 4E75                       		rts	
0001D182                            ; ===========================================================================
0001D182                            
0001D182                            Hud_ClrBonus:
0001D182 7A0F                       		moveq	#$F,d5
0001D184                            
0001D184                            Hud_ClrBonusLoop:
0001D184 2CBC 0000 0000             		move.l	#0,(a6)
0001D18A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D18E                            
0001D18E 60EC                       		bra.s	loc_1CA5A
0001D190                            ; End of function Hud_TimeRingBonus
0001D190                            
0001D190                            ; ---------------------------------------------------------------------------
0001D190                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D190                            ; ---------------------------------------------------------------------------
0001D190                            
0001D190                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D190                            
0001D190                            
0001D190                            Hud_Lives:				; XREF: Hud_ChkLives
0001D190 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D196 7200                       		moveq	#0,d1
0001D198 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D19C 45F9 0001 D0C2             		lea	(Hud_10).l,a2
0001D1A2 7C01                       		moveq	#1,d6
0001D1A4 7800                       		moveq	#0,d4
0001D1A6 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D1AA                            
0001D1AA                            Hud_LivesLoop:
0001D1AA 2D40 0004                  		move.l	d0,4(a6)
0001D1AE 7400                       		moveq	#0,d2
0001D1B0 261A                       		move.l	(a2)+,d3
0001D1B2                            
0001D1B2                            loc_1CA90:
0001D1B2 9283                       		sub.l	d3,d1
0001D1B4 6500                       		bcs.s	loc_1CA98
0001D1B6 5242                       		addq.w	#1,d2
0001D1B8 60F8                       		bra.s	loc_1CA90
0001D1BA                            ; ===========================================================================
0001D1BA                            
0001D1BA                            loc_1CA98:
0001D1BA D283                       		add.l	d3,d1
0001D1BC 4A42                       		tst.w	d2
0001D1BE 6700                       		beq.s	loc_1CAA2
0001D1C0 383C 0001                  		move.w	#1,d4
0001D1C4                            
0001D1C4                            loc_1CAA2:
0001D1C4 4A44                       		tst.w	d4
0001D1C6 6700                       		beq.s	Hud_ClrLives
0001D1C8                            
0001D1C8                            loc_1CAA6:
0001D1C8 EB4A                       		lsl.w	#5,d2
0001D1CA 47F1 2000                  		lea	(a1,d2.w),a3
0001D1CE 2C9B                       		move.l	(a3)+,(a6)
0001D1D0 2C9B                       		move.l	(a3)+,(a6)
0001D1D2 2C9B                       		move.l	(a3)+,(a6)
0001D1D4 2C9B                       		move.l	(a3)+,(a6)
0001D1D6 2C9B                       		move.l	(a3)+,(a6)
0001D1D8 2C9B                       		move.l	(a3)+,(a6)
0001D1DA 2C9B                       		move.l	(a3)+,(a6)
0001D1DC 2C9B                       		move.l	(a3)+,(a6)
0001D1DE                            
0001D1DE                            loc_1CABC:
0001D1DE 0680 0040 0000             		addi.l	#$400000,d0
0001D1E4 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D1E8                            
0001D1E8 4E75                       		rts	
0001D1EA                            ; ===========================================================================
0001D1EA                            
0001D1EA                            Hud_ClrLives:
0001D1EA 4A46                       		tst.w	d6
0001D1EC 67DA                       		beq.s	loc_1CAA6
0001D1EE 7A07                       		moveq	#7,d5
0001D1F0                            
0001D1F0                            Hud_ClrLivesLoop:
0001D1F0 2CBC 0000 0000             		move.l	#0,(a6)
0001D1F6 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D1FA 60E2                       		bra.s	loc_1CABC
0001D1FC                            ; End of function Hud_Lives
0001D1FC                            
0001D1FC                            ; ===========================================================================
0001D1FC                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D4FC                            		even
0001D4FC                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D63C                            		even
0001D63C                            ; ===========================================================================
0001D63C                            ; ---------------------------------------------------------------------------
0001D63C                            ; When debug mode is currently in use
0001D63C                            ; ---------------------------------------------------------------------------
0001D63C                            
0001D63C                            DebugMode:				; XREF: Obj01; Obj09
0001D63C 7000                       		moveq	#0,d0
0001D63E 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D642 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D646 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D64A                            ; ===========================================================================
0001D64A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D64C 0000                       		dc.w Debug_Skip-Debug_Index
0001D64E                            ; ===========================================================================
0001D64E                            
0001D64E                            Debug_Main:				; XREF: Debug_Index
0001D64E 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D652 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D658 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D65E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D664 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D66A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D670 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D676 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D67C 117C 0000 001A             		move.b	#0,$1A(a0)
0001D682 117C 0000 001C             		move.b	#0,$1C(a0)
0001D688 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D68E 6600                       		bne.s	Debug_Zone	; if not, branch
0001D690 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D696 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D69C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D69E 6000                       		bra.s	Debug_UseList
0001D6A0                            ; ===========================================================================
0001D6A0                            
0001D6A0                            Debug_Zone:
0001D6A0 7000                       		moveq	#0,d0
0001D6A2 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D6A6                            
0001D6A6                            Debug_UseList:
0001D6A6 45F9 0000 0000             		lea	(DebugList).l,a2
0001D6AC D040                       		add.w	d0,d0
0001D6AE D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D6B2 3C1A                       		move.w	(a2)+,d6
0001D6B4 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D6B8 6200                       		bhi.s	loc_1CF9E
0001D6BA 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D6C0                            
0001D6C0                            loc_1CF9E:
0001D6C0 6100 0000                  		bsr.w	Debug_ShowItem
0001D6C4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D6CA 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D6D0                            
0001D6D0                            Debug_Skip:				; XREF: Debug_Index
0001D6D0 7006                       		moveq	#6,d0
0001D6D2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D6D8 6700                       		beq.s	loc_1CFBE
0001D6DA 7000                       		moveq	#0,d0
0001D6DC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D6E0                            
0001D6E0                            loc_1CFBE:
0001D6E0 45F9 0000 0000             		lea	(DebugList).l,a2
0001D6E6 D040                       		add.w	d0,d0
0001D6E8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D6EC 3C1A                       		move.w	(a2)+,d6
0001D6EE 6100 0000                  		bsr.w	Debug_Control
0001D6F2 4EF9 0000 DC04             		jmp	DisplaySprite
0001D6F8                            
0001D6F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D6F8                            
0001D6F8                            
0001D6F8                            Debug_Control:
0001D6F8 7800                       		moveq	#0,d4
0001D6FA 323C 0001                  		move.w	#1,d1
0001D6FE 1838 F605                  		move.b	($FFFFF605).w,d4
0001D702 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D706 6600                       		bne.s	loc_1D018	; if yes, branch
0001D708 1038 F604                  		move.b	($FFFFF604).w,d0
0001D70C 0240 000F                  		andi.w	#$F,d0
0001D710 6600                       		bne.s	loc_1D000
0001D712 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D718 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D71E 6000 0000                  		bra.w	Debug_BackItem
0001D722                            ; ===========================================================================
0001D722                            
0001D722                            loc_1D000:
0001D722 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D726 6600                       		bne.s	loc_1D01C
0001D728 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D72E 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D732 6600                       		bne.s	loc_1D018
0001D734 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D73A                            
0001D73A                            loc_1D018:
0001D73A 1838 F604                  		move.b	($FFFFF604).w,d4
0001D73E                            
0001D73E                            loc_1D01C:
0001D73E 7200                       		moveq	#0,d1
0001D740 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D744 5241                       		addq.w	#1,d1
0001D746 4841                       		swap	d1
0001D748 E881                       		asr.l	#4,d1
0001D74A 2428 000C                  		move.l	$C(a0),d2
0001D74E 2628 0008                  		move.l	8(a0),d3
0001D752 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D756 6700                       		beq.s	loc_1D03C	; if not, branch
0001D758 9481                       		sub.l	d1,d2
0001D75A 6400                       		bcc.s	loc_1D03C
0001D75C 7400                       		moveq	#0,d2
0001D75E                            
0001D75E                            loc_1D03C:
0001D75E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D762 6700                       		beq.s	loc_1D052	; if not, branch
0001D764 D481                       		add.l	d1,d2
0001D766 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D76C 6500                       		bcs.s	loc_1D052
0001D76E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D774                            
0001D774                            loc_1D052:
0001D774 0804 0002                  		btst	#2,d4
0001D778 6700                       		beq.s	loc_1D05E
0001D77A 9681                       		sub.l	d1,d3
0001D77C 6400                       		bcc.s	loc_1D05E
0001D77E 7600                       		moveq	#0,d3
0001D780                            
0001D780                            loc_1D05E:
0001D780 0804 0003                  		btst	#3,d4
0001D784 6700                       		beq.s	loc_1D066
0001D786 D681                       		add.l	d1,d3
0001D788                            
0001D788                            loc_1D066:
0001D788 2142 000C                  		move.l	d2,$C(a0)
0001D78C 2143 0008                  		move.l	d3,8(a0)
0001D790                            
0001D790                            Debug_BackItem:
0001D790 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D796 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D798 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D79E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D7A0 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D7A4 6400                       		bcc.s	Debug_NoLoop
0001D7A6 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D7AA 6000                       		bra.s	Debug_NoLoop
0001D7AC                            ; ===========================================================================
0001D7AC                            
0001D7AC                            Debug_NextItem:
0001D7AC 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D7B2 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D7B4 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D7B8 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D7BC 6200                       		bhi.s	Debug_NoLoop
0001D7BE 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D7C4                            
0001D7C4                            Debug_NoLoop:
0001D7C4 6000 0000                  		bra.w	Debug_ShowItem
0001D7C8                            ; ===========================================================================
0001D7C8                            
0001D7C8                            Debug_MakeItem:
0001D7C8 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D7CE 6700                       		beq.s	Debug_Exit	; if not, branch
0001D7D0 4EB9 0000 E08A             		jsr	SingleObjLoad
0001D7D6 6600                       		bne.s	Debug_Exit
0001D7D8 3368 0008 0008             		move.w	8(a0),8(a1)
0001D7DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D7E4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D7E8 1368 0001 0001             		move.b	1(a0),1(a1)
0001D7EE 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D7F4 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D7FA 7000                       		moveq	#0,d0
0001D7FC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D800 E748                       		lsl.w	#3,d0
0001D802 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D808 4E75                       		rts	
0001D80A                            ; ===========================================================================
0001D80A                            
0001D80A                            Debug_Exit:
0001D80A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D810 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D812 7000                       		moveq	#0,d0
0001D814 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D818 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D820 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D826 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D82A 3140 000A                  		move.w	d0,$A(a0)
0001D82E 3140 000E                  		move.w	d0,$E(a0)
0001D832 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D838 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D83E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D844 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D846 4278 F780                  		clr.w	($FFFFF780).w
0001D84A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D850 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D858 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D85E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D864 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D86A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D870                            
0001D870                            Debug_DoNothing:
0001D870 4E75                       		rts	
0001D872                            ; End of function Debug_Control
0001D872                            
0001D872                            
0001D872                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D872                            
0001D872                            
0001D872                            Debug_ShowItem:				; XREF: Debug_Main
0001D872 7000                       		moveq	#0,d0
0001D874 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D878 E748                       		lsl.w	#3,d0
0001D87A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D880 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D886 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D88C 4E75                       		rts	
0001D88E                            ; End of function Debug_ShowItem
0001D88E                            
0001D88E                            ; ===========================================================================
0001D88E                            ; ---------------------------------------------------------------------------
0001D88E                            ; Debug	list pointers
0001D88E                            ; ---------------------------------------------------------------------------
0001D88E                            DebugList:
0001D88E                            	include "_inc\Debug list pointers.asm"
0001D88E                            ; ---------------------------------------------------------------------------
0001D88E                            ; Debug	list pointers
0001D88E                            ; ---------------------------------------------------------------------------
0001D88E 0000                       	dc.w Debug_GHZ-DebugList
0001D890 0000                       	dc.w Debug_LZ-DebugList
0001D892 0000                       	dc.w Debug_MZ-DebugList
0001D894 0000                       	dc.w Debug_SLZ-DebugList
0001D896 0000                       	dc.w Debug_SYZ-DebugList
0001D898 0000                       	dc.w Debug_SBZ-DebugList
0001D89A 0000                       	dc.w Debug_Ending-DebugList
0001D89A 0000                       	dc.w Debug_Ending-DebugList
0001D89C                            
0001D89C                            ; ---------------------------------------------------------------------------
0001D89C                            ; Debug	list - Green Hill
0001D89C                            ; ---------------------------------------------------------------------------
0001D89C                            Debug_GHZ:
0001D89C                            	include "_inc\Debug list - GHZ.asm"
0001D89C                            ; ---------------------------------------------------------------------------
0001D89C                            ; Debug	list - Green Hill
0001D89C                            ; ---------------------------------------------------------------------------
0001D89C 0010                       	dc.w $10			; number of items in list
0001D89E 2500 A46C                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D8A2 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D8A6 2600 AA72                  	dc.l Map_obj26+$26000000
0001D8AA 0000 0680                  	dc.b 0,	0, 6, $80
0001D8AE 1F00 9C64                  	dc.l Map_obj1F+$1F000000
0001D8B2 0000 0400                  	dc.b 0,	0, 4, 0
0001D8B6 2200 9F20                  	dc.l Map_obj22+$22000000
0001D8BA 0000 0444                  	dc.b 0,	0, 4, $44
0001D8BE 2B00 B0E6                  	dc.l Map_obj2B+$2B000000
0001D8C2 0000 047B                  	dc.b 0,	0, 4, $7B
0001D8C6 3600 D5EC                  	dc.l Map_obj36+$36000000
0001D8CA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D8CE 1800 8612                  	dc.l Map_obj18+$18000000
0001D8D2 0000 4000                  	dc.b 0,	0, $40,	0
0001D8D6 3B00 D712                  	dc.l Map_obj3B+$3B000000
0001D8DA 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D8DE 4000 FD9E                  	dc.l Map_obj40+$40000000
0001D8E2 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D8E6 4100 E318                  	dc.l Map_obj41+$41000000
0001D8EA 0000 0523                  	dc.b 0,	0, 5, $23
0001D8EE 4200 E53E                  	dc.l Map_obj42+$42000000
0001D8F2 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D8F6 4400 E84C                  	dc.l Map_obj44+$44000000
0001D8FA 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D8FE 1900 8680                  	dc.l Map_obj48+$19000000
0001D902 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D906 7901 77D2                  	dc.l Map_obj79+$79000000
0001D90A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D90E 4B00 A4AC                  	dc.l Map_obj4B+$4B000000
0001D912 0000 2400                  	dc.b 0,	0, $24,	0
0001D916 7D01 7922                  	dc.l Map_obj7D+$7D000000
0001D91A 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D91E                            	even
0001D91E                            	even
0001D91E                            
0001D91E                            ; ---------------------------------------------------------------------------
0001D91E                            ; Debug	list - Labyrinth
0001D91E                            ; ---------------------------------------------------------------------------
0001D91E                            Debug_LZ:
0001D91E                            	include "_inc\Debug list - LZ.asm"
0001D91E                            ; ---------------------------------------------------------------------------
0001D91E                            ; Debug	list - Labyrinth
0001D91E                            ; ---------------------------------------------------------------------------
0001D91E 0019                       	dc.w $19
0001D920 2500 A46C                  	dc.l Map_obj25+$25000000
0001D924 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D928 2600 AA72                  	dc.l Map_obj26+$26000000
0001D92C 0000 0680                  	dc.b 0,	0, 6, $80
0001D930 4100 E318                  	dc.l Map_obj41+$41000000
0001D934 0000 0523                  	dc.b 0,	0, 5, $23
0001D938 2C00 B18C                  	dc.l Map_obj2C+$2C000000
0001D93C 0800 2486                  	dc.b 8,	0, $24,	$86
0001D940 2D00 B380                  	dc.l Map_obj2D+$2D000000
0001D944 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D948 1601 2572                  	dc.l Map_obj16+$16000000
0001D94C 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D950 1601 2572                  	dc.l Map_obj16+$16000000
0001D954 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D958 3300 C838                  	dc.l Map_obj33+$33000000
0001D95C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D960 3200 C3F8                  	dc.l Map_obj32+$32000000
0001D964 0000 0513                  	dc.b 0,	0, 5, $13
0001D968 3600 D5EC                  	dc.l Map_obj36+$36000000
0001D96C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D970 5201 0694                  	dc.l Map_obj52a+$52000000
0001D974 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D978 6101 279A                  	dc.l Map_obj61+$61000000
0001D97C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D980 6101 279A                  	dc.l Map_obj61+$61000000
0001D984 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D988 6101 279A                  	dc.l Map_obj61+$61000000
0001D98C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D990 6201 28EE                  	dc.l Map_obj62+$62000000
0001D994 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D998 6101 279A                  	dc.l Map_obj61+$61000000
0001D99C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D9A0 6101 279A                  	dc.l Map_obj61+$61000000
0001D9A4 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D9A8 6301 2C50                  	dc.l Map_obj63+$63000000
0001D9AC 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D9B0 6001 24BC                  	dc.l Map_obj60+$60000000
0001D9B4 0000 0467                  	dc.b 0,	0, 4, $67
0001D9B8 6401 2F96                  	dc.l Map_obj64+$64000000
0001D9BC 8413 8348                  	dc.b $84, $13, $83, $48
0001D9C0 6501 311E                  	dc.l Map_obj65+$65000000
0001D9C4 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D9C8 6501 311E                  	dc.l Map_obj65+$65000000
0001D9CC 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D9D0 0B01 190C                  	dc.l Map_obj0B+$B000000
0001D9D4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D9D8 0C01 19DC                  	dc.l Map_obj0C+$C000000
0001D9DC 0200 4328                  	dc.b 2,	0, $43,	$28
0001D9E0 7901 77D2                  	dc.l Map_obj79+$79000000
0001D9E4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9E8                            	even
0001D9E8                            	even
0001D9E8                            
0001D9E8                            ; ---------------------------------------------------------------------------
0001D9E8                            ; Debug	list - Marble
0001D9E8                            ; ---------------------------------------------------------------------------
0001D9E8                            Debug_MZ:
0001D9E8                            	include "_inc\Debug list - MZ.asm"
0001D9E8                            ; ---------------------------------------------------------------------------
0001D9E8                            ; Debug	list - Marble
0001D9E8                            ; ---------------------------------------------------------------------------
0001D9E8 0012                       	dc.w $12
0001D9EA 2500 A46C                  	dc.l Map_obj25+$25000000
0001D9EE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9F2 2600 AA72                  	dc.l Map_obj26+$26000000
0001D9F6 0000 0680                  	dc.b 0,	0, 6, $80
0001D9FA 2200 9F20                  	dc.l Map_obj22+$22000000
0001D9FE 0000 0444                  	dc.b 0,	0, 4, $44
0001DA02 3600 D5EC                  	dc.l Map_obj36+$36000000
0001DA06 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA0A 4100 E318                  	dc.l Map_obj41+$41000000
0001DA0E 0000 0523                  	dc.b 0,	0, 5, $23
0001DA12 1300 B8C2                  	dc.l Map_obj14+$13000000
0001DA16 0000 0345                  	dc.b 0,	0, 3, $45
0001DA1A 4600 EEFE                  	dc.l Map_obj46+$46000000
0001DA1E 0000 4000                  	dc.b 0,	0, $40,	0
0001DA22 4C00 F84A                  	dc.l Map_obj4C+$4C000000
0001DA26 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DA2A 4E00 FB2E                  	dc.l Map_obj4E+$4E000000
0001DA2E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DA32 3300 C838                  	dc.l Map_obj33+$33000000
0001DA36 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DA3A 5000 FF2C                  	dc.l Map_obj50+$50000000
0001DA3E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA42 5101 03C8                  	dc.l Map_obj51+$51000000
0001DA46 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DA4A 5201 063E                  	dc.l Map_obj52+$52000000
0001DA4E 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DA52 5300 8C18                  	dc.l Map_obj53+$53000000
0001DA56 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DA5A 5400 F810                  	dc.l Map_obj54+$54000000
0001DA5E 0000 8680                  	dc.b 0,	0, $86,	$80
0001DA62 5501 0832                  	dc.l Map_obj55+$55000000
0001DA66 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DA6A 7801 744C                  	dc.l Map_obj78+$78000000
0001DA6E 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA72 7901 77D2                  	dc.l Map_obj79+$79000000
0001DA76 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA7A                            	even
0001DA7A                            	even
0001DA7A                            
0001DA7A                            ; ---------------------------------------------------------------------------
0001DA7A                            ; Debug	list - Star Light
0001DA7A                            ; ---------------------------------------------------------------------------
0001DA7A                            Debug_SLZ:
0001DA7A                            	include "_inc\Debug list - SLZ.asm"
0001DA7A                            ; ---------------------------------------------------------------------------
0001DA7A                            ; Debug	list - Star Light
0001DA7A                            ; ---------------------------------------------------------------------------
0001DA7A 000F                       	dc.w $F
0001DA7C 2500 A46C                  	dc.l Map_obj25+$25000000
0001DA80 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA84 2600 AA72                  	dc.l Map_obj26+$26000000
0001DA88 0000 0680                  	dc.b 0,	0, 6, $80
0001DA8C 5901 1334                  	dc.l Map_obj59+$59000000
0001DA90 0000 4000                  	dc.b 0,	0, $40,	0
0001DA94 5300 8C18                  	dc.l Map_obj53+$53000000
0001DA98 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DA9C 1800 8670                  	dc.l Map_obj18b+$18000000
0001DAA0 0000 4000                  	dc.b 0,	0, $40,	0
0001DAA4 5A01 146E                  	dc.l Map_obj5A+$5A000000
0001DAA8 0000 4000                  	dc.b 0,	0, $40,	0
0001DAAC 5B01 1626                  	dc.l Map_obj5B+$5B000000
0001DAB0 0000 4000                  	dc.b 0,	0, $40,	0
0001DAB4 5D01 1BF6                  	dc.l Map_obj5D+$5D000000
0001DAB8 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DABC 5E01 1F88                  	dc.l Map_obj5E+$5E000000
0001DAC0 0000 0374                  	dc.b 0,	0, 3, $74
0001DAC4 4100 E318                  	dc.l Map_obj41+$41000000
0001DAC8 0000 0523                  	dc.b 0,	0, 5, $23
0001DACC 1300 B8C2                  	dc.l Map_obj14+$13000000
0001DAD0 0000 0480                  	dc.b 0,	0, 4, $80
0001DAD4 1C00 8D28                  	dc.l Map_obj1C+$1C000000
0001DAD8 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DADC 5F01 2206                  	dc.l Map_obj5F+$5F000000
0001DAE0 0000 0400                  	dc.b 0,	0, 4, 0
0001DAE4 6001 24BC                  	dc.l Map_obj60+$60000000
0001DAE8 0000 2429                  	dc.b 0,	0, $24,	$29
0001DAEC 7901 77D2                  	dc.l Map_obj79+$79000000
0001DAF0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DAF4                            	even
0001DAF4                            	even
0001DAF4                            
0001DAF4                            ; ---------------------------------------------------------------------------
0001DAF4                            ; Debug	list - Spring Yard
0001DAF4                            ; ---------------------------------------------------------------------------
0001DAF4                            Debug_SYZ:
0001DAF4                            	include "_inc\Debug list - SYZ.asm"
0001DAF4                            ; ---------------------------------------------------------------------------
0001DAF4                            ; Debug	list - Spring Yard
0001DAF4                            ; ---------------------------------------------------------------------------
0001DAF4 000F                       	dc.w $F
0001DAF6 2500 A46C                  	dc.l Map_obj25+$25000000
0001DAFA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DAFE 2600 AA72                  	dc.l Map_obj26+$26000000
0001DB02 0000 0680                  	dc.b 0,	0, 6, $80
0001DB06 3600 D5EC                  	dc.l Map_obj36+$36000000
0001DB0A 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB0E 4100 E318                  	dc.l Map_obj41+$41000000
0001DB12 0000 0523                  	dc.b 0,	0, 5, $23
0001DB16 4300 E79E                  	dc.l Map_obj43+$43000000
0001DB1A 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DB1E 1200 EF7C                  	dc.l Map_obj12+$12000000
0001DB22 0000 0000                  	dc.b 0,	0, 0, 0
0001DB26 4700 F0F8                  	dc.l Map_obj47+$47000000
0001DB2A 0000 0380                  	dc.b 0,	0, 3, $80
0001DB2E 1F00 9C64                  	dc.l Map_obj1F+$1F000000
0001DB32 0000 0400                  	dc.b 0,	0, 4, 0
0001DB36 2200 9F20                  	dc.l Map_obj22+$22000000
0001DB3A 0000 0444                  	dc.b 0,	0, 4, $44
0001DB3E 5000 FF2C                  	dc.l Map_obj50+$50000000
0001DB42 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DB46 1800 865E                  	dc.l Map_obj18a+$18000000
0001DB4A 0000 4000                  	dc.b 0,	0, $40,	0
0001DB4E 5601 0CF4                  	dc.l Map_obj56+$56000000
0001DB52 0000 4000                  	dc.b 0,	0, $40,	0
0001DB56 3200 C3F8                  	dc.l Map_obj32+$32000000
0001DB5A 0000 0513                  	dc.b 0,	0, 5, $13
0001DB5E 7801 744C                  	dc.l Map_obj78+$78000000
0001DB62 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DB66 7901 77D2                  	dc.l Map_obj79+$79000000
0001DB6A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB6E                            	even
0001DB6E                            	even
0001DB6E                            
0001DB6E                            ; ---------------------------------------------------------------------------
0001DB6E                            ; Debug	list - Scrap Brain
0001DB6E                            ; ---------------------------------------------------------------------------
0001DB6E                            Debug_SBZ:
0001DB6E                            	include "_inc\Debug list - SBZ.asm"
0001DB6E                            ; ---------------------------------------------------------------------------
0001DB6E                            ; Debug	list - Scrap Brain
0001DB6E                            ; ---------------------------------------------------------------------------
0001DB6E 001D                       	dc.w $1D
0001DB70 2500 A46C                  	dc.l Map_obj25+$25000000
0001DB74 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB78 2600 AA72                  	dc.l Map_obj26+$26000000
0001DB7C 0000 0680                  	dc.b 0,	0, 6, $80
0001DB80 5F01 2206                  	dc.l Map_obj5F+$5F000000
0001DB84 0000 0400                  	dc.b 0,	0, 4, 0
0001DB88 6001 24BC                  	dc.l Map_obj60+$60000000
0001DB8C 0000 0429                  	dc.b 0,	0, 4, $29
0001DB90 7801 744C                  	dc.l Map_obj78+$78000000
0001DB94 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DB98 1501 1090                  	dc.l Map_obj15b+$15000000
0001DB9C 0702 4391                  	dc.b 7,	2, $43,	$91
0001DBA0 6701 5D60                  	dc.l Map_obj67+$67000000
0001DBA4 E000 C344                  	dc.b $E0, 0, $C3, $44
0001DBA8 5201 063E                  	dc.l Map_obj52+$52000000
0001DBAC 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DBB0 3200 C3F8                  	dc.l Map_obj32+$32000000
0001DBB4 0000 0513                  	dc.b 0,	0, 5, $13
0001DBB8 6901 5FBA                  	dc.l Map_obj69+$69000000
0001DBBC 0300 4492                  	dc.b 3,	0, $44,	$92
0001DBC0 6901 6014                  	dc.l Map_obj69a+$69000000
0001DBC4 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DBC8 6A01 6272                  	dc.l Map_obj6A+$6A000000
0001DBCC 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DBD0 5300 8C18                  	dc.l Map_obj53+$53000000
0001DBD4 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DBD8 5201 063E                  	dc.l Map_obj52+$52000000
0001DBDC 3903 4460                  	dc.b $39, 3, $44, $60
0001DBE0 6B01 6642                  	dc.l Map_obj6B+$6B000000
0001DBE4 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DBE8 2A00 8EBE                  	dc.l Map_obj2A+$2A000000
0001DBEC 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DBF0 6B01 6642                  	dc.l Map_obj6B+$6B000000
0001DBF4 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DBF8 6A01 6272                  	dc.l Map_obj6A+$6A000000
0001DBFC 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DC00 6B01 6642                  	dc.l Map_obj6B+$6B000000
0001DC04 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DC08 6A01 6272                  	dc.l Map_obj6A+$6A000000
0001DC0C 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DC10 6B01 6642                  	dc.l Map_obj6B+$6B000000
0001DC14 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DC18 6C01 6804                  	dc.l Map_obj6C+$6C000000
0001DC1C 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DC20 6D00 EBEE                  	dc.l Map_obj6D+$6D000000
0001DC24 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DC28 6D00 EBEE                  	dc.l Map_obj6D+$6D000000
0001DC2C 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DC30 6E01 68BA                  	dc.l Map_obj6E+$6E000000
0001DC34 0400 047E                  	dc.b 4,	0, 4, $7E
0001DC38 7001 6D10                  	dc.l Map_obj70+$70000000
0001DC3C 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DC40 7101 1A9C                  	dc.l Map_obj71+$71000000
0001DC44 1100 8680                  	dc.b $11, 0, $86, $80
0001DC48 1E00 937C                  	dc.l Map_obj1E+$1E000000
0001DC4C 0400 2302                  	dc.b 4,	0, $23,	2
0001DC50 7901 77D2                  	dc.l Map_obj79+$79000000
0001DC54 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC58                            	even
0001DC58                            	even
0001DC58                            
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58                            ; Debug	list - ending sequence / special stage
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58                            Debug_Ending:
0001DC58                            	include "_inc\Debug list - Ending and SS.asm"
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58                            ; Debug	list - ending sequence / special stage
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58 000D                       	dc.w $D
0001DC5A 2500 A46C                  	dc.l Map_obj25+$25000000
0001DC5E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC62 4700 F0F8                  	dc.l Map_obj47+$47000000
0001DC66 0000 0380                  	dc.b 0,	0, 3, $80
0001DC6A 2800 9996                  	dc.l Map_obj28a+$28000000
0001DC6E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DC72 2800 9996                  	dc.l Map_obj28a+$28000000
0001DC76 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DC7A 2800 9996                  	dc.l Map_obj28a+$28000000
0001DC7E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DC82 2800 997E                  	dc.l Map_obj28+$28000000
0001DC86 0D00 0553                  	dc.b $D, 0, 5, $53
0001DC8A 2800 997E                  	dc.l Map_obj28+$28000000
0001DC8E 0E00 0553                  	dc.b $E, 0, 5, $53
0001DC92 2800 997E                  	dc.l Map_obj28+$28000000
0001DC96 0F00 0573                  	dc.b $F, 0, 5, $73
0001DC9A 2800 997E                  	dc.l Map_obj28+$28000000
0001DC9E 1000 0573                  	dc.b $10, 0, 5,	$73
0001DCA2 2800 9996                  	dc.l Map_obj28a+$28000000
0001DCA6 1100 0585                  	dc.b $11, 0, 5,	$85
0001DCAA 2800 99AE                  	dc.l Map_obj28b+$28000000
0001DCAE 1200 0593                  	dc.b $12, 0, 5,	$93
0001DCB2 2800 9996                  	dc.l Map_obj28a+$28000000
0001DCB6 1300 0565                  	dc.b $13, 0, 5,	$65
0001DCBA 2800 99AE                  	dc.l Map_obj28b+$28000000
0001DCBE 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DCC2                            	even
0001DCC2                            	even
0001DCC2                            
0001DCC2                            ; ---------------------------------------------------------------------------
0001DCC2                            ; Main level load blocks
0001DCC2                            ; ---------------------------------------------------------------------------
0001DCC2                            MainLoadBlocks:
0001DCC2                            	include "_inc\Main level load blocks.asm"
0001DCC2                            ; ---------------------------------------------------------------------------
0001DCC2                            ; Main level load blocks
0001DCC2                            ;
0001DCC2                            ; ===FORMAT===
0001DCC2                            ; level	patterns + (1st	PLC num	* 10^6)
0001DCC2                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DCC2                            ; 256x256 mappings
0001DCC2                            ; blank, music (unused), pal index (unused), pal index
0001DCC2                            ; ---------------------------------------------------------------------------
0001DCC2 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DCC6 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DCCA 0000 0000                  	dc.l Blk256_GHZ
0001DCCE 0081 0404                  	dc.b 0,	$81, 4,	4
0001DCD2 0000 0000                  	dc.l Nem_LZ+$6000000
0001DCD6 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DCDA 0000 0000                  	dc.l Blk256_LZ
0001DCDE 0082 0505                  	dc.b 0,	$82, 5,	5
0001DCE2 0000 0000                  	dc.l Nem_MZ+$8000000
0001DCE6 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DCEA 0000 0000                  	dc.l Blk256_MZ
0001DCEE 0083 0606                  	dc.b 0,	$83, 6,	6
0001DCF2 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DCF6 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DCFA 0000 0000                  	dc.l Blk256_SLZ
0001DCFE 0084 0707                  	dc.b 0,	$84, 7,	7
0001DD02 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DD06 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DD0A 0000 0000                  	dc.l Blk256_SYZ
0001DD0E 0085 0808                  	dc.b 0,	$85, 8,	8
0001DD12 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DD16 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DD1A 0000 0000                  	dc.l Blk256_SBZ
0001DD1E 0086 0909                  	dc.b 0,	$86, 9,	9
0001DD22 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DD26 0000 0000                  	dc.l Blk16_GHZ
0001DD2A 0000 0000                  	dc.l Blk256_GHZ
0001DD2E 0086 1313                  	dc.b 0,	$86, $13, $13
0001DD32                            	even
0001DD32                            	even
0001DD32                            
0001DD32                            ; ---------------------------------------------------------------------------
0001DD32                            ; Pattern load cues
0001DD32                            ; ---------------------------------------------------------------------------
0001DD32                            ArtLoadCues:
0001DD32                            	include "_inc\Pattern load cues.asm"
0001DD32                            ; ---------------------------------------------------------------------------
0001DD32                            ; Pattern load cues - index
0001DD32                            ; ---------------------------------------------------------------------------
0001DD32 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DD36 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DD3A 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DD3E 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DD42 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DD46 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DD4A 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DD4E 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DD52 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DD56 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DD5A 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DD5E 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DD62 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DD66 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DD6A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DD6E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72                            ; Pattern load cues - standard block 1
0001DD72                            ; ---------------------------------------------------------------------------
0001DD72 0004                       PLC_Main:	dc.w 4
0001DD74 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DD78 F400                       		dc.w $F400
0001DD7A 0000 0000                  		dc.l Nem_Hud		; HUD
0001DD7E D940                       		dc.w $D940
0001DD80 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DD84 FA80                       		dc.w $FA80
0001DD86 0000 0000                  		dc.l Nem_Ring		; rings
0001DD8A F640                       		dc.w $F640
0001DD8C 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DD90 F2E0                       		dc.w $F2E0
0001DD92                            ; ---------------------------------------------------------------------------
0001DD92                            ; Pattern load cues - standard block 2
0001DD92                            ; ---------------------------------------------------------------------------
0001DD92 0002                       PLC_Main2:	dc.w 2
0001DD94 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DD98 D000                       		dc.w $D000
0001DD9A 0000 0000                  		dc.l Nem_Shield		; shield
0001DD9E A820                       		dc.w $A820
0001DDA0 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DDA4 AB80                       		dc.w $AB80
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6                            ; Pattern load cues - explosion
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6 0000                       PLC_Explode:	dc.w 0
0001DDA8 0000 0000                  		dc.l Nem_Explode	; explosion
0001DDAC B400                       		dc.w $B400
0001DDAE                            ; ---------------------------------------------------------------------------
0001DDAE                            ; Pattern load cues - game/time	over
0001DDAE                            ; ---------------------------------------------------------------------------
0001DDAE 0000                       PLC_GameOver:	dc.w 0
0001DDB0 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DDB4 ABC0                       		dc.w $ABC0
0001DDB6                            ; ---------------------------------------------------------------------------
0001DDB6                            ; Pattern load cues - Green Hill
0001DDB6                            ; ---------------------------------------------------------------------------
0001DDB6 000B                       PLC_GHZ:	dc.w $B
0001DDB8 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DDBC 0000                       		dc.w 0
0001DDBE 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DDC2 39A0                       		dc.w $39A0
0001DDC4 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DDC8 6B00                       		dc.w $6B00
0001DDCA 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DDCE 7A00                       		dc.w $7A00
0001DDD0 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DDD4 8000                       		dc.w $8000
0001DDD6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DDDA 8880                       		dc.w $8880
0001DDDC 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DDE0 8F60                       		dc.w $8F60
0001DDE2 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DDE6 9360                       		dc.w $9360
0001DDE8 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DDEC 9E00                       		dc.w $9E00
0001DDEE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDF2 A360                       		dc.w $A360
0001DDF4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDF8 A460                       		dc.w $A460
0001DDFA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDFE A660                       		dc.w $A660
0001DE00 0005                       PLC_GHZ2:	dc.w 5
0001DE02 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DE06 7000                       		dc.w $7000
0001DE08 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DE0C 71C0                       		dc.w $71C0
0001DE0E 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DE12 7300                       		dc.w $7300
0001DE14 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DE18 7540                       		dc.w $7540
0001DE1A 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DE1E A1E0                       		dc.w $A1E0
0001DE20 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DE24 6980                       		dc.w $6980
0001DE26                            ; ---------------------------------------------------------------------------
0001DE26                            ; Pattern load cues - Labyrinth
0001DE26                            ; ---------------------------------------------------------------------------
0001DE26 000B                       PLC_LZ:		dc.w $B
0001DE28 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DE2C 0000                       		dc.w 0
0001DE2E 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DE32 3C00                       		dc.w $3C00
0001DE34 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DE38 3E00                       		dc.w $3E00
0001DE3A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DE3E 4B20                       		dc.w $4B20
0001DE40 0000 0000                  		dc.l Nem_Water		; water	surface
0001DE44 6000                       		dc.w $6000
0001DE46 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DE4A 6200                       		dc.w $6200
0001DE4C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DE50 6500                       		dc.w $6500
0001DE52 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DE56 6900                       		dc.w $6900
0001DE58 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DE5C 7780                       		dc.w $7780
0001DE5E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DE62 7880                       		dc.w $7880
0001DE64 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DE68 7980                       		dc.w $7980
0001DE6A 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DE6E 94C0                       		dc.w $94C0
0001DE70 000C                       PLC_LZ2:	dc.w $C
0001DE72 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DE76 7BC0                       		dc.w $7BC0
0001DE78 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DE7C 7CC0                       		dc.w $7CC0
0001DE7E 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DE82 7EC0                       		dc.w $7EC0
0001DE84 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DE88 5D20                       		dc.w $5D20
0001DE8A 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DE8E 8800                       		dc.w $8800
0001DE90 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DE94 89E0                       		dc.w $89E0
0001DE96 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE9A 8CE0                       		dc.w $8CE0
0001DE9C 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DEA0 90C0                       		dc.w $90C0
0001DEA2 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DEA6 A1E0                       		dc.w $A1E0
0001DEA8 0000 0000                  		dc.l Nem_Cork		; cork block
0001DEAC A000                       		dc.w $A000
0001DEAE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEB2 A360                       		dc.w $A360
0001DEB4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEB8 A460                       		dc.w $A460
0001DEBA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEBE A660                       		dc.w $A660
0001DEC0                            ; ---------------------------------------------------------------------------
0001DEC0                            ; Pattern load cues - Marble
0001DEC0                            ; ---------------------------------------------------------------------------
0001DEC0 0009                       PLC_MZ:		dc.w 9
0001DEC2 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DEC6 0000                       		dc.w 0
0001DEC8 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DECC 6000                       		dc.w $6000
0001DECE 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DED2 68A0                       		dc.w $68A0
0001DED4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DED8 7000                       		dc.w $7000
0001DEDA 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DEDE 71C0                       		dc.w $71C0
0001DEE0 0000 0000                  		dc.l Nem_Lava		; lava
0001DEE4 7500                       		dc.w $7500
0001DEE6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DEEA 8880                       		dc.w $8880
0001DEEC 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DEF0 8F60                       		dc.w $8F60
0001DEF2 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DEF6 9700                       		dc.w $9700
0001DEF8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEFC 9FE0                       		dc.w $9FE0
0001DEFE 0004                       PLC_MZ2:	dc.w 4
0001DF00 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DF04 A260                       		dc.w $A260
0001DF06 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF0A A360                       		dc.w $A360
0001DF0C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF10 A460                       		dc.w $A460
0001DF12 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF16 A660                       		dc.w $A660
0001DF18 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DF1C 5700                       		dc.w $5700
0001DF1E                            ; ---------------------------------------------------------------------------
0001DF1E                            ; Pattern load cues - Star Light
0001DF1E                            ; ---------------------------------------------------------------------------
0001DF1E 0008                       PLC_SLZ:	dc.w 8
0001DF20 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DF24 0000                       		dc.w 0
0001DF26 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF2A 8000                       		dc.w $8000
0001DF2C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF30 8520                       		dc.w $8520
0001DF32 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DF36 9000                       		dc.w $9000
0001DF38 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DF3C 9C00                       		dc.w $9C00
0001DF3E 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DF42 A260                       		dc.w $A260
0001DF44 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF48 A360                       		dc.w $A360
0001DF4A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF4E A460                       		dc.w $A460
0001DF50 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF54 A660                       		dc.w $A660
0001DF56 0005                       PLC_SLZ2:	dc.w 5
0001DF58 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DF5C 6E80                       		dc.w $6E80
0001DF5E 0000 0000                  		dc.l Nem_Fan		; fan
0001DF62 7400                       		dc.w $7400
0001DF64 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DF68 7980                       		dc.w $7980
0001DF6A 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DF6E 7B80                       		dc.w $7B80
0001DF70 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DF74 9B00                       		dc.w $9B00
0001DF76 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DF7A 9E00                       		dc.w $9E00
0001DF7C                            ; ---------------------------------------------------------------------------
0001DF7C                            ; Pattern load cues - Spring Yard
0001DF7C                            ; ---------------------------------------------------------------------------
0001DF7C 0004                       PLC_SYZ:	dc.w 4
0001DF7E 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DF82 0000                       		dc.w 0
0001DF84 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DF88 8000                       		dc.w $8000
0001DF8A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF8E 8880                       		dc.w $8880
0001DF90 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DF94 8F60                       		dc.w $8F60
0001DF96 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DF9A 9700                       		dc.w $9700
0001DF9C 0007                       PLC_SYZ2:	dc.w 7
0001DF9E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFA2 7000                       		dc.w $7000
0001DFA4 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DFA8 72C0                       		dc.w $72C0
0001DFAA 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DFAE 7740                       		dc.w $7740
0001DFB0 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DFB4 9FE0                       		dc.w $9FE0
0001DFB6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DFBA A1E0                       		dc.w $A1E0
0001DFBC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DFC0 A360                       		dc.w $A360
0001DFC2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFC6 A460                       		dc.w $A460
0001DFC8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFCC A660                       		dc.w $A660
0001DFCE                            ; ---------------------------------------------------------------------------
0001DFCE                            ; Pattern load cues - Scrap Brain
0001DFCE                            ; ---------------------------------------------------------------------------
0001DFCE 000B                       PLC_SBZ:	dc.w $B
0001DFD0 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DFD4 0000                       		dc.w 0
0001DFD6 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DFDA 5800                       		dc.w $5800
0001DFDC 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DFE0 5D00                       		dc.w $5D00
0001DFE2 0000 0000                  		dc.l Nem_Girder		; girder
0001DFE6 5E00                       		dc.w $5E00
0001DFE8 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DFEC 6040                       		dc.w $6040
0001DFEE 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DFF2 6880                       		dc.w $6880
0001DFF4 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DFF8 6900                       		dc.w $6900
0001DFFA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DFFE 7220                       		dc.w $7220
0001E000 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E004 76A0                       		dc.w $76A0
0001E006 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E00A 7B20                       		dc.w $7B20
0001E00C 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E010 7EA0                       		dc.w $7EA0
0001E012 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E016 9860                       		dc.w $9860
0001E018 000C                       PLC_SBZ2:	dc.w $C
0001E01A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E01E 5600                       		dc.w $5600
0001E020 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E024 8000                       		dc.w $8000
0001E026 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E02A 8520                       		dc.w $8520
0001E02C 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E030 8C00                       		dc.w $8C00
0001E032 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E036 8DE0                       		dc.w $8DE0
0001E038 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E03C 8FC0                       		dc.w $8FC0
0001E03E 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E042 9240                       		dc.w $9240
0001E044 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E048 7F20                       		dc.w $7F20
0001E04A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E04E 9BE0                       		dc.w $9BE0
0001E050 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E054 A1E0                       		dc.w $A1E0
0001E056 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E05A A360                       		dc.w $A360
0001E05C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E060 A460                       		dc.w $A460
0001E062 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E066 A660                       		dc.w $A660
0001E068                            ; ---------------------------------------------------------------------------
0001E068                            ; Pattern load cues - title card
0001E068                            ; ---------------------------------------------------------------------------
0001E068 0000                       PLC_TitleCard:	dc.w 0
0001E06A 0000 0000                  		dc.l Nem_TitleCard
0001E06E B000                       		dc.w $B000
0001E070                            ; ---------------------------------------------------------------------------
0001E070                            ; Pattern load cues - act 3 boss
0001E070                            ; ---------------------------------------------------------------------------
0001E070 0005                       PLC_Boss:	dc.w 5
0001E072 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E076 8000                       		dc.w $8000
0001E078 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E07C 8D80                       		dc.w $8D80
0001E07E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E082 93A0                       		dc.w $93A0
0001E084 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E088 A300                       		dc.w $A300
0001E08A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E08E A300                       		dc.w $A300
0001E090 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E094 A540                       		dc.w $A540
0001E096                            ; ---------------------------------------------------------------------------
0001E096                            ; Pattern load cues - act 1/2 signpost
0001E096                            ; ---------------------------------------------------------------------------
0001E096 0002                       PLC_Signpost:	dc.w 2
0001E098 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E09C D000                       		dc.w $D000
0001E09E 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E0A2 96C0                       		dc.w $96C0
0001E0A4 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E0A8 8C40                       		dc.w $8C40
0001E0AA                            ; ---------------------------------------------------------------------------
0001E0AA                            ; Pattern load cues - beta special stage warp effect
0001E0AA                            ; ---------------------------------------------------------------------------
0001E0AA 0000                       PLC_Warp:	dc.w 0
0001E0AC 0000 0000                  		dc.l Nem_Warp
0001E0B0 A820                       		dc.w $A820
0001E0B2                            ; ---------------------------------------------------------------------------
0001E0B2                            ; Pattern load cues - special stage
0001E0B2                            ; ---------------------------------------------------------------------------
0001E0B2 0010                       PLC_SpeStage:	dc.w $10
0001E0B4 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E0B8 0000                       		dc.w 0
0001E0BA 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E0BE 0A20                       		dc.w $A20
0001E0C0 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E0C4 2840                       		dc.w $2840
0001E0C6 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E0CA 4760                       		dc.w $4760
0001E0CC 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E0D0 4A20                       		dc.w $4A20
0001E0D2 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E0D6 4C60                       		dc.w $4C60
0001E0D8 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E0DC 5E00                       		dc.w $5E00
0001E0DE 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E0E2 6E00                       		dc.w $6E00
0001E0E4 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E0E8 7E00                       		dc.w $7E00
0001E0EA 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E0EE 8E00                       		dc.w $8E00
0001E0F0 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E0F4 9E00                       		dc.w $9E00
0001E0F6 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E0FA AE00                       		dc.w $AE00
0001E0FC 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E100 BE00                       		dc.w $BE00
0001E102 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E106 EE00                       		dc.w $EE00
0001E108 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E10C F2E0                       		dc.w $F2E0
0001E10E 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E112 F400                       		dc.w $F400
0001E114 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E118 F520                       		dc.w $F520
0001E11A 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E11E F2E0                       		dc.w $F2E0
0001E120 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E124 F400                       		dc.w $F400
0001E126 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E12A F520                       		dc.w $F520
0001E12C                            ; ---------------------------------------------------------------------------
0001E12C                            ; Pattern load cues - GHZ animals
0001E12C                            ; ---------------------------------------------------------------------------
0001E12C 0001                       PLC_GHZAnimals:	dc.w 1
0001E12E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E132 B000                       		dc.w $B000
0001E134 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E138 B240                       		dc.w $B240
0001E13A                            ; ---------------------------------------------------------------------------
0001E13A                            ; Pattern load cues - LZ animals
0001E13A                            ; ---------------------------------------------------------------------------
0001E13A 0001                       PLC_LZAnimals:	dc.w 1
0001E13C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E140 B000                       		dc.w $B000
0001E142 0000 0000                  		dc.l Nem_Seal		; seal
0001E146 B240                       		dc.w $B240
0001E148                            ; ---------------------------------------------------------------------------
0001E148                            ; Pattern load cues - MZ animals
0001E148                            ; ---------------------------------------------------------------------------
0001E148 0001                       PLC_MZAnimals:	dc.w 1
0001E14A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E14E B000                       		dc.w $B000
0001E150 0000 0000                  		dc.l Nem_Seal		; seal
0001E154 B240                       		dc.w $B240
0001E156                            ; ---------------------------------------------------------------------------
0001E156                            ; Pattern load cues - SLZ animals
0001E156                            ; ---------------------------------------------------------------------------
0001E156 0001                       PLC_SLZAnimals:	dc.w 1
0001E158 0000 0000                  		dc.l Nem_Pig		; pig
0001E15C B000                       		dc.w $B000
0001E15E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E162 B240                       		dc.w $B240
0001E164                            ; ---------------------------------------------------------------------------
0001E164                            ; Pattern load cues - SYZ animals
0001E164                            ; ---------------------------------------------------------------------------
0001E164 0001                       PLC_SYZAnimals:	dc.w 1
0001E166 0000 0000                  		dc.l Nem_Pig		; pig
0001E16A B000                       		dc.w $B000
0001E16C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E170 B240                       		dc.w $B240
0001E172                            ; ---------------------------------------------------------------------------
0001E172                            ; Pattern load cues - SBZ animals
0001E172                            ; ---------------------------------------------------------------------------
0001E172 0001                       PLC_SBZAnimals:	dc.w 1
0001E174 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E178 B000                       		dc.w $B000
0001E17A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E17E B240                       		dc.w $B240
0001E180                            ; ---------------------------------------------------------------------------
0001E180                            ; Pattern load cues - special stage results screen
0001E180                            ; ---------------------------------------------------------------------------
0001E180 0001                       PLC_SpeStResult:dc.w 1
0001E182 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E186 A820                       		dc.w $A820
0001E188 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E18C AA20                       		dc.w $AA20
0001E18E                            ; ---------------------------------------------------------------------------
0001E18E                            ; Pattern load cues - ending sequence
0001E18E                            ; ---------------------------------------------------------------------------
0001E18E 000E                       PLC_Ending:	dc.w $E
0001E190 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E194 0000                       		dc.w 0
0001E196 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E19A 39A0                       		dc.w $39A0
0001E19C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E1A0 6B00                       		dc.w $6B00
0001E1A2 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E1A6 7400                       		dc.w $7400
0001E1A8 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E1AC 78A0                       		dc.w $78A0
0001E1AE 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E1B2 7C20                       		dc.w $7C20
0001E1B4 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E1B8 A480                       		dc.w $A480
0001E1BA 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E1BE AA60                       		dc.w $AA60
0001E1C0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E1C4 ACA0                       		dc.w $ACA0
0001E1C6 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E1CA AE60                       		dc.w $AE60
0001E1CC 0000 0000                  		dc.l Nem_Seal		; seal
0001E1D0 B0A0                       		dc.w $B0A0
0001E1D2 0000 0000                  		dc.l Nem_Pig		; pig
0001E1D6 B260                       		dc.w $B260
0001E1D8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E1DC B4A0                       		dc.w $B4A0
0001E1DE 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E1E2 B660                       		dc.w $B660
0001E1E4 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E1E8 B8A0                       		dc.w $B8A0
0001E1EA                            ; ---------------------------------------------------------------------------
0001E1EA                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E1EA                            ; ---------------------------------------------------------------------------
0001E1EA 0002                       PLC_TryAgain:	dc.w 2
0001E1EC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E1F0 78A0                       		dc.w $78A0
0001E1F2 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E1F6 7C20                       		dc.w $7C20
0001E1F8 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E1FC B400                       		dc.w $B400
0001E1FE                            ; ---------------------------------------------------------------------------
0001E1FE                            ; Pattern load cues - Eggman on SBZ 2
0001E1FE                            ; ---------------------------------------------------------------------------
0001E1FE 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E200 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E204 A300                       		dc.w $A300
0001E206 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E20A 8000                       		dc.w $8000
0001E20C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E210 9400                       		dc.w $9400
0001E212                            ; ---------------------------------------------------------------------------
0001E212                            ; Pattern load cues - final boss
0001E212                            ; ---------------------------------------------------------------------------
0001E212 0004                       PLC_FZBoss:	dc.w 4
0001E214 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E218 7400                       		dc.w $7400
0001E21A 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E21E 6000                       		dc.w $6000
0001E220 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E224 8000                       		dc.w $8000
0001E226 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E22A 8E00                       		dc.w $8E00
0001E22C 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E230 A540                       		dc.w $A540
0001E232                            		even
0001E232                            		even
0001E232                            
0001E232                            		incbin	misc\padding.bin
0001E320                            		even
0001E320                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E782                            		even
0001E782                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E87A                            		even
0001E87A                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E98E                            		even
0001E98E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F99A                            		even
0001F99A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023AA0                            		even
00023AA0                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023AD4                            		even
00023AD4                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023B92                            		even
00023B92                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002403A                            		even
0002403A                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024098                            		even
00024098                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024C9E                            		even
00024C9E                            ; ---------------------------------------------------------------------------
00024C9E                            ; Sprite mappings - Sonic
00024C9E                            ; ---------------------------------------------------------------------------
00024C9E                            Map_Sonic:
00024C9E                            	include "_maps\Sonic.asm"
00024C9E                            Map_6d2d:
00024C9E 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024CA0 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024CA2 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024CA4 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024CA6 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024CA8 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024CAA 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024CAC 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024CAE 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024CB0 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024CB2 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024CB4 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024CB6 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024CB8 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024CBA 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024CBC 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024CBE 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024CC0 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024CC2 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024CC4 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024CC6 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024CC8 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024CCA 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024CCC 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024CCE 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024CD0 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024CD2 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024CD4 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024CD6 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024CD8 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024CDA 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024CDC 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024CDE 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024CE0 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024CE2 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024CE4 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024CE6 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024CE8 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024CEA 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024CEC 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024CEE 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024CF0 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024CF2 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024CF4 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024CF6 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024CF8 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024CFA 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024CFC 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024CFE 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024D00 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024D02 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024D04 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024D06 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024D08 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024D0A 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024D0C 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024D0E 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024D10 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024D12 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024D14 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024D16 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024D18 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024D1A 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024D1C 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024D1E 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024D20 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024D22 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024D24 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024D26 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024D28 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024D2A 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024D2C 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024D2E 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024D30 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024D32 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024D34 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024D36 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024D38 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024D3A 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024D3C 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024D3E 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024D40 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024D42 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024D44 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024D46 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024D48 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024D4A 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024D4C 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024D4E 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024D50 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024D52 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024D54 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024D56 00                         Map_6d2d_B8: 	dc.b $0
00024D57 02                         Map_6d2d_B9: 	dc.b $2
00024D58 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024D5D 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024D62 03                         Map_6d2d_C4: 	dc.b $3
00024D63 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024D68 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024D6D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024D72 03                         Map_6d2d_D4: 	dc.b $3
00024D73 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024D78 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024D7D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024D82 03                         Map_6d2d_E4: 	dc.b $3
00024D83 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024D88 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024D8D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024D92 03                         Map_6d2d_F4: 	dc.b $3
00024D93 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024D98 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024D9D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024DA2 04                         Map_6d2d_104: 	dc.b $4
00024DA3 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024DA8 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024DAD FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024DB2 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024DB7 02                         Map_6d2d_119: 	dc.b $2
00024DB8 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024DBD FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024DC2 02                         Map_6d2d_124: 	dc.b $2
00024DC3 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024DC8 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024DCD 04                         Map_6d2d_12F: 	dc.b $4
00024DCE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024DD3 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024DD8 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024DDD 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024DE2 02                         Map_6d2d_144: 	dc.b $2
00024DE3 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024DE8 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024DED 03                         Map_6d2d_14F: 	dc.b $3
00024DEE ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024DF3 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024DF8 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024DFD 05                         Map_6d2d_15F: 	dc.b $5
00024DFE EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024E03 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024E08 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024E0D 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024E12 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024E17 06                         Map_6d2d_179: 	dc.b $6
00024E18 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024E1D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024E22 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024E27 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024E2C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024E31 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024E36 04                         Map_6d2d_198: 	dc.b $4
00024E37 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024E3C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024E41 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024E46 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024E4B 05                         Map_6d2d_1AD: 	dc.b $5
00024E4C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024E51 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024E56 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024E5B 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024E60 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024E65 04                         Map_6d2d_1C7: 	dc.b $4
00024E66 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024E6B EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024E70 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00024E75 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00024E7A 05                         Map_6d2d_1DC: 	dc.b $5
00024E7B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024E80 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024E85 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00024E8A FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00024E8F 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00024E94 04                         Map_6d2d_1F6: 	dc.b $4
00024E95 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00024E9A EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00024E9F FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00024EA4 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00024EA9 02                         Map_6d2d_20B: 	dc.b $2
00024EAA F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00024EAF EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00024EB4 02                         Map_6d2d_216: 	dc.b $2
00024EB5 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00024EBA F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00024EBF 04                         Map_6d2d_221: 	dc.b $4
00024EC0 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00024EC5 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00024ECA FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00024ECF 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00024ED4 02                         Map_6d2d_236: 	dc.b $2
00024ED5 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00024EDA F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00024EDF 03                         Map_6d2d_241: 	dc.b $3
00024EE0 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00024EE5 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00024EEA F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00024EEF 06                         Map_6d2d_251: 	dc.b $6
00024EF0 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024EF5 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00024EFA F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00024EFF F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00024F04 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00024F09 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00024F0E 06                         Map_6d2d_270: 	dc.b $6
00024F0F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024F14 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00024F19 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00024F1E F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00024F23 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00024F28 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00024F2D 04                         Map_6d2d_28F: 	dc.b $4
00024F2E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024F33 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00024F38 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00024F3D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024F42 05                         Map_6d2d_2A4: 	dc.b $5
00024F43 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00024F48 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00024F4D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00024F52 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00024F57 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00024F5C 04                         Map_6d2d_2BE: 	dc.b $4
00024F5D FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00024F62 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00024F67 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00024F6C 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00024F71 05                         Map_6d2d_2D3: 	dc.b $5
00024F72 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00024F77 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00024F7C F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00024F81 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00024F86 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00024F8B 02                         Map_6d2d_2ED: 	dc.b $2
00024F8C EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024F91 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024F96 02                         Map_6d2d_2F8: 	dc.b $2
00024F97 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024F9C FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024FA1 02                         Map_6d2d_303: 	dc.b $2
00024FA2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024FA7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024FAC 02                         Map_6d2d_30E: 	dc.b $2
00024FAD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024FB2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024FB7 04                         Map_6d2d_319: 	dc.b $4
00024FB8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024FBD EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024FC2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024FC7 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024FCC 03                         Map_6d2d_32E: 	dc.b $3
00024FCD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024FD2 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024FD7 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024FDC 04                         Map_6d2d_33E: 	dc.b $4
00024FDD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024FE2 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024FE7 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024FEC FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024FF1 03                         Map_6d2d_353: 	dc.b $3
00024FF2 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024FF7 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024FFC FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025001 02                         Map_6d2d_363: 	dc.b $2
00025002 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025007 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002500C 02                         Map_6d2d_36E: 	dc.b $2
0002500D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025012 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025017 02                         Map_6d2d_379: 	dc.b $2
00025018 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002501D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025022 02                         Map_6d2d_384: 	dc.b $2
00025023 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025028 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002502D 04                         Map_6d2d_38F: 	dc.b $4
0002502E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025033 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025038 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002503D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025042 02                         Map_6d2d_3A4: 	dc.b $2
00025043 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025048 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002504D 04                         Map_6d2d_3AF: 	dc.b $4
0002504E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025053 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025058 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002505D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025062 02                         Map_6d2d_3C4: 	dc.b $2
00025063 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025068 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002506D 01                         Map_6d2d_3CF: 	dc.b $1
0002506E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025073 01                         Map_6d2d_3D5: 	dc.b $1
00025074 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025079 01                         Map_6d2d_3DB: 	dc.b $1
0002507A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002507F 01                         Map_6d2d_3E1: 	dc.b $1
00025080 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025085 01                         Map_6d2d_3E7: 	dc.b $1
00025086 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002508B 02                         Map_6d2d_3ED: 	dc.b $2
0002508C F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025091 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00025096 01                         Map_6d2d_3F8: 	dc.b $1
00025097 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002509C 02                         Map_6d2d_3FE: 	dc.b $2
0002509D EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000250A2 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000250A7 01                         Map_6d2d_409: 	dc.b $1
000250A8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000250AD 02                         Map_6d2d_40F: 	dc.b $2
000250AE ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000250B3 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000250B8 04                         Map_6d2d_41A: 	dc.b $4
000250B9 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000250BE FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000250C3 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000250C8 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000250CD 06                         Map_6d2d_42F: 	dc.b $6
000250CE F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000250D3 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000250D8 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000250DD 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000250E2 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000250E7 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000250EC 02                         Map_6d2d_44E: 	dc.b $2
000250ED 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000250F2 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000250F7 02                         Map_6d2d_459: 	dc.b $2
000250F8 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000250FD EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025102 04                         Map_6d2d_464: 	dc.b $4
00025103 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025108 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002510D 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025112 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025117 02                         Map_6d2d_479: 	dc.b $2
00025118 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002511D F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025122 03                         Map_6d2d_484: 	dc.b $3
00025123 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025128 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002512D 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025132 04                         Map_6d2d_494: 	dc.b $4
00025133 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025138 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002513D 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025142 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025147 03                         Map_6d2d_4A9: 	dc.b $3
00025148 E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002514D 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00025152 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00025157 04                         Map_6d2d_4B9: 	dc.b $4
00025158 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002515D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025162 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025167 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002516C 04                         Map_6d2d_4CE: 	dc.b $4
0002516D F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025172 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00025177 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002517C F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025181 05                         Map_6d2d_4E3: 	dc.b $5
00025182 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025187 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002518C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025191 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025196 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002519B 05                         Map_6d2d_4FD: 	dc.b $5
0002519C E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000251A1 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000251A6 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000251AB 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000251B0 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000251B5 02                         Map_6d2d_517: 	dc.b $2
000251B6 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000251BB 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000251C0 03                         Map_6d2d_522: 	dc.b $3
000251C1 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000251C6 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000251CB 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000251D0 02                         Map_6d2d_532: 	dc.b $2
000251D1 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000251D6 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000251DB 03                         Map_6d2d_53D: 	dc.b $3
000251DC EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000251E1 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000251E6 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000251EB 02                         Map_6d2d_54D: 	dc.b $2
000251EC EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000251F1 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000251F6 03                         Map_6d2d_558: 	dc.b $3
000251F7 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000251FC 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025201 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025206 03                         Map_6d2d_568: 	dc.b $3
00025207 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002520C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025211 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025216 05                         Map_6d2d_578: 	dc.b $5
00025217 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002521C E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025221 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025226 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002522B 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025230 05                         Map_6d2d_592: 	dc.b $5
00025231 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025236 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002523B F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025240 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025245 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002524A 02                         Map_6d2d_5AC: 	dc.b $2
0002524B EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025250 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025255 03                         Map_6d2d_5B7: 	dc.b $3
00025256 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002525B F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00025260 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025265 01                         Map_6d2d_5C7: 	dc.b $1
00025266 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002526B 01                         Map_6d2d_5CD: 	dc.b $1
0002526C F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025271 01                         Map_6d2d_5D3: 	dc.b $1
00025272 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00025277 04                         Map_6d2d_5D9: 	dc.b $4
00025278 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002527D F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025282 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00025287 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002528C 03                         Map_6d2d_5EE: 	dc.b $3
0002528D F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025292 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00025297 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002529C 03                         Map_6d2d_5FE: 	dc.b $3
0002529D F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000252A2 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000252A7 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000252AC 03                         Map_6d2d_60E: 	dc.b $3
000252AD EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000252B2 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000252B7 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000252BC 02                         Map_6d2d_61E: 	dc.b $2
000252BD F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000252C2 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000252C7 02                         Map_6d2d_629: 	dc.b $2
000252C8 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000252CD EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000252D2 03                         Map_6d2d_634: 	dc.b $3
000252D3 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000252D8 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000252DD 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000252E2 02                         Map_6d2d_644: 	dc.b $2
000252E3 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000252E8 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000252ED 04                         Map_6d2d_64F: 	dc.b $4
000252EE ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000252F3 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000252F8 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000252FD 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025302                            	even
00025302                            	even
00025302                            
00025302                            ; ---------------------------------------------------------------------------
00025302                            ; Uncompressed graphics	loading	array for Sonic
00025302                            ; ---------------------------------------------------------------------------
00025302                            SonicDynPLC:
00025302                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025302                            DPLC_2d5b:
00025302 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
00025304 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
00025306 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
00025308 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
0002530A 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
0002530C 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
0002530E 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
00025310 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
00025312 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
00025314 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
00025316 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
00025318 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
0002531A 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
0002531C 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
0002531E 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
00025320 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
00025322 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
00025324 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
00025326 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
00025328 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
0002532A 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
0002532C 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
0002532E 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
00025330 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
00025332 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
00025334 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
00025336 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
00025338 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
0002533A 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
0002533C 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
0002533E 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
00025340 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
00025342 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
00025344 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
00025346 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
00025348 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
0002534A 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
0002534C 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
0002534E 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
00025350 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
00025352 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
00025354 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
00025356 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
00025358 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
0002535A 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
0002535C 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
0002535E 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
00025360 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
00025362 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
00025364 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
00025366 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
00025368 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
0002536A 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
0002536C 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
0002536E 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
00025370 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
00025372 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
00025374 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
00025376 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
00025378 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
0002537A 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
0002537C 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
0002537E 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
00025380 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
00025382 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
00025384 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
00025386 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
00025388 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
0002538A 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
0002538C 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
0002538E 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
00025390 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
00025392 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
00025394 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
00025396 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
00025398 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
0002539A 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
0002539C 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
0002539E 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
000253A0 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
000253A2 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
000253A4 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
000253A6 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
000253A8 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
000253AA 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
000253AC 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
000253AE 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
000253B0 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
000253B2 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
000253B4 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
000253B6 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
000253B8 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
000253BA 00                         DPLC_2d5b_B8: 	dc.b $0
000253BB 02                         DPLC_2d5b_B9: 	dc.b $2
000253BC F000                       	dc.b $F0, $0
000253BE 1010                       	dc.b $10, $10
000253C0 03                         DPLC_2d5b_BE: 	dc.b $3
000253C1 5012                       	dc.b $50, $12
000253C3 5018                       	dc.b $50, $18
000253C5 201E                       	dc.b $20, $1E
000253C7 03                         DPLC_2d5b_C5: 	dc.b $3
000253C8 5021                       	dc.b $50, $21
000253CA 5018                       	dc.b $50, $18
000253CC 201E                       	dc.b $20, $1E
000253CE 03                         DPLC_2d5b_CC: 	dc.b $3
000253CF 5021                       	dc.b $50, $21
000253D1 5018                       	dc.b $50, $18
000253D3 2027                       	dc.b $20, $27
000253D5 03                         DPLC_2d5b_D3: 	dc.b $3
000253D6 802A                       	dc.b $80, $2A
000253D8 2033                       	dc.b $20, $33
000253DA 2036                       	dc.b $20, $36
000253DC 04                         DPLC_2d5b_DA: 	dc.b $4
000253DD 7039                       	dc.b $70, $39
000253DF 5041                       	dc.b $50, $41
000253E1 5047                       	dc.b $50, $47
000253E3 104D                       	dc.b $10, $4D
000253E5 02                         DPLC_2d5b_E3: 	dc.b $2
000253E6 7039                       	dc.b $70, $39
000253E8 B04F                       	dc.b $B0, $4F
000253EA 02                         DPLC_2d5b_E8: 	dc.b $2
000253EB 505B                       	dc.b $50, $5B
000253ED 8061                       	dc.b $80, $61
000253EF 04                         DPLC_2d5b_ED: 	dc.b $4
000253F0 505B                       	dc.b $50, $5B
000253F2 506A                       	dc.b $50, $6A
000253F4 5070                       	dc.b $50, $70
000253F6 1076                       	dc.b $10, $76
000253F8 02                         DPLC_2d5b_F6: 	dc.b $2
000253F9 F4F0                       	dc.b $F4, $F0
000253FB 1500                       	dc.b $15, $0
000253FD 03                         DPLC_2d5b_FB: 	dc.b $3
000253FE 7039                       	dc.b $70, $39
00025400 3078                       	dc.b $30, $78
00025402 507C                       	dc.b $50, $7C
00025404 05                         DPLC_2d5b_102: 	dc.b $5
00025405 5082                       	dc.b $50, $82
00025407 5088                       	dc.b $50, $88
00025409 208E                       	dc.b $20, $8E
0002540B 5091                       	dc.b $50, $91
0002540D 0097                       	dc.b $0, $97
0002540F 06                         DPLC_2d5b_10D: 	dc.b $6
00025410 5082                       	dc.b $50, $82
00025412 1098                       	dc.b $10, $98
00025414 309A                       	dc.b $30, $9A
00025416 509E                       	dc.b $50, $9E
00025418 30A4                       	dc.b $30, $A4
0002541A 00A8                       	dc.b $0, $A8
0002541C 04                         DPLC_2d5b_11A: 	dc.b $4
0002541D 50A9                       	dc.b $50, $A9
0002541F 10AF                       	dc.b $10, $AF
00025421 70B1                       	dc.b $70, $B1
00025423 20B9                       	dc.b $20, $B9
00025425 05                         DPLC_2d5b_123: 	dc.b $5
00025426 50BC                       	dc.b $50, $BC
00025428 30C2                       	dc.b $30, $C2
0002542A 70C6                       	dc.b $70, $C6
0002542C 20CE                       	dc.b $20, $CE
0002542E 10D1                       	dc.b $10, $D1
00025430 04                         DPLC_2d5b_12E: 	dc.b $4
00025431 50BC                       	dc.b $50, $BC
00025433 10D3                       	dc.b $10, $D3
00025435 70D5                       	dc.b $70, $D5
00025437 20DD                       	dc.b $20, $DD
00025439 05                         DPLC_2d5b_137: 	dc.b $5
0002543A 5082                       	dc.b $50, $82
0002543C 1098                       	dc.b $10, $98
0002543E 008E                       	dc.b $0, $8E
00025440 70E0                       	dc.b $70, $E0
00025442 20E8                       	dc.b $20, $E8
00025444 04                         DPLC_2d5b_142: 	dc.b $4
00025445 70EB                       	dc.b $70, $EB
00025447 50F3                       	dc.b $50, $F3
00025449 10F9                       	dc.b $10, $F9
0002544B 50FB                       	dc.b $50, $FB
0002544D 02                         DPLC_2d5b_14B: 	dc.b $2
0002544E 70EB                       	dc.b $70, $EB
00025450 B101                       	dc.b $B1, $1
00025452 02                         DPLC_2d5b_150: 	dc.b $2
00025453 510D                       	dc.b $51, $D
00025455 8113                       	dc.b $81, $13
00025457 04                         DPLC_2d5b_155: 	dc.b $4
00025458 510D                       	dc.b $51, $D
0002545A 511C                       	dc.b $51, $1C
0002545C 1122                       	dc.b $11, $22
0002545E 5124                       	dc.b $51, $24
00025460 02                         DPLC_2d5b_15E: 	dc.b $2
00025461 510D                       	dc.b $51, $D
00025463 B12A                       	dc.b $B1, $2A
00025465 03                         DPLC_2d5b_163: 	dc.b $3
00025466 70EB                       	dc.b $70, $EB
00025468 0101                       	dc.b $1, $1
0002546A 8136                       	dc.b $81, $36
0002546C 06                         DPLC_2d5b_16A: 	dc.b $6
0002546D 513F                       	dc.b $51, $3F
0002546F 1145                       	dc.b $11, $45
00025471 1147                       	dc.b $11, $47
00025473 8149                       	dc.b $81, $49
00025475 0152                       	dc.b $1, $52
00025477 0153                       	dc.b $1, $53
00025479 06                         DPLC_2d5b_177: 	dc.b $6
0002547A 513F                       	dc.b $51, $3F
0002547C 2154                       	dc.b $21, $54
0002547E 1157                       	dc.b $11, $57
00025480 1159                       	dc.b $11, $59
00025482 815B                       	dc.b $81, $5B
00025484 0152                       	dc.b $1, $52
00025486 04                         DPLC_2d5b_184: 	dc.b $4
00025487 5164                       	dc.b $51, $64
00025489 116A                       	dc.b $11, $6A
0002548B 816C                       	dc.b $81, $6C
0002548D 1175                       	dc.b $11, $75
0002548F 05                         DPLC_2d5b_18D: 	dc.b $5
00025490 5177                       	dc.b $51, $77
00025492 217D                       	dc.b $21, $7D
00025494 1180                       	dc.b $11, $80
00025496 7182                       	dc.b $71, $82
00025498 218A                       	dc.b $21, $8A
0002549A 04                         DPLC_2d5b_198: 	dc.b $4
0002549B 5177                       	dc.b $51, $77
0002549D 118D                       	dc.b $11, $8D
0002549F 818F                       	dc.b $81, $8F
000254A1 1198                       	dc.b $11, $98
000254A3 05                         DPLC_2d5b_1A1: 	dc.b $5
000254A4 513F                       	dc.b $51, $3F
000254A6 819A                       	dc.b $81, $9A
000254A8 1159                       	dc.b $11, $59
000254AA 11A3                       	dc.b $11, $A3
000254AC 0152                       	dc.b $1, $52
000254AE 02                         DPLC_2d5b_1AC: 	dc.b $2
000254AF 51A5                       	dc.b $51, $A5
000254B1 B1AB                       	dc.b $B1, $AB
000254B3 02                         DPLC_2d5b_1B1: 	dc.b $2
000254B4 505B                       	dc.b $50, $5B
000254B6 B1B7                       	dc.b $B1, $B7
000254B8 02                         DPLC_2d5b_1B6: 	dc.b $2
000254B9 51A5                       	dc.b $51, $A5
000254BB B1C3                       	dc.b $B1, $C3
000254BD 02                         DPLC_2d5b_1BB: 	dc.b $2
000254BE 505B                       	dc.b $50, $5B
000254C0 B1CF                       	dc.b $B1, $CF
000254C2 04                         DPLC_2d5b_1C0: 	dc.b $4
000254C3 51DB                       	dc.b $51, $DB
000254C5 11E1                       	dc.b $11, $E1
000254C7 B1E3                       	dc.b $B1, $E3
000254C9 01EF                       	dc.b $1, $EF
000254CB 03                         DPLC_2d5b_1C9: 	dc.b $3
000254CC 51F0                       	dc.b $51, $F0
000254CE 11F6                       	dc.b $11, $F6
000254D0 B1F8                       	dc.b $B1, $F8
000254D2 04                         DPLC_2d5b_1D0: 	dc.b $4
000254D3 51DB                       	dc.b $51, $DB
000254D5 1204                       	dc.b $12, $4
000254D7 B206                       	dc.b $B2, $6
000254D9 01EF                       	dc.b $1, $EF
000254DB 03                         DPLC_2d5b_1D9: 	dc.b $3
000254DC 51F0                       	dc.b $51, $F0
000254DE 11F6                       	dc.b $11, $F6
000254E0 B212                       	dc.b $B2, $12
000254E2 02                         DPLC_2d5b_1E0: 	dc.b $2
000254E3 521E                       	dc.b $52, $1E
000254E5 B224                       	dc.b $B2, $24
000254E7 02                         DPLC_2d5b_1E5: 	dc.b $2
000254E8 510D                       	dc.b $51, $D
000254EA B230                       	dc.b $B2, $30
000254EC 02                         DPLC_2d5b_1EA: 	dc.b $2
000254ED 521E                       	dc.b $52, $1E
000254EF B23C                       	dc.b $B2, $3C
000254F1 02                         DPLC_2d5b_1EF: 	dc.b $2
000254F2 510D                       	dc.b $51, $D
000254F4 B248                       	dc.b $B2, $48
000254F6 04                         DPLC_2d5b_1F4: 	dc.b $4
000254F7 5254                       	dc.b $52, $54
000254F9 125A                       	dc.b $12, $5A
000254FB B25C                       	dc.b $B2, $5C
000254FD 0268                       	dc.b $2, $68
000254FF 02                         DPLC_2d5b_1FD: 	dc.b $2
00025500 7269                       	dc.b $72, $69
00025502 B271                       	dc.b $B2, $71
00025504 04                         DPLC_2d5b_202: 	dc.b $4
00025505 5254                       	dc.b $52, $54
00025507 127D                       	dc.b $12, $7D
00025509 B27F                       	dc.b $B2, $7F
0002550B 0268                       	dc.b $2, $68
0002550D 02                         DPLC_2d5b_20B: 	dc.b $2
0002550E 7269                       	dc.b $72, $69
00025510 B28B                       	dc.b $B2, $8B
00025512 01                         DPLC_2d5b_210: 	dc.b $1
00025513 F297                       	dc.b $F2, $97
00025515 01                         DPLC_2d5b_213: 	dc.b $1
00025516 F2A7                       	dc.b $F2, $A7
00025518 01                         DPLC_2d5b_216: 	dc.b $1
00025519 F2B7                       	dc.b $F2, $B7
0002551B 01                         DPLC_2d5b_219: 	dc.b $1
0002551C F2C7                       	dc.b $F2, $C7
0002551E 01                         DPLC_2d5b_21C: 	dc.b $1
0002551F F2D7                       	dc.b $F2, $D7
00025521 02                         DPLC_2d5b_21F: 	dc.b $2
00025522 B2E7                       	dc.b $B2, $E7
00025524 22F3                       	dc.b $22, $F3
00025526 01                         DPLC_2d5b_224: 	dc.b $1
00025527 F2F6                       	dc.b $F2, $F6
00025529 02                         DPLC_2d5b_227: 	dc.b $2
0002552A B306                       	dc.b $B3, $6
0002552C 2312                       	dc.b $23, $12
0002552E 01                         DPLC_2d5b_22C: 	dc.b $1
0002552F F315                       	dc.b $F3, $15
00025531 02                         DPLC_2d5b_22F: 	dc.b $2
00025532 5325                       	dc.b $53, $25
00025534 B32B                       	dc.b $B3, $2B
00025536 04                         DPLC_2d5b_234: 	dc.b $4
00025537 5337                       	dc.b $53, $37
00025539 733D                       	dc.b $73, $3D
0002553B 1345                       	dc.b $13, $45
0002553D 0347                       	dc.b $3, $47
0002553F 02                         DPLC_2d5b_23D: 	dc.b $2
00025540 D348                       	dc.b $D3, $48
00025542 34EC                       	dc.b $34, $EC
00025544 02                         DPLC_2d5b_242: 	dc.b $2
00025545 F528                       	dc.b $F5, $28
00025547 0538                       	dc.b $5, $38
00025549 02                         DPLC_2d5b_247: 	dc.b $2
0002554A F539                       	dc.b $F5, $39
0002554C 0549                       	dc.b $5, $49
0002554E 02                         DPLC_2d5b_24C: 	dc.b $2
0002554F E356                       	dc.b $E3, $56
00025551 054A                       	dc.b $5, $4A
00025553 01                         DPLC_2d5b_251: 	dc.b $1
00025554 8365                       	dc.b $83, $65
00025556 03                         DPLC_2d5b_254: 	dc.b $3
00025557 736E                       	dc.b $73, $6E
00025559 0376                       	dc.b $3, $76
0002555B 3377                       	dc.b $33, $77
0002555D 02                         DPLC_2d5b_25B: 	dc.b $2
0002555E E37B                       	dc.b $E3, $7B
00025560 054A                       	dc.b $5, $4A
00025562 03                         DPLC_2d5b_260: 	dc.b $3
00025563 B38A                       	dc.b $B3, $8A
00025565 1396                       	dc.b $13, $96
00025567 0398                       	dc.b $3, $98
00025569 04                         DPLC_2d5b_267: 	dc.b $4
0002556A B399                       	dc.b $B3, $99
0002556C 33A5                       	dc.b $33, $A5
0002556E 03A9                       	dc.b $3, $A9
00025570 03AA                       	dc.b $3, $AA
00025572 04                         DPLC_2d5b_270: 	dc.b $4
00025573 B3AB                       	dc.b $B3, $AB
00025575 33B7                       	dc.b $33, $B7
00025577 03BB                       	dc.b $3, $BB
00025579 03BC                       	dc.b $3, $BC
0002557B 05                         DPLC_2d5b_279: 	dc.b $5
0002557C 83BD                       	dc.b $83, $BD
0002557E 13C6                       	dc.b $13, $C6
00025580 53C8                       	dc.b $53, $C8
00025582 13CE                       	dc.b $13, $CE
00025584 03D0                       	dc.b $3, $D0
00025586 05                         DPLC_2d5b_284: 	dc.b $5
00025587 83D1                       	dc.b $83, $D1
00025589 13DA                       	dc.b $13, $DA
0002558B 53C8                       	dc.b $53, $C8
0002558D 13CE                       	dc.b $13, $CE
0002558F 03D0                       	dc.b $3, $D0
00025591 02                         DPLC_2d5b_28F: 	dc.b $2
00025592 83DC                       	dc.b $83, $DC
00025594 73E5                       	dc.b $73, $E5
00025596 03                         DPLC_2d5b_294: 	dc.b $3
00025597 83ED                       	dc.b $83, $ED
00025599 23F6                       	dc.b $23, $F6
0002559B 13F9                       	dc.b $13, $F9
0002559D 02                         DPLC_2d5b_29B: 	dc.b $2
0002559E 83FB                       	dc.b $83, $FB
000255A0 7404                       	dc.b $74, $4
000255A2 03                         DPLC_2d5b_2A0: 	dc.b $3
000255A3 83ED                       	dc.b $83, $ED
000255A5 240C                       	dc.b $24, $C
000255A7 140F                       	dc.b $14, $F
000255A9 02                         DPLC_2d5b_2A7: 	dc.b $2
000255AA 5411                       	dc.b $54, $11
000255AC B417                       	dc.b $B4, $17
000255AE 03                         DPLC_2d5b_2AC: 	dc.b $3
000255AF 8423                       	dc.b $84, $23
000255B1 342C                       	dc.b $34, $2C
000255B3 0430                       	dc.b $4, $30
000255B5 03                         DPLC_2d5b_2B3: 	dc.b $3
000255B6 7431                       	dc.b $74, $31
000255B8 1439                       	dc.b $14, $39
000255BA B43B                       	dc.b $B4, $3B
000255BC 05                         DPLC_2d5b_2BA: 	dc.b $5
000255BD 7447                       	dc.b $74, $47
000255BF 144F                       	dc.b $14, $4F
000255C1 5451                       	dc.b $54, $51
000255C3 3457                       	dc.b $34, $57
000255C5 045B                       	dc.b $4, $5B
000255C7 05                         DPLC_2d5b_2C5: 	dc.b $5
000255C8 745C                       	dc.b $74, $5C
000255CA 144F                       	dc.b $14, $4F
000255CC 5464                       	dc.b $54, $64
000255CE 3457                       	dc.b $34, $57
000255D0 045B                       	dc.b $4, $5B
000255D2 02                         DPLC_2d5b_2D0: 	dc.b $2
000255D3 246A                       	dc.b $24, $6A
000255D5 F46D                       	dc.b $F4, $6D
000255D7 03                         DPLC_2d5b_2D5: 	dc.b $3
000255D8 247D                       	dc.b $24, $7D
000255DA B480                       	dc.b $B4, $80
000255DC 248C                       	dc.b $24, $8C
000255DE 01                         DPLC_2d5b_2DC: 	dc.b $1
000255DF B48F                       	dc.b $B4, $8F
000255E1 01                         DPLC_2d5b_2DF: 	dc.b $1
000255E2 549B                       	dc.b $54, $9B
000255E4 01                         DPLC_2d5b_2E2: 	dc.b $1
000255E5 14A1                       	dc.b $14, $A1
000255E7 02                         DPLC_2d5b_2E5: 	dc.b $2
000255E8 E356                       	dc.b $E3, $56
000255EA 054A                       	dc.b $5, $4A
000255EC 03                         DPLC_2d5b_2EA: 	dc.b $3
000255ED 736E                       	dc.b $73, $6E
000255EF 0376                       	dc.b $3, $76
000255F1 3377                       	dc.b $33, $77
000255F3 03                         DPLC_2d5b_2F1: 	dc.b $3
000255F4 B4A3                       	dc.b $B4, $A3
000255F6 14AF                       	dc.b $14, $AF
000255F8 34B1                       	dc.b $34, $B1
000255FA 03                         DPLC_2d5b_2F8: 	dc.b $3
000255FB 54B5                       	dc.b $54, $B5
000255FD B4BB                       	dc.b $B4, $BB
000255FF 1074                       	dc.b $10, $74
00025601 02                         DPLC_2d5b_2FF: 	dc.b $2
00025602 F4C7                       	dc.b $F4, $C7
00025604 24D7                       	dc.b $24, $D7
00025606 02                         DPLC_2d5b_304: 	dc.b $2
00025607 F4DA                       	dc.b $F4, $DA
00025609 14EA                       	dc.b $14, $EA
0002560B 02                         DPLC_2d5b_309: 	dc.b $2
0002560C F502                       	dc.b $F5, $2
0002560E 2512                       	dc.b $25, $12
00025610 02                         DPLC_2d5b_30E: 	dc.b $2
00025611 F515                       	dc.b $F5, $15
00025613 2525                       	dc.b $25, $25
00025615 02                         DPLC_2d5b_313: 	dc.b $2
00025616 F54B                       	dc.b $F5, $4B
00025618 755B                       	dc.b $75, $5B
0002561A                            	even
0002561A                            	even
0002561A                            
0002561A                            ; ---------------------------------------------------------------------------
0002561A                            ; Uncompressed graphics	- Sonic
0002561A                            ; ---------------------------------------------------------------------------
0002561A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003023A                            		even
0003023A                            ; ---------------------------------------------------------------------------
0003023A                            ; Compressed graphics - various
0003023A                            ; ---------------------------------------------------------------------------
0003023A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003033E                            		even
0003033E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030378                            		even
00030378                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0003050E                            		even
0003050E                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030656                            		even
00030656                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030760                            		even
00030760                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
000307B2                            		even
000307B2                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
000309FA                            		even
000309FA                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030B80                            		even
00030B80                            ; ---------------------------------------------------------------------------
00030B80                            ; Sprite mappings - walls of the special stage
00030B80                            ; ---------------------------------------------------------------------------
00030B80                            Map_SSWalls:
00030B80                            	include "_maps\SSwalls.asm"
00030B80                            ; ---------------------------------------------------------------------------
00030B80                            ; Sprite mappings - walls of the special stage
00030B80                            ; ---------------------------------------------------------------------------
00030B80 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030B84 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030B88 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030B8C 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030B90 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030B94 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030B98 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030B9C 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030BA0 01                         byte_2C584:	dc.b 1
00030BA1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030BA6 01                         byte_2C58A:	dc.b 1
00030BA7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030BAC 01                         byte_2C590:	dc.b 1
00030BAD F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030BB2 01                         byte_2C596:	dc.b 1
00030BB3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030BB8 01                         byte_2C59C:	dc.b 1
00030BB9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030BBE 01                         byte_2C5A2:	dc.b 1
00030BBF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030BC4 01                         byte_2C5A8:	dc.b 1
00030BC5 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030BCA 01                         byte_2C5AE:	dc.b 1
00030BCB F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030BD0 01                         byte_2C5B4:	dc.b 1
00030BD1 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030BD6 01                         byte_2C5BA:	dc.b 1
00030BD7 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030BDC 01                         byte_2C5C0:	dc.b 1
00030BDD F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030BE2 01                         byte_2C5C6:	dc.b 1
00030BE3 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030BE8 01                         byte_2C5CC:	dc.b 1
00030BE9 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030BEE 01                         byte_2C5D2:	dc.b 1
00030BEF F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030BF4 01                         byte_2C5D8:	dc.b 1
00030BF5 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030BFA 01                         byte_2C5DE:	dc.b 1
00030BFB F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030C00                            		even
00030C00                            		even
00030C00                            ; ---------------------------------------------------------------------------
00030C00                            ; Compressed graphics - special stage
00030C00                            ; ---------------------------------------------------------------------------
00030C00                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031538                            		even
00031538                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031686                            		even
00031686                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032B18                            		even
00032B18                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032E18                            		even
00032E18                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003330C                            		even
0003330C                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000333FA                            		even
000333FA                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000334CA                            		even
000334CA                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000335C0                            		even
000335C0                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0003361E                            		even
0003361E                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
000336B0                            		even
000336B0                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033772                            		even
00033772                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033840                            		even
00033840                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0003390C                            		even
0003390C                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
000339D4                            		even
000339D4                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033A9E                            		even
00033A9E                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033B6E                            		even
00033B6E                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033D62                            		even
00033D62                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00033ECA                            		even
00033ECA                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00033F7A                            		even
00033F7A                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00034054                            		even
00034054                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000340D8                            		even
000340D8                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00034256                            		even
00034256                            ; ---------------------------------------------------------------------------
00034256                            ; Compressed graphics - GHZ stuff
00034256                            ; ---------------------------------------------------------------------------
00034256                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000342A0                            		even
000342A0                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000343BA                            		even
000343BA                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
000344A6                            		even
000344A6                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000344EE                            		even
000344EE                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0003468C                            		even
0003468C                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034708                            		even
00034708                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0003491C                            		even
0003491C                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034A48                            		even
00034A48                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034B76                            		even
00034B76                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034C14                            		even
00034C14                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034C74                            		even
00034C74                            ; ---------------------------------------------------------------------------
00034C74                            ; Compressed graphics - LZ stuff
00034C74                            ; ---------------------------------------------------------------------------
00034C74                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034D98                            		even
00034D98                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
0003558C                            		even
0003558C                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
0003570C                            		even
0003570C                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035876                            		even
00035876                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00035ECC                            		even
00035ECC                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00035F82                            		even
00035F82                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00036024                            		even
00036024                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036180                            		even
00036180                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
000361E4                            		even
000361E4                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00036336                            		even
00036336                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036818                            		even
00036818                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036988                            		even
00036988                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036C40                            		even
00036C40                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036D78                            		even
00036D78                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00036EA2                            		even
00036EA2                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00036FB2                            		even
00036FB2                            ; ---------------------------------------------------------------------------
00036FB2                            ; Compressed graphics - MZ stuff
00036FB2                            ; ---------------------------------------------------------------------------
00036FB2                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037240                            		even
00037240                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
000372FE                            		even
000372FE                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000373B6                            		even
000373B6                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003740A                            		even
0003740A                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
000376DC 00                         		even
000376DC                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00037FF2                            		even
00037FF2                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
00038156                            		even
00038156                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
000381DE                            		even
000381DE                            ; ---------------------------------------------------------------------------
000381DE                            ; Compressed graphics - SLZ stuff
000381DE                            ; ---------------------------------------------------------------------------
000381DE                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003841A                            		even
0003841A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038560                            		even
00038560                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
000387A4                            		even
000387A4                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038806                            		even
00038806                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
000388E8                            		even
000388E8                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038ACA                            		even
00038ACA                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038BD6                            		even
00038BD6                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038C7A                            		even
00038C7A                            ; ---------------------------------------------------------------------------
00038C7A                            ; Compressed graphics - SYZ stuff
00038C7A                            ; ---------------------------------------------------------------------------
00038C7A                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038DE4                            		even
00038DE4                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038E46                            		even
00038E46                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00038F28                            		even
00038F28                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000391B6                            		even
000391B6                            ; ---------------------------------------------------------------------------
000391B6                            ; Compressed graphics - SBZ stuff
000391B6                            ; ---------------------------------------------------------------------------
000391B6                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003920A                            		even
0003920A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000394A6                            		even
000394A6                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
000396AA                            		even
000396AA                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039848                            		even
00039848                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039B78                            		even
00039B78                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039D56                            		even
00039D56                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039DAE                            		even
00039DAE                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00039F78 00                         		even
00039F78                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A076                            		even
0003A076                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A202                            		even
0003A202                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A252                            		even
0003A252                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A2AA                            		even
0003A2AA                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A3A6                            		even
0003A3A6                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A4BC                            		even
0003A4BC                            ; ---------------------------------------------------------------------------
0003A4BC                            ; Compressed graphics - enemies
0003A4BC                            ; ---------------------------------------------------------------------------
0003A4BC                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003A87C                            		even
0003A87C                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AA26 00                         		even
0003AA26                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003ADE8 00                         		even
0003ADE8                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003AFD0                            		even
0003AFD0                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B188 00                         		even
0003B188                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B3F0                            		even
0003B3F0                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B67A                            		even
0003B67A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BC9E                            		even
0003BC9E                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BE94                            		even
0003BE94                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C4B2                            		even
0003C4B2                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C89A                            		even
0003C89A                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CB96                            		even
0003CB96                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CDDE                            		even
0003CDDE                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D076                            		even
0003D076                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D254                            		even
0003D254                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D3E2                            		even
0003D3E2                            ; ---------------------------------------------------------------------------
0003D3E2                            ; Compressed graphics - various
0003D3E2                            ; ---------------------------------------------------------------------------
0003D3E2                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003D9F0                            		even
0003D9F0                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DAE6                            		even
0003DAE6                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DBEC                            		even
0003DBEC                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DCE0                            		even
0003DCE0                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E224                            		even
0003E224                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E88A                            		even
0003E88A                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E93A                            		even
0003E93A                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EACC                            		even
0003EACC                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EBCE                            		even
0003EBCE                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003ECAA                            		even
0003ECAA                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F126                            		even
0003F126                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F1E6                            		even
0003F1E6                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F35A                            		even
0003F35A                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F65C                            		even
0003F65C                            ; ---------------------------------------------------------------------------
0003F65C                            ; Compressed graphics - continue screen
0003F65C                            ; ---------------------------------------------------------------------------
0003F65C                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F90C                            		even
0003F90C                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FB46                            		even
0003FB46                            ; ---------------------------------------------------------------------------
0003FB46                            ; Compressed graphics - animals
0003FB46                            ; ---------------------------------------------------------------------------
0003FB46                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FC9E                            		even
0003FC9E                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FDFA                            		even
0003FDFA                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003FF76                            		even
0003FF76                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040092                            		even
00040092                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000401C8                            		even
000401C8                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040302                            		even
00040302                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0004045E                            		even
0004045E                            ; ---------------------------------------------------------------------------
0004045E                            ; Compressed graphics - primary patterns and block mappings
0004045E                            ; ---------------------------------------------------------------------------
0004045E                            Blk16_GHZ:	incbin	map16\ghz.bin
00040D72                            		even
00040D72                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042680                            		even
00042680                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043A00                            		even
00043A00                            Blk256_GHZ:	incbin	map256\ghz.bin
00045CFE                            		even
00045CFE                            Blk16_LZ:	incbin	map16\lz.bin
00046438                            		even
00046438                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004883A                            		even
0004883A                            Blk256_LZ:	incbin	map256\lz.bin
0004B1BA                            		even
0004B1BA                            Blk16_MZ:	incbin	map16\mz.bin
0004B916                            		even
0004B916                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E19E                            		even
0004E19E                            Blk256_MZ:	incbin	map256\mz.bin
0004F922                            		even
0004F922                            Blk16_SLZ:	incbin	map16\slz.bin
0004FFEC                            		even
0004FFEC                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051F40                            		even
00051F40                            Blk256_SLZ:	incbin	map256\slz.bin
000525BA                            		even
000525BA                            Blk16_SYZ:	incbin	map16\syz.bin
000531E0                            		even
000531E0                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057772                            		even
00057772                            Blk256_SYZ:	incbin	map256\syz.bin
000597CE                            		even
000597CE                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A716                            		even
0005A716                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D0DA                            		even
0005D0DA                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FBD0                            		even
0005FBD0                            ; ---------------------------------------------------------------------------
0005FBD0                            ; Compressed graphics - bosses and ending sequence
0005FBD0                            ; ---------------------------------------------------------------------------
0005FBD0                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000603EA 00                         		even
000603EA                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000606D4                            		even
000606D4                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00060F58                            		even
00060F58                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00061CAE 00                         		even
00061CAE                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062416                            		even
00062416                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00062996                            		even
00062996                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00062AB6                            		even
00062AB6                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00062CB4                            		even
00062CB4                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00063E92                            		even
00063E92                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
000647D6                            		even
000647D6                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00064BAC                            		even
00064BAC                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006513C                            		even
0006513C                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
000653C4                            		even
000653C4                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
000659C2                            		even
000659C2                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00065C4A                            		even
00065C4A                            		incbin	misc\padding2.bin
00065D4E                            		even
00065D4E                            ; ---------------------------------------------------------------------------
00065D4E                            ; Collision data
00065D4E                            ; ---------------------------------------------------------------------------
00065D4E                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00065E4E                            		even
00065E4E                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00066E4E                            		even
00066E4E                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00067E4E                            		even
00067E4E                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00068006 00                         		even
00068006                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0006816E                            		even
0006816E                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000682FE                            		even
000682FE                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
000684F2                            		even
000684F2                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000686F8                            		even
000686F8                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00068996                            		even
00068996                            ; ---------------------------------------------------------------------------
00068996                            ; Special layouts
00068996                            ; ---------------------------------------------------------------------------
00068996                            SS_1:		incbin	sslayout\1.bin
00068C10                            		even
00068C10                            SS_2:		incbin	sslayout\2.bin
00069022                            		even
00069022                            SS_3:		incbin	sslayout\3.bin
0006937E                            		even
0006937E                            SS_4:		incbin	sslayout\4.bin
00069858                            		even
00069858                            SS_5:		incbin	sslayout\5.bin
00069D2A                            		even
00069D2A                            SS_6:		incbin	sslayout\6.bin
0006A03A                            		even
0006A03A                            ; ---------------------------------------------------------------------------
0006A03A                            ; Animated uncompressed graphics
0006A03A                            ; ---------------------------------------------------------------------------
0006A03A                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A23A                            		even
0006A23A                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006A63A                            		even
0006A63A                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006AABA                            		even
0006AABA                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006ADBA                            		even
0006ADBA                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006B3BA                            		even
0006B3BA                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006B6BA                            		even
0006B6BA                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C13A                            		even
0006C13A                            
0006C13A                            ; ---------------------------------------------------------------------------
0006C13A                            ; Level	layout index
0006C13A                            ; ---------------------------------------------------------------------------
0006C13A 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C140 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C146 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C14C 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C152 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C158 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C15E 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C164 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C16A 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C170 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C176 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C17C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C182 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C188 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C18E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C194 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C19A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C1A0 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C1A6 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C1AC 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C1B2 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C1B8 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C1BE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C1C4 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C1CA 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C1D0 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C1D6 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C1DC 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C1E2                            
0006C1E2                            Level_GHZ1:	incbin	levels\ghz1.bin
0006C2D4                            		even
0006C2D4 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006C2D8                            Level_GHZ2:	incbin	levels\ghz2.bin
0006C3A0                            		even
0006C3A0 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006C3A4                            Level_GHZ3:	incbin	levels\ghz3.bin
0006C4C6                            		even
0006C4C6                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006C4E8                            		even
0006C4E8 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006C4EC 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006C4F0                            
0006C4F0                            Level_LZ1:	incbin	levels\lz1.bin
0006C5F2                            		even
0006C5F2                            Level_LZbg:	incbin	levels\lzbg.bin
0006C6F4                            		even
0006C6F4 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006C6F8                            Level_LZ2:	incbin	levels\lz2.bin
0006C792                            		even
0006C792 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006C796                            Level_LZ3:	incbin	levels\lz3.bin
0006C8B0                            		even
0006C8B0 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006C8B4                            Level_SBZ3:	incbin	levels\sbz3.bin
0006C96E                            		even
0006C96E 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006C972                            
0006C972                            Level_MZ1:	incbin	levels\mz1.bin
0006CA10                            		even
0006CA10                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006CA8A                            		even
0006CA8A                            Level_MZ2:	incbin	levels\mz2.bin
0006CB2E                            		even
0006CB2E                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006CBC0                            		even
0006CBC0 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006CBC4                            Level_MZ3:	incbin	levels\mz3.bin
0006CCA6                            		even
0006CCA6                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006CD4A 00                         		even
0006CD4A 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006CD4E 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006CD52                            
0006CD52                            Level_SLZ1:	incbin	levels\slz1.bin
0006CE64                            		even
0006CE64                            Level_SLZbg:	incbin	levels\slzbg.bin
0006CE7E                            		even
0006CE7E                            Level_SLZ2:	incbin	levels\slz2.bin
0006CF6E                            		even
0006CF6E                            Level_SLZ3:	incbin	levels\slz3.bin
0006D088                            		even
0006D088 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D08C                            
0006D08C                            Level_SYZ1:	incbin	levels\syz1.bin
0006D148 00                         		even
0006D148                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D182                            		even
0006D182 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D186                            Level_SYZ2:	incbin	levels\syz2.bin
0006D28A                            		even
0006D28A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D28E                            Level_SYZ3:	incbin	levels\syz3.bin
0006D3E8 00                         		even
0006D3E8 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006D3EC 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006D3F0                            
0006D3F0                            Level_SBZ1:	incbin	levels\sbz1.bin
0006D512                            		even
0006D512                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006D550                            		even
0006D550                            Level_SBZ2:	incbin	levels\sbz2.bin
0006D692                            		even
0006D692                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006D7FC                            		even
0006D7FC 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006D800 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006D804                            Level_End:	incbin	levels\ending.bin
0006D834 00                         		even
0006D834 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006D838                            
0006D838                            ; ---------------------------------------------------------------------------
0006D838                            ; Animated uncompressed giant ring graphics
0006D838                            ; ---------------------------------------------------------------------------
0006D838                            Art_BigRing:	incbin	artunc\bigring.bin
0006E478                            		even
0006E478                            
0006E478                            		incbin	misc\padding3.bin
0006E514                            		even
0006E514                            
0006E514                            ; ---------------------------------------------------------------------------
0006E514                            ; Sprite locations index
0006E514                            ; ---------------------------------------------------------------------------
0006E514 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E518 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E51C 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E520 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E524 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E528 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E52C 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E530 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E534 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E538 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E53C 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E540 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E544 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E548 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E54C 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E550 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E554 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E558 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E55C 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E560 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E564 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E568 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E56C 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E570 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E574 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E578 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E57C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E580 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006E584 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E588 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006E58C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006E590 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006E594 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E598 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006E59C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006E5A0 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006E5A4 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006E5AA                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006EDF0                            		even
0006EDF0                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006EEA4                            		even
0006EEA4                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006F8E8                            		even
0006F8E8                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006FC90                            		even
0006FC90                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006FFC6                            		even
0006FFC6                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070512                            		even
00070512                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000709AA                            		even
000709AA                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000709DC                            		even
000709DC                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00070A0E                            		even
00070A0E                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00070A40                            		even
00070A40                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00070A72                            		even
00070A72                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00070ABC                            		even
00070ABC                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00070AFA                            		even
00070AFA                            ObjPos_MZ1:	incbin	objpos\mz1.bin
00070E66                            		even
00070E66                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071310                            		even
00071310                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071886                            		even
00071886                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
000718B0                            		even
000718B0                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00071D18                            		even
00071D18                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
000722FA                            		even
000722FA                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007296C                            		even
0007296C                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00072ED6                            		even
00072ED6                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
000734DC                            		even
000734DC                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00073C1A                            		even
00073C1A                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000742F8                            		even
000742F8                            ObjPos_FZ:	incbin	objpos\fz.bin
0007430A                            		even
0007430A                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007433C                            		even
0007433C                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007436E                            		even
0007436E                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
000743A0                            		even
000743A0                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
000743D2                            		even
000743D2                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074404                            		even
00074404                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007443C                            		even
0007443C                            ObjPos_End:	incbin	objpos\ending.bin
00074598                            		even
00074598 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007459E                            ; ---------------------------------------------------------------------------
0007459E                            		incbin	misc\padding4.bin
00074BC8                            		even
00074BC8                            
00074BC8 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00074BCC 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00074BD0 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00074BD4 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00074BD8 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00074BDC 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00074BE0                            ; ---------------------------------------------------------------------------
00074BE0                            ; PSG instruments used in music
00074BE0                            ; ---------------------------------------------------------------------------
00074BE0 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00074BEC 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00074BF8 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00074C04                            PSG1:		incbin	sound\psg1.bin
00074C1B                            PSG2:		incbin	sound\psg2.bin
00074C22                            PSG3:		incbin	sound\psg3.bin
00074C33                            PSG4:		incbin	sound\psg4.bin
00074C3E                            PSG6:		incbin	sound\psg6.bin
00074C4D                            PSG5:		incbin	sound\psg5.bin
00074C77                            PSG7:		incbin	sound\psg7.bin
00074C93                            PSG8:		incbin	sound\psg8.bin
00074CBB                            PSG9:		incbin	sound\psg9.bin
00074CCC                            
00074CCC 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00074CD4                            ; ---------------------------------------------------------------------------
00074CD4                            ; Music	Pointers
00074CD4                            ; ---------------------------------------------------------------------------
00074CD4 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00074CDC 0000 0000 0000 0000        		dc.l Music83, Music84
00074CE4 0000 0000 0000 0000        		dc.l Music85, Music86
00074CEC 0000 0000 0000 0000        		dc.l Music87, Music88
00074CF4 0000 0000 0000 0000        		dc.l Music89, Music8A
00074CFC 0000 0000 0000 0000        		dc.l Music8B, Music8C
00074D04 0000 0000 0000 0000        		dc.l Music8D, Music8E
00074D0C 0000 0000 0000 0000        		dc.l Music8F, Music90
00074D14 0000 0000 0000 0000        		dc.l Music91, Music92
00074D1C 0000 0000 0000 0000        		dc.l Music93, Music94
00074D24 0000 0000 0000 0000        		dc.l Music95, Music96
00074D2C 0000 0000 0000 0000        		dc.l Music97, Music98
00074D34 0000 0000 0000 0000        		dc.l Music99, Music9A
00074D3C 0000 0000 0000 0000        		dc.l Music9B, Music9C
00074D44 0000 0000 0000 0000        		dc.l Music9D, Music9E
00074D4C 0000 0000                  		dc.l Music9F
00074D50                            ; ---------------------------------------------------------------------------
00074D50                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00074D50                            ; ---------------------------------------------------------------------------
00074D50 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00074D60 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00074D70 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00074D80 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00074D90 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00074DA0 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00074DB0 9090 9090                  		dc.b $90, $90, $90, $90
00074DB4                            
00074DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074DB4                            
00074DB4                            
00074DB4                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00074DB4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00074DBC 4E71                       		nop	
00074DBE 4E71                       		nop	
00074DC0 4E71                       		nop	
00074DC2                            
00074DC2                            loc_71B5A:
00074DC2 0839 0000 00A1 1100        		btst	#0,($A11100).l
00074DCA 66F6                       		bne.s	loc_71B5A
00074DCC                            
00074DCC 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00074DD4 6700                       		beq.s	loc_71B82
00074DD6 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074DDE 4E71                       		nop	
00074DE0 4E71                       		nop	
00074DE2 4E71                       		nop	
00074DE4 4E71                       		nop	
00074DE6 4E71                       		nop	
00074DE8 60CA                       		bra.s	sub_71B4C
00074DEA                            ; ===========================================================================
00074DEA                            
00074DEA                            loc_71B82:
00074DEA 4DF9 00FF F000             		lea	($FFF000).l,a6
00074DF0 422E 000E                  		clr.b	$E(a6)
00074DF4 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00074DF8 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00074DFC 532E 0001                  		subq.b	#1,1(a6)
00074E00 6600                       		bne.s	loc_71B9E
00074E02 4EBA 0000                  		jsr	sub_7260C(pc)
00074E06                            
00074E06                            loc_71B9E:
00074E06 102E 0004                  		move.b	4(a6),d0
00074E0A 6700                       		beq.s	loc_71BA8
00074E0C 4EBA 0000                  		jsr	sub_72504(pc)
00074E10                            
00074E10                            loc_71BA8:
00074E10 4A2E 0024                  		tst.b	$24(a6)
00074E14 6700                       		beq.s	loc_71BB2
00074E16 4EBA 0000                  		jsr	sub_7267C(pc)
00074E1A                            
00074E1A                            loc_71BB2:
00074E1A 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00074E1E 6700                       		beq.s	loc_71BBC	; if not, branch
00074E20 4EBA 0000                  		jsr	Sound_Play(pc)
00074E24                            
00074E24                            loc_71BBC:
00074E24 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00074E2A 6700                       		beq.s	loc_71BC8
00074E2C 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00074E30                            
00074E30                            loc_71BC8:
00074E30 4BEE 0040                  		lea	$40(a6),a5
00074E34 4A15                       		tst.b	(a5)
00074E36 6A00                       		bpl.s	loc_71BD4
00074E38 4EBA 0000                  		jsr	sub_71C4E(pc)
00074E3C                            
00074E3C                            loc_71BD4:
00074E3C 422E 0008                  		clr.b	8(a6)
00074E40 7E05                       		moveq	#5,d7
00074E42                            
00074E42                            loc_71BDA:
00074E42 DAFC 0030                  		adda.w	#$30,a5
00074E46 4A15                       		tst.b	(a5)
00074E48 6A00                       		bpl.s	loc_71BE6
00074E4A 4EBA 0000                  		jsr	sub_71CCA(pc)
00074E4E                            
00074E4E                            loc_71BE6:
00074E4E 51CF FFF2                  		dbf	d7,loc_71BDA
00074E52                            
00074E52 7E02                       		moveq	#2,d7
00074E54                            
00074E54                            loc_71BEC:
00074E54 DAFC 0030                  		adda.w	#$30,a5
00074E58 4A15                       		tst.b	(a5)
00074E5A 6A00                       		bpl.s	loc_71BF8
00074E5C 4EBA 0000                  		jsr	sub_72850(pc)
00074E60                            
00074E60                            loc_71BF8:
00074E60 51CF FFF2                  		dbf	d7,loc_71BEC
00074E64                            
00074E64 1D7C 0080 000E             		move.b	#$80,$E(a6)
00074E6A 7E02                       		moveq	#2,d7
00074E6C                            
00074E6C                            loc_71C04:
00074E6C DAFC 0030                  		adda.w	#$30,a5
00074E70 4A15                       		tst.b	(a5)
00074E72 6A00                       		bpl.s	loc_71C10
00074E74 4EBA 0000                  		jsr	sub_71CCA(pc)
00074E78                            
00074E78                            loc_71C10:
00074E78 51CF FFF2                  		dbf	d7,loc_71C04
00074E7C                            
00074E7C 7E02                       		moveq	#2,d7
00074E7E                            
00074E7E                            loc_71C16:
00074E7E DAFC 0030                  		adda.w	#$30,a5
00074E82 4A15                       		tst.b	(a5)
00074E84 6A00                       		bpl.s	loc_71C22
00074E86 4EBA 0000                  		jsr	sub_72850(pc)
00074E8A                            
00074E8A                            loc_71C22:
00074E8A 51CF FFF2                  		dbf	d7,loc_71C16
00074E8E 1D7C 0040 000E             		move.b	#$40,$E(a6)
00074E94 DAFC 0030                  		adda.w	#$30,a5
00074E98 4A15                       		tst.b	(a5)
00074E9A 6A00                       		bpl.s	loc_71C38
00074E9C 4EBA 0000                  		jsr	sub_71CCA(pc)
00074EA0                            
00074EA0                            loc_71C38:
00074EA0 DAFC 0030                  		adda.w	#$30,a5
00074EA4 4A15                       		tst.b	(a5)
00074EA6 6A00                       		bpl.s	loc_71C44
00074EA8 4EBA 0000                  		jsr	sub_72850(pc)
00074EAC                            
00074EAC                            loc_71C44:
00074EAC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00074EB4 4E75                       		rts	
00074EB6                            ; End of function sub_71B4C
00074EB6                            
00074EB6                            
00074EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074EB6                            
00074EB6                            
00074EB6                            sub_71C4E:				; XREF: sub_71B4C
00074EB6 532D 000E                  		subq.b	#1,$E(a5)
00074EBA 6600                       		bne.s	locret_71CAA
00074EBC 1D7C 0080 0008             		move.b	#$80,8(a6)
00074EC2 286D 0004                  		movea.l	4(a5),a4
00074EC6                            
00074EC6                            loc_71C5E:
00074EC6 7A00                       		moveq	#0,d5
00074EC8 1A1C                       		move.b	(a4)+,d5
00074ECA 0C05 00E0                  		cmpi.b	#-$20,d5
00074ECE 6500                       		bcs.s	loc_71C6E
00074ED0 4EBA 0000                  		jsr	sub_72A5A(pc)
00074ED4 60F0                       		bra.s	loc_71C5E
00074ED6                            ; ===========================================================================
00074ED6                            
00074ED6                            loc_71C6E:
00074ED6 4A05                       		tst.b	d5
00074ED8 6A00                       		bpl.s	loc_71C84
00074EDA 1B45 0010                  		move.b	d5,$10(a5)
00074EDE 1A1C                       		move.b	(a4)+,d5
00074EE0 6A00                       		bpl.s	loc_71C84
00074EE2 534C                       		subq.w	#1,a4
00074EE4 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074EEA 6000                       		bra.s	loc_71C88
00074EEC                            ; ===========================================================================
00074EEC                            
00074EEC                            loc_71C84:
00074EEC 4EBA 0000                  		jsr	sub_71D40(pc)
00074EF0                            
00074EF0                            loc_71C88:
00074EF0 2B4C 0004                  		move.l	a4,4(a5)
00074EF4 0815 0002                  		btst	#2,(a5)
00074EF8 6600                       		bne.s	locret_71CAA
00074EFA 7000                       		moveq	#0,d0
00074EFC 102D 0010                  		move.b	$10(a5),d0
00074F00 0C00 0080                  		cmpi.b	#$80,d0
00074F04 6700                       		beq.s	locret_71CAA
00074F06 0800 0003                  		btst	#3,d0
00074F0A 6600                       		bne.s	loc_71CAC
00074F0C 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00074F12                            
00074F12                            locret_71CAA:
00074F12 4E75                       		rts	
00074F14                            ; ===========================================================================
00074F14                            
00074F14                            loc_71CAC:
00074F14 0400 0088                  		subi.b	#$88,d0
00074F18 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00074F1C 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00074F22 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00074F2A 4E75                       		rts	
00074F2C                            ; End of function sub_71C4E
00074F2C                            
00074F2C                            ; ===========================================================================
00074F2C 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00074F32                            
00074F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F32                            
00074F32                            
00074F32                            sub_71CCA:				; XREF: sub_71B4C
00074F32 532D 000E                  		subq.b	#1,$E(a5)
00074F36 6600                       		bne.s	loc_71CE0
00074F38 0895 0004                  		bclr	#4,(a5)
00074F3C 4EBA 0000                  		jsr	sub_71CEC(pc)
00074F40 4EBA 0000                  		jsr	sub_71E18(pc)
00074F44 6000 0000                  		bra.w	loc_726E2
00074F48                            ; ===========================================================================
00074F48                            
00074F48                            loc_71CE0:
00074F48 4EBA 0000                  		jsr	sub_71D9E(pc)
00074F4C 4EBA 0000                  		jsr	sub_71DC6(pc)
00074F50 6000 0000                  		bra.w	loc_71E24
00074F54                            ; End of function sub_71CCA
00074F54                            
00074F54                            
00074F54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F54                            
00074F54                            
00074F54                            sub_71CEC:				; XREF: sub_71CCA
00074F54 286D 0004                  		movea.l	4(a5),a4
00074F58 0895 0001                  		bclr	#1,(a5)
00074F5C                            
00074F5C                            loc_71CF4:
00074F5C 7A00                       		moveq	#0,d5
00074F5E 1A1C                       		move.b	(a4)+,d5
00074F60 0C05 00E0                  		cmpi.b	#-$20,d5
00074F64 6500                       		bcs.s	loc_71D04
00074F66 4EBA 0000                  		jsr	sub_72A5A(pc)
00074F6A 60F0                       		bra.s	loc_71CF4
00074F6C                            ; ===========================================================================
00074F6C                            
00074F6C                            loc_71D04:
00074F6C 4EBA 0000                  		jsr	sub_726FE(pc)
00074F70 4A05                       		tst.b	d5
00074F72 6A00                       		bpl.s	loc_71D1A
00074F74 4EBA 0000                  		jsr	sub_71D22(pc)
00074F78 1A1C                       		move.b	(a4)+,d5
00074F7A 6A00                       		bpl.s	loc_71D1A
00074F7C 534C                       		subq.w	#1,a4
00074F7E 6000 0000                  		bra.w	sub_71D60
00074F82                            ; ===========================================================================
00074F82                            
00074F82                            loc_71D1A:
00074F82 4EBA 0000                  		jsr	sub_71D40(pc)
00074F86 6000 0000                  		bra.w	sub_71D60
00074F8A                            ; End of function sub_71CEC
00074F8A                            
00074F8A                            
00074F8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074F8A                            
00074F8A                            
00074F8A                            sub_71D22:				; XREF: sub_71CEC
00074F8A 0405 0080                  		subi.b	#$80,d5
00074F8E 6700                       		beq.s	loc_71D58
00074F90 DA2D 0008                  		add.b	8(a5),d5
00074F94 0245 007F                  		andi.w	#$7F,d5
00074F98 E34D                       		lsl.w	#1,d5
00074F9A 41FA 0000                  		lea	word_72790(pc),a0
00074F9E 3C30 5000                  		move.w	(a0,d5.w),d6
00074FA2 3B46 0010                  		move.w	d6,$10(a5)
00074FA6 4E75                       		rts	
00074FA8                            ; End of function sub_71D22
00074FA8                            
00074FA8                            
00074FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FA8                            
00074FA8                            
00074FA8                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00074FA8 1005                       		move.b	d5,d0
00074FAA 122D 0002                  		move.b	2(a5),d1
00074FAE                            
00074FAE                            loc_71D46:
00074FAE 5301                       		subq.b	#1,d1
00074FB0 6700                       		beq.s	loc_71D4E
00074FB2 D005                       		add.b	d5,d0
00074FB4 60F8                       		bra.s	loc_71D46
00074FB6                            ; ===========================================================================
00074FB6                            
00074FB6                            loc_71D4E:
00074FB6 1B40 000F                  		move.b	d0,$F(a5)
00074FBA 1B40 000E                  		move.b	d0,$E(a5)
00074FBE 4E75                       		rts	
00074FC0                            ; End of function sub_71D40
00074FC0                            
00074FC0                            ; ===========================================================================
00074FC0                            
00074FC0                            loc_71D58:				; XREF: sub_71D22
00074FC0 08D5 0001                  		bset	#1,(a5)
00074FC4 426D 0010                  		clr.w	$10(a5)
00074FC8                            
00074FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00074FC8                            
00074FC8                            
00074FC8                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00074FC8 2B4C 0004                  		move.l	a4,4(a5)
00074FCC 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00074FD2 0815 0004                  		btst	#4,(a5)
00074FD6 6600                       		bne.s	locret_71D9C
00074FD8 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00074FDE 422D 000C                  		clr.b	$C(a5)
00074FE2 0815 0003                  		btst	#3,(a5)
00074FE6 6700                       		beq.s	locret_71D9C
00074FE8 206D 0014                  		movea.l	$14(a5),a0
00074FEC 1B58 0018                  		move.b	(a0)+,$18(a5)
00074FF0 1B58 0019                  		move.b	(a0)+,$19(a5)
00074FF4 1B58 001A                  		move.b	(a0)+,$1A(a5)
00074FF8 1018                       		move.b	(a0)+,d0
00074FFA E208                       		lsr.b	#1,d0
00074FFC 1B40 001B                  		move.b	d0,$1B(a5)
00075000 426D 001C                  		clr.w	$1C(a5)
00075004                            
00075004                            locret_71D9C:
00075004 4E75                       		rts	
00075006                            ; End of function sub_71D60
00075006                            
00075006                            
00075006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075006                            
00075006                            
00075006                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00075006 4A2D 0012                  		tst.b	$12(a5)
0007500A 6700                       		beq.s	locret_71DC4
0007500C 532D 0012                  		subq.b	#1,$12(a5)
00075010 6600                       		bne.s	locret_71DC4
00075012 08D5 0001                  		bset	#1,(a5)
00075016 4A2D 0001                  		tst.b	1(a5)
0007501A 6B00 0000                  		bmi.w	loc_71DBE
0007501E 4EBA 0000                  		jsr	sub_726FE(pc)
00075022 584F                       		addq.w	#4,sp
00075024 4E75                       		rts	
00075026                            ; ===========================================================================
00075026                            
00075026                            loc_71DBE:
00075026 4EBA 0000                  		jsr	sub_729A0(pc)
0007502A 584F                       		addq.w	#4,sp
0007502C                            
0007502C                            locret_71DC4:
0007502C 4E75                       		rts	
0007502E                            ; End of function sub_71D9E
0007502E                            
0007502E                            
0007502E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007502E                            
0007502E                            
0007502E                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0007502E 584F                       		addq.w	#4,sp
00075030 0815 0003                  		btst	#3,(a5)
00075034 6700                       		beq.s	locret_71E16
00075036 4A2D 0018                  		tst.b	$18(a5)
0007503A 6700                       		beq.s	loc_71DDA
0007503C 532D 0018                  		subq.b	#1,$18(a5)
00075040 4E75                       		rts	
00075042                            ; ===========================================================================
00075042                            
00075042                            loc_71DDA:
00075042 532D 0019                  		subq.b	#1,$19(a5)
00075046 6700                       		beq.s	loc_71DE2
00075048 4E75                       		rts	
0007504A                            ; ===========================================================================
0007504A                            
0007504A                            loc_71DE2:
0007504A 206D 0014                  		movea.l	$14(a5),a0
0007504E 1B68 0001 0019             		move.b	1(a0),$19(a5)
00075054 4A2D 001B                  		tst.b	$1B(a5)
00075058 6600                       		bne.s	loc_71DFE
0007505A 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075060 442D 001A                  		neg.b	$1A(a5)
00075064 4E75                       		rts	
00075066                            ; ===========================================================================
00075066                            
00075066                            loc_71DFE:
00075066 532D 001B                  		subq.b	#1,$1B(a5)
0007506A 1C2D 001A                  		move.b	$1A(a5),d6
0007506E 4886                       		ext.w	d6
00075070 DC6D 001C                  		add.w	$1C(a5),d6
00075074 3B46 001C                  		move.w	d6,$1C(a5)
00075078 DC6D 0010                  		add.w	$10(a5),d6
0007507C 594F                       		subq.w	#4,sp
0007507E                            
0007507E                            locret_71E16:
0007507E 4E75                       		rts	
00075080                            ; End of function sub_71DC6
00075080                            
00075080                            
00075080                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075080                            
00075080                            
00075080                            sub_71E18:				; XREF: sub_71CCA
00075080 0815 0001                  		btst	#1,(a5)
00075084 6600                       		bne.s	locret_71E48
00075086 3C2D 0010                  		move.w	$10(a5),d6
0007508A 6700                       		beq.s	loc_71E4A
0007508C                            
0007508C                            loc_71E24:				; XREF: sub_71CCA
0007508C 102D 001E                  		move.b	$1E(a5),d0
00075090 4880                       		ext.w	d0
00075092 DC40                       		add.w	d0,d6
00075094 0815 0002                  		btst	#2,(a5)
00075098 6600                       		bne.s	locret_71E48
0007509A 3206                       		move.w	d6,d1
0007509C E049                       		lsr.w	#8,d1
0007509E 103C 00A4                  		move.b	#-$5C,d0
000750A2 4EBA 0000                  		jsr	sub_72722(pc)
000750A6 1206                       		move.b	d6,d1
000750A8 103C 00A0                  		move.b	#-$60,d0
000750AC 4EBA 0000                  		jsr	sub_72722(pc)
000750B0                            
000750B0                            locret_71E48:
000750B0 4E75                       		rts	
000750B2                            ; ===========================================================================
000750B2                            
000750B2                            loc_71E4A:
000750B2 08D5 0001                  		bset	#1,(a5)
000750B6 4E75                       		rts	
000750B8                            ; End of function sub_71E18
000750B8                            
000750B8                            ; ===========================================================================
000750B8                            
000750B8                            loc_71E50:				; XREF: sub_71B4C
000750B8 6B00                       		bmi.s	loc_71E94
000750BA 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000750C0 6700 0000                  		beq.w	loc_71EFE
000750C4 1D7C 0002 0003             		move.b	#2,3(a6)
000750CA 7602                       		moveq	#2,d3
000750CC 103C 00B4                  		move.b	#-$4C,d0
000750D0 7200                       		moveq	#0,d1
000750D2                            
000750D2                            loc_71E6A:
000750D2 4EBA 0000                  		jsr	sub_7272E(pc)
000750D6 4EBA 0000                  		jsr	sub_72764(pc)
000750DA 5200                       		addq.b	#1,d0
000750DC 51CB FFF4                  		dbf	d3,loc_71E6A
000750E0                            
000750E0 7602                       		moveq	#2,d3
000750E2 7028                       		moveq	#$28,d0
000750E4                            
000750E4                            loc_71E7C:
000750E4 1203                       		move.b	d3,d1
000750E6 4EBA 0000                  		jsr	sub_7272E(pc)
000750EA 5801                       		addq.b	#4,d1
000750EC 4EBA 0000                  		jsr	sub_7272E(pc)
000750F0 51CB FFF2                  		dbf	d3,loc_71E7C
000750F4                            
000750F4 4EBA 0000                  		jsr	sub_729B6(pc)
000750F8 6000 FDB2                  		bra.w	loc_71C44
000750FC                            ; ===========================================================================
000750FC                            
000750FC                            loc_71E94:				; XREF: loc_71E50
000750FC 422E 0003                  		clr.b	3(a6)
00075100 7630                       		moveq	#$30,d3
00075102 4BEE 0040                  		lea	$40(a6),a5
00075106 7806                       		moveq	#6,d4
00075108                            
00075108                            loc_71EA0:
00075108 0815 0007                  		btst	#7,(a5)
0007510C 6700                       		beq.s	loc_71EB8
0007510E 0815 0002                  		btst	#2,(a5)
00075112 6600                       		bne.s	loc_71EB8
00075114 103C 00B4                  		move.b	#-$4C,d0
00075118 122D 000A                  		move.b	$A(a5),d1
0007511C 4EBA 0000                  		jsr	sub_72722(pc)
00075120                            
00075120                            loc_71EB8:
00075120 DAC3                       		adda.w	d3,a5
00075122 51CC FFE4                  		dbf	d4,loc_71EA0
00075126                            
00075126 4BEE 0220                  		lea	$220(a6),a5
0007512A 7802                       		moveq	#2,d4
0007512C                            
0007512C                            loc_71EC4:
0007512C 0815 0007                  		btst	#7,(a5)
00075130 6700                       		beq.s	loc_71EDC
00075132 0815 0002                  		btst	#2,(a5)
00075136 6600                       		bne.s	loc_71EDC
00075138 103C 00B4                  		move.b	#-$4C,d0
0007513C 122D 000A                  		move.b	$A(a5),d1
00075140 4EBA 0000                  		jsr	sub_72722(pc)
00075144                            
00075144                            loc_71EDC:
00075144 DAC3                       		adda.w	d3,a5
00075146 51CC FFE4                  		dbf	d4,loc_71EC4
0007514A                            
0007514A 4BEE 0340                  		lea	$340(a6),a5
0007514E 0815 0007                  		btst	#7,(a5)
00075152 6700                       		beq.s	loc_71EFE
00075154 0815 0002                  		btst	#2,(a5)
00075158 6600                       		bne.s	loc_71EFE
0007515A 103C 00B4                  		move.b	#-$4C,d0
0007515E 122D 000A                  		move.b	$A(a5),d1
00075162 4EBA 0000                  		jsr	sub_72722(pc)
00075166                            
00075166                            loc_71EFE:
00075166 6000 FD44                  		bra.w	loc_71C44
0007516A                            
0007516A                            ; ---------------------------------------------------------------------------
0007516A                            ; Subroutine to	play a sound or	music track
0007516A                            ; ---------------------------------------------------------------------------
0007516A                            
0007516A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007516A                            
0007516A                            
0007516A                            Sound_Play:				; XREF: sub_71B4C
0007516A 2079 0007 4BC8             		movea.l	(Go_SoundTypes).l,a0
00075170 43EE 000A                  		lea	$A(a6),a1	; load music track number
00075174 1616                       		move.b	0(a6),d3
00075176 7802                       		moveq	#2,d4
00075178                            
00075178                            loc_71F12:
00075178 1011                       		move.b	(a1),d0		; move track number to d0
0007517A 1200                       		move.b	d0,d1
0007517C 4219                       		clr.b	(a1)+
0007517E 0400 0081                  		subi.b	#$81,d0
00075182 6500                       		bcs.s	loc_71F3E
00075184 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0007518A 6700                       		beq.s	loc_71F2C
0007518C 1D41 000A                  		move.b	d1,$A(a6)
00075190 6000                       		bra.s	loc_71F3E
00075192                            ; ===========================================================================
00075192                            
00075192                            loc_71F2C:
00075192 0240 007F                  		andi.w	#$7F,d0
00075196 1430 0000                  		move.b	(a0,d0.w),d2
0007519A B403                       		cmp.b	d3,d2
0007519C 6500                       		bcs.s	loc_71F3E
0007519E 1602                       		move.b	d2,d3
000751A0 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000751A4                            
000751A4                            loc_71F3E:
000751A4 51CC FFD2                  		dbf	d4,loc_71F12
000751A8                            
000751A8 4A03                       		tst.b	d3
000751AA 6B00                       		bmi.s	locret_71F4A
000751AC 1C83                       		move.b	d3,0(a6)
000751AE                            
000751AE                            locret_71F4A:
000751AE 4E75                       		rts	
000751B0                            ; End of function Sound_Play
000751B0                            
000751B0                            
000751B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000751B0                            
000751B0                            
000751B0                            Sound_ChkValue:				; XREF: sub_71B4C
000751B0 7E00                       		moveq	#0,d7
000751B2 1E2E 0009                  		move.b	9(a6),d7
000751B6 6700 0000                  		beq.w	Sound_E4
000751BA 6A00                       		bpl.s	locret_71F8C
000751BC 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000751C2 0C07 009F                  		cmpi.b	#$9F,d7
000751C6 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000751CA 0C07 00A0                  		cmpi.b	#$A0,d7
000751CE 6500 0000                  		bcs.w	locret_71F8C
000751D2 0C07 00CF                  		cmpi.b	#$CF,d7
000751D6 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000751DA 0C07 00D0                  		cmpi.b	#$D0,d7
000751DE 6500 0000                  		bcs.w	locret_71F8C
000751E2 0C07 00E0                  		cmpi.b	#$E0,d7
000751E6 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
000751EA 0C07 00E5                  		cmpi.b	#$E5,d7
000751EE 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
000751F0                            
000751F0                            locret_71F8C:
000751F0 4E75                       		rts	
000751F2                            ; ===========================================================================
000751F2                            
000751F2                            Sound_E0toE5				; XREF: Sound_ChkValue
000751F2 0407 00E0                  		subi.b	#$E0,d7
000751F6 E54F                       		lsl.w	#2,d7
000751F8 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000751FC                            ; ===========================================================================
000751FC                            
000751FC                            Sound_ExIndex:
000751FC 6000 0000                  		bra.w	Sound_E0
00075200                            ; ===========================================================================
00075200 6000 0000                  		bra.w	Sound_E1
00075204                            ; ===========================================================================
00075204 6000 0000                  		bra.w	Sound_E2
00075208                            ; ===========================================================================
00075208 6000 0000                  		bra.w	Sound_E3
0007520C                            ; ===========================================================================
0007520C 6000 0000                  		bra.w	Sound_E4
00075210                            ; ===========================================================================
00075210 6000 0000                  		bra.w	Sound_E5
00075214                            ; ===========================================================================
00075214                            ; ---------------------------------------------------------------------------
00075214                            ; Play "Say-gaa" PCM sound
00075214                            ; ---------------------------------------------------------------------------
00075214                            
00075214                            Sound_E1:				  
00075214 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007521A 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075220 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075228                            PlayPCM_Loop:	  
00075228 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007522E 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075232 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00075236 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075238 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0007523A 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0007523E 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00075244 4EB8 141E                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00075248 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0007524E 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075250 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075252                            return_PlayPCM: 
00075252 584F                       		addq.w	#4,sp 
00075254 4E75                       		rts
00075256                            		
00075256                            ; ---------------------------------------------------------------------------
00075256                            ; Play you are an idiot pcm sound
00075256                            ; ---------------------------------------------------------------------------
00075256                            
00075256                            Sound_E5:  
00075256 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0007525C 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075262 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007526A                            PlayPCM_LoopE5:	  
0007526A                            
0007526A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075270                            		
00075270 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075274                            		
00075274 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075278 0200 000F                  		andi.b	#$F,d0
0007527C 6700                       		beq.s	SfxE5SwapPalette
0007527E                            		
0007527E 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075282 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075286 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075288 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
0007528A 60DE                       		bra.s	PlayPCM_LoopE5
0007528C                            		
0007528C                            SfxE5SwapPalette:
0007528C                            		
0007528C                            		
0007528C                            		
0007528C 4BF9 00C0 0004             		lea	($C00004).l,a5
00075292 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075298                            		
00075298                            		
00075298 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007529E 6700                       		beq.s	@not_black
000752A0 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000752A6 6000                       		bra.s	@merge
000752A8                            	@not_black:
000752A8 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000752AE                            	@merge:
000752AE 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000752B2 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000752B6 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
000752BC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000752C0                            		
000752C0 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000752C4 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000752C8 60A0                       		bra.s	PlayPCM_LoopE5
000752CA                            		
000752CA                            ; ===========================================================================
000752CA                            ; ---------------------------------------------------------------------------
000752CA                            ; Play music track $81-$9F
000752CA                            ; ---------------------------------------------------------------------------
000752CA                            
000752CA                            Sound_81to9F:				; XREF: Sound_ChkValue
000752CA 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000752CE 6600                       		bne.s	loc_72024	; if not, branch
000752D0 4A2E 0027                  		tst.b	$27(a6)
000752D4 6600 0000                  		bne.w	loc_721B6
000752D8 4BEE 0040                  		lea	$40(a6),a5
000752DC 7009                       		moveq	#9,d0
000752DE                            
000752DE                            loc_71FE6:
000752DE 0895 0002                  		bclr	#2,(a5)
000752E2 DAFC 0030                  		adda.w	#$30,a5
000752E6 51C8 FFF6                  		dbf	d0,loc_71FE6
000752EA                            
000752EA 4BEE 0220                  		lea	$220(a6),a5
000752EE 7005                       		moveq	#5,d0
000752F0                            
000752F0                            loc_71FF8:
000752F0 0895 0007                  		bclr	#7,(a5)
000752F4 DAFC 0030                  		adda.w	#$30,a5
000752F8 51C8 FFF6                  		dbf	d0,loc_71FF8
000752FC 4216                       		clr.b	0(a6)
000752FE 204E                       		movea.l	a6,a0
00075300 43EE 03A0                  		lea	$3A0(a6),a1
00075304 303C 0087                  		move.w	#$87,d0
00075308                            
00075308                            loc_72012:
00075308 22D8                       		move.l	(a0)+,(a1)+
0007530A 51C8 FFFC                  		dbf	d0,loc_72012
0007530E                            
0007530E 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075314 4216                       		clr.b	0(a6)
00075316 6000                       		bra.s	loc_7202C
00075318                            ; ===========================================================================
00075318                            
00075318                            loc_72024:
00075318 422E 0027                  		clr.b	$27(a6)
0007531C 422E 0026                  		clr.b	$26(a6)
00075320                            
00075320                            loc_7202C:
00075320 4EBA 0000                  		jsr	sub_725CA(pc)
00075324 2879 0007 4BD8             		movea.l	(off_719A0).l,a4
0007532A 0407 0081                  		subi.b	#$81,d7
0007532E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075334 2879 0007 4BD0             		movea.l	(Go_MusicIndex).l,a4
0007533A E54F                       		lsl.w	#2,d7
0007533C 2874 7000                  		movea.l	(a4,d7.w),a4
00075340 7000                       		moveq	#0,d0
00075342 3014                       		move.w	(a4),d0
00075344 D08C                       		add.l	a4,d0
00075346 2D40 0018                  		move.l	d0,$18(a6)
0007534A 102C 0005                  		move.b	5(a4),d0
0007534E 1D40 0028                  		move.b	d0,$28(a6)
00075352 4A2E 002A                  		tst.b	$2A(a6)
00075356 6700                       		beq.s	loc_72068
00075358 102E 0029                  		move.b	$29(a6),d0
0007535C                            
0007535C                            loc_72068:
0007535C 1D40 0002                  		move.b	d0,2(a6)
00075360 1D40 0001                  		move.b	d0,1(a6)
00075364 7200                       		moveq	#0,d1
00075366 264C                       		movea.l	a4,a3
00075368 5C4C                       		addq.w	#6,a4
0007536A 7E00                       		moveq	#0,d7
0007536C 1E2B 0002                  		move.b	2(a3),d7
00075370 6700 0000                  		beq.w	loc_72114
00075374 5307                       		subq.b	#1,d7
00075376 123C 00C0                  		move.b	#-$40,d1
0007537A 182B 0004                  		move.b	4(a3),d4
0007537E 7C30                       		moveq	#$30,d6
00075380 1A3C 0001                  		move.b	#1,d5
00075384 43EE 0040                  		lea	$40(a6),a1
00075388 45FA 0000                  		lea	byte_721BA(pc),a2
0007538C                            
0007538C                            loc_72098:
0007538C 08D1 0007                  		bset	#7,(a1)
00075390 135A 0001                  		move.b	(a2)+,1(a1)
00075394 1344 0002                  		move.b	d4,2(a1)
00075398 1346 000D                  		move.b	d6,$D(a1)
0007539C 1341 000A                  		move.b	d1,$A(a1)
000753A0 1345 000E                  		move.b	d5,$E(a1)
000753A4 7000                       		moveq	#0,d0
000753A6 301C                       		move.w	(a4)+,d0
000753A8 D08B                       		add.l	a3,d0
000753AA 2340 0004                  		move.l	d0,4(a1)
000753AE 335C 0008                  		move.w	(a4)+,8(a1)
000753B2 D2C6                       		adda.w	d6,a1
000753B4 51CF FFD6                  		dbf	d7,loc_72098
000753B8 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000753BE 6600                       		bne.s	loc_720D8
000753C0 702B                       		moveq	#$2B,d0
000753C2 7200                       		moveq	#0,d1
000753C4 4EBA 0000                  		jsr	sub_7272E(pc)
000753C8 6000 0000                  		bra.w	loc_72114
000753CC                            ; ===========================================================================
000753CC                            
000753CC                            loc_720D8:
000753CC 7028                       		moveq	#$28,d0
000753CE 7206                       		moveq	#6,d1
000753D0 4EBA 0000                  		jsr	sub_7272E(pc)
000753D4 103C 0042                  		move.b	#$42,d0
000753D8 727F                       		moveq	#$7F,d1
000753DA 4EBA 0000                  		jsr	sub_72764(pc)
000753DE 103C 004A                  		move.b	#$4A,d0
000753E2 727F                       		moveq	#$7F,d1
000753E4 4EBA 0000                  		jsr	sub_72764(pc)
000753E8 103C 0046                  		move.b	#$46,d0
000753EC 727F                       		moveq	#$7F,d1
000753EE 4EBA 0000                  		jsr	sub_72764(pc)
000753F2 103C 004E                  		move.b	#$4E,d0
000753F6 727F                       		moveq	#$7F,d1
000753F8 4EBA 0000                  		jsr	sub_72764(pc)
000753FC 103C 00B6                  		move.b	#-$4A,d0
00075400 123C 00C0                  		move.b	#-$40,d1
00075404 4EBA 0000                  		jsr	sub_72764(pc)
00075408                            
00075408                            loc_72114:
00075408 7E00                       		moveq	#0,d7
0007540A 1E2B 0003                  		move.b	3(a3),d7
0007540E 6700                       		beq.s	loc_72154
00075410 5307                       		subq.b	#1,d7
00075412 43EE 0190                  		lea	$190(a6),a1
00075416 45FA 0000                  		lea	byte_721C2(pc),a2
0007541A                            
0007541A                            loc_72126:
0007541A 08D1 0007                  		bset	#7,(a1)
0007541E 135A 0001                  		move.b	(a2)+,1(a1)
00075422 1344 0002                  		move.b	d4,2(a1)
00075426 1346 000D                  		move.b	d6,$D(a1)
0007542A 1345 000E                  		move.b	d5,$E(a1)
0007542E 7000                       		moveq	#0,d0
00075430 301C                       		move.w	(a4)+,d0
00075432 D08B                       		add.l	a3,d0
00075434 2340 0004                  		move.l	d0,4(a1)
00075438 335C 0008                  		move.w	(a4)+,8(a1)
0007543C 101C                       		move.b	(a4)+,d0
0007543E 135C 000B                  		move.b	(a4)+,$B(a1)
00075442 D2C6                       		adda.w	d6,a1
00075444 51CF FFD4                  		dbf	d7,loc_72126
00075448                            
00075448                            loc_72154:
00075448 43EE 0220                  		lea	$220(a6),a1
0007544C 7E05                       		moveq	#5,d7
0007544E                            
0007544E                            loc_7215A:
0007544E 4A11                       		tst.b	(a1)
00075450 6A00 0000                  		bpl.w	loc_7217C
00075454 7000                       		moveq	#0,d0
00075456 1029 0001                  		move.b	1(a1),d0
0007545A 6B00                       		bmi.s	loc_7216E
0007545C 5500                       		subq.b	#2,d0
0007545E E508                       		lsl.b	#2,d0
00075460 6000                       		bra.s	loc_72170
00075462                            ; ===========================================================================
00075462                            
00075462                            loc_7216E:
00075462 E608                       		lsr.b	#3,d0
00075464                            
00075464                            loc_72170:
00075464 41FA 0000                  		lea	dword_722CC(pc),a0
00075468 2070 0000                  		movea.l	(a0,d0.w),a0
0007546C 08D0 0002                  		bset	#2,(a0)
00075470                            
00075470                            loc_7217C:
00075470 D2C6                       		adda.w	d6,a1
00075472 51CF FFDA                  		dbf	d7,loc_7215A
00075476                            
00075476 4A6E 0340                  		tst.w	$340(a6)
0007547A 6A00                       		bpl.s	loc_7218E
0007547C 08EE 0002 0100             		bset	#2,$100(a6)
00075482                            
00075482                            loc_7218E:
00075482 4A6E 0370                  		tst.w	$370(a6)
00075486 6A00                       		bpl.s	loc_7219A
00075488 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007548E                            
0007548E                            loc_7219A:
0007548E 4BEE 0070                  		lea	$70(a6),a5
00075492 7805                       		moveq	#5,d4
00075494                            
00075494                            loc_721A0:
00075494 4EBA 0000                  		jsr	sub_726FE(pc)
00075498 DAC6                       		adda.w	d6,a5
0007549A 51CC FFF8                  		dbf	d4,loc_721A0
0007549E 7802                       		moveq	#2,d4
000754A0                            
000754A0                            loc_721AC:
000754A0 4EBA 0000                  		jsr	sub_729A0(pc)
000754A4 DAC6                       		adda.w	d6,a5
000754A6 51CC FFF8                  		dbf	d4,loc_721AC
000754AA                            
000754AA                            loc_721B6:
000754AA 584F                       		addq.w	#4,sp
000754AC 4E75                       		rts	
000754AE                            ; ===========================================================================
000754AE 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000754B6                            		even
000754B6 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000754BA                            		even
000754BA                            ; ===========================================================================
000754BA                            ; ---------------------------------------------------------------------------
000754BA                            ; Play normal sound effect
000754BA                            ; ---------------------------------------------------------------------------
000754BA                            
000754BA                            Sound_A0toCF:				; XREF: Sound_ChkValue
000754BA 4A2E 0027                  		tst.b	$27(a6)
000754BE 6600 0000                  		bne.w	loc_722C6
000754C2 4A2E 0004                  		tst.b	4(a6)
000754C6 6600 0000                  		bne.w	loc_722C6
000754CA 4A2E 0024                  		tst.b	$24(a6)
000754CE 6600 0000                  		bne.w	loc_722C6
000754D2 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000754D6 6600                       		bne.s	Sound_notB5	; if not, branch
000754D8 4A2E 002B                  		tst.b	$2B(a6)
000754DC 6600                       		bne.s	loc_721EE
000754DE 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000754E2                            
000754E2                            loc_721EE:
000754E2 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000754E8                            
000754E8                            Sound_notB5:
000754E8 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000754EC 6600                       		bne.s	Sound_notA7	; if not, branch
000754EE 4A2E 002C                  		tst.b	$2C(a6)
000754F2 6600 0000                  		bne.w	locret_722C4
000754F6 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000754FC                            
000754FC                            Sound_notA7:
000754FC 2079 0007 4BD4             		movea.l	(Go_SoundIndex).l,a0
00075502 0407 00A0                  		subi.b	#$A0,d7
00075506 E54F                       		lsl.w	#2,d7
00075508 2670 7000                  		movea.l	(a0,d7.w),a3
0007550C 224B                       		movea.l	a3,a1
0007550E 7200                       		moveq	#0,d1
00075510 3219                       		move.w	(a1)+,d1
00075512 D28B                       		add.l	a3,d1
00075514 1A19                       		move.b	(a1)+,d5
00075516 1E19                       		move.b	(a1)+,d7
00075518 5307                       		subq.b	#1,d7
0007551A 7C30                       		moveq	#$30,d6
0007551C                            
0007551C                            loc_72228:
0007551C 7600                       		moveq	#0,d3
0007551E 1629 0001                  		move.b	1(a1),d3
00075522 1803                       		move.b	d3,d4
00075524 6B00                       		bmi.s	loc_72244
00075526 5543                       		subq.w	#2,d3
00075528 E54B                       		lsl.w	#2,d3
0007552A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007552E 2A75 3000                  		movea.l	(a5,d3.w),a5
00075532 08D5 0002                  		bset	#2,(a5)
00075536 6000                       		bra.s	loc_7226E
00075538                            ; ===========================================================================
00075538                            
00075538                            loc_72244:
00075538 E64B                       		lsr.w	#3,d3
0007553A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007553E 2A75 3000                  		movea.l	(a5,d3.w),a5
00075542 08D5 0002                  		bset	#2,(a5)
00075546 0C04 00C0                  		cmpi.b	#$C0,d4
0007554A 6600                       		bne.s	loc_7226E
0007554C 1004                       		move.b	d4,d0
0007554E 0000 001F                  		ori.b	#$1F,d0
00075552 13C0 00C0 0011             		move.b	d0,($C00011).l
00075558 0840 0005                  		bchg	#5,d0
0007555C 13C0 00C0 0011             		move.b	d0,($C00011).l
00075562                            
00075562                            loc_7226E:
00075562 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075566 244D                       		movea.l	a5,a2
00075568 700B                       		moveq	#$B,d0
0007556A                            
0007556A                            loc_72276:
0007556A 429A                       		clr.l	(a2)+
0007556C 51C8 FFFC                  		dbf	d0,loc_72276
00075570                            
00075570 3A99                       		move.w	(a1)+,(a5)
00075572 1B45 0002                  		move.b	d5,2(a5)
00075576 7000                       		moveq	#0,d0
00075578 3019                       		move.w	(a1)+,d0
0007557A D08B                       		add.l	a3,d0
0007557C 2B40 0004                  		move.l	d0,4(a5)
00075580 3B59 0008                  		move.w	(a1)+,8(a5)
00075584 1B7C 0001 000E             		move.b	#1,$E(a5)
0007558A 1B46 000D                  		move.b	d6,$D(a5)
0007558E 4A04                       		tst.b	d4
00075590 6B00                       		bmi.s	loc_722A8
00075592 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075598 2B41 0020                  		move.l	d1,$20(a5)
0007559C                            
0007559C                            loc_722A8:
0007559C 51CF FF7E                  		dbf	d7,loc_72228
000755A0                            
000755A0 4A2E 0250                  		tst.b	$250(a6)
000755A4 6A00                       		bpl.s	loc_722B8
000755A6 08EE 0002 0340             		bset	#2,$340(a6)
000755AC                            
000755AC                            loc_722B8:
000755AC 4A2E 0310                  		tst.b	$310(a6)
000755B0 6A00                       		bpl.s	locret_722C4
000755B2 08EE 0002 0370             		bset	#2,$370(a6)
000755B8                            
000755B8                            locret_722C4:
000755B8 4E75                       		rts	
000755BA                            ; ===========================================================================
000755BA                            
000755BA                            loc_722C6:
000755BA 4216                       		clr.b	0(a6)
000755BC 4E75                       		rts	
000755BE                            ; ===========================================================================
000755BE 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000755C2 0000 0000                  		dc.l 0
000755C6 00FF F100                  		dc.l $FFF100
000755CA 00FF F130                  		dc.l $FFF130
000755CE 00FF F190                  		dc.l $FFF190
000755D2 00FF F1C0                  		dc.l $FFF1C0
000755D6 00FF F1F0                  		dc.l $FFF1F0
000755DA 00FF F1F0                  		dc.l $FFF1F0
000755DE 00FF F220                  dword_722EC:	dc.l $FFF220
000755E2 0000 0000                  		dc.l 0
000755E6 00FF F250                  		dc.l $FFF250
000755EA 00FF F280                  		dc.l $FFF280
000755EE 00FF F2B0                  		dc.l $FFF2B0
000755F2 00FF F2E0                  		dc.l $FFF2E0
000755F6 00FF F310                  		dc.l $FFF310
000755FA 00FF F310                  		dc.l $FFF310
000755FE                            ; ===========================================================================
000755FE                            ; ---------------------------------------------------------------------------
000755FE                            ; Play GHZ waterfall sound
000755FE                            ; ---------------------------------------------------------------------------
000755FE                            
000755FE                            Sound_D0toDF:				; XREF: Sound_ChkValue
000755FE 4A2E 0027                  		tst.b	$27(a6)
00075602 6600 0000                  		bne.w	locret_723C6
00075606 4A2E 0004                  		tst.b	4(a6)
0007560A 6600 0000                  		bne.w	locret_723C6
0007560E 4A2E 0024                  		tst.b	$24(a6)
00075612 6600 0000                  		bne.w	locret_723C6
00075616 2079 0007 4BCC             		movea.l	(Go_SoundD0).l,a0
0007561C 0407 00D0                  		subi.b	#$D0,d7
00075620 E54F                       		lsl.w	#2,d7
00075622 2670 7000                  		movea.l	(a0,d7.w),a3
00075626 224B                       		movea.l	a3,a1
00075628 7000                       		moveq	#0,d0
0007562A 3019                       		move.w	(a1)+,d0
0007562C D08B                       		add.l	a3,d0
0007562E 2D40 0020                  		move.l	d0,$20(a6)
00075632 1A19                       		move.b	(a1)+,d5
00075634 1E19                       		move.b	(a1)+,d7
00075636 5307                       		subq.b	#1,d7
00075638 7C30                       		moveq	#$30,d6
0007563A                            
0007563A                            loc_72348:
0007563A 1829 0001                  		move.b	1(a1),d4
0007563E 6B00                       		bmi.s	loc_7235A
00075640 08EE 0002 0100             		bset	#2,$100(a6)
00075646 4BEE 0340                  		lea	$340(a6),a5
0007564A 6000                       		bra.s	loc_72364
0007564C                            ; ===========================================================================
0007564C                            
0007564C                            loc_7235A:
0007564C 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075652 4BEE 0370                  		lea	$370(a6),a5
00075656                            
00075656                            loc_72364:
00075656 244D                       		movea.l	a5,a2
00075658 700B                       		moveq	#$B,d0
0007565A                            
0007565A                            loc_72368:
0007565A 429A                       		clr.l	(a2)+
0007565C 51C8 FFFC                  		dbf	d0,loc_72368
00075660                            
00075660 3A99                       		move.w	(a1)+,(a5)
00075662 1B45 0002                  		move.b	d5,2(a5)
00075666 7000                       		moveq	#0,d0
00075668 3019                       		move.w	(a1)+,d0
0007566A D08B                       		add.l	a3,d0
0007566C 2B40 0004                  		move.l	d0,4(a5)
00075670 3B59 0008                  		move.w	(a1)+,8(a5)
00075674 1B7C 0001 000E             		move.b	#1,$E(a5)
0007567A 1B46 000D                  		move.b	d6,$D(a5)
0007567E 4A04                       		tst.b	d4
00075680 6B00                       		bmi.s	loc_72396
00075682 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075688                            
00075688                            loc_72396:
00075688 51CF FFB0                  		dbf	d7,loc_72348
0007568C                            
0007568C 4A2E 0250                  		tst.b	$250(a6)
00075690 6A00                       		bpl.s	loc_723A6
00075692 08EE 0002 0340             		bset	#2,$340(a6)
00075698                            
00075698                            loc_723A6:
00075698 4A2E 0310                  		tst.b	$310(a6)
0007569C 6A00                       		bpl.s	locret_723C6
0007569E 08EE 0002 0370             		bset	#2,$370(a6)
000756A4 0004 001F                  		ori.b	#$1F,d4
000756A8 13C4 00C0 0011             		move.b	d4,($C00011).l
000756AE 0844 0005                  		bchg	#5,d4
000756B2 13C4 00C0 0011             		move.b	d4,($C00011).l
000756B8                            
000756B8                            locret_723C6:
000756B8 4E75                       		rts	
000756BA                            ; End of function Sound_ChkValue
000756BA                            
000756BA                            ; ===========================================================================
000756BA 00FF F100                  		dc.l $FFF100
000756BE 00FF F1F0                  		dc.l $FFF1F0
000756C2 00FF F250                  		dc.l $FFF250
000756C6 00FF F310                  		dc.l $FFF310
000756CA 00FF F340                  		dc.l $FFF340
000756CE 00FF F370                  		dc.l $FFF370
000756D2                            
000756D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756D2                            
000756D2                            
000756D2                            Snd_FadeOut1:				; XREF: Sound_E0
000756D2 4216                       		clr.b	0(a6)
000756D4 4BEE 0220                  		lea	$220(a6),a5
000756D8 7E05                       		moveq	#5,d7
000756DA                            
000756DA                            loc_723EA:
000756DA 4A15                       		tst.b	(a5)
000756DC 6A00 0000                  		bpl.w	loc_72472
000756E0 0895 0007                  		bclr	#7,(a5)
000756E4 7600                       		moveq	#0,d3
000756E6 162D 0001                  		move.b	1(a5),d3
000756EA 6B00                       		bmi.s	loc_7243C
000756EC 4EBA 0000                  		jsr	sub_726FE(pc)
000756F0 0C03 0004                  		cmpi.b	#4,d3
000756F4 6600                       		bne.s	loc_72416
000756F6 4A2E 0340                  		tst.b	$340(a6)
000756FA 6A00                       		bpl.s	loc_72416
000756FC 4BEE 0340                  		lea	$340(a6),a5
00075700 226E 0020                  		movea.l	$20(a6),a1
00075704 6000                       		bra.s	loc_72428
00075706                            ; ===========================================================================
00075706                            
00075706                            loc_72416:
00075706 5503                       		subq.b	#2,d3
00075708 E50B                       		lsl.b	#2,d3
0007570A 41FA FEB2                  		lea	dword_722CC(pc),a0
0007570E 264D                       		movea.l	a5,a3
00075710 2A70 3000                  		movea.l	(a0,d3.w),a5
00075714 226E 0018                  		movea.l	$18(a6),a1
00075718                            
00075718                            loc_72428:
00075718 0895 0002                  		bclr	#2,(a5)
0007571C 08D5 0001                  		bset	#1,(a5)
00075720 102D 000B                  		move.b	$B(a5),d0
00075724 4EBA 0000                  		jsr	sub_72C4E(pc)
00075728 2A4B                       		movea.l	a3,a5
0007572A 6000                       		bra.s	loc_72472
0007572C                            ; ===========================================================================
0007572C                            
0007572C                            loc_7243C:
0007572C 4EBA 0000                  		jsr	sub_729A0(pc)
00075730 41EE 0370                  		lea	$370(a6),a0
00075734 0C03 00E0                  		cmpi.b	#$E0,d3
00075738 6700                       		beq.s	loc_7245A
0007573A 0C03 00C0                  		cmpi.b	#$C0,d3
0007573E 6700                       		beq.s	loc_7245A
00075740 E60B                       		lsr.b	#3,d3
00075742 41FA FE7A                  		lea	dword_722CC(pc),a0
00075746 2070 3000                  		movea.l	(a0,d3.w),a0
0007574A                            
0007574A                            loc_7245A:
0007574A 0890 0002                  		bclr	#2,(a0)
0007574E 08D0 0001                  		bset	#1,(a0)
00075752 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075758 6600                       		bne.s	loc_72472
0007575A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075762                            
00075762                            loc_72472:
00075762 DAFC 0030                  		adda.w	#$30,a5
00075766 51CF FF72                  		dbf	d7,loc_723EA
0007576A                            
0007576A 4E75                       		rts	
0007576C                            ; End of function Snd_FadeOut1
0007576C                            
0007576C                            
0007576C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007576C                            
0007576C                            
0007576C                            Snd_FadeOut2:				; XREF: Sound_E0
0007576C 4BEE 0340                  		lea	$340(a6),a5
00075770 4A15                       		tst.b	(a5)
00075772 6A00                       		bpl.s	loc_724AE
00075774 0895 0007                  		bclr	#7,(a5)
00075778 0815 0002                  		btst	#2,(a5)
0007577C 6600                       		bne.s	loc_724AE
0007577E 4EBA 0000                  		jsr	loc_7270A(pc)
00075782 4BEE 0100                  		lea	$100(a6),a5
00075786 0895 0002                  		bclr	#2,(a5)
0007578A 08D5 0001                  		bset	#1,(a5)
0007578E 4A15                       		tst.b	(a5)
00075790 6A00                       		bpl.s	loc_724AE
00075792 226E 0018                  		movea.l	$18(a6),a1
00075796 102D 000B                  		move.b	$B(a5),d0
0007579A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007579E                            
0007579E                            loc_724AE:
0007579E 4BEE 0370                  		lea	$370(a6),a5
000757A2 4A15                       		tst.b	(a5)
000757A4 6A00                       		bpl.s	locret_724E4
000757A6 0895 0007                  		bclr	#7,(a5)
000757AA 0815 0002                  		btst	#2,(a5)
000757AE 6600                       		bne.s	locret_724E4
000757B0 4EBA 0000                  		jsr	loc_729A6(pc)
000757B4 4BEE 01F0                  		lea	$1F0(a6),a5
000757B8 0895 0002                  		bclr	#2,(a5)
000757BC 08D5 0001                  		bset	#1,(a5)
000757C0 4A15                       		tst.b	(a5)
000757C2 6A00                       		bpl.s	locret_724E4
000757C4 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000757CA 6600                       		bne.s	locret_724E4
000757CC 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000757D4                            
000757D4                            locret_724E4:
000757D4 4E75                       		rts	
000757D6                            ; End of function Snd_FadeOut2
000757D6                            
000757D6                            ; ===========================================================================
000757D6                            ; ---------------------------------------------------------------------------
000757D6                            ; Fade out music
000757D6                            ; ---------------------------------------------------------------------------
000757D6                            
000757D6                            Sound_E0:				; XREF: Sound_ExIndex
000757D6 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000757DA 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000757DE 1D7C 0003 0006             		move.b	#3,6(a6)
000757E4 1D7C 0028 0004             		move.b	#$28,4(a6)
000757EA 422E 0040                  		clr.b	$40(a6)
000757EE 422E 002A                  		clr.b	$2A(a6)
000757F2 4E75                       		rts	
000757F4                            
000757F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000757F4                            
000757F4                            
000757F4                            sub_72504:				; XREF: sub_71B4C
000757F4 102E 0006                  		move.b	6(a6),d0
000757F8 6700                       		beq.s	loc_72510
000757FA 532E 0006                  		subq.b	#1,6(a6)
000757FE 4E75                       		rts	
00075800                            ; ===========================================================================
00075800                            
00075800                            loc_72510:
00075800 532E 0004                  		subq.b	#1,4(a6)
00075804 6700 0000                  		beq.w	Sound_E4
00075808 1D7C 0003 0006             		move.b	#3,6(a6)
0007580E 4BEE 0070                  		lea	$70(a6),a5
00075812 7E05                       		moveq	#5,d7
00075814                            
00075814                            loc_72524:
00075814 4A15                       		tst.b	(a5)
00075816 6A00                       		bpl.s	loc_72538
00075818 522D 0009                  		addq.b	#1,9(a5)
0007581C 6A00                       		bpl.s	loc_72534
0007581E 0895 0007                  		bclr	#7,(a5)
00075822 6000                       		bra.s	loc_72538
00075824                            ; ===========================================================================
00075824                            
00075824                            loc_72534:
00075824 4EBA 0000                  		jsr	sub_72CB4(pc)
00075828                            
00075828                            loc_72538:
00075828 DAFC 0030                  		adda.w	#$30,a5
0007582C 51CF FFE6                  		dbf	d7,loc_72524
00075830                            
00075830 7E02                       		moveq	#2,d7
00075832                            
00075832                            loc_72542:
00075832 4A15                       		tst.b	(a5)
00075834 6A00                       		bpl.s	loc_72560
00075836 522D 0009                  		addq.b	#1,9(a5)
0007583A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075840 6500                       		bcs.s	loc_72558
00075842 0895 0007                  		bclr	#7,(a5)
00075846 6000                       		bra.s	loc_72560
00075848                            ; ===========================================================================
00075848                            
00075848                            loc_72558:
00075848 1C2D 0009                  		move.b	9(a5),d6
0007584C 4EBA 0000                  		jsr	sub_7296A(pc)
00075850                            
00075850                            loc_72560:
00075850 DAFC 0030                  		adda.w	#$30,a5
00075854 51CF FFDC                  		dbf	d7,loc_72542
00075858                            
00075858 4E75                       		rts	
0007585A                            ; End of function sub_72504
0007585A                            
0007585A                            
0007585A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007585A                            
0007585A                            
0007585A                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007585A 7602                       		moveq	#2,d3
0007585C 7028                       		moveq	#$28,d0
0007585E                            
0007585E                            loc_7256E:
0007585E 1203                       		move.b	d3,d1
00075860 4EBA 0000                  		jsr	sub_7272E(pc)
00075864 5801                       		addq.b	#4,d1
00075866 4EBA 0000                  		jsr	sub_7272E(pc)
0007586A 51CB FFF2                  		dbf	d3,loc_7256E
0007586E                            
0007586E 7040                       		moveq	#$40,d0
00075870 727F                       		moveq	#$7F,d1
00075872 7802                       		moveq	#2,d4
00075874                            
00075874                            loc_72584:
00075874 7603                       		moveq	#3,d3
00075876                            
00075876                            loc_72586:
00075876 4EBA 0000                  		jsr	sub_7272E(pc)
0007587A 4EBA 0000                  		jsr	sub_72764(pc)
0007587E 5840                       		addq.w	#4,d0
00075880 51CB FFF4                  		dbf	d3,loc_72586
00075884                            
00075884 0400 000F                  		subi.b	#$F,d0
00075888 51CC FFEA                  		dbf	d4,loc_72584
0007588C                            
0007588C 4E75                       		rts	
0007588E                            ; End of function sub_7256A
0007588E                            
0007588E                            ; ===========================================================================
0007588E                            ; ---------------------------------------------------------------------------
0007588E                            ; Stop music
0007588E                            ; ---------------------------------------------------------------------------
0007588E                            
0007588E                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007588E 702B                       		moveq	#$2B,d0
00075890 123C 0080                  		move.b	#$80,d1
00075894 4EBA 0000                  		jsr	sub_7272E(pc)
00075898 7027                       		moveq	#$27,d0
0007589A 7200                       		moveq	#0,d1
0007589C 4EBA 0000                  		jsr	sub_7272E(pc)
000758A0 204E                       		movea.l	a6,a0
000758A2 303C 00E3                  		move.w	#$E3,d0
000758A6                            
000758A6                            loc_725B6:
000758A6 4298                       		clr.l	(a0)+
000758A8 51C8 FFFC                  		dbf	d0,loc_725B6
000758AC                            
000758AC 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000758B2 4EBA FFA6                  		jsr	sub_7256A(pc)
000758B6 6000 0000                  		bra.w	sub_729B6
000758BA                            
000758BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758BA                            
000758BA                            
000758BA                            sub_725CA:				; XREF: Sound_ChkValue
000758BA 204E                       		movea.l	a6,a0
000758BC 1216                       		move.b	0(a6),d1
000758BE 142E 0027                  		move.b	$27(a6),d2
000758C2 162E 002A                  		move.b	$2A(a6),d3
000758C6 182E 0026                  		move.b	$26(a6),d4
000758CA 3A2E 000A                  		move.w	$A(a6),d5
000758CE 303C 0087                  		move.w	#$87,d0
000758D2                            
000758D2                            loc_725E4:
000758D2 4298                       		clr.l	(a0)+
000758D4 51C8 FFFC                  		dbf	d0,loc_725E4
000758D8                            
000758D8 1C81                       		move.b	d1,0(a6)
000758DA 1D42 0027                  		move.b	d2,$27(a6)
000758DE 1D43 002A                  		move.b	d3,$2A(a6)
000758E2 1D44 0026                  		move.b	d4,$26(a6)
000758E6 3D45 000A                  		move.w	d5,$A(a6)
000758EA 1D7C 0080 0009             		move.b	#$80,9(a6)
000758F0 4EBA FF68                  		jsr	sub_7256A(pc)
000758F4 6000 0000                  		bra.w	sub_729B6
000758F8                            ; End of function sub_725CA
000758F8                            
000758F8                            
000758F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758F8                            
000758F8                            
000758F8                            sub_7260C:				; XREF: sub_71B4C
000758F8 1D6E 0002 0001             		move.b	2(a6),1(a6)
000758FE 41EE 004E                  		lea	$4E(a6),a0
00075902 7030                       		moveq	#$30,d0
00075904 7209                       		moveq	#9,d1
00075906                            
00075906                            loc_7261A:
00075906 5210                       		addq.b	#1,(a0)
00075908 D0C0                       		adda.w	d0,a0
0007590A 51C9 FFFA                  		dbf	d1,loc_7261A
0007590E                            
0007590E 4E75                       		rts	
00075910                            ; End of function sub_7260C
00075910                            
00075910                            ; ===========================================================================
00075910                            ; ---------------------------------------------------------------------------
00075910                            ; Speed	up music
00075910                            ; ---------------------------------------------------------------------------
00075910                            
00075910                            Sound_E2:				; XREF: Sound_ExIndex
00075910 4A2E 0027                  		tst.b	$27(a6)
00075914 6600                       		bne.s	loc_7263E
00075916 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007591C 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00075922 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00075928 4E75                       		rts	
0007592A                            ; ===========================================================================
0007592A                            
0007592A                            loc_7263E:
0007592A 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00075930 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00075936 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007593C 4E75                       		rts	
0007593E                            ; ===========================================================================
0007593E                            ; ---------------------------------------------------------------------------
0007593E                            ; Change music back to normal speed
0007593E                            ; ---------------------------------------------------------------------------
0007593E                            
0007593E                            Sound_E3:				; XREF: Sound_ExIndex
0007593E 4A2E 0027                  		tst.b	$27(a6)
00075942 6600                       		bne.s	loc_7266A
00075944 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007594A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00075950 422E 002A                  		clr.b	$2A(a6)
00075954 4E75                       		rts	
00075956                            ; ===========================================================================
00075956                            
00075956                            loc_7266A:
00075956 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007595C 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00075962 422E 03CA                  		clr.b	$3CA(a6)
00075966 4E75                       		rts	
00075968                            
00075968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075968                            
00075968                            
00075968                            sub_7267C:				; XREF: sub_71B4C
00075968 4A2E 0025                  		tst.b	$25(a6)
0007596C 6700                       		beq.s	loc_72688
0007596E 532E 0025                  		subq.b	#1,$25(a6)
00075972 4E75                       		rts	
00075974                            ; ===========================================================================
00075974                            
00075974                            loc_72688:
00075974 4A2E 0026                  		tst.b	$26(a6)
00075978 6700                       		beq.s	loc_726D6
0007597A 532E 0026                  		subq.b	#1,$26(a6)
0007597E 1D7C 0002 0025             		move.b	#2,$25(a6)
00075984 4BEE 0070                  		lea	$70(a6),a5
00075988 7E05                       		moveq	#5,d7
0007598A                            
0007598A                            loc_7269E:
0007598A 4A15                       		tst.b	(a5)
0007598C 6A00                       		bpl.s	loc_726AA
0007598E 532D 0009                  		subq.b	#1,9(a5)
00075992 4EBA 0000                  		jsr	sub_72CB4(pc)
00075996                            
00075996                            loc_726AA:
00075996 DAFC 0030                  		adda.w	#$30,a5
0007599A 51CF FFEE                  		dbf	d7,loc_7269E
0007599E 7E02                       		moveq	#2,d7
000759A0                            
000759A0                            loc_726B4:
000759A0 4A15                       		tst.b	(a5)
000759A2 6A00                       		bpl.s	loc_726CC
000759A4 532D 0009                  		subq.b	#1,9(a5)
000759A8 1C2D 0009                  		move.b	9(a5),d6
000759AC 0C06 0010                  		cmpi.b	#$10,d6
000759B0 6500                       		bcs.s	loc_726C8
000759B2 7C0F                       		moveq	#$F,d6
000759B4                            
000759B4                            loc_726C8:
000759B4 4EBA 0000                  		jsr	sub_7296A(pc)
000759B8                            
000759B8                            loc_726CC:
000759B8 DAFC 0030                  		adda.w	#$30,a5
000759BC 51CF FFE2                  		dbf	d7,loc_726B4
000759C0 4E75                       		rts	
000759C2                            ; ===========================================================================
000759C2                            
000759C2                            loc_726D6:
000759C2 08AE 0002 0040             		bclr	#2,$40(a6)
000759C8 422E 0024                  		clr.b	$24(a6)
000759CC 4E75                       		rts	
000759CE                            ; End of function sub_7267C
000759CE                            
000759CE                            ; ===========================================================================
000759CE                            
000759CE                            loc_726E2:				; XREF: sub_71CCA
000759CE 0815 0001                  		btst	#1,(a5)
000759D2 6600                       		bne.s	locret_726FC
000759D4 0815 0002                  		btst	#2,(a5)
000759D8 6600                       		bne.s	locret_726FC
000759DA 7028                       		moveq	#$28,d0
000759DC 122D 0001                  		move.b	1(a5),d1
000759E0 0001 00F0                  		ori.b	#-$10,d1
000759E4 6000 0000                  		bra.w	sub_7272E
000759E8                            ; ===========================================================================
000759E8                            
000759E8                            locret_726FC:
000759E8 4E75                       		rts	
000759EA                            
000759EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759EA                            
000759EA                            
000759EA                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000759EA 0815 0004                  		btst	#4,(a5)
000759EE 6600                       		bne.s	locret_72714
000759F0 0815 0002                  		btst	#2,(a5)
000759F4 6600                       		bne.s	locret_72714
000759F6                            
000759F6                            loc_7270A:				; XREF: Snd_FadeOut2
000759F6 7028                       		moveq	#$28,d0
000759F8 122D 0001                  		move.b	1(a5),d1
000759FC 6000 0000                  		bra.w	sub_7272E
00075A00                            ; ===========================================================================
00075A00                            
00075A00                            locret_72714:
00075A00 4E75                       		rts	
00075A02                            ; End of function sub_726FE
00075A02                            
00075A02                            ; ===========================================================================
00075A02                            
00075A02                            loc_72716:				; XREF: sub_72A5A
00075A02 0815 0002                  		btst	#2,(a5)
00075A06 6600                       		bne.s	locret_72720
00075A08 6000 0000                  		bra.w	sub_72722
00075A0C                            ; ===========================================================================
00075A0C                            
00075A0C                            locret_72720:
00075A0C 4E75                       		rts	
00075A0E                            
00075A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A0E                            
00075A0E                            
00075A0E                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
00075A0E 082D 0002 0001             		btst	#2,1(a5)
00075A14 6600                       		bne.s	loc_7275A
00075A16 D02D 0001                  		add.b	1(a5),d0
00075A1A                            ; End of function sub_72722
00075A1A                            
00075A1A                            
00075A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A1A                            
00075A1A                            
00075A1A                            sub_7272E:				; XREF: loc_71E6A
00075A1A 1439 00A0 4000             		move.b	($A04000).l,d2
00075A20 0802 0007                  		btst	#7,d2
00075A24 66F4                       		bne.s	sub_7272E
00075A26 13C0 00A0 4000             		move.b	d0,($A04000).l
00075A2C 4E71                       		nop	
00075A2E 4E71                       		nop	
00075A30 4E71                       		nop	
00075A32                            
00075A32                            loc_72746:
00075A32 1439 00A0 4000             		move.b	($A04000).l,d2
00075A38 0802 0007                  		btst	#7,d2
00075A3C 66F4                       		bne.s	loc_72746
00075A3E                            
00075A3E 13C1 00A0 4001             		move.b	d1,($A04001).l
00075A44 4E75                       		rts	
00075A46                            ; End of function sub_7272E
00075A46                            
00075A46                            ; ===========================================================================
00075A46                            
00075A46                            loc_7275A:				; XREF: sub_72722
00075A46 142D 0001                  		move.b	1(a5),d2
00075A4A 0882 0002                  		bclr	#2,d2
00075A4E D002                       		add.b	d2,d0
00075A50                            
00075A50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A50                            
00075A50                            
00075A50                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00075A50 1439 00A0 4000             		move.b	($A04000).l,d2
00075A56 0802 0007                  		btst	#7,d2
00075A5A 66F4                       		bne.s	sub_72764
00075A5C 13C0 00A0 4002             		move.b	d0,($A04002).l
00075A62 4E71                       		nop	
00075A64 4E71                       		nop	
00075A66 4E71                       		nop	
00075A68                            
00075A68                            loc_7277C:
00075A68 1439 00A0 4000             		move.b	($A04000).l,d2
00075A6E 0802 0007                  		btst	#7,d2
00075A72 66F4                       		bne.s	loc_7277C
00075A74                            
00075A74 13C1 00A0 4003             		move.b	d1,($A04003).l
00075A7A 4E75                       		rts	
00075A7C                            ; End of function sub_72764
00075A7C                            
00075A7C                            ; ===========================================================================
00075A7C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00075A8E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00075AA0 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00075AB0 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00075AC0 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
00075AD0 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
00075AE0 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
00075AF0 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
00075B00 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00075B10 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00075B20 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00075B30 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00075B3C                            
00075B3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B3C                            
00075B3C                            
00075B3C                            sub_72850:				; XREF: sub_71B4C
00075B3C 532D 000E                  		subq.b	#1,$E(a5)
00075B40 6600                       		bne.s	loc_72866
00075B42 0895 0004                  		bclr	#4,(a5)
00075B46 4EBA 0000                  		jsr	sub_72878(pc)
00075B4A 4EBA 0000                  		jsr	sub_728DC(pc)
00075B4E 6000 0000                  		bra.w	loc_7292E
00075B52                            ; ===========================================================================
00075B52                            
00075B52                            loc_72866:
00075B52 4EBA F4B2                  		jsr	sub_71D9E(pc)
00075B56 4EBA 0000                  		jsr	sub_72926(pc)
00075B5A 4EBA F4D2                  		jsr	sub_71DC6(pc)
00075B5E 4EBA 0000                  		jsr	sub_728E2(pc)
00075B62 4E75                       		rts	
00075B64                            ; End of function sub_72850
00075B64                            
00075B64                            
00075B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B64                            
00075B64                            
00075B64                            sub_72878:				; XREF: sub_72850
00075B64 0895 0001                  		bclr	#1,(a5)
00075B68 286D 0004                  		movea.l	4(a5),a4
00075B6C                            
00075B6C                            loc_72880:
00075B6C 7A00                       		moveq	#0,d5
00075B6E 1A1C                       		move.b	(a4)+,d5
00075B70 0C05 00E0                  		cmpi.b	#$E0,d5
00075B74 6500                       		bcs.s	loc_72890
00075B76 4EBA 0000                  		jsr	sub_72A5A(pc)
00075B7A 60F0                       		bra.s	loc_72880
00075B7C                            ; ===========================================================================
00075B7C                            
00075B7C                            loc_72890:
00075B7C 4A05                       		tst.b	d5
00075B7E 6A00                       		bpl.s	loc_728A4
00075B80 4EBA 0000                  		jsr	sub_728AC(pc)
00075B84 1A1C                       		move.b	(a4)+,d5
00075B86 4A05                       		tst.b	d5
00075B88 6A00                       		bpl.s	loc_728A4
00075B8A 534C                       		subq.w	#1,a4
00075B8C 6000 F43A                  		bra.w	sub_71D60
00075B90                            ; ===========================================================================
00075B90                            
00075B90                            loc_728A4:
00075B90 4EBA F416                  		jsr	sub_71D40(pc)
00075B94 6000 F432                  		bra.w	sub_71D60
00075B98                            ; End of function sub_72878
00075B98                            
00075B98                            
00075B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075B98                            
00075B98                            
00075B98                            sub_728AC:				; XREF: sub_72878
00075B98 0405 0081                  		subi.b	#$81,d5
00075B9C 6500                       		bcs.s	loc_728CA
00075B9E DA2D 0008                  		add.b	8(a5),d5
00075BA2 0245 007F                  		andi.w	#$7F,d5
00075BA6 E34D                       		lsl.w	#1,d5
00075BA8 41FA 0000                  		lea	word_729CE(pc),a0
00075BAC 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00075BB2 6000 F414                  		bra.w	sub_71D60
00075BB6                            ; ===========================================================================
00075BB6                            
00075BB6                            loc_728CA:
00075BB6 08D5 0001                  		bset	#1,(a5)
00075BBA 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00075BC0 4EBA F406                  		jsr	sub_71D60(pc)
00075BC4 6000 0000                  		bra.w	sub_729A0
00075BC8                            ; End of function sub_728AC
00075BC8                            
00075BC8                            
00075BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BC8                            
00075BC8                            
00075BC8                            sub_728DC:				; XREF: sub_72850
00075BC8 3C2D 0010                  		move.w	$10(a5),d6
00075BCC 6B00                       		bmi.s	loc_72920
00075BCE                            ; End of function sub_728DC
00075BCE                            
00075BCE                            
00075BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BCE                            
00075BCE                            
00075BCE                            sub_728E2:				; XREF: sub_72850
00075BCE 102D 001E                  		move.b	$1E(a5),d0
00075BD2 4880                       		ext.w	d0
00075BD4 DC40                       		add.w	d0,d6
00075BD6 0815 0002                  		btst	#2,(a5)
00075BDA 6600                       		bne.s	locret_7291E
00075BDC 0815 0001                  		btst	#1,(a5)
00075BE0 6600                       		bne.s	locret_7291E
00075BE2 102D 0001                  		move.b	1(a5),d0
00075BE6 0C00 00E0                  		cmpi.b	#$E0,d0
00075BEA 6600                       		bne.s	loc_72904
00075BEC 103C 00C0                  		move.b	#$C0,d0
00075BF0                            
00075BF0                            loc_72904:
00075BF0 3206                       		move.w	d6,d1
00075BF2 0201 000F                  		andi.b	#$F,d1
00075BF6 8001                       		or.b	d1,d0
00075BF8 E84E                       		lsr.w	#4,d6
00075BFA 0206 003F                  		andi.b	#$3F,d6
00075BFE 13C0 00C0 0011             		move.b	d0,($C00011).l
00075C04 13C6 00C0 0011             		move.b	d6,($C00011).l
00075C0A                            
00075C0A                            locret_7291E:
00075C0A 4E75                       		rts	
00075C0C                            ; End of function sub_728E2
00075C0C                            
00075C0C                            ; ===========================================================================
00075C0C                            
00075C0C                            loc_72920:				; XREF: sub_728DC
00075C0C 08D5 0001                  		bset	#1,(a5)
00075C10 4E75                       		rts	
00075C12                            
00075C12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C12                            
00075C12                            
00075C12                            sub_72926:				; XREF: sub_72850
00075C12 4A2D 000B                  		tst.b	$B(a5)
00075C16 6700 0000                  		beq.w	locret_7298A
00075C1A                            
00075C1A                            loc_7292E:				; XREF: sub_72850
00075C1A 1C2D 0009                  		move.b	9(a5),d6
00075C1E 7000                       		moveq	#0,d0
00075C20 102D 000B                  		move.b	$B(a5),d0
00075C24 6700                       		beq.s	sub_7296A
00075C26 2079 0007 4BDC             		movea.l	(Go_PSGIndex).l,a0
00075C2C 5340                       		subq.w	#1,d0
00075C2E E548                       		lsl.w	#2,d0
00075C30 2070 0000                  		movea.l	(a0,d0.w),a0
00075C34 102D 000C                  		move.b	$C(a5),d0
00075C38 1030 0000                  		move.b	(a0,d0.w),d0
00075C3C 522D 000C                  		addq.b	#1,$C(a5)
00075C40 0800 0007                  		btst	#7,d0
00075C44 6700                       		beq.s	loc_72960
00075C46 0C00 0080                  		cmpi.b	#$80,d0
00075C4A 6700                       		beq.s	loc_7299A
00075C4C                            
00075C4C                            loc_72960:
00075C4C DC40                       		add.w	d0,d6
00075C4E 0C06 0010                  		cmpi.b	#$10,d6
00075C52 6500                       		bcs.s	sub_7296A
00075C54 7C0F                       		moveq	#$F,d6
00075C56                            ; End of function sub_72926
00075C56                            
00075C56                            
00075C56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C56                            
00075C56                            
00075C56                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00075C56 0815 0001                  		btst	#1,(a5)
00075C5A 6600                       		bne.s	locret_7298A
00075C5C 0815 0002                  		btst	#2,(a5)
00075C60 6600                       		bne.s	locret_7298A
00075C62 0815 0004                  		btst	#4,(a5)
00075C66 6600                       		bne.s	loc_7298C
00075C68                            
00075C68                            loc_7297C:
00075C68 8C2D 0001                  		or.b	1(a5),d6
00075C6C 0606 0010                  		addi.b	#$10,d6
00075C70 13C6 00C0 0011             		move.b	d6,($C00011).l
00075C76                            
00075C76                            locret_7298A:
00075C76 4E75                       		rts	
00075C78                            ; ===========================================================================
00075C78                            
00075C78                            loc_7298C:
00075C78 4A2D 0013                  		tst.b	$13(a5)
00075C7C 67EA                       		beq.s	loc_7297C
00075C7E 4A2D 0012                  		tst.b	$12(a5)
00075C82 66E4                       		bne.s	loc_7297C
00075C84 4E75                       		rts	
00075C86                            ; End of function sub_7296A
00075C86                            
00075C86                            ; ===========================================================================
00075C86                            
00075C86                            loc_7299A:				; XREF: sub_72926
00075C86 532D 000C                  		subq.b	#1,$C(a5)
00075C8A 4E75                       		rts	
00075C8C                            
00075C8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C8C                            
00075C8C                            
00075C8C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00075C8C 0815 0002                  		btst	#2,(a5)
00075C90 6600                       		bne.s	locret_729B4
00075C92                            
00075C92                            loc_729A6:				; XREF: Snd_FadeOut2
00075C92 102D 0001                  		move.b	1(a5),d0
00075C96 0000 001F                  		ori.b	#$1F,d0
00075C9A 13C0 00C0 0011             		move.b	d0,($C00011).l
00075CA0                            
00075CA0                            locret_729B4:
00075CA0 4E75                       		rts	
00075CA2                            ; End of function sub_729A0
00075CA2                            
00075CA2                            
00075CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075CA2                            
00075CA2                            
00075CA2                            sub_729B6:				; XREF: loc_71E7C
00075CA2 41F9 00C0 0011             		lea	($C00011).l,a0
00075CA8 10BC 009F                  		move.b	#$9F,(a0)
00075CAC 10BC 00BF                  		move.b	#$BF,(a0)
00075CB0 10BC 00DF                  		move.b	#$DF,(a0)
00075CB4 10BC 00FF                  		move.b	#$FF,(a0)
00075CB8 4E75                       		rts	
00075CBA                            ; End of function sub_729B6
00075CBA                            
00075CBA                            ; ===========================================================================
00075CBA 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00075CCC 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
00075CDE 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00075CF2 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00075D06 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00075D1A 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00075D2E 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00075D42 0011 0000                  		dc.w $11, 0
00075D46                            
00075D46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075D46                            
00075D46                            
00075D46                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075D46 0445 00E0                  		subi.w	#$E0,d5
00075D4A E54D                       		lsl.w	#2,d5
00075D4C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00075D50                            ; End of function sub_72A5A
00075D50                            
00075D50                            ; ===========================================================================
00075D50                            
00075D50                            loc_72A64:
00075D50 6000 0000                  		bra.w	loc_72ACC
00075D54                            ; ===========================================================================
00075D54 6000 0000                  		bra.w	loc_72AEC
00075D58                            ; ===========================================================================
00075D58 6000 0000                  		bra.w	loc_72AF2
00075D5C                            ; ===========================================================================
00075D5C 6000 0000                  		bra.w	loc_72AF8
00075D60                            ; ===========================================================================
00075D60 6000 0000                  		bra.w	loc_72B14
00075D64                            ; ===========================================================================
00075D64 6000 0000                  		bra.w	loc_72B9E
00075D68                            ; ===========================================================================
00075D68 6000 0000                  		bra.w	loc_72BA4
00075D6C                            ; ===========================================================================
00075D6C 6000 0000                  		bra.w	loc_72BAE
00075D70                            ; ===========================================================================
00075D70 6000 0000                  		bra.w	loc_72BB4
00075D74                            ; ===========================================================================
00075D74 6000 0000                  		bra.w	loc_72BBE
00075D78                            ; ===========================================================================
00075D78 6000 0000                  		bra.w	loc_72BC6
00075D7C                            ; ===========================================================================
00075D7C 6000 0000                  		bra.w	loc_72BD0
00075D80                            ; ===========================================================================
00075D80 6000 0000                  		bra.w	loc_72BE6
00075D84                            ; ===========================================================================
00075D84 6000 0000                  		bra.w	loc_72BEE
00075D88                            ; ===========================================================================
00075D88 6000 0000                  		bra.w	loc_72BF4
00075D8C                            ; ===========================================================================
00075D8C 6000 0000                  		bra.w	loc_72C26
00075D90                            ; ===========================================================================
00075D90 6000 0000                  		bra.w	loc_72D30
00075D94                            ; ===========================================================================
00075D94 6000 0000                  		bra.w	loc_72D52
00075D98                            ; ===========================================================================
00075D98 6000 0000                  		bra.w	loc_72D58
00075D9C                            ; ===========================================================================
00075D9C 6000 0000                  		bra.w	loc_72E06
00075DA0                            ; ===========================================================================
00075DA0 6000 0000                  		bra.w	loc_72E20
00075DA4                            ; ===========================================================================
00075DA4 6000 0000                  		bra.w	loc_72E26
00075DA8                            ; ===========================================================================
00075DA8 6000 0000                  		bra.w	loc_72E2C
00075DAC                            ; ===========================================================================
00075DAC 6000 0000                  		bra.w	loc_72E38
00075DB0                            ; ===========================================================================
00075DB0 6000 0000                  		bra.w	loc_72E52
00075DB4                            ; ===========================================================================
00075DB4 6000 0000                  		bra.w	loc_72E64
00075DB8                            ; ===========================================================================
00075DB8                            
00075DB8                            loc_72ACC:				; XREF: loc_72A64
00075DB8 121C                       		move.b	(a4)+,d1
00075DBA 4A2D 0001                  		tst.b	1(a5)
00075DBE 6B00                       		bmi.s	locret_72AEA
00075DC0 102D 000A                  		move.b	$A(a5),d0
00075DC4 0200 0037                  		andi.b	#$37,d0
00075DC8 8200                       		or.b	d0,d1
00075DCA 1B41 000A                  		move.b	d1,$A(a5)
00075DCE 103C 00B4                  		move.b	#$B4,d0
00075DD2 6000 FC2E                  		bra.w	loc_72716
00075DD6                            ; ===========================================================================
00075DD6                            
00075DD6                            locret_72AEA:
00075DD6 4E75                       		rts	
00075DD8                            ; ===========================================================================
00075DD8                            
00075DD8                            loc_72AEC:				; XREF: loc_72A64
00075DD8 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00075DDC 4E75                       		rts	
00075DDE                            ; ===========================================================================
00075DDE                            
00075DDE                            loc_72AF2:				; XREF: loc_72A64
00075DDE 1D5C 0007                  		move.b	(a4)+,7(a6)
00075DE2 4E75                       		rts	
00075DE4                            ; ===========================================================================
00075DE4                            
00075DE4                            loc_72AF8:				; XREF: loc_72A64
00075DE4 7000                       		moveq	#0,d0
00075DE6 102D 000D                  		move.b	$D(a5),d0
00075DEA 2875 0000                  		movea.l	(a5,d0.w),a4
00075DEE 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00075DF6 544C                       		addq.w	#2,a4
00075DF8 5800                       		addq.b	#4,d0
00075DFA 1B40 000D                  		move.b	d0,$D(a5)
00075DFE 4E75                       		rts	
00075E00                            ; ===========================================================================
00075E00                            
00075E00                            loc_72B14:				; XREF: loc_72A64
00075E00 204E                       		movea.l	a6,a0
00075E02 43EE 03A0                  		lea	$3A0(a6),a1
00075E06 303C 0087                  		move.w	#$87,d0
00075E0A                            
00075E0A                            loc_72B1E:
00075E0A 20D9                       		move.l	(a1)+,(a0)+
00075E0C 51C8 FFFC                  		dbf	d0,loc_72B1E
00075E10                            
00075E10 08EE 0002 0040             		bset	#2,$40(a6)
00075E16 264D                       		movea.l	a5,a3
00075E18 1C3C 0028                  		move.b	#$28,d6
00075E1C 9C2E 0026                  		sub.b	$26(a6),d6
00075E20 7E05                       		moveq	#5,d7
00075E22 4BEE 0070                  		lea	$70(a6),a5
00075E26                            
00075E26                            loc_72B3A:
00075E26 0815 0007                  		btst	#7,(a5)
00075E2A 6700                       		beq.s	loc_72B5C
00075E2C 08D5 0001                  		bset	#1,(a5)
00075E30 DD2D 0009                  		add.b	d6,9(a5)
00075E34 0815 0002                  		btst	#2,(a5)
00075E38 6600                       		bne.s	loc_72B5C
00075E3A 7000                       		moveq	#0,d0
00075E3C 102D 000B                  		move.b	$B(a5),d0
00075E40 226E 0018                  		movea.l	$18(a6),a1
00075E44 4EBA 0000                  		jsr	sub_72C4E(pc)
00075E48                            
00075E48                            loc_72B5C:
00075E48 DAFC 0030                  		adda.w	#$30,a5
00075E4C 51CF FFD8                  		dbf	d7,loc_72B3A
00075E50                            
00075E50 7E02                       		moveq	#2,d7
00075E52                            
00075E52                            loc_72B66:
00075E52 0815 0007                  		btst	#7,(a5)
00075E56 6700                       		beq.s	loc_72B78
00075E58 08D5 0001                  		bset	#1,(a5)
00075E5C 4EBA FE2E                  		jsr	sub_729A0(pc)
00075E60 DD2D 0009                  		add.b	d6,9(a5)
00075E64                            
00075E64                            loc_72B78:
00075E64 DAFC 0030                  		adda.w	#$30,a5
00075E68 51CF FFE8                  		dbf	d7,loc_72B66
00075E6C 2A4B                       		movea.l	a3,a5
00075E6E 1D7C 0080 0024             		move.b	#$80,$24(a6)
00075E74 1D7C 0028 0026             		move.b	#$28,$26(a6)
00075E7A 422E 0027                  		clr.b	$27(a6)
00075E7E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00075E86 504F                       		addq.w	#8,sp
00075E88 4E75                       		rts	
00075E8A                            ; ===========================================================================
00075E8A                            
00075E8A                            loc_72B9E:				; XREF: loc_72A64
00075E8A 1B5C 0002                  		move.b	(a4)+,2(a5)
00075E8E 4E75                       		rts	
00075E90                            ; ===========================================================================
00075E90                            
00075E90                            loc_72BA4:				; XREF: loc_72A64
00075E90 101C                       		move.b	(a4)+,d0
00075E92 D12D 0009                  		add.b	d0,9(a5)
00075E96 6000 0000                  		bra.w	sub_72CB4
00075E9A                            ; ===========================================================================
00075E9A                            
00075E9A                            loc_72BAE:				; XREF: loc_72A64
00075E9A 08D5 0004                  		bset	#4,(a5)
00075E9E 4E75                       		rts	
00075EA0                            ; ===========================================================================
00075EA0                            
00075EA0                            loc_72BB4:				; XREF: loc_72A64
00075EA0 1B54 0012                  		move.b	(a4),$12(a5)
00075EA4 1B5C 0013                  		move.b	(a4)+,$13(a5)
00075EA8 4E75                       		rts	
00075EAA                            ; ===========================================================================
00075EAA                            
00075EAA                            loc_72BBE:				; XREF: loc_72A64
00075EAA 101C                       		move.b	(a4)+,d0
00075EAC D12D 0008                  		add.b	d0,8(a5)
00075EB0 4E75                       		rts	
00075EB2                            ; ===========================================================================
00075EB2                            
00075EB2                            loc_72BC6:				; XREF: loc_72A64
00075EB2 1D54 0002                  		move.b	(a4),2(a6)
00075EB6 1D5C 0001                  		move.b	(a4)+,1(a6)
00075EBA 4E75                       		rts	
00075EBC                            ; ===========================================================================
00075EBC                            
00075EBC                            loc_72BD0:				; XREF: loc_72A64
00075EBC 41EE 0040                  		lea	$40(a6),a0
00075EC0 101C                       		move.b	(a4)+,d0
00075EC2 7230                       		moveq	#$30,d1
00075EC4 7409                       		moveq	#9,d2
00075EC6                            
00075EC6                            loc_72BDA:
00075EC6 1140 0002                  		move.b	d0,2(a0)
00075ECA D0C1                       		adda.w	d1,a0
00075ECC 51CA FFF8                  		dbf	d2,loc_72BDA
00075ED0                            
00075ED0 4E75                       		rts	
00075ED2                            ; ===========================================================================
00075ED2                            
00075ED2                            loc_72BE6:				; XREF: loc_72A64
00075ED2 101C                       		move.b	(a4)+,d0
00075ED4 D12D 0009                  		add.b	d0,9(a5)
00075ED8 4E75                       		rts	
00075EDA                            ; ===========================================================================
00075EDA                            
00075EDA                            loc_72BEE:				; XREF: loc_72A64
00075EDA 422E 002C                  		clr.b	$2C(a6)
00075EDE 4E75                       		rts	
00075EE0                            ; ===========================================================================
00075EE0                            
00075EE0                            loc_72BF4:				; XREF: loc_72A64
00075EE0 0895 0007                  		bclr	#7,(a5)
00075EE4 0895 0004                  		bclr	#4,(a5)
00075EE8 4EBA FB00                  		jsr	sub_726FE(pc)
00075EEC 4A2E 0250                  		tst.b	$250(a6)
00075EF0 6B00                       		bmi.s	loc_72C22
00075EF2 264D                       		movea.l	a5,a3
00075EF4 4BEE 0100                  		lea	$100(a6),a5
00075EF8 226E 0018                  		movea.l	$18(a6),a1
00075EFC 0895 0002                  		bclr	#2,(a5)
00075F00 08D5 0001                  		bset	#1,(a5)
00075F04 102D 000B                  		move.b	$B(a5),d0
00075F08 4EBA 0000                  		jsr	sub_72C4E(pc)
00075F0C 2A4B                       		movea.l	a3,a5
00075F0E                            
00075F0E                            loc_72C22:
00075F0E 504F                       		addq.w	#8,sp
00075F10 4E75                       		rts	
00075F12                            ; ===========================================================================
00075F12                            
00075F12                            loc_72C26:				; XREF: loc_72A64
00075F12 7000                       		moveq	#0,d0
00075F14 101C                       		move.b	(a4)+,d0
00075F16 1B40 000B                  		move.b	d0,$B(a5)
00075F1A 0815 0002                  		btst	#2,(a5)
00075F1E 6600 0000                  		bne.w	locret_72CAA
00075F22 226E 0018                  		movea.l	$18(a6),a1
00075F26 4A2E 000E                  		tst.b	$E(a6)
00075F2A 6700                       		beq.s	sub_72C4E
00075F2C 226D 0020                  		movea.l	$20(a5),a1
00075F30 4A2E 000E                  		tst.b	$E(a6)
00075F34 6B00                       		bmi.s	sub_72C4E
00075F36 226E 0020                  		movea.l	$20(a6),a1
00075F3A                            
00075F3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F3A                            
00075F3A                            
00075F3A                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00075F3A 5340                       		subq.w	#1,d0
00075F3C 6B00                       		bmi.s	loc_72C5C
00075F3E 323C 0019                  		move.w	#$19,d1
00075F42                            
00075F42                            loc_72C56:
00075F42 D2C1                       		adda.w	d1,a1
00075F44 51C8 FFFC                  		dbf	d0,loc_72C56
00075F48                            
00075F48                            loc_72C5C:
00075F48 1219                       		move.b	(a1)+,d1
00075F4A 1B41 001F                  		move.b	d1,$1F(a5)
00075F4E 1801                       		move.b	d1,d4
00075F50 103C 00B0                  		move.b	#$B0,d0
00075F54 4EBA FAB8                  		jsr	sub_72722(pc)
00075F58 45FA 0000                  		lea	byte_72D18(pc),a2
00075F5C 7613                       		moveq	#$13,d3
00075F5E                            
00075F5E                            loc_72C72:
00075F5E 101A                       		move.b	(a2)+,d0
00075F60 1219                       		move.b	(a1)+,d1
00075F62 4EBA FAAA                  		jsr	sub_72722(pc)
00075F66 51CB FFF6                  		dbf	d3,loc_72C72
00075F6A 7A03                       		moveq	#3,d5
00075F6C 0244 0007                  		andi.w	#7,d4
00075F70 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00075F74 162D 0009                  		move.b	9(a5),d3
00075F78                            
00075F78                            loc_72C8C:
00075F78 101A                       		move.b	(a2)+,d0
00075F7A 1219                       		move.b	(a1)+,d1
00075F7C E20C                       		lsr.b	#1,d4
00075F7E 6400                       		bcc.s	loc_72C96
00075F80 D203                       		add.b	d3,d1
00075F82                            
00075F82                            loc_72C96:
00075F82 4EBA FA8A                  		jsr	sub_72722(pc)
00075F86 51CD FFF0                  		dbf	d5,loc_72C8C
00075F8A 103C 00B4                  		move.b	#$B4,d0
00075F8E 122D 000A                  		move.b	$A(a5),d1
00075F92 4EBA FA7A                  		jsr	sub_72722(pc)
00075F96                            
00075F96                            locret_72CAA:
00075F96 4E75                       		rts	
00075F98                            ; End of function sub_72C4E
00075F98                            
00075F98                            ; ===========================================================================
00075F98 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00075FA0                            
00075FA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075FA0                            
00075FA0                            
00075FA0                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00075FA0 0815 0002                  		btst	#2,(a5)
00075FA4 6600                       		bne.s	locret_72D16
00075FA6 7000                       		moveq	#0,d0
00075FA8 102D 000B                  		move.b	$B(a5),d0
00075FAC 226E 0018                  		movea.l	$18(a6),a1
00075FB0 4A2E 000E                  		tst.b	$E(a6)
00075FB4 6700                       		beq.s	loc_72CD8
00075FB6 226E 0020                  		movea.l	$20(a6),a1
00075FBA 4A2E 000E                  		tst.b	$E(a6)
00075FBE 6B00                       		bmi.s	loc_72CD8
00075FC0 226E 0020                  		movea.l	$20(a6),a1
00075FC4                            
00075FC4                            loc_72CD8:
00075FC4 5340                       		subq.w	#1,d0
00075FC6 6B00                       		bmi.s	loc_72CE6
00075FC8 323C 0019                  		move.w	#$19,d1
00075FCC                            
00075FCC                            loc_72CE0:
00075FCC D2C1                       		adda.w	d1,a1
00075FCE 51C8 FFFC                  		dbf	d0,loc_72CE0
00075FD2                            
00075FD2                            loc_72CE6:
00075FD2 D2FC 0015                  		adda.w	#$15,a1
00075FD6 45FA 0000                  		lea	byte_72D2C(pc),a2
00075FDA 102D 001F                  		move.b	$1F(a5),d0
00075FDE 0240 0007                  		andi.w	#7,d0
00075FE2 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00075FE6 162D 0009                  		move.b	9(a5),d3
00075FEA 6B00                       		bmi.s	locret_72D16
00075FEC 7A03                       		moveq	#3,d5
00075FEE                            
00075FEE                            loc_72D02:
00075FEE 101A                       		move.b	(a2)+,d0
00075FF0 1219                       		move.b	(a1)+,d1
00075FF2 E20C                       		lsr.b	#1,d4
00075FF4 6400                       		bcc.s	loc_72D12
00075FF6 D203                       		add.b	d3,d1
00075FF8 6500                       		bcs.s	loc_72D12
00075FFA 4EBA FA12                  		jsr	sub_72722(pc)
00075FFE                            
00075FFE                            loc_72D12:
00075FFE 51CD FFEE                  		dbf	d5,loc_72D02
00076002                            
00076002                            locret_72D16:
00076002 4E75                       		rts	
00076004                            ; End of function sub_72CB4
00076004                            
00076004                            ; ===========================================================================
00076004 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007600E 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076018 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007601C                            ; ===========================================================================
0007601C                            
0007601C                            loc_72D30:				; XREF: loc_72A64
0007601C 08D5 0003                  		bset	#3,(a5)
00076020 2B4C 0014                  		move.l	a4,$14(a5)
00076024 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076028 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007602C 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00076030 101C                       		move.b	(a4)+,d0
00076032 E208                       		lsr.b	#1,d0
00076034 1B40 001B                  		move.b	d0,$1B(a5)
00076038 426D 001C                  		clr.w	$1C(a5)
0007603C 4E75                       		rts	
0007603E                            ; ===========================================================================
0007603E                            
0007603E                            loc_72D52:				; XREF: loc_72A64
0007603E 08D5 0003                  		bset	#3,(a5)
00076042 4E75                       		rts	
00076044                            ; ===========================================================================
00076044                            
00076044                            loc_72D58:				; XREF: loc_72A64
00076044 0895 0007                  		bclr	#7,(a5)
00076048 0895 0004                  		bclr	#4,(a5)
0007604C 4A2D 0001                  		tst.b	1(a5)
00076050 6B00                       		bmi.s	loc_72D74
00076052 4A2E 0008                  		tst.b	8(a6)
00076056 6B00 0000                  		bmi.w	loc_72E02
0007605A 4EBA F98E                  		jsr	sub_726FE(pc)
0007605E 6000                       		bra.s	loc_72D78
00076060                            ; ===========================================================================
00076060                            
00076060                            loc_72D74:
00076060 4EBA FC2A                  		jsr	sub_729A0(pc)
00076064                            
00076064                            loc_72D78:
00076064 4A2E 000E                  		tst.b	$E(a6)
00076068 6A00 0000                  		bpl.w	loc_72E02
0007606C 4216                       		clr.b	0(a6)
0007606E 7000                       		moveq	#0,d0
00076070 102D 0001                  		move.b	1(a5),d0
00076074 6B00                       		bmi.s	loc_72DCC
00076076 41FA F546                  		lea	dword_722CC(pc),a0
0007607A 264D                       		movea.l	a5,a3
0007607C 0C00 0004                  		cmpi.b	#4,d0
00076080 6600                       		bne.s	loc_72DA8
00076082 4A2E 0340                  		tst.b	$340(a6)
00076086 6A00                       		bpl.s	loc_72DA8
00076088 4BEE 0340                  		lea	$340(a6),a5
0007608C 226E 0020                  		movea.l	$20(a6),a1
00076090 6000                       		bra.s	loc_72DB8
00076092                            ; ===========================================================================
00076092                            
00076092                            loc_72DA8:
00076092 5500                       		subq.b	#2,d0
00076094 E508                       		lsl.b	#2,d0
00076096 2A70 0000                  		movea.l	(a0,d0.w),a5
0007609A 4A15                       		tst.b	(a5)
0007609C 6A00                       		bpl.s	loc_72DC8
0007609E 226E 0018                  		movea.l	$18(a6),a1
000760A2                            
000760A2                            loc_72DB8:
000760A2 0895 0002                  		bclr	#2,(a5)
000760A6 08D5 0001                  		bset	#1,(a5)
000760AA 102D 000B                  		move.b	$B(a5),d0
000760AE 4EBA FE8A                  		jsr	sub_72C4E(pc)
000760B2                            
000760B2                            loc_72DC8:
000760B2 2A4B                       		movea.l	a3,a5
000760B4 6000                       		bra.s	loc_72E02
000760B6                            ; ===========================================================================
000760B6                            
000760B6                            loc_72DCC:
000760B6 41EE 0370                  		lea	$370(a6),a0
000760BA 4A10                       		tst.b	(a0)
000760BC 6A00                       		bpl.s	loc_72DE0
000760BE 0C00 00E0                  		cmpi.b	#$E0,d0
000760C2 6700                       		beq.s	loc_72DEA
000760C4 0C00 00C0                  		cmpi.b	#$C0,d0
000760C8 6700                       		beq.s	loc_72DEA
000760CA                            
000760CA                            loc_72DE0:
000760CA 41FA F4F2                  		lea	dword_722CC(pc),a0
000760CE E608                       		lsr.b	#3,d0
000760D0 2070 0000                  		movea.l	(a0,d0.w),a0
000760D4                            
000760D4                            loc_72DEA:
000760D4 0890 0002                  		bclr	#2,(a0)
000760D8 08D0 0001                  		bset	#1,(a0)
000760DC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000760E2 6600                       		bne.s	loc_72E02
000760E4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000760EC                            
000760EC                            loc_72E02:
000760EC 504F                       		addq.w	#8,sp
000760EE 4E75                       		rts	
000760F0                            ; ===========================================================================
000760F0                            
000760F0                            loc_72E06:				; XREF: loc_72A64
000760F0 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000760F6 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000760FA 0815 0002                  		btst	#2,(a5)
000760FE 6600                       		bne.s	locret_72E1E
00076100 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076108                            
00076108                            locret_72E1E:
00076108 4E75                       		rts	
0007610A                            ; ===========================================================================
0007610A                            
0007610A                            loc_72E20:				; XREF: loc_72A64
0007610A 0895 0003                  		bclr	#3,(a5)
0007610E 4E75                       		rts	
00076110                            ; ===========================================================================
00076110                            
00076110                            loc_72E26:				; XREF: loc_72A64
00076110 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076114 4E75                       		rts	
00076116                            ; ===========================================================================
00076116                            
00076116                            loc_72E2C:				; XREF: loc_72A64
00076116 101C                       		move.b	(a4)+,d0
00076118 E148                       		lsl.w	#8,d0
0007611A 101C                       		move.b	(a4)+,d0
0007611C D8C0                       		adda.w	d0,a4
0007611E 534C                       		subq.w	#1,a4
00076120 4E75                       		rts	
00076122                            ; ===========================================================================
00076122                            
00076122                            loc_72E38:				; XREF: loc_72A64
00076122 7000                       		moveq	#0,d0
00076124 101C                       		move.b	(a4)+,d0
00076126 121C                       		move.b	(a4)+,d1
00076128 4A35 0024                  		tst.b	$24(a5,d0.w)
0007612C 6600                       		bne.s	loc_72E48
0007612E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076132                            
00076132                            loc_72E48:
00076132 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076136 66DE                       		bne.s	loc_72E2C
00076138 544C                       		addq.w	#2,a4
0007613A 4E75                       		rts	
0007613C                            ; ===========================================================================
0007613C                            
0007613C                            loc_72E52:				; XREF: loc_72A64
0007613C 7000                       		moveq	#0,d0
0007613E 102D 000D                  		move.b	$D(a5),d0
00076142 5900                       		subq.b	#4,d0
00076144 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076148 1B40 000D                  		move.b	d0,$D(a5)
0007614C 60C8                       		bra.s	loc_72E2C
0007614E                            ; ===========================================================================
0007614E                            
0007614E                            loc_72E64:				; XREF: loc_72A64
0007614E 103C 0088                  		move.b	#$88,d0
00076152 123C 000F                  		move.b	#$F,d1
00076156 4EBA F8C2                  		jsr	sub_7272E(pc)
0007615A 103C 008C                  		move.b	#$8C,d0
0007615E 123C 000F                  		move.b	#$F,d1
00076162 6000 F8B6                  		bra.w	sub_7272E
00076166                            ; ===========================================================================
00076166                            Kos_Z80:	incbin	sound\z80_1.bin
00076216 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076218 21                         		dc.b $21
00076219 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0007621B                            		incbin	sound\z80_2.bin
000778C6                            		even
000778C6                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E0C6                            		even
0007E0C6                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00087964                            		even
00087964                            Music83:	incbin	sound\music83.bin ; Marble Act 1
00087EF2                            		even
00087EF2                            Music84:	include	sound\music84.asm ; Star Light Act 1
00087EF2                            music84_Header:
00087EF2 =00000001                  smpsHeaderStartSong = 1
00087EF2 0000                       	smpsHeaderVoice     music84_Voices
00087EF4 0603                       	smpsHeaderChan      $06, $03
00087EF6 0205                       	smpsHeaderTempo     $02, $05
00087EF8                            
00087EFC 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00087F00 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00087F04 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00087F08 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00087F0C 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00087F10 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00087F16 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00087F1C 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00087F22                            
00087F22                            ; FM1 Data
00087F22                            music84_FM1:
00087F22 E0C0                       	smpsPan             panCenter, $00
00087F26 E107                       	smpsAlterNote       $07
00087F28 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00087F2C E106                       	smpsAlterNote       $06
00087F2E 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00087F32 E10B                       	smpsAlterNote       $0B
00087F34 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00087F3A E10C                       	smpsAlterNote       $0C
00087F3C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00087F3F E10B                       	smpsAlterNote       $0B
00087F41 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087F44 E109                       	smpsAlterNote       $09
00087F46 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00087F4B E108                       	smpsAlterNote       $08
00087F4D 8001                       	dc.b	nRst, $01
00087F4F E10B                       	smpsAlterNote       $0B
00087F51 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00087F57 E107                       	smpsAlterNote       $07
00087F59 9B03                       	dc.b	nD2, $03
00087F5B                            
00087F5B                            music84_Jump04:
00087F5B E107                       	smpsAlterNote       $07
00087F5D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087F61 E10B                       	smpsAlterNote       $0B
00087F63 A202 8001                  	dc.b	nA2, $02, nRst, $01
00087F67 E107                       	smpsAlterNote       $07
00087F69 9B03                       	dc.b	nD2, $03
00087F6B E11A                       	smpsAlterNote       $1A
00087F6D A301                       	dc.b	nBb2, $01
00087F6F E1F2                       	smpsAlterNote       $F2
00087F71 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087F74 E1FF                       	smpsAlterNote       $FF
00087F76 E701                       	dc.b	smpsNoAttack, $01
00087F78 E111                       	smpsAlterNote       $11
00087F7A E701                       	dc.b	smpsNoAttack, $01
00087F7C E106                       	smpsAlterNote       $06
00087F7E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00087F81 E107                       	smpsAlterNote       $07
00087F83 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00087F87 E108                       	smpsAlterNote       $08
00087F89 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00087F91 E109                       	smpsAlterNote       $09
00087F93 A003                       	dc.b	nG2, $03
00087F95 E10C                       	smpsAlterNote       $0C
00087F97 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087F9B E1FD                       	smpsAlterNote       $FD
00087F9D A401                       	dc.b	nB2, $01
00087F9F E109                       	smpsAlterNote       $09
00087FA1 E701                       	dc.b	smpsNoAttack, $01
00087FA3 E106                       	smpsAlterNote       $06
00087FA5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00087FA8 E109                       	smpsAlterNote       $09
00087FAA A007                       	dc.b	nG2, $07
00087FAC E108                       	smpsAlterNote       $08
00087FAE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00087FB2 E107                       	smpsAlterNote       $07
00087FB4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00087FBA E10B                       	smpsAlterNote       $0B
00087FBC A203 8001                  	dc.b	nA2, $03, nRst, $01
00087FC0 E107                       	smpsAlterNote       $07
00087FC2 9B03                       	dc.b	nD2, $03
00087FC4 E11A                       	smpsAlterNote       $1A
00087FC6 A301                       	dc.b	nBb2, $01
00087FC8 E1F9                       	smpsAlterNote       $F9
00087FCA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00087FCD E107                       	smpsAlterNote       $07
00087FCF E701                       	dc.b	smpsNoAttack, $01
00087FD1 E111                       	smpsAlterNote       $11
00087FD3 E701                       	dc.b	smpsNoAttack, $01
00087FD5 E106                       	smpsAlterNote       $06
00087FD7 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00087FDC E107                       	smpsAlterNote       $07
00087FDE 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00087FE6 E1EC                       	smpsAlterNote       $EC
00087FE8 A101                       	dc.b	nAb2, $01
00087FEA E108                       	smpsAlterNote       $08
00087FEC E701                       	dc.b	smpsNoAttack, $01
00087FEE E116                       	smpsAlterNote       $16
00087FF0 E701                       	dc.b	smpsNoAttack, $01
00087FF2 E1F5                       	smpsAlterNote       $F5
00087FF4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00087FF7 E10B                       	smpsAlterNote       $0B
00087FF9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00087FFD E107                       	smpsAlterNote       $07
00087FFF 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088005 E109                       	smpsAlterNote       $09
00088007 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008800B E10B                       	smpsAlterNote       $0B
0008800D 9603                       	dc.b	nA1, $03
0008800F E107                       	smpsAlterNote       $07
00088011 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00088017 E10B                       	smpsAlterNote       $0B
00088019 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008801D E107                       	smpsAlterNote       $07
0008801F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088023 E11A                       	smpsAlterNote       $1A
00088025 A301                       	dc.b	nBb2, $01
00088027 E1F9                       	smpsAlterNote       $F9
00088029 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008802C E107                       	smpsAlterNote       $07
0008802E E701                       	dc.b	smpsNoAttack, $01
00088030 E1FB                       	smpsAlterNote       $FB
00088032 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088035 E106                       	smpsAlterNote       $06
00088037 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008803B E107                       	smpsAlterNote       $07
0008803D 9B03                       	dc.b	nD2, $03
0008803F E108                       	smpsAlterNote       $08
00088041 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088047 E109                       	smpsAlterNote       $09
00088049 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008804D E10C                       	smpsAlterNote       $0C
0008804F A303                       	dc.b	nBb2, $03
00088051 E1F0                       	smpsAlterNote       $F0
00088053 A401                       	dc.b	nB2, $01
00088055 E1FD                       	smpsAlterNote       $FD
00088057 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008805C E106                       	smpsAlterNote       $06
0008805E 8001                       	dc.b	nRst, $01
00088060 E109                       	smpsAlterNote       $09
00088062 A006 8001                  	dc.b	nG2, $06, nRst, $01
00088066 E108                       	smpsAlterNote       $08
00088068 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008806C E107                       	smpsAlterNote       $07
0008806E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088074 E10B                       	smpsAlterNote       $0B
00088076 A203                       	dc.b	nA2, $03
00088078 E107                       	smpsAlterNote       $07
0008807A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008807E E1F2                       	smpsAlterNote       $F2
00088080 A401                       	dc.b	nB2, $01
00088082 E1FF                       	smpsAlterNote       $FF
00088084 E701                       	dc.b	smpsNoAttack, $01
00088086 E107                       	smpsAlterNote       $07
00088088 E701                       	dc.b	smpsNoAttack, $01
0008808A E1FB                       	smpsAlterNote       $FB
0008808C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008808F E106                       	smpsAlterNote       $06
00088091 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088095 E107                       	smpsAlterNote       $07
00088097 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000880A1 E117                       	smpsAlterNote       $17
000880A3 A001                       	dc.b	nG2, $01
000880A5 E1FA                       	smpsAlterNote       $FA
000880A7 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000880AA E108                       	smpsAlterNote       $08
000880AC E701                       	dc.b	smpsNoAttack, $01
000880AE E1E7                       	smpsAlterNote       $E7
000880B0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000880B3 E103                       	smpsAlterNote       $03
000880B5 E701                       	dc.b	smpsNoAttack, $01
000880B7 E10B                       	smpsAlterNote       $0B
000880B9 E702                       	dc.b	smpsNoAttack, $02
000880BB E107                       	smpsAlterNote       $07
000880BD 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000880C5 E106                       	smpsAlterNote       $06
000880C7 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000880CD E10C                       	smpsAlterNote       $0C
000880CF 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000880D5 E109                       	smpsAlterNote       $09
000880D7 9E03                       	dc.b	nF2, $03
000880D9 E10C                       	smpsAlterNote       $0C
000880DB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000880DF E1EA                       	smpsAlterNote       $EA
000880E1 A201                       	dc.b	nA2, $01
000880E3 E106                       	smpsAlterNote       $06
000880E5 E701                       	dc.b	smpsNoAttack, $01
000880E7 E1E2                       	smpsAlterNote       $E2
000880E9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000880EC E1F0                       	smpsAlterNote       $F0
000880EE E701                       	dc.b	smpsNoAttack, $01
000880F0 E10C                       	smpsAlterNote       $0C
000880F2 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000880FE E116                       	smpsAlterNote       $16
00088100 9C01                       	dc.b	nEb2, $01
00088102 E105                       	smpsAlterNote       $05
00088104 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088107 E1F1                       	smpsAlterNote       $F1
00088109 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008810C E1FF                       	smpsAlterNote       $FF
0008810E E701                       	dc.b	smpsNoAttack, $01
00088110 E109                       	smpsAlterNote       $09
00088112 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088116 E10C                       	smpsAlterNote       $0C
00088118 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00088124 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008812A E109                       	smpsAlterNote       $09
0008812C 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088130 E10C                       	smpsAlterNote       $0C
00088132 9703                       	dc.b	nBb1, $03
00088134 E11A                       	smpsAlterNote       $1A
00088136 A101                       	dc.b	nAb2, $01
00088138 E1FB                       	smpsAlterNote       $FB
0008813A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008813D E10A                       	smpsAlterNote       $0A
0008813F E701                       	dc.b	smpsNoAttack, $01
00088141 E1E8                       	smpsAlterNote       $E8
00088143 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088146 E106                       	smpsAlterNote       $06
00088148 E701                       	dc.b	smpsNoAttack, $01
0008814A E10C                       	smpsAlterNote       $0C
0008814C E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00088158 E1F9                       	smpsAlterNote       $F9
0008815A 9D01                       	dc.b	nE2, $01
0008815C E108                       	smpsAlterNote       $08
0008815E E701                       	dc.b	smpsNoAttack, $01
00088160 E1F6                       	smpsAlterNote       $F6
00088162 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088165 E109                       	smpsAlterNote       $09
00088167 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008816B E10C                       	smpsAlterNote       $0C
0008816D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00088179 E108                       	smpsAlterNote       $08
0008817B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00088181 E106                       	smpsAlterNote       $06
00088183 A403 8001                  	dc.b	nB2, $03, nRst, $01
00088187 E108                       	smpsAlterNote       $08
00088189 9D03                       	dc.b	nE2, $03
0008818B E1EB                       	smpsAlterNote       $EB
0008818D A801                       	dc.b	nEb3, $01
0008818F E109                       	smpsAlterNote       $09
00088191 E701                       	dc.b	smpsNoAttack, $01
00088193 E1FA                       	smpsAlterNote       $FA
00088195 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00088198 E108                       	smpsAlterNote       $08
0008819A E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000881A6 E1E9                       	smpsAlterNote       $E9
000881A8 A301                       	dc.b	nBb2, $01
000881AA E107                       	smpsAlterNote       $07
000881AC E701                       	dc.b	smpsNoAttack, $01
000881AE E1F0                       	smpsAlterNote       $F0
000881B0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000881B3 E1F7                       	smpsAlterNote       $F7
000881B5 E701                       	dc.b	smpsNoAttack, $01
000881B7 E107                       	smpsAlterNote       $07
000881B9 E701                       	dc.b	smpsNoAttack, $01
000881BB E106                       	smpsAlterNote       $06
000881BD E701                       	dc.b	smpsNoAttack, $01
000881BF E108                       	smpsAlterNote       $08
000881C1 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000881C7 E106                       	smpsAlterNote       $06
000881C9 A403 8001                  	dc.b	nB2, $03, nRst, $01
000881CD E108                       	smpsAlterNote       $08
000881CF 9D03                       	dc.b	nE2, $03
000881D1 E10B                       	smpsAlterNote       $0B
000881D3 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000881DB E108                       	smpsAlterNote       $08
000881DD 9D03                       	dc.b	nE2, $03
000881DF E10B                       	smpsAlterNote       $0B
000881E1 9603 8001                  	dc.b	nA1, $03, nRst, $01
000881E5 E113                       	smpsAlterNote       $13
000881E7 A001                       	dc.b	nG2, $01
000881E9 E118                       	smpsAlterNote       $18
000881EB E701                       	dc.b	smpsNoAttack, $01
000881ED E1E9                       	smpsAlterNote       $E9
000881EF E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000881F2 E1F3                       	smpsAlterNote       $F3
000881F4 E701                       	dc.b	smpsNoAttack, $01
000881F6 E1FD                       	smpsAlterNote       $FD
000881F8 E701                       	dc.b	smpsNoAttack, $01
000881FA E102                       	smpsAlterNote       $02
000881FC E701                       	dc.b	smpsNoAttack, $01
000881FE E107                       	smpsAlterNote       $07
00088200 8001                       	dc.b	nRst, $01
00088202 E10B                       	smpsAlterNote       $0B
00088204 9603                       	dc.b	nA1, $03
00088206 E10C                       	smpsAlterNote       $0C
00088208 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008820E E10B                       	smpsAlterNote       $0B
00088210 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008821C 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00088222 E107                       	smpsAlterNote       $07
00088224 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008822A E10B                       	smpsAlterNote       $0B
0008822C A203                       	dc.b	nA2, $03
0008822E E107                       	smpsAlterNote       $07
00088230 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088234 E1F2                       	smpsAlterNote       $F2
00088236 A401                       	dc.b	nB2, $01
00088238 E1FF                       	smpsAlterNote       $FF
0008823A E701                       	dc.b	smpsNoAttack, $01
0008823C E107                       	smpsAlterNote       $07
0008823E E701                       	dc.b	smpsNoAttack, $01
00088240 E1FB                       	smpsAlterNote       $FB
00088242 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088245 E106                       	smpsAlterNote       $06
00088247 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008824B E107                       	smpsAlterNote       $07
0008824D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088251 E108                       	smpsAlterNote       $08
00088253 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00088259 E109                       	smpsAlterNote       $09
0008825B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008825F E10C                       	smpsAlterNote       $0C
00088261 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00088265 E1F0                       	smpsAlterNote       $F0
00088267 A401                       	dc.b	nB2, $01
00088269 E109                       	smpsAlterNote       $09
0008826B E701                       	dc.b	smpsNoAttack, $01
0008826D E106                       	smpsAlterNote       $06
0008826F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088272 E109                       	smpsAlterNote       $09
00088274 A007                       	dc.b	nG2, $07
00088276 E108                       	smpsAlterNote       $08
00088278 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008827C E107                       	smpsAlterNote       $07
0008827E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088284 E10B                       	smpsAlterNote       $0B
00088286 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008828A E107                       	smpsAlterNote       $07
0008828C 9B03                       	dc.b	nD2, $03
0008828E E11A                       	smpsAlterNote       $1A
00088290 A301                       	dc.b	nBb2, $01
00088292 E1F2                       	smpsAlterNote       $F2
00088294 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088297 E1FF                       	smpsAlterNote       $FF
00088299 E701                       	dc.b	smpsNoAttack, $01
0008829B E111                       	smpsAlterNote       $11
0008829D E701                       	dc.b	smpsNoAttack, $01
0008829F E106                       	smpsAlterNote       $06
000882A1 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000882A4 E107                       	smpsAlterNote       $07
000882A6 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000882B2 E117                       	smpsAlterNote       $17
000882B4 A001                       	dc.b	nG2, $01
000882B6 E1FA                       	smpsAlterNote       $FA
000882B8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000882BB E116                       	smpsAlterNote       $16
000882BD E701                       	dc.b	smpsNoAttack, $01
000882BF E1F5                       	smpsAlterNote       $F5
000882C1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000882C4 E103                       	smpsAlterNote       $03
000882C6 E701                       	dc.b	smpsNoAttack, $01
000882C8 E10B                       	smpsAlterNote       $0B
000882CA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000882CE E107                       	smpsAlterNote       $07
000882D0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000882D6 E109                       	smpsAlterNote       $09
000882D8 9E03                       	dc.b	nF2, $03
000882DA E10B                       	smpsAlterNote       $0B
000882DC 9603 8001                  	dc.b	nA1, $03, nRst, $01
000882E0 E107                       	smpsAlterNote       $07
000882E2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000882E8 E10B                       	smpsAlterNote       $0B
000882EA A203 8001                  	dc.b	nA2, $03, nRst, $01
000882EE E107                       	smpsAlterNote       $07
000882F0 9B03                       	dc.b	nD2, $03
000882F2 E11A                       	smpsAlterNote       $1A
000882F4 A301                       	dc.b	nBb2, $01
000882F6 E1F9                       	smpsAlterNote       $F9
000882F8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000882FB E107                       	smpsAlterNote       $07
000882FD E701                       	dc.b	smpsNoAttack, $01
000882FF E111                       	smpsAlterNote       $11
00088301 E701                       	dc.b	smpsNoAttack, $01
00088303 E106                       	smpsAlterNote       $06
00088305 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008830A E107                       	smpsAlterNote       $07
0008830C 9B03                       	dc.b	nD2, $03
0008830E E108                       	smpsAlterNote       $08
00088310 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088316 E109                       	smpsAlterNote       $09
00088318 A003                       	dc.b	nG2, $03
0008831A E10C                       	smpsAlterNote       $0C
0008831C A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088320 E1FD                       	smpsAlterNote       $FD
00088322 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00088327 E106                       	smpsAlterNote       $06
00088329 8001                       	dc.b	nRst, $01
0008832B E109                       	smpsAlterNote       $09
0008832D A006 8001                  	dc.b	nG2, $06, nRst, $01
00088331 E108                       	smpsAlterNote       $08
00088333 9C03                       	dc.b	nEb2, $03
00088335 E107                       	smpsAlterNote       $07
00088337 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008833D E10B                       	smpsAlterNote       $0B
0008833F A203 8001                  	dc.b	nA2, $03, nRst, $01
00088343 E107                       	smpsAlterNote       $07
00088345 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00088349 E11A                       	smpsAlterNote       $1A
0008834B A301                       	dc.b	nBb2, $01
0008834D E1F9                       	smpsAlterNote       $F9
0008834F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088352 E107                       	smpsAlterNote       $07
00088354 E701                       	dc.b	smpsNoAttack, $01
00088356 E1FB                       	smpsAlterNote       $FB
00088358 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008835B E106                       	smpsAlterNote       $06
0008835D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088361 E107                       	smpsAlterNote       $07
00088363 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008836B E1EC                       	smpsAlterNote       $EC
0008836D A101                       	dc.b	nAb2, $01
0008836F E108                       	smpsAlterNote       $08
00088371 E701                       	dc.b	smpsNoAttack, $01
00088373 E1E7                       	smpsAlterNote       $E7
00088375 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088378 E1F5                       	smpsAlterNote       $F5
0008837A E701                       	dc.b	smpsNoAttack, $01
0008837C E10B                       	smpsAlterNote       $0B
0008837E E702                       	dc.b	smpsNoAttack, $02
00088380 E107                       	smpsAlterNote       $07
00088382 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00088388 E106                       	smpsAlterNote       $06
0008838A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088390 E10C                       	smpsAlterNote       $0C
00088392 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008839A E109                       	smpsAlterNote       $09
0008839C 9E03                       	dc.b	nF2, $03
0008839E E10C                       	smpsAlterNote       $0C
000883A0 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000883A4 E1EA                       	smpsAlterNote       $EA
000883A6 A201                       	dc.b	nA2, $01
000883A8 E106                       	smpsAlterNote       $06
000883AA E701                       	dc.b	smpsNoAttack, $01
000883AC E114                       	smpsAlterNote       $14
000883AE E701                       	dc.b	smpsNoAttack, $01
000883B0 E1F0                       	smpsAlterNote       $F0
000883B2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000883B5 E10C                       	smpsAlterNote       $0C
000883B7 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000883C3 9703                       	dc.b	nBb1, $03
000883C5 E116                       	smpsAlterNote       $16
000883C7 9C01                       	dc.b	nEb2, $01
000883C9 E105                       	smpsAlterNote       $05
000883CB E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000883CE E113                       	smpsAlterNote       $13
000883D0 E701                       	dc.b	smpsNoAttack, $01
000883D2 E1FF                       	smpsAlterNote       $FF
000883D4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000883D7 E109                       	smpsAlterNote       $09
000883D9 E703                       	dc.b	smpsNoAttack, $03
000883DB E10C                       	smpsAlterNote       $0C
000883DD 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000883E9 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000883F1 E109                       	smpsAlterNote       $09
000883F3 9E03                       	dc.b	nF2, $03
000883F5 E10C                       	smpsAlterNote       $0C
000883F7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000883FB E1EC                       	smpsAlterNote       $EC
000883FD A201                       	dc.b	nA2, $01
000883FF E10A                       	smpsAlterNote       $0A
00088401 E701                       	dc.b	smpsNoAttack, $01
00088403 E1E8                       	smpsAlterNote       $E8
00088405 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088408 E1F7                       	smpsAlterNote       $F7
0008840A E701                       	dc.b	smpsNoAttack, $01
0008840C E10C                       	smpsAlterNote       $0C
0008840E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008841A E1EA                       	smpsAlterNote       $EA
0008841C 9D01                       	dc.b	nE2, $01
0008841E E108                       	smpsAlterNote       $08
00088420 E701                       	dc.b	smpsNoAttack, $01
00088422 E1F6                       	smpsAlterNote       $F6
00088424 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00088427 E105                       	smpsAlterNote       $05
00088429 E701                       	dc.b	smpsNoAttack, $01
0008842B E109                       	smpsAlterNote       $09
0008842D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088431 E10C                       	smpsAlterNote       $0C
00088433 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008843F E108                       	smpsAlterNote       $08
00088441 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00088447 E106                       	smpsAlterNote       $06
00088449 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008844D E108                       	smpsAlterNote       $08
0008844F 9D03                       	dc.b	nE2, $03
00088451 E1EB                       	smpsAlterNote       $EB
00088453 A801                       	dc.b	nEb3, $01
00088455 E109                       	smpsAlterNote       $09
00088457 E701                       	dc.b	smpsNoAttack, $01
00088459 E1EB                       	smpsAlterNote       $EB
0008845B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008845E E108                       	smpsAlterNote       $08
00088460 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008846C E1E9                       	smpsAlterNote       $E9
0008846E A301                       	dc.b	nBb2, $01
00088470 E1F8                       	smpsAlterNote       $F8
00088472 E701                       	dc.b	smpsNoAttack, $01
00088474 E116                       	smpsAlterNote       $16
00088476 E701                       	dc.b	smpsNoAttack, $01
00088478 E1F7                       	smpsAlterNote       $F7
0008847A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008847D E107                       	smpsAlterNote       $07
0008847F E701                       	dc.b	smpsNoAttack, $01
00088481 E1EE                       	smpsAlterNote       $EE
00088483 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088486 E106                       	smpsAlterNote       $06
00088488 8001                       	dc.b	nRst, $01
0008848A E108                       	smpsAlterNote       $08
0008848C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00088492 E106                       	smpsAlterNote       $06
00088494 A402 8001                  	dc.b	nB2, $02, nRst, $01
00088498 E108                       	smpsAlterNote       $08
0008849A 9D03                       	dc.b	nE2, $03
0008849C E10B                       	smpsAlterNote       $0B
0008849E 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000884A4 E108                       	smpsAlterNote       $08
000884A6 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000884AA E10B                       	smpsAlterNote       $0B
000884AC 9603                       	dc.b	nA1, $03
000884AE E10E                       	smpsAlterNote       $0E
000884B0 A001                       	dc.b	nG2, $01
000884B2 E118                       	smpsAlterNote       $18
000884B4 E701                       	dc.b	smpsNoAttack, $01
000884B6 E1E9                       	smpsAlterNote       $E9
000884B8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000884BB E1EE                       	smpsAlterNote       $EE
000884BD E701                       	dc.b	smpsNoAttack, $01
000884BF E1F8                       	smpsAlterNote       $F8
000884C1 E701                       	dc.b	smpsNoAttack, $01
000884C3 E102                       	smpsAlterNote       $02
000884C5 E701                       	dc.b	smpsNoAttack, $01
000884C7 E107                       	smpsAlterNote       $07
000884C9 8001                       	dc.b	nRst, $01
000884CB E10B                       	smpsAlterNote       $0B
000884CD 9603                       	dc.b	nA1, $03
000884CF E10C                       	smpsAlterNote       $0C
000884D1 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000884D7 E10B                       	smpsAlterNote       $0B
000884D9 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000884E5 8001 9603                  	dc.b	nRst, $01, nA1, $03
000884E9 E10C                       	smpsAlterNote       $0C
000884EB 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000884F7 8001                       	dc.b	nRst, $01
000884F9 E10B                       	smpsAlterNote       $0B
000884FB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00088503 E107                       	smpsAlterNote       $07
00088505 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00088509 E10B                       	smpsAlterNote       $0B
0008850B 9603                       	dc.b	nA1, $03
0008850D E109                       	smpsAlterNote       $09
0008850F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00088513 E108                       	smpsAlterNote       $08
00088515 9D06                       	dc.b	nE2, $06
00088517 E107                       	smpsAlterNote       $07
00088519 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008851D E106                       	smpsAlterNote       $06
0008851F 9903                       	dc.b	nC2, $03
00088521 E10C                       	smpsAlterNote       $0C
00088523 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088527 E10B                       	smpsAlterNote       $0B
00088529 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088535 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008853F E10C                       	smpsAlterNote       $0C
00088541 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008854D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00088559 8001                       	dc.b	nRst, $01
0008855B E10B                       	smpsAlterNote       $0B
0008855D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00088569 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00088575 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00088581 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008858B E10C                       	smpsAlterNote       $0C
0008858D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00088599 E10B                       	smpsAlterNote       $0B
0008859B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000885A3 E107                       	smpsAlterNote       $07
000885A5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000885A9 E10B                       	smpsAlterNote       $0B
000885AB 9603                       	dc.b	nA1, $03
000885AD E109                       	smpsAlterNote       $09
000885AF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000885B3 E108                       	smpsAlterNote       $08
000885B5 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000885B9 E107                       	smpsAlterNote       $07
000885BB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000885BF E106                       	smpsAlterNote       $06
000885C1 9903                       	dc.b	nC2, $03
000885C3 E10C                       	smpsAlterNote       $0C
000885C5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000885C9 E10B                       	smpsAlterNote       $0B
000885CB 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000885D7 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000885E1 E10C                       	smpsAlterNote       $0C
000885E3 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000885EF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000885FB 8001                       	dc.b	nRst, $01
000885FD E10B                       	smpsAlterNote       $0B
000885FF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008860B 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00088615 E10C                       	smpsAlterNote       $0C
00088617 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088623 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008862F E10B                       	smpsAlterNote       $0B
00088631 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008863D 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00088647 E10C                       	smpsAlterNote       $0C
00088649 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088655 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00088661 E10B                       	smpsAlterNote       $0B
00088663 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008866F 8001                       	dc.b	nRst, $01
00088671 E1EC                       	smpsAlterNote       $EC
00088673 A101                       	dc.b	nAb2, $01
00088675 E1FA                       	smpsAlterNote       $FA
00088677 E701                       	dc.b	smpsNoAttack, $01
00088679 E116                       	smpsAlterNote       $16
0008867B E701                       	dc.b	smpsNoAttack, $01
0008867D E1F5                       	smpsAlterNote       $F5
0008867F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088682 E10B                       	smpsAlterNote       $0B
00088684 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00088690 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008869C E107                       	smpsAlterNote       $07
0008869E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000886A4 E10B                       	smpsAlterNote       $0B
000886A6 A203                       	dc.b	nA2, $03
000886A8 E107                       	smpsAlterNote       $07
000886AA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000886AE E1F3                       	smpsAlterNote       $F3
000886B0 A401                       	dc.b	nB2, $01
000886B2 E102                       	smpsAlterNote       $02
000886B4 E701                       	dc.b	smpsNoAttack, $01
000886B6 E109                       	smpsAlterNote       $09
000886B8 E701                       	dc.b	smpsNoAttack, $01
000886BA E102                       	smpsAlterNote       $02
000886BC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000886BF E106                       	smpsAlterNote       $06
000886C1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000886C5 E107                       	smpsAlterNote       $07
000886C7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000886CB E108                       	smpsAlterNote       $08
000886CD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000886D3 E109                       	smpsAlterNote       $09
000886D5 A003 8001                  	dc.b	nG2, $03, nRst, $01
000886D9 E1F2                       	smpsAlterNote       $F2
000886DB A401                       	dc.b	nB2, $01
000886DD E1FF                       	smpsAlterNote       $FF
000886DF E701                       	dc.b	smpsNoAttack, $01
000886E1 E111                       	smpsAlterNote       $11
000886E3 E701                       	dc.b	smpsNoAttack, $01
000886E5 E1FB                       	smpsAlterNote       $FB
000886E7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000886EA E106                       	smpsAlterNote       $06
000886EC E702                       	dc.b	smpsNoAttack, $02
000886EE E109                       	smpsAlterNote       $09
000886F0 A007                       	dc.b	nG2, $07
000886F2 E108                       	smpsAlterNote       $08
000886F4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000886F8 E107                       	smpsAlterNote       $07
000886FA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088700 E10B                       	smpsAlterNote       $0B
00088702 A202 8001                  	dc.b	nA2, $02, nRst, $01
00088706 E107                       	smpsAlterNote       $07
00088708 9B03                       	dc.b	nD2, $03
0008870A E11A                       	smpsAlterNote       $1A
0008870C A301                       	dc.b	nBb2, $01
0008870E E1F2                       	smpsAlterNote       $F2
00088710 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088713 E1FF                       	smpsAlterNote       $FF
00088715 E701                       	dc.b	smpsNoAttack, $01
00088717 E111                       	smpsAlterNote       $11
00088719 E701                       	dc.b	smpsNoAttack, $01
0008871B E106                       	smpsAlterNote       $06
0008871D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088720 E107                       	smpsAlterNote       $07
00088722 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008872E E117                       	smpsAlterNote       $17
00088730 A001                       	dc.b	nG2, $01
00088732 E1FA                       	smpsAlterNote       $FA
00088734 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00088737 E116                       	smpsAlterNote       $16
00088739 E701                       	dc.b	smpsNoAttack, $01
0008873B E1F5                       	smpsAlterNote       $F5
0008873D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00088740 E103                       	smpsAlterNote       $03
00088742 E701                       	dc.b	smpsNoAttack, $01
00088744 E10B                       	smpsAlterNote       $0B
00088746 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008874A E107                       	smpsAlterNote       $07
0008874C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088752 E109                       	smpsAlterNote       $09
00088754 9E03                       	dc.b	nF2, $03
00088756 E10B                       	smpsAlterNote       $0B
00088758 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008875C E107                       	smpsAlterNote       $07
0008875E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00088764 E10B                       	smpsAlterNote       $0B
00088766 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008876A E107                       	smpsAlterNote       $07
0008876C 9B03                       	dc.b	nD2, $03
0008876E E11A                       	smpsAlterNote       $1A
00088770 A301                       	dc.b	nBb2, $01
00088772 E1F9                       	smpsAlterNote       $F9
00088774 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088777 E1FF                       	smpsAlterNote       $FF
00088779 E701                       	dc.b	smpsNoAttack, $01
0008877B E111                       	smpsAlterNote       $11
0008877D E701                       	dc.b	smpsNoAttack, $01
0008877F E106                       	smpsAlterNote       $06
00088781 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088784 E107                       	smpsAlterNote       $07
00088786 9B03                       	dc.b	nD2, $03
00088788 E108                       	smpsAlterNote       $08
0008878A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00088790 E109                       	smpsAlterNote       $09
00088792 A003                       	dc.b	nG2, $03
00088794 E1F0                       	smpsAlterNote       $F0
00088796 A501                       	dc.b	nC3, $01
00088798 E106                       	smpsAlterNote       $06
0008879A E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008879E E109                       	smpsAlterNote       $09
000887A0 A006 8001                  	dc.b	nG2, $06, nRst, $01
000887A4 E108                       	smpsAlterNote       $08
000887A6 9C03                       	dc.b	nEb2, $03
000887A8 E107                       	smpsAlterNote       $07
000887AA 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000887B0 E10B                       	smpsAlterNote       $0B
000887B2 A203 8001                  	dc.b	nA2, $03, nRst, $01
000887B6 E107                       	smpsAlterNote       $07
000887B8 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000887BC E11A                       	smpsAlterNote       $1A
000887BE A301                       	dc.b	nBb2, $01
000887C0 E1F9                       	smpsAlterNote       $F9
000887C2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000887C5 E107                       	smpsAlterNote       $07
000887C7 E701                       	dc.b	smpsNoAttack, $01
000887C9 E1FB                       	smpsAlterNote       $FB
000887CB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000887CE E106                       	smpsAlterNote       $06
000887D0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000887D4 E107                       	smpsAlterNote       $07
000887D6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000887DE E1EC                       	smpsAlterNote       $EC
000887E0 A101                       	dc.b	nAb2, $01
000887E2 E108                       	smpsAlterNote       $08
000887E4 E701                       	dc.b	smpsNoAttack, $01
000887E6 E1E7                       	smpsAlterNote       $E7
000887E8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000887EB E1F5                       	smpsAlterNote       $F5
000887ED E701                       	dc.b	smpsNoAttack, $01
000887EF E10B                       	smpsAlterNote       $0B
000887F1 E702                       	dc.b	smpsNoAttack, $02
000887F3 E107                       	smpsAlterNote       $07
000887F5 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000887FB E106                       	smpsAlterNote       $06
000887FD 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00088803 E10C                       	smpsAlterNote       $0C
00088805 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008880D E109                       	smpsAlterNote       $09
0008880F 9E03                       	dc.b	nF2, $03
00088811 E10C                       	smpsAlterNote       $0C
00088813 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088817 E1EA                       	smpsAlterNote       $EA
00088819 A201                       	dc.b	nA2, $01
0008881B E106                       	smpsAlterNote       $06
0008881D E701                       	dc.b	smpsNoAttack, $01
0008881F E114                       	smpsAlterNote       $14
00088821 E701                       	dc.b	smpsNoAttack, $01
00088823 E1F0                       	smpsAlterNote       $F0
00088825 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00088828 E10C                       	smpsAlterNote       $0C
0008882A E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00088836 9703                       	dc.b	nBb1, $03
00088838 E116                       	smpsAlterNote       $16
0008883A 9C01                       	dc.b	nEb2, $01
0008883C E105                       	smpsAlterNote       $05
0008883E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088841 E113                       	smpsAlterNote       $13
00088843 E701                       	dc.b	smpsNoAttack, $01
00088845 E1FF                       	smpsAlterNote       $FF
00088847 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008884A E109                       	smpsAlterNote       $09
0008884C E703                       	dc.b	smpsNoAttack, $03
0008884E E10C                       	smpsAlterNote       $0C
00088850 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008885C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00088864 E109                       	smpsAlterNote       $09
00088866 9E03                       	dc.b	nF2, $03
00088868 E10C                       	smpsAlterNote       $0C
0008886A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008886E E1EA                       	smpsAlterNote       $EA
00088870 A201                       	dc.b	nA2, $01
00088872 E106                       	smpsAlterNote       $06
00088874 E701                       	dc.b	smpsNoAttack, $01
00088876 E1E2                       	smpsAlterNote       $E2
00088878 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008887B E1F0                       	smpsAlterNote       $F0
0008887D E701                       	dc.b	smpsNoAttack, $01
0008887F E10C                       	smpsAlterNote       $0C
00088881 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008888D E116                       	smpsAlterNote       $16
0008888F 9C01                       	dc.b	nEb2, $01
00088891 E105                       	smpsAlterNote       $05
00088893 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00088896 E1F1                       	smpsAlterNote       $F1
00088898 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008889B E1FF                       	smpsAlterNote       $FF
0008889D E701                       	dc.b	smpsNoAttack, $01
0008889F E109                       	smpsAlterNote       $09
000888A1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000888A5 E10C                       	smpsAlterNote       $0C
000888A7 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000888B3 E106                       	smpsAlterNote       $06
000888B5 9903                       	dc.b	nC2, $03
000888B7 E107                       	smpsAlterNote       $07
000888B9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000888BD E109                       	smpsAlterNote       $09
000888BF 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000888C5 E107                       	smpsAlterNote       $07
000888C7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000888CB E108                       	smpsAlterNote       $08
000888CD 9D03                       	dc.b	nE2, $03
000888CF E10B                       	smpsAlterNote       $0B
000888D1 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000888D7 E109                       	smpsAlterNote       $09
000888D9 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000888DF E10C                       	smpsAlterNote       $0C
000888E1 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000888E7 E106                       	smpsAlterNote       $06
000888E9 9903                       	dc.b	nC2, $03
000888EB E11A                       	smpsAlterNote       $1A
000888ED A301                       	dc.b	nBb2, $01
000888EF E1F9                       	smpsAlterNote       $F9
000888F1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000888F4 E1FF                       	smpsAlterNote       $FF
000888F6 E701                       	dc.b	smpsNoAttack, $01
000888F8 E111                       	smpsAlterNote       $11
000888FA E701                       	dc.b	smpsNoAttack, $01
000888FC E106                       	smpsAlterNote       $06
000888FE E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00088905 E109                       	smpsAlterNote       $09
00088907 A003                       	dc.b	nG2, $03
00088909 E106                       	smpsAlterNote       $06
0008890B 9907                       	dc.b	nC2, $07
0008890D E107                       	smpsAlterNote       $07
0008890F 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00088917 E10B                       	smpsAlterNote       $0B
00088919 A203                       	dc.b	nA2, $03
0008891B E107                       	smpsAlterNote       $07
0008891D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088921 E1F2                       	smpsAlterNote       $F2
00088923 A401                       	dc.b	nB2, $01
00088925 E1F9                       	smpsAlterNote       $F9
00088927 E701                       	dc.b	smpsNoAttack, $01
00088929 E107                       	smpsAlterNote       $07
0008892B E701                       	dc.b	smpsNoAttack, $01
0008892D E1FB                       	smpsAlterNote       $FB
0008892F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088932 E106                       	smpsAlterNote       $06
00088934 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088938 E107                       	smpsAlterNote       $07
0008893A 9B03                       	dc.b	nD2, $03
0008893C E108                       	smpsAlterNote       $08
0008893E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00088944 E109                       	smpsAlterNote       $09
00088946 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008894A E1F2                       	smpsAlterNote       $F2
0008894C A401                       	dc.b	nB2, $01
0008894E E1F9                       	smpsAlterNote       $F9
00088950 E701                       	dc.b	smpsNoAttack, $01
00088952 E107                       	smpsAlterNote       $07
00088954 E701                       	dc.b	smpsNoAttack, $01
00088956 E1FB                       	smpsAlterNote       $FB
00088958 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008895B E106                       	smpsAlterNote       $06
0008895D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088961 E108                       	smpsAlterNote       $08
00088963 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00088967 E10C                       	smpsAlterNote       $0C
00088969 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008896D E107                       	smpsAlterNote       $07
0008896F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00088975 E10B                       	smpsAlterNote       $0B
00088977 A203                       	dc.b	nA2, $03
00088979 E107                       	smpsAlterNote       $07
0008897B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008897F E1F2                       	smpsAlterNote       $F2
00088981 A401                       	dc.b	nB2, $01
00088983 E1FF                       	smpsAlterNote       $FF
00088985 E701                       	dc.b	smpsNoAttack, $01
00088987 E107                       	smpsAlterNote       $07
00088989 E701                       	dc.b	smpsNoAttack, $01
0008898B E1FB                       	smpsAlterNote       $FB
0008898D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00088990 E106                       	smpsAlterNote       $06
00088992 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00088996 E107                       	smpsAlterNote       $07
00088998 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008899C E108                       	smpsAlterNote       $08
0008899E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000889A4 E109                       	smpsAlterNote       $09
000889A6 A003 8001                  	dc.b	nG2, $03, nRst, $01
000889AA E1F2                       	smpsAlterNote       $F2
000889AC A401                       	dc.b	nB2, $01
000889AE E1FF                       	smpsAlterNote       $FF
000889B0 E701                       	dc.b	smpsNoAttack, $01
000889B2 E111                       	smpsAlterNote       $11
000889B4 E701                       	dc.b	smpsNoAttack, $01
000889B6 E1FB                       	smpsAlterNote       $FB
000889B8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000889BB E106                       	smpsAlterNote       $06
000889BD E702                       	dc.b	smpsNoAttack, $02
000889BF E108                       	smpsAlterNote       $08
000889C1 9C07                       	dc.b	nEb2, $07
000889C3 E10C                       	smpsAlterNote       $0C
000889C5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000889C9 E107                       	smpsAlterNote       $07
000889CB 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000889D1 E10B                       	smpsAlterNote       $0B
000889D3 A202 8001                  	dc.b	nA2, $02, nRst, $01
000889D7 E107                       	smpsAlterNote       $07
000889D9 9B03                       	dc.b	nD2, $03
000889DB E11A                       	smpsAlterNote       $1A
000889DD A301                       	dc.b	nBb2, $01
000889DF E1F2                       	smpsAlterNote       $F2
000889E1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000889E4 E1FF                       	smpsAlterNote       $FF
000889E6 E701                       	dc.b	smpsNoAttack, $01
000889E8 E111                       	smpsAlterNote       $11
000889EA E701                       	dc.b	smpsNoAttack, $01
000889EC E106                       	smpsAlterNote       $06
000889EE E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000889F1 E107                       	smpsAlterNote       $07
000889F3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000889F7 E108                       	smpsAlterNote       $08
000889F9 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00088A01 E109                       	smpsAlterNote       $09
00088A03 A003                       	dc.b	nG2, $03
00088A05 E11A                       	smpsAlterNote       $1A
00088A07 A301                       	dc.b	nBb2, $01
00088A09 E1F2                       	smpsAlterNote       $F2
00088A0B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00088A0E E1FF                       	smpsAlterNote       $FF
00088A10 E701                       	dc.b	smpsNoAttack, $01
00088A12 E111                       	smpsAlterNote       $11
00088A14 E701                       	dc.b	smpsNoAttack, $01
00088A16 E106                       	smpsAlterNote       $06
00088A18 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00088A1B E108                       	smpsAlterNote       $08
00088A1D 9C07                       	dc.b	nEb2, $07
00088A1F E10C                       	smpsAlterNote       $0C
00088A21 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00088A25 E107                       	smpsAlterNote       $07
00088A27 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
00088A33 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
00088A3D E108                       	smpsAlterNote       $08
00088A3F 9C06                       	dc.b	nEb2, $06
00088A41 E10C                       	smpsAlterNote       $0C
00088A43 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00088A47 E108                       	smpsAlterNote       $08
00088A49 9C03                       	dc.b	nEb2, $03
00088A4B E109                       	smpsAlterNote       $09
00088A4D A003 8001                  	dc.b	nG2, $03, nRst, $01
00088A51 E10C                       	smpsAlterNote       $0C
00088A53 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00088A5B E107                       	smpsAlterNote       $07
00088A5D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00088A61 F6F4 F8                    	smpsJump            music84_Jump04
00088A64                            
00088A64                            ; FM2 Data
00088A64                            music84_FM2:
00088A64 E0C0                       	smpsPan             panCenter, $00
00088A68 E10B                       	smpsAlterNote       $0B
00088A6A C603 8007                  	dc.b	nA5, $03, nRst, $07
00088A6E E109                       	smpsAlterNote       $09
00088A70 C403 800B                  	dc.b	nG5, $03, nRst, $0B
00088A74 E108                       	smpsAlterNote       $08
00088A76 C103 8004                  	dc.b	nE5, $03, nRst, $04
00088A7C E080                       	smpsPan             panLeft, $00
00088A7E E10C                       	smpsAlterNote       $0C
00088A80 E6F9                       	smpsAlterVol        $F9
00088A82 C703                       	dc.b	nBb5, $03
00088A84 E10B                       	smpsAlterNote       $0B
00088A86 C603 8001                  	dc.b	nA5, $03, nRst, $01
00088A8A E109                       	smpsAlterNote       $09
00088A8C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00088A92 E108                       	smpsAlterNote       $08
00088A94 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088A98 E106                       	smpsAlterNote       $06
00088A9A BD03                       	dc.b	nC5, $03
00088A9C E10B                       	smpsAlterNote       $0B
00088A9E BA03 8001                  	dc.b	nA4, $03, nRst, $01
00088AA4 E0C0                       	smpsPan             panCenter, $00
00088AA6 E107                       	smpsAlterNote       $07
00088AA8 E606                       	smpsAlterVol        $06
00088AAA BF03                       	dc.b	nD5, $03
00088AAC                            
00088AAC                            music84_Jump03:
00088AAC E108                       	smpsAlterNote       $08
00088AAE C103 8001                  	dc.b	nE5, $03, nRst, $01
00088AB2 E109                       	smpsAlterNote       $09
00088AB4 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00088ABA E10B                       	smpsAlterNote       $0B
00088ABC C607                       	dc.b	nA5, $07
00088ABE E107                       	smpsAlterNote       $07
00088AC0 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088AC4 E106                       	smpsAlterNote       $06
00088AC6 C90D                       	dc.b	nC6, $0D
00088AC8 E100                       	smpsAlterNote       $00
00088ACA E701                       	dc.b	smpsNoAttack, $01
00088ACC E1FF                       	smpsAlterNote       $FF
00088ACE E701                       	dc.b	smpsNoAttack, $01
00088AD0 E103                       	smpsAlterNote       $03
00088AD2 E701                       	dc.b	smpsNoAttack, $01
00088AD4 E109                       	smpsAlterNote       $09
00088AD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088ADA E106                       	smpsAlterNote       $06
00088ADC E701                       	dc.b	smpsNoAttack, $01
00088ADE E100                       	smpsAlterNote       $00
00088AE0 E701                       	dc.b	smpsNoAttack, $01
00088AE2 E10C                       	smpsAlterNote       $0C
00088AE4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088AE8 E10B                       	smpsAlterNote       $0B
00088AEA C603                       	dc.b	nA5, $03
00088AEC E109                       	smpsAlterNote       $09
00088AEE C403 8001                  	dc.b	nG5, $03, nRst, $01
00088AF2 E10B                       	smpsAlterNote       $0B
00088AF4 C60D                       	dc.b	nA5, $0D
00088AF6 E105                       	smpsAlterNote       $05
00088AF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088AFC E10B                       	smpsAlterNote       $0B
00088AFE E701                       	dc.b	smpsNoAttack, $01
00088B00 E10E                       	smpsAlterNote       $0E
00088B02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B06 E108                       	smpsAlterNote       $08
00088B08 E701                       	dc.b	smpsNoAttack, $01
00088B0A E104                       	smpsAlterNote       $04
00088B0C E701                       	dc.b	smpsNoAttack, $01
00088B0E E105                       	smpsAlterNote       $05
00088B10 E701                       	dc.b	smpsNoAttack, $01
00088B12 E10B                       	smpsAlterNote       $0B
00088B14 E701                       	dc.b	smpsNoAttack, $01
00088B16 E10F                       	smpsAlterNote       $0F
00088B18 E701                       	dc.b	smpsNoAttack, $01
00088B1A E10B                       	smpsAlterNote       $0B
00088B1C E701                       	dc.b	smpsNoAttack, $01
00088B1E E108                       	smpsAlterNote       $08
00088B20 E701                       	dc.b	smpsNoAttack, $01
00088B22 E104                       	smpsAlterNote       $04
00088B24 E701                       	dc.b	smpsNoAttack, $01
00088B26 E108                       	smpsAlterNote       $08
00088B28 E701                       	dc.b	smpsNoAttack, $01
00088B2A E10E                       	smpsAlterNote       $0E
00088B2C E701                       	dc.b	smpsNoAttack, $01
00088B2E E10F                       	smpsAlterNote       $0F
00088B30 E701                       	dc.b	smpsNoAttack, $01
00088B32 E10B                       	smpsAlterNote       $0B
00088B34 E701                       	dc.b	smpsNoAttack, $01
00088B36 E105                       	smpsAlterNote       $05
00088B38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B3C E108                       	smpsAlterNote       $08
00088B3E E701                       	dc.b	smpsNoAttack, $01
00088B40 E10E                       	smpsAlterNote       $0E
00088B42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B46 E108                       	smpsAlterNote       $08
00088B48 E701                       	dc.b	smpsNoAttack, $01
00088B4A E105                       	smpsAlterNote       $05
00088B4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B50 E10B                       	smpsAlterNote       $0B
00088B52 E701                       	dc.b	smpsNoAttack, $01
00088B54 E10F                       	smpsAlterNote       $0F
00088B56 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00088B5A E107                       	smpsAlterNote       $07
00088B5C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088B60 E108                       	smpsAlterNote       $08
00088B62 C103                       	dc.b	nE5, $03
00088B64 E109                       	smpsAlterNote       $09
00088B66 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
00088B6E E10B                       	smpsAlterNote       $0B
00088B70 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088B74 E107                       	smpsAlterNote       $07
00088B76 BF03                       	dc.b	nD5, $03
00088B78 E106                       	smpsAlterNote       $06
00088B7A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
00088B7E E107                       	smpsAlterNote       $07
00088B80 CB03                       	dc.b	nD6, $03
00088B82 E10C                       	smpsAlterNote       $0C
00088B84 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088B88 E10B                       	smpsAlterNote       $0B
00088B8A C604 8001                  	dc.b	nA5, $04, nRst, $01
00088B8E E109                       	smpsAlterNote       $09
00088B90 C404                       	dc.b	nG5, $04
00088B92 E10B                       	smpsAlterNote       $0B
00088B94 C60D                       	dc.b	nA5, $0D
00088B96 E108                       	smpsAlterNote       $08
00088B98 E701                       	dc.b	smpsNoAttack, $01
00088B9A E104                       	smpsAlterNote       $04
00088B9C E701                       	dc.b	smpsNoAttack, $01
00088B9E E108                       	smpsAlterNote       $08
00088BA0 E701                       	dc.b	smpsNoAttack, $01
00088BA2 E10B                       	smpsAlterNote       $0B
00088BA4 E701                       	dc.b	smpsNoAttack, $01
00088BA6 E10F                       	smpsAlterNote       $0F
00088BA8 E701                       	dc.b	smpsNoAttack, $01
00088BAA E10B                       	smpsAlterNote       $0B
00088BAC E701                       	dc.b	smpsNoAttack, $01
00088BAE E105                       	smpsAlterNote       $05
00088BB0 E701                       	dc.b	smpsNoAttack, $01
00088BB2 E104                       	smpsAlterNote       $04
00088BB4 E701                       	dc.b	smpsNoAttack, $01
00088BB6 E108                       	smpsAlterNote       $08
00088BB8 E701                       	dc.b	smpsNoAttack, $01
00088BBA E10E                       	smpsAlterNote       $0E
00088BBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BC0 E10B                       	smpsAlterNote       $0B
00088BC2 E701                       	dc.b	smpsNoAttack, $01
00088BC4 E105                       	smpsAlterNote       $05
00088BC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BCA E10B                       	smpsAlterNote       $0B
00088BCC E701                       	dc.b	smpsNoAttack, $01
00088BCE E10E                       	smpsAlterNote       $0E
00088BD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BD4 E108                       	smpsAlterNote       $08
00088BD6 E701                       	dc.b	smpsNoAttack, $01
00088BD8 E104                       	smpsAlterNote       $04
00088BDA E701                       	dc.b	smpsNoAttack, $01
00088BDC E105                       	smpsAlterNote       $05
00088BDE E701                       	dc.b	smpsNoAttack, $01
00088BE0 E10B                       	smpsAlterNote       $0B
00088BE2 E701                       	dc.b	smpsNoAttack, $01
00088BE4 E10F                       	smpsAlterNote       $0F
00088BE6 E701                       	dc.b	smpsNoAttack, $01
00088BE8 E10B                       	smpsAlterNote       $0B
00088BEA E701                       	dc.b	smpsNoAttack, $01
00088BEC E108                       	smpsAlterNote       $08
00088BEE E701                       	dc.b	smpsNoAttack, $01
00088BF0 E105                       	smpsAlterNote       $05
00088BF2 8001                       	dc.b	nRst, $01
00088BF4 E109                       	smpsAlterNote       $09
00088BF6 C401                       	dc.b	nG5, $01
00088BF8 E10B                       	smpsAlterNote       $0B
00088BFA E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00088C03 E109                       	smpsAlterNote       $09
00088C05 C404 8001                  	dc.b	nG5, $04, nRst, $01
00088C09 E10B                       	smpsAlterNote       $0B
00088C0B C604 8001                  	dc.b	nA5, $04, nRst, $01
00088C0F E107                       	smpsAlterNote       $07
00088C11 BF0D                       	dc.b	nD5, $0D
00088C13 E101                       	smpsAlterNote       $01
00088C15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C19 E104                       	smpsAlterNote       $04
00088C1B E701                       	dc.b	smpsNoAttack, $01
00088C1D E10A                       	smpsAlterNote       $0A
00088C1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C23 E104                       	smpsAlterNote       $04
00088C25 E701                       	dc.b	smpsNoAttack, $01
00088C27 E101                       	smpsAlterNote       $01
00088C29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C2D E107                       	smpsAlterNote       $07
00088C2F E701                       	dc.b	smpsNoAttack, $01
00088C31 E10B                       	smpsAlterNote       $0B
00088C33 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088C37 E108                       	smpsAlterNote       $08
00088C39 C101                       	dc.b	nE5, $01
00088C3B E109                       	smpsAlterNote       $09
00088C3D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088C42 E10B                       	smpsAlterNote       $0B
00088C44 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088C4C E108                       	smpsAlterNote       $08
00088C4E CD06                       	dc.b	nE6, $06
00088C50 E109                       	smpsAlterNote       $09
00088C52 CE07                       	dc.b	nF6, $07
00088C54 E108                       	smpsAlterNote       $08
00088C56 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00088C5A E106                       	smpsAlterNote       $06
00088C5C C903                       	dc.b	nC6, $03
00088C5E E109                       	smpsAlterNote       $09
00088C60 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088C64 E10C                       	smpsAlterNote       $0C
00088C66 C70D                       	dc.b	nBb5, $0D
00088C68 E106                       	smpsAlterNote       $06
00088C6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C6E E109                       	smpsAlterNote       $09
00088C70 E701                       	dc.b	smpsNoAttack, $01
00088C72 E10F                       	smpsAlterNote       $0F
00088C74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C78 E109                       	smpsAlterNote       $09
00088C7A E701                       	dc.b	smpsNoAttack, $01
00088C7C E106                       	smpsAlterNote       $06
00088C7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C82 E10C                       	smpsAlterNote       $0C
00088C84 E701                       	dc.b	smpsNoAttack, $01
00088C86 E110                       	smpsAlterNote       $10
00088C88 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088C8C E10B                       	smpsAlterNote       $0B
00088C8E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00088C92 E105                       	smpsAlterNote       $05
00088C94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088C98 E10B                       	smpsAlterNote       $0B
00088C9A E701                       	dc.b	smpsNoAttack, $01
00088C9C E10E                       	smpsAlterNote       $0E
00088C9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CA2 E108                       	smpsAlterNote       $08
00088CA4 E701                       	dc.b	smpsNoAttack, $01
00088CA6 E104                       	smpsAlterNote       $04
00088CA8 E701                       	dc.b	smpsNoAttack, $01
00088CAA E105                       	smpsAlterNote       $05
00088CAC E701                       	dc.b	smpsNoAttack, $01
00088CAE E10B                       	smpsAlterNote       $0B
00088CB0 E701                       	dc.b	smpsNoAttack, $01
00088CB2 E10F                       	smpsAlterNote       $0F
00088CB4 E701                       	dc.b	smpsNoAttack, $01
00088CB6 E10B                       	smpsAlterNote       $0B
00088CB8 E701                       	dc.b	smpsNoAttack, $01
00088CBA E108                       	smpsAlterNote       $08
00088CBC E701                       	dc.b	smpsNoAttack, $01
00088CBE E104                       	smpsAlterNote       $04
00088CC0 E701                       	dc.b	smpsNoAttack, $01
00088CC2 E108                       	smpsAlterNote       $08
00088CC4 E701                       	dc.b	smpsNoAttack, $01
00088CC6 E10E                       	smpsAlterNote       $0E
00088CC8 E701                       	dc.b	smpsNoAttack, $01
00088CCA E10F                       	smpsAlterNote       $0F
00088CCC E701                       	dc.b	smpsNoAttack, $01
00088CCE E10B                       	smpsAlterNote       $0B
00088CD0 E701                       	dc.b	smpsNoAttack, $01
00088CD2 E105                       	smpsAlterNote       $05
00088CD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CD8 E108                       	smpsAlterNote       $08
00088CDA E701                       	dc.b	smpsNoAttack, $01
00088CDC E10E                       	smpsAlterNote       $0E
00088CDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CE2 E108                       	smpsAlterNote       $08
00088CE4 E701                       	dc.b	smpsNoAttack, $01
00088CE6 E105                       	smpsAlterNote       $05
00088CE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CEC E10B                       	smpsAlterNote       $0B
00088CEE E701                       	dc.b	smpsNoAttack, $01
00088CF0 E10F                       	smpsAlterNote       $0F
00088CF2 E701                       	dc.b	smpsNoAttack, $01
00088CF4 E10E                       	smpsAlterNote       $0E
00088CF6 E701                       	dc.b	smpsNoAttack, $01
00088CF8 E108                       	smpsAlterNote       $08
00088CFA E701                       	dc.b	smpsNoAttack, $01
00088CFC E104                       	smpsAlterNote       $04
00088CFE E701                       	dc.b	smpsNoAttack, $01
00088D00 E108                       	smpsAlterNote       $08
00088D02 E701                       	dc.b	smpsNoAttack, $01
00088D04 E10E                       	smpsAlterNote       $0E
00088D06 E701                       	dc.b	smpsNoAttack, $01
00088D08 E10F                       	smpsAlterNote       $0F
00088D0A E701                       	dc.b	smpsNoAttack, $01
00088D0C E10B                       	smpsAlterNote       $0B
00088D0E E701                       	dc.b	smpsNoAttack, $01
00088D10 E105                       	smpsAlterNote       $05
00088D12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D16 E108                       	smpsAlterNote       $08
00088D18 E701                       	dc.b	smpsNoAttack, $01
00088D1A E10E                       	smpsAlterNote       $0E
00088D1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D20 E108                       	smpsAlterNote       $08
00088D22 E701                       	dc.b	smpsNoAttack, $01
00088D24 E105                       	smpsAlterNote       $05
00088D26 E701                       	dc.b	smpsNoAttack, $01
00088D28 E10B                       	smpsAlterNote       $0B
00088D2A C60D                       	dc.b	nA5, $0D
00088D2C E108                       	smpsAlterNote       $08
00088D2E E701                       	dc.b	smpsNoAttack, $01
00088D30 E104                       	smpsAlterNote       $04
00088D32 E701                       	dc.b	smpsNoAttack, $01
00088D34 E105                       	smpsAlterNote       $05
00088D36 E701                       	dc.b	smpsNoAttack, $01
00088D38 E10B                       	smpsAlterNote       $0B
00088D3A E701                       	dc.b	smpsNoAttack, $01
00088D3C E10F                       	smpsAlterNote       $0F
00088D3E E701                       	dc.b	smpsNoAttack, $01
00088D40 E10B                       	smpsAlterNote       $0B
00088D42 E701                       	dc.b	smpsNoAttack, $01
00088D44 E108                       	smpsAlterNote       $08
00088D46 E701                       	dc.b	smpsNoAttack, $01
00088D48 E104                       	smpsAlterNote       $04
00088D4A E701                       	dc.b	smpsNoAttack, $01
00088D4C E108                       	smpsAlterNote       $08
00088D4E E701                       	dc.b	smpsNoAttack, $01
00088D50 E10E                       	smpsAlterNote       $0E
00088D52 E701                       	dc.b	smpsNoAttack, $01
00088D54 E10F                       	smpsAlterNote       $0F
00088D56 E701                       	dc.b	smpsNoAttack, $01
00088D5A E109                       	smpsAlterNote       $09
00088D5C E6FF                       	smpsAlterVol        $FF
00088D5E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00088D68 E108                       	smpsAlterNote       $08
00088D6A C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088D70 E107                       	smpsAlterNote       $07
00088D72 E601                       	smpsAlterVol        $01
00088D74 BF03                       	dc.b	nD5, $03
00088D76 E108                       	smpsAlterNote       $08
00088D78 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088D7C E109                       	smpsAlterNote       $09
00088D7E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00088D84 E10B                       	smpsAlterNote       $0B
00088D86 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088D8A E107                       	smpsAlterNote       $07
00088D8C BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088D90 E106                       	smpsAlterNote       $06
00088D92 C90D                       	dc.b	nC6, $0D
00088D94 E103                       	smpsAlterNote       $03
00088D96 E701                       	dc.b	smpsNoAttack, $01
00088D98 E1FF                       	smpsAlterNote       $FF
00088D9A E701                       	dc.b	smpsNoAttack, $01
00088D9C E103                       	smpsAlterNote       $03
00088D9E E701                       	dc.b	smpsNoAttack, $01
00088DA0 E109                       	smpsAlterNote       $09
00088DA2 E701                       	dc.b	smpsNoAttack, $01
00088DA4 E10A                       	smpsAlterNote       $0A
00088DA6 E701                       	dc.b	smpsNoAttack, $01
00088DA8 E106                       	smpsAlterNote       $06
00088DAA E701                       	dc.b	smpsNoAttack, $01
00088DAC E100                       	smpsAlterNote       $00
00088DAE E701                       	dc.b	smpsNoAttack, $01
00088DB0 E10C                       	smpsAlterNote       $0C
00088DB2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00088DB6 E10B                       	smpsAlterNote       $0B
00088DB8 C603                       	dc.b	nA5, $03
00088DBA E109                       	smpsAlterNote       $09
00088DBC C403 8001                  	dc.b	nG5, $03, nRst, $01
00088DC0 E10B                       	smpsAlterNote       $0B
00088DC2 C60D                       	dc.b	nA5, $0D
00088DC4 E105                       	smpsAlterNote       $05
00088DC6 E701                       	dc.b	smpsNoAttack, $01
00088DC8 E104                       	smpsAlterNote       $04
00088DCA E701                       	dc.b	smpsNoAttack, $01
00088DCC E108                       	smpsAlterNote       $08
00088DCE E701                       	dc.b	smpsNoAttack, $01
00088DD0 E10E                       	smpsAlterNote       $0E
00088DD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DD6 E10B                       	smpsAlterNote       $0B
00088DD8 E701                       	dc.b	smpsNoAttack, $01
00088DDA E105                       	smpsAlterNote       $05
00088DDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DE0 E10B                       	smpsAlterNote       $0B
00088DE2 E701                       	dc.b	smpsNoAttack, $01
00088DE4 E10E                       	smpsAlterNote       $0E
00088DE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DEA E108                       	smpsAlterNote       $08
00088DEC E701                       	dc.b	smpsNoAttack, $01
00088DEE E104                       	smpsAlterNote       $04
00088DF0 E701                       	dc.b	smpsNoAttack, $01
00088DF2 E105                       	smpsAlterNote       $05
00088DF4 E701                       	dc.b	smpsNoAttack, $01
00088DF6 E10B                       	smpsAlterNote       $0B
00088DF8 E701                       	dc.b	smpsNoAttack, $01
00088DFA E10F                       	smpsAlterNote       $0F
00088DFC E701                       	dc.b	smpsNoAttack, $01
00088DFE E10B                       	smpsAlterNote       $0B
00088E00 E701                       	dc.b	smpsNoAttack, $01
00088E02 E108                       	smpsAlterNote       $08
00088E04 E701                       	dc.b	smpsNoAttack, $01
00088E06 E104                       	smpsAlterNote       $04
00088E08 E701                       	dc.b	smpsNoAttack, $01
00088E0A E108                       	smpsAlterNote       $08
00088E0C E701                       	dc.b	smpsNoAttack, $01
00088E0E E10E                       	smpsAlterNote       $0E
00088E10 E701                       	dc.b	smpsNoAttack, $01
00088E12 E10F                       	smpsAlterNote       $0F
00088E14 E701                       	dc.b	smpsNoAttack, $01
00088E16 E10B                       	smpsAlterNote       $0B
00088E18 E701                       	dc.b	smpsNoAttack, $01
00088E1A E105                       	smpsAlterNote       $05
00088E1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E20 E108                       	smpsAlterNote       $08
00088E22 E701                       	dc.b	smpsNoAttack, $01
00088E24 E10E                       	smpsAlterNote       $0E
00088E26 E701                       	dc.b	smpsNoAttack, $01
00088E28 E10F                       	smpsAlterNote       $0F
00088E2A 800F                       	dc.b	nRst, $0F
00088E2C E107                       	smpsAlterNote       $07
00088E2E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00088E32 E108                       	smpsAlterNote       $08
00088E34 C103                       	dc.b	nE5, $03
00088E36 E109                       	smpsAlterNote       $09
00088E38 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00088E3E E10B                       	smpsAlterNote       $0B
00088E40 C606 8001                  	dc.b	nA5, $06, nRst, $01
00088E44 E107                       	smpsAlterNote       $07
00088E46 BF03                       	dc.b	nD5, $03
00088E48 E106                       	smpsAlterNote       $06
00088E4A C90E                       	dc.b	nC6, $0E
00088E4C E107                       	smpsAlterNote       $07
00088E4E CB03 8001                  	dc.b	nD6, $03, nRst, $01
00088E52 E10C                       	smpsAlterNote       $0C
00088E54 C704                       	dc.b	nBb5, $04
00088E56 E10B                       	smpsAlterNote       $0B
00088E58 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088E5C E109                       	smpsAlterNote       $09
00088E5E C404                       	dc.b	nG5, $04
00088E60 E10B                       	smpsAlterNote       $0B
00088E62 C60D                       	dc.b	nA5, $0D
00088E64 E108                       	smpsAlterNote       $08
00088E66 E701                       	dc.b	smpsNoAttack, $01
00088E68 E105                       	smpsAlterNote       $05
00088E6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E6E E10B                       	smpsAlterNote       $0B
00088E70 E701                       	dc.b	smpsNoAttack, $01
00088E72 E10F                       	smpsAlterNote       $0F
00088E74 E701                       	dc.b	smpsNoAttack, $01
00088E76 E10E                       	smpsAlterNote       $0E
00088E78 E701                       	dc.b	smpsNoAttack, $01
00088E7A E108                       	smpsAlterNote       $08
00088E7C E701                       	dc.b	smpsNoAttack, $01
00088E7E E104                       	smpsAlterNote       $04
00088E80 E701                       	dc.b	smpsNoAttack, $01
00088E82 E108                       	smpsAlterNote       $08
00088E84 E701                       	dc.b	smpsNoAttack, $01
00088E86 E10B                       	smpsAlterNote       $0B
00088E88 E701                       	dc.b	smpsNoAttack, $01
00088E8A E10F                       	smpsAlterNote       $0F
00088E8C E701                       	dc.b	smpsNoAttack, $01
00088E8E E10B                       	smpsAlterNote       $0B
00088E90 E701                       	dc.b	smpsNoAttack, $01
00088E92 E105                       	smpsAlterNote       $05
00088E94 E701                       	dc.b	smpsNoAttack, $01
00088E96 E104                       	smpsAlterNote       $04
00088E98 E701                       	dc.b	smpsNoAttack, $01
00088E9A E108                       	smpsAlterNote       $08
00088E9C E701                       	dc.b	smpsNoAttack, $01
00088E9E E10E                       	smpsAlterNote       $0E
00088EA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EA4 E10B                       	smpsAlterNote       $0B
00088EA6 E701                       	dc.b	smpsNoAttack, $01
00088EA8 E105                       	smpsAlterNote       $05
00088EAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EAE E10B                       	smpsAlterNote       $0B
00088EB0 E701                       	dc.b	smpsNoAttack, $01
00088EB2 E10E                       	smpsAlterNote       $0E
00088EB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EB8 E108                       	smpsAlterNote       $08
00088EBA E701                       	dc.b	smpsNoAttack, $01
00088EBC E105                       	smpsAlterNote       $05
00088EBE 8001                       	dc.b	nRst, $01
00088EC0 E109                       	smpsAlterNote       $09
00088EC2 C402                       	dc.b	nG5, $02
00088EC4 E10B                       	smpsAlterNote       $0B
00088EC6 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00088ECF E109                       	smpsAlterNote       $09
00088ED1 C404                       	dc.b	nG5, $04
00088ED3 E10B                       	smpsAlterNote       $0B
00088ED5 C604 8001                  	dc.b	nA5, $04, nRst, $01
00088ED9 E107                       	smpsAlterNote       $07
00088EDB BF0D                       	dc.b	nD5, $0D
00088EDD E101                       	smpsAlterNote       $01
00088EDF E701                       	dc.b	smpsNoAttack, $01
00088EE1 E100                       	smpsAlterNote       $00
00088EE3 E701                       	dc.b	smpsNoAttack, $01
00088EE5 E104                       	smpsAlterNote       $04
00088EE7 E701                       	dc.b	smpsNoAttack, $01
00088EE9 E10A                       	smpsAlterNote       $0A
00088EEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EEF E107                       	smpsAlterNote       $07
00088EF1 E701                       	dc.b	smpsNoAttack, $01
00088EF3 E101                       	smpsAlterNote       $01
00088EF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EF9 E107                       	smpsAlterNote       $07
00088EFB E701                       	dc.b	smpsNoAttack, $01
00088EFD E10A                       	smpsAlterNote       $0A
00088EFF E701                       	dc.b	smpsNoAttack, $01
00088F01 E10B                       	smpsAlterNote       $0B
00088F03 8001                       	dc.b	nRst, $01
00088F05 E108                       	smpsAlterNote       $08
00088F07 C101                       	dc.b	nE5, $01
00088F09 E109                       	smpsAlterNote       $09
00088F0B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00088F10 E10B                       	smpsAlterNote       $0B
00088F12 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00088F1A E108                       	smpsAlterNote       $08
00088F1C CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088F20 E109                       	smpsAlterNote       $09
00088F22 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088F26 E108                       	smpsAlterNote       $08
00088F28 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00088F2C E106                       	smpsAlterNote       $06
00088F2E C903                       	dc.b	nC6, $03
00088F30 E109                       	smpsAlterNote       $09
00088F32 C403 8001                  	dc.b	nG5, $03, nRst, $01
00088F36 E10C                       	smpsAlterNote       $0C
00088F38 C70D                       	dc.b	nBb5, $0D
00088F3A E109                       	smpsAlterNote       $09
00088F3C E701                       	dc.b	smpsNoAttack, $01
00088F3E E105                       	smpsAlterNote       $05
00088F40 E701                       	dc.b	smpsNoAttack, $01
00088F42 E109                       	smpsAlterNote       $09
00088F44 E701                       	dc.b	smpsNoAttack, $01
00088F46 E10F                       	smpsAlterNote       $0F
00088F48 E701                       	dc.b	smpsNoAttack, $01
00088F4A E110                       	smpsAlterNote       $10
00088F4C E701                       	dc.b	smpsNoAttack, $01
00088F4E E10C                       	smpsAlterNote       $0C
00088F50 E701                       	dc.b	smpsNoAttack, $01
00088F52 E106                       	smpsAlterNote       $06
00088F54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F58 E109                       	smpsAlterNote       $09
00088F5A E701                       	dc.b	smpsNoAttack, $01
00088F5C E10F                       	smpsAlterNote       $0F
00088F5E E701                       	dc.b	smpsNoAttack, $01
00088F60 E110                       	smpsAlterNote       $10
00088F62 8001                       	dc.b	nRst, $01
00088F64 E10B                       	smpsAlterNote       $0B
00088F66 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00088F6C E105                       	smpsAlterNote       $05
00088F6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F72 E108                       	smpsAlterNote       $08
00088F74 E701                       	dc.b	smpsNoAttack, $01
00088F76 E10E                       	smpsAlterNote       $0E
00088F78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F7C E108                       	smpsAlterNote       $08
00088F7E E701                       	dc.b	smpsNoAttack, $01
00088F80 E105                       	smpsAlterNote       $05
00088F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F86 E10B                       	smpsAlterNote       $0B
00088F88 E701                       	dc.b	smpsNoAttack, $01
00088F8A E10F                       	smpsAlterNote       $0F
00088F8C E701                       	dc.b	smpsNoAttack, $01
00088F8E E10E                       	smpsAlterNote       $0E
00088F90 E701                       	dc.b	smpsNoAttack, $01
00088F92 E108                       	smpsAlterNote       $08
00088F94 E701                       	dc.b	smpsNoAttack, $01
00088F96 E104                       	smpsAlterNote       $04
00088F98 E701                       	dc.b	smpsNoAttack, $01
00088F9A E108                       	smpsAlterNote       $08
00088F9C E701                       	dc.b	smpsNoAttack, $01
00088F9E E10B                       	smpsAlterNote       $0B
00088FA0 E701                       	dc.b	smpsNoAttack, $01
00088FA2 E10F                       	smpsAlterNote       $0F
00088FA4 E701                       	dc.b	smpsNoAttack, $01
00088FA6 E10B                       	smpsAlterNote       $0B
00088FA8 E701                       	dc.b	smpsNoAttack, $01
00088FAA E105                       	smpsAlterNote       $05
00088FAC E701                       	dc.b	smpsNoAttack, $01
00088FAE E104                       	smpsAlterNote       $04
00088FB0 E701                       	dc.b	smpsNoAttack, $01
00088FB2 E108                       	smpsAlterNote       $08
00088FB4 E701                       	dc.b	smpsNoAttack, $01
00088FB6 E10E                       	smpsAlterNote       $0E
00088FB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FBC E10B                       	smpsAlterNote       $0B
00088FBE E701                       	dc.b	smpsNoAttack, $01
00088FC0 E105                       	smpsAlterNote       $05
00088FC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FC6 E10B                       	smpsAlterNote       $0B
00088FC8 E701                       	dc.b	smpsNoAttack, $01
00088FCA E10E                       	smpsAlterNote       $0E
00088FCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FD0 E108                       	smpsAlterNote       $08
00088FD2 E701                       	dc.b	smpsNoAttack, $01
00088FD4 E104                       	smpsAlterNote       $04
00088FD6 E701                       	dc.b	smpsNoAttack, $01
00088FD8 E105                       	smpsAlterNote       $05
00088FDA E701                       	dc.b	smpsNoAttack, $01
00088FDC E10B                       	smpsAlterNote       $0B
00088FDE E701                       	dc.b	smpsNoAttack, $01
00088FE0 E10F                       	smpsAlterNote       $0F
00088FE2 E701                       	dc.b	smpsNoAttack, $01
00088FE4 E10B                       	smpsAlterNote       $0B
00088FE6 E701                       	dc.b	smpsNoAttack, $01
00088FE8 E108                       	smpsAlterNote       $08
00088FEA E701                       	dc.b	smpsNoAttack, $01
00088FEC E104                       	smpsAlterNote       $04
00088FEE E701                       	dc.b	smpsNoAttack, $01
00088FF0 E108                       	smpsAlterNote       $08
00088FF2 E701                       	dc.b	smpsNoAttack, $01
00088FF4 E10E                       	smpsAlterNote       $0E
00088FF6 E701                       	dc.b	smpsNoAttack, $01
00088FF8 E10F                       	smpsAlterNote       $0F
00088FFA E701                       	dc.b	smpsNoAttack, $01
00088FFC E10B                       	smpsAlterNote       $0B
00088FFE E701                       	dc.b	smpsNoAttack, $01
00089000 E105                       	smpsAlterNote       $05
00089002 E701                       	dc.b	smpsNoAttack, $01
00089004 E10B                       	smpsAlterNote       $0B
00089006 C60E                       	dc.b	nA5, $0E
00089008 E105                       	smpsAlterNote       $05
0008900A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008900E E10B                       	smpsAlterNote       $0B
00089010 E701                       	dc.b	smpsNoAttack, $01
00089012 E10E                       	smpsAlterNote       $0E
00089014 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089018 E108                       	smpsAlterNote       $08
0008901A E701                       	dc.b	smpsNoAttack, $01
0008901C E104                       	smpsAlterNote       $04
0008901E E701                       	dc.b	smpsNoAttack, $01
00089020 E105                       	smpsAlterNote       $05
00089022 E701                       	dc.b	smpsNoAttack, $01
00089024 E10B                       	smpsAlterNote       $0B
00089026 E701                       	dc.b	smpsNoAttack, $01
00089028 E10F                       	smpsAlterNote       $0F
0008902A E701                       	dc.b	smpsNoAttack, $01
0008902C E10B                       	smpsAlterNote       $0B
0008902E E701                       	dc.b	smpsNoAttack, $01
00089030 E108                       	smpsAlterNote       $08
00089032 E701                       	dc.b	smpsNoAttack, $01
00089034 E104                       	smpsAlterNote       $04
00089036 E701                       	dc.b	smpsNoAttack, $01
00089038 E108                       	smpsAlterNote       $08
0008903A E701                       	dc.b	smpsNoAttack, $01
0008903C E10E                       	smpsAlterNote       $0E
0008903E E701                       	dc.b	smpsNoAttack, $01
00089040 E10F                       	smpsAlterNote       $0F
00089042 E701                       	dc.b	smpsNoAttack, $01
00089044 E10B                       	smpsAlterNote       $0B
00089046 E701                       	dc.b	smpsNoAttack, $01
00089048 E105                       	smpsAlterNote       $05
0008904A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008904E E108                       	smpsAlterNote       $08
00089050 E701                       	dc.b	smpsNoAttack, $01
00089052 E10E                       	smpsAlterNote       $0E
00089054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089058 E108                       	smpsAlterNote       $08
0008905A E701                       	dc.b	smpsNoAttack, $01
0008905C E105                       	smpsAlterNote       $05
0008905E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089062 E10B                       	smpsAlterNote       $0B
00089064 E701                       	dc.b	smpsNoAttack, $01
00089066 E10F                       	smpsAlterNote       $0F
00089068 E701                       	dc.b	smpsNoAttack, $01
0008906A E10E                       	smpsAlterNote       $0E
0008906C E701                       	dc.b	smpsNoAttack, $01
0008906E E108                       	smpsAlterNote       $08
00089070 E701                       	dc.b	smpsNoAttack, $01
00089072 E104                       	smpsAlterNote       $04
00089074 E701                       	dc.b	smpsNoAttack, $01
00089076 E108                       	smpsAlterNote       $08
00089078 E701                       	dc.b	smpsNoAttack, $01
0008907A E10E                       	smpsAlterNote       $0E
0008907C E701                       	dc.b	smpsNoAttack, $01
0008907E E10F                       	smpsAlterNote       $0F
00089080 E701                       	dc.b	smpsNoAttack, $01
00089082 E10B                       	smpsAlterNote       $0B
00089084 E701                       	dc.b	smpsNoAttack, $01
00089086 E105                       	smpsAlterNote       $05
00089088 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008908C E108                       	smpsAlterNote       $08
0008908E E701                       	dc.b	smpsNoAttack, $01
00089090 E10E                       	smpsAlterNote       $0E
00089092 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089096 E108                       	smpsAlterNote       $08
00089098 E701                       	dc.b	smpsNoAttack, $01
0008909A E105                       	smpsAlterNote       $05
0008909C E701                       	dc.b	smpsNoAttack, $01
000890A0 E10B                       	smpsAlterNote       $0B
000890A2 E6FD                       	smpsAlterVol        $FD
000890A4 C604 8001                  	dc.b	nA5, $04, nRst, $01
000890A8 E109                       	smpsAlterNote       $09
000890AA C404                       	dc.b	nG5, $04
000890AC E10B                       	smpsAlterNote       $0B
000890AE C604 8001                  	dc.b	nA5, $04, nRst, $01
000890B2 E107                       	smpsAlterNote       $07
000890B4 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000890BA E10B                       	smpsAlterNote       $0B
000890BC C604                       	dc.b	nA5, $04
000890BE E109                       	smpsAlterNote       $09
000890C0 C404 8001                  	dc.b	nG5, $04, nRst, $01
000890C4 E10B                       	smpsAlterNote       $0B
000890C6 C604                       	dc.b	nA5, $04
000890C8 E108                       	smpsAlterNote       $08
000890CA C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000890D2 E106                       	smpsAlterNote       $06
000890D4 C904 8001                  	dc.b	nC6, $04, nRst, $01
000890D8 E10C                       	smpsAlterNote       $0C
000890DA C704                       	dc.b	nBb5, $04
000890DC E10B                       	smpsAlterNote       $0B
000890DE C604 8001                  	dc.b	nA5, $04, nRst, $01
000890E2 E109                       	smpsAlterNote       $09
000890E4 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000890EE E10B                       	smpsAlterNote       $0B
000890F0 C60D                       	dc.b	nA5, $0D
000890F2 E108                       	smpsAlterNote       $08
000890F4 E701                       	dc.b	smpsNoAttack, $01
000890F6 E104                       	smpsAlterNote       $04
000890F8 E701                       	dc.b	smpsNoAttack, $01
000890FA E108                       	smpsAlterNote       $08
000890FC E701                       	dc.b	smpsNoAttack, $01
000890FE E10E                       	smpsAlterNote       $0E
00089100 E701                       	dc.b	smpsNoAttack, $01
00089102 E10F                       	smpsAlterNote       $0F
00089104 E701                       	dc.b	smpsNoAttack, $01
00089106 E10B                       	smpsAlterNote       $0B
00089108 E701                       	dc.b	smpsNoAttack, $01
0008910A E105                       	smpsAlterNote       $05
0008910C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089110 E108                       	smpsAlterNote       $08
00089112 E701                       	dc.b	smpsNoAttack, $01
00089114 E10E                       	smpsAlterNote       $0E
00089116 E701                       	dc.b	smpsNoAttack, $01
00089118 E10F                       	smpsAlterNote       $0F
0008911A 8001                       	dc.b	nRst, $01
0008911C E109                       	smpsAlterNote       $09
0008911E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089124 E108                       	smpsAlterNote       $08
00089126 C10D                       	dc.b	nE5, $0D
00089128 E102                       	smpsAlterNote       $02
0008912A E701                       	dc.b	smpsNoAttack, $01
0008912C E101                       	smpsAlterNote       $01
0008912E E701                       	dc.b	smpsNoAttack, $01
00089130 E105                       	smpsAlterNote       $05
00089132 E701                       	dc.b	smpsNoAttack, $01
00089134 E10B                       	smpsAlterNote       $0B
00089136 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008913A E108                       	smpsAlterNote       $08
0008913C E701                       	dc.b	smpsNoAttack, $01
0008913E E102                       	smpsAlterNote       $02
00089140 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089144 E108                       	smpsAlterNote       $08
00089146 E701                       	dc.b	smpsNoAttack, $01
00089148 E10B                       	smpsAlterNote       $0B
0008914A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008914E E105                       	smpsAlterNote       $05
00089150 E701                       	dc.b	smpsNoAttack, $01
00089152 E101                       	smpsAlterNote       $01
00089154 E701                       	dc.b	smpsNoAttack, $01
00089156 E102                       	smpsAlterNote       $02
00089158 E701                       	dc.b	smpsNoAttack, $01
0008915A E108                       	smpsAlterNote       $08
0008915C E701                       	dc.b	smpsNoAttack, $01
0008915E E10C                       	smpsAlterNote       $0C
00089160 E701                       	dc.b	smpsNoAttack, $01
00089162 E108                       	smpsAlterNote       $08
00089164 E701                       	dc.b	smpsNoAttack, $01
00089166 E105                       	smpsAlterNote       $05
00089168 E701                       	dc.b	smpsNoAttack, $01
0008916A E101                       	smpsAlterNote       $01
0008916C E701                       	dc.b	smpsNoAttack, $01
0008916E E105                       	smpsAlterNote       $05
00089170 E701                       	dc.b	smpsNoAttack, $01
00089172 E10B                       	smpsAlterNote       $0B
00089174 E701                       	dc.b	smpsNoAttack, $01
00089176 E10C                       	smpsAlterNote       $0C
00089178 E701                       	dc.b	smpsNoAttack, $01
0008917A E108                       	smpsAlterNote       $08
0008917C E701                       	dc.b	smpsNoAttack, $01
0008917E E102                       	smpsAlterNote       $02
00089180 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089184 E105                       	smpsAlterNote       $05
00089186 E701                       	dc.b	smpsNoAttack, $01
00089188 E10B                       	smpsAlterNote       $0B
0008918A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008918E E105                       	smpsAlterNote       $05
00089190 E701                       	dc.b	smpsNoAttack, $01
00089192 E102                       	smpsAlterNote       $02
00089194 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089198 E108                       	smpsAlterNote       $08
0008919A E701                       	dc.b	smpsNoAttack, $01
0008919C E10C                       	smpsAlterNote       $0C
0008919E E701                       	dc.b	smpsNoAttack, $01
000891A0 E10B                       	smpsAlterNote       $0B
000891A2 E701                       	dc.b	smpsNoAttack, $01
000891A4 E105                       	smpsAlterNote       $05
000891A6 E701                       	dc.b	smpsNoAttack, $01
000891A8 E101                       	smpsAlterNote       $01
000891AA E701                       	dc.b	smpsNoAttack, $01
000891AC E105                       	smpsAlterNote       $05
000891AE E701                       	dc.b	smpsNoAttack, $01
000891B0 E108                       	smpsAlterNote       $08
000891B2 E701                       	dc.b	smpsNoAttack, $01
000891B4 E10C                       	smpsAlterNote       $0C
000891B6 E701                       	dc.b	smpsNoAttack, $01
000891B8 E108                       	smpsAlterNote       $08
000891BA E701                       	dc.b	smpsNoAttack, $01
000891BC E102                       	smpsAlterNote       $02
000891BE E701                       	dc.b	smpsNoAttack, $01
000891C0 E101                       	smpsAlterNote       $01
000891C2 E701                       	dc.b	smpsNoAttack, $01
000891C4 E105                       	smpsAlterNote       $05
000891C6 E701                       	dc.b	smpsNoAttack, $01
000891C8 E10B                       	smpsAlterNote       $0B
000891CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891CE E108                       	smpsAlterNote       $08
000891D0 E701                       	dc.b	smpsNoAttack, $01
000891D2 E102                       	smpsAlterNote       $02
000891D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891D8 E108                       	smpsAlterNote       $08
000891DA E701                       	dc.b	smpsNoAttack, $01
000891DC E10B                       	smpsAlterNote       $0B
000891DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891E2 E105                       	smpsAlterNote       $05
000891E4 E701                       	dc.b	smpsNoAttack, $01
000891E6 E101                       	smpsAlterNote       $01
000891E8 E701                       	dc.b	smpsNoAttack, $01
000891EA E102                       	smpsAlterNote       $02
000891EC E701                       	dc.b	smpsNoAttack, $01
000891EE E108                       	smpsAlterNote       $08
000891F0 E701                       	dc.b	smpsNoAttack, $01
000891F2 E10C                       	smpsAlterNote       $0C
000891F4 E701                       	dc.b	smpsNoAttack, $01
000891F6 E108                       	smpsAlterNote       $08
000891F8 E701                       	dc.b	smpsNoAttack, $01
000891FA E105                       	smpsAlterNote       $05
000891FC E701                       	dc.b	smpsNoAttack, $01
000891FE E101                       	smpsAlterNote       $01
00089200 E701                       	dc.b	smpsNoAttack, $01
00089202 E105                       	smpsAlterNote       $05
00089204 E701                       	dc.b	smpsNoAttack, $01
00089206 E10B                       	smpsAlterNote       $0B
00089208 E701                       	dc.b	smpsNoAttack, $01
0008920A E10C                       	smpsAlterNote       $0C
0008920C E701                       	dc.b	smpsNoAttack, $01
0008920E E108                       	smpsAlterNote       $08
00089210 E701                       	dc.b	smpsNoAttack, $01
00089212 E102                       	smpsAlterNote       $02
00089214 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089218 E105                       	smpsAlterNote       $05
0008921A E701                       	dc.b	smpsNoAttack, $01
0008921C E10B                       	smpsAlterNote       $0B
0008921E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089222 E105                       	smpsAlterNote       $05
00089224 E701                       	dc.b	smpsNoAttack, $01
00089226 E101                       	smpsAlterNote       $01
00089228 E701                       	dc.b	smpsNoAttack, $01
0008922A E102                       	smpsAlterNote       $02
0008922C E701                       	dc.b	smpsNoAttack, $01
0008922E E108                       	smpsAlterNote       $08
00089230 E701                       	dc.b	smpsNoAttack, $01
00089232 E10C                       	smpsAlterNote       $0C
00089234 E701                       	dc.b	smpsNoAttack, $01
00089236 E108                       	smpsAlterNote       $08
00089238 E701                       	dc.b	smpsNoAttack, $01
0008923A E105                       	smpsAlterNote       $05
0008923C E701                       	dc.b	smpsNoAttack, $01
0008923E E101                       	smpsAlterNote       $01
00089240 E701                       	dc.b	smpsNoAttack, $01
00089242 E105                       	smpsAlterNote       $05
00089244 E701                       	dc.b	smpsNoAttack, $01
00089246 E10B                       	smpsAlterNote       $0B
00089248 E701                       	dc.b	smpsNoAttack, $01
0008924A E10C                       	smpsAlterNote       $0C
0008924C E701                       	dc.b	smpsNoAttack, $01
0008924E E108                       	smpsAlterNote       $08
00089250 E701                       	dc.b	smpsNoAttack, $01
00089252 E102                       	smpsAlterNote       $02
00089254 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089258 E105                       	smpsAlterNote       $05
0008925A E701                       	dc.b	smpsNoAttack, $01
0008925C E10B                       	smpsAlterNote       $0B
0008925E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089262 E105                       	smpsAlterNote       $05
00089264 E701                       	dc.b	smpsNoAttack, $01
00089266 E102                       	smpsAlterNote       $02
00089268 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008926C E108                       	smpsAlterNote       $08
0008926E E701                       	dc.b	smpsNoAttack, $01
00089270 E10C                       	smpsAlterNote       $0C
00089272 E701                       	dc.b	smpsNoAttack, $01
00089274 E10B                       	smpsAlterNote       $0B
00089276 E701                       	dc.b	smpsNoAttack, $01
00089278 E105                       	smpsAlterNote       $05
0008927A E701                       	dc.b	smpsNoAttack, $01
0008927C E101                       	smpsAlterNote       $01
0008927E E701                       	dc.b	smpsNoAttack, $01
00089280 E105                       	smpsAlterNote       $05
00089282 E701                       	dc.b	smpsNoAttack, $01
00089284 E108                       	smpsAlterNote       $08
00089286 E701                       	dc.b	smpsNoAttack, $01
00089288 E10C                       	smpsAlterNote       $0C
0008928A E701                       	dc.b	smpsNoAttack, $01
0008928E E10B                       	smpsAlterNote       $0B
00089290 C604 8001                  	dc.b	nA5, $04, nRst, $01
00089294 E109                       	smpsAlterNote       $09
00089296 C404                       	dc.b	nG5, $04
00089298 E10B                       	smpsAlterNote       $0B
0008929A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008929E E107                       	smpsAlterNote       $07
000892A0 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000892A6 E10B                       	smpsAlterNote       $0B
000892A8 C604                       	dc.b	nA5, $04
000892AA E109                       	smpsAlterNote       $09
000892AC C404 8001                  	dc.b	nG5, $04, nRst, $01
000892B0 E10B                       	smpsAlterNote       $0B
000892B2 C604                       	dc.b	nA5, $04
000892B4 E108                       	smpsAlterNote       $08
000892B6 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000892BC E106                       	smpsAlterNote       $06
000892BE C904 8001                  	dc.b	nC6, $04, nRst, $01
000892C2 E10C                       	smpsAlterNote       $0C
000892C4 C704                       	dc.b	nBb5, $04
000892C6 E10B                       	smpsAlterNote       $0B
000892C8 C604 8001                  	dc.b	nA5, $04, nRst, $01
000892CC E109                       	smpsAlterNote       $09
000892CE C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000892D8 E10B                       	smpsAlterNote       $0B
000892DA C60D                       	dc.b	nA5, $0D
000892DC E108                       	smpsAlterNote       $08
000892DE E701                       	dc.b	smpsNoAttack, $01
000892E0 E104                       	smpsAlterNote       $04
000892E2 E701                       	dc.b	smpsNoAttack, $01
000892E4 E108                       	smpsAlterNote       $08
000892E6 E701                       	dc.b	smpsNoAttack, $01
000892E8 E10B                       	smpsAlterNote       $0B
000892EA E701                       	dc.b	smpsNoAttack, $01
000892EC E10F                       	smpsAlterNote       $0F
000892EE E701                       	dc.b	smpsNoAttack, $01
000892F0 E10B                       	smpsAlterNote       $0B
000892F2 E701                       	dc.b	smpsNoAttack, $01
000892F4 E105                       	smpsAlterNote       $05
000892F6 E701                       	dc.b	smpsNoAttack, $01
000892F8 E104                       	smpsAlterNote       $04
000892FA E701                       	dc.b	smpsNoAttack, $01
000892FC E108                       	smpsAlterNote       $08
000892FE E701                       	dc.b	smpsNoAttack, $01
00089300 E10E                       	smpsAlterNote       $0E
00089302 E701                       	dc.b	smpsNoAttack, $01
00089304 E10F                       	smpsAlterNote       $0F
00089306 8001                       	dc.b	nRst, $01
00089308 E109                       	smpsAlterNote       $09
0008930A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00089310 E108                       	smpsAlterNote       $08
00089312 C10D                       	dc.b	nE5, $0D
00089314 E105                       	smpsAlterNote       $05
00089316 E701                       	dc.b	smpsNoAttack, $01
00089318 E101                       	smpsAlterNote       $01
0008931A E701                       	dc.b	smpsNoAttack, $01
0008931C E105                       	smpsAlterNote       $05
0008931E E701                       	dc.b	smpsNoAttack, $01
00089320 E10B                       	smpsAlterNote       $0B
00089322 E701                       	dc.b	smpsNoAttack, $01
00089324 E10C                       	smpsAlterNote       $0C
00089326 E701                       	dc.b	smpsNoAttack, $01
00089328 E108                       	smpsAlterNote       $08
0008932A E701                       	dc.b	smpsNoAttack, $01
0008932C E102                       	smpsAlterNote       $02
0008932E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089332 E105                       	smpsAlterNote       $05
00089334 E701                       	dc.b	smpsNoAttack, $01
00089336 E10B                       	smpsAlterNote       $0B
00089338 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008933C E105                       	smpsAlterNote       $05
0008933E E701                       	dc.b	smpsNoAttack, $01
00089340 E102                       	smpsAlterNote       $02
00089342 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089346 E108                       	smpsAlterNote       $08
00089348 E701                       	dc.b	smpsNoAttack, $01
0008934A E10C                       	smpsAlterNote       $0C
0008934C E701                       	dc.b	smpsNoAttack, $01
0008934E E10B                       	smpsAlterNote       $0B
00089350 E701                       	dc.b	smpsNoAttack, $01
00089352 E105                       	smpsAlterNote       $05
00089354 E701                       	dc.b	smpsNoAttack, $01
00089356 E101                       	smpsAlterNote       $01
00089358 E701                       	dc.b	smpsNoAttack, $01
0008935A E105                       	smpsAlterNote       $05
0008935C E701                       	dc.b	smpsNoAttack, $01
0008935E E108                       	smpsAlterNote       $08
00089360 E701                       	dc.b	smpsNoAttack, $01
00089362 E10C                       	smpsAlterNote       $0C
00089364 E701                       	dc.b	smpsNoAttack, $01
00089366 E108                       	smpsAlterNote       $08
00089368 E701                       	dc.b	smpsNoAttack, $01
0008936A E102                       	smpsAlterNote       $02
0008936C E701                       	dc.b	smpsNoAttack, $01
0008936E E101                       	smpsAlterNote       $01
00089370 E701                       	dc.b	smpsNoAttack, $01
00089372 E105                       	smpsAlterNote       $05
00089374 E701                       	dc.b	smpsNoAttack, $01
00089376 E10B                       	smpsAlterNote       $0B
00089378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008937C E108                       	smpsAlterNote       $08
0008937E E701                       	dc.b	smpsNoAttack, $01
00089380 E102                       	smpsAlterNote       $02
00089382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089386 E108                       	smpsAlterNote       $08
00089388 E701                       	dc.b	smpsNoAttack, $01
0008938A E10B                       	smpsAlterNote       $0B
0008938C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089390 E105                       	smpsAlterNote       $05
00089392 E701                       	dc.b	smpsNoAttack, $01
00089394 E101                       	smpsAlterNote       $01
00089396 E701                       	dc.b	smpsNoAttack, $01
00089398 E102                       	smpsAlterNote       $02
0008939A E701                       	dc.b	smpsNoAttack, $01
0008939C E108                       	smpsAlterNote       $08
0008939E E701                       	dc.b	smpsNoAttack, $01
000893A0 E10C                       	smpsAlterNote       $0C
000893A2 E701                       	dc.b	smpsNoAttack, $01
000893A4 E108                       	smpsAlterNote       $08
000893A6 E701                       	dc.b	smpsNoAttack, $01
000893A8 E105                       	smpsAlterNote       $05
000893AA E701                       	dc.b	smpsNoAttack, $01
000893AC E101                       	smpsAlterNote       $01
000893AE E701                       	dc.b	smpsNoAttack, $01
000893B0 E105                       	smpsAlterNote       $05
000893B2 E701                       	dc.b	smpsNoAttack, $01
000893B4 E10B                       	smpsAlterNote       $0B
000893B6 E701                       	dc.b	smpsNoAttack, $01
000893B8 E10C                       	smpsAlterNote       $0C
000893BA E701                       	dc.b	smpsNoAttack, $01
000893BC E108                       	smpsAlterNote       $08
000893BE E701                       	dc.b	smpsNoAttack, $01
000893C0 E102                       	smpsAlterNote       $02
000893C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893C6 E108                       	smpsAlterNote       $08
000893C8 E701                       	dc.b	smpsNoAttack, $01
000893CA E10B                       	smpsAlterNote       $0B
000893CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893D0 E105                       	smpsAlterNote       $05
000893D2 E701                       	dc.b	smpsNoAttack, $01
000893D4 E101                       	smpsAlterNote       $01
000893D6 E701                       	dc.b	smpsNoAttack, $01
000893D8 E102                       	smpsAlterNote       $02
000893DA E701                       	dc.b	smpsNoAttack, $01
000893DC E108                       	smpsAlterNote       $08
000893DE E701                       	dc.b	smpsNoAttack, $01
000893E0 E10C                       	smpsAlterNote       $0C
000893E2 E701                       	dc.b	smpsNoAttack, $01
000893E4 E108                       	smpsAlterNote       $08
000893E6 E701                       	dc.b	smpsNoAttack, $01
000893E8 E105                       	smpsAlterNote       $05
000893EA E701                       	dc.b	smpsNoAttack, $01
000893EC E101                       	smpsAlterNote       $01
000893EE E701                       	dc.b	smpsNoAttack, $01
000893F0 E105                       	smpsAlterNote       $05
000893F2 E701                       	dc.b	smpsNoAttack, $01
000893F4 E10B                       	smpsAlterNote       $0B
000893F6 E701                       	dc.b	smpsNoAttack, $01
000893F8 E10C                       	smpsAlterNote       $0C
000893FA E701                       	dc.b	smpsNoAttack, $01
000893FC E108                       	smpsAlterNote       $08
000893FE E701                       	dc.b	smpsNoAttack, $01
00089400 E102                       	smpsAlterNote       $02
00089402 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089406 E105                       	smpsAlterNote       $05
00089408 E701                       	dc.b	smpsNoAttack, $01
0008940A E10B                       	smpsAlterNote       $0B
0008940C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089410 E105                       	smpsAlterNote       $05
00089412 E701                       	dc.b	smpsNoAttack, $01
00089414 E102                       	smpsAlterNote       $02
00089416 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008941A E108                       	smpsAlterNote       $08
0008941C E701                       	dc.b	smpsNoAttack, $01
0008941E E10C                       	smpsAlterNote       $0C
00089420 E701                       	dc.b	smpsNoAttack, $01
00089422 E10B                       	smpsAlterNote       $0B
00089424 E701                       	dc.b	smpsNoAttack, $01
00089426 E105                       	smpsAlterNote       $05
00089428 E701                       	dc.b	smpsNoAttack, $01
0008942A E101                       	smpsAlterNote       $01
0008942C E701                       	dc.b	smpsNoAttack, $01
0008942E E105                       	smpsAlterNote       $05
00089430 E701                       	dc.b	smpsNoAttack, $01
00089432 E108                       	smpsAlterNote       $08
00089434 E701                       	dc.b	smpsNoAttack, $01
00089436 E10C                       	smpsAlterNote       $0C
00089438 E701                       	dc.b	smpsNoAttack, $01
0008943A E108                       	smpsAlterNote       $08
0008943C E701                       	dc.b	smpsNoAttack, $01
0008943E E102                       	smpsAlterNote       $02
00089440 E701                       	dc.b	smpsNoAttack, $01
00089442 E101                       	smpsAlterNote       $01
00089444 E701                       	dc.b	smpsNoAttack, $01
00089446 E105                       	smpsAlterNote       $05
00089448 E701                       	dc.b	smpsNoAttack, $01
0008944A E10B                       	smpsAlterNote       $0B
0008944C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089450 E108                       	smpsAlterNote       $08
00089452 E701                       	dc.b	smpsNoAttack, $01
00089454 E102                       	smpsAlterNote       $02
00089456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008945A E108                       	smpsAlterNote       $08
0008945C E701                       	dc.b	smpsNoAttack, $01
0008945E E10B                       	smpsAlterNote       $0B
00089460 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089464 E105                       	smpsAlterNote       $05
00089466 E701                       	dc.b	smpsNoAttack, $01
00089468 E102                       	smpsAlterNote       $02
0008946A 8001                       	dc.b	nRst, $01
0008946C E107                       	smpsAlterNote       $07
0008946E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00089472 E108                       	smpsAlterNote       $08
00089474 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00089478 E102                       	smpsAlterNote       $02
0008947A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008947E E108                       	smpsAlterNote       $08
00089480 E701                       	dc.b	smpsNoAttack, $01
00089482 E10B                       	smpsAlterNote       $0B
00089484 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089488 E105                       	smpsAlterNote       $05
0008948A E701                       	dc.b	smpsNoAttack, $01
0008948C E101                       	smpsAlterNote       $01
0008948E E701                       	dc.b	smpsNoAttack, $01
00089490 E102                       	smpsAlterNote       $02
00089492 E701                       	dc.b	smpsNoAttack, $01
00089494 E108                       	smpsAlterNote       $08
00089496 E701                       	dc.b	smpsNoAttack, $01
00089498 E10C                       	smpsAlterNote       $0C
0008949A E701                       	dc.b	smpsNoAttack, $01
0008949C E108                       	smpsAlterNote       $08
0008949E E701                       	dc.b	smpsNoAttack, $01
000894A0 E105                       	smpsAlterNote       $05
000894A2 E701                       	dc.b	smpsNoAttack, $01
000894A4 E101                       	smpsAlterNote       $01
000894A6 E701                       	dc.b	smpsNoAttack, $01
000894A8 E105                       	smpsAlterNote       $05
000894AA E701                       	dc.b	smpsNoAttack, $01
000894AC E10B                       	smpsAlterNote       $0B
000894AE E701                       	dc.b	smpsNoAttack, $01
000894B0 E10C                       	smpsAlterNote       $0C
000894B2 E701                       	dc.b	smpsNoAttack, $01
000894B4 E108                       	smpsAlterNote       $08
000894B6 E701                       	dc.b	smpsNoAttack, $01
000894B8 E102                       	smpsAlterNote       $02
000894BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894BE E105                       	smpsAlterNote       $05
000894C0 E701                       	dc.b	smpsNoAttack, $01
000894C2 E10B                       	smpsAlterNote       $0B
000894C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000894C8 E105                       	smpsAlterNote       $05
000894CA E701                       	dc.b	smpsNoAttack, $01
000894CC E102                       	smpsAlterNote       $02
000894CE E701                       	dc.b	smpsNoAttack, $01
000894D0 E109                       	smpsAlterNote       $09
000894D2 C40A C207                  	dc.b	nG5, $0A, nF5, $07
000894D6 E108                       	smpsAlterNote       $08
000894D8 C10D                       	dc.b	nE5, $0D
000894DA E105                       	smpsAlterNote       $05
000894DC E701                       	dc.b	smpsNoAttack, $01
000894DE E101                       	smpsAlterNote       $01
000894E0 E701                       	dc.b	smpsNoAttack, $01
000894E2 E102                       	smpsAlterNote       $02
000894E4 E701                       	dc.b	smpsNoAttack, $01
000894E6 E108                       	smpsAlterNote       $08
000894E8 E701                       	dc.b	smpsNoAttack, $01
000894EA E10C                       	smpsAlterNote       $0C
000894EC E701                       	dc.b	smpsNoAttack, $01
000894EE E108                       	smpsAlterNote       $08
000894F0 E701                       	dc.b	smpsNoAttack, $01
000894F2 E105                       	smpsAlterNote       $05
000894F4 E701                       	dc.b	smpsNoAttack, $01
000894F6 E101                       	smpsAlterNote       $01
000894F8 E701                       	dc.b	smpsNoAttack, $01
000894FA E105                       	smpsAlterNote       $05
000894FC E701                       	dc.b	smpsNoAttack, $01
000894FE E10B                       	smpsAlterNote       $0B
00089500 E701                       	dc.b	smpsNoAttack, $01
00089502 E10C                       	smpsAlterNote       $0C
00089504 E701                       	dc.b	smpsNoAttack, $01
00089506 E108                       	smpsAlterNote       $08
00089508 E701                       	dc.b	smpsNoAttack, $01
0008950A E102                       	smpsAlterNote       $02
0008950C E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00089514 E10B                       	smpsAlterNote       $0B
00089516 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008951A E10C                       	smpsAlterNote       $0C
0008951C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00089520 E10B                       	smpsAlterNote       $0B
00089522 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00089528 E107                       	smpsAlterNote       $07
0008952A BF03                       	dc.b	nD5, $03
0008952C E108                       	smpsAlterNote       $08
0008952E C103 8001                  	dc.b	nE5, $03, nRst, $01
00089532 E109                       	smpsAlterNote       $09
00089534 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008953A E10B                       	smpsAlterNote       $0B
0008953C C606 8001                  	dc.b	nA5, $06, nRst, $01
00089540 E107                       	smpsAlterNote       $07
00089542 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00089546 E106                       	smpsAlterNote       $06
00089548 C90D                       	dc.b	nC6, $0D
0008954A E103                       	smpsAlterNote       $03
0008954C E701                       	dc.b	smpsNoAttack, $01
0008954E E1FF                       	smpsAlterNote       $FF
00089550 E701                       	dc.b	smpsNoAttack, $01
00089552 E103                       	smpsAlterNote       $03
00089554 E701                       	dc.b	smpsNoAttack, $01
00089556 E109                       	smpsAlterNote       $09
00089558 E701                       	dc.b	smpsNoAttack, $01
0008955A E10A                       	smpsAlterNote       $0A
0008955C E701                       	dc.b	smpsNoAttack, $01
0008955E E106                       	smpsAlterNote       $06
00089560 E701                       	dc.b	smpsNoAttack, $01
00089562 E100                       	smpsAlterNote       $00
00089564 E701                       	dc.b	smpsNoAttack, $01
00089566 E10C                       	smpsAlterNote       $0C
00089568 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008956C E10B                       	smpsAlterNote       $0B
0008956E C603                       	dc.b	nA5, $03
00089570 E109                       	smpsAlterNote       $09
00089572 C403 8001                  	dc.b	nG5, $03, nRst, $01
00089576 E10B                       	smpsAlterNote       $0B
00089578 C60D                       	dc.b	nA5, $0D
0008957A E105                       	smpsAlterNote       $05
0008957C E701                       	dc.b	smpsNoAttack, $01
0008957E E104                       	smpsAlterNote       $04
00089580 E701                       	dc.b	smpsNoAttack, $01
00089582 E108                       	smpsAlterNote       $08
00089584 E701                       	dc.b	smpsNoAttack, $01
00089586 E10E                       	smpsAlterNote       $0E
00089588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008958C E10B                       	smpsAlterNote       $0B
0008958E E701                       	dc.b	smpsNoAttack, $01
00089590 E105                       	smpsAlterNote       $05
00089592 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089596 E10B                       	smpsAlterNote       $0B
00089598 E701                       	dc.b	smpsNoAttack, $01
0008959A E10E                       	smpsAlterNote       $0E
0008959C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895A0 E108                       	smpsAlterNote       $08
000895A2 E701                       	dc.b	smpsNoAttack, $01
000895A4 E104                       	smpsAlterNote       $04
000895A6 E701                       	dc.b	smpsNoAttack, $01
000895A8 E105                       	smpsAlterNote       $05
000895AA E701                       	dc.b	smpsNoAttack, $01
000895AC E10B                       	smpsAlterNote       $0B
000895AE E701                       	dc.b	smpsNoAttack, $01
000895B0 E10F                       	smpsAlterNote       $0F
000895B2 E701                       	dc.b	smpsNoAttack, $01
000895B4 E10B                       	smpsAlterNote       $0B
000895B6 E701                       	dc.b	smpsNoAttack, $01
000895B8 E108                       	smpsAlterNote       $08
000895BA E701                       	dc.b	smpsNoAttack, $01
000895BC E104                       	smpsAlterNote       $04
000895BE E701                       	dc.b	smpsNoAttack, $01
000895C0 E108                       	smpsAlterNote       $08
000895C2 E701                       	dc.b	smpsNoAttack, $01
000895C4 E10E                       	smpsAlterNote       $0E
000895C6 E701                       	dc.b	smpsNoAttack, $01
000895C8 E10F                       	smpsAlterNote       $0F
000895CA E701                       	dc.b	smpsNoAttack, $01
000895CC E10B                       	smpsAlterNote       $0B
000895CE E701                       	dc.b	smpsNoAttack, $01
000895D0 E105                       	smpsAlterNote       $05
000895D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895D6 E108                       	smpsAlterNote       $08
000895D8 E701                       	dc.b	smpsNoAttack, $01
000895DA E10E                       	smpsAlterNote       $0E
000895DC E701                       	dc.b	smpsNoAttack, $01
000895DE E10F                       	smpsAlterNote       $0F
000895E0 800F                       	dc.b	nRst, $0F
000895E2 E107                       	smpsAlterNote       $07
000895E4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000895E8 E108                       	smpsAlterNote       $08
000895EA C103                       	dc.b	nE5, $03
000895EC E109                       	smpsAlterNote       $09
000895EE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000895F4 E10B                       	smpsAlterNote       $0B
000895F6 C607                       	dc.b	nA5, $07
000895F8 E107                       	smpsAlterNote       $07
000895FA BF03 8001                  	dc.b	nD5, $03, nRst, $01
000895FE E106                       	smpsAlterNote       $06
00089600 C90D                       	dc.b	nC6, $0D
00089602 E107                       	smpsAlterNote       $07
00089604 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00089608 E10C                       	smpsAlterNote       $0C
0008960A C704                       	dc.b	nBb5, $04
0008960C E10B                       	smpsAlterNote       $0B
0008960E C604 8001                  	dc.b	nA5, $04, nRst, $01
00089612 E109                       	smpsAlterNote       $09
00089614 C404                       	dc.b	nG5, $04
00089616 E10B                       	smpsAlterNote       $0B
00089618 C60D                       	dc.b	nA5, $0D
0008961A E108                       	smpsAlterNote       $08
0008961C E701                       	dc.b	smpsNoAttack, $01
0008961E E105                       	smpsAlterNote       $05
00089620 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089624 E10B                       	smpsAlterNote       $0B
00089626 E701                       	dc.b	smpsNoAttack, $01
00089628 E10F                       	smpsAlterNote       $0F
0008962A E701                       	dc.b	smpsNoAttack, $01
0008962C E10E                       	smpsAlterNote       $0E
0008962E E701                       	dc.b	smpsNoAttack, $01
00089630 E108                       	smpsAlterNote       $08
00089632 E701                       	dc.b	smpsNoAttack, $01
00089634 E104                       	smpsAlterNote       $04
00089636 E701                       	dc.b	smpsNoAttack, $01
00089638 E108                       	smpsAlterNote       $08
0008963A E701                       	dc.b	smpsNoAttack, $01
0008963C E10B                       	smpsAlterNote       $0B
0008963E E701                       	dc.b	smpsNoAttack, $01
00089640 E10F                       	smpsAlterNote       $0F
00089642 E701                       	dc.b	smpsNoAttack, $01
00089644 E10B                       	smpsAlterNote       $0B
00089646 E701                       	dc.b	smpsNoAttack, $01
00089648 E105                       	smpsAlterNote       $05
0008964A E701                       	dc.b	smpsNoAttack, $01
0008964C E104                       	smpsAlterNote       $04
0008964E E701                       	dc.b	smpsNoAttack, $01
00089650 E108                       	smpsAlterNote       $08
00089652 E701                       	dc.b	smpsNoAttack, $01
00089654 E10E                       	smpsAlterNote       $0E
00089656 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008965A E10B                       	smpsAlterNote       $0B
0008965C E701                       	dc.b	smpsNoAttack, $01
0008965E E105                       	smpsAlterNote       $05
00089660 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089664 E10B                       	smpsAlterNote       $0B
00089666 E701                       	dc.b	smpsNoAttack, $01
00089668 E10E                       	smpsAlterNote       $0E
0008966A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008966E E108                       	smpsAlterNote       $08
00089670 E701                       	dc.b	smpsNoAttack, $01
00089672 E105                       	smpsAlterNote       $05
00089674 8001                       	dc.b	nRst, $01
00089676 E109                       	smpsAlterNote       $09
00089678 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008967C E10B                       	smpsAlterNote       $0B
0008967E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00089686 E109                       	smpsAlterNote       $09
00089688 C404                       	dc.b	nG5, $04
0008968A E10B                       	smpsAlterNote       $0B
0008968C C604 8001                  	dc.b	nA5, $04, nRst, $01
00089690 E107                       	smpsAlterNote       $07
00089692 BF0D                       	dc.b	nD5, $0D
00089694 E101                       	smpsAlterNote       $01
00089696 E701                       	dc.b	smpsNoAttack, $01
00089698 E100                       	smpsAlterNote       $00
0008969A E701                       	dc.b	smpsNoAttack, $01
0008969C E104                       	smpsAlterNote       $04
0008969E E701                       	dc.b	smpsNoAttack, $01
000896A0 E10A                       	smpsAlterNote       $0A
000896A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896A6 E107                       	smpsAlterNote       $07
000896A8 E701                       	dc.b	smpsNoAttack, $01
000896AA E101                       	smpsAlterNote       $01
000896AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896B0 E107                       	smpsAlterNote       $07
000896B2 E701                       	dc.b	smpsNoAttack, $01
000896B4 E10A                       	smpsAlterNote       $0A
000896B6 E701                       	dc.b	smpsNoAttack, $01
000896B8 E10B                       	smpsAlterNote       $0B
000896BA 8001                       	dc.b	nRst, $01
000896BC E108                       	smpsAlterNote       $08
000896BE 8001                       	dc.b	nRst, $01
000896C0 E109                       	smpsAlterNote       $09
000896C2 8001 C401                  	dc.b	nRst, $01, nG5, $01
000896C6 E10B                       	smpsAlterNote       $0B
000896C8 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000896D0 E108                       	smpsAlterNote       $08
000896D2 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000896D6 E109                       	smpsAlterNote       $09
000896D8 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000896DC E108                       	smpsAlterNote       $08
000896DE CD02 8001                  	dc.b	nE6, $02, nRst, $01
000896E2 E106                       	smpsAlterNote       $06
000896E4 C903                       	dc.b	nC6, $03
000896E6 E109                       	smpsAlterNote       $09
000896E8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000896EC E10C                       	smpsAlterNote       $0C
000896EE C70D                       	dc.b	nBb5, $0D
000896F0 E109                       	smpsAlterNote       $09
000896F2 E701                       	dc.b	smpsNoAttack, $01
000896F4 E105                       	smpsAlterNote       $05
000896F6 E701                       	dc.b	smpsNoAttack, $01
000896F8 E109                       	smpsAlterNote       $09
000896FA E701                       	dc.b	smpsNoAttack, $01
000896FC E10F                       	smpsAlterNote       $0F
000896FE E701                       	dc.b	smpsNoAttack, $01
00089700 E110                       	smpsAlterNote       $10
00089702 E701                       	dc.b	smpsNoAttack, $01
00089704 E10C                       	smpsAlterNote       $0C
00089706 E701                       	dc.b	smpsNoAttack, $01
00089708 E106                       	smpsAlterNote       $06
0008970A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008970E E109                       	smpsAlterNote       $09
00089710 E701                       	dc.b	smpsNoAttack, $01
00089712 E10F                       	smpsAlterNote       $0F
00089714 E701                       	dc.b	smpsNoAttack, $01
00089716 E110                       	smpsAlterNote       $10
00089718 8001                       	dc.b	nRst, $01
0008971A E10B                       	smpsAlterNote       $0B
0008971C C606 8001                  	dc.b	nA5, $06, nRst, $01
00089720 E109                       	smpsAlterNote       $09
00089722 C40D                       	dc.b	nG5, $0D
00089724 E103                       	smpsAlterNote       $03
00089726 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008972A E106                       	smpsAlterNote       $06
0008972C E701                       	dc.b	smpsNoAttack, $01
0008972E E10C                       	smpsAlterNote       $0C
00089730 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089734 E106                       	smpsAlterNote       $06
00089736 E701                       	dc.b	smpsNoAttack, $01
00089738 E103                       	smpsAlterNote       $03
0008973A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008973E E109                       	smpsAlterNote       $09
00089740 E701                       	dc.b	smpsNoAttack, $01
00089742 E10D                       	smpsAlterNote       $0D
00089744 E701                       	dc.b	smpsNoAttack, $01
00089746 E10C                       	smpsAlterNote       $0C
00089748 E701                       	dc.b	smpsNoAttack, $01
0008974A E106                       	smpsAlterNote       $06
0008974C E701                       	dc.b	smpsNoAttack, $01
0008974E E102                       	smpsAlterNote       $02
00089750 E701                       	dc.b	smpsNoAttack, $01
00089752 E103                       	smpsAlterNote       $03
00089754 8001                       	dc.b	nRst, $01
00089756 E10B                       	smpsAlterNote       $0B
00089758 C60D                       	dc.b	nA5, $0D
0008975A E108                       	smpsAlterNote       $08
0008975C E701                       	dc.b	smpsNoAttack, $01
0008975E E104                       	smpsAlterNote       $04
00089760 E701                       	dc.b	smpsNoAttack, $01
00089762 E108                       	smpsAlterNote       $08
00089764 E701                       	dc.b	smpsNoAttack, $01
00089766 E10B                       	smpsAlterNote       $0B
00089768 E701                       	dc.b	smpsNoAttack, $01
0008976A E10F                       	smpsAlterNote       $0F
0008976C E701                       	dc.b	smpsNoAttack, $01
0008976E E10B                       	smpsAlterNote       $0B
00089770 E701                       	dc.b	smpsNoAttack, $01
00089772 E105                       	smpsAlterNote       $05
00089774 E701                       	dc.b	smpsNoAttack, $01
00089776 E104                       	smpsAlterNote       $04
00089778 E701                       	dc.b	smpsNoAttack, $01
0008977A E108                       	smpsAlterNote       $08
0008977C E701                       	dc.b	smpsNoAttack, $01
0008977E E10E                       	smpsAlterNote       $0E
00089780 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089784 E10B                       	smpsAlterNote       $0B
00089786 E701                       	dc.b	smpsNoAttack, $01
00089788 E105                       	smpsAlterNote       $05
0008978A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008978E E10C                       	smpsAlterNote       $0C
00089790 C70E                       	dc.b	nBb5, $0E
00089792 E106                       	smpsAlterNote       $06
00089794 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089798 E10C                       	smpsAlterNote       $0C
0008979A E701                       	dc.b	smpsNoAttack, $01
0008979C E10F                       	smpsAlterNote       $0F
0008979E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897A2 E109                       	smpsAlterNote       $09
000897A4 E701                       	dc.b	smpsNoAttack, $01
000897A6 E105                       	smpsAlterNote       $05
000897A8 E701                       	dc.b	smpsNoAttack, $01
000897AA E106                       	smpsAlterNote       $06
000897AC E701                       	dc.b	smpsNoAttack, $01
000897AE E10C                       	smpsAlterNote       $0C
000897B0 E701                       	dc.b	smpsNoAttack, $01
000897B2 E110                       	smpsAlterNote       $10
000897B4 E701                       	dc.b	smpsNoAttack, $01
000897B6 E10C                       	smpsAlterNote       $0C
000897B8 E701                       	dc.b	smpsNoAttack, $01
000897BA E109                       	smpsAlterNote       $09
000897BC E701                       	dc.b	smpsNoAttack, $01
000897BE E105                       	smpsAlterNote       $05
000897C0 E701                       	dc.b	smpsNoAttack, $01
000897C2 E106                       	smpsAlterNote       $06
000897C4 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000897C8 E107                       	smpsAlterNote       $07
000897CA CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000897CF E108                       	smpsAlterNote       $08
000897D1 CD0D                       	dc.b	nE6, $0D
000897D3 E107                       	smpsAlterNote       $07
000897D5 CB0D                       	dc.b	nD6, $0D
000897D7 E104                       	smpsAlterNote       $04
000897D9 E701                       	dc.b	smpsNoAttack, $01
000897DB E100                       	smpsAlterNote       $00
000897DD E701                       	dc.b	smpsNoAttack, $01
000897DF E101                       	smpsAlterNote       $01
000897E1 E701                       	dc.b	smpsNoAttack, $01
000897E3 E107                       	smpsAlterNote       $07
000897E5 E701                       	dc.b	smpsNoAttack, $01
000897E7 E10B                       	smpsAlterNote       $0B
000897E9 E701                       	dc.b	smpsNoAttack, $01
000897EB E107                       	smpsAlterNote       $07
000897ED E701                       	dc.b	smpsNoAttack, $01
000897EF E104                       	smpsAlterNote       $04
000897F1 E701                       	dc.b	smpsNoAttack, $01
000897F3 E100                       	smpsAlterNote       $00
000897F5 E701                       	dc.b	smpsNoAttack, $01
000897F7 E104                       	smpsAlterNote       $04
000897F9 E701                       	dc.b	smpsNoAttack, $01
000897FB E10A                       	smpsAlterNote       $0A
000897FD E701                       	dc.b	smpsNoAttack, $01
000897FF E10B                       	smpsAlterNote       $0B
00089801 E701                       	dc.b	smpsNoAttack, $01
00089803 E108                       	smpsAlterNote       $08
00089805 CC0D                       	dc.b	nEb6, $0D
00089807 E105                       	smpsAlterNote       $05
00089809 E701                       	dc.b	smpsNoAttack, $01
0008980B E101                       	smpsAlterNote       $01
0008980D E701                       	dc.b	smpsNoAttack, $01
0008980F E102                       	smpsAlterNote       $02
00089811 E701                       	dc.b	smpsNoAttack, $01
00089813 E108                       	smpsAlterNote       $08
00089815 E701                       	dc.b	smpsNoAttack, $01
00089817 E106                       	smpsAlterNote       $06
00089819 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00089825 8001                       	dc.b	nRst, $01
00089827 E107                       	smpsAlterNote       $07
00089829 CB0D                       	dc.b	nD6, $0D
0008982B E104                       	smpsAlterNote       $04
0008982D E701                       	dc.b	smpsNoAttack, $01
0008982F E100                       	smpsAlterNote       $00
00089831 E701                       	dc.b	smpsNoAttack, $01
00089833 E104                       	smpsAlterNote       $04
00089835 E701                       	dc.b	smpsNoAttack, $01
00089837 E107                       	smpsAlterNote       $07
00089839 E701                       	dc.b	smpsNoAttack, $01
0008983B E10B                       	smpsAlterNote       $0B
0008983D E701                       	dc.b	smpsNoAttack, $01
0008983F E107                       	smpsAlterNote       $07
00089841 E701                       	dc.b	smpsNoAttack, $01
00089843 E101                       	smpsAlterNote       $01
00089845 E701                       	dc.b	smpsNoAttack, $01
00089847 E100                       	smpsAlterNote       $00
00089849 E701                       	dc.b	smpsNoAttack, $01
0008984B E104                       	smpsAlterNote       $04
0008984D E701                       	dc.b	smpsNoAttack, $01
0008984F E10A                       	smpsAlterNote       $0A
00089851 E701                       	dc.b	smpsNoAttack, $01
00089853 E10B                       	smpsAlterNote       $0B
00089855 8001                       	dc.b	nRst, $01
00089857 E109                       	smpsAlterNote       $09
00089859 CE0A                       	dc.b	nF6, $0A
0008985B E108                       	smpsAlterNote       $08
0008985D CC07                       	dc.b	nEb6, $07
0008985F E106                       	smpsAlterNote       $06
00089861 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008986D E107                       	smpsAlterNote       $07
0008986F CB0D                       	dc.b	nD6, $0D
00089871 E101                       	smpsAlterNote       $01
00089873 E701                       	dc.b	smpsNoAttack, $01
00089875 E100                       	smpsAlterNote       $00
00089877 E701                       	dc.b	smpsNoAttack, $01
00089879 E104                       	smpsAlterNote       $04
0008987B E701                       	dc.b	smpsNoAttack, $01
0008987D E10A                       	smpsAlterNote       $0A
0008987F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089883 E107                       	smpsAlterNote       $07
00089885 E701                       	dc.b	smpsNoAttack, $01
00089887 E101                       	smpsAlterNote       $01
00089889 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008988D E107                       	smpsAlterNote       $07
0008988F E701                       	dc.b	smpsNoAttack, $01
00089891 E10A                       	smpsAlterNote       $0A
00089893 E701                       	dc.b	smpsNoAttack, $01
00089895 E10B                       	smpsAlterNote       $0B
00089897 8001                       	dc.b	nRst, $01
00089899 E108                       	smpsAlterNote       $08
0008989B CC0D                       	dc.b	nEb6, $0D
0008989D E102                       	smpsAlterNote       $02
0008989F E701                       	dc.b	smpsNoAttack, $01
000898A1 E101                       	smpsAlterNote       $01
000898A3 E701                       	dc.b	smpsNoAttack, $01
000898A5 E105                       	smpsAlterNote       $05
000898A7 E701                       	dc.b	smpsNoAttack, $01
000898A9 E108                       	smpsAlterNote       $08
000898AB 8001                       	dc.b	nRst, $01
000898AD E106                       	smpsAlterNote       $06
000898AF C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000898BB 8001                       	dc.b	nRst, $01
000898BD E107                       	smpsAlterNote       $07
000898BF CB0D                       	dc.b	nD6, $0D
000898C1 E101                       	smpsAlterNote       $01
000898C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898C7 E104                       	smpsAlterNote       $04
000898C9 E701                       	dc.b	smpsNoAttack, $01
000898CB E10A                       	smpsAlterNote       $0A
000898CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898D1 E104                       	smpsAlterNote       $04
000898D3 E701                       	dc.b	smpsNoAttack, $01
000898D5 E101                       	smpsAlterNote       $01
000898D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898DB E107                       	smpsAlterNote       $07
000898DD E701                       	dc.b	smpsNoAttack, $01
000898DF E10B                       	smpsAlterNote       $0B
000898E1 E701                       	dc.b	smpsNoAttack, $01
000898E3 E10A                       	smpsAlterNote       $0A
000898E5 E701                       	dc.b	smpsNoAttack, $01
000898E7 E104                       	smpsAlterNote       $04
000898E9 E701                       	dc.b	smpsNoAttack, $01
000898EB E100                       	smpsAlterNote       $00
000898ED E701                       	dc.b	smpsNoAttack, $01
000898EF E101                       	smpsAlterNote       $01
000898F1 801C                       	dc.b	nRst, $1C
000898F5 E107                       	smpsAlterNote       $07
000898F7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000898FB E603                       	smpsAlterVol        $03
000898FD F6F1 AD                    	smpsJump            music84_Jump03
00089900                            
00089900                            ; FM3 Data
00089900                            music84_FM3:
00089900 E0C0                       	smpsPan             panCenter, $00
00089904 E109                       	smpsAlterNote       $09
00089906 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008990A E108                       	smpsAlterNote       $08
0008990C C103 800B                  	dc.b	nE5, $03, nRst, $0B
00089910 E10B                       	smpsAlterNote       $0B
00089912 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00089918 E040                       	smpsPan             panRight, $00
0008991A E110                       	smpsAlterNote       $10
0008991C E6F9                       	smpsAlterVol        $F9
0008991E C702 8001                  	dc.b	nBb5, $02, nRst, $01
00089922 E10F                       	smpsAlterNote       $0F
00089924 C603                       	dc.b	nA5, $03
00089926 E10D                       	smpsAlterNote       $0D
00089928 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008992E E10C                       	smpsAlterNote       $0C
00089930 C103 8001                  	dc.b	nE5, $03, nRst, $01
00089934 E10A                       	smpsAlterNote       $0A
00089936 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008993A E10F                       	smpsAlterNote       $0F
0008993C BA01 8001                  	dc.b	nA4, $01, nRst, $01
00089940 E0C0                       	smpsPan             panCenter, $00
00089944 E109                       	smpsAlterNote       $09
00089946 E609                       	smpsAlterVol        $09
00089948 B603                       	dc.b	nF4, $03
0008994A                            
0008994A                            music84_Jump02:
0008994A E70A                       	dc.b	smpsNoAttack, $0A
0008994C E103                       	smpsAlterNote       $03
0008994E E701                       	dc.b	smpsNoAttack, $01
00089950 E102                       	smpsAlterNote       $02
00089952 E701                       	dc.b	smpsNoAttack, $01
00089954 E106                       	smpsAlterNote       $06
00089956 E701                       	dc.b	smpsNoAttack, $01
00089958 E10C                       	smpsAlterNote       $0C
0008995A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008995E E109                       	smpsAlterNote       $09
00089960 E701                       	dc.b	smpsNoAttack, $01
00089962 E103                       	smpsAlterNote       $03
00089964 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089968 E109                       	smpsAlterNote       $09
0008996A E701                       	dc.b	smpsNoAttack, $01
0008996C E10C                       	smpsAlterNote       $0C
0008996E E701                       	dc.b	smpsNoAttack, $01
00089970 E10D                       	smpsAlterNote       $0D
00089972 8001                       	dc.b	nRst, $01
00089974 E109                       	smpsAlterNote       $09
00089976 B80D                       	dc.b	nG4, $0D
00089978 E103                       	smpsAlterNote       $03
0008997A E701                       	dc.b	smpsNoAttack, $01
0008997C E102                       	smpsAlterNote       $02
0008997E E701                       	dc.b	smpsNoAttack, $01
00089980 E106                       	smpsAlterNote       $06
00089982 E701                       	dc.b	smpsNoAttack, $01
00089984 E10C                       	smpsAlterNote       $0C
00089986 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008998A E109                       	smpsAlterNote       $09
0008998C E701                       	dc.b	smpsNoAttack, $01
0008998E E103                       	smpsAlterNote       $03
00089990 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089994 E109                       	smpsAlterNote       $09
00089996 E701                       	dc.b	smpsNoAttack, $01
00089998 E10C                       	smpsAlterNote       $0C
0008999A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008999E E106                       	smpsAlterNote       $06
000899A0 E701                       	dc.b	smpsNoAttack, $01
000899A2 E102                       	smpsAlterNote       $02
000899A4 E701                       	dc.b	smpsNoAttack, $01
000899A6 E103                       	smpsAlterNote       $03
000899A8 E701                       	dc.b	smpsNoAttack, $01
000899AA E109                       	smpsAlterNote       $09
000899AC E701                       	dc.b	smpsNoAttack, $01
000899AE E10D                       	smpsAlterNote       $0D
000899B0 E701                       	dc.b	smpsNoAttack, $01
000899B2 E109                       	smpsAlterNote       $09
000899B4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000899B8 E10B                       	smpsAlterNote       $0B
000899BA BA0D                       	dc.b	nA4, $0D
000899BC E105                       	smpsAlterNote       $05
000899BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899C2 E108                       	smpsAlterNote       $08
000899C4 E701                       	dc.b	smpsNoAttack, $01
000899C6 E10E                       	smpsAlterNote       $0E
000899C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899CC E108                       	smpsAlterNote       $08
000899CE E701                       	dc.b	smpsNoAttack, $01
000899D0 E104                       	smpsAlterNote       $04
000899D2 E701                       	dc.b	smpsNoAttack, $01
000899D4 E105                       	smpsAlterNote       $05
000899D6 E701                       	dc.b	smpsNoAttack, $01
000899D8 E10B                       	smpsAlterNote       $0B
000899DA E701                       	dc.b	smpsNoAttack, $01
000899DC E10F                       	smpsAlterNote       $0F
000899DE E701                       	dc.b	smpsNoAttack, $01
000899E0 E10B                       	smpsAlterNote       $0B
000899E2 E701                       	dc.b	smpsNoAttack, $01
000899E4 E108                       	smpsAlterNote       $08
000899E6 E701                       	dc.b	smpsNoAttack, $01
000899E8 E104                       	smpsAlterNote       $04
000899EA E701                       	dc.b	smpsNoAttack, $01
000899EC E108                       	smpsAlterNote       $08
000899EE E701                       	dc.b	smpsNoAttack, $01
000899F0 E10E                       	smpsAlterNote       $0E
000899F2 E701                       	dc.b	smpsNoAttack, $01
000899F4 E10F                       	smpsAlterNote       $0F
000899F6 E701                       	dc.b	smpsNoAttack, $01
000899F8 E10B                       	smpsAlterNote       $0B
000899FA E701                       	dc.b	smpsNoAttack, $01
000899FC E105                       	smpsAlterNote       $05
000899FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A02 E108                       	smpsAlterNote       $08
00089A04 E701                       	dc.b	smpsNoAttack, $01
00089A06 E10E                       	smpsAlterNote       $0E
00089A08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A0C E108                       	smpsAlterNote       $08
00089A0E E701                       	dc.b	smpsNoAttack, $01
00089A10 E105                       	smpsAlterNote       $05
00089A12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A16 E10B                       	smpsAlterNote       $0B
00089A18 E701                       	dc.b	smpsNoAttack, $01
00089A1A E10F                       	smpsAlterNote       $0F
00089A1C E701                       	dc.b	smpsNoAttack, $01
00089A1E E10E                       	smpsAlterNote       $0E
00089A20 E701                       	dc.b	smpsNoAttack, $01
00089A22 E108                       	smpsAlterNote       $08
00089A24 E701                       	dc.b	smpsNoAttack, $01
00089A26 E104                       	smpsAlterNote       $04
00089A28 E701                       	dc.b	smpsNoAttack, $01
00089A2A E105                       	smpsAlterNote       $05
00089A2C 8001                       	dc.b	nRst, $01
00089A2E E108                       	smpsAlterNote       $08
00089A30 B50A                       	dc.b	nE4, $0A
00089A32 E109                       	smpsAlterNote       $09
00089A34 B60D                       	dc.b	nF4, $0D
00089A36 E106                       	smpsAlterNote       $06
00089A38 E701                       	dc.b	smpsNoAttack, $01
00089A3A E103                       	smpsAlterNote       $03
00089A3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A40 E109                       	smpsAlterNote       $09
00089A42 E701                       	dc.b	smpsNoAttack, $01
00089A44 E10D                       	smpsAlterNote       $0D
00089A46 E701                       	dc.b	smpsNoAttack, $01
00089A48 E10C                       	smpsAlterNote       $0C
00089A4A E701                       	dc.b	smpsNoAttack, $01
00089A4C E106                       	smpsAlterNote       $06
00089A4E E701                       	dc.b	smpsNoAttack, $01
00089A50 E102                       	smpsAlterNote       $02
00089A52 E701                       	dc.b	smpsNoAttack, $01
00089A54 E106                       	smpsAlterNote       $06
00089A56 E701                       	dc.b	smpsNoAttack, $01
00089A58 E109                       	smpsAlterNote       $09
00089A5A E701                       	dc.b	smpsNoAttack, $01
00089A5C E10D                       	smpsAlterNote       $0D
00089A5E E701                       	dc.b	smpsNoAttack, $01
00089A60 E109                       	smpsAlterNote       $09
00089A62 B80D                       	dc.b	nG4, $0D
00089A64 E106                       	smpsAlterNote       $06
00089A66 E701                       	dc.b	smpsNoAttack, $01
00089A68 E103                       	smpsAlterNote       $03
00089A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A6E E109                       	smpsAlterNote       $09
00089A70 E701                       	dc.b	smpsNoAttack, $01
00089A72 E10D                       	smpsAlterNote       $0D
00089A74 E701                       	dc.b	smpsNoAttack, $01
00089A76 E10C                       	smpsAlterNote       $0C
00089A78 E701                       	dc.b	smpsNoAttack, $01
00089A7A E106                       	smpsAlterNote       $06
00089A7C E701                       	dc.b	smpsNoAttack, $01
00089A7E E102                       	smpsAlterNote       $02
00089A80 E701                       	dc.b	smpsNoAttack, $01
00089A82 E106                       	smpsAlterNote       $06
00089A84 E701                       	dc.b	smpsNoAttack, $01
00089A86 E109                       	smpsAlterNote       $09
00089A88 E701                       	dc.b	smpsNoAttack, $01
00089A8A E10D                       	smpsAlterNote       $0D
00089A8C E701                       	dc.b	smpsNoAttack, $01
00089A8E E109                       	smpsAlterNote       $09
00089A90 E701                       	dc.b	smpsNoAttack, $01
00089A92 E103                       	smpsAlterNote       $03
00089A94 E701                       	dc.b	smpsNoAttack, $01
00089A96 E102                       	smpsAlterNote       $02
00089A98 E701                       	dc.b	smpsNoAttack, $01
00089A9A E106                       	smpsAlterNote       $06
00089A9C E701                       	dc.b	smpsNoAttack, $01
00089A9E E10C                       	smpsAlterNote       $0C
00089AA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AA4 E109                       	smpsAlterNote       $09
00089AA6 E701                       	dc.b	smpsNoAttack, $01
00089AA8 E10B                       	smpsAlterNote       $0B
00089AAA BA0D                       	dc.b	nA4, $0D
00089AAC E108                       	smpsAlterNote       $08
00089AAE E701                       	dc.b	smpsNoAttack, $01
00089AB0 E104                       	smpsAlterNote       $04
00089AB2 E701                       	dc.b	smpsNoAttack, $01
00089AB4 E108                       	smpsAlterNote       $08
00089AB6 E701                       	dc.b	smpsNoAttack, $01
00089AB8 E10B                       	smpsAlterNote       $0B
00089ABA E701                       	dc.b	smpsNoAttack, $01
00089ABC E10F                       	smpsAlterNote       $0F
00089ABE E701                       	dc.b	smpsNoAttack, $01
00089AC0 E10B                       	smpsAlterNote       $0B
00089AC2 E701                       	dc.b	smpsNoAttack, $01
00089AC4 E105                       	smpsAlterNote       $05
00089AC6 E701                       	dc.b	smpsNoAttack, $01
00089AC8 E104                       	smpsAlterNote       $04
00089ACA E701                       	dc.b	smpsNoAttack, $01
00089ACC E108                       	smpsAlterNote       $08
00089ACE E701                       	dc.b	smpsNoAttack, $01
00089AD0 E10E                       	smpsAlterNote       $0E
00089AD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AD6 E10B                       	smpsAlterNote       $0B
00089AD8 E701                       	dc.b	smpsNoAttack, $01
00089ADA E105                       	smpsAlterNote       $05
00089ADC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AE0 E10B                       	smpsAlterNote       $0B
00089AE2 E701                       	dc.b	smpsNoAttack, $01
00089AE4 E10E                       	smpsAlterNote       $0E
00089AE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AEA E108                       	smpsAlterNote       $08
00089AEC E701                       	dc.b	smpsNoAttack, $01
00089AEE E104                       	smpsAlterNote       $04
00089AF0 E701                       	dc.b	smpsNoAttack, $01
00089AF2 E105                       	smpsAlterNote       $05
00089AF4 E701                       	dc.b	smpsNoAttack, $01
00089AF6 E10B                       	smpsAlterNote       $0B
00089AF8 E701                       	dc.b	smpsNoAttack, $01
00089AFA E10F                       	smpsAlterNote       $0F
00089AFC E701                       	dc.b	smpsNoAttack, $01
00089AFE E10B                       	smpsAlterNote       $0B
00089B00 E701                       	dc.b	smpsNoAttack, $01
00089B02 E108                       	smpsAlterNote       $08
00089B04 E701                       	dc.b	smpsNoAttack, $01
00089B06 E105                       	smpsAlterNote       $05
00089B08 8001                       	dc.b	nRst, $01
00089B0A E109                       	smpsAlterNote       $09
00089B0C B609 8001                  	dc.b	nF4, $09, nRst, $01
00089B10 E108                       	smpsAlterNote       $08
00089B12 B506 8001                  	dc.b	nE4, $06, nRst, $01
00089B16 E107                       	smpsAlterNote       $07
00089B18 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00089B1C E108                       	smpsAlterNote       $08
00089B1E B502 8001                  	dc.b	nE4, $02, nRst, $01
00089B22 E109                       	smpsAlterNote       $09
00089B24 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
00089B2A E10B                       	smpsAlterNote       $0B
00089B2C BA0D                       	dc.b	nA4, $0D
00089B2E E108                       	smpsAlterNote       $08
00089B30 E701                       	dc.b	smpsNoAttack, $01
00089B32 E104                       	smpsAlterNote       $04
00089B34 E701                       	dc.b	smpsNoAttack, $01
00089B36 E108                       	smpsAlterNote       $08
00089B38 E701                       	dc.b	smpsNoAttack, $01
00089B3A E10E                       	smpsAlterNote       $0E
00089B3C E701                       	dc.b	smpsNoAttack, $01
00089B3E E10F                       	smpsAlterNote       $0F
00089B40 E701                       	dc.b	smpsNoAttack, $01
00089B42 E10B                       	smpsAlterNote       $0B
00089B44 E701                       	dc.b	smpsNoAttack, $01
00089B46 E105                       	smpsAlterNote       $05
00089B48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B4C E108                       	smpsAlterNote       $08
00089B4E E701                       	dc.b	smpsNoAttack, $01
00089B50 E10E                       	smpsAlterNote       $0E
00089B52 E701                       	dc.b	smpsNoAttack, $01
00089B54 E10F                       	smpsAlterNote       $0F
00089B56 8001                       	dc.b	nRst, $01
00089B58 E109                       	smpsAlterNote       $09
00089B5A C20D                       	dc.b	nF5, $0D
00089B5C E103                       	smpsAlterNote       $03
00089B5E E701                       	dc.b	smpsNoAttack, $01
00089B60 E102                       	smpsAlterNote       $02
00089B62 E701                       	dc.b	smpsNoAttack, $01
00089B64 E106                       	smpsAlterNote       $06
00089B66 E701                       	dc.b	smpsNoAttack, $01
00089B68 E10C                       	smpsAlterNote       $0C
00089B6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B6E E109                       	smpsAlterNote       $09
00089B70 E701                       	dc.b	smpsNoAttack, $01
00089B72 E103                       	smpsAlterNote       $03
00089B74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B78 E109                       	smpsAlterNote       $09
00089B7A E701                       	dc.b	smpsNoAttack, $01
00089B7C E10C                       	smpsAlterNote       $0C
00089B7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089B82 E106                       	smpsAlterNote       $06
00089B84 E701                       	dc.b	smpsNoAttack, $01
00089B86 E102                       	smpsAlterNote       $02
00089B88 E701                       	dc.b	smpsNoAttack, $01
00089B8A E103                       	smpsAlterNote       $03
00089B8C E701                       	dc.b	smpsNoAttack, $01
00089B8E E109                       	smpsAlterNote       $09
00089B90 E701                       	dc.b	smpsNoAttack, $01
00089B92 E10D                       	smpsAlterNote       $0D
00089B94 E701                       	dc.b	smpsNoAttack, $01
00089B96 E109                       	smpsAlterNote       $09
00089B98 E701                       	dc.b	smpsNoAttack, $01
00089B9A E106                       	smpsAlterNote       $06
00089B9C E701                       	dc.b	smpsNoAttack, $01
00089B9E E102                       	smpsAlterNote       $02
00089BA0 E701                       	dc.b	smpsNoAttack, $01
00089BA2 E106                       	smpsAlterNote       $06
00089BA4 E701                       	dc.b	smpsNoAttack, $01
00089BA6 E10C                       	smpsAlterNote       $0C
00089BA8 E701                       	dc.b	smpsNoAttack, $01
00089BAA E10D                       	smpsAlterNote       $0D
00089BAC E701                       	dc.b	smpsNoAttack, $01
00089BAE E109                       	smpsAlterNote       $09
00089BB0 E701                       	dc.b	smpsNoAttack, $01
00089BB2 E103                       	smpsAlterNote       $03
00089BB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BB8 E106                       	smpsAlterNote       $06
00089BBA E701                       	dc.b	smpsNoAttack, $01
00089BBC E10C                       	smpsAlterNote       $0C
00089BBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BC2 E106                       	smpsAlterNote       $06
00089BC4 E701                       	dc.b	smpsNoAttack, $01
00089BC6 E103                       	smpsAlterNote       $03
00089BC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089BCC E109                       	smpsAlterNote       $09
00089BCE E701                       	dc.b	smpsNoAttack, $01
00089BD0 E10D                       	smpsAlterNote       $0D
00089BD2 E701                       	dc.b	smpsNoAttack, $01
00089BD4 E10C                       	smpsAlterNote       $0C
00089BD6 E701                       	dc.b	smpsNoAttack, $01
00089BD8 E106                       	smpsAlterNote       $06
00089BDA E701                       	dc.b	smpsNoAttack, $01
00089BDC E102                       	smpsAlterNote       $02
00089BDE E701                       	dc.b	smpsNoAttack, $01
00089BE0 E106                       	smpsAlterNote       $06
00089BE2 E701                       	dc.b	smpsNoAttack, $01
00089BE4 E109                       	smpsAlterNote       $09
00089BE6 E701                       	dc.b	smpsNoAttack, $01
00089BE8 E10D                       	smpsAlterNote       $0D
00089BEA E701                       	dc.b	smpsNoAttack, $01
00089BEC E109                       	smpsAlterNote       $09
00089BEE E701                       	dc.b	smpsNoAttack, $01
00089BF0 E103                       	smpsAlterNote       $03
00089BF2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089BF6 E109                       	smpsAlterNote       $09
00089BF8 C206                       	dc.b	nF5, $06
00089BFA E108                       	smpsAlterNote       $08
00089BFC C10E                       	dc.b	nE5, $0E
00089BFE E102                       	smpsAlterNote       $02
00089C00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C04 E108                       	smpsAlterNote       $08
00089C06 E701                       	dc.b	smpsNoAttack, $01
00089C08 E10B                       	smpsAlterNote       $0B
00089C0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C0E E105                       	smpsAlterNote       $05
00089C10 E701                       	dc.b	smpsNoAttack, $01
00089C12 E101                       	smpsAlterNote       $01
00089C14 E701                       	dc.b	smpsNoAttack, $01
00089C16 E102                       	smpsAlterNote       $02
00089C18 E701                       	dc.b	smpsNoAttack, $01
00089C1A E108                       	smpsAlterNote       $08
00089C1C E701                       	dc.b	smpsNoAttack, $01
00089C1E E10C                       	smpsAlterNote       $0C
00089C20 E701                       	dc.b	smpsNoAttack, $01
00089C22 E107                       	smpsAlterNote       $07
00089C24 BF0E                       	dc.b	nD5, $0E
00089C26 E101                       	smpsAlterNote       $01
00089C28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C2C E107                       	smpsAlterNote       $07
00089C2E E701                       	dc.b	smpsNoAttack, $01
00089C30 E10A                       	smpsAlterNote       $0A
00089C32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C36 E104                       	smpsAlterNote       $04
00089C38 E701                       	dc.b	smpsNoAttack, $01
00089C3A E100                       	smpsAlterNote       $00
00089C3C E701                       	dc.b	smpsNoAttack, $01
00089C3E E104                       	smpsAlterNote       $04
00089C40 E701                       	dc.b	smpsNoAttack, $01
00089C42 E107                       	smpsAlterNote       $07
00089C44 E701                       	dc.b	smpsNoAttack, $01
00089C46 E10B                       	smpsAlterNote       $0B
00089C48 E701                       	dc.b	smpsNoAttack, $01
00089C4A E107                       	smpsAlterNote       $07
00089C4C E701                       	dc.b	smpsNoAttack, $01
00089C4E E101                       	smpsAlterNote       $01
00089C50 E701                       	dc.b	smpsNoAttack, $01
00089C52 E100                       	smpsAlterNote       $00
00089C54 E701                       	dc.b	smpsNoAttack, $01
00089C56 E104                       	smpsAlterNote       $04
00089C58 E701                       	dc.b	smpsNoAttack, $01
00089C5A E10A                       	smpsAlterNote       $0A
00089C5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C60 E107                       	smpsAlterNote       $07
00089C62 E701                       	dc.b	smpsNoAttack, $01
00089C64 E101                       	smpsAlterNote       $01
00089C66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C6A E107                       	smpsAlterNote       $07
00089C6C E701                       	dc.b	smpsNoAttack, $01
00089C6E E10A                       	smpsAlterNote       $0A
00089C70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089C74 E104                       	smpsAlterNote       $04
00089C76 E701                       	dc.b	smpsNoAttack, $01
00089C78 E100                       	smpsAlterNote       $00
00089C7A E701                       	dc.b	smpsNoAttack, $01
00089C7C E101                       	smpsAlterNote       $01
00089C7E E701                       	dc.b	smpsNoAttack, $01
00089C80 E107                       	smpsAlterNote       $07
00089C82 E701                       	dc.b	smpsNoAttack, $01
00089C84 E10B                       	smpsAlterNote       $0B
00089C86 E701                       	dc.b	smpsNoAttack, $01
00089C88 E107                       	smpsAlterNote       $07
00089C8A E701                       	dc.b	smpsNoAttack, $01
00089C8C E104                       	smpsAlterNote       $04
00089C8E E701                       	dc.b	smpsNoAttack, $01
00089C90 E100                       	smpsAlterNote       $00
00089C92 E701                       	dc.b	smpsNoAttack, $01
00089C94 E104                       	smpsAlterNote       $04
00089C96 E701                       	dc.b	smpsNoAttack, $01
00089C98 E10A                       	smpsAlterNote       $0A
00089C9A E701                       	dc.b	smpsNoAttack, $01
00089C9C E10B                       	smpsAlterNote       $0B
00089C9E E701                       	dc.b	smpsNoAttack, $01
00089CA0 E107                       	smpsAlterNote       $07
00089CA2 E701                       	dc.b	smpsNoAttack, $01
00089CA4 E101                       	smpsAlterNote       $01
00089CA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CAA E104                       	smpsAlterNote       $04
00089CAC E701                       	dc.b	smpsNoAttack, $01
00089CAE E10A                       	smpsAlterNote       $0A
00089CB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089CB4 E104                       	smpsAlterNote       $04
00089CB6 E701                       	dc.b	smpsNoAttack, $01
00089CB8 E101                       	smpsAlterNote       $01
00089CBA E701                       	dc.b	smpsNoAttack, $01
00089CBE E107                       	smpsAlterNote       $07
00089CC0 E6FF                       	smpsAlterVol        $FF
00089CC2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00089CCE 8004                       	dc.b	nRst, $04
00089CD2 E109                       	smpsAlterNote       $09
00089CD4 E602                       	smpsAlterVol        $02
00089CD6 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00089CDC E108                       	smpsAlterNote       $08
00089CDE B502 8001                  	dc.b	nE4, $02, nRst, $01
00089CE2 E109                       	smpsAlterNote       $09
00089CE4 B60D                       	dc.b	nF4, $0D
00089CE6 E106                       	smpsAlterNote       $06
00089CE8 E701                       	dc.b	smpsNoAttack, $01
00089CEA E102                       	smpsAlterNote       $02
00089CEC E701                       	dc.b	smpsNoAttack, $01
00089CEE E106                       	smpsAlterNote       $06
00089CF0 E701                       	dc.b	smpsNoAttack, $01
00089CF2 E109                       	smpsAlterNote       $09
00089CF4 E701                       	dc.b	smpsNoAttack, $01
00089CF6 E10D                       	smpsAlterNote       $0D
00089CF8 E701                       	dc.b	smpsNoAttack, $01
00089CFA E109                       	smpsAlterNote       $09
00089CFC E701                       	dc.b	smpsNoAttack, $01
00089CFE E103                       	smpsAlterNote       $03
00089D00 E701                       	dc.b	smpsNoAttack, $01
00089D02 E102                       	smpsAlterNote       $02
00089D04 E701                       	dc.b	smpsNoAttack, $01
00089D06 E106                       	smpsAlterNote       $06
00089D08 E701                       	dc.b	smpsNoAttack, $01
00089D0A E10C                       	smpsAlterNote       $0C
00089D0C E701                       	dc.b	smpsNoAttack, $01
00089D0E E10D                       	smpsAlterNote       $0D
00089D10 8001                       	dc.b	nRst, $01
00089D12 E109                       	smpsAlterNote       $09
00089D14 B80D                       	dc.b	nG4, $0D
00089D16 E106                       	smpsAlterNote       $06
00089D18 E701                       	dc.b	smpsNoAttack, $01
00089D1A E102                       	smpsAlterNote       $02
00089D1C E701                       	dc.b	smpsNoAttack, $01
00089D1E E106                       	smpsAlterNote       $06
00089D20 E701                       	dc.b	smpsNoAttack, $01
00089D22 E10C                       	smpsAlterNote       $0C
00089D24 E701                       	dc.b	smpsNoAttack, $01
00089D26 E10D                       	smpsAlterNote       $0D
00089D28 E701                       	dc.b	smpsNoAttack, $01
00089D2A E109                       	smpsAlterNote       $09
00089D2C E701                       	dc.b	smpsNoAttack, $01
00089D2E E103                       	smpsAlterNote       $03
00089D30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D34 E106                       	smpsAlterNote       $06
00089D36 E701                       	dc.b	smpsNoAttack, $01
00089D38 E10C                       	smpsAlterNote       $0C
00089D3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D3E E106                       	smpsAlterNote       $06
00089D40 E701                       	dc.b	smpsNoAttack, $01
00089D42 E103                       	smpsAlterNote       $03
00089D44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089D48 E109                       	smpsAlterNote       $09
00089D4A E701                       	dc.b	smpsNoAttack, $01
00089D4C E10D                       	smpsAlterNote       $0D
00089D4E E701                       	dc.b	smpsNoAttack, $01
00089D50 E10C                       	smpsAlterNote       $0C
00089D52 E701                       	dc.b	smpsNoAttack, $01
00089D54 E109                       	smpsAlterNote       $09
00089D56 8001                       	dc.b	nRst, $01
00089D58 E10B                       	smpsAlterNote       $0B
00089D5A BA03                       	dc.b	nA4, $03
00089D5C E10C                       	smpsAlterNote       $0C
00089D5E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
00089D62 E10B                       	smpsAlterNote       $0B
00089D64 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00089D6A E10C                       	smpsAlterNote       $0C
00089D6C C703 8001                  	dc.b	nBb5, $03, nRst, $01
00089D70 E10B                       	smpsAlterNote       $0B
00089D72 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089D78 E10C                       	smpsAlterNote       $0C
00089D7A D303                       	dc.b	nBb6, $03
00089D7C E10B                       	smpsAlterNote       $0B
00089D7E D20D                       	dc.b	nA6, $0D
00089D80 E108                       	smpsAlterNote       $08
00089D82 E701                       	dc.b	smpsNoAttack, $01
00089D84 E104                       	smpsAlterNote       $04
00089D86 E701                       	dc.b	smpsNoAttack, $01
00089D88 E105                       	smpsAlterNote       $05
00089D8A E701                       	dc.b	smpsNoAttack, $01
00089D8C E10B                       	smpsAlterNote       $0B
00089D8E E701                       	dc.b	smpsNoAttack, $01
00089D90 E10F                       	smpsAlterNote       $0F
00089D92 E701                       	dc.b	smpsNoAttack, $01
00089D94 E10B                       	smpsAlterNote       $0B
00089D96 E701                       	dc.b	smpsNoAttack, $01
00089D98 E108                       	smpsAlterNote       $08
00089D9A E701                       	dc.b	smpsNoAttack, $01
00089D9C E104                       	smpsAlterNote       $04
00089D9E E701                       	dc.b	smpsNoAttack, $01
00089DA0 E108                       	smpsAlterNote       $08
00089DA2 E701                       	dc.b	smpsNoAttack, $01
00089DA4 E10E                       	smpsAlterNote       $0E
00089DA6 E701                       	dc.b	smpsNoAttack, $01
00089DA8 E10F                       	smpsAlterNote       $0F
00089DAA E701                       	dc.b	smpsNoAttack, $01
00089DAC E10B                       	smpsAlterNote       $0B
00089DAE E701                       	dc.b	smpsNoAttack, $01
00089DB0 E105                       	smpsAlterNote       $05
00089DB2 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00089DB8 E109                       	smpsAlterNote       $09
00089DBA CE07                       	dc.b	nF6, $07
00089DBC E108                       	smpsAlterNote       $08
00089DBE CD06 8001                  	dc.b	nE6, $06, nRst, $01
00089DC2 E109                       	smpsAlterNote       $09
00089DC4 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00089DC8 E108                       	smpsAlterNote       $08
00089DCA CC0D                       	dc.b	nEb6, $0D
00089DCC E102                       	smpsAlterNote       $02
00089DCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DD2 E108                       	smpsAlterNote       $08
00089DD4 E701                       	dc.b	smpsNoAttack, $01
00089DD6 E10B                       	smpsAlterNote       $0B
00089DD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089DDC E105                       	smpsAlterNote       $05
00089DDE E701                       	dc.b	smpsNoAttack, $01
00089DE0 E101                       	smpsAlterNote       $01
00089DE2 E701                       	dc.b	smpsNoAttack, $01
00089DE4 E102                       	smpsAlterNote       $02
00089DE6 E701                       	dc.b	smpsNoAttack, $01
00089DE8 E108                       	smpsAlterNote       $08
00089DEA E701                       	dc.b	smpsNoAttack, $01
00089DEC E10C                       	smpsAlterNote       $0C
00089DEE E701                       	dc.b	smpsNoAttack, $01
00089DF0 E108                       	smpsAlterNote       $08
00089DF2 E701                       	dc.b	smpsNoAttack, $01
00089DF4 E105                       	smpsAlterNote       $05
00089DF6 E701                       	dc.b	smpsNoAttack, $01
00089DF8 E101                       	smpsAlterNote       $01
00089DFA E701                       	dc.b	smpsNoAttack, $01
00089DFC E105                       	smpsAlterNote       $05
00089DFE E701                       	dc.b	smpsNoAttack, $01
00089E00 E10B                       	smpsAlterNote       $0B
00089E02 E701                       	dc.b	smpsNoAttack, $01
00089E04 E10C                       	smpsAlterNote       $0C
00089E06 E701                       	dc.b	smpsNoAttack, $01
00089E08 E108                       	smpsAlterNote       $08
00089E0A E701                       	dc.b	smpsNoAttack, $01
00089E0C E107                       	smpsAlterNote       $07
00089E0E CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
00089E18 E10B                       	smpsAlterNote       $0B
00089E1A C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
00089E24 E109                       	smpsAlterNote       $09
00089E26 C203                       	dc.b	nF5, $03
00089E28 E108                       	smpsAlterNote       $08
00089E2A C103 8001                  	dc.b	nE5, $03, nRst, $01
00089E2E E109                       	smpsAlterNote       $09
00089E30 C20D                       	dc.b	nF5, $0D
00089E32 E108                       	smpsAlterNote       $08
00089E34 C10E                       	dc.b	nE5, $0E
00089E36 E107                       	smpsAlterNote       $07
00089E38 BF0D                       	dc.b	nD5, $0D
00089E3A E104                       	smpsAlterNote       $04
00089E3C E701                       	dc.b	smpsNoAttack, $01
00089E3E E100                       	smpsAlterNote       $00
00089E40 E701                       	dc.b	smpsNoAttack, $01
00089E42 E104                       	smpsAlterNote       $04
00089E44 E701                       	dc.b	smpsNoAttack, $01
00089E46 E107                       	smpsAlterNote       $07
00089E48 E701                       	dc.b	smpsNoAttack, $01
00089E4A E10B                       	smpsAlterNote       $0B
00089E4C E701                       	dc.b	smpsNoAttack, $01
00089E4E E107                       	smpsAlterNote       $07
00089E50 E701                       	dc.b	smpsNoAttack, $01
00089E52 E101                       	smpsAlterNote       $01
00089E54 E701                       	dc.b	smpsNoAttack, $01
00089E56 E100                       	smpsAlterNote       $00
00089E58 E701                       	dc.b	smpsNoAttack, $01
00089E5A E104                       	smpsAlterNote       $04
00089E5C E701                       	dc.b	smpsNoAttack, $01
00089E5E E10A                       	smpsAlterNote       $0A
00089E60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E64 E107                       	smpsAlterNote       $07
00089E66 E701                       	dc.b	smpsNoAttack, $01
00089E68 E101                       	smpsAlterNote       $01
00089E6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E6E E107                       	smpsAlterNote       $07
00089E70 E701                       	dc.b	smpsNoAttack, $01
00089E72 E10A                       	smpsAlterNote       $0A
00089E74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089E78 E104                       	smpsAlterNote       $04
00089E7A E701                       	dc.b	smpsNoAttack, $01
00089E7C E100                       	smpsAlterNote       $00
00089E7E E701                       	dc.b	smpsNoAttack, $01
00089E80 E101                       	smpsAlterNote       $01
00089E82 E701                       	dc.b	smpsNoAttack, $01
00089E84 E107                       	smpsAlterNote       $07
00089E86 E701                       	dc.b	smpsNoAttack, $01
00089E88 E10B                       	smpsAlterNote       $0B
00089E8A E701                       	dc.b	smpsNoAttack, $01
00089E8C E107                       	smpsAlterNote       $07
00089E8E E701                       	dc.b	smpsNoAttack, $01
00089E90 E104                       	smpsAlterNote       $04
00089E92 E701                       	dc.b	smpsNoAttack, $01
00089E94 E100                       	smpsAlterNote       $00
00089E96 E701                       	dc.b	smpsNoAttack, $01
00089E98 E104                       	smpsAlterNote       $04
00089E9A E701                       	dc.b	smpsNoAttack, $01
00089E9C E10A                       	smpsAlterNote       $0A
00089E9E E701                       	dc.b	smpsNoAttack, $01
00089EA0 E10B                       	smpsAlterNote       $0B
00089EA2 E701                       	dc.b	smpsNoAttack, $01
00089EA4 E107                       	smpsAlterNote       $07
00089EA6 E701                       	dc.b	smpsNoAttack, $01
00089EA8 E101                       	smpsAlterNote       $01
00089EAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EAE E104                       	smpsAlterNote       $04
00089EB0 E701                       	dc.b	smpsNoAttack, $01
00089EB2 E10A                       	smpsAlterNote       $0A
00089EB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EB8 E104                       	smpsAlterNote       $04
00089EBA E701                       	dc.b	smpsNoAttack, $01
00089EBC E101                       	smpsAlterNote       $01
00089EBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EC2 E107                       	smpsAlterNote       $07
00089EC4 E701                       	dc.b	smpsNoAttack, $01
00089EC6 E10B                       	smpsAlterNote       $0B
00089EC8 E701                       	dc.b	smpsNoAttack, $01
00089ECA E10A                       	smpsAlterNote       $0A
00089ECC E701                       	dc.b	smpsNoAttack, $01
00089ECE E104                       	smpsAlterNote       $04
00089ED0 E701                       	dc.b	smpsNoAttack, $01
00089ED2 E100                       	smpsAlterNote       $00
00089ED4 E701                       	dc.b	smpsNoAttack, $01
00089ED6 E104                       	smpsAlterNote       $04
00089ED8 E701                       	dc.b	smpsNoAttack, $01
00089EDA E107                       	smpsAlterNote       $07
00089EDC E701                       	dc.b	smpsNoAttack, $01
00089EDE E10B                       	smpsAlterNote       $0B
00089EE0 E701                       	dc.b	smpsNoAttack, $01
00089EE2 E107                       	smpsAlterNote       $07
00089EE4 E701                       	dc.b	smpsNoAttack, $01
00089EE6 E101                       	smpsAlterNote       $01
00089EE8 E701                       	dc.b	smpsNoAttack, $01
00089EEA E100                       	smpsAlterNote       $00
00089EEC E701                       	dc.b	smpsNoAttack, $01
00089EEE E104                       	smpsAlterNote       $04
00089EF0 E701                       	dc.b	smpsNoAttack, $01
00089EF2 E10A                       	smpsAlterNote       $0A
00089EF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089EF8 E107                       	smpsAlterNote       $07
00089EFA E701                       	dc.b	smpsNoAttack, $01
00089EFC E101                       	smpsAlterNote       $01
00089EFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F02 E107                       	smpsAlterNote       $07
00089F04 E701                       	dc.b	smpsNoAttack, $01
00089F06 E10A                       	smpsAlterNote       $0A
00089F08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F0C E104                       	smpsAlterNote       $04
00089F0E E701                       	dc.b	smpsNoAttack, $01
00089F10 E100                       	smpsAlterNote       $00
00089F12 E701                       	dc.b	smpsNoAttack, $01
00089F14 E101                       	smpsAlterNote       $01
00089F16 E701                       	dc.b	smpsNoAttack, $01
00089F18 E107                       	smpsAlterNote       $07
00089F1A E701                       	dc.b	smpsNoAttack, $01
00089F1C E10B                       	smpsAlterNote       $0B
00089F1E E701                       	dc.b	smpsNoAttack, $01
00089F20 E107                       	smpsAlterNote       $07
00089F22 E701                       	dc.b	smpsNoAttack, $01
00089F24 E104                       	smpsAlterNote       $04
00089F26 E701                       	dc.b	smpsNoAttack, $01
00089F28 E100                       	smpsAlterNote       $00
00089F2A E701                       	dc.b	smpsNoAttack, $01
00089F2C E101                       	smpsAlterNote       $01
00089F2E 8001                       	dc.b	nRst, $01
00089F30 E109                       	smpsAlterNote       $09
00089F32 C20D                       	dc.b	nF5, $0D
00089F34 E106                       	smpsAlterNote       $06
00089F36 E701                       	dc.b	smpsNoAttack, $01
00089F38 E102                       	smpsAlterNote       $02
00089F3A E701                       	dc.b	smpsNoAttack, $01
00089F3C E106                       	smpsAlterNote       $06
00089F3E E701                       	dc.b	smpsNoAttack, $01
00089F40 E10C                       	smpsAlterNote       $0C
00089F42 E701                       	dc.b	smpsNoAttack, $01
00089F44 E10D                       	smpsAlterNote       $0D
00089F46 E701                       	dc.b	smpsNoAttack, $01
00089F48 E109                       	smpsAlterNote       $09
00089F4A E701                       	dc.b	smpsNoAttack, $01
00089F4C E103                       	smpsAlterNote       $03
00089F4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F52 E106                       	smpsAlterNote       $06
00089F54 E701                       	dc.b	smpsNoAttack, $01
00089F56 E10C                       	smpsAlterNote       $0C
00089F58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F5C E106                       	smpsAlterNote       $06
00089F5E E701                       	dc.b	smpsNoAttack, $01
00089F60 E103                       	smpsAlterNote       $03
00089F62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F66 E109                       	smpsAlterNote       $09
00089F68 E701                       	dc.b	smpsNoAttack, $01
00089F6A E10D                       	smpsAlterNote       $0D
00089F6C E701                       	dc.b	smpsNoAttack, $01
00089F6E E10C                       	smpsAlterNote       $0C
00089F70 E701                       	dc.b	smpsNoAttack, $01
00089F72 E109                       	smpsAlterNote       $09
00089F74 8001                       	dc.b	nRst, $01
00089F76 E108                       	smpsAlterNote       $08
00089F78 C10D                       	dc.b	nE5, $0D
00089F7A E109                       	smpsAlterNote       $09
00089F7C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00089F80 E108                       	smpsAlterNote       $08
00089F82 C10D                       	dc.b	nE5, $0D
00089F84 E102                       	smpsAlterNote       $02
00089F86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089F8A E105                       	smpsAlterNote       $05
00089F8C E701                       	dc.b	smpsNoAttack, $01
00089F8E E108                       	smpsAlterNote       $08
00089F90 8001                       	dc.b	nRst, $01
00089F92 E107                       	smpsAlterNote       $07
00089F94 BF0D                       	dc.b	nD5, $0D
00089F96 E108                       	smpsAlterNote       $08
00089F98 C107                       	dc.b	nE5, $07
00089F9A E109                       	smpsAlterNote       $09
00089F9C C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00089FA2 E10B                       	smpsAlterNote       $0B
00089FA4 C603                       	dc.b	nA5, $03
00089FA6 E10C                       	smpsAlterNote       $0C
00089FA8 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00089FAE E10B                       	smpsAlterNote       $0B
00089FB0 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00089FB6 E109                       	smpsAlterNote       $09
00089FB8 D003                       	dc.b	nG6, $03
00089FBA E108                       	smpsAlterNote       $08
00089FBC CD02 8001                  	dc.b	nE6, $02, nRst, $01
00089FC0 E10B                       	smpsAlterNote       $0B
00089FC2 C601 8001                  	dc.b	nA5, $01, nRst, $01
00089FC6 E108                       	smpsAlterNote       $08
00089FC8 C102                       	dc.b	nE5, $02
00089FCC E10C                       	smpsAlterNote       $0C
00089FCE E6FB                       	smpsAlterVol        $FB
00089FD0 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00089FDC 8001                       	dc.b	nRst, $01
00089FDE E10B                       	smpsAlterNote       $0B
00089FE0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00089FE8 E107                       	smpsAlterNote       $07
00089FEA A706 8001                  	dc.b	nD3, $06, nRst, $01
00089FEE E10B                       	smpsAlterNote       $0B
00089FF0 A203                       	dc.b	nA2, $03
00089FF2 E109                       	smpsAlterNote       $09
00089FF4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00089FF8 E108                       	smpsAlterNote       $08
00089FFA A906                       	dc.b	nE3, $06
00089FFC E107                       	smpsAlterNote       $07
00089FFE A703 8001                  	dc.b	nD3, $03, nRst, $01
0008A002 E106                       	smpsAlterNote       $06
0008A004 A503                       	dc.b	nC3, $03
0008A006 E10C                       	smpsAlterNote       $0C
0008A008 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A00C E10B                       	smpsAlterNote       $0B
0008A00E A203 8004                  	dc.b	nA2, $03, nRst, $04
0008A012 E11B                       	smpsAlterNote       $1B
0008A014 C401                       	dc.b	nG5, $01
0008A016 E1F4                       	smpsAlterNote       $F4
0008A018 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A01B E106                       	smpsAlterNote       $06
0008A01D E701                       	dc.b	smpsNoAttack, $01
0008A01F E10F                       	smpsAlterNote       $0F
0008A021 E701                       	dc.b	smpsNoAttack, $01
0008A023 E1E4                       	smpsAlterNote       $E4
0008A025 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A028 E1F6                       	smpsAlterNote       $F6
0008A02A E701                       	dc.b	smpsNoAttack, $01
0008A02C E108                       	smpsAlterNote       $08
0008A02E E701                       	dc.b	smpsNoAttack, $01
0008A030 E10B                       	smpsAlterNote       $0B
0008A032 E706                       	dc.b	smpsNoAttack, $06
0008A034 E105                       	smpsAlterNote       $05
0008A036 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A03A E108                       	smpsAlterNote       $08
0008A03C E701                       	dc.b	smpsNoAttack, $01
0008A03E E10E                       	smpsAlterNote       $0E
0008A040 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A044 E108                       	smpsAlterNote       $08
0008A046 E701                       	dc.b	smpsNoAttack, $01
0008A048 E105                       	smpsAlterNote       $05
0008A04A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A04E E10B                       	smpsAlterNote       $0B
0008A050 E701                       	dc.b	smpsNoAttack, $01
0008A052 E10F                       	smpsAlterNote       $0F
0008A054 E701                       	dc.b	smpsNoAttack, $01
0008A056 E10E                       	smpsAlterNote       $0E
0008A058 E701                       	dc.b	smpsNoAttack, $01
0008A05A E108                       	smpsAlterNote       $08
0008A05C E701                       	dc.b	smpsNoAttack, $01
0008A05E E104                       	smpsAlterNote       $04
0008A060 E701                       	dc.b	smpsNoAttack, $01
0008A062 E108                       	smpsAlterNote       $08
0008A064 E701                       	dc.b	smpsNoAttack, $01
0008A066 E10B                       	smpsAlterNote       $0B
0008A068 E701                       	dc.b	smpsNoAttack, $01
0008A06A E10F                       	smpsAlterNote       $0F
0008A06C E701                       	dc.b	smpsNoAttack, $01
0008A06E E10B                       	smpsAlterNote       $0B
0008A070 E701                       	dc.b	smpsNoAttack, $01
0008A072 E105                       	smpsAlterNote       $05
0008A074 E701                       	dc.b	smpsNoAttack, $01
0008A076 E104                       	smpsAlterNote       $04
0008A078 E701                       	dc.b	smpsNoAttack, $01
0008A07A E108                       	smpsAlterNote       $08
0008A07C E701                       	dc.b	smpsNoAttack, $01
0008A07E E10E                       	smpsAlterNote       $0E
0008A080 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A084 E10B                       	smpsAlterNote       $0B
0008A086 E701                       	dc.b	smpsNoAttack, $01
0008A088 E105                       	smpsAlterNote       $05
0008A08A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A08E E10B                       	smpsAlterNote       $0B
0008A090 E701                       	dc.b	smpsNoAttack, $01
0008A092 E10E                       	smpsAlterNote       $0E
0008A094 E701                       	dc.b	smpsNoAttack, $01
0008A096 E10F                       	smpsAlterNote       $0F
0008A098 8001                       	dc.b	nRst, $01
0008A09A E109                       	smpsAlterNote       $09
0008A09C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008A0A2 E108                       	smpsAlterNote       $08
0008A0A4 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A0A8 E109                       	smpsAlterNote       $09
0008A0AA C202                       	dc.b	nF5, $02
0008A0AC E108                       	smpsAlterNote       $08
0008A0AE C102                       	dc.b	nE5, $02
0008A0B0 E107                       	smpsAlterNote       $07
0008A0B2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008A0B6 E108                       	smpsAlterNote       $08
0008A0B8 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008A0BC E107                       	smpsAlterNote       $07
0008A0BE BF02                       	dc.b	nD5, $02
0008A0C0 E106                       	smpsAlterNote       $06
0008A0C2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A0C6 E107                       	smpsAlterNote       $07
0008A0C8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008A0CC E106                       	smpsAlterNote       $06
0008A0CE BD02                       	dc.b	nC5, $02
0008A0D0 E10C                       	smpsAlterNote       $0C
0008A0D2 BB02                       	dc.b	nBb4, $02
0008A0D4 E106                       	smpsAlterNote       $06
0008A0D6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008A0DA E10C                       	smpsAlterNote       $0C
0008A0DC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008A0E0 E10B                       	smpsAlterNote       $0B
0008A0E2 BA02                       	dc.b	nA4, $02
0008A0E4 E10C                       	smpsAlterNote       $0C
0008A0E6 BB02                       	dc.b	nBb4, $02
0008A0E8 E10B                       	smpsAlterNote       $0B
0008A0EA BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008A0F4 E108                       	smpsAlterNote       $08
0008A0F6 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008A0FE E107                       	smpsAlterNote       $07
0008A100 BE02                       	dc.b	nCs5, $02
0008A102 E10B                       	smpsAlterNote       $0B
0008A104 BA02                       	dc.b	nA4, $02
0008A106 E109                       	smpsAlterNote       $09
0008A108 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008A10C E108                       	smpsAlterNote       $08
0008A10E B501 8001                  	dc.b	nE4, $01, nRst, $01
0008A112 E10B                       	smpsAlterNote       $0B
0008A114 AE02                       	dc.b	nA3, $02
0008A116 E10C                       	smpsAlterNote       $0C
0008A118 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008A124 E10B                       	smpsAlterNote       $0B
0008A126 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008A12E E107                       	smpsAlterNote       $07
0008A130 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008A134 E10B                       	smpsAlterNote       $0B
0008A136 A203                       	dc.b	nA2, $03
0008A138 E109                       	smpsAlterNote       $09
0008A13A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008A13E E108                       	smpsAlterNote       $08
0008A140 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008A144 E107                       	smpsAlterNote       $07
0008A146 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008A14A E106                       	smpsAlterNote       $06
0008A14C A503                       	dc.b	nC3, $03
0008A14E E10C                       	smpsAlterNote       $0C
0008A150 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A156 E107                       	smpsAlterNote       $07
0008A158 B20D                       	dc.b	nCs4, $0D
0008A15A E104                       	smpsAlterNote       $04
0008A15C E701                       	dc.b	smpsNoAttack, $01
0008A15E E100                       	smpsAlterNote       $00
0008A160 E701                       	dc.b	smpsNoAttack, $01
0008A162 E104                       	smpsAlterNote       $04
0008A164 E701                       	dc.b	smpsNoAttack, $01
0008A166 E10A                       	smpsAlterNote       $0A
0008A168 E701                       	dc.b	smpsNoAttack, $01
0008A16A E10B                       	smpsAlterNote       $0B
0008A16C E701                       	dc.b	smpsNoAttack, $01
0008A16E E107                       	smpsAlterNote       $07
0008A170 E701                       	dc.b	smpsNoAttack, $01
0008A172 E101                       	smpsAlterNote       $01
0008A174 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A178 E104                       	smpsAlterNote       $04
0008A17A E701                       	dc.b	smpsNoAttack, $01
0008A17C E10A                       	smpsAlterNote       $0A
0008A17E E701                       	dc.b	smpsNoAttack, $01
0008A180 E10B                       	smpsAlterNote       $0B
0008A182 8001                       	dc.b	nRst, $01
0008A184 E107                       	smpsAlterNote       $07
0008A186 B30D                       	dc.b	nD4, $0D
0008A188 E104                       	smpsAlterNote       $04
0008A18A E701                       	dc.b	smpsNoAttack, $01
0008A18C E100                       	smpsAlterNote       $00
0008A18E E701                       	dc.b	smpsNoAttack, $01
0008A190 E104                       	smpsAlterNote       $04
0008A192 E701                       	dc.b	smpsNoAttack, $01
0008A194 E10A                       	smpsAlterNote       $0A
0008A196 E701                       	dc.b	smpsNoAttack, $01
0008A198 E10B                       	smpsAlterNote       $0B
0008A19A E701                       	dc.b	smpsNoAttack, $01
0008A19C E107                       	smpsAlterNote       $07
0008A19E E701                       	dc.b	smpsNoAttack, $01
0008A1A0 E101                       	smpsAlterNote       $01
0008A1A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1A6 E104                       	smpsAlterNote       $04
0008A1A8 E701                       	dc.b	smpsNoAttack, $01
0008A1AA E10A                       	smpsAlterNote       $0A
0008A1AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1B0 E104                       	smpsAlterNote       $04
0008A1B2 E701                       	dc.b	smpsNoAttack, $01
0008A1B4 E101                       	smpsAlterNote       $01
0008A1B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1BA E107                       	smpsAlterNote       $07
0008A1BC E701                       	dc.b	smpsNoAttack, $01
0008A1BE E10B                       	smpsAlterNote       $0B
0008A1C0 E701                       	dc.b	smpsNoAttack, $01
0008A1C2 E10A                       	smpsAlterNote       $0A
0008A1C4 E701                       	dc.b	smpsNoAttack, $01
0008A1C6 E107                       	smpsAlterNote       $07
0008A1C8 8001                       	dc.b	nRst, $01
0008A1CA E108                       	smpsAlterNote       $08
0008A1CC B50D                       	dc.b	nE4, $0D
0008A1CE E102                       	smpsAlterNote       $02
0008A1D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1D4 E105                       	smpsAlterNote       $05
0008A1D6 E701                       	dc.b	smpsNoAttack, $01
0008A1D8 E10B                       	smpsAlterNote       $0B
0008A1DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1DE E105                       	smpsAlterNote       $05
0008A1E0 E701                       	dc.b	smpsNoAttack, $01
0008A1E2 E102                       	smpsAlterNote       $02
0008A1E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1E8 E108                       	smpsAlterNote       $08
0008A1EA E701                       	dc.b	smpsNoAttack, $01
0008A1EC E10C                       	smpsAlterNote       $0C
0008A1EE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A1F2 E107                       	smpsAlterNote       $07
0008A1F4 B30D                       	dc.b	nD4, $0D
0008A1F6 E101                       	smpsAlterNote       $01
0008A1F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1FC E104                       	smpsAlterNote       $04
0008A1FE E701                       	dc.b	smpsNoAttack, $01
0008A200 E10A                       	smpsAlterNote       $0A
0008A202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A206 E104                       	smpsAlterNote       $04
0008A208 E701                       	dc.b	smpsNoAttack, $01
0008A20A E101                       	smpsAlterNote       $01
0008A20C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A210 E107                       	smpsAlterNote       $07
0008A212 E701                       	dc.b	smpsNoAttack, $01
0008A214 E10B                       	smpsAlterNote       $0B
0008A216 E701                       	dc.b	smpsNoAttack, $01
0008A218 E10A                       	smpsAlterNote       $0A
0008A21A E701                       	dc.b	smpsNoAttack, $01
0008A21C E104                       	smpsAlterNote       $04
0008A21E E701                       	dc.b	smpsNoAttack, $01
0008A220 E100                       	smpsAlterNote       $00
0008A222 E701                       	dc.b	smpsNoAttack, $01
0008A224 E104                       	smpsAlterNote       $04
0008A226 E701                       	dc.b	smpsNoAttack, $01
0008A228 E107                       	smpsAlterNote       $07
0008A22A E701                       	dc.b	smpsNoAttack, $01
0008A22C E10B                       	smpsAlterNote       $0B
0008A22E E701                       	dc.b	smpsNoAttack, $01
0008A230 E107                       	smpsAlterNote       $07
0008A232 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008A236 E101                       	smpsAlterNote       $01
0008A238 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A23C E107                       	smpsAlterNote       $07
0008A23E E701                       	dc.b	smpsNoAttack, $01
0008A240 E10A                       	smpsAlterNote       $0A
0008A242 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A246 E104                       	smpsAlterNote       $04
0008A248 E701                       	dc.b	smpsNoAttack, $01
0008A24A E100                       	smpsAlterNote       $00
0008A24C E701                       	dc.b	smpsNoAttack, $01
0008A24E E101                       	smpsAlterNote       $01
0008A250 E701                       	dc.b	smpsNoAttack, $01
0008A252 E107                       	smpsAlterNote       $07
0008A254 E701                       	dc.b	smpsNoAttack, $01
0008A256 E10B                       	smpsAlterNote       $0B
0008A258 E701                       	dc.b	smpsNoAttack, $01
0008A25A E107                       	smpsAlterNote       $07
0008A25C B30E                       	dc.b	nD4, $0E
0008A25E E101                       	smpsAlterNote       $01
0008A260 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A264 E107                       	smpsAlterNote       $07
0008A266 E701                       	dc.b	smpsNoAttack, $01
0008A268 E10A                       	smpsAlterNote       $0A
0008A26A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A26E E104                       	smpsAlterNote       $04
0008A270 E701                       	dc.b	smpsNoAttack, $01
0008A272 E100                       	smpsAlterNote       $00
0008A274 E701                       	dc.b	smpsNoAttack, $01
0008A276 E101                       	smpsAlterNote       $01
0008A278 E701                       	dc.b	smpsNoAttack, $01
0008A27A E107                       	smpsAlterNote       $07
0008A27C E701                       	dc.b	smpsNoAttack, $01
0008A27E E10B                       	smpsAlterNote       $0B
0008A280 E701                       	dc.b	smpsNoAttack, $01
0008A282 E107                       	smpsAlterNote       $07
0008A284 E701                       	dc.b	smpsNoAttack, $01
0008A286 E104                       	smpsAlterNote       $04
0008A288 E701                       	dc.b	smpsNoAttack, $01
0008A28A E100                       	smpsAlterNote       $00
0008A28C E701                       	dc.b	smpsNoAttack, $01
0008A28E E104                       	smpsAlterNote       $04
0008A290 E701                       	dc.b	smpsNoAttack, $01
0008A292 E10A                       	smpsAlterNote       $0A
0008A294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A298 E107                       	smpsAlterNote       $07
0008A29A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008A29E E104                       	smpsAlterNote       $04
0008A2A0 E701                       	dc.b	smpsNoAttack, $01
0008A2A2 E100                       	smpsAlterNote       $00
0008A2A4 E701                       	dc.b	smpsNoAttack, $01
0008A2A6 E101                       	smpsAlterNote       $01
0008A2A8 E701                       	dc.b	smpsNoAttack, $01
0008A2AA E107                       	smpsAlterNote       $07
0008A2AC E701                       	dc.b	smpsNoAttack, $01
0008A2AE E10B                       	smpsAlterNote       $0B
0008A2B0 E701                       	dc.b	smpsNoAttack, $01
0008A2B2 E107                       	smpsAlterNote       $07
0008A2B4 E701                       	dc.b	smpsNoAttack, $01
0008A2B6 E104                       	smpsAlterNote       $04
0008A2B8 E701                       	dc.b	smpsNoAttack, $01
0008A2BA E100                       	smpsAlterNote       $00
0008A2BC E701                       	dc.b	smpsNoAttack, $01
0008A2BE E104                       	smpsAlterNote       $04
0008A2C0 E701                       	dc.b	smpsNoAttack, $01
0008A2C2 E10A                       	smpsAlterNote       $0A
0008A2C4 E701                       	dc.b	smpsNoAttack, $01
0008A2C6 E10B                       	smpsAlterNote       $0B
0008A2C8 E701                       	dc.b	smpsNoAttack, $01
0008A2CC E6FF                       	smpsAlterVol        $FF
0008A2CE A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008A2DA 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008A2E2 E109                       	smpsAlterNote       $09
0008A2E4 E601                       	smpsAlterVol        $01
0008A2E6 B60D                       	dc.b	nF4, $0D
0008A2E8 E106                       	smpsAlterNote       $06
0008A2EA E701                       	dc.b	smpsNoAttack, $01
0008A2EC E102                       	smpsAlterNote       $02
0008A2EE E701                       	dc.b	smpsNoAttack, $01
0008A2F0 E106                       	smpsAlterNote       $06
0008A2F2 E701                       	dc.b	smpsNoAttack, $01
0008A2F4 E109                       	smpsAlterNote       $09
0008A2F6 E701                       	dc.b	smpsNoAttack, $01
0008A2F8 E10D                       	smpsAlterNote       $0D
0008A2FA E701                       	dc.b	smpsNoAttack, $01
0008A2FC E109                       	smpsAlterNote       $09
0008A2FE E701                       	dc.b	smpsNoAttack, $01
0008A300 E103                       	smpsAlterNote       $03
0008A302 E701                       	dc.b	smpsNoAttack, $01
0008A304 E102                       	smpsAlterNote       $02
0008A306 E701                       	dc.b	smpsNoAttack, $01
0008A308 E106                       	smpsAlterNote       $06
0008A30A E701                       	dc.b	smpsNoAttack, $01
0008A30C E10C                       	smpsAlterNote       $0C
0008A30E E701                       	dc.b	smpsNoAttack, $01
0008A310 E10D                       	smpsAlterNote       $0D
0008A312 8001                       	dc.b	nRst, $01
0008A314 E109                       	smpsAlterNote       $09
0008A316 B80D                       	dc.b	nG4, $0D
0008A318 E106                       	smpsAlterNote       $06
0008A31A E701                       	dc.b	smpsNoAttack, $01
0008A31C E102                       	smpsAlterNote       $02
0008A31E E701                       	dc.b	smpsNoAttack, $01
0008A320 E106                       	smpsAlterNote       $06
0008A322 E701                       	dc.b	smpsNoAttack, $01
0008A324 E109                       	smpsAlterNote       $09
0008A326 E701                       	dc.b	smpsNoAttack, $01
0008A328 E10D                       	smpsAlterNote       $0D
0008A32A E701                       	dc.b	smpsNoAttack, $01
0008A32C E109                       	smpsAlterNote       $09
0008A32E E701                       	dc.b	smpsNoAttack, $01
0008A330 E103                       	smpsAlterNote       $03
0008A332 E701                       	dc.b	smpsNoAttack, $01
0008A334 E102                       	smpsAlterNote       $02
0008A336 E701                       	dc.b	smpsNoAttack, $01
0008A338 E106                       	smpsAlterNote       $06
0008A33A E701                       	dc.b	smpsNoAttack, $01
0008A33C E10C                       	smpsAlterNote       $0C
0008A33E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A342 E106                       	smpsAlterNote       $06
0008A344 E701                       	dc.b	smpsNoAttack, $01
0008A346 E103                       	smpsAlterNote       $03
0008A348 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A34C E109                       	smpsAlterNote       $09
0008A34E E701                       	dc.b	smpsNoAttack, $01
0008A350 E10D                       	smpsAlterNote       $0D
0008A352 E701                       	dc.b	smpsNoAttack, $01
0008A354 E10C                       	smpsAlterNote       $0C
0008A356 E701                       	dc.b	smpsNoAttack, $01
0008A358 E109                       	smpsAlterNote       $09
0008A35A 8001                       	dc.b	nRst, $01
0008A35C E10B                       	smpsAlterNote       $0B
0008A35E BA0D                       	dc.b	nA4, $0D
0008A360 E105                       	smpsAlterNote       $05
0008A362 E701                       	dc.b	smpsNoAttack, $01
0008A364 E104                       	smpsAlterNote       $04
0008A366 E701                       	dc.b	smpsNoAttack, $01
0008A368 E108                       	smpsAlterNote       $08
0008A36A E701                       	dc.b	smpsNoAttack, $01
0008A36C E10E                       	smpsAlterNote       $0E
0008A36E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A372 E10B                       	smpsAlterNote       $0B
0008A374 E701                       	dc.b	smpsNoAttack, $01
0008A376 E105                       	smpsAlterNote       $05
0008A378 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A37C E10B                       	smpsAlterNote       $0B
0008A37E E701                       	dc.b	smpsNoAttack, $01
0008A380 E10E                       	smpsAlterNote       $0E
0008A382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A386 E108                       	smpsAlterNote       $08
0008A388 E701                       	dc.b	smpsNoAttack, $01
0008A38A E104                       	smpsAlterNote       $04
0008A38C E701                       	dc.b	smpsNoAttack, $01
0008A38E E105                       	smpsAlterNote       $05
0008A390 E701                       	dc.b	smpsNoAttack, $01
0008A392 E10B                       	smpsAlterNote       $0B
0008A394 E701                       	dc.b	smpsNoAttack, $01
0008A396 E10F                       	smpsAlterNote       $0F
0008A398 E701                       	dc.b	smpsNoAttack, $01
0008A39A E10B                       	smpsAlterNote       $0B
0008A39C E701                       	dc.b	smpsNoAttack, $01
0008A39E E108                       	smpsAlterNote       $08
0008A3A0 E701                       	dc.b	smpsNoAttack, $01
0008A3A2 E104                       	smpsAlterNote       $04
0008A3A4 E701                       	dc.b	smpsNoAttack, $01
0008A3A6 E108                       	smpsAlterNote       $08
0008A3A8 E701                       	dc.b	smpsNoAttack, $01
0008A3AA E10E                       	smpsAlterNote       $0E
0008A3AC E701                       	dc.b	smpsNoAttack, $01
0008A3AE E10F                       	smpsAlterNote       $0F
0008A3B0 E701                       	dc.b	smpsNoAttack, $01
0008A3B2 E10B                       	smpsAlterNote       $0B
0008A3B4 E701                       	dc.b	smpsNoAttack, $01
0008A3B6 E105                       	smpsAlterNote       $05
0008A3B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3BC E108                       	smpsAlterNote       $08
0008A3BE E701                       	dc.b	smpsNoAttack, $01
0008A3C0 E10E                       	smpsAlterNote       $0E
0008A3C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3C6 E108                       	smpsAlterNote       $08
0008A3C8 E701                       	dc.b	smpsNoAttack, $01
0008A3CA E105                       	smpsAlterNote       $05
0008A3CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3D0 E108                       	smpsAlterNote       $08
0008A3D2 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008A3D6 E109                       	smpsAlterNote       $09
0008A3D8 B60D                       	dc.b	nF4, $0D
0008A3DA E103                       	smpsAlterNote       $03
0008A3DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3E0 E106                       	smpsAlterNote       $06
0008A3E2 E701                       	dc.b	smpsNoAttack, $01
0008A3E4 E10C                       	smpsAlterNote       $0C
0008A3E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3EA E106                       	smpsAlterNote       $06
0008A3EC E701                       	dc.b	smpsNoAttack, $01
0008A3EE E103                       	smpsAlterNote       $03
0008A3F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A3F4 E109                       	smpsAlterNote       $09
0008A3F6 E701                       	dc.b	smpsNoAttack, $01
0008A3F8 E10D                       	smpsAlterNote       $0D
0008A3FA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A3FE E109                       	smpsAlterNote       $09
0008A400 B80D                       	dc.b	nG4, $0D
0008A402 E103                       	smpsAlterNote       $03
0008A404 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A408 E109                       	smpsAlterNote       $09
0008A40A E701                       	dc.b	smpsNoAttack, $01
0008A40C E10C                       	smpsAlterNote       $0C
0008A40E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A412 E106                       	smpsAlterNote       $06
0008A414 E701                       	dc.b	smpsNoAttack, $01
0008A416 E102                       	smpsAlterNote       $02
0008A418 E701                       	dc.b	smpsNoAttack, $01
0008A41A E103                       	smpsAlterNote       $03
0008A41C E701                       	dc.b	smpsNoAttack, $01
0008A41E E109                       	smpsAlterNote       $09
0008A420 E701                       	dc.b	smpsNoAttack, $01
0008A422 E10D                       	smpsAlterNote       $0D
0008A424 E701                       	dc.b	smpsNoAttack, $01
0008A426 E109                       	smpsAlterNote       $09
0008A428 E701                       	dc.b	smpsNoAttack, $01
0008A42A E106                       	smpsAlterNote       $06
0008A42C E701                       	dc.b	smpsNoAttack, $01
0008A42E E102                       	smpsAlterNote       $02
0008A430 E701                       	dc.b	smpsNoAttack, $01
0008A432 E106                       	smpsAlterNote       $06
0008A434 E701                       	dc.b	smpsNoAttack, $01
0008A436 E10C                       	smpsAlterNote       $0C
0008A438 E701                       	dc.b	smpsNoAttack, $01
0008A43A E10D                       	smpsAlterNote       $0D
0008A43C E701                       	dc.b	smpsNoAttack, $01
0008A43E E109                       	smpsAlterNote       $09
0008A440 E701                       	dc.b	smpsNoAttack, $01
0008A442 E10B                       	smpsAlterNote       $0B
0008A444 BA0D                       	dc.b	nA4, $0D
0008A446 E108                       	smpsAlterNote       $08
0008A448 E701                       	dc.b	smpsNoAttack, $01
0008A44A E105                       	smpsAlterNote       $05
0008A44C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A450 E10B                       	smpsAlterNote       $0B
0008A452 E701                       	dc.b	smpsNoAttack, $01
0008A454 E10F                       	smpsAlterNote       $0F
0008A456 E701                       	dc.b	smpsNoAttack, $01
0008A458 E10E                       	smpsAlterNote       $0E
0008A45A E701                       	dc.b	smpsNoAttack, $01
0008A45C E108                       	smpsAlterNote       $08
0008A45E E701                       	dc.b	smpsNoAttack, $01
0008A460 E104                       	smpsAlterNote       $04
0008A462 E701                       	dc.b	smpsNoAttack, $01
0008A464 E108                       	smpsAlterNote       $08
0008A466 E701                       	dc.b	smpsNoAttack, $01
0008A468 E10B                       	smpsAlterNote       $0B
0008A46A E701                       	dc.b	smpsNoAttack, $01
0008A46C E10F                       	smpsAlterNote       $0F
0008A46E E701                       	dc.b	smpsNoAttack, $01
0008A470 E10B                       	smpsAlterNote       $0B
0008A472 E701                       	dc.b	smpsNoAttack, $01
0008A474 E105                       	smpsAlterNote       $05
0008A476 E701                       	dc.b	smpsNoAttack, $01
0008A478 E104                       	smpsAlterNote       $04
0008A47A E701                       	dc.b	smpsNoAttack, $01
0008A47C E108                       	smpsAlterNote       $08
0008A47E E701                       	dc.b	smpsNoAttack, $01
0008A480 E10E                       	smpsAlterNote       $0E
0008A482 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A486 E10B                       	smpsAlterNote       $0B
0008A488 E701                       	dc.b	smpsNoAttack, $01
0008A48A E105                       	smpsAlterNote       $05
0008A48C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A490 E10B                       	smpsAlterNote       $0B
0008A492 E701                       	dc.b	smpsNoAttack, $01
0008A494 E10E                       	smpsAlterNote       $0E
0008A496 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A49A E108                       	smpsAlterNote       $08
0008A49C E701                       	dc.b	smpsNoAttack, $01
0008A49E E105                       	smpsAlterNote       $05
0008A4A0 8001                       	dc.b	nRst, $01
0008A4A2 E109                       	smpsAlterNote       $09
0008A4A4 B60A                       	dc.b	nF4, $0A
0008A4A6 E108                       	smpsAlterNote       $08
0008A4A8 B507                       	dc.b	nE4, $07
0008A4AA E107                       	smpsAlterNote       $07
0008A4AC B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008A4B0 E108                       	smpsAlterNote       $08
0008A4B2 B503                       	dc.b	nE4, $03
0008A4B4 E109                       	smpsAlterNote       $09
0008A4B6 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008A4BE E10B                       	smpsAlterNote       $0B
0008A4C0 BA0D                       	dc.b	nA4, $0D
0008A4C2 E108                       	smpsAlterNote       $08
0008A4C4 E701                       	dc.b	smpsNoAttack, $01
0008A4C6 E104                       	smpsAlterNote       $04
0008A4C8 E701                       	dc.b	smpsNoAttack, $01
0008A4CA E108                       	smpsAlterNote       $08
0008A4CC E701                       	dc.b	smpsNoAttack, $01
0008A4CE E10B                       	smpsAlterNote       $0B
0008A4D0 E701                       	dc.b	smpsNoAttack, $01
0008A4D2 E10F                       	smpsAlterNote       $0F
0008A4D4 E701                       	dc.b	smpsNoAttack, $01
0008A4D6 E10B                       	smpsAlterNote       $0B
0008A4D8 E701                       	dc.b	smpsNoAttack, $01
0008A4DA E105                       	smpsAlterNote       $05
0008A4DC E701                       	dc.b	smpsNoAttack, $01
0008A4DE E104                       	smpsAlterNote       $04
0008A4E0 E701                       	dc.b	smpsNoAttack, $01
0008A4E2 E108                       	smpsAlterNote       $08
0008A4E4 E701                       	dc.b	smpsNoAttack, $01
0008A4E6 E10E                       	smpsAlterNote       $0E
0008A4E8 E701                       	dc.b	smpsNoAttack, $01
0008A4EA E10F                       	smpsAlterNote       $0F
0008A4EC 8001                       	dc.b	nRst, $01
0008A4EE E109                       	smpsAlterNote       $09
0008A4F0 C20D                       	dc.b	nF5, $0D
0008A4F2 E106                       	smpsAlterNote       $06
0008A4F4 E701                       	dc.b	smpsNoAttack, $01
0008A4F6 E102                       	smpsAlterNote       $02
0008A4F8 E701                       	dc.b	smpsNoAttack, $01
0008A4FA E106                       	smpsAlterNote       $06
0008A4FC E701                       	dc.b	smpsNoAttack, $01
0008A4FE E109                       	smpsAlterNote       $09
0008A500 E701                       	dc.b	smpsNoAttack, $01
0008A502 E10D                       	smpsAlterNote       $0D
0008A504 E701                       	dc.b	smpsNoAttack, $01
0008A506 E109                       	smpsAlterNote       $09
0008A508 E701                       	dc.b	smpsNoAttack, $01
0008A50A E103                       	smpsAlterNote       $03
0008A50C E701                       	dc.b	smpsNoAttack, $01
0008A50E E102                       	smpsAlterNote       $02
0008A510 E701                       	dc.b	smpsNoAttack, $01
0008A512 E106                       	smpsAlterNote       $06
0008A514 E701                       	dc.b	smpsNoAttack, $01
0008A516 E10C                       	smpsAlterNote       $0C
0008A518 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A51C E109                       	smpsAlterNote       $09
0008A51E E701                       	dc.b	smpsNoAttack, $01
0008A520 E103                       	smpsAlterNote       $03
0008A522 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A526 E109                       	smpsAlterNote       $09
0008A528 E701                       	dc.b	smpsNoAttack, $01
0008A52A E10C                       	smpsAlterNote       $0C
0008A52C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A530 E106                       	smpsAlterNote       $06
0008A532 E701                       	dc.b	smpsNoAttack, $01
0008A534 E102                       	smpsAlterNote       $02
0008A536 E701                       	dc.b	smpsNoAttack, $01
0008A538 E103                       	smpsAlterNote       $03
0008A53A E701                       	dc.b	smpsNoAttack, $01
0008A53C E109                       	smpsAlterNote       $09
0008A53E E701                       	dc.b	smpsNoAttack, $01
0008A540 E10D                       	smpsAlterNote       $0D
0008A542 E701                       	dc.b	smpsNoAttack, $01
0008A544 E109                       	smpsAlterNote       $09
0008A546 E701                       	dc.b	smpsNoAttack, $01
0008A548 E106                       	smpsAlterNote       $06
0008A54A E701                       	dc.b	smpsNoAttack, $01
0008A54C E102                       	smpsAlterNote       $02
0008A54E E701                       	dc.b	smpsNoAttack, $01
0008A550 E106                       	smpsAlterNote       $06
0008A552 E701                       	dc.b	smpsNoAttack, $01
0008A554 E10C                       	smpsAlterNote       $0C
0008A556 E701                       	dc.b	smpsNoAttack, $01
0008A558 E10D                       	smpsAlterNote       $0D
0008A55A E701                       	dc.b	smpsNoAttack, $01
0008A55C E109                       	smpsAlterNote       $09
0008A55E E701                       	dc.b	smpsNoAttack, $01
0008A560 E103                       	smpsAlterNote       $03
0008A562 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A566 E106                       	smpsAlterNote       $06
0008A568 E701                       	dc.b	smpsNoAttack, $01
0008A56A E10C                       	smpsAlterNote       $0C
0008A56C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A570 E106                       	smpsAlterNote       $06
0008A572 E701                       	dc.b	smpsNoAttack, $01
0008A574 E103                       	smpsAlterNote       $03
0008A576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A57A E109                       	smpsAlterNote       $09
0008A57C E701                       	dc.b	smpsNoAttack, $01
0008A57E E10D                       	smpsAlterNote       $0D
0008A580 E701                       	dc.b	smpsNoAttack, $01
0008A582 E10C                       	smpsAlterNote       $0C
0008A584 E701                       	dc.b	smpsNoAttack, $01
0008A586 E106                       	smpsAlterNote       $06
0008A588 E701                       	dc.b	smpsNoAttack, $01
0008A58A E103                       	smpsAlterNote       $03
0008A58C 8001                       	dc.b	nRst, $01
0008A58E E109                       	smpsAlterNote       $09
0008A590 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008A596 E10C                       	smpsAlterNote       $0C
0008A598 E601                       	smpsAlterVol        $01
0008A59A BB0D                       	dc.b	nBb4, $0D
0008A59C E106                       	smpsAlterNote       $06
0008A59E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5A2 E109                       	smpsAlterNote       $09
0008A5A4 E701                       	dc.b	smpsNoAttack, $01
0008A5A6 E10F                       	smpsAlterNote       $0F
0008A5A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5AC E109                       	smpsAlterNote       $09
0008A5AE E701                       	dc.b	smpsNoAttack, $01
0008A5B0 E106                       	smpsAlterNote       $06
0008A5B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5B6 E10C                       	smpsAlterNote       $0C
0008A5B8 E701                       	dc.b	smpsNoAttack, $01
0008A5BA E110                       	smpsAlterNote       $10
0008A5BC E701                       	dc.b	smpsNoAttack, $01
0008A5BE E10F                       	smpsAlterNote       $0F
0008A5C0 E701                       	dc.b	smpsNoAttack, $01
0008A5C2 E109                       	smpsAlterNote       $09
0008A5C4 E701                       	dc.b	smpsNoAttack, $01
0008A5C6 E105                       	smpsAlterNote       $05
0008A5C8 E701                       	dc.b	smpsNoAttack, $01
0008A5CA E106                       	smpsAlterNote       $06
0008A5CC 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008A5D0 E103                       	smpsAlterNote       $03
0008A5D2 E701                       	dc.b	smpsNoAttack, $01
0008A5D4 E1FF                       	smpsAlterNote       $FF
0008A5D6 E701                       	dc.b	smpsNoAttack, $01
0008A5D8 E103                       	smpsAlterNote       $03
0008A5DA E701                       	dc.b	smpsNoAttack, $01
0008A5DC E106                       	smpsAlterNote       $06
0008A5DE E701                       	dc.b	smpsNoAttack, $01
0008A5E0 E10A                       	smpsAlterNote       $0A
0008A5E2 E701                       	dc.b	smpsNoAttack, $01
0008A5E4 E106                       	smpsAlterNote       $06
0008A5E6 E701                       	dc.b	smpsNoAttack, $01
0008A5E8 E100                       	smpsAlterNote       $00
0008A5EA E701                       	dc.b	smpsNoAttack, $01
0008A5EC E1FF                       	smpsAlterNote       $FF
0008A5EE E701                       	dc.b	smpsNoAttack, $01
0008A5F0 E103                       	smpsAlterNote       $03
0008A5F2 E701                       	dc.b	smpsNoAttack, $01
0008A5F4 E109                       	smpsAlterNote       $09
0008A5F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A5FA E106                       	smpsAlterNote       $06
0008A5FC E701                       	dc.b	smpsNoAttack, $01
0008A5FE E100                       	smpsAlterNote       $00
0008A600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A604 E107                       	smpsAlterNote       $07
0008A606 BF0E                       	dc.b	nD5, $0E
0008A608 E101                       	smpsAlterNote       $01
0008A60A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A60E E107                       	smpsAlterNote       $07
0008A610 E701                       	dc.b	smpsNoAttack, $01
0008A612 E10A                       	smpsAlterNote       $0A
0008A614 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A618 E104                       	smpsAlterNote       $04
0008A61A E701                       	dc.b	smpsNoAttack, $01
0008A61C E100                       	smpsAlterNote       $00
0008A61E E701                       	dc.b	smpsNoAttack, $01
0008A620 E101                       	smpsAlterNote       $01
0008A622 E701                       	dc.b	smpsNoAttack, $01
0008A624 E107                       	smpsAlterNote       $07
0008A626 E701                       	dc.b	smpsNoAttack, $01
0008A628 E10B                       	smpsAlterNote       $0B
0008A62A E701                       	dc.b	smpsNoAttack, $01
0008A62C E107                       	smpsAlterNote       $07
0008A62E E701                       	dc.b	smpsNoAttack, $01
0008A630 E104                       	smpsAlterNote       $04
0008A632 E701                       	dc.b	smpsNoAttack, $01
0008A634 E100                       	smpsAlterNote       $00
0008A636 E701                       	dc.b	smpsNoAttack, $01
0008A638 E101                       	smpsAlterNote       $01
0008A63A 8001                       	dc.b	nRst, $01
0008A63C E108                       	smpsAlterNote       $08
0008A63E C10C                       	dc.b	nE5, $0C
0008A640 E109                       	smpsAlterNote       $09
0008A642 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008A646 E10A                       	smpsAlterNote       $0A
0008A648 8001                       	dc.b	nRst, $01
0008A64A E109                       	smpsAlterNote       $09
0008A64C C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008A650 E106                       	smpsAlterNote       $06
0008A652 E701                       	dc.b	smpsNoAttack, $01
0008A654 E102                       	smpsAlterNote       $02
0008A656 E701                       	dc.b	smpsNoAttack, $01
0008A658 E103                       	smpsAlterNote       $03
0008A65A E701                       	dc.b	smpsNoAttack, $01
0008A65C E109                       	smpsAlterNote       $09
0008A65E E701                       	dc.b	smpsNoAttack, $01
0008A660 E10D                       	smpsAlterNote       $0D
0008A662 E701                       	dc.b	smpsNoAttack, $01
0008A664 E109                       	smpsAlterNote       $09
0008A666 E701                       	dc.b	smpsNoAttack, $01
0008A668 E106                       	smpsAlterNote       $06
0008A66A E701                       	dc.b	smpsNoAttack, $01
0008A66C E102                       	smpsAlterNote       $02
0008A66E E701                       	dc.b	smpsNoAttack, $01
0008A670 E106                       	smpsAlterNote       $06
0008A672 E701                       	dc.b	smpsNoAttack, $01
0008A674 E10C                       	smpsAlterNote       $0C
0008A676 E701                       	dc.b	smpsNoAttack, $01
0008A678 E10D                       	smpsAlterNote       $0D
0008A67A E701                       	dc.b	smpsNoAttack, $01
0008A67C E109                       	smpsAlterNote       $09
0008A67E C40D                       	dc.b	nG5, $0D
0008A680 E106                       	smpsAlterNote       $06
0008A682 E701                       	dc.b	smpsNoAttack, $01
0008A684 E102                       	smpsAlterNote       $02
0008A686 E701                       	dc.b	smpsNoAttack, $01
0008A688 E103                       	smpsAlterNote       $03
0008A68A E701                       	dc.b	smpsNoAttack, $01
0008A68C E109                       	smpsAlterNote       $09
0008A68E E701                       	dc.b	smpsNoAttack, $01
0008A690 E108                       	smpsAlterNote       $08
0008A692 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008A69E E109                       	smpsAlterNote       $09
0008A6A0 C20D                       	dc.b	nF5, $0D
0008A6A2 E106                       	smpsAlterNote       $06
0008A6A4 E701                       	dc.b	smpsNoAttack, $01
0008A6A6 E102                       	smpsAlterNote       $02
0008A6A8 E701                       	dc.b	smpsNoAttack, $01
0008A6AA E106                       	smpsAlterNote       $06
0008A6AC E701                       	dc.b	smpsNoAttack, $01
0008A6AE E109                       	smpsAlterNote       $09
0008A6B0 E701                       	dc.b	smpsNoAttack, $01
0008A6B2 E10D                       	smpsAlterNote       $0D
0008A6B4 E701                       	dc.b	smpsNoAttack, $01
0008A6B6 E109                       	smpsAlterNote       $09
0008A6B8 E701                       	dc.b	smpsNoAttack, $01
0008A6BA E103                       	smpsAlterNote       $03
0008A6BC E701                       	dc.b	smpsNoAttack, $01
0008A6BE E102                       	smpsAlterNote       $02
0008A6C0 E701                       	dc.b	smpsNoAttack, $01
0008A6C2 E106                       	smpsAlterNote       $06
0008A6C4 E701                       	dc.b	smpsNoAttack, $01
0008A6C6 E10C                       	smpsAlterNote       $0C
0008A6C8 E701                       	dc.b	smpsNoAttack, $01
0008A6CA E10D                       	smpsAlterNote       $0D
0008A6CC 8001                       	dc.b	nRst, $01
0008A6CE E112                       	smpsAlterNote       $12
0008A6D0 C401                       	dc.b	nG5, $01
0008A6D2 E1EB                       	smpsAlterNote       $EB
0008A6D4 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008A6D7 E1FD                       	smpsAlterNote       $FD
0008A6D9 E701                       	dc.b	smpsNoAttack, $01
0008A6DB E10F                       	smpsAlterNote       $0F
0008A6DD E701                       	dc.b	smpsNoAttack, $01
0008A6DF E118                       	smpsAlterNote       $18
0008A6E1 E701                       	dc.b	smpsNoAttack, $01
0008A6E3 E1ED                       	smpsAlterNote       $ED
0008A6E5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008A6E8 E1FF                       	smpsAlterNote       $FF
0008A6EA E701                       	dc.b	smpsNoAttack, $01
0008A6EC E10B                       	smpsAlterNote       $0B
0008A6EE E703                       	dc.b	smpsNoAttack, $03
0008A6F0 E109                       	smpsAlterNote       $09
0008A6F2 C407                       	dc.b	nG5, $07
0008A6F4 E108                       	smpsAlterNote       $08
0008A6F6 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008A702 E109                       	smpsAlterNote       $09
0008A704 C20D                       	dc.b	nF5, $0D
0008A706 E103                       	smpsAlterNote       $03
0008A708 E701                       	dc.b	smpsNoAttack, $01
0008A70A E102                       	smpsAlterNote       $02
0008A70C E701                       	dc.b	smpsNoAttack, $01
0008A70E E106                       	smpsAlterNote       $06
0008A710 E701                       	dc.b	smpsNoAttack, $01
0008A712 E10C                       	smpsAlterNote       $0C
0008A714 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A718 E109                       	smpsAlterNote       $09
0008A71A E701                       	dc.b	smpsNoAttack, $01
0008A71C E103                       	smpsAlterNote       $03
0008A71E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A722 E109                       	smpsAlterNote       $09
0008A724 E701                       	dc.b	smpsNoAttack, $01
0008A726 E10C                       	smpsAlterNote       $0C
0008A728 E701                       	dc.b	smpsNoAttack, $01
0008A72A E10D                       	smpsAlterNote       $0D
0008A72C 8001                       	dc.b	nRst, $01
0008A72E E10B                       	smpsAlterNote       $0B
0008A730 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008A734 E109                       	smpsAlterNote       $09
0008A736 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008A73A E108                       	smpsAlterNote       $08
0008A73C C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008A748 8001                       	dc.b	nRst, $01
0008A74A E109                       	smpsAlterNote       $09
0008A74C C20D                       	dc.b	nF5, $0D
0008A74E E103                       	smpsAlterNote       $03
0008A750 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A754 E106                       	smpsAlterNote       $06
0008A756 E701                       	dc.b	smpsNoAttack, $01
0008A758 E10C                       	smpsAlterNote       $0C
0008A75A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A75E E106                       	smpsAlterNote       $06
0008A760 E701                       	dc.b	smpsNoAttack, $01
0008A762 E103                       	smpsAlterNote       $03
0008A764 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A768 E109                       	smpsAlterNote       $09
0008A76A E701                       	dc.b	smpsNoAttack, $01
0008A76C E10D                       	smpsAlterNote       $0D
0008A76E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008A774 E108                       	smpsAlterNote       $08
0008A776 E6FF                       	smpsAlterVol        $FF
0008A778 A806                       	dc.b	nEb3, $06
0008A77A E10C                       	smpsAlterNote       $0C
0008A77C A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008A780 E108                       	smpsAlterNote       $08
0008A782 A803                       	dc.b	nEb3, $03
0008A784 E109                       	smpsAlterNote       $09
0008A786 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008A78A E10C                       	smpsAlterNote       $0C
0008A78C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008A796 E109                       	smpsAlterNote       $09
0008A798 E602                       	smpsAlterVol        $02
0008A79A B604                       	dc.b	nF4, $04
0008A79C E602                       	smpsAlterVol        $02
0008A79E F6F1 AA                    	smpsJump            music84_Jump02
0008A7A1                            
0008A7A1                            ; FM4 Data
0008A7A1                            music84_FM4:
0008A7A3 E040                       	smpsPan             panRight, $00
0008A7A5 8003                       	dc.b	nRst, $03
0008A7A7 E10F                       	smpsAlterNote       $0F
0008A7A9 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008A7AD E10D                       	smpsAlterNote       $0D
0008A7AF C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008A7B3 E10C                       	smpsAlterNote       $0C
0008A7B5 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008A7BB E6FE                       	smpsAlterVol        $FE
0008A7BD E110                       	smpsAlterNote       $10
0008A7BF C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008A7C3 E10F                       	smpsAlterNote       $0F
0008A7C5 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008A7C9 E10D                       	smpsAlterNote       $0D
0008A7CB C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008A7D4 E10C                       	smpsAlterNote       $0C
0008A7D6 C103                       	dc.b	nE5, $03
0008A7D8 E10A                       	smpsAlterNote       $0A
0008A7DA BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008A7E0 03                         	dc.b	$03
0008A7E1                            
0008A7E1                            music84_Jump01:
0008A7E1 E10B                       	smpsAlterNote       $0B
0008A7E3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008A7E7 E10C                       	smpsAlterNote       $0C
0008A7E9 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008A7ED E10D                       	smpsAlterNote       $0D
0008A7EF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008A7F9 E10B                       	smpsAlterNote       $0B
0008A7FB BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008A7FF E107                       	smpsAlterNote       $07
0008A801 E701                       	dc.b	smpsNoAttack, $01
0008A803 E103                       	smpsAlterNote       $03
0008A805 E701                       	dc.b	smpsNoAttack, $01
0008A807 E104                       	smpsAlterNote       $04
0008A809 E701                       	dc.b	smpsNoAttack, $01
0008A80B E10A                       	smpsAlterNote       $0A
0008A80D E701                       	dc.b	smpsNoAttack, $01
0008A80F E10E                       	smpsAlterNote       $0E
0008A811 E701                       	dc.b	smpsNoAttack, $01
0008A813 E10A                       	smpsAlterNote       $0A
0008A815 E701                       	dc.b	smpsNoAttack, $01
0008A817 E107                       	smpsAlterNote       $07
0008A819 E701                       	dc.b	smpsNoAttack, $01
0008A81B E104                       	smpsAlterNote       $04
0008A81D 8001                       	dc.b	nRst, $01
0008A81F E110                       	smpsAlterNote       $10
0008A821 C703                       	dc.b	nBb5, $03
0008A823 E10F                       	smpsAlterNote       $0F
0008A825 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008A829 E10D                       	smpsAlterNote       $0D
0008A82B C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008A831 E10C                       	smpsAlterNote       $0C
0008A833 E701                       	dc.b	smpsNoAttack, $01
0008A835 E108                       	smpsAlterNote       $08
0008A837 E701                       	dc.b	smpsNoAttack, $01
0008A839 E10C                       	smpsAlterNote       $0C
0008A83B E701                       	dc.b	smpsNoAttack, $01
0008A83D E10F                       	smpsAlterNote       $0F
0008A83F E701                       	dc.b	smpsNoAttack, $01
0008A841 E113                       	smpsAlterNote       $13
0008A843 E701                       	dc.b	smpsNoAttack, $01
0008A845 E10F                       	smpsAlterNote       $0F
0008A847 E701                       	dc.b	smpsNoAttack, $01
0008A849 E109                       	smpsAlterNote       $09
0008A84B E701                       	dc.b	smpsNoAttack, $01
0008A84D E108                       	smpsAlterNote       $08
0008A84F E701                       	dc.b	smpsNoAttack, $01
0008A851 E10C                       	smpsAlterNote       $0C
0008A853 E701                       	dc.b	smpsNoAttack, $01
0008A855 E112                       	smpsAlterNote       $12
0008A857 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A85B E10C                       	smpsAlterNote       $0C
0008A85D E701                       	dc.b	smpsNoAttack, $01
0008A85F E109                       	smpsAlterNote       $09
0008A861 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A865 E10F                       	smpsAlterNote       $0F
0008A867 E701                       	dc.b	smpsNoAttack, $01
0008A869 E113                       	smpsAlterNote       $13
0008A86B E701                       	dc.b	smpsNoAttack, $01
0008A86D E112                       	smpsAlterNote       $12
0008A86F E701                       	dc.b	smpsNoAttack, $01
0008A871 E10C                       	smpsAlterNote       $0C
0008A873 E701                       	dc.b	smpsNoAttack, $01
0008A875 E108                       	smpsAlterNote       $08
0008A877 E701                       	dc.b	smpsNoAttack, $01
0008A879 E10C                       	smpsAlterNote       $0C
0008A87B E701                       	dc.b	smpsNoAttack, $01
0008A87D E10F                       	smpsAlterNote       $0F
0008A87F E701                       	dc.b	smpsNoAttack, $01
0008A881 E113                       	smpsAlterNote       $13
0008A883 E701                       	dc.b	smpsNoAttack, $01
0008A885 E10F                       	smpsAlterNote       $0F
0008A887 E701                       	dc.b	smpsNoAttack, $01
0008A889 E109                       	smpsAlterNote       $09
0008A88B E701                       	dc.b	smpsNoAttack, $01
0008A88D E108                       	smpsAlterNote       $08
0008A88F E701                       	dc.b	smpsNoAttack, $01
0008A891 E10C                       	smpsAlterNote       $0C
0008A893 E701                       	dc.b	smpsNoAttack, $01
0008A895 E112                       	smpsAlterNote       $12
0008A897 E701                       	dc.b	smpsNoAttack, $01
0008A899 E113                       	smpsAlterNote       $13
0008A89B 800F                       	dc.b	nRst, $0F
0008A89D E10B                       	smpsAlterNote       $0B
0008A89F BF03                       	dc.b	nD5, $03
0008A8A1 E10C                       	smpsAlterNote       $0C
0008A8A3 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008A8A7 E10D                       	smpsAlterNote       $0D
0008A8A9 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008A8B1 E10B                       	smpsAlterNote       $0B
0008A8B3 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008A8BD E110                       	smpsAlterNote       $10
0008A8BF C704                       	dc.b	nBb5, $04
0008A8C1 E10F                       	smpsAlterNote       $0F
0008A8C3 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008A8C7 E10D                       	smpsAlterNote       $0D
0008A8C9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008A8CF E109                       	smpsAlterNote       $09
0008A8D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8D5 E10F                       	smpsAlterNote       $0F
0008A8D7 E701                       	dc.b	smpsNoAttack, $01
0008A8D9 E112                       	smpsAlterNote       $12
0008A8DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A8DF E10C                       	smpsAlterNote       $0C
0008A8E1 E701                       	dc.b	smpsNoAttack, $01
0008A8E3 E108                       	smpsAlterNote       $08
0008A8E5 E701                       	dc.b	smpsNoAttack, $01
0008A8E7 E109                       	smpsAlterNote       $09
0008A8E9 E701                       	dc.b	smpsNoAttack, $01
0008A8EB E10F                       	smpsAlterNote       $0F
0008A8ED E701                       	dc.b	smpsNoAttack, $01
0008A8EF E113                       	smpsAlterNote       $13
0008A8F1 E701                       	dc.b	smpsNoAttack, $01
0008A8F3 E10F                       	smpsAlterNote       $0F
0008A8F5 E701                       	dc.b	smpsNoAttack, $01
0008A8F7 E10C                       	smpsAlterNote       $0C
0008A8F9 E701                       	dc.b	smpsNoAttack, $01
0008A8FB E108                       	smpsAlterNote       $08
0008A8FD E701                       	dc.b	smpsNoAttack, $01
0008A8FF E10C                       	smpsAlterNote       $0C
0008A901 E701                       	dc.b	smpsNoAttack, $01
0008A903 E112                       	smpsAlterNote       $12
0008A905 E701                       	dc.b	smpsNoAttack, $01
0008A907 E113                       	smpsAlterNote       $13
0008A909 E701                       	dc.b	smpsNoAttack, $01
0008A90B E10F                       	smpsAlterNote       $0F
0008A90D E701                       	dc.b	smpsNoAttack, $01
0008A90F E109                       	smpsAlterNote       $09
0008A911 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A915 E10C                       	smpsAlterNote       $0C
0008A917 E701                       	dc.b	smpsNoAttack, $01
0008A919 E112                       	smpsAlterNote       $12
0008A91B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A91F E10C                       	smpsAlterNote       $0C
0008A921 E701                       	dc.b	smpsNoAttack, $01
0008A923 E109                       	smpsAlterNote       $09
0008A925 E701                       	dc.b	smpsNoAttack, $01
0008A927 E10D                       	smpsAlterNote       $0D
0008A929 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008A92D E10F                       	smpsAlterNote       $0F
0008A92F C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008A939 E10D                       	smpsAlterNote       $0D
0008A93B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008A941 E10B                       	smpsAlterNote       $0B
0008A943 BF0D                       	dc.b	nD5, $0D
0008A945 E108                       	smpsAlterNote       $08
0008A947 E701                       	dc.b	smpsNoAttack, $01
0008A949 E104                       	smpsAlterNote       $04
0008A94B E701                       	dc.b	smpsNoAttack, $01
0008A94D E108                       	smpsAlterNote       $08
0008A94F E701                       	dc.b	smpsNoAttack, $01
0008A951 E10B                       	smpsAlterNote       $0B
0008A953 E701                       	dc.b	smpsNoAttack, $01
0008A955 E10F                       	smpsAlterNote       $0F
0008A957 E701                       	dc.b	smpsNoAttack, $01
0008A959 E10B                       	smpsAlterNote       $0B
0008A95B E701                       	dc.b	smpsNoAttack, $01
0008A95D E105                       	smpsAlterNote       $05
0008A95F E701                       	dc.b	smpsNoAttack, $01
0008A961 E104                       	smpsAlterNote       $04
0008A963 E701                       	dc.b	smpsNoAttack, $01
0008A965 E108                       	smpsAlterNote       $08
0008A967 E701                       	dc.b	smpsNoAttack, $01
0008A969 E10E                       	smpsAlterNote       $0E
0008A96B E701                       	dc.b	smpsNoAttack, $01
0008A96D E10F                       	smpsAlterNote       $0F
0008A96F 8001                       	dc.b	nRst, $01
0008A971 E10C                       	smpsAlterNote       $0C
0008A973 C101                       	dc.b	nE5, $01
0008A975 E10D                       	smpsAlterNote       $0D
0008A977 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008A97D E10F                       	smpsAlterNote       $0F
0008A97F C606 8001                  	dc.b	nA5, $06, nRst, $01
0008A983 E10C                       	smpsAlterNote       $0C
0008A985 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008A989 E10D                       	smpsAlterNote       $0D
0008A98B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008A98F E10C                       	smpsAlterNote       $0C
0008A991 CD03                       	dc.b	nE6, $03
0008A993 E10A                       	smpsAlterNote       $0A
0008A995 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008A999 E10D                       	smpsAlterNote       $0D
0008A99B C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008A9A3 E109                       	smpsAlterNote       $09
0008A9A5 E701                       	dc.b	smpsNoAttack, $01
0008A9A7 E10D                       	smpsAlterNote       $0D
0008A9A9 E701                       	dc.b	smpsNoAttack, $01
0008A9AB E110                       	smpsAlterNote       $10
0008A9AD E701                       	dc.b	smpsNoAttack, $01
0008A9AF E114                       	smpsAlterNote       $14
0008A9B1 E701                       	dc.b	smpsNoAttack, $01
0008A9B3 E110                       	smpsAlterNote       $10
0008A9B5 E701                       	dc.b	smpsNoAttack, $01
0008A9B7 E10A                       	smpsAlterNote       $0A
0008A9B9 E701                       	dc.b	smpsNoAttack, $01
0008A9BB E109                       	smpsAlterNote       $09
0008A9BD E701                       	dc.b	smpsNoAttack, $01
0008A9BF E10D                       	smpsAlterNote       $0D
0008A9C1 E701                       	dc.b	smpsNoAttack, $01
0008A9C3 E113                       	smpsAlterNote       $13
0008A9C5 E701                       	dc.b	smpsNoAttack, $01
0008A9C7 E114                       	smpsAlterNote       $14
0008A9C9 8001                       	dc.b	nRst, $01
0008A9CB E10F                       	smpsAlterNote       $0F
0008A9CD C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008A9D3 E10C                       	smpsAlterNote       $0C
0008A9D5 E701                       	dc.b	smpsNoAttack, $01
0008A9D7 E108                       	smpsAlterNote       $08
0008A9D9 E701                       	dc.b	smpsNoAttack, $01
0008A9DB E10C                       	smpsAlterNote       $0C
0008A9DD E701                       	dc.b	smpsNoAttack, $01
0008A9DF E112                       	smpsAlterNote       $12
0008A9E1 E701                       	dc.b	smpsNoAttack, $01
0008A9E3 E113                       	smpsAlterNote       $13
0008A9E5 E701                       	dc.b	smpsNoAttack, $01
0008A9E7 E10F                       	smpsAlterNote       $0F
0008A9E9 E701                       	dc.b	smpsNoAttack, $01
0008A9EB E109                       	smpsAlterNote       $09
0008A9ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9F1 E10C                       	smpsAlterNote       $0C
0008A9F3 E701                       	dc.b	smpsNoAttack, $01
0008A9F5 E112                       	smpsAlterNote       $12
0008A9F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A9FB E10C                       	smpsAlterNote       $0C
0008A9FD E701                       	dc.b	smpsNoAttack, $01
0008A9FF E109                       	smpsAlterNote       $09
0008AA01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA05 E10F                       	smpsAlterNote       $0F
0008AA07 E701                       	dc.b	smpsNoAttack, $01
0008AA09 E113                       	smpsAlterNote       $13
0008AA0B E701                       	dc.b	smpsNoAttack, $01
0008AA0D E112                       	smpsAlterNote       $12
0008AA0F E701                       	dc.b	smpsNoAttack, $01
0008AA11 E10C                       	smpsAlterNote       $0C
0008AA13 E701                       	dc.b	smpsNoAttack, $01
0008AA15 E108                       	smpsAlterNote       $08
0008AA17 E701                       	dc.b	smpsNoAttack, $01
0008AA19 E10C                       	smpsAlterNote       $0C
0008AA1B E701                       	dc.b	smpsNoAttack, $01
0008AA1D E10F                       	smpsAlterNote       $0F
0008AA1F E701                       	dc.b	smpsNoAttack, $01
0008AA21 E113                       	smpsAlterNote       $13
0008AA23 E701                       	dc.b	smpsNoAttack, $01
0008AA25 E10F                       	smpsAlterNote       $0F
0008AA27 E701                       	dc.b	smpsNoAttack, $01
0008AA29 E109                       	smpsAlterNote       $09
0008AA2B E701                       	dc.b	smpsNoAttack, $01
0008AA2D E108                       	smpsAlterNote       $08
0008AA2F E701                       	dc.b	smpsNoAttack, $01
0008AA31 E10C                       	smpsAlterNote       $0C
0008AA33 E701                       	dc.b	smpsNoAttack, $01
0008AA35 E112                       	smpsAlterNote       $12
0008AA37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA3B E10F                       	smpsAlterNote       $0F
0008AA3D E701                       	dc.b	smpsNoAttack, $01
0008AA3F E109                       	smpsAlterNote       $09
0008AA41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA45 E10F                       	smpsAlterNote       $0F
0008AA47 E701                       	dc.b	smpsNoAttack, $01
0008AA49 E113                       	smpsAlterNote       $13
0008AA4B E701                       	dc.b	smpsNoAttack, $01
0008AA4D E112                       	smpsAlterNote       $12
0008AA4F E701                       	dc.b	smpsNoAttack, $01
0008AA51 E10C                       	smpsAlterNote       $0C
0008AA53 E701                       	dc.b	smpsNoAttack, $01
0008AA55 E108                       	smpsAlterNote       $08
0008AA57 E701                       	dc.b	smpsNoAttack, $01
0008AA59 E10C                       	smpsAlterNote       $0C
0008AA5B E701                       	dc.b	smpsNoAttack, $01
0008AA5D E10F                       	smpsAlterNote       $0F
0008AA5F E701                       	dc.b	smpsNoAttack, $01
0008AA61 E113                       	smpsAlterNote       $13
0008AA63 E701                       	dc.b	smpsNoAttack, $01
0008AA65 E10F                       	smpsAlterNote       $0F
0008AA67 E701                       	dc.b	smpsNoAttack, $01
0008AA69 E109                       	smpsAlterNote       $09
0008AA6B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AA6F E10F                       	smpsAlterNote       $0F
0008AA71 C60D                       	dc.b	nA5, $0D
0008AA73 E109                       	smpsAlterNote       $09
0008AA75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA79 E10C                       	smpsAlterNote       $0C
0008AA7B E701                       	dc.b	smpsNoAttack, $01
0008AA7D E112                       	smpsAlterNote       $12
0008AA7F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA83 E10C                       	smpsAlterNote       $0C
0008AA85 E701                       	dc.b	smpsNoAttack, $01
0008AA87 E109                       	smpsAlterNote       $09
0008AA89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AA8D E10F                       	smpsAlterNote       $0F
0008AA8F E701                       	dc.b	smpsNoAttack, $01
0008AA91 E113                       	smpsAlterNote       $13
0008AA93 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008AA99 E10D                       	smpsAlterNote       $0D
0008AA9B C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008AAA3 E10C                       	smpsAlterNote       $0C
0008AAA5 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008AAAB E6FF                       	smpsAlterVol        $FF
0008AAAD E10B                       	smpsAlterNote       $0B
0008AAAF BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008AAB3 E10C                       	smpsAlterNote       $0C
0008AAB5 C103                       	dc.b	nE5, $03
0008AAB7 E10D                       	smpsAlterNote       $0D
0008AAB9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008AAC3 E10B                       	smpsAlterNote       $0B
0008AAC5 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008AAC9 E107                       	smpsAlterNote       $07
0008AACB E701                       	dc.b	smpsNoAttack, $01
0008AACD E104                       	smpsAlterNote       $04
0008AACF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AAD3 E10A                       	smpsAlterNote       $0A
0008AAD5 E701                       	dc.b	smpsNoAttack, $01
0008AAD7 E10D                       	smpsAlterNote       $0D
0008AAD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AADD E107                       	smpsAlterNote       $07
0008AADF E701                       	dc.b	smpsNoAttack, $01
0008AAE1 E104                       	smpsAlterNote       $04
0008AAE3 8001                       	dc.b	nRst, $01
0008AAE5 E110                       	smpsAlterNote       $10
0008AAE7 C703                       	dc.b	nBb5, $03
0008AAE9 E10F                       	smpsAlterNote       $0F
0008AAEB C603 8001                  	dc.b	nA5, $03, nRst, $01
0008AAEF E10D                       	smpsAlterNote       $0D
0008AAF1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008AAF5 E10C                       	smpsAlterNote       $0C
0008AAF7 E701                       	dc.b	smpsNoAttack, $01
0008AAF9 E108                       	smpsAlterNote       $08
0008AAFB E701                       	dc.b	smpsNoAttack, $01
0008AAFD E109                       	smpsAlterNote       $09
0008AAFF E701                       	dc.b	smpsNoAttack, $01
0008AB01 E10F                       	smpsAlterNote       $0F
0008AB03 E701                       	dc.b	smpsNoAttack, $01
0008AB05 E113                       	smpsAlterNote       $13
0008AB07 E701                       	dc.b	smpsNoAttack, $01
0008AB09 E10F                       	smpsAlterNote       $0F
0008AB0B E701                       	dc.b	smpsNoAttack, $01
0008AB0D E10C                       	smpsAlterNote       $0C
0008AB0F E701                       	dc.b	smpsNoAttack, $01
0008AB11 E108                       	smpsAlterNote       $08
0008AB13 E701                       	dc.b	smpsNoAttack, $01
0008AB15 E10C                       	smpsAlterNote       $0C
0008AB17 E701                       	dc.b	smpsNoAttack, $01
0008AB19 E112                       	smpsAlterNote       $12
0008AB1B E701                       	dc.b	smpsNoAttack, $01
0008AB1D E113                       	smpsAlterNote       $13
0008AB1F E701                       	dc.b	smpsNoAttack, $01
0008AB21 E10F                       	smpsAlterNote       $0F
0008AB23 E701                       	dc.b	smpsNoAttack, $01
0008AB25 E109                       	smpsAlterNote       $09
0008AB27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB2B E10C                       	smpsAlterNote       $0C
0008AB2D E701                       	dc.b	smpsNoAttack, $01
0008AB2F E112                       	smpsAlterNote       $12
0008AB31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB35 E10C                       	smpsAlterNote       $0C
0008AB37 E701                       	dc.b	smpsNoAttack, $01
0008AB39 E109                       	smpsAlterNote       $09
0008AB3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AB3F E10F                       	smpsAlterNote       $0F
0008AB41 E701                       	dc.b	smpsNoAttack, $01
0008AB43 E113                       	smpsAlterNote       $13
0008AB45 E701                       	dc.b	smpsNoAttack, $01
0008AB47 E112                       	smpsAlterNote       $12
0008AB49 E701                       	dc.b	smpsNoAttack, $01
0008AB4B E10C                       	smpsAlterNote       $0C
0008AB4D E701                       	dc.b	smpsNoAttack, $01
0008AB4F E108                       	smpsAlterNote       $08
0008AB51 E701                       	dc.b	smpsNoAttack, $01
0008AB53 E10C                       	smpsAlterNote       $0C
0008AB55 E701                       	dc.b	smpsNoAttack, $01
0008AB57 E10F                       	smpsAlterNote       $0F
0008AB59 E701                       	dc.b	smpsNoAttack, $01
0008AB5B E113                       	smpsAlterNote       $13
0008AB5D E701                       	dc.b	smpsNoAttack, $01
0008AB5F E10F                       	smpsAlterNote       $0F
0008AB61 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008AB65 E110                       	smpsAlterNote       $10
0008AB67 BB03                       	dc.b	nBb4, $03
0008AB69 E10F                       	smpsAlterNote       $0F
0008AB6B BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008AB6F E10B                       	smpsAlterNote       $0B
0008AB71 BF03                       	dc.b	nD5, $03
0008AB73 E10C                       	smpsAlterNote       $0C
0008AB75 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008AB79 E10D                       	smpsAlterNote       $0D
0008AB7B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008AB85 E10B                       	smpsAlterNote       $0B
0008AB87 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008AB93 E110                       	smpsAlterNote       $10
0008AB95 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AB99 E10F                       	smpsAlterNote       $0F
0008AB9B C604                       	dc.b	nA5, $04
0008AB9D E10D                       	smpsAlterNote       $0D
0008AB9F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008ABA5 E109                       	smpsAlterNote       $09
0008ABA7 E701                       	dc.b	smpsNoAttack, $01
0008ABA9 E108                       	smpsAlterNote       $08
0008ABAB E701                       	dc.b	smpsNoAttack, $01
0008ABAD E10C                       	smpsAlterNote       $0C
0008ABAF E701                       	dc.b	smpsNoAttack, $01
0008ABB1 E112                       	smpsAlterNote       $12
0008ABB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABB7 E10F                       	smpsAlterNote       $0F
0008ABB9 E701                       	dc.b	smpsNoAttack, $01
0008ABBB E109                       	smpsAlterNote       $09
0008ABBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABC1 E10F                       	smpsAlterNote       $0F
0008ABC3 E701                       	dc.b	smpsNoAttack, $01
0008ABC5 E112                       	smpsAlterNote       $12
0008ABC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABCB E10C                       	smpsAlterNote       $0C
0008ABCD E701                       	dc.b	smpsNoAttack, $01
0008ABCF E108                       	smpsAlterNote       $08
0008ABD1 E701                       	dc.b	smpsNoAttack, $01
0008ABD3 E109                       	smpsAlterNote       $09
0008ABD5 E701                       	dc.b	smpsNoAttack, $01
0008ABD7 E10F                       	smpsAlterNote       $0F
0008ABD9 E701                       	dc.b	smpsNoAttack, $01
0008ABDB E113                       	smpsAlterNote       $13
0008ABDD E701                       	dc.b	smpsNoAttack, $01
0008ABDF E10F                       	smpsAlterNote       $0F
0008ABE1 E701                       	dc.b	smpsNoAttack, $01
0008ABE3 E10C                       	smpsAlterNote       $0C
0008ABE5 E701                       	dc.b	smpsNoAttack, $01
0008ABE7 E108                       	smpsAlterNote       $08
0008ABE9 E701                       	dc.b	smpsNoAttack, $01
0008ABEB E10C                       	smpsAlterNote       $0C
0008ABED E701                       	dc.b	smpsNoAttack, $01
0008ABEF E112                       	smpsAlterNote       $12
0008ABF1 E701                       	dc.b	smpsNoAttack, $01
0008ABF3 E113                       	smpsAlterNote       $13
0008ABF5 E701                       	dc.b	smpsNoAttack, $01
0008ABF7 E10F                       	smpsAlterNote       $0F
0008ABF9 E701                       	dc.b	smpsNoAttack, $01
0008ABFB E109                       	smpsAlterNote       $09
0008ABFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC01 E10C                       	smpsAlterNote       $0C
0008AC03 E701                       	dc.b	smpsNoAttack, $01
0008AC05 E112                       	smpsAlterNote       $12
0008AC07 E701                       	dc.b	smpsNoAttack, $01
0008AC09 E113                       	smpsAlterNote       $13
0008AC0B 8001                       	dc.b	nRst, $01
0008AC0D E10F                       	smpsAlterNote       $0F
0008AC0F C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008AC1B C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008AC23 E10D                       	smpsAlterNote       $0D
0008AC25 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AC2B E10B                       	smpsAlterNote       $0B
0008AC2D BF0D                       	dc.b	nD5, $0D
0008AC2F E108                       	smpsAlterNote       $08
0008AC31 E701                       	dc.b	smpsNoAttack, $01
0008AC33 E104                       	smpsAlterNote       $04
0008AC35 E701                       	dc.b	smpsNoAttack, $01
0008AC37 E105                       	smpsAlterNote       $05
0008AC39 E701                       	dc.b	smpsNoAttack, $01
0008AC3B E10B                       	smpsAlterNote       $0B
0008AC3D E701                       	dc.b	smpsNoAttack, $01
0008AC3F E10F                       	smpsAlterNote       $0F
0008AC41 E701                       	dc.b	smpsNoAttack, $01
0008AC43 E10B                       	smpsAlterNote       $0B
0008AC45 E701                       	dc.b	smpsNoAttack, $01
0008AC47 E108                       	smpsAlterNote       $08
0008AC49 E701                       	dc.b	smpsNoAttack, $01
0008AC4B E104                       	smpsAlterNote       $04
0008AC4D E701                       	dc.b	smpsNoAttack, $01
0008AC4F E108                       	smpsAlterNote       $08
0008AC51 E701                       	dc.b	smpsNoAttack, $01
0008AC53 E10E                       	smpsAlterNote       $0E
0008AC55 E701                       	dc.b	smpsNoAttack, $01
0008AC57 E10F                       	smpsAlterNote       $0F
0008AC59 E701                       	dc.b	smpsNoAttack, $01
0008AC5B E10C                       	smpsAlterNote       $0C
0008AC5D C101                       	dc.b	nE5, $01
0008AC5F E10D                       	smpsAlterNote       $0D
0008AC61 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008AC69 E10F                       	smpsAlterNote       $0F
0008AC6B C607                       	dc.b	nA5, $07
0008AC6D E10C                       	smpsAlterNote       $0C
0008AC6F CD07                       	dc.b	nE6, $07
0008AC71 E10D                       	smpsAlterNote       $0D
0008AC73 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008AC77 E10C                       	smpsAlterNote       $0C
0008AC79 CD03                       	dc.b	nE6, $03
0008AC7B E10A                       	smpsAlterNote       $0A
0008AC7D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008AC81 E10D                       	smpsAlterNote       $0D
0008AC83 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008AC89 E10A                       	smpsAlterNote       $0A
0008AC8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AC8F E110                       	smpsAlterNote       $10
0008AC91 E701                       	dc.b	smpsNoAttack, $01
0008AC93 E114                       	smpsAlterNote       $14
0008AC95 E701                       	dc.b	smpsNoAttack, $01
0008AC97 E113                       	smpsAlterNote       $13
0008AC99 E701                       	dc.b	smpsNoAttack, $01
0008AC9B E10D                       	smpsAlterNote       $0D
0008AC9D E701                       	dc.b	smpsNoAttack, $01
0008AC9F E109                       	smpsAlterNote       $09
0008ACA1 E701                       	dc.b	smpsNoAttack, $01
0008ACA3 E10D                       	smpsAlterNote       $0D
0008ACA5 E701                       	dc.b	smpsNoAttack, $01
0008ACA7 E110                       	smpsAlterNote       $10
0008ACA9 E701                       	dc.b	smpsNoAttack, $01
0008ACAB E114                       	smpsAlterNote       $14
0008ACAD E701                       	dc.b	smpsNoAttack, $01
0008ACAF E10F                       	smpsAlterNote       $0F
0008ACB1 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008ACB5 E10C                       	smpsAlterNote       $0C
0008ACB7 E701                       	dc.b	smpsNoAttack, $01
0008ACB9 E108                       	smpsAlterNote       $08
0008ACBB E701                       	dc.b	smpsNoAttack, $01
0008ACBD E10C                       	smpsAlterNote       $0C
0008ACBF E701                       	dc.b	smpsNoAttack, $01
0008ACC1 E10F                       	smpsAlterNote       $0F
0008ACC3 E701                       	dc.b	smpsNoAttack, $01
0008ACC5 E113                       	smpsAlterNote       $13
0008ACC7 E701                       	dc.b	smpsNoAttack, $01
0008ACC9 E10F                       	smpsAlterNote       $0F
0008ACCB E701                       	dc.b	smpsNoAttack, $01
0008ACCD E109                       	smpsAlterNote       $09
0008ACCF E701                       	dc.b	smpsNoAttack, $01
0008ACD1 E108                       	smpsAlterNote       $08
0008ACD3 E701                       	dc.b	smpsNoAttack, $01
0008ACD5 E10C                       	smpsAlterNote       $0C
0008ACD7 E701                       	dc.b	smpsNoAttack, $01
0008ACD9 E112                       	smpsAlterNote       $12
0008ACDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACDF E10F                       	smpsAlterNote       $0F
0008ACE1 E701                       	dc.b	smpsNoAttack, $01
0008ACE3 E109                       	smpsAlterNote       $09
0008ACE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACE9 E10F                       	smpsAlterNote       $0F
0008ACEB E701                       	dc.b	smpsNoAttack, $01
0008ACED E112                       	smpsAlterNote       $12
0008ACEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ACF3 E10C                       	smpsAlterNote       $0C
0008ACF5 E701                       	dc.b	smpsNoAttack, $01
0008ACF7 E108                       	smpsAlterNote       $08
0008ACF9 E701                       	dc.b	smpsNoAttack, $01
0008ACFB E109                       	smpsAlterNote       $09
0008ACFD E701                       	dc.b	smpsNoAttack, $01
0008ACFF E10F                       	smpsAlterNote       $0F
0008AD01 E701                       	dc.b	smpsNoAttack, $01
0008AD03 E113                       	smpsAlterNote       $13
0008AD05 E701                       	dc.b	smpsNoAttack, $01
0008AD07 E10F                       	smpsAlterNote       $0F
0008AD09 E701                       	dc.b	smpsNoAttack, $01
0008AD0B E10C                       	smpsAlterNote       $0C
0008AD0D E701                       	dc.b	smpsNoAttack, $01
0008AD0F E108                       	smpsAlterNote       $08
0008AD11 E701                       	dc.b	smpsNoAttack, $01
0008AD13 E10C                       	smpsAlterNote       $0C
0008AD15 E701                       	dc.b	smpsNoAttack, $01
0008AD17 E112                       	smpsAlterNote       $12
0008AD19 E701                       	dc.b	smpsNoAttack, $01
0008AD1B E113                       	smpsAlterNote       $13
0008AD1D E701                       	dc.b	smpsNoAttack, $01
0008AD1F E10F                       	smpsAlterNote       $0F
0008AD21 E701                       	dc.b	smpsNoAttack, $01
0008AD23 E109                       	smpsAlterNote       $09
0008AD25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD29 E10C                       	smpsAlterNote       $0C
0008AD2B E701                       	dc.b	smpsNoAttack, $01
0008AD2D E112                       	smpsAlterNote       $12
0008AD2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD33 E10C                       	smpsAlterNote       $0C
0008AD35 E701                       	dc.b	smpsNoAttack, $01
0008AD37 E109                       	smpsAlterNote       $09
0008AD39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD3D E10F                       	smpsAlterNote       $0F
0008AD3F E701                       	dc.b	smpsNoAttack, $01
0008AD41 E113                       	smpsAlterNote       $13
0008AD43 E701                       	dc.b	smpsNoAttack, $01
0008AD45 E112                       	smpsAlterNote       $12
0008AD47 E701                       	dc.b	smpsNoAttack, $01
0008AD49 E10C                       	smpsAlterNote       $0C
0008AD4B E701                       	dc.b	smpsNoAttack, $01
0008AD4D E109                       	smpsAlterNote       $09
0008AD4F 8001                       	dc.b	nRst, $01
0008AD51 E10F                       	smpsAlterNote       $0F
0008AD53 C60D                       	dc.b	nA5, $0D
0008AD55 E10C                       	smpsAlterNote       $0C
0008AD57 E701                       	dc.b	smpsNoAttack, $01
0008AD59 E108                       	smpsAlterNote       $08
0008AD5B E701                       	dc.b	smpsNoAttack, $01
0008AD5D E10C                       	smpsAlterNote       $0C
0008AD5F E701                       	dc.b	smpsNoAttack, $01
0008AD61 E112                       	smpsAlterNote       $12
0008AD63 E701                       	dc.b	smpsNoAttack, $01
0008AD65 E113                       	smpsAlterNote       $13
0008AD67 E701                       	dc.b	smpsNoAttack, $01
0008AD69 E10F                       	smpsAlterNote       $0F
0008AD6B E701                       	dc.b	smpsNoAttack, $01
0008AD6D E109                       	smpsAlterNote       $09
0008AD6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD73 E10C                       	smpsAlterNote       $0C
0008AD75 E701                       	dc.b	smpsNoAttack, $01
0008AD77 E112                       	smpsAlterNote       $12
0008AD79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD7D E10C                       	smpsAlterNote       $0C
0008AD7F E701                       	dc.b	smpsNoAttack, $01
0008AD81 E109                       	smpsAlterNote       $09
0008AD83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD87 E10F                       	smpsAlterNote       $0F
0008AD89 E701                       	dc.b	smpsNoAttack, $01
0008AD8B E113                       	smpsAlterNote       $13
0008AD8D E701                       	dc.b	smpsNoAttack, $01
0008AD8F E112                       	smpsAlterNote       $12
0008AD91 E701                       	dc.b	smpsNoAttack, $01
0008AD93 E10C                       	smpsAlterNote       $0C
0008AD95 E701                       	dc.b	smpsNoAttack, $01
0008AD97 E108                       	smpsAlterNote       $08
0008AD99 E701                       	dc.b	smpsNoAttack, $01
0008AD9B E10C                       	smpsAlterNote       $0C
0008AD9D E701                       	dc.b	smpsNoAttack, $01
0008AD9F E10F                       	smpsAlterNote       $0F
0008ADA1 E701                       	dc.b	smpsNoAttack, $01
0008ADA3 E113                       	smpsAlterNote       $13
0008ADA5 E701                       	dc.b	smpsNoAttack, $01
0008ADA7 E10F                       	smpsAlterNote       $0F
0008ADA9 E701                       	dc.b	smpsNoAttack, $01
0008ADAB E109                       	smpsAlterNote       $09
0008ADAD E701                       	dc.b	smpsNoAttack, $01
0008ADAF E108                       	smpsAlterNote       $08
0008ADB1 E701                       	dc.b	smpsNoAttack, $01
0008ADB3 E10C                       	smpsAlterNote       $0C
0008ADB5 E701                       	dc.b	smpsNoAttack, $01
0008ADB7 E112                       	smpsAlterNote       $12
0008ADB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADBD E10F                       	smpsAlterNote       $0F
0008ADBF E701                       	dc.b	smpsNoAttack, $01
0008ADC1 E109                       	smpsAlterNote       $09
0008ADC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADC7 E10F                       	smpsAlterNote       $0F
0008ADC9 E701                       	dc.b	smpsNoAttack, $01
0008ADCB E112                       	smpsAlterNote       $12
0008ADCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ADD1 E10C                       	smpsAlterNote       $0C
0008ADD3 E701                       	dc.b	smpsNoAttack, $01
0008ADD5 E108                       	smpsAlterNote       $08
0008ADD7 E701                       	dc.b	smpsNoAttack, $01
0008ADD9 E10C                       	smpsAlterNote       $0C
0008ADDB E701                       	dc.b	smpsNoAttack, $01
0008ADDD E10F                       	smpsAlterNote       $0F
0008ADDF E701                       	dc.b	smpsNoAttack, $01
0008ADE1 E113                       	smpsAlterNote       $13
0008ADE3 E701                       	dc.b	smpsNoAttack, $01
0008ADE5 E10F                       	smpsAlterNote       $0F
0008ADE7 E701                       	dc.b	smpsNoAttack, $01
0008ADE9 E109                       	smpsAlterNote       $09
0008ADEB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008ADF1 E601                       	smpsAlterVol        $01
0008ADF3 E10F                       	smpsAlterNote       $0F
0008ADF5 C604                       	dc.b	nA5, $04
0008ADF7 E10D                       	smpsAlterNote       $0D
0008ADF9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008ADFF E10B                       	smpsAlterNote       $0B
0008AE01 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008AE09 E10F                       	smpsAlterNote       $0F
0008AE0B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AE0F E10D                       	smpsAlterNote       $0D
0008AE11 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008AE17 E10C                       	smpsAlterNote       $0C
0008AE19 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008AE1F E10A                       	smpsAlterNote       $0A
0008AE21 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008AE25 E110                       	smpsAlterNote       $10
0008AE27 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008AE2B E10F                       	smpsAlterNote       $0F
0008AE2D C604                       	dc.b	nA5, $04
0008AE2F E10D                       	smpsAlterNote       $0D
0008AE31 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008AE3D E109                       	smpsAlterNote       $09
0008AE3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE43 E10F                       	smpsAlterNote       $0F
0008AE45 E701                       	dc.b	smpsNoAttack, $01
0008AE47 E112                       	smpsAlterNote       $12
0008AE49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AE4D E10C                       	smpsAlterNote       $0C
0008AE4F E701                       	dc.b	smpsNoAttack, $01
0008AE51 E108                       	smpsAlterNote       $08
0008AE53 E701                       	dc.b	smpsNoAttack, $01
0008AE55 E10C                       	smpsAlterNote       $0C
0008AE57 E701                       	dc.b	smpsNoAttack, $01
0008AE59 E10F                       	smpsAlterNote       $0F
0008AE5B E701                       	dc.b	smpsNoAttack, $01
0008AE5D E113                       	smpsAlterNote       $13
0008AE5F E701                       	dc.b	smpsNoAttack, $01
0008AE61 E10D                       	smpsAlterNote       $0D
0008AE63 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008AE69 E10C                       	smpsAlterNote       $0C
0008AE6B C10D                       	dc.b	nE5, $0D
0008AE6D E109                       	smpsAlterNote       $09
0008AE6F E701                       	dc.b	smpsNoAttack, $01
0008AE71 E105                       	smpsAlterNote       $05
0008AE73 E701                       	dc.b	smpsNoAttack, $01
0008AE75 E106                       	smpsAlterNote       $06
0008AE77 E701                       	dc.b	smpsNoAttack, $01
0008AE79 E10C                       	smpsAlterNote       $0C
0008AE7B E701                       	dc.b	smpsNoAttack, $01
0008AE7D E110                       	smpsAlterNote       $10
0008AE7F E701                       	dc.b	smpsNoAttack, $01
0008AE81 E10C                       	smpsAlterNote       $0C
0008AE83 E701                       	dc.b	smpsNoAttack, $01
0008AE85 E109                       	smpsAlterNote       $09
0008AE87 E701                       	dc.b	smpsNoAttack, $01
0008AE89 E105                       	smpsAlterNote       $05
0008AE8B E701                       	dc.b	smpsNoAttack, $01
0008AE8D E109                       	smpsAlterNote       $09
0008AE8F E701                       	dc.b	smpsNoAttack, $01
0008AE91 E10F                       	smpsAlterNote       $0F
0008AE93 E701                       	dc.b	smpsNoAttack, $01
0008AE95 E110                       	smpsAlterNote       $10
0008AE97 E701                       	dc.b	smpsNoAttack, $01
0008AE99 E10C                       	smpsAlterNote       $0C
0008AE9B E701                       	dc.b	smpsNoAttack, $01
0008AE9D E106                       	smpsAlterNote       $06
0008AE9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEA3 E109                       	smpsAlterNote       $09
0008AEA5 E701                       	dc.b	smpsNoAttack, $01
0008AEA7 E10F                       	smpsAlterNote       $0F
0008AEA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEAD E109                       	smpsAlterNote       $09
0008AEAF E701                       	dc.b	smpsNoAttack, $01
0008AEB1 E106                       	smpsAlterNote       $06
0008AEB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEB7 E10C                       	smpsAlterNote       $0C
0008AEB9 E701                       	dc.b	smpsNoAttack, $01
0008AEBB E110                       	smpsAlterNote       $10
0008AEBD E701                       	dc.b	smpsNoAttack, $01
0008AEBF E10F                       	smpsAlterNote       $0F
0008AEC1 E701                       	dc.b	smpsNoAttack, $01
0008AEC3 E109                       	smpsAlterNote       $09
0008AEC5 E701                       	dc.b	smpsNoAttack, $01
0008AEC7 E105                       	smpsAlterNote       $05
0008AEC9 E701                       	dc.b	smpsNoAttack, $01
0008AECB E109                       	smpsAlterNote       $09
0008AECD E701                       	dc.b	smpsNoAttack, $01
0008AECF E10C                       	smpsAlterNote       $0C
0008AED1 E701                       	dc.b	smpsNoAttack, $01
0008AED3 E110                       	smpsAlterNote       $10
0008AED5 E701                       	dc.b	smpsNoAttack, $01
0008AED7 E10C                       	smpsAlterNote       $0C
0008AED9 E701                       	dc.b	smpsNoAttack, $01
0008AEDB E106                       	smpsAlterNote       $06
0008AEDD E701                       	dc.b	smpsNoAttack, $01
0008AEDF E105                       	smpsAlterNote       $05
0008AEE1 E701                       	dc.b	smpsNoAttack, $01
0008AEE3 E109                       	smpsAlterNote       $09
0008AEE5 E701                       	dc.b	smpsNoAttack, $01
0008AEE7 E10F                       	smpsAlterNote       $0F
0008AEE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEED E10C                       	smpsAlterNote       $0C
0008AEEF E701                       	dc.b	smpsNoAttack, $01
0008AEF1 E106                       	smpsAlterNote       $06
0008AEF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AEF7 E10C                       	smpsAlterNote       $0C
0008AEF9 E701                       	dc.b	smpsNoAttack, $01
0008AEFB E10F                       	smpsAlterNote       $0F
0008AEFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF01 E109                       	smpsAlterNote       $09
0008AF03 E701                       	dc.b	smpsNoAttack, $01
0008AF05 E105                       	smpsAlterNote       $05
0008AF07 E701                       	dc.b	smpsNoAttack, $01
0008AF09 E106                       	smpsAlterNote       $06
0008AF0B E701                       	dc.b	smpsNoAttack, $01
0008AF0D E10C                       	smpsAlterNote       $0C
0008AF0F E701                       	dc.b	smpsNoAttack, $01
0008AF11 E110                       	smpsAlterNote       $10
0008AF13 E701                       	dc.b	smpsNoAttack, $01
0008AF15 E10C                       	smpsAlterNote       $0C
0008AF17 E701                       	dc.b	smpsNoAttack, $01
0008AF19 E109                       	smpsAlterNote       $09
0008AF1B E701                       	dc.b	smpsNoAttack, $01
0008AF1D E105                       	smpsAlterNote       $05
0008AF1F E701                       	dc.b	smpsNoAttack, $01
0008AF21 E109                       	smpsAlterNote       $09
0008AF23 E701                       	dc.b	smpsNoAttack, $01
0008AF25 E10F                       	smpsAlterNote       $0F
0008AF27 E701                       	dc.b	smpsNoAttack, $01
0008AF29 E110                       	smpsAlterNote       $10
0008AF2B E701                       	dc.b	smpsNoAttack, $01
0008AF2D E10C                       	smpsAlterNote       $0C
0008AF2F E701                       	dc.b	smpsNoAttack, $01
0008AF31 E106                       	smpsAlterNote       $06
0008AF33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF37 E109                       	smpsAlterNote       $09
0008AF39 E701                       	dc.b	smpsNoAttack, $01
0008AF3B E10F                       	smpsAlterNote       $0F
0008AF3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF41 E109                       	smpsAlterNote       $09
0008AF43 E701                       	dc.b	smpsNoAttack, $01
0008AF45 E106                       	smpsAlterNote       $06
0008AF47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF4B E10C                       	smpsAlterNote       $0C
0008AF4D E701                       	dc.b	smpsNoAttack, $01
0008AF4F E110                       	smpsAlterNote       $10
0008AF51 E701                       	dc.b	smpsNoAttack, $01
0008AF53 E10F                       	smpsAlterNote       $0F
0008AF55 E701                       	dc.b	smpsNoAttack, $01
0008AF57 E109                       	smpsAlterNote       $09
0008AF59 E701                       	dc.b	smpsNoAttack, $01
0008AF5B E105                       	smpsAlterNote       $05
0008AF5D E701                       	dc.b	smpsNoAttack, $01
0008AF5F E109                       	smpsAlterNote       $09
0008AF61 E701                       	dc.b	smpsNoAttack, $01
0008AF63 E10C                       	smpsAlterNote       $0C
0008AF65 E701                       	dc.b	smpsNoAttack, $01
0008AF67 E110                       	smpsAlterNote       $10
0008AF69 E701                       	dc.b	smpsNoAttack, $01
0008AF6B E10C                       	smpsAlterNote       $0C
0008AF6D E701                       	dc.b	smpsNoAttack, $01
0008AF6F E106                       	smpsAlterNote       $06
0008AF71 E701                       	dc.b	smpsNoAttack, $01
0008AF73 E105                       	smpsAlterNote       $05
0008AF75 E701                       	dc.b	smpsNoAttack, $01
0008AF77 E109                       	smpsAlterNote       $09
0008AF79 E701                       	dc.b	smpsNoAttack, $01
0008AF7B E10F                       	smpsAlterNote       $0F
0008AF7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF81 E109                       	smpsAlterNote       $09
0008AF83 E701                       	dc.b	smpsNoAttack, $01
0008AF85 E106                       	smpsAlterNote       $06
0008AF87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AF8B E10C                       	smpsAlterNote       $0C
0008AF8D E701                       	dc.b	smpsNoAttack, $01
0008AF8F E110                       	smpsAlterNote       $10
0008AF91 E701                       	dc.b	smpsNoAttack, $01
0008AF93 E10F                       	smpsAlterNote       $0F
0008AF95 E701                       	dc.b	smpsNoAttack, $01
0008AF97 E109                       	smpsAlterNote       $09
0008AF99 E701                       	dc.b	smpsNoAttack, $01
0008AF9B E105                       	smpsAlterNote       $05
0008AF9D E701                       	dc.b	smpsNoAttack, $01
0008AF9F E109                       	smpsAlterNote       $09
0008AFA1 E701                       	dc.b	smpsNoAttack, $01
0008AFA3 E10C                       	smpsAlterNote       $0C
0008AFA5 E701                       	dc.b	smpsNoAttack, $01
0008AFA7 E110                       	smpsAlterNote       $10
0008AFA9 E701                       	dc.b	smpsNoAttack, $01
0008AFAB E10C                       	smpsAlterNote       $0C
0008AFAD E701                       	dc.b	smpsNoAttack, $01
0008AFAF E106                       	smpsAlterNote       $06
0008AFB1 E701                       	dc.b	smpsNoAttack, $01
0008AFB3 E105                       	smpsAlterNote       $05
0008AFB5 E701                       	dc.b	smpsNoAttack, $01
0008AFB7 E109                       	smpsAlterNote       $09
0008AFB9 E701                       	dc.b	smpsNoAttack, $01
0008AFBB E10F                       	smpsAlterNote       $0F
0008AFBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFC1 E10C                       	smpsAlterNote       $0C
0008AFC3 E701                       	dc.b	smpsNoAttack, $01
0008AFC5 E106                       	smpsAlterNote       $06
0008AFC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AFCB E10C                       	smpsAlterNote       $0C
0008AFCD E701                       	dc.b	smpsNoAttack, $01
0008AFCF E10F                       	smpsAlterNote       $0F
0008AFD1 E701                       	dc.b	smpsNoAttack, $01
0008AFD3 E110                       	smpsAlterNote       $10
0008AFD5 8001                       	dc.b	nRst, $01
0008AFD7 E10F                       	smpsAlterNote       $0F
0008AFD9 C604                       	dc.b	nA5, $04
0008AFDB E10D                       	smpsAlterNote       $0D
0008AFDD C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008AFE3 E10B                       	smpsAlterNote       $0B
0008AFE5 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008AFEB E10F                       	smpsAlterNote       $0F
0008AFED C604 8001                  	dc.b	nA5, $04, nRst, $01
0008AFF1 E10D                       	smpsAlterNote       $0D
0008AFF3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008AFF9 E10C                       	smpsAlterNote       $0C
0008AFFB C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008B001 E10A                       	smpsAlterNote       $0A
0008B003 C904                       	dc.b	nC6, $04
0008B005 E110                       	smpsAlterNote       $10
0008B007 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B00B E10F                       	smpsAlterNote       $0F
0008B00D C604                       	dc.b	nA5, $04
0008B00F E10D                       	smpsAlterNote       $0D
0008B011 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008B01D E109                       	smpsAlterNote       $09
0008B01F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B023 E10F                       	smpsAlterNote       $0F
0008B025 E701                       	dc.b	smpsNoAttack, $01
0008B027 E112                       	smpsAlterNote       $12
0008B029 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B02D E10C                       	smpsAlterNote       $0C
0008B02F E701                       	dc.b	smpsNoAttack, $01
0008B031 E108                       	smpsAlterNote       $08
0008B033 E701                       	dc.b	smpsNoAttack, $01
0008B035 E109                       	smpsAlterNote       $09
0008B037 E701                       	dc.b	smpsNoAttack, $01
0008B039 E10F                       	smpsAlterNote       $0F
0008B03B E701                       	dc.b	smpsNoAttack, $01
0008B03D E113                       	smpsAlterNote       $13
0008B03F E701                       	dc.b	smpsNoAttack, $01
0008B041 E10D                       	smpsAlterNote       $0D
0008B043 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008B049 E10C                       	smpsAlterNote       $0C
0008B04B C10D                       	dc.b	nE5, $0D
0008B04D E109                       	smpsAlterNote       $09
0008B04F E701                       	dc.b	smpsNoAttack, $01
0008B051 E106                       	smpsAlterNote       $06
0008B053 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B057 E10C                       	smpsAlterNote       $0C
0008B059 E701                       	dc.b	smpsNoAttack, $01
0008B05B E110                       	smpsAlterNote       $10
0008B05D E701                       	dc.b	smpsNoAttack, $01
0008B05F E10F                       	smpsAlterNote       $0F
0008B061 E701                       	dc.b	smpsNoAttack, $01
0008B063 E109                       	smpsAlterNote       $09
0008B065 E701                       	dc.b	smpsNoAttack, $01
0008B067 E105                       	smpsAlterNote       $05
0008B069 E701                       	dc.b	smpsNoAttack, $01
0008B06B E109                       	smpsAlterNote       $09
0008B06D E701                       	dc.b	smpsNoAttack, $01
0008B06F E10C                       	smpsAlterNote       $0C
0008B071 E701                       	dc.b	smpsNoAttack, $01
0008B073 E110                       	smpsAlterNote       $10
0008B075 E701                       	dc.b	smpsNoAttack, $01
0008B077 E10C                       	smpsAlterNote       $0C
0008B079 E701                       	dc.b	smpsNoAttack, $01
0008B07B E106                       	smpsAlterNote       $06
0008B07D E701                       	dc.b	smpsNoAttack, $01
0008B07F E105                       	smpsAlterNote       $05
0008B081 E701                       	dc.b	smpsNoAttack, $01
0008B083 E109                       	smpsAlterNote       $09
0008B085 E701                       	dc.b	smpsNoAttack, $01
0008B087 E10F                       	smpsAlterNote       $0F
0008B089 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B08D E10C                       	smpsAlterNote       $0C
0008B08F E701                       	dc.b	smpsNoAttack, $01
0008B091 E106                       	smpsAlterNote       $06
0008B093 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B097 E10C                       	smpsAlterNote       $0C
0008B099 E701                       	dc.b	smpsNoAttack, $01
0008B09B E10F                       	smpsAlterNote       $0F
0008B09D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0A1 E109                       	smpsAlterNote       $09
0008B0A3 E701                       	dc.b	smpsNoAttack, $01
0008B0A5 E105                       	smpsAlterNote       $05
0008B0A7 E701                       	dc.b	smpsNoAttack, $01
0008B0A9 E106                       	smpsAlterNote       $06
0008B0AB E701                       	dc.b	smpsNoAttack, $01
0008B0AD E10C                       	smpsAlterNote       $0C
0008B0AF E701                       	dc.b	smpsNoAttack, $01
0008B0B1 E110                       	smpsAlterNote       $10
0008B0B3 E701                       	dc.b	smpsNoAttack, $01
0008B0B5 E10C                       	smpsAlterNote       $0C
0008B0B7 E701                       	dc.b	smpsNoAttack, $01
0008B0B9 E109                       	smpsAlterNote       $09
0008B0BB E701                       	dc.b	smpsNoAttack, $01
0008B0BD E105                       	smpsAlterNote       $05
0008B0BF E701                       	dc.b	smpsNoAttack, $01
0008B0C1 E109                       	smpsAlterNote       $09
0008B0C3 E701                       	dc.b	smpsNoAttack, $01
0008B0C5 E10F                       	smpsAlterNote       $0F
0008B0C7 E701                       	dc.b	smpsNoAttack, $01
0008B0C9 E110                       	smpsAlterNote       $10
0008B0CB E701                       	dc.b	smpsNoAttack, $01
0008B0CD E10C                       	smpsAlterNote       $0C
0008B0CF E701                       	dc.b	smpsNoAttack, $01
0008B0D1 E106                       	smpsAlterNote       $06
0008B0D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0D7 E109                       	smpsAlterNote       $09
0008B0D9 E701                       	dc.b	smpsNoAttack, $01
0008B0DB E10F                       	smpsAlterNote       $0F
0008B0DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0E1 E109                       	smpsAlterNote       $09
0008B0E3 E701                       	dc.b	smpsNoAttack, $01
0008B0E5 E106                       	smpsAlterNote       $06
0008B0E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B0EB E10C                       	smpsAlterNote       $0C
0008B0ED E701                       	dc.b	smpsNoAttack, $01
0008B0EF E110                       	smpsAlterNote       $10
0008B0F1 E701                       	dc.b	smpsNoAttack, $01
0008B0F3 E10F                       	smpsAlterNote       $0F
0008B0F5 E701                       	dc.b	smpsNoAttack, $01
0008B0F7 E109                       	smpsAlterNote       $09
0008B0F9 E701                       	dc.b	smpsNoAttack, $01
0008B0FB E105                       	smpsAlterNote       $05
0008B0FD E701                       	dc.b	smpsNoAttack, $01
0008B0FF E109                       	smpsAlterNote       $09
0008B101 E701                       	dc.b	smpsNoAttack, $01
0008B103 E10F                       	smpsAlterNote       $0F
0008B105 E701                       	dc.b	smpsNoAttack, $01
0008B107 E110                       	smpsAlterNote       $10
0008B109 E701                       	dc.b	smpsNoAttack, $01
0008B10B E10C                       	smpsAlterNote       $0C
0008B10D E701                       	dc.b	smpsNoAttack, $01
0008B10F E106                       	smpsAlterNote       $06
0008B111 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B115 E109                       	smpsAlterNote       $09
0008B117 E701                       	dc.b	smpsNoAttack, $01
0008B119 E10F                       	smpsAlterNote       $0F
0008B11B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B11F E109                       	smpsAlterNote       $09
0008B121 E701                       	dc.b	smpsNoAttack, $01
0008B123 E106                       	smpsAlterNote       $06
0008B125 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B129 E10C                       	smpsAlterNote       $0C
0008B12B E701                       	dc.b	smpsNoAttack, $01
0008B12D E110                       	smpsAlterNote       $10
0008B12F E701                       	dc.b	smpsNoAttack, $01
0008B131 E10F                       	smpsAlterNote       $0F
0008B133 E701                       	dc.b	smpsNoAttack, $01
0008B135 E109                       	smpsAlterNote       $09
0008B137 E701                       	dc.b	smpsNoAttack, $01
0008B139 E105                       	smpsAlterNote       $05
0008B13B E701                       	dc.b	smpsNoAttack, $01
0008B13D E109                       	smpsAlterNote       $09
0008B13F E701                       	dc.b	smpsNoAttack, $01
0008B141 E10C                       	smpsAlterNote       $0C
0008B143 E701                       	dc.b	smpsNoAttack, $01
0008B145 E110                       	smpsAlterNote       $10
0008B147 E701                       	dc.b	smpsNoAttack, $01
0008B149 E10C                       	smpsAlterNote       $0C
0008B14B E701                       	dc.b	smpsNoAttack, $01
0008B14D E106                       	smpsAlterNote       $06
0008B14F E701                       	dc.b	smpsNoAttack, $01
0008B151 E105                       	smpsAlterNote       $05
0008B153 E701                       	dc.b	smpsNoAttack, $01
0008B155 E109                       	smpsAlterNote       $09
0008B157 E701                       	dc.b	smpsNoAttack, $01
0008B159 E10F                       	smpsAlterNote       $0F
0008B15B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B15F E10C                       	smpsAlterNote       $0C
0008B161 E701                       	dc.b	smpsNoAttack, $01
0008B163 E106                       	smpsAlterNote       $06
0008B165 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B169 E10C                       	smpsAlterNote       $0C
0008B16B E701                       	dc.b	smpsNoAttack, $01
0008B16D E10F                       	smpsAlterNote       $0F
0008B16F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B173 E109                       	smpsAlterNote       $09
0008B175 E701                       	dc.b	smpsNoAttack, $01
0008B177 E105                       	smpsAlterNote       $05
0008B179 E701                       	dc.b	smpsNoAttack, $01
0008B17B E106                       	smpsAlterNote       $06
0008B17D E701                       	dc.b	smpsNoAttack, $01
0008B17F E10C                       	smpsAlterNote       $0C
0008B181 E701                       	dc.b	smpsNoAttack, $01
0008B183 E110                       	smpsAlterNote       $10
0008B185 E701                       	dc.b	smpsNoAttack, $01
0008B187 E10C                       	smpsAlterNote       $0C
0008B189 E701                       	dc.b	smpsNoAttack, $01
0008B18B E109                       	smpsAlterNote       $09
0008B18D E701                       	dc.b	smpsNoAttack, $01
0008B18F E105                       	smpsAlterNote       $05
0008B191 E701                       	dc.b	smpsNoAttack, $01
0008B193 E109                       	smpsAlterNote       $09
0008B195 E701                       	dc.b	smpsNoAttack, $01
0008B197 E10F                       	smpsAlterNote       $0F
0008B199 E701                       	dc.b	smpsNoAttack, $01
0008B19B E110                       	smpsAlterNote       $10
0008B19D E701                       	dc.b	smpsNoAttack, $01
0008B19F E10C                       	smpsAlterNote       $0C
0008B1A1 E701                       	dc.b	smpsNoAttack, $01
0008B1A3 E106                       	smpsAlterNote       $06
0008B1A5 E701                       	dc.b	smpsNoAttack, $01
0008B1A7 E10B                       	smpsAlterNote       $0B
0008B1A9 BF02                       	dc.b	nD5, $02
0008B1AB E10C                       	smpsAlterNote       $0C
0008B1AD C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008B1B3 E109                       	smpsAlterNote       $09
0008B1B5 E701                       	dc.b	smpsNoAttack, $01
0008B1B7 E105                       	smpsAlterNote       $05
0008B1B9 E701                       	dc.b	smpsNoAttack, $01
0008B1BB E109                       	smpsAlterNote       $09
0008B1BD E701                       	dc.b	smpsNoAttack, $01
0008B1BF E10F                       	smpsAlterNote       $0F
0008B1C1 E701                       	dc.b	smpsNoAttack, $01
0008B1C3 E110                       	smpsAlterNote       $10
0008B1C5 E701                       	dc.b	smpsNoAttack, $01
0008B1C7 E10C                       	smpsAlterNote       $0C
0008B1C9 E701                       	dc.b	smpsNoAttack, $01
0008B1CB E106                       	smpsAlterNote       $06
0008B1CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1D1 E109                       	smpsAlterNote       $09
0008B1D3 E701                       	dc.b	smpsNoAttack, $01
0008B1D5 E10F                       	smpsAlterNote       $0F
0008B1D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1DB E109                       	smpsAlterNote       $09
0008B1DD E701                       	dc.b	smpsNoAttack, $01
0008B1DF E106                       	smpsAlterNote       $06
0008B1E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B1E5 E10C                       	smpsAlterNote       $0C
0008B1E7 E701                       	dc.b	smpsNoAttack, $01
0008B1E9 E110                       	smpsAlterNote       $10
0008B1EB E701                       	dc.b	smpsNoAttack, $01
0008B1ED E10F                       	smpsAlterNote       $0F
0008B1EF E701                       	dc.b	smpsNoAttack, $01
0008B1F1 E109                       	smpsAlterNote       $09
0008B1F3 E701                       	dc.b	smpsNoAttack, $01
0008B1F5 E105                       	smpsAlterNote       $05
0008B1F7 E701                       	dc.b	smpsNoAttack, $01
0008B1F9 E109                       	smpsAlterNote       $09
0008B1FB E701                       	dc.b	smpsNoAttack, $01
0008B1FD E10C                       	smpsAlterNote       $0C
0008B1FF E701                       	dc.b	smpsNoAttack, $01
0008B201 E110                       	smpsAlterNote       $10
0008B203 E701                       	dc.b	smpsNoAttack, $01
0008B205 E10C                       	smpsAlterNote       $0C
0008B207 E701                       	dc.b	smpsNoAttack, $01
0008B209 E106                       	smpsAlterNote       $06
0008B20B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B20F E10D                       	smpsAlterNote       $0D
0008B211 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008B219 E10C                       	smpsAlterNote       $0C
0008B21B C10D                       	dc.b	nE5, $0D
0008B21D E106                       	smpsAlterNote       $06
0008B21F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B223 E109                       	smpsAlterNote       $09
0008B225 E701                       	dc.b	smpsNoAttack, $01
0008B227 E10F                       	smpsAlterNote       $0F
0008B229 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B22D E109                       	smpsAlterNote       $09
0008B22F E701                       	dc.b	smpsNoAttack, $01
0008B231 E106                       	smpsAlterNote       $06
0008B233 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B237 E10C                       	smpsAlterNote       $0C
0008B239 E701                       	dc.b	smpsNoAttack, $01
0008B23B E110                       	smpsAlterNote       $10
0008B23D E701                       	dc.b	smpsNoAttack, $01
0008B23F E10F                       	smpsAlterNote       $0F
0008B241 E701                       	dc.b	smpsNoAttack, $01
0008B243 E109                       	smpsAlterNote       $09
0008B245 E701                       	dc.b	smpsNoAttack, $01
0008B247 E105                       	smpsAlterNote       $05
0008B249 E701                       	dc.b	smpsNoAttack, $01
0008B24B E106                       	smpsAlterNote       $06
0008B24D 800F                       	dc.b	nRst, $0F
0008B251 E6FF                       	smpsAlterVol        $FF
0008B253 E10F                       	smpsAlterNote       $0F
0008B255 BA01                       	dc.b	nA4, $01
0008B257 E110                       	smpsAlterNote       $10
0008B259 BB02                       	dc.b	nBb4, $02
0008B25B E10F                       	smpsAlterNote       $0F
0008B25D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008B263 E10B                       	smpsAlterNote       $0B
0008B265 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008B269 E10C                       	smpsAlterNote       $0C
0008B26B C103                       	dc.b	nE5, $03
0008B26D E10D                       	smpsAlterNote       $0D
0008B26F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008B279 E10B                       	smpsAlterNote       $0B
0008B27B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008B27F E104                       	smpsAlterNote       $04
0008B281 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B285 E10A                       	smpsAlterNote       $0A
0008B287 E701                       	dc.b	smpsNoAttack, $01
0008B289 E10D                       	smpsAlterNote       $0D
0008B28B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B28F E107                       	smpsAlterNote       $07
0008B291 E701                       	dc.b	smpsNoAttack, $01
0008B293 E104                       	smpsAlterNote       $04
0008B295 8001                       	dc.b	nRst, $01
0008B297 E110                       	smpsAlterNote       $10
0008B299 C703                       	dc.b	nBb5, $03
0008B29B E10F                       	smpsAlterNote       $0F
0008B29D C603 8001                  	dc.b	nA5, $03, nRst, $01
0008B2A1 E10D                       	smpsAlterNote       $0D
0008B2A3 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008B2A7 E10C                       	smpsAlterNote       $0C
0008B2A9 E701                       	dc.b	smpsNoAttack, $01
0008B2AB E108                       	smpsAlterNote       $08
0008B2AD E701                       	dc.b	smpsNoAttack, $01
0008B2AF E109                       	smpsAlterNote       $09
0008B2B1 E701                       	dc.b	smpsNoAttack, $01
0008B2B3 E10F                       	smpsAlterNote       $0F
0008B2B5 E701                       	dc.b	smpsNoAttack, $01
0008B2B7 E113                       	smpsAlterNote       $13
0008B2B9 E701                       	dc.b	smpsNoAttack, $01
0008B2BB E10F                       	smpsAlterNote       $0F
0008B2BD E701                       	dc.b	smpsNoAttack, $01
0008B2BF E10C                       	smpsAlterNote       $0C
0008B2C1 E701                       	dc.b	smpsNoAttack, $01
0008B2C3 E108                       	smpsAlterNote       $08
0008B2C5 E701                       	dc.b	smpsNoAttack, $01
0008B2C7 E10C                       	smpsAlterNote       $0C
0008B2C9 E701                       	dc.b	smpsNoAttack, $01
0008B2CB E112                       	smpsAlterNote       $12
0008B2CD E701                       	dc.b	smpsNoAttack, $01
0008B2CF E113                       	smpsAlterNote       $13
0008B2D1 E701                       	dc.b	smpsNoAttack, $01
0008B2D3 E10F                       	smpsAlterNote       $0F
0008B2D5 E701                       	dc.b	smpsNoAttack, $01
0008B2D7 E109                       	smpsAlterNote       $09
0008B2D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2DD E10C                       	smpsAlterNote       $0C
0008B2DF E701                       	dc.b	smpsNoAttack, $01
0008B2E1 E112                       	smpsAlterNote       $12
0008B2E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2E7 E10C                       	smpsAlterNote       $0C
0008B2E9 E701                       	dc.b	smpsNoAttack, $01
0008B2EB E109                       	smpsAlterNote       $09
0008B2ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B2F1 E10F                       	smpsAlterNote       $0F
0008B2F3 E701                       	dc.b	smpsNoAttack, $01
0008B2F5 E113                       	smpsAlterNote       $13
0008B2F7 E701                       	dc.b	smpsNoAttack, $01
0008B2F9 E112                       	smpsAlterNote       $12
0008B2FB E701                       	dc.b	smpsNoAttack, $01
0008B2FD E10C                       	smpsAlterNote       $0C
0008B2FF E701                       	dc.b	smpsNoAttack, $01
0008B301 E108                       	smpsAlterNote       $08
0008B303 E701                       	dc.b	smpsNoAttack, $01
0008B305 E10C                       	smpsAlterNote       $0C
0008B307 E701                       	dc.b	smpsNoAttack, $01
0008B309 E10F                       	smpsAlterNote       $0F
0008B30B E701                       	dc.b	smpsNoAttack, $01
0008B30D E113                       	smpsAlterNote       $13
0008B30F E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008B313 E10B                       	smpsAlterNote       $0B
0008B315 BF03                       	dc.b	nD5, $03
0008B317 E10C                       	smpsAlterNote       $0C
0008B319 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008B31D E10D                       	smpsAlterNote       $0D
0008B31F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008B329 E10B                       	smpsAlterNote       $0B
0008B32B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008B337 E110                       	smpsAlterNote       $10
0008B339 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008B33D E10F                       	smpsAlterNote       $0F
0008B33F C604                       	dc.b	nA5, $04
0008B341 E10D                       	smpsAlterNote       $0D
0008B343 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008B349 E109                       	smpsAlterNote       $09
0008B34B E701                       	dc.b	smpsNoAttack, $01
0008B34D E108                       	smpsAlterNote       $08
0008B34F E701                       	dc.b	smpsNoAttack, $01
0008B351 E10C                       	smpsAlterNote       $0C
0008B353 E701                       	dc.b	smpsNoAttack, $01
0008B355 E112                       	smpsAlterNote       $12
0008B357 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B35B E10F                       	smpsAlterNote       $0F
0008B35D E701                       	dc.b	smpsNoAttack, $01
0008B35F E109                       	smpsAlterNote       $09
0008B361 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B365 E10F                       	smpsAlterNote       $0F
0008B367 E701                       	dc.b	smpsNoAttack, $01
0008B369 E112                       	smpsAlterNote       $12
0008B36B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B36F E10C                       	smpsAlterNote       $0C
0008B371 E701                       	dc.b	smpsNoAttack, $01
0008B373 E108                       	smpsAlterNote       $08
0008B375 E701                       	dc.b	smpsNoAttack, $01
0008B377 E109                       	smpsAlterNote       $09
0008B379 E701                       	dc.b	smpsNoAttack, $01
0008B37B E10F                       	smpsAlterNote       $0F
0008B37D E701                       	dc.b	smpsNoAttack, $01
0008B37F E113                       	smpsAlterNote       $13
0008B381 E701                       	dc.b	smpsNoAttack, $01
0008B383 E10F                       	smpsAlterNote       $0F
0008B385 E701                       	dc.b	smpsNoAttack, $01
0008B387 E10C                       	smpsAlterNote       $0C
0008B389 E701                       	dc.b	smpsNoAttack, $01
0008B38B E108                       	smpsAlterNote       $08
0008B38D E701                       	dc.b	smpsNoAttack, $01
0008B38F E10C                       	smpsAlterNote       $0C
0008B391 E701                       	dc.b	smpsNoAttack, $01
0008B393 E112                       	smpsAlterNote       $12
0008B395 E701                       	dc.b	smpsNoAttack, $01
0008B397 E113                       	smpsAlterNote       $13
0008B399 E701                       	dc.b	smpsNoAttack, $01
0008B39B E10F                       	smpsAlterNote       $0F
0008B39D E701                       	dc.b	smpsNoAttack, $01
0008B39F E109                       	smpsAlterNote       $09
0008B3A1 E701                       	dc.b	smpsNoAttack, $01
0008B3A3 E10D                       	smpsAlterNote       $0D
0008B3A5 C402                       	dc.b	nG5, $02
0008B3A7 E10F                       	smpsAlterNote       $0F
0008B3A9 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008B3B3 E10D                       	smpsAlterNote       $0D
0008B3B5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008B3BB E10B                       	smpsAlterNote       $0B
0008B3BD BF0D                       	dc.b	nD5, $0D
0008B3BF E108                       	smpsAlterNote       $08
0008B3C1 E701                       	dc.b	smpsNoAttack, $01
0008B3C3 E104                       	smpsAlterNote       $04
0008B3C5 E701                       	dc.b	smpsNoAttack, $01
0008B3C7 E105                       	smpsAlterNote       $05
0008B3C9 E701                       	dc.b	smpsNoAttack, $01
0008B3CB E10B                       	smpsAlterNote       $0B
0008B3CD E701                       	dc.b	smpsNoAttack, $01
0008B3CF E10F                       	smpsAlterNote       $0F
0008B3D1 E701                       	dc.b	smpsNoAttack, $01
0008B3D3 E10B                       	smpsAlterNote       $0B
0008B3D5 E701                       	dc.b	smpsNoAttack, $01
0008B3D7 E108                       	smpsAlterNote       $08
0008B3D9 E701                       	dc.b	smpsNoAttack, $01
0008B3DB E104                       	smpsAlterNote       $04
0008B3DD E701                       	dc.b	smpsNoAttack, $01
0008B3DF E108                       	smpsAlterNote       $08
0008B3E1 E701                       	dc.b	smpsNoAttack, $01
0008B3E3 E10E                       	smpsAlterNote       $0E
0008B3E5 E701                       	dc.b	smpsNoAttack, $01
0008B3E7 E10F                       	smpsAlterNote       $0F
0008B3E9 E701                       	dc.b	smpsNoAttack, $01
0008B3EB E10C                       	smpsAlterNote       $0C
0008B3ED C101                       	dc.b	nE5, $01
0008B3EF E10D                       	smpsAlterNote       $0D
0008B3F1 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008B3F9 E10F                       	smpsAlterNote       $0F
0008B3FB C607                       	dc.b	nA5, $07
0008B3FD E10C                       	smpsAlterNote       $0C
0008B3FF CD07                       	dc.b	nE6, $07
0008B401 E10D                       	smpsAlterNote       $0D
0008B403 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008B407 E10C                       	smpsAlterNote       $0C
0008B409 CD03                       	dc.b	nE6, $03
0008B40B E10A                       	smpsAlterNote       $0A
0008B40D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008B411 E10D                       	smpsAlterNote       $0D
0008B413 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008B419 E10A                       	smpsAlterNote       $0A
0008B41B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B41F E110                       	smpsAlterNote       $10
0008B421 E701                       	dc.b	smpsNoAttack, $01
0008B423 E114                       	smpsAlterNote       $14
0008B425 E701                       	dc.b	smpsNoAttack, $01
0008B427 E113                       	smpsAlterNote       $13
0008B429 E701                       	dc.b	smpsNoAttack, $01
0008B42B E10D                       	smpsAlterNote       $0D
0008B42D E701                       	dc.b	smpsNoAttack, $01
0008B42F E109                       	smpsAlterNote       $09
0008B431 E701                       	dc.b	smpsNoAttack, $01
0008B433 E10D                       	smpsAlterNote       $0D
0008B435 E701                       	dc.b	smpsNoAttack, $01
0008B437 E110                       	smpsAlterNote       $10
0008B439 E701                       	dc.b	smpsNoAttack, $01
0008B43B E114                       	smpsAlterNote       $14
0008B43D E701                       	dc.b	smpsNoAttack, $01
0008B43F E10F                       	smpsAlterNote       $0F
0008B441 C607                       	dc.b	nA5, $07
0008B443 E10D                       	smpsAlterNote       $0D
0008B445 C40D                       	dc.b	nG5, $0D
0008B447 E10A                       	smpsAlterNote       $0A
0008B449 E701                       	dc.b	smpsNoAttack, $01
0008B44B E106                       	smpsAlterNote       $06
0008B44D E701                       	dc.b	smpsNoAttack, $01
0008B44F E10A                       	smpsAlterNote       $0A
0008B451 E701                       	dc.b	smpsNoAttack, $01
0008B453 E10D                       	smpsAlterNote       $0D
0008B455 E701                       	dc.b	smpsNoAttack, $01
0008B457 E111                       	smpsAlterNote       $11
0008B459 E701                       	dc.b	smpsNoAttack, $01
0008B45B E10D                       	smpsAlterNote       $0D
0008B45D E701                       	dc.b	smpsNoAttack, $01
0008B45F E107                       	smpsAlterNote       $07
0008B461 E701                       	dc.b	smpsNoAttack, $01
0008B463 E106                       	smpsAlterNote       $06
0008B465 E701                       	dc.b	smpsNoAttack, $01
0008B467 E10A                       	smpsAlterNote       $0A
0008B469 E701                       	dc.b	smpsNoAttack, $01
0008B46B E110                       	smpsAlterNote       $10
0008B46D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B471 E10D                       	smpsAlterNote       $0D
0008B473 E701                       	dc.b	smpsNoAttack, $01
0008B475 E107                       	smpsAlterNote       $07
0008B477 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B47B E10F                       	smpsAlterNote       $0F
0008B47D C60E                       	dc.b	nA5, $0E
0008B47F E109                       	smpsAlterNote       $09
0008B481 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B485 E10F                       	smpsAlterNote       $0F
0008B487 E701                       	dc.b	smpsNoAttack, $01
0008B489 E112                       	smpsAlterNote       $12
0008B48B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B48F E10C                       	smpsAlterNote       $0C
0008B491 E701                       	dc.b	smpsNoAttack, $01
0008B493 E108                       	smpsAlterNote       $08
0008B495 E701                       	dc.b	smpsNoAttack, $01
0008B497 E109                       	smpsAlterNote       $09
0008B499 E701                       	dc.b	smpsNoAttack, $01
0008B49B E10F                       	smpsAlterNote       $0F
0008B49D E701                       	dc.b	smpsNoAttack, $01
0008B49F E113                       	smpsAlterNote       $13
0008B4A1 E701                       	dc.b	smpsNoAttack, $01
0008B4A3 E10F                       	smpsAlterNote       $0F
0008B4A5 E701                       	dc.b	smpsNoAttack, $01
0008B4A7 E10C                       	smpsAlterNote       $0C
0008B4A9 E701                       	dc.b	smpsNoAttack, $01
0008B4AB E108                       	smpsAlterNote       $08
0008B4AD E701                       	dc.b	smpsNoAttack, $01
0008B4AF E109                       	smpsAlterNote       $09
0008B4B1 8001                       	dc.b	nRst, $01
0008B4B3 E110                       	smpsAlterNote       $10
0008B4B5 C70D                       	dc.b	nBb5, $0D
0008B4B7 E10D                       	smpsAlterNote       $0D
0008B4B9 E701                       	dc.b	smpsNoAttack, $01
0008B4BB E109                       	smpsAlterNote       $09
0008B4BD E701                       	dc.b	smpsNoAttack, $01
0008B4BF E10D                       	smpsAlterNote       $0D
0008B4C1 E701                       	dc.b	smpsNoAttack, $01
0008B4C3 E113                       	smpsAlterNote       $13
0008B4C5 E701                       	dc.b	smpsNoAttack, $01
0008B4C7 E114                       	smpsAlterNote       $14
0008B4C9 E701                       	dc.b	smpsNoAttack, $01
0008B4CB E110                       	smpsAlterNote       $10
0008B4CD E701                       	dc.b	smpsNoAttack, $01
0008B4CF E10A                       	smpsAlterNote       $0A
0008B4D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4D5 E10D                       	smpsAlterNote       $0D
0008B4D7 E701                       	dc.b	smpsNoAttack, $01
0008B4D9 E113                       	smpsAlterNote       $13
0008B4DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B4DF E10D                       	smpsAlterNote       $0D
0008B4E1 E701                       	dc.b	smpsNoAttack, $01
0008B4E3 E10A                       	smpsAlterNote       $0A
0008B4E5 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008B4EF E10B                       	smpsAlterNote       $0B
0008B4F1 8001                       	dc.b	nRst, $01
0008B4F3 E10C                       	smpsAlterNote       $0C
0008B4F5 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008B4F9 E10B                       	smpsAlterNote       $0B
0008B4FB CB0D                       	dc.b	nD6, $0D
0008B4FD E105                       	smpsAlterNote       $05
0008B4FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B503 E108                       	smpsAlterNote       $08
0008B505 E701                       	dc.b	smpsNoAttack, $01
0008B507 E10E                       	smpsAlterNote       $0E
0008B509 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B50D E108                       	smpsAlterNote       $08
0008B50F E701                       	dc.b	smpsNoAttack, $01
0008B511 E105                       	smpsAlterNote       $05
0008B513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B517 E10B                       	smpsAlterNote       $0B
0008B519 E701                       	dc.b	smpsNoAttack, $01
0008B51B E10F                       	smpsAlterNote       $0F
0008B51D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B521 E10C                       	smpsAlterNote       $0C
0008B523 CC0D                       	dc.b	nEb6, $0D
0008B525 E106                       	smpsAlterNote       $06
0008B527 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B52B E109                       	smpsAlterNote       $09
0008B52D E701                       	dc.b	smpsNoAttack, $01
0008B52F E10C                       	smpsAlterNote       $0C
0008B531 8001                       	dc.b	nRst, $01
0008B533 E10A                       	smpsAlterNote       $0A
0008B535 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008B541 CB0E                       	dc.b	nD6, $0E
0008B543 E105                       	smpsAlterNote       $05
0008B545 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B549 E10B                       	smpsAlterNote       $0B
0008B54B E701                       	dc.b	smpsNoAttack, $01
0008B54D E10E                       	smpsAlterNote       $0E
0008B54F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B553 E108                       	smpsAlterNote       $08
0008B555 E701                       	dc.b	smpsNoAttack, $01
0008B557 E104                       	smpsAlterNote       $04
0008B559 E701                       	dc.b	smpsNoAttack, $01
0008B55B E105                       	smpsAlterNote       $05
0008B55D E701                       	dc.b	smpsNoAttack, $01
0008B55F E10B                       	smpsAlterNote       $0B
0008B561 E701                       	dc.b	smpsNoAttack, $01
0008B563 E10F                       	smpsAlterNote       $0F
0008B565 E701                       	dc.b	smpsNoAttack, $01
0008B567 E10D                       	smpsAlterNote       $0D
0008B569 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008B56D E10C                       	smpsAlterNote       $0C
0008B56F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008B573 E10A                       	smpsAlterNote       $0A
0008B575 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008B581 CB0D                       	dc.b	nD6, $0D
0008B583 E108                       	smpsAlterNote       $08
0008B585 E701                       	dc.b	smpsNoAttack, $01
0008B587 E104                       	smpsAlterNote       $04
0008B589 E701                       	dc.b	smpsNoAttack, $01
0008B58B E105                       	smpsAlterNote       $05
0008B58D E701                       	dc.b	smpsNoAttack, $01
0008B58F E10B                       	smpsAlterNote       $0B
0008B591 E701                       	dc.b	smpsNoAttack, $01
0008B593 E10F                       	smpsAlterNote       $0F
0008B595 E701                       	dc.b	smpsNoAttack, $01
0008B597 E10B                       	smpsAlterNote       $0B
0008B599 E701                       	dc.b	smpsNoAttack, $01
0008B59B E108                       	smpsAlterNote       $08
0008B59D E701                       	dc.b	smpsNoAttack, $01
0008B59F E104                       	smpsAlterNote       $04
0008B5A1 E701                       	dc.b	smpsNoAttack, $01
0008B5A3 E108                       	smpsAlterNote       $08
0008B5A5 E701                       	dc.b	smpsNoAttack, $01
0008B5A7 E10E                       	smpsAlterNote       $0E
0008B5A9 E701                       	dc.b	smpsNoAttack, $01
0008B5AB E10F                       	smpsAlterNote       $0F
0008B5AD E701                       	dc.b	smpsNoAttack, $01
0008B5AF E10C                       	smpsAlterNote       $0C
0008B5B1 CC0D                       	dc.b	nEb6, $0D
0008B5B3 E109                       	smpsAlterNote       $09
0008B5B5 E701                       	dc.b	smpsNoAttack, $01
0008B5B7 E105                       	smpsAlterNote       $05
0008B5B9 E701                       	dc.b	smpsNoAttack, $01
0008B5BB E106                       	smpsAlterNote       $06
0008B5BD E701                       	dc.b	smpsNoAttack, $01
0008B5BF E10C                       	smpsAlterNote       $0C
0008B5C1 E701                       	dc.b	smpsNoAttack, $01
0008B5C3 E10A                       	smpsAlterNote       $0A
0008B5C5 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008B5D1 CB0D                       	dc.b	nD6, $0D
0008B5D3 E108                       	smpsAlterNote       $08
0008B5D5 E701                       	dc.b	smpsNoAttack, $01
0008B5D7 E104                       	smpsAlterNote       $04
0008B5D9 E701                       	dc.b	smpsNoAttack, $01
0008B5DB E108                       	smpsAlterNote       $08
0008B5DD E701                       	dc.b	smpsNoAttack, $01
0008B5DF E10B                       	smpsAlterNote       $0B
0008B5E1 E701                       	dc.b	smpsNoAttack, $01
0008B5E3 E10F                       	smpsAlterNote       $0F
0008B5E5 E701                       	dc.b	smpsNoAttack, $01
0008B5E7 E10B                       	smpsAlterNote       $0B
0008B5E9 E701                       	dc.b	smpsNoAttack, $01
0008B5EB E105                       	smpsAlterNote       $05
0008B5ED E701                       	dc.b	smpsNoAttack, $01
0008B5EF E104                       	smpsAlterNote       $04
0008B5F1 E701                       	dc.b	smpsNoAttack, $01
0008B5F3 E108                       	smpsAlterNote       $08
0008B5F5 E701                       	dc.b	smpsNoAttack, $01
0008B5F7 E10E                       	smpsAlterNote       $0E
0008B5F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B5FD E10B                       	smpsAlterNote       $0B
0008B5FF E701                       	dc.b	smpsNoAttack, $01
0008B601 E105                       	smpsAlterNote       $05
0008B603 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008B60B 03                         	dc.b	$03
0008B60C E601                       	smpsAlterVol        $01
0008B60E F6F1 D1                    	smpsJump            music84_Jump01
0008B611                            
0008B611                            ; FM5 Data
0008B611                            music84_FM5:
0008B613 E080                       	smpsPan             panLeft, $00
0008B615 8003                       	dc.b	nRst, $03
0008B617 E10D                       	smpsAlterNote       $0D
0008B619 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008B61D E10C                       	smpsAlterNote       $0C
0008B61F C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008B623 E10F                       	smpsAlterNote       $0F
0008B625 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008B62B E6FE                       	smpsAlterVol        $FE
0008B62D C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008B633 E10D                       	smpsAlterNote       $0D
0008B635 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008B63B E10C                       	smpsAlterNote       $0C
0008B63D C102 8001                  	dc.b	nE5, $02, nRst, $01
0008B641 E10A                       	smpsAlterNote       $0A
0008B643 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008B649 03                         	dc.b	$03
0008B64A                            
0008B64A                            music84_Jump00:
0008B64A 8004                       	dc.b	nRst, $04
0008B64C E602                       	smpsAlterVol        $02
0008B64E E10D                       	smpsAlterNote       $0D
0008B650 B60D                       	dc.b	nF4, $0D
0008B652 E107                       	smpsAlterNote       $07
0008B654 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B658 E10A                       	smpsAlterNote       $0A
0008B65A E701                       	dc.b	smpsNoAttack, $01
0008B65C E110                       	smpsAlterNote       $10
0008B65E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B662 E10A                       	smpsAlterNote       $0A
0008B664 E701                       	dc.b	smpsNoAttack, $01
0008B666 E107                       	smpsAlterNote       $07
0008B668 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B66C E10D                       	smpsAlterNote       $0D
0008B66E E701                       	dc.b	smpsNoAttack, $01
0008B670 E111                       	smpsAlterNote       $11
0008B672 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B676 E10D                       	smpsAlterNote       $0D
0008B678 B80D                       	dc.b	nG4, $0D
0008B67A E107                       	smpsAlterNote       $07
0008B67C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B680 E10A                       	smpsAlterNote       $0A
0008B682 E701                       	dc.b	smpsNoAttack, $01
0008B684 E110                       	smpsAlterNote       $10
0008B686 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B68A E10A                       	smpsAlterNote       $0A
0008B68C E701                       	dc.b	smpsNoAttack, $01
0008B68E E107                       	smpsAlterNote       $07
0008B690 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B694 E10D                       	smpsAlterNote       $0D
0008B696 E701                       	dc.b	smpsNoAttack, $01
0008B698 E111                       	smpsAlterNote       $11
0008B69A E701                       	dc.b	smpsNoAttack, $01
0008B69C E110                       	smpsAlterNote       $10
0008B69E E701                       	dc.b	smpsNoAttack, $01
0008B6A0 E10A                       	smpsAlterNote       $0A
0008B6A2 E701                       	dc.b	smpsNoAttack, $01
0008B6A4 E106                       	smpsAlterNote       $06
0008B6A6 E701                       	dc.b	smpsNoAttack, $01
0008B6A8 E10A                       	smpsAlterNote       $0A
0008B6AA E701                       	dc.b	smpsNoAttack, $01
0008B6AC E10D                       	smpsAlterNote       $0D
0008B6AE E701                       	dc.b	smpsNoAttack, $01
0008B6B0 E111                       	smpsAlterNote       $11
0008B6B2 E701                       	dc.b	smpsNoAttack, $01
0008B6B4 E10D                       	smpsAlterNote       $0D
0008B6B6 E701                       	dc.b	smpsNoAttack, $01
0008B6B8 E10F                       	smpsAlterNote       $0F
0008B6BA BA0E                       	dc.b	nA4, $0E
0008B6BC E109                       	smpsAlterNote       $09
0008B6BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6C2 E10F                       	smpsAlterNote       $0F
0008B6C4 E701                       	dc.b	smpsNoAttack, $01
0008B6C6 E112                       	smpsAlterNote       $12
0008B6C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6CC E10C                       	smpsAlterNote       $0C
0008B6CE E701                       	dc.b	smpsNoAttack, $01
0008B6D0 E108                       	smpsAlterNote       $08
0008B6D2 E701                       	dc.b	smpsNoAttack, $01
0008B6D4 E109                       	smpsAlterNote       $09
0008B6D6 E701                       	dc.b	smpsNoAttack, $01
0008B6D8 E10F                       	smpsAlterNote       $0F
0008B6DA E701                       	dc.b	smpsNoAttack, $01
0008B6DC E113                       	smpsAlterNote       $13
0008B6DE E701                       	dc.b	smpsNoAttack, $01
0008B6E0 E10F                       	smpsAlterNote       $0F
0008B6E2 E701                       	dc.b	smpsNoAttack, $01
0008B6E4 E109                       	smpsAlterNote       $09
0008B6E6 E701                       	dc.b	smpsNoAttack, $01
0008B6E8 E108                       	smpsAlterNote       $08
0008B6EA E701                       	dc.b	smpsNoAttack, $01
0008B6EC E10C                       	smpsAlterNote       $0C
0008B6EE E701                       	dc.b	smpsNoAttack, $01
0008B6F0 E112                       	smpsAlterNote       $12
0008B6F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B6F6 E10F                       	smpsAlterNote       $0F
0008B6F8 E701                       	dc.b	smpsNoAttack, $01
0008B6FA E109                       	smpsAlterNote       $09
0008B6FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B700 E10F                       	smpsAlterNote       $0F
0008B702 E701                       	dc.b	smpsNoAttack, $01
0008B704 E112                       	smpsAlterNote       $12
0008B706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B70A E10C                       	smpsAlterNote       $0C
0008B70C E701                       	dc.b	smpsNoAttack, $01
0008B70E E108                       	smpsAlterNote       $08
0008B710 E701                       	dc.b	smpsNoAttack, $01
0008B712 E109                       	smpsAlterNote       $09
0008B714 E701                       	dc.b	smpsNoAttack, $01
0008B716 E10F                       	smpsAlterNote       $0F
0008B718 E701                       	dc.b	smpsNoAttack, $01
0008B71A E113                       	smpsAlterNote       $13
0008B71C E701                       	dc.b	smpsNoAttack, $01
0008B71E E10F                       	smpsAlterNote       $0F
0008B720 E701                       	dc.b	smpsNoAttack, $01
0008B722 E10C                       	smpsAlterNote       $0C
0008B724 E701                       	dc.b	smpsNoAttack, $01
0008B726 E108                       	smpsAlterNote       $08
0008B728 E701                       	dc.b	smpsNoAttack, $01
0008B72A E109                       	smpsAlterNote       $09
0008B72C 8001                       	dc.b	nRst, $01
0008B72E E10C                       	smpsAlterNote       $0C
0008B730 B50A                       	dc.b	nE4, $0A
0008B732 E10D                       	smpsAlterNote       $0D
0008B734 B60D                       	dc.b	nF4, $0D
0008B736 E10A                       	smpsAlterNote       $0A
0008B738 E701                       	dc.b	smpsNoAttack, $01
0008B73A E106                       	smpsAlterNote       $06
0008B73C E701                       	dc.b	smpsNoAttack, $01
0008B73E E107                       	smpsAlterNote       $07
0008B740 E701                       	dc.b	smpsNoAttack, $01
0008B742 E10D                       	smpsAlterNote       $0D
0008B744 E701                       	dc.b	smpsNoAttack, $01
0008B746 E111                       	smpsAlterNote       $11
0008B748 E701                       	dc.b	smpsNoAttack, $01
0008B74A E10D                       	smpsAlterNote       $0D
0008B74C E701                       	dc.b	smpsNoAttack, $01
0008B74E E10A                       	smpsAlterNote       $0A
0008B750 E701                       	dc.b	smpsNoAttack, $01
0008B752 E106                       	smpsAlterNote       $06
0008B754 E701                       	dc.b	smpsNoAttack, $01
0008B756 E10A                       	smpsAlterNote       $0A
0008B758 E701                       	dc.b	smpsNoAttack, $01
0008B75A E110                       	smpsAlterNote       $10
0008B75C E701                       	dc.b	smpsNoAttack, $01
0008B75E E111                       	smpsAlterNote       $11
0008B760 E701                       	dc.b	smpsNoAttack, $01
0008B762 E10D                       	smpsAlterNote       $0D
0008B764 B80D                       	dc.b	nG4, $0D
0008B766 E10A                       	smpsAlterNote       $0A
0008B768 E701                       	dc.b	smpsNoAttack, $01
0008B76A E106                       	smpsAlterNote       $06
0008B76C E701                       	dc.b	smpsNoAttack, $01
0008B76E E107                       	smpsAlterNote       $07
0008B770 E701                       	dc.b	smpsNoAttack, $01
0008B772 E10D                       	smpsAlterNote       $0D
0008B774 E701                       	dc.b	smpsNoAttack, $01
0008B776 E111                       	smpsAlterNote       $11
0008B778 E701                       	dc.b	smpsNoAttack, $01
0008B77A E10D                       	smpsAlterNote       $0D
0008B77C E701                       	dc.b	smpsNoAttack, $01
0008B77E E10A                       	smpsAlterNote       $0A
0008B780 E701                       	dc.b	smpsNoAttack, $01
0008B782 E106                       	smpsAlterNote       $06
0008B784 E701                       	dc.b	smpsNoAttack, $01
0008B786 E10A                       	smpsAlterNote       $0A
0008B788 E701                       	dc.b	smpsNoAttack, $01
0008B78A E110                       	smpsAlterNote       $10
0008B78C E701                       	dc.b	smpsNoAttack, $01
0008B78E E111                       	smpsAlterNote       $11
0008B790 E701                       	dc.b	smpsNoAttack, $01
0008B792 E10D                       	smpsAlterNote       $0D
0008B794 E701                       	dc.b	smpsNoAttack, $01
0008B796 E107                       	smpsAlterNote       $07
0008B798 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B79C E10A                       	smpsAlterNote       $0A
0008B79E E701                       	dc.b	smpsNoAttack, $01
0008B7A0 E110                       	smpsAlterNote       $10
0008B7A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7A6 E10D                       	smpsAlterNote       $0D
0008B7A8 8001                       	dc.b	nRst, $01
0008B7AA E10F                       	smpsAlterNote       $0F
0008B7AC BA0D                       	dc.b	nA4, $0D
0008B7AE E10C                       	smpsAlterNote       $0C
0008B7B0 E701                       	dc.b	smpsNoAttack, $01
0008B7B2 E108                       	smpsAlterNote       $08
0008B7B4 E701                       	dc.b	smpsNoAttack, $01
0008B7B6 E10C                       	smpsAlterNote       $0C
0008B7B8 E701                       	dc.b	smpsNoAttack, $01
0008B7BA E112                       	smpsAlterNote       $12
0008B7BC E701                       	dc.b	smpsNoAttack, $01
0008B7BE E113                       	smpsAlterNote       $13
0008B7C0 E701                       	dc.b	smpsNoAttack, $01
0008B7C2 E10F                       	smpsAlterNote       $0F
0008B7C4 E701                       	dc.b	smpsNoAttack, $01
0008B7C6 E109                       	smpsAlterNote       $09
0008B7C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7CC E10C                       	smpsAlterNote       $0C
0008B7CE E701                       	dc.b	smpsNoAttack, $01
0008B7D0 E112                       	smpsAlterNote       $12
0008B7D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7D6 E10C                       	smpsAlterNote       $0C
0008B7D8 E701                       	dc.b	smpsNoAttack, $01
0008B7DA E109                       	smpsAlterNote       $09
0008B7DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B7E0 E10F                       	smpsAlterNote       $0F
0008B7E2 E701                       	dc.b	smpsNoAttack, $01
0008B7E4 E113                       	smpsAlterNote       $13
0008B7E6 E701                       	dc.b	smpsNoAttack, $01
0008B7E8 E112                       	smpsAlterNote       $12
0008B7EA E701                       	dc.b	smpsNoAttack, $01
0008B7EC E10C                       	smpsAlterNote       $0C
0008B7EE E701                       	dc.b	smpsNoAttack, $01
0008B7F0 E108                       	smpsAlterNote       $08
0008B7F2 E701                       	dc.b	smpsNoAttack, $01
0008B7F4 E10C                       	smpsAlterNote       $0C
0008B7F6 E701                       	dc.b	smpsNoAttack, $01
0008B7F8 E10F                       	smpsAlterNote       $0F
0008B7FA E701                       	dc.b	smpsNoAttack, $01
0008B7FC E113                       	smpsAlterNote       $13
0008B7FE E701                       	dc.b	smpsNoAttack, $01
0008B800 E10F                       	smpsAlterNote       $0F
0008B802 E701                       	dc.b	smpsNoAttack, $01
0008B804 E109                       	smpsAlterNote       $09
0008B806 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008B80A E10D                       	smpsAlterNote       $0D
0008B80C B609 8001                  	dc.b	nF4, $09, nRst, $01
0008B810 E10C                       	smpsAlterNote       $0C
0008B812 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008B816 E10B                       	smpsAlterNote       $0B
0008B818 B30D                       	dc.b	nD4, $0D
0008B81A E10C                       	smpsAlterNote       $0C
0008B81C B503 8001                  	dc.b	nE4, $03, nRst, $01
0008B820 E10D                       	smpsAlterNote       $0D
0008B822 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008B82A E109                       	smpsAlterNote       $09
0008B82C E701                       	dc.b	smpsNoAttack, $01
0008B82E E108                       	smpsAlterNote       $08
0008B830 E701                       	dc.b	smpsNoAttack, $01
0008B832 E10C                       	smpsAlterNote       $0C
0008B834 E701                       	dc.b	smpsNoAttack, $01
0008B836 E112                       	smpsAlterNote       $12
0008B838 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B83C E10F                       	smpsAlterNote       $0F
0008B83E E701                       	dc.b	smpsNoAttack, $01
0008B840 E109                       	smpsAlterNote       $09
0008B842 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B846 E10F                       	smpsAlterNote       $0F
0008B848 E701                       	dc.b	smpsNoAttack, $01
0008B84A E112                       	smpsAlterNote       $12
0008B84C E701                       	dc.b	smpsNoAttack, $01
0008B84E E113                       	smpsAlterNote       $13
0008B850 8001                       	dc.b	nRst, $01
0008B852 E10D                       	smpsAlterNote       $0D
0008B854 C20D                       	dc.b	nF5, $0D
0008B856 E107                       	smpsAlterNote       $07
0008B858 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B85C E10A                       	smpsAlterNote       $0A
0008B85E E701                       	dc.b	smpsNoAttack, $01
0008B860 E110                       	smpsAlterNote       $10
0008B862 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B866 E10A                       	smpsAlterNote       $0A
0008B868 E701                       	dc.b	smpsNoAttack, $01
0008B86A E107                       	smpsAlterNote       $07
0008B86C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B870 E10D                       	smpsAlterNote       $0D
0008B872 E701                       	dc.b	smpsNoAttack, $01
0008B874 E111                       	smpsAlterNote       $11
0008B876 E701                       	dc.b	smpsNoAttack, $01
0008B878 E110                       	smpsAlterNote       $10
0008B87A E701                       	dc.b	smpsNoAttack, $01
0008B87C E10A                       	smpsAlterNote       $0A
0008B87E E701                       	dc.b	smpsNoAttack, $01
0008B880 E106                       	smpsAlterNote       $06
0008B882 E701                       	dc.b	smpsNoAttack, $01
0008B884 E10A                       	smpsAlterNote       $0A
0008B886 E701                       	dc.b	smpsNoAttack, $01
0008B888 E10D                       	smpsAlterNote       $0D
0008B88A E701                       	dc.b	smpsNoAttack, $01
0008B88C E111                       	smpsAlterNote       $11
0008B88E E701                       	dc.b	smpsNoAttack, $01
0008B890 E10D                       	smpsAlterNote       $0D
0008B892 E701                       	dc.b	smpsNoAttack, $01
0008B894 E107                       	smpsAlterNote       $07
0008B896 E701                       	dc.b	smpsNoAttack, $01
0008B898 E106                       	smpsAlterNote       $06
0008B89A E701                       	dc.b	smpsNoAttack, $01
0008B89C E10A                       	smpsAlterNote       $0A
0008B89E E701                       	dc.b	smpsNoAttack, $01
0008B8A0 E110                       	smpsAlterNote       $10
0008B8A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8A6 E10D                       	smpsAlterNote       $0D
0008B8A8 E701                       	dc.b	smpsNoAttack, $01
0008B8AA E107                       	smpsAlterNote       $07
0008B8AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8B0 E10D                       	smpsAlterNote       $0D
0008B8B2 E701                       	dc.b	smpsNoAttack, $01
0008B8B4 E110                       	smpsAlterNote       $10
0008B8B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B8BA E10A                       	smpsAlterNote       $0A
0008B8BC E701                       	dc.b	smpsNoAttack, $01
0008B8BE E106                       	smpsAlterNote       $06
0008B8C0 E701                       	dc.b	smpsNoAttack, $01
0008B8C2 E107                       	smpsAlterNote       $07
0008B8C4 E701                       	dc.b	smpsNoAttack, $01
0008B8C6 E10D                       	smpsAlterNote       $0D
0008B8C8 E701                       	dc.b	smpsNoAttack, $01
0008B8CA E111                       	smpsAlterNote       $11
0008B8CC E701                       	dc.b	smpsNoAttack, $01
0008B8CE E10D                       	smpsAlterNote       $0D
0008B8D0 E701                       	dc.b	smpsNoAttack, $01
0008B8D2 E10A                       	smpsAlterNote       $0A
0008B8D4 E701                       	dc.b	smpsNoAttack, $01
0008B8D6 E106                       	smpsAlterNote       $06
0008B8D8 E701                       	dc.b	smpsNoAttack, $01
0008B8DA E10A                       	smpsAlterNote       $0A
0008B8DC E701                       	dc.b	smpsNoAttack, $01
0008B8DE E110                       	smpsAlterNote       $10
0008B8E0 E701                       	dc.b	smpsNoAttack, $01
0008B8E2 E111                       	smpsAlterNote       $11
0008B8E4 E701                       	dc.b	smpsNoAttack, $01
0008B8E6 E10D                       	smpsAlterNote       $0D
0008B8E8 E701                       	dc.b	smpsNoAttack, $01
0008B8EA E107                       	smpsAlterNote       $07
0008B8EC E701                       	dc.b	smpsNoAttack, $01
0008B8EE E10D                       	smpsAlterNote       $0D
0008B8F0 C207                       	dc.b	nF5, $07
0008B8F2 E10C                       	smpsAlterNote       $0C
0008B8F4 C10D                       	dc.b	nE5, $0D
0008B8F6 E109                       	smpsAlterNote       $09
0008B8F8 E701                       	dc.b	smpsNoAttack, $01
0008B8FA E106                       	smpsAlterNote       $06
0008B8FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B900 E10C                       	smpsAlterNote       $0C
0008B902 E701                       	dc.b	smpsNoAttack, $01
0008B904 E110                       	smpsAlterNote       $10
0008B906 E701                       	dc.b	smpsNoAttack, $01
0008B908 E10F                       	smpsAlterNote       $0F
0008B90A E701                       	dc.b	smpsNoAttack, $01
0008B90C E109                       	smpsAlterNote       $09
0008B90E E701                       	dc.b	smpsNoAttack, $01
0008B910 E105                       	smpsAlterNote       $05
0008B912 E701                       	dc.b	smpsNoAttack, $01
0008B914 E109                       	smpsAlterNote       $09
0008B916 E701                       	dc.b	smpsNoAttack, $01
0008B918 E10C                       	smpsAlterNote       $0C
0008B91A E701                       	dc.b	smpsNoAttack, $01
0008B91C E110                       	smpsAlterNote       $10
0008B91E E701                       	dc.b	smpsNoAttack, $01
0008B920 E10B                       	smpsAlterNote       $0B
0008B922 BF0D                       	dc.b	nD5, $0D
0008B924 E108                       	smpsAlterNote       $08
0008B926 E701                       	dc.b	smpsNoAttack, $01
0008B928 E105                       	smpsAlterNote       $05
0008B92A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B92E E10B                       	smpsAlterNote       $0B
0008B930 E701                       	dc.b	smpsNoAttack, $01
0008B932 E10F                       	smpsAlterNote       $0F
0008B934 E701                       	dc.b	smpsNoAttack, $01
0008B936 E10E                       	smpsAlterNote       $0E
0008B938 E701                       	dc.b	smpsNoAttack, $01
0008B93A E108                       	smpsAlterNote       $08
0008B93C E701                       	dc.b	smpsNoAttack, $01
0008B93E E104                       	smpsAlterNote       $04
0008B940 E701                       	dc.b	smpsNoAttack, $01
0008B942 E108                       	smpsAlterNote       $08
0008B944 E701                       	dc.b	smpsNoAttack, $01
0008B946 E10E                       	smpsAlterNote       $0E
0008B948 E701                       	dc.b	smpsNoAttack, $01
0008B94A E10F                       	smpsAlterNote       $0F
0008B94C E701                       	dc.b	smpsNoAttack, $01
0008B94E E10B                       	smpsAlterNote       $0B
0008B950 E701                       	dc.b	smpsNoAttack, $01
0008B952 E105                       	smpsAlterNote       $05
0008B954 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B958 E108                       	smpsAlterNote       $08
0008B95A E701                       	dc.b	smpsNoAttack, $01
0008B95C E10E                       	smpsAlterNote       $0E
0008B95E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B962 E108                       	smpsAlterNote       $08
0008B964 E701                       	dc.b	smpsNoAttack, $01
0008B966 E105                       	smpsAlterNote       $05
0008B968 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B96C E10B                       	smpsAlterNote       $0B
0008B96E E701                       	dc.b	smpsNoAttack, $01
0008B970 E10F                       	smpsAlterNote       $0F
0008B972 E701                       	dc.b	smpsNoAttack, $01
0008B974 E10E                       	smpsAlterNote       $0E
0008B976 E701                       	dc.b	smpsNoAttack, $01
0008B978 E108                       	smpsAlterNote       $08
0008B97A E701                       	dc.b	smpsNoAttack, $01
0008B97C E104                       	smpsAlterNote       $04
0008B97E E701                       	dc.b	smpsNoAttack, $01
0008B980 E108                       	smpsAlterNote       $08
0008B982 E701                       	dc.b	smpsNoAttack, $01
0008B984 E10B                       	smpsAlterNote       $0B
0008B986 E701                       	dc.b	smpsNoAttack, $01
0008B988 E10F                       	smpsAlterNote       $0F
0008B98A E701                       	dc.b	smpsNoAttack, $01
0008B98C E10B                       	smpsAlterNote       $0B
0008B98E E701                       	dc.b	smpsNoAttack, $01
0008B990 E105                       	smpsAlterNote       $05
0008B992 E701                       	dc.b	smpsNoAttack, $01
0008B994 E104                       	smpsAlterNote       $04
0008B996 E701                       	dc.b	smpsNoAttack, $01
0008B998 E108                       	smpsAlterNote       $08
0008B99A E701                       	dc.b	smpsNoAttack, $01
0008B99C E10E                       	smpsAlterNote       $0E
0008B99E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9A2 E10B                       	smpsAlterNote       $0B
0008B9A4 E701                       	dc.b	smpsNoAttack, $01
0008B9A6 E105                       	smpsAlterNote       $05
0008B9A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9AC E10B                       	smpsAlterNote       $0B
0008B9AE E701                       	dc.b	smpsNoAttack, $01
0008B9B0 E10E                       	smpsAlterNote       $0E
0008B9B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008B9B6 E108                       	smpsAlterNote       $08
0008B9B8 E701                       	dc.b	smpsNoAttack, $01
0008B9BA E105                       	smpsAlterNote       $05
0008B9BC 8001                       	dc.b	nRst, $01
0008B9C0 E601                       	smpsAlterVol        $01
0008B9C2 E10B                       	smpsAlterNote       $0B
0008B9C4 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008B9D0 8004                       	dc.b	nRst, $04
0008B9D4 E6FF                       	smpsAlterVol        $FF
0008B9D6 E10D                       	smpsAlterNote       $0D
0008B9D8 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008B9E0 E10C                       	smpsAlterNote       $0C
0008B9E2 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008B9E7 E10D                       	smpsAlterNote       $0D
0008B9E9 B60D                       	dc.b	nF4, $0D
0008B9EB E10A                       	smpsAlterNote       $0A
0008B9ED E701                       	dc.b	smpsNoAttack, $01
0008B9EF E106                       	smpsAlterNote       $06
0008B9F1 E701                       	dc.b	smpsNoAttack, $01
0008B9F3 E10A                       	smpsAlterNote       $0A
0008B9F5 E701                       	dc.b	smpsNoAttack, $01
0008B9F7 E110                       	smpsAlterNote       $10
0008B9F9 E701                       	dc.b	smpsNoAttack, $01
0008B9FB E111                       	smpsAlterNote       $11
0008B9FD E701                       	dc.b	smpsNoAttack, $01
0008B9FF E10D                       	smpsAlterNote       $0D
0008BA01 E701                       	dc.b	smpsNoAttack, $01
0008BA03 E107                       	smpsAlterNote       $07
0008BA05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA09 E10A                       	smpsAlterNote       $0A
0008BA0B E701                       	dc.b	smpsNoAttack, $01
0008BA0D E110                       	smpsAlterNote       $10
0008BA0F E701                       	dc.b	smpsNoAttack, $01
0008BA11 E111                       	smpsAlterNote       $11
0008BA13 8001                       	dc.b	nRst, $01
0008BA15 E10D                       	smpsAlterNote       $0D
0008BA17 B80D                       	dc.b	nG4, $0D
0008BA19 E10A                       	smpsAlterNote       $0A
0008BA1B E701                       	dc.b	smpsNoAttack, $01
0008BA1D E106                       	smpsAlterNote       $06
0008BA1F E701                       	dc.b	smpsNoAttack, $01
0008BA21 E10A                       	smpsAlterNote       $0A
0008BA23 E701                       	dc.b	smpsNoAttack, $01
0008BA25 E110                       	smpsAlterNote       $10
0008BA27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA2B E10D                       	smpsAlterNote       $0D
0008BA2D E701                       	dc.b	smpsNoAttack, $01
0008BA2F E107                       	smpsAlterNote       $07
0008BA31 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA35 E10D                       	smpsAlterNote       $0D
0008BA37 E701                       	dc.b	smpsNoAttack, $01
0008BA39 E110                       	smpsAlterNote       $10
0008BA3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BA3F E10A                       	smpsAlterNote       $0A
0008BA41 E701                       	dc.b	smpsNoAttack, $01
0008BA43 E106                       	smpsAlterNote       $06
0008BA45 E701                       	dc.b	smpsNoAttack, $01
0008BA47 E107                       	smpsAlterNote       $07
0008BA49 E701                       	dc.b	smpsNoAttack, $01
0008BA4B E10D                       	smpsAlterNote       $0D
0008BA4D E701                       	dc.b	smpsNoAttack, $01
0008BA4F E111                       	smpsAlterNote       $11
0008BA51 E701                       	dc.b	smpsNoAttack, $01
0008BA53 E10D                       	smpsAlterNote       $0D
0008BA55 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BA59 E10F                       	smpsAlterNote       $0F
0008BA5B BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008BA5F E110                       	smpsAlterNote       $10
0008BA61 BB03                       	dc.b	nBb4, $03
0008BA63 E10F                       	smpsAlterNote       $0F
0008BA65 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008BA6B E110                       	smpsAlterNote       $10
0008BA6D C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008BA71 E10F                       	smpsAlterNote       $0F
0008BA73 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008BA79 E110                       	smpsAlterNote       $10
0008BA7B D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008BA7F E10F                       	smpsAlterNote       $0F
0008BA81 D20D                       	dc.b	nA6, $0D
0008BA83 E10C                       	smpsAlterNote       $0C
0008BA85 E701                       	dc.b	smpsNoAttack, $01
0008BA87 E108                       	smpsAlterNote       $08
0008BA89 E701                       	dc.b	smpsNoAttack, $01
0008BA8B E10C                       	smpsAlterNote       $0C
0008BA8D E701                       	dc.b	smpsNoAttack, $01
0008BA8F E10F                       	smpsAlterNote       $0F
0008BA91 E701                       	dc.b	smpsNoAttack, $01
0008BA93 E113                       	smpsAlterNote       $13
0008BA95 E701                       	dc.b	smpsNoAttack, $01
0008BA97 E10F                       	smpsAlterNote       $0F
0008BA99 E701                       	dc.b	smpsNoAttack, $01
0008BA9B E109                       	smpsAlterNote       $09
0008BA9D E701                       	dc.b	smpsNoAttack, $01
0008BA9F E108                       	smpsAlterNote       $08
0008BAA1 E701                       	dc.b	smpsNoAttack, $01
0008BAA3 E10C                       	smpsAlterNote       $0C
0008BAA5 E701                       	dc.b	smpsNoAttack, $01
0008BAA7 E112                       	smpsAlterNote       $12
0008BAA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAAD E10F                       	smpsAlterNote       $0F
0008BAAF E701                       	dc.b	smpsNoAttack, $01
0008BAB1 E109                       	smpsAlterNote       $09
0008BAB3 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008BAB9 E10D                       	smpsAlterNote       $0D
0008BABB CE07                       	dc.b	nF6, $07
0008BABD E10C                       	smpsAlterNote       $0C
0008BABF CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008BAC3 E10D                       	smpsAlterNote       $0D
0008BAC5 CE03                       	dc.b	nF6, $03
0008BAC7 E10C                       	smpsAlterNote       $0C
0008BAC9 CC0D                       	dc.b	nEb6, $0D
0008BACB E109                       	smpsAlterNote       $09
0008BACD E701                       	dc.b	smpsNoAttack, $01
0008BACF E106                       	smpsAlterNote       $06
0008BAD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BAD5 E10C                       	smpsAlterNote       $0C
0008BAD7 E701                       	dc.b	smpsNoAttack, $01
0008BAD9 E110                       	smpsAlterNote       $10
0008BADB E701                       	dc.b	smpsNoAttack, $01
0008BADD E10F                       	smpsAlterNote       $0F
0008BADF E701                       	dc.b	smpsNoAttack, $01
0008BAE1 E109                       	smpsAlterNote       $09
0008BAE3 E701                       	dc.b	smpsNoAttack, $01
0008BAE5 E105                       	smpsAlterNote       $05
0008BAE7 E701                       	dc.b	smpsNoAttack, $01
0008BAE9 E109                       	smpsAlterNote       $09
0008BAEB E701                       	dc.b	smpsNoAttack, $01
0008BAED E10C                       	smpsAlterNote       $0C
0008BAEF E701                       	dc.b	smpsNoAttack, $01
0008BAF1 E110                       	smpsAlterNote       $10
0008BAF3 E701                       	dc.b	smpsNoAttack, $01
0008BAF5 E10C                       	smpsAlterNote       $0C
0008BAF7 E701                       	dc.b	smpsNoAttack, $01
0008BAF9 E106                       	smpsAlterNote       $06
0008BAFB E701                       	dc.b	smpsNoAttack, $01
0008BAFD E105                       	smpsAlterNote       $05
0008BAFF E701                       	dc.b	smpsNoAttack, $01
0008BB01 E109                       	smpsAlterNote       $09
0008BB03 E701                       	dc.b	smpsNoAttack, $01
0008BB05 E10F                       	smpsAlterNote       $0F
0008BB07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB0B E10C                       	smpsAlterNote       $0C
0008BB0D E701                       	dc.b	smpsNoAttack, $01
0008BB0F E10B                       	smpsAlterNote       $0B
0008BB11 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008BB1B E10F                       	smpsAlterNote       $0F
0008BB1D C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008BB27 E10D                       	smpsAlterNote       $0D
0008BB29 C203                       	dc.b	nF5, $03
0008BB2B E10C                       	smpsAlterNote       $0C
0008BB2D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008BB31 E10D                       	smpsAlterNote       $0D
0008BB33 C20D                       	dc.b	nF5, $0D
0008BB35 E10C                       	smpsAlterNote       $0C
0008BB37 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008BB3B E10B                       	smpsAlterNote       $0B
0008BB3D BF0D                       	dc.b	nD5, $0D
0008BB3F E108                       	smpsAlterNote       $08
0008BB41 E701                       	dc.b	smpsNoAttack, $01
0008BB43 E104                       	smpsAlterNote       $04
0008BB45 E701                       	dc.b	smpsNoAttack, $01
0008BB47 E108                       	smpsAlterNote       $08
0008BB49 E701                       	dc.b	smpsNoAttack, $01
0008BB4B E10E                       	smpsAlterNote       $0E
0008BB4D E701                       	dc.b	smpsNoAttack, $01
0008BB4F E10F                       	smpsAlterNote       $0F
0008BB51 E701                       	dc.b	smpsNoAttack, $01
0008BB53 E10B                       	smpsAlterNote       $0B
0008BB55 E701                       	dc.b	smpsNoAttack, $01
0008BB57 E105                       	smpsAlterNote       $05
0008BB59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB5D E108                       	smpsAlterNote       $08
0008BB5F E701                       	dc.b	smpsNoAttack, $01
0008BB61 E10E                       	smpsAlterNote       $0E
0008BB63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB67 E108                       	smpsAlterNote       $08
0008BB69 E701                       	dc.b	smpsNoAttack, $01
0008BB6B E105                       	smpsAlterNote       $05
0008BB6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BB71 E10B                       	smpsAlterNote       $0B
0008BB73 E701                       	dc.b	smpsNoAttack, $01
0008BB75 E10F                       	smpsAlterNote       $0F
0008BB77 E701                       	dc.b	smpsNoAttack, $01
0008BB79 E10E                       	smpsAlterNote       $0E
0008BB7B E701                       	dc.b	smpsNoAttack, $01
0008BB7D E108                       	smpsAlterNote       $08
0008BB7F E701                       	dc.b	smpsNoAttack, $01
0008BB81 E104                       	smpsAlterNote       $04
0008BB83 E701                       	dc.b	smpsNoAttack, $01
0008BB85 E108                       	smpsAlterNote       $08
0008BB87 E701                       	dc.b	smpsNoAttack, $01
0008BB89 E10B                       	smpsAlterNote       $0B
0008BB8B E701                       	dc.b	smpsNoAttack, $01
0008BB8D E10F                       	smpsAlterNote       $0F
0008BB8F E701                       	dc.b	smpsNoAttack, $01
0008BB91 E10B                       	smpsAlterNote       $0B
0008BB93 E701                       	dc.b	smpsNoAttack, $01
0008BB95 E105                       	smpsAlterNote       $05
0008BB97 E701                       	dc.b	smpsNoAttack, $01
0008BB99 E104                       	smpsAlterNote       $04
0008BB9B E701                       	dc.b	smpsNoAttack, $01
0008BB9D E108                       	smpsAlterNote       $08
0008BB9F E701                       	dc.b	smpsNoAttack, $01
0008BBA1 E10E                       	smpsAlterNote       $0E
0008BBA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBA7 E10B                       	smpsAlterNote       $0B
0008BBA9 E701                       	dc.b	smpsNoAttack, $01
0008BBAB E105                       	smpsAlterNote       $05
0008BBAD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBB1 E10B                       	smpsAlterNote       $0B
0008BBB3 E701                       	dc.b	smpsNoAttack, $01
0008BBB5 E10E                       	smpsAlterNote       $0E
0008BBB7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBBB E108                       	smpsAlterNote       $08
0008BBBD E701                       	dc.b	smpsNoAttack, $01
0008BBBF E104                       	smpsAlterNote       $04
0008BBC1 E701                       	dc.b	smpsNoAttack, $01
0008BBC3 E105                       	smpsAlterNote       $05
0008BBC5 E701                       	dc.b	smpsNoAttack, $01
0008BBC7 E10B                       	smpsAlterNote       $0B
0008BBC9 E701                       	dc.b	smpsNoAttack, $01
0008BBCB E10F                       	smpsAlterNote       $0F
0008BBCD E701                       	dc.b	smpsNoAttack, $01
0008BBCF E10B                       	smpsAlterNote       $0B
0008BBD1 E701                       	dc.b	smpsNoAttack, $01
0008BBD3 E108                       	smpsAlterNote       $08
0008BBD5 E701                       	dc.b	smpsNoAttack, $01
0008BBD7 E104                       	smpsAlterNote       $04
0008BBD9 E701                       	dc.b	smpsNoAttack, $01
0008BBDB E108                       	smpsAlterNote       $08
0008BBDD E701                       	dc.b	smpsNoAttack, $01
0008BBDF E10E                       	smpsAlterNote       $0E
0008BBE1 E701                       	dc.b	smpsNoAttack, $01
0008BBE3 E10F                       	smpsAlterNote       $0F
0008BBE5 E701                       	dc.b	smpsNoAttack, $01
0008BBE7 E10B                       	smpsAlterNote       $0B
0008BBE9 E701                       	dc.b	smpsNoAttack, $01
0008BBEB E105                       	smpsAlterNote       $05
0008BBED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBF1 E108                       	smpsAlterNote       $08
0008BBF3 E701                       	dc.b	smpsNoAttack, $01
0008BBF5 E10E                       	smpsAlterNote       $0E
0008BBF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BBFB E108                       	smpsAlterNote       $08
0008BBFD E701                       	dc.b	smpsNoAttack, $01
0008BBFF E105                       	smpsAlterNote       $05
0008BC01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC05 E10B                       	smpsAlterNote       $0B
0008BC07 E701                       	dc.b	smpsNoAttack, $01
0008BC09 E10F                       	smpsAlterNote       $0F
0008BC0B E701                       	dc.b	smpsNoAttack, $01
0008BC0D E10E                       	smpsAlterNote       $0E
0008BC0F E701                       	dc.b	smpsNoAttack, $01
0008BC11 E108                       	smpsAlterNote       $08
0008BC13 E701                       	dc.b	smpsNoAttack, $01
0008BC15 E104                       	smpsAlterNote       $04
0008BC17 E701                       	dc.b	smpsNoAttack, $01
0008BC19 E108                       	smpsAlterNote       $08
0008BC1B E701                       	dc.b	smpsNoAttack, $01
0008BC1D E10B                       	smpsAlterNote       $0B
0008BC1F E701                       	dc.b	smpsNoAttack, $01
0008BC21 E10F                       	smpsAlterNote       $0F
0008BC23 E701                       	dc.b	smpsNoAttack, $01
0008BC25 E10B                       	smpsAlterNote       $0B
0008BC27 E701                       	dc.b	smpsNoAttack, $01
0008BC29 E105                       	smpsAlterNote       $05
0008BC2B E701                       	dc.b	smpsNoAttack, $01
0008BC2D E104                       	smpsAlterNote       $04
0008BC2F E701                       	dc.b	smpsNoAttack, $01
0008BC31 E105                       	smpsAlterNote       $05
0008BC33 8001                       	dc.b	nRst, $01
0008BC35 E10D                       	smpsAlterNote       $0D
0008BC37 C20D                       	dc.b	nF5, $0D
0008BC39 E107                       	smpsAlterNote       $07
0008BC3B E701                       	dc.b	smpsNoAttack, $01
0008BC3D E106                       	smpsAlterNote       $06
0008BC3F E701                       	dc.b	smpsNoAttack, $01
0008BC41 E10A                       	smpsAlterNote       $0A
0008BC43 E701                       	dc.b	smpsNoAttack, $01
0008BC45 E110                       	smpsAlterNote       $10
0008BC47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC4B E10D                       	smpsAlterNote       $0D
0008BC4D E701                       	dc.b	smpsNoAttack, $01
0008BC4F E107                       	smpsAlterNote       $07
0008BC51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC55 E10D                       	smpsAlterNote       $0D
0008BC57 E701                       	dc.b	smpsNoAttack, $01
0008BC59 E110                       	smpsAlterNote       $10
0008BC5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC5F E10A                       	smpsAlterNote       $0A
0008BC61 E701                       	dc.b	smpsNoAttack, $01
0008BC63 E106                       	smpsAlterNote       $06
0008BC65 E701                       	dc.b	smpsNoAttack, $01
0008BC67 E107                       	smpsAlterNote       $07
0008BC69 E701                       	dc.b	smpsNoAttack, $01
0008BC6B E10D                       	smpsAlterNote       $0D
0008BC6D E701                       	dc.b	smpsNoAttack, $01
0008BC6F E111                       	smpsAlterNote       $11
0008BC71 E701                       	dc.b	smpsNoAttack, $01
0008BC73 E10D                       	smpsAlterNote       $0D
0008BC75 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC79 E10C                       	smpsAlterNote       $0C
0008BC7B C10D                       	dc.b	nE5, $0D
0008BC7D E10D                       	smpsAlterNote       $0D
0008BC7F C20A                       	dc.b	nF5, $0A
0008BC81 E10C                       	smpsAlterNote       $0C
0008BC83 C10E                       	dc.b	nE5, $0E
0008BC85 E106                       	smpsAlterNote       $06
0008BC87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BC8B E10C                       	smpsAlterNote       $0C
0008BC8D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BC91 E10B                       	smpsAlterNote       $0B
0008BC93 BF0D                       	dc.b	nD5, $0D
0008BC95 E10C                       	smpsAlterNote       $0C
0008BC97 C107                       	dc.b	nE5, $07
0008BC99 E10D                       	smpsAlterNote       $0D
0008BC9B C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008BCA5 E110                       	smpsAlterNote       $10
0008BCA7 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008BCAD E10F                       	smpsAlterNote       $0F
0008BCAF C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008BCB7 E10D                       	smpsAlterNote       $0D
0008BCB9 D003                       	dc.b	nG6, $03
0008BCBD E0C0                       	smpsPan             panCenter, $00
0008BCBF E6FF                       	smpsAlterVol        $FF
0008BCC1 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008BCCD 8001                       	dc.b	nRst, $01
0008BCCF E10C                       	smpsAlterNote       $0C
0008BCD1 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008BCDB E604                       	smpsAlterVol        $04
0008BCDD E10B                       	smpsAlterNote       $0B
0008BCDF B306 8001                  	dc.b	nD4, $06, nRst, $01
0008BCE3 E10F                       	smpsAlterNote       $0F
0008BCE5 AE03                       	dc.b	nA3, $03
0008BCE7 E10D                       	smpsAlterNote       $0D
0008BCE9 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BCED E10C                       	smpsAlterNote       $0C
0008BCEF B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BCF3 E10B                       	smpsAlterNote       $0B
0008BCF5 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BCF9 E10A                       	smpsAlterNote       $0A
0008BCFB B103                       	dc.b	nC4, $03
0008BCFD E110                       	smpsAlterNote       $10
0008BCFF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BD03 E10F                       	smpsAlterNote       $0F
0008BD05 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008BD09 E080                       	smpsPan             panLeft, $00
0008BD0B 01                         	dc.b	$01
0008BD0E E6FB                       	smpsAlterVol        $FB
0008BD10 E1E4                       	smpsAlterNote       $E4
0008BD12 C501                       	dc.b	nAb5, $01
0008BD14 E1F4                       	smpsAlterNote       $F4
0008BD16 E701                       	dc.b	smpsNoAttack, $01
0008BD18 E104                       	smpsAlterNote       $04
0008BD1A E701                       	dc.b	smpsNoAttack, $01
0008BD1C E114                       	smpsAlterNote       $14
0008BD1E E701                       	dc.b	smpsNoAttack, $01
0008BD20 E11C                       	smpsAlterNote       $1C
0008BD22 E701                       	dc.b	smpsNoAttack, $01
0008BD24 E1EF                       	smpsAlterNote       $EF
0008BD26 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008BD29 E1FF                       	smpsAlterNote       $FF
0008BD2B E701                       	dc.b	smpsNoAttack, $01
0008BD2D E10F                       	smpsAlterNote       $0F
0008BD2F C606                       	dc.b	nA5, $06
0008BD31 E109                       	smpsAlterNote       $09
0008BD33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD37 E10F                       	smpsAlterNote       $0F
0008BD39 E701                       	dc.b	smpsNoAttack, $01
0008BD3B E112                       	smpsAlterNote       $12
0008BD3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD41 E10C                       	smpsAlterNote       $0C
0008BD43 E701                       	dc.b	smpsNoAttack, $01
0008BD45 E108                       	smpsAlterNote       $08
0008BD47 E701                       	dc.b	smpsNoAttack, $01
0008BD49 E109                       	smpsAlterNote       $09
0008BD4B E701                       	dc.b	smpsNoAttack, $01
0008BD4D E10F                       	smpsAlterNote       $0F
0008BD4F E701                       	dc.b	smpsNoAttack, $01
0008BD51 E113                       	smpsAlterNote       $13
0008BD53 E701                       	dc.b	smpsNoAttack, $01
0008BD55 E10F                       	smpsAlterNote       $0F
0008BD57 E701                       	dc.b	smpsNoAttack, $01
0008BD59 E10C                       	smpsAlterNote       $0C
0008BD5B E701                       	dc.b	smpsNoAttack, $01
0008BD5D E108                       	smpsAlterNote       $08
0008BD5F E701                       	dc.b	smpsNoAttack, $01
0008BD61 E10C                       	smpsAlterNote       $0C
0008BD63 E701                       	dc.b	smpsNoAttack, $01
0008BD65 E112                       	smpsAlterNote       $12
0008BD67 E701                       	dc.b	smpsNoAttack, $01
0008BD69 E113                       	smpsAlterNote       $13
0008BD6B E701                       	dc.b	smpsNoAttack, $01
0008BD6D E10F                       	smpsAlterNote       $0F
0008BD6F E701                       	dc.b	smpsNoAttack, $01
0008BD71 E109                       	smpsAlterNote       $09
0008BD73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD77 E10C                       	smpsAlterNote       $0C
0008BD79 E701                       	dc.b	smpsNoAttack, $01
0008BD7B E112                       	smpsAlterNote       $12
0008BD7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD81 E10C                       	smpsAlterNote       $0C
0008BD83 E701                       	dc.b	smpsNoAttack, $01
0008BD85 E109                       	smpsAlterNote       $09
0008BD87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BD8B E10F                       	smpsAlterNote       $0F
0008BD8D E701                       	dc.b	smpsNoAttack, $01
0008BD8F E113                       	smpsAlterNote       $13
0008BD91 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BD95 E10D                       	smpsAlterNote       $0D
0008BD97 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008BD9D E10C                       	smpsAlterNote       $0C
0008BD9F C102 8001                  	dc.b	nE5, $02, nRst, $01
0008BDA3 E10D                       	smpsAlterNote       $0D
0008BDA5 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008BDA9 E10C                       	smpsAlterNote       $0C
0008BDAB C102                       	dc.b	nE5, $02
0008BDAD E10B                       	smpsAlterNote       $0B
0008BDAF BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008BDB3 E10C                       	smpsAlterNote       $0C
0008BDB5 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008BDB9 E10B                       	smpsAlterNote       $0B
0008BDBB BF02                       	dc.b	nD5, $02
0008BDBD E10A                       	smpsAlterNote       $0A
0008BDBF BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008BDC9 E110                       	smpsAlterNote       $10
0008BDCB BB02                       	dc.b	nBb4, $02
0008BDCD E10A                       	smpsAlterNote       $0A
0008BDCF BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008BDD3 E110                       	smpsAlterNote       $10
0008BDD5 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008BDD9 E10F                       	smpsAlterNote       $0F
0008BDDB BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008BDDF E110                       	smpsAlterNote       $10
0008BDE1 BB02                       	dc.b	nBb4, $02
0008BDE3 E10F                       	smpsAlterNote       $0F
0008BDE5 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008BDEF E10C                       	smpsAlterNote       $0C
0008BDF1 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008BDF9 E10B                       	smpsAlterNote       $0B
0008BDFB BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008BDFF E10F                       	smpsAlterNote       $0F
0008BE01 BA02                       	dc.b	nA4, $02
0008BE05 E0C0                       	smpsPan             panCenter, $00
0008BE07 E601                       	smpsAlterVol        $01
0008BE09 E109                       	smpsAlterNote       $09
0008BE0B AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008BE17 E108                       	smpsAlterNote       $08
0008BE19 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008BE1F E107                       	smpsAlterNote       $07
0008BE21 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008BE27 E109                       	smpsAlterNote       $09
0008BE29 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008BE2D E108                       	smpsAlterNote       $08
0008BE2F B506 8001                  	dc.b	nE4, $06, nRst, $01
0008BE33 E107                       	smpsAlterNote       $07
0008BE35 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008BE39 E106                       	smpsAlterNote       $06
0008BE3B B103                       	dc.b	nC4, $03
0008BE3D E10C                       	smpsAlterNote       $0C
0008BE3F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008BE45 E080                       	smpsPan             panLeft, $00
0008BE47 07                         	dc.b	$07
0008BE48 E6FE                       	smpsAlterVol        $FE
0008BE4A E10B                       	smpsAlterNote       $0B
0008BE4C B20D                       	dc.b	nCs4, $0D
0008BE4E E105                       	smpsAlterNote       $05
0008BE50 E701                       	dc.b	smpsNoAttack, $01
0008BE52 E104                       	smpsAlterNote       $04
0008BE54 E701                       	dc.b	smpsNoAttack, $01
0008BE56 E108                       	smpsAlterNote       $08
0008BE58 E701                       	dc.b	smpsNoAttack, $01
0008BE5A E10E                       	smpsAlterNote       $0E
0008BE5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE60 E10B                       	smpsAlterNote       $0B
0008BE62 E701                       	dc.b	smpsNoAttack, $01
0008BE64 E105                       	smpsAlterNote       $05
0008BE66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE6A E10B                       	smpsAlterNote       $0B
0008BE6C E701                       	dc.b	smpsNoAttack, $01
0008BE6E E10E                       	smpsAlterNote       $0E
0008BE70 E701                       	dc.b	smpsNoAttack, $01
0008BE72 E10F                       	smpsAlterNote       $0F
0008BE74 8001                       	dc.b	nRst, $01
0008BE76 E10B                       	smpsAlterNote       $0B
0008BE78 B30D                       	dc.b	nD4, $0D
0008BE7A E105                       	smpsAlterNote       $05
0008BE7C E701                       	dc.b	smpsNoAttack, $01
0008BE7E E104                       	smpsAlterNote       $04
0008BE80 E701                       	dc.b	smpsNoAttack, $01
0008BE82 E108                       	smpsAlterNote       $08
0008BE84 E701                       	dc.b	smpsNoAttack, $01
0008BE86 E10E                       	smpsAlterNote       $0E
0008BE88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE8C E10B                       	smpsAlterNote       $0B
0008BE8E E701                       	dc.b	smpsNoAttack, $01
0008BE90 E105                       	smpsAlterNote       $05
0008BE92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BE96 E10B                       	smpsAlterNote       $0B
0008BE98 E701                       	dc.b	smpsNoAttack, $01
0008BE9A E10E                       	smpsAlterNote       $0E
0008BE9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEA0 E108                       	smpsAlterNote       $08
0008BEA2 E701                       	dc.b	smpsNoAttack, $01
0008BEA4 E104                       	smpsAlterNote       $04
0008BEA6 E701                       	dc.b	smpsNoAttack, $01
0008BEA8 E105                       	smpsAlterNote       $05
0008BEAA E701                       	dc.b	smpsNoAttack, $01
0008BEAC E10B                       	smpsAlterNote       $0B
0008BEAE E701                       	dc.b	smpsNoAttack, $01
0008BEB0 E10F                       	smpsAlterNote       $0F
0008BEB2 E701                       	dc.b	smpsNoAttack, $01
0008BEB4 E10B                       	smpsAlterNote       $0B
0008BEB6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008BEBA E10C                       	smpsAlterNote       $0C
0008BEBC B50D                       	dc.b	nE4, $0D
0008BEBE E106                       	smpsAlterNote       $06
0008BEC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEC4 E10C                       	smpsAlterNote       $0C
0008BEC6 E701                       	dc.b	smpsNoAttack, $01
0008BEC8 E10F                       	smpsAlterNote       $0F
0008BECA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BECE E109                       	smpsAlterNote       $09
0008BED0 E701                       	dc.b	smpsNoAttack, $01
0008BED2 E105                       	smpsAlterNote       $05
0008BED4 E701                       	dc.b	smpsNoAttack, $01
0008BED6 E106                       	smpsAlterNote       $06
0008BED8 E701                       	dc.b	smpsNoAttack, $01
0008BEDA E10C                       	smpsAlterNote       $0C
0008BEDC E701                       	dc.b	smpsNoAttack, $01
0008BEDE E110                       	smpsAlterNote       $10
0008BEE0 E701                       	dc.b	smpsNoAttack, $01
0008BEE2 E10B                       	smpsAlterNote       $0B
0008BEE4 B30E                       	dc.b	nD4, $0E
0008BEE6 E105                       	smpsAlterNote       $05
0008BEE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEEC E10B                       	smpsAlterNote       $0B
0008BEEE E701                       	dc.b	smpsNoAttack, $01
0008BEF0 E10E                       	smpsAlterNote       $0E
0008BEF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BEF6 E108                       	smpsAlterNote       $08
0008BEF8 E701                       	dc.b	smpsNoAttack, $01
0008BEFA E104                       	smpsAlterNote       $04
0008BEFC E701                       	dc.b	smpsNoAttack, $01
0008BEFE E105                       	smpsAlterNote       $05
0008BF00 E701                       	dc.b	smpsNoAttack, $01
0008BF02 E10B                       	smpsAlterNote       $0B
0008BF04 E701                       	dc.b	smpsNoAttack, $01
0008BF06 E10F                       	smpsAlterNote       $0F
0008BF08 E701                       	dc.b	smpsNoAttack, $01
0008BF0A E10B                       	smpsAlterNote       $0B
0008BF0C E701                       	dc.b	smpsNoAttack, $01
0008BF0E E108                       	smpsAlterNote       $08
0008BF10 E701                       	dc.b	smpsNoAttack, $01
0008BF12 E104                       	smpsAlterNote       $04
0008BF14 E701                       	dc.b	smpsNoAttack, $01
0008BF16 E108                       	smpsAlterNote       $08
0008BF18 E701                       	dc.b	smpsNoAttack, $01
0008BF1A E10E                       	smpsAlterNote       $0E
0008BF1C E701                       	dc.b	smpsNoAttack, $01
0008BF1E E10F                       	smpsAlterNote       $0F
0008BF20 E701                       	dc.b	smpsNoAttack, $01
0008BF22 E10B                       	smpsAlterNote       $0B
0008BF24 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008BF28 E108                       	smpsAlterNote       $08
0008BF2A E701                       	dc.b	smpsNoAttack, $01
0008BF2C E105                       	smpsAlterNote       $05
0008BF2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF32 E10B                       	smpsAlterNote       $0B
0008BF34 E701                       	dc.b	smpsNoAttack, $01
0008BF36 E10F                       	smpsAlterNote       $0F
0008BF38 E701                       	dc.b	smpsNoAttack, $01
0008BF3A E10E                       	smpsAlterNote       $0E
0008BF3C E701                       	dc.b	smpsNoAttack, $01
0008BF3E E108                       	smpsAlterNote       $08
0008BF40 E701                       	dc.b	smpsNoAttack, $01
0008BF42 E104                       	smpsAlterNote       $04
0008BF44 E701                       	dc.b	smpsNoAttack, $01
0008BF46 E108                       	smpsAlterNote       $08
0008BF48 E701                       	dc.b	smpsNoAttack, $01
0008BF4A E10B                       	smpsAlterNote       $0B
0008BF4C E701                       	dc.b	smpsNoAttack, $01
0008BF4E E10F                       	smpsAlterNote       $0F
0008BF50 E701                       	dc.b	smpsNoAttack, $01
0008BF52 E10B                       	smpsAlterNote       $0B
0008BF54 B30D                       	dc.b	nD4, $0D
0008BF56 E108                       	smpsAlterNote       $08
0008BF58 E701                       	dc.b	smpsNoAttack, $01
0008BF5A E105                       	smpsAlterNote       $05
0008BF5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF60 E10B                       	smpsAlterNote       $0B
0008BF62 E701                       	dc.b	smpsNoAttack, $01
0008BF64 E10F                       	smpsAlterNote       $0F
0008BF66 E701                       	dc.b	smpsNoAttack, $01
0008BF68 E10E                       	smpsAlterNote       $0E
0008BF6A E701                       	dc.b	smpsNoAttack, $01
0008BF6C E108                       	smpsAlterNote       $08
0008BF6E E701                       	dc.b	smpsNoAttack, $01
0008BF70 E104                       	smpsAlterNote       $04
0008BF72 E701                       	dc.b	smpsNoAttack, $01
0008BF74 E108                       	smpsAlterNote       $08
0008BF76 E701                       	dc.b	smpsNoAttack, $01
0008BF78 E10B                       	smpsAlterNote       $0B
0008BF7A E701                       	dc.b	smpsNoAttack, $01
0008BF7C E10F                       	smpsAlterNote       $0F
0008BF7E E701                       	dc.b	smpsNoAttack, $01
0008BF80 E10B                       	smpsAlterNote       $0B
0008BF82 E701                       	dc.b	smpsNoAttack, $01
0008BF84 E105                       	smpsAlterNote       $05
0008BF86 E701                       	dc.b	smpsNoAttack, $01
0008BF88 E104                       	smpsAlterNote       $04
0008BF8A E701                       	dc.b	smpsNoAttack, $01
0008BF8C E108                       	smpsAlterNote       $08
0008BF8E E701                       	dc.b	smpsNoAttack, $01
0008BF90 E10E                       	smpsAlterNote       $0E
0008BF92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BF96 E10B                       	smpsAlterNote       $0B
0008BF98 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008BF9C E108                       	smpsAlterNote       $08
0008BF9E E701                       	dc.b	smpsNoAttack, $01
0008BFA0 E104                       	smpsAlterNote       $04
0008BFA2 E701                       	dc.b	smpsNoAttack, $01
0008BFA4 E108                       	smpsAlterNote       $08
0008BFA6 E701                       	dc.b	smpsNoAttack, $01
0008BFA8 E10B                       	smpsAlterNote       $0B
0008BFAA E701                       	dc.b	smpsNoAttack, $01
0008BFAE E0C0                       	smpsPan             panCenter, $00
0008BFB0 E601                       	smpsAlterVol        $01
0008BFB2 E108                       	smpsAlterNote       $08
0008BFB4 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008BFC0 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008BFC8 E080                       	smpsPan             panLeft, $00
0008BFCA 07                         	dc.b	$07
0008BFCB E6FF                       	smpsAlterVol        $FF
0008BFCD E10D                       	smpsAlterNote       $0D
0008BFCF B60D                       	dc.b	nF4, $0D
0008BFD1 E10A                       	smpsAlterNote       $0A
0008BFD3 E701                       	dc.b	smpsNoAttack, $01
0008BFD5 E106                       	smpsAlterNote       $06
0008BFD7 E701                       	dc.b	smpsNoAttack, $01
0008BFD9 E10A                       	smpsAlterNote       $0A
0008BFDB E701                       	dc.b	smpsNoAttack, $01
0008BFDD E110                       	smpsAlterNote       $10
0008BFDF E701                       	dc.b	smpsNoAttack, $01
0008BFE1 E111                       	smpsAlterNote       $11
0008BFE3 E701                       	dc.b	smpsNoAttack, $01
0008BFE5 E10D                       	smpsAlterNote       $0D
0008BFE7 E701                       	dc.b	smpsNoAttack, $01
0008BFE9 E107                       	smpsAlterNote       $07
0008BFEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008BFEF E10A                       	smpsAlterNote       $0A
0008BFF1 E701                       	dc.b	smpsNoAttack, $01
0008BFF3 E110                       	smpsAlterNote       $10
0008BFF5 E701                       	dc.b	smpsNoAttack, $01
0008BFF7 E111                       	smpsAlterNote       $11
0008BFF9 8001                       	dc.b	nRst, $01
0008BFFB E10D                       	smpsAlterNote       $0D
0008BFFD B80D                       	dc.b	nG4, $0D
0008BFFF E10A                       	smpsAlterNote       $0A
0008C001 E701                       	dc.b	smpsNoAttack, $01
0008C003 E106                       	smpsAlterNote       $06
0008C005 E701                       	dc.b	smpsNoAttack, $01
0008C007 E10A                       	smpsAlterNote       $0A
0008C009 E701                       	dc.b	smpsNoAttack, $01
0008C00B E110                       	smpsAlterNote       $10
0008C00D E701                       	dc.b	smpsNoAttack, $01
0008C00F E111                       	smpsAlterNote       $11
0008C011 E701                       	dc.b	smpsNoAttack, $01
0008C013 E10D                       	smpsAlterNote       $0D
0008C015 E701                       	dc.b	smpsNoAttack, $01
0008C017 E107                       	smpsAlterNote       $07
0008C019 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C01D E10D                       	smpsAlterNote       $0D
0008C01F E701                       	dc.b	smpsNoAttack, $01
0008C021 E110                       	smpsAlterNote       $10
0008C023 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C027 E10A                       	smpsAlterNote       $0A
0008C029 E701                       	dc.b	smpsNoAttack, $01
0008C02B E106                       	smpsAlterNote       $06
0008C02D E701                       	dc.b	smpsNoAttack, $01
0008C02F E107                       	smpsAlterNote       $07
0008C031 E701                       	dc.b	smpsNoAttack, $01
0008C033 E10D                       	smpsAlterNote       $0D
0008C035 E701                       	dc.b	smpsNoAttack, $01
0008C037 E111                       	smpsAlterNote       $11
0008C039 E701                       	dc.b	smpsNoAttack, $01
0008C03B E10D                       	smpsAlterNote       $0D
0008C03D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C041 E10F                       	smpsAlterNote       $0F
0008C043 BA0D                       	dc.b	nA4, $0D
0008C045 E109                       	smpsAlterNote       $09
0008C047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C04B E10C                       	smpsAlterNote       $0C
0008C04D E701                       	dc.b	smpsNoAttack, $01
0008C04F E112                       	smpsAlterNote       $12
0008C051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C055 E10C                       	smpsAlterNote       $0C
0008C057 E701                       	dc.b	smpsNoAttack, $01
0008C059 E109                       	smpsAlterNote       $09
0008C05B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C05F E10F                       	smpsAlterNote       $0F
0008C061 E701                       	dc.b	smpsNoAttack, $01
0008C063 E113                       	smpsAlterNote       $13
0008C065 E701                       	dc.b	smpsNoAttack, $01
0008C067 E112                       	smpsAlterNote       $12
0008C069 E701                       	dc.b	smpsNoAttack, $01
0008C06B E10C                       	smpsAlterNote       $0C
0008C06D E701                       	dc.b	smpsNoAttack, $01
0008C06F E108                       	smpsAlterNote       $08
0008C071 E701                       	dc.b	smpsNoAttack, $01
0008C073 E10C                       	smpsAlterNote       $0C
0008C075 E701                       	dc.b	smpsNoAttack, $01
0008C077 E10F                       	smpsAlterNote       $0F
0008C079 E701                       	dc.b	smpsNoAttack, $01
0008C07B E113                       	smpsAlterNote       $13
0008C07D E701                       	dc.b	smpsNoAttack, $01
0008C07F E10F                       	smpsAlterNote       $0F
0008C081 E701                       	dc.b	smpsNoAttack, $01
0008C083 E109                       	smpsAlterNote       $09
0008C085 E701                       	dc.b	smpsNoAttack, $01
0008C087 E108                       	smpsAlterNote       $08
0008C089 E701                       	dc.b	smpsNoAttack, $01
0008C08B E10C                       	smpsAlterNote       $0C
0008C08D E701                       	dc.b	smpsNoAttack, $01
0008C08F E112                       	smpsAlterNote       $12
0008C091 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C095 E10F                       	smpsAlterNote       $0F
0008C097 E701                       	dc.b	smpsNoAttack, $01
0008C099 E109                       	smpsAlterNote       $09
0008C09B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C09F E10F                       	smpsAlterNote       $0F
0008C0A1 E701                       	dc.b	smpsNoAttack, $01
0008C0A3 E112                       	smpsAlterNote       $12
0008C0A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0A9 E10C                       	smpsAlterNote       $0C
0008C0AB E701                       	dc.b	smpsNoAttack, $01
0008C0AD E108                       	smpsAlterNote       $08
0008C0AF E701                       	dc.b	smpsNoAttack, $01
0008C0B1 E109                       	smpsAlterNote       $09
0008C0B3 E701                       	dc.b	smpsNoAttack, $01
0008C0B5 E10C                       	smpsAlterNote       $0C
0008C0B7 B50A                       	dc.b	nE4, $0A
0008C0B9 E10D                       	smpsAlterNote       $0D
0008C0BB B60E                       	dc.b	nF4, $0E
0008C0BD E107                       	smpsAlterNote       $07
0008C0BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0C3 E10D                       	smpsAlterNote       $0D
0008C0C5 E701                       	dc.b	smpsNoAttack, $01
0008C0C7 E110                       	smpsAlterNote       $10
0008C0C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0CD E10A                       	smpsAlterNote       $0A
0008C0CF E701                       	dc.b	smpsNoAttack, $01
0008C0D1 E106                       	smpsAlterNote       $06
0008C0D3 E701                       	dc.b	smpsNoAttack, $01
0008C0D5 E107                       	smpsAlterNote       $07
0008C0D7 E701                       	dc.b	smpsNoAttack, $01
0008C0D9 E10D                       	smpsAlterNote       $0D
0008C0DB E701                       	dc.b	smpsNoAttack, $01
0008C0DD E111                       	smpsAlterNote       $11
0008C0DF E701                       	dc.b	smpsNoAttack, $01
0008C0E1 E10D                       	smpsAlterNote       $0D
0008C0E3 B80D                       	dc.b	nG4, $0D
0008C0E5 E10A                       	smpsAlterNote       $0A
0008C0E7 E701                       	dc.b	smpsNoAttack, $01
0008C0E9 E107                       	smpsAlterNote       $07
0008C0EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C0EF E10D                       	smpsAlterNote       $0D
0008C0F1 E701                       	dc.b	smpsNoAttack, $01
0008C0F3 E111                       	smpsAlterNote       $11
0008C0F5 E701                       	dc.b	smpsNoAttack, $01
0008C0F7 E110                       	smpsAlterNote       $10
0008C0F9 E701                       	dc.b	smpsNoAttack, $01
0008C0FB E10A                       	smpsAlterNote       $0A
0008C0FD E701                       	dc.b	smpsNoAttack, $01
0008C0FF E106                       	smpsAlterNote       $06
0008C101 E701                       	dc.b	smpsNoAttack, $01
0008C103 E10A                       	smpsAlterNote       $0A
0008C105 E701                       	dc.b	smpsNoAttack, $01
0008C107 E10D                       	smpsAlterNote       $0D
0008C109 E701                       	dc.b	smpsNoAttack, $01
0008C10B E111                       	smpsAlterNote       $11
0008C10D E701                       	dc.b	smpsNoAttack, $01
0008C10F E10D                       	smpsAlterNote       $0D
0008C111 E701                       	dc.b	smpsNoAttack, $01
0008C113 E107                       	smpsAlterNote       $07
0008C115 E701                       	dc.b	smpsNoAttack, $01
0008C117 E106                       	smpsAlterNote       $06
0008C119 E701                       	dc.b	smpsNoAttack, $01
0008C11B E10A                       	smpsAlterNote       $0A
0008C11D E701                       	dc.b	smpsNoAttack, $01
0008C11F E110                       	smpsAlterNote       $10
0008C121 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C125 E10D                       	smpsAlterNote       $0D
0008C127 E701                       	dc.b	smpsNoAttack, $01
0008C129 E10F                       	smpsAlterNote       $0F
0008C12B BA0D                       	dc.b	nA4, $0D
0008C12D E10C                       	smpsAlterNote       $0C
0008C12F E701                       	dc.b	smpsNoAttack, $01
0008C131 E108                       	smpsAlterNote       $08
0008C133 E701                       	dc.b	smpsNoAttack, $01
0008C135 E109                       	smpsAlterNote       $09
0008C137 E701                       	dc.b	smpsNoAttack, $01
0008C139 E10F                       	smpsAlterNote       $0F
0008C13B E701                       	dc.b	smpsNoAttack, $01
0008C13D E113                       	smpsAlterNote       $13
0008C13F E701                       	dc.b	smpsNoAttack, $01
0008C141 E10F                       	smpsAlterNote       $0F
0008C143 E701                       	dc.b	smpsNoAttack, $01
0008C145 E10C                       	smpsAlterNote       $0C
0008C147 E701                       	dc.b	smpsNoAttack, $01
0008C149 E108                       	smpsAlterNote       $08
0008C14B E701                       	dc.b	smpsNoAttack, $01
0008C14D E10C                       	smpsAlterNote       $0C
0008C14F E701                       	dc.b	smpsNoAttack, $01
0008C151 E112                       	smpsAlterNote       $12
0008C153 E701                       	dc.b	smpsNoAttack, $01
0008C155 E113                       	smpsAlterNote       $13
0008C157 E701                       	dc.b	smpsNoAttack, $01
0008C159 E10F                       	smpsAlterNote       $0F
0008C15B E701                       	dc.b	smpsNoAttack, $01
0008C15D E109                       	smpsAlterNote       $09
0008C15F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C163 E10C                       	smpsAlterNote       $0C
0008C165 E701                       	dc.b	smpsNoAttack, $01
0008C167 E112                       	smpsAlterNote       $12
0008C169 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C16D E10C                       	smpsAlterNote       $0C
0008C16F E701                       	dc.b	smpsNoAttack, $01
0008C171 E109                       	smpsAlterNote       $09
0008C173 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C177 E10F                       	smpsAlterNote       $0F
0008C179 E701                       	dc.b	smpsNoAttack, $01
0008C17B E113                       	smpsAlterNote       $13
0008C17D E701                       	dc.b	smpsNoAttack, $01
0008C17F E112                       	smpsAlterNote       $12
0008C181 E701                       	dc.b	smpsNoAttack, $01
0008C183 E10C                       	smpsAlterNote       $0C
0008C185 E701                       	dc.b	smpsNoAttack, $01
0008C187 E109                       	smpsAlterNote       $09
0008C189 8001                       	dc.b	nRst, $01
0008C18B E10D                       	smpsAlterNote       $0D
0008C18D B60A                       	dc.b	nF4, $0A
0008C18F E10C                       	smpsAlterNote       $0C
0008C191 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008C195 E10B                       	smpsAlterNote       $0B
0008C197 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008C19B E10C                       	smpsAlterNote       $0C
0008C19D B503                       	dc.b	nE4, $03
0008C19F E10D                       	smpsAlterNote       $0D
0008C1A1 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008C1AB E10C                       	smpsAlterNote       $0C
0008C1AD E701                       	dc.b	smpsNoAttack, $01
0008C1AF E108                       	smpsAlterNote       $08
0008C1B1 E701                       	dc.b	smpsNoAttack, $01
0008C1B3 E10C                       	smpsAlterNote       $0C
0008C1B5 E701                       	dc.b	smpsNoAttack, $01
0008C1B7 E112                       	smpsAlterNote       $12
0008C1B9 E701                       	dc.b	smpsNoAttack, $01
0008C1BB E113                       	smpsAlterNote       $13
0008C1BD E701                       	dc.b	smpsNoAttack, $01
0008C1BF E10F                       	smpsAlterNote       $0F
0008C1C1 E701                       	dc.b	smpsNoAttack, $01
0008C1C3 E109                       	smpsAlterNote       $09
0008C1C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1C9 E10C                       	smpsAlterNote       $0C
0008C1CB E701                       	dc.b	smpsNoAttack, $01
0008C1CD E112                       	smpsAlterNote       $12
0008C1CF E701                       	dc.b	smpsNoAttack, $01
0008C1D1 E113                       	smpsAlterNote       $13
0008C1D3 8001                       	dc.b	nRst, $01
0008C1D5 E10D                       	smpsAlterNote       $0D
0008C1D7 C20D                       	dc.b	nF5, $0D
0008C1D9 E10A                       	smpsAlterNote       $0A
0008C1DB E701                       	dc.b	smpsNoAttack, $01
0008C1DD E106                       	smpsAlterNote       $06
0008C1DF E701                       	dc.b	smpsNoAttack, $01
0008C1E1 E10A                       	smpsAlterNote       $0A
0008C1E3 E701                       	dc.b	smpsNoAttack, $01
0008C1E5 E110                       	smpsAlterNote       $10
0008C1E7 E701                       	dc.b	smpsNoAttack, $01
0008C1E9 E111                       	smpsAlterNote       $11
0008C1EB E701                       	dc.b	smpsNoAttack, $01
0008C1ED E10D                       	smpsAlterNote       $0D
0008C1EF E701                       	dc.b	smpsNoAttack, $01
0008C1F1 E107                       	smpsAlterNote       $07
0008C1F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C1F7 E10A                       	smpsAlterNote       $0A
0008C1F9 E701                       	dc.b	smpsNoAttack, $01
0008C1FB E110                       	smpsAlterNote       $10
0008C1FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C201 E10A                       	smpsAlterNote       $0A
0008C203 E701                       	dc.b	smpsNoAttack, $01
0008C205 E107                       	smpsAlterNote       $07
0008C207 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C20B E10D                       	smpsAlterNote       $0D
0008C20D E701                       	dc.b	smpsNoAttack, $01
0008C20F E111                       	smpsAlterNote       $11
0008C211 E701                       	dc.b	smpsNoAttack, $01
0008C213 E110                       	smpsAlterNote       $10
0008C215 E701                       	dc.b	smpsNoAttack, $01
0008C217 E10A                       	smpsAlterNote       $0A
0008C219 E701                       	dc.b	smpsNoAttack, $01
0008C21B E106                       	smpsAlterNote       $06
0008C21D E701                       	dc.b	smpsNoAttack, $01
0008C21F E10A                       	smpsAlterNote       $0A
0008C221 E701                       	dc.b	smpsNoAttack, $01
0008C223 E10D                       	smpsAlterNote       $0D
0008C225 E701                       	dc.b	smpsNoAttack, $01
0008C227 E111                       	smpsAlterNote       $11
0008C229 E701                       	dc.b	smpsNoAttack, $01
0008C22B E10D                       	smpsAlterNote       $0D
0008C22D E701                       	dc.b	smpsNoAttack, $01
0008C22F E107                       	smpsAlterNote       $07
0008C231 E701                       	dc.b	smpsNoAttack, $01
0008C233 E106                       	smpsAlterNote       $06
0008C235 E701                       	dc.b	smpsNoAttack, $01
0008C237 E10A                       	smpsAlterNote       $0A
0008C239 E701                       	dc.b	smpsNoAttack, $01
0008C23B E110                       	smpsAlterNote       $10
0008C23D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C241 E10D                       	smpsAlterNote       $0D
0008C243 E701                       	dc.b	smpsNoAttack, $01
0008C245 E107                       	smpsAlterNote       $07
0008C247 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C24B E10D                       	smpsAlterNote       $0D
0008C24D E701                       	dc.b	smpsNoAttack, $01
0008C24F E110                       	smpsAlterNote       $10
0008C251 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C255 E10A                       	smpsAlterNote       $0A
0008C257 E701                       	dc.b	smpsNoAttack, $01
0008C259 E106                       	smpsAlterNote       $06
0008C25B E701                       	dc.b	smpsNoAttack, $01
0008C25D E107                       	smpsAlterNote       $07
0008C25F E701                       	dc.b	smpsNoAttack, $01
0008C261 E10D                       	smpsAlterNote       $0D
0008C263 E701                       	dc.b	smpsNoAttack, $01
0008C265 E111                       	smpsAlterNote       $11
0008C267 E701                       	dc.b	smpsNoAttack, $01
0008C269 E10D                       	smpsAlterNote       $0D
0008C26B E701                       	dc.b	smpsNoAttack, $01
0008C26D E10A                       	smpsAlterNote       $0A
0008C26F E701                       	dc.b	smpsNoAttack, $01
0008C271 E107                       	smpsAlterNote       $07
0008C273 8001                       	dc.b	nRst, $01
0008C275 E10D                       	smpsAlterNote       $0D
0008C277 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008C27D E601                       	smpsAlterVol        $01
0008C27F E110                       	smpsAlterNote       $10
0008C281 BB0D                       	dc.b	nBb4, $0D
0008C283 E10A                       	smpsAlterNote       $0A
0008C285 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C289 E110                       	smpsAlterNote       $10
0008C28B E701                       	dc.b	smpsNoAttack, $01
0008C28D E113                       	smpsAlterNote       $13
0008C28F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C293 E10D                       	smpsAlterNote       $0D
0008C295 E701                       	dc.b	smpsNoAttack, $01
0008C297 E109                       	smpsAlterNote       $09
0008C299 E701                       	dc.b	smpsNoAttack, $01
0008C29B E10A                       	smpsAlterNote       $0A
0008C29D E701                       	dc.b	smpsNoAttack, $01
0008C29F E110                       	smpsAlterNote       $10
0008C2A1 E701                       	dc.b	smpsNoAttack, $01
0008C2A3 E114                       	smpsAlterNote       $14
0008C2A5 E701                       	dc.b	smpsNoAttack, $01
0008C2A7 E110                       	smpsAlterNote       $10
0008C2A9 E701                       	dc.b	smpsNoAttack, $01
0008C2AB E10D                       	smpsAlterNote       $0D
0008C2AD E701                       	dc.b	smpsNoAttack, $01
0008C2AF E109                       	smpsAlterNote       $09
0008C2B1 E701                       	dc.b	smpsNoAttack, $01
0008C2B3 E10A                       	smpsAlterNote       $0A
0008C2B5 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008C2B9 E107                       	smpsAlterNote       $07
0008C2BB E701                       	dc.b	smpsNoAttack, $01
0008C2BD E103                       	smpsAlterNote       $03
0008C2BF E701                       	dc.b	smpsNoAttack, $01
0008C2C1 E107                       	smpsAlterNote       $07
0008C2C3 E701                       	dc.b	smpsNoAttack, $01
0008C2C5 E10D                       	smpsAlterNote       $0D
0008C2C7 E701                       	dc.b	smpsNoAttack, $01
0008C2C9 E10E                       	smpsAlterNote       $0E
0008C2CB E701                       	dc.b	smpsNoAttack, $01
0008C2CD E10A                       	smpsAlterNote       $0A
0008C2CF E701                       	dc.b	smpsNoAttack, $01
0008C2D1 E104                       	smpsAlterNote       $04
0008C2D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2D7 E107                       	smpsAlterNote       $07
0008C2D9 E701                       	dc.b	smpsNoAttack, $01
0008C2DB E10D                       	smpsAlterNote       $0D
0008C2DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2E1 E107                       	smpsAlterNote       $07
0008C2E3 E701                       	dc.b	smpsNoAttack, $01
0008C2E5 E104                       	smpsAlterNote       $04
0008C2E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2EB E10B                       	smpsAlterNote       $0B
0008C2ED BF0D                       	dc.b	nD5, $0D
0008C2EF E108                       	smpsAlterNote       $08
0008C2F1 E701                       	dc.b	smpsNoAttack, $01
0008C2F3 E105                       	smpsAlterNote       $05
0008C2F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C2F9 E10B                       	smpsAlterNote       $0B
0008C2FB E701                       	dc.b	smpsNoAttack, $01
0008C2FD E10F                       	smpsAlterNote       $0F
0008C2FF E701                       	dc.b	smpsNoAttack, $01
0008C301 E10E                       	smpsAlterNote       $0E
0008C303 E701                       	dc.b	smpsNoAttack, $01
0008C305 E108                       	smpsAlterNote       $08
0008C307 E701                       	dc.b	smpsNoAttack, $01
0008C309 E104                       	smpsAlterNote       $04
0008C30B E701                       	dc.b	smpsNoAttack, $01
0008C30D E108                       	smpsAlterNote       $08
0008C30F E701                       	dc.b	smpsNoAttack, $01
0008C311 E10B                       	smpsAlterNote       $0B
0008C313 E701                       	dc.b	smpsNoAttack, $01
0008C315 E10F                       	smpsAlterNote       $0F
0008C317 E701                       	dc.b	smpsNoAttack, $01
0008C319 E10B                       	smpsAlterNote       $0B
0008C31B E701                       	dc.b	smpsNoAttack, $01
0008C31D E105                       	smpsAlterNote       $05
0008C31F E701                       	dc.b	smpsNoAttack, $01
0008C321 E104                       	smpsAlterNote       $04
0008C323 E701                       	dc.b	smpsNoAttack, $01
0008C325 E105                       	smpsAlterNote       $05
0008C327 8001                       	dc.b	nRst, $01
0008C329 E10C                       	smpsAlterNote       $0C
0008C32B C10C                       	dc.b	nE5, $0C
0008C32D E10D                       	smpsAlterNote       $0D
0008C32F C201                       	dc.b	nF5, $01
0008C331 E10E                       	smpsAlterNote       $0E
0008C333 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0008C337 E10D                       	smpsAlterNote       $0D
0008C339 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008C33D E10A                       	smpsAlterNote       $0A
0008C33F E701                       	dc.b	smpsNoAttack, $01
0008C341 E106                       	smpsAlterNote       $06
0008C343 E701                       	dc.b	smpsNoAttack, $01
0008C345 E10A                       	smpsAlterNote       $0A
0008C347 E701                       	dc.b	smpsNoAttack, $01
0008C349 E10D                       	smpsAlterNote       $0D
0008C34B E701                       	dc.b	smpsNoAttack, $01
0008C34D E111                       	smpsAlterNote       $11
0008C34F E701                       	dc.b	smpsNoAttack, $01
0008C351 E10D                       	smpsAlterNote       $0D
0008C353 E701                       	dc.b	smpsNoAttack, $01
0008C355 E107                       	smpsAlterNote       $07
0008C357 E701                       	dc.b	smpsNoAttack, $01
0008C359 E106                       	smpsAlterNote       $06
0008C35B E701                       	dc.b	smpsNoAttack, $01
0008C35D E10A                       	smpsAlterNote       $0A
0008C35F E701                       	dc.b	smpsNoAttack, $01
0008C361 E110                       	smpsAlterNote       $10
0008C363 E701                       	dc.b	smpsNoAttack, $01
0008C365 E111                       	smpsAlterNote       $11
0008C367 8001                       	dc.b	nRst, $01
0008C369 E10D                       	smpsAlterNote       $0D
0008C36B C40D                       	dc.b	nG5, $0D
0008C36D E10A                       	smpsAlterNote       $0A
0008C36F E701                       	dc.b	smpsNoAttack, $01
0008C371 E106                       	smpsAlterNote       $06
0008C373 E701                       	dc.b	smpsNoAttack, $01
0008C375 E10A                       	smpsAlterNote       $0A
0008C377 E701                       	dc.b	smpsNoAttack, $01
0008C379 E10D                       	smpsAlterNote       $0D
0008C37B E701                       	dc.b	smpsNoAttack, $01
0008C37D E10C                       	smpsAlterNote       $0C
0008C37F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0008C38B 8001                       	dc.b	nRst, $01
0008C38D E10D                       	smpsAlterNote       $0D
0008C38F C20D                       	dc.b	nF5, $0D
0008C391 E10A                       	smpsAlterNote       $0A
0008C393 E701                       	dc.b	smpsNoAttack, $01
0008C395 E106                       	smpsAlterNote       $06
0008C397 E701                       	dc.b	smpsNoAttack, $01
0008C399 E10A                       	smpsAlterNote       $0A
0008C39B E701                       	dc.b	smpsNoAttack, $01
0008C39D E110                       	smpsAlterNote       $10
0008C39F E701                       	dc.b	smpsNoAttack, $01
0008C3A1 E111                       	smpsAlterNote       $11
0008C3A3 E701                       	dc.b	smpsNoAttack, $01
0008C3A5 E10D                       	smpsAlterNote       $0D
0008C3A7 E701                       	dc.b	smpsNoAttack, $01
0008C3A9 E107                       	smpsAlterNote       $07
0008C3AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3AF E10A                       	smpsAlterNote       $0A
0008C3B1 E701                       	dc.b	smpsNoAttack, $01
0008C3B3 E110                       	smpsAlterNote       $10
0008C3B5 E701                       	dc.b	smpsNoAttack, $01
0008C3B7 E111                       	smpsAlterNote       $11
0008C3B9 8001                       	dc.b	nRst, $01
0008C3BB E10F                       	smpsAlterNote       $0F
0008C3BD C60A                       	dc.b	nA5, $0A
0008C3BF E10D                       	smpsAlterNote       $0D
0008C3C1 C406 8001                  	dc.b	nG5, $06, nRst, $01
0008C3C5 E10C                       	smpsAlterNote       $0C
0008C3C7 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C3D3 8001                       	dc.b	nRst, $01
0008C3D5 E10D                       	smpsAlterNote       $0D
0008C3D7 C20D                       	dc.b	nF5, $0D
0008C3D9 E107                       	smpsAlterNote       $07
0008C3DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3DF E10A                       	smpsAlterNote       $0A
0008C3E1 E701                       	dc.b	smpsNoAttack, $01
0008C3E3 E110                       	smpsAlterNote       $10
0008C3E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3E9 E10A                       	smpsAlterNote       $0A
0008C3EB E701                       	dc.b	smpsNoAttack, $01
0008C3ED E107                       	smpsAlterNote       $07
0008C3EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C3F3 E10D                       	smpsAlterNote       $0D
0008C3F5 E701                       	dc.b	smpsNoAttack, $01
0008C3F7 E111                       	smpsAlterNote       $11
0008C3F9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C3FD E10D                       	smpsAlterNote       $0D
0008C3FF C40D                       	dc.b	nG5, $0D
0008C401 E107                       	smpsAlterNote       $07
0008C403 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C407 E10A                       	smpsAlterNote       $0A
0008C409 E701                       	dc.b	smpsNoAttack, $01
0008C40B E10D                       	smpsAlterNote       $0D
0008C40D 8001                       	dc.b	nRst, $01
0008C40F E10C                       	smpsAlterNote       $0C
0008C411 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008C41D E10D                       	smpsAlterNote       $0D
0008C41F C20E                       	dc.b	nF5, $0E
0008C421 E107                       	smpsAlterNote       $07
0008C423 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C427 E10D                       	smpsAlterNote       $0D
0008C429 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C42F E0C0                       	smpsPan             panCenter, $00
0008C431 E603                       	smpsAlterVol        $03
0008C433 E108                       	smpsAlterNote       $08
0008C435 B406                       	dc.b	nEb4, $06
0008C437 E10C                       	smpsAlterNote       $0C
0008C439 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008C43D E108                       	smpsAlterNote       $08
0008C43F B403                       	dc.b	nEb4, $03
0008C441 E109                       	smpsAlterNote       $09
0008C443 B803 8001                  	dc.b	nG4, $03, nRst, $01
0008C447 E10C                       	smpsAlterNote       $0C
0008C449 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0008C451 03                         	dc.b	$03
0008C452 E6FD                       	smpsAlterVol        $FD
0008C454 F6F1 F4                    	smpsJump            music84_Jump00
0008C457                            
0008C457                            ; PSG1 Data
0008C457                            music84_PSG1:
0008C457 E1FD                       	smpsAlterNote       $FD
0008C459 EC04                       	smpsPSGAlterVol     $04
0008C45B 9203                       	dc.b	nF1, $03
0008C45D E1FE                       	smpsAlterNote       $FE
0008C45F 9603                       	dc.b	nA1, $03
0008C461 EC04                       	smpsPSGAlterVol     $04
0008C463 E701                       	dc.b	smpsNoAttack, $01
0008C465 E1FF                       	smpsAlterNote       $FF
0008C467 ECFC                       	smpsPSGAlterVol     $FC
0008C469 9B03                       	dc.b	nD2, $03
0008C46B E1FD                       	smpsAlterNote       $FD
0008C46D 9403                       	dc.b	nG1, $03
0008C46F EC04                       	smpsPSGAlterVol     $04
0008C471 E701                       	dc.b	smpsNoAttack, $01
0008C473 E1FE                       	smpsAlterNote       $FE
0008C475 ECFC                       	smpsPSGAlterVol     $FC
0008C477 9703                       	dc.b	nBb1, $03
0008C479 E1FF                       	smpsAlterNote       $FF
0008C47B 9B03                       	dc.b	nD2, $03
0008C47D EC04                       	smpsPSGAlterVol     $04
0008C47F E701                       	dc.b	smpsNoAttack, $01
0008C481 E1FE                       	smpsAlterNote       $FE
0008C483 ECFC                       	smpsPSGAlterVol     $FC
0008C485 A002                       	dc.b	nG2, $02
0008C487 EC04                       	smpsPSGAlterVol     $04
0008C489 E701                       	dc.b	smpsNoAttack, $01
0008C48B E1FF                       	smpsAlterNote       $FF
0008C48D ECFC                       	smpsPSGAlterVol     $FC
0008C48F A203                       	dc.b	nA2, $03
0008C491 EC0B                       	smpsPSGAlterVol     $0B
0008C493 800A                       	dc.b	nRst, $0A
0008C495 E105                       	smpsAlterNote       $05
0008C497 01                         	dc.b	$01
0008C498 E1FC                       	smpsAlterNote       $FC
0008C49A 01                         	dc.b	$01
0008C49B E105                       	smpsAlterNote       $05
0008C49D 01                         	dc.b	$01
0008C49E E1FD                       	smpsAlterNote       $FD
0008C4A0 01                         	dc.b	$01
0008C4A1 E105                       	smpsAlterNote       $05
0008C4A3 01                         	dc.b	$01
0008C4A4 E1FD                       	smpsAlterNote       $FD
0008C4A6 01                         	dc.b	$01
0008C4A7 E1FA                       	smpsAlterNote       $FA
0008C4A9 01                         	dc.b	$01
0008C4AA E1FC                       	smpsAlterNote       $FC
0008C4AC 01                         	dc.b	$01
0008C4AD E105                       	smpsAlterNote       $05
0008C4AF 01                         	dc.b	$01
0008C4B0 E108                       	smpsAlterNote       $08
0008C4B2 0101                       	dc.b	$01, $01
0008C4B4 E105                       	smpsAlterNote       $05
0008C4B6 01                         	dc.b	$01
0008C4B7 E1FA                       	smpsAlterNote       $FA
0008C4B9 0101                       	dc.b	$01, $01
0008C4BB E1FD                       	smpsAlterNote       $FD
0008C4BD 01                         	dc.b	$01
0008C4BE E105                       	smpsAlterNote       $05
0008C4C0 01                         	dc.b	$01
0008C4C1 E108                       	smpsAlterNote       $08
0008C4C3 01                         	dc.b	$01
0008C4C4 E105                       	smpsAlterNote       $05
0008C4C6 01                         	dc.b	$01
0008C4C7 E1FC                       	smpsAlterNote       $FC
0008C4C9 01                         	dc.b	$01
0008C4CA E105                       	smpsAlterNote       $05
0008C4CC 01                         	dc.b	$01
0008C4CD E1FD                       	smpsAlterNote       $FD
0008C4CF 01                         	dc.b	$01
0008C4D0                            
0008C4D0                            music84_Jump07:
0008C4D0 E105                       	smpsAlterNote       $05
0008C4D2 8001                       	dc.b	nRst, $01
0008C4D4 E1FD                       	smpsAlterNote       $FD
0008C4D6 01                         	dc.b	$01
0008C4D7 E1FA                       	smpsAlterNote       $FA
0008C4D9 01                         	dc.b	$01
0008C4DA E1FC                       	smpsAlterNote       $FC
0008C4DC 01                         	dc.b	$01
0008C4DD E1FD                       	smpsAlterNote       $FD
0008C4DF ECF5                       	smpsPSGAlterVol     $F5
0008C4E1 9206                       	dc.b	nF1, $06
0008C4E3 EC04                       	smpsPSGAlterVol     $04
0008C4E5 E701                       	dc.b	smpsNoAttack, $01
0008C4E7 EC07                       	smpsPSGAlterVol     $07
0008C4E9 8003                       	dc.b	nRst, $03
0008C4EB ECF5                       	smpsPSGAlterVol     $F5
0008C4ED 9206                       	dc.b	nF1, $06
0008C4EF EC04                       	smpsPSGAlterVol     $04
0008C4F1 E701                       	dc.b	smpsNoAttack, $01
0008C4F3 EC07                       	smpsPSGAlterVol     $07
0008C4F5 8006                       	dc.b	nRst, $06
0008C4F7 E100                       	smpsAlterNote       $00
0008C4F9 01                         	dc.b	$01
0008C4FA E104                       	smpsAlterNote       $04
0008C4FC 01                         	dc.b	$01
0008C4FD E100                       	smpsAlterNote       $00
0008C4FF 01                         	dc.b	$01
0008C500 E1FB                       	smpsAlterNote       $FB
0008C502 01                         	dc.b	$01
0008C503 E1FD                       	smpsAlterNote       $FD
0008C505 ECF5                       	smpsPSGAlterVol     $F5
0008C507 9406                       	dc.b	nG1, $06
0008C509 EC04                       	smpsPSGAlterVol     $04
0008C50B E701                       	dc.b	smpsNoAttack, $01
0008C50D EC07                       	smpsPSGAlterVol     $07
0008C50F 8003                       	dc.b	nRst, $03
0008C511 ECF5                       	smpsPSGAlterVol     $F5
0008C513 9407                       	dc.b	nG1, $07
0008C515 EC0B                       	smpsPSGAlterVol     $0B
0008C517 8006                       	dc.b	nRst, $06
0008C519 E100                       	smpsAlterNote       $00
0008C51B 01                         	dc.b	$01
0008C51C E103                       	smpsAlterNote       $03
0008C51E 0101                       	dc.b	$01, $01
0008C520 E1FD                       	smpsAlterNote       $FD
0008C522 01                         	dc.b	$01
0008C523 ECF5                       	smpsPSGAlterVol     $F5
0008C525 9207                       	dc.b	nF1, $07
0008C527 EC0B                       	smpsPSGAlterVol     $0B
0008C529 8004                       	dc.b	nRst, $04
0008C52B ECF5                       	smpsPSGAlterVol     $F5
0008C52D 9206                       	dc.b	nF1, $06
0008C52F EC04                       	smpsPSGAlterVol     $04
0008C531 E701                       	dc.b	smpsNoAttack, $01
0008C533 EC07                       	smpsPSGAlterVol     $07
0008C535 8006                       	dc.b	nRst, $06
0008C537 E103                       	smpsAlterNote       $03
0008C539 01                         	dc.b	$01
0008C53A E104                       	smpsAlterNote       $04
0008C53C 01                         	dc.b	$01
0008C53D E100                       	smpsAlterNote       $00
0008C53F 01                         	dc.b	$01
0008C540 E1FA                       	smpsAlterNote       $FA
0008C542 01                         	dc.b	$01
0008C543 E1FD                       	smpsAlterNote       $FD
0008C545 ECF5                       	smpsPSGAlterVol     $F5
0008C547 9206                       	dc.b	nF1, $06
0008C549 EC04                       	smpsPSGAlterVol     $04
0008C54B E701                       	dc.b	smpsNoAttack, $01
0008C54D EC07                       	smpsPSGAlterVol     $07
0008C54F 8003                       	dc.b	nRst, $03
0008C551 ECF5                       	smpsPSGAlterVol     $F5
0008C553 9106                       	dc.b	nE1, $06
0008C555 EC04                       	smpsPSGAlterVol     $04
0008C557 E701                       	dc.b	smpsNoAttack, $01
0008C559 EC07                       	smpsPSGAlterVol     $07
0008C55B 8006                       	dc.b	nRst, $06
0008C55D E100                       	smpsAlterNote       $00
0008C55F 01                         	dc.b	$01
0008C560 E104                       	smpsAlterNote       $04
0008C562 01                         	dc.b	$01
0008C563 E100                       	smpsAlterNote       $00
0008C565 01                         	dc.b	$01
0008C566 E1FD                       	smpsAlterNote       $FD
0008C568 01                         	dc.b	$01
0008C569 ECF5                       	smpsPSGAlterVol     $F5
0008C56B 9206                       	dc.b	nF1, $06
0008C56D EC04                       	smpsPSGAlterVol     $04
0008C56F E701                       	dc.b	smpsNoAttack, $01
0008C571 EC07                       	smpsPSGAlterVol     $07
0008C573 8003                       	dc.b	nRst, $03
0008C575 ECF5                       	smpsPSGAlterVol     $F5
0008C577 9207                       	dc.b	nF1, $07
0008C579 EC0B                       	smpsPSGAlterVol     $0B
0008C57B 8007                       	dc.b	nRst, $07
0008C57D E103                       	smpsAlterNote       $03
0008C57F 0101                       	dc.b	$01, $01
0008C581 E1FD                       	smpsAlterNote       $FD
0008C583 01                         	dc.b	$01
0008C584 E1FB                       	smpsAlterNote       $FB
0008C586 01                         	dc.b	$01
0008C587 E1FD                       	smpsAlterNote       $FD
0008C589 ECF5                       	smpsPSGAlterVol     $F5
0008C58B 9406                       	dc.b	nG1, $06
0008C58D EC0B                       	smpsPSGAlterVol     $0B
0008C58F 8004                       	dc.b	nRst, $04
0008C591 ECF5                       	smpsPSGAlterVol     $F5
0008C593 9406                       	dc.b	nG1, $06
0008C595 EC04                       	smpsPSGAlterVol     $04
0008C597 E701                       	dc.b	smpsNoAttack, $01
0008C599 EC07                       	smpsPSGAlterVol     $07
0008C59B 8006                       	dc.b	nRst, $06
0008C59D E100                       	smpsAlterNote       $00
0008C59F 01                         	dc.b	$01
0008C5A0 E104                       	smpsAlterNote       $04
0008C5A2 01                         	dc.b	$01
0008C5A3 E100                       	smpsAlterNote       $00
0008C5A5 01                         	dc.b	$01
0008C5A6 E1F9                       	smpsAlterNote       $F9
0008C5A8 01                         	dc.b	$01
0008C5A9 E1FD                       	smpsAlterNote       $FD
0008C5AB ECF5                       	smpsPSGAlterVol     $F5
0008C5AD 9206                       	dc.b	nF1, $06
0008C5AF EC04                       	smpsPSGAlterVol     $04
0008C5B1 E701                       	dc.b	smpsNoAttack, $01
0008C5B3 EC07                       	smpsPSGAlterVol     $07
0008C5B5 8003                       	dc.b	nRst, $03
0008C5B7 ECF5                       	smpsPSGAlterVol     $F5
0008C5B9 9207                       	dc.b	nF1, $07
0008C5BB EC0B                       	smpsPSGAlterVol     $0B
0008C5BD 8006                       	dc.b	nRst, $06
0008C5BF E100                       	smpsAlterNote       $00
0008C5C1 01                         	dc.b	$01
0008C5C2 E104                       	smpsAlterNote       $04
0008C5C4 01                         	dc.b	$01
0008C5C5 E103                       	smpsAlterNote       $03
0008C5C7 01                         	dc.b	$01
0008C5C8 E1FD                       	smpsAlterNote       $FD
0008C5CA 01                         	dc.b	$01
0008C5CB ECF5                       	smpsPSGAlterVol     $F5
0008C5CD 9207                       	dc.b	nF1, $07
0008C5CF EC0B                       	smpsPSGAlterVol     $0B
0008C5D1 8004                       	dc.b	nRst, $04
0008C5D3 ECF5                       	smpsPSGAlterVol     $F5
0008C5D5 9206                       	dc.b	nF1, $06
0008C5D7 EC0B                       	smpsPSGAlterVol     $0B
0008C5D9 8007                       	dc.b	nRst, $07
0008C5DB E103                       	smpsAlterNote       $03
0008C5DD 0101                       	dc.b	$01, $01
0008C5DF E100                       	smpsAlterNote       $00
0008C5E1 01                         	dc.b	$01
0008C5E2 E1FA                       	smpsAlterNote       $FA
0008C5E4 01                         	dc.b	$01
0008C5E5 E1FD                       	smpsAlterNote       $FD
0008C5E7 ECF5                       	smpsPSGAlterVol     $F5
0008C5E9 9206                       	dc.b	nF1, $06
0008C5EB EC04                       	smpsPSGAlterVol     $04
0008C5ED E701                       	dc.b	smpsNoAttack, $01
0008C5EF EC07                       	smpsPSGAlterVol     $07
0008C5F1 8003                       	dc.b	nRst, $03
0008C5F3 ECF5                       	smpsPSGAlterVol     $F5
0008C5F5 9206                       	dc.b	nF1, $06
0008C5F7 EC04                       	smpsPSGAlterVol     $04
0008C5F9 E701                       	dc.b	smpsNoAttack, $01
0008C5FB EC07                       	smpsPSGAlterVol     $07
0008C5FD 8006                       	dc.b	nRst, $06
0008C5FF E100                       	smpsAlterNote       $00
0008C601 01                         	dc.b	$01
0008C602 E104                       	smpsAlterNote       $04
0008C604 01                         	dc.b	$01
0008C605 E100                       	smpsAlterNote       $00
0008C607 01                         	dc.b	$01
0008C608 E1FD                       	smpsAlterNote       $FD
0008C60A 01                         	dc.b	$01
0008C60B ECF5                       	smpsPSGAlterVol     $F5
0008C60D 9206                       	dc.b	nF1, $06
0008C60F EC04                       	smpsPSGAlterVol     $04
0008C611 E701                       	dc.b	smpsNoAttack, $01
0008C613 EC07                       	smpsPSGAlterVol     $07
0008C615 8003                       	dc.b	nRst, $03
0008C617 ECF5                       	smpsPSGAlterVol     $F5
0008C619 9207                       	dc.b	nF1, $07
0008C61B EC0B                       	smpsPSGAlterVol     $0B
0008C61D 8007                       	dc.b	nRst, $07
0008C61F E103                       	smpsAlterNote       $03
0008C621 0101                       	dc.b	$01, $01
0008C623 E1FD                       	smpsAlterNote       $FD
0008C625 01                         	dc.b	$01
0008C626 E1FA                       	smpsAlterNote       $FA
0008C628 01                         	dc.b	$01
0008C629 E1FD                       	smpsAlterNote       $FD
0008C62B ECF5                       	smpsPSGAlterVol     $F5
0008C62D 9206                       	dc.b	nF1, $06
0008C62F EC0B                       	smpsPSGAlterVol     $0B
0008C631 8004                       	dc.b	nRst, $04
0008C633 ECF5                       	smpsPSGAlterVol     $F5
0008C635 9206                       	dc.b	nF1, $06
0008C637 EC04                       	smpsPSGAlterVol     $04
0008C639 E701                       	dc.b	smpsNoAttack, $01
0008C63B EC07                       	smpsPSGAlterVol     $07
0008C63D 8006                       	dc.b	nRst, $06
0008C63F E103                       	smpsAlterNote       $03
0008C641 01                         	dc.b	$01
0008C642 E104                       	smpsAlterNote       $04
0008C644 01                         	dc.b	$01
0008C645 E100                       	smpsAlterNote       $00
0008C647 01                         	dc.b	$01
0008C648 E1FA                       	smpsAlterNote       $FA
0008C64A 01                         	dc.b	$01
0008C64B E1FD                       	smpsAlterNote       $FD
0008C64D ECF5                       	smpsPSGAlterVol     $F5
0008C64F 9206                       	dc.b	nF1, $06
0008C651 EC04                       	smpsPSGAlterVol     $04
0008C653 E701                       	dc.b	smpsNoAttack, $01
0008C655 EC07                       	smpsPSGAlterVol     $07
0008C657 8003                       	dc.b	nRst, $03
0008C659 ECF5                       	smpsPSGAlterVol     $F5
0008C65B 9206                       	dc.b	nF1, $06
0008C65D EC04                       	smpsPSGAlterVol     $04
0008C65F E701                       	dc.b	smpsNoAttack, $01
0008C661 EC07                       	smpsPSGAlterVol     $07
0008C663 8006                       	dc.b	nRst, $06
0008C665 E100                       	smpsAlterNote       $00
0008C667 01                         	dc.b	$01
0008C668 E104                       	smpsAlterNote       $04
0008C66A 01                         	dc.b	$01
0008C66B E103                       	smpsAlterNote       $03
0008C66D 01                         	dc.b	$01
0008C66E E1FD                       	smpsAlterNote       $FD
0008C670 01                         	dc.b	$01
0008C671 ECF5                       	smpsPSGAlterVol     $F5
0008C673 9107                       	dc.b	nE1, $07
0008C675 EC0B                       	smpsPSGAlterVol     $0B
0008C677 8004                       	dc.b	nRst, $04
0008C679 ECF5                       	smpsPSGAlterVol     $F5
0008C67B 9106                       	dc.b	nE1, $06
0008C67D EC0B                       	smpsPSGAlterVol     $0B
0008C67F 8007                       	dc.b	nRst, $07
0008C681 E103                       	smpsAlterNote       $03
0008C683 0101                       	dc.b	$01, $01
0008C685 E100                       	smpsAlterNote       $00
0008C687 01                         	dc.b	$01
0008C688 E1FA                       	smpsAlterNote       $FA
0008C68A 01                         	dc.b	$01
0008C68B E1FD                       	smpsAlterNote       $FD
0008C68D ECF5                       	smpsPSGAlterVol     $F5
0008C68F 9106                       	dc.b	nE1, $06
0008C691 EC04                       	smpsPSGAlterVol     $04
0008C693 E701                       	dc.b	smpsNoAttack, $01
0008C695 EC07                       	smpsPSGAlterVol     $07
0008C697 8003                       	dc.b	nRst, $03
0008C699 ECF5                       	smpsPSGAlterVol     $F5
0008C69B 9106                       	dc.b	nE1, $06
0008C69D EC04                       	smpsPSGAlterVol     $04
0008C69F E701                       	dc.b	smpsNoAttack, $01
0008C6A1 EC07                       	smpsPSGAlterVol     $07
0008C6A3 8006                       	dc.b	nRst, $06
0008C6A5 E100                       	smpsAlterNote       $00
0008C6A7 01                         	dc.b	$01
0008C6A8 E104                       	smpsAlterNote       $04
0008C6AA 01                         	dc.b	$01
0008C6AB E100                       	smpsAlterNote       $00
0008C6AD 01                         	dc.b	$01
0008C6AE E1FA                       	smpsAlterNote       $FA
0008C6B0 01                         	dc.b	$01
0008C6B1 E1FD                       	smpsAlterNote       $FD
0008C6B3 ECF5                       	smpsPSGAlterVol     $F5
0008C6B5 9106                       	dc.b	nE1, $06
0008C6B7 EC04                       	smpsPSGAlterVol     $04
0008C6B9 E701                       	dc.b	smpsNoAttack, $01
0008C6BB EC07                       	smpsPSGAlterVol     $07
0008C6BD 8003                       	dc.b	nRst, $03
0008C6BF ECF5                       	smpsPSGAlterVol     $F5
0008C6C1 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008C6C5 EC04                       	smpsPSGAlterVol     $04
0008C6C7 E701                       	dc.b	smpsNoAttack, $01
0008C6C9 ECFC                       	smpsPSGAlterVol     $FC
0008C6CB 9103 9103                  	dc.b	nE1, $03, nE1, $03
0008C6CF EC04                       	smpsPSGAlterVol     $04
0008C6D1 E701                       	dc.b	smpsNoAttack, $01
0008C6D3 ECFC                       	smpsPSGAlterVol     $FC
0008C6D5 9106                       	dc.b	nE1, $06
0008C6D7 EC04                       	smpsPSGAlterVol     $04
0008C6D9 E701                       	dc.b	smpsNoAttack, $01
0008C6DB EC07                       	smpsPSGAlterVol     $07
0008C6DD 8006                       	dc.b	nRst, $06
0008C6DF E100                       	smpsAlterNote       $00
0008C6E1 01                         	dc.b	$01
0008C6E2 E104                       	smpsAlterNote       $04
0008C6E4 01                         	dc.b	$01
0008C6E5 E100                       	smpsAlterNote       $00
0008C6E7 01                         	dc.b	$01
0008C6E8 E1FA                       	smpsAlterNote       $FA
0008C6EA 01                         	dc.b	$01
0008C6EB E1F9                       	smpsAlterNote       $F9
0008C6ED 01                         	dc.b	$01
0008C6EE E1FD                       	smpsAlterNote       $FD
0008C6F0 01                         	dc.b	$01
0008C6F1 E103                       	smpsAlterNote       $03
0008C6F3 01                         	dc.b	$01
0008C6F4 E104                       	smpsAlterNote       $04
0008C6F6 01                         	dc.b	$01
0008C6F7 E100                       	smpsAlterNote       $00
0008C6F9 01                         	dc.b	$01
0008C6FA E1FA                       	smpsAlterNote       $FA
0008C6FC 0101                       	dc.b	$01, $01
0008C6FE E1FD                       	smpsAlterNote       $FD
0008C700 ECF5                       	smpsPSGAlterVol     $F5
0008C702 9206                       	dc.b	nF1, $06
0008C704 EC04                       	smpsPSGAlterVol     $04
0008C706 E701                       	dc.b	smpsNoAttack, $01
0008C708 EC07                       	smpsPSGAlterVol     $07
0008C70A 8003                       	dc.b	nRst, $03
0008C70C ECF5                       	smpsPSGAlterVol     $F5
0008C70E 9206                       	dc.b	nF1, $06
0008C710 EC04                       	smpsPSGAlterVol     $04
0008C712 E701                       	dc.b	smpsNoAttack, $01
0008C714 EC07                       	smpsPSGAlterVol     $07
0008C716 8006                       	dc.b	nRst, $06
0008C718 E100                       	smpsAlterNote       $00
0008C71A 01                         	dc.b	$01
0008C71B E104                       	smpsAlterNote       $04
0008C71D 01                         	dc.b	$01
0008C71E E103                       	smpsAlterNote       $03
0008C720 01                         	dc.b	$01
0008C721 E1FD                       	smpsAlterNote       $FD
0008C723 01                         	dc.b	$01
0008C724 ECF5                       	smpsPSGAlterVol     $F5
0008C726 9407                       	dc.b	nG1, $07
0008C728 EC0B                       	smpsPSGAlterVol     $0B
0008C72A 8004                       	dc.b	nRst, $04
0008C72C ECF5                       	smpsPSGAlterVol     $F5
0008C72E 9406                       	dc.b	nG1, $06
0008C730 EC0B                       	smpsPSGAlterVol     $0B
0008C732 8007                       	dc.b	nRst, $07
0008C734 E103                       	smpsAlterNote       $03
0008C736 0101                       	dc.b	$01, $01
0008C738 E1FD                       	smpsAlterNote       $FD
0008C73A 01                         	dc.b	$01
0008C73B E1F9                       	smpsAlterNote       $F9
0008C73D 01                         	dc.b	$01
0008C73E E1FD                       	smpsAlterNote       $FD
0008C740 ECF5                       	smpsPSGAlterVol     $F5
0008C742 9206                       	dc.b	nF1, $06
0008C744 EC04                       	smpsPSGAlterVol     $04
0008C746 E701                       	dc.b	smpsNoAttack, $01
0008C748 EC07                       	smpsPSGAlterVol     $07
0008C74A 8003                       	dc.b	nRst, $03
0008C74C ECF5                       	smpsPSGAlterVol     $F5
0008C74E 9206                       	dc.b	nF1, $06
0008C750 EC04                       	smpsPSGAlterVol     $04
0008C752 E701                       	dc.b	smpsNoAttack, $01
0008C754 EC07                       	smpsPSGAlterVol     $07
0008C756 8006                       	dc.b	nRst, $06
0008C758 E100                       	smpsAlterNote       $00
0008C75A 01                         	dc.b	$01
0008C75B E104                       	smpsAlterNote       $04
0008C75D 01                         	dc.b	$01
0008C75E E100                       	smpsAlterNote       $00
0008C760 01                         	dc.b	$01
0008C761 E1FA                       	smpsAlterNote       $FA
0008C763 01                         	dc.b	$01
0008C764 E1FD                       	smpsAlterNote       $FD
0008C766 ECF5                       	smpsPSGAlterVol     $F5
0008C768 9206                       	dc.b	nF1, $06
0008C76A EC04                       	smpsPSGAlterVol     $04
0008C76C E701                       	dc.b	smpsNoAttack, $01
0008C76E EC07                       	smpsPSGAlterVol     $07
0008C770 8003                       	dc.b	nRst, $03
0008C772 ECF5                       	smpsPSGAlterVol     $F5
0008C774 9107                       	dc.b	nE1, $07
0008C776 EC0B                       	smpsPSGAlterVol     $0B
0008C778 8006                       	dc.b	nRst, $06
0008C77A E100                       	smpsAlterNote       $00
0008C77C 01                         	dc.b	$01
0008C77D E103                       	smpsAlterNote       $03
0008C77F 0101                       	dc.b	$01, $01
0008C781 E1FD                       	smpsAlterNote       $FD
0008C783 01                         	dc.b	$01
0008C784 ECF5                       	smpsPSGAlterVol     $F5
0008C786 9207                       	dc.b	nF1, $07
0008C788 EC0B                       	smpsPSGAlterVol     $0B
0008C78A 8004                       	dc.b	nRst, $04
0008C78C ECF5                       	smpsPSGAlterVol     $F5
0008C78E 9206                       	dc.b	nF1, $06
0008C790 EC04                       	smpsPSGAlterVol     $04
0008C792 E701                       	dc.b	smpsNoAttack, $01
0008C794 EC07                       	smpsPSGAlterVol     $07
0008C796 8006                       	dc.b	nRst, $06
0008C798 E103                       	smpsAlterNote       $03
0008C79A 01                         	dc.b	$01
0008C79B E104                       	smpsAlterNote       $04
0008C79D 01                         	dc.b	$01
0008C79E E100                       	smpsAlterNote       $00
0008C7A0 01                         	dc.b	$01
0008C7A1 E1FB                       	smpsAlterNote       $FB
0008C7A3 01                         	dc.b	$01
0008C7A4 E1FD                       	smpsAlterNote       $FD
0008C7A6 ECF5                       	smpsPSGAlterVol     $F5
0008C7A8 9406                       	dc.b	nG1, $06
0008C7AA EC04                       	smpsPSGAlterVol     $04
0008C7AC E701                       	dc.b	smpsNoAttack, $01
0008C7AE EC07                       	smpsPSGAlterVol     $07
0008C7B0 8003                       	dc.b	nRst, $03
0008C7B2 ECF5                       	smpsPSGAlterVol     $F5
0008C7B4 9406                       	dc.b	nG1, $06
0008C7B6 EC04                       	smpsPSGAlterVol     $04
0008C7B8 E701                       	dc.b	smpsNoAttack, $01
0008C7BA EC07                       	smpsPSGAlterVol     $07
0008C7BC 8006                       	dc.b	nRst, $06
0008C7BE E100                       	smpsAlterNote       $00
0008C7C0 01                         	dc.b	$01
0008C7C1 E104                       	smpsAlterNote       $04
0008C7C3 01                         	dc.b	$01
0008C7C4 E100                       	smpsAlterNote       $00
0008C7C6 01                         	dc.b	$01
0008C7C7 E1FD                       	smpsAlterNote       $FD
0008C7C9 01                         	dc.b	$01
0008C7CA ECF5                       	smpsPSGAlterVol     $F5
0008C7CC 9206                       	dc.b	nF1, $06
0008C7CE EC04                       	smpsPSGAlterVol     $04
0008C7D0 E701                       	dc.b	smpsNoAttack, $01
0008C7D2 EC07                       	smpsPSGAlterVol     $07
0008C7D4 8003                       	dc.b	nRst, $03
0008C7D6 ECF5                       	smpsPSGAlterVol     $F5
0008C7D8 9207                       	dc.b	nF1, $07
0008C7DA EC0B                       	smpsPSGAlterVol     $0B
0008C7DC 8007                       	dc.b	nRst, $07
0008C7DE E103                       	smpsAlterNote       $03
0008C7E0 0101                       	dc.b	$01, $01
0008C7E2 E1FD                       	smpsAlterNote       $FD
0008C7E4 01                         	dc.b	$01
0008C7E5 E1FA                       	smpsAlterNote       $FA
0008C7E7 01                         	dc.b	$01
0008C7E8 E1FD                       	smpsAlterNote       $FD
0008C7EA ECF5                       	smpsPSGAlterVol     $F5
0008C7EC 9206                       	dc.b	nF1, $06
0008C7EE EC0B                       	smpsPSGAlterVol     $0B
0008C7F0 8004                       	dc.b	nRst, $04
0008C7F2 ECF5                       	smpsPSGAlterVol     $F5
0008C7F4 9206                       	dc.b	nF1, $06
0008C7F6 EC04                       	smpsPSGAlterVol     $04
0008C7F8 E701                       	dc.b	smpsNoAttack, $01
0008C7FA EC07                       	smpsPSGAlterVol     $07
0008C7FC 8006                       	dc.b	nRst, $06
0008C7FE E100                       	smpsAlterNote       $00
0008C800 01                         	dc.b	$01
0008C801 E104                       	smpsAlterNote       $04
0008C803 01                         	dc.b	$01
0008C804 E100                       	smpsAlterNote       $00
0008C806 01                         	dc.b	$01
0008C807 E1FA                       	smpsAlterNote       $FA
0008C809 01                         	dc.b	$01
0008C80A E1FD                       	smpsAlterNote       $FD
0008C80C ECF5                       	smpsPSGAlterVol     $F5
0008C80E 9206                       	dc.b	nF1, $06
0008C810 EC04                       	smpsPSGAlterVol     $04
0008C812 E704                       	dc.b	smpsNoAttack, $04
0008C814 ECFC                       	smpsPSGAlterVol     $FC
0008C816 9207                       	dc.b	nF1, $07
0008C818 EC0B                       	smpsPSGAlterVol     $0B
0008C81A 8006                       	dc.b	nRst, $06
0008C81C E100                       	smpsAlterNote       $00
0008C81E 01                         	dc.b	$01
0008C81F E104                       	smpsAlterNote       $04
0008C821 01                         	dc.b	$01
0008C822 E103                       	smpsAlterNote       $03
0008C824 01                         	dc.b	$01
0008C825 E1FD                       	smpsAlterNote       $FD
0008C827 01                         	dc.b	$01
0008C828 ECF5                       	smpsPSGAlterVol     $F5
0008C82A 9207                       	dc.b	nF1, $07
0008C82C EC0B                       	smpsPSGAlterVol     $0B
0008C82E 8004                       	dc.b	nRst, $04
0008C830 ECF5                       	smpsPSGAlterVol     $F5
0008C832 9206                       	dc.b	nF1, $06
0008C834 EC0B                       	smpsPSGAlterVol     $0B
0008C836 8007                       	dc.b	nRst, $07
0008C838 E103                       	smpsAlterNote       $03
0008C83A 0101                       	dc.b	$01, $01
0008C83C E100                       	smpsAlterNote       $00
0008C83E 01                         	dc.b	$01
0008C83F E1FA                       	smpsAlterNote       $FA
0008C841 01                         	dc.b	$01
0008C842 E1FD                       	smpsAlterNote       $FD
0008C844 ECF5                       	smpsPSGAlterVol     $F5
0008C846 9206                       	dc.b	nF1, $06
0008C848 EC04                       	smpsPSGAlterVol     $04
0008C84A E704                       	dc.b	smpsNoAttack, $04
0008C84C ECFC                       	smpsPSGAlterVol     $FC
0008C84E 9206                       	dc.b	nF1, $06
0008C850 EC04                       	smpsPSGAlterVol     $04
0008C852 E701                       	dc.b	smpsNoAttack, $01
0008C854 EC07                       	smpsPSGAlterVol     $07
0008C856 8006                       	dc.b	nRst, $06
0008C858 E100                       	smpsAlterNote       $00
0008C85A 01                         	dc.b	$01
0008C85B E104                       	smpsAlterNote       $04
0008C85D 01                         	dc.b	$01
0008C85E E100                       	smpsAlterNote       $00
0008C860 01                         	dc.b	$01
0008C861 E1FD                       	smpsAlterNote       $FD
0008C863 01                         	dc.b	$01
0008C864 ECF5                       	smpsPSGAlterVol     $F5
0008C866 9206                       	dc.b	nF1, $06
0008C868 EC04                       	smpsPSGAlterVol     $04
0008C86A E701                       	dc.b	smpsNoAttack, $01
0008C86C EC07                       	smpsPSGAlterVol     $07
0008C86E 8003                       	dc.b	nRst, $03
0008C870 ECF5                       	smpsPSGAlterVol     $F5
0008C872 9207                       	dc.b	nF1, $07
0008C874 EC0B                       	smpsPSGAlterVol     $0B
0008C876 8007                       	dc.b	nRst, $07
0008C878 E103                       	smpsAlterNote       $03
0008C87A 0101                       	dc.b	$01, $01
0008C87C E1FD                       	smpsAlterNote       $FD
0008C87E 01                         	dc.b	$01
0008C87F E1FA                       	smpsAlterNote       $FA
0008C881 01                         	dc.b	$01
0008C882 E1FD                       	smpsAlterNote       $FD
0008C884 ECF5                       	smpsPSGAlterVol     $F5
0008C886 9106                       	dc.b	nE1, $06
0008C888 EC0B                       	smpsPSGAlterVol     $0B
0008C88A 8004                       	dc.b	nRst, $04
0008C88C ECF5                       	smpsPSGAlterVol     $F5
0008C88E 9106                       	dc.b	nE1, $06
0008C890 EC04                       	smpsPSGAlterVol     $04
0008C892 E701                       	dc.b	smpsNoAttack, $01
0008C894 EC07                       	smpsPSGAlterVol     $07
0008C896 8006                       	dc.b	nRst, $06
0008C898 E100                       	smpsAlterNote       $00
0008C89A 01                         	dc.b	$01
0008C89B E104                       	smpsAlterNote       $04
0008C89D 01                         	dc.b	$01
0008C89E E100                       	smpsAlterNote       $00
0008C8A0 01                         	dc.b	$01
0008C8A1 E1FA                       	smpsAlterNote       $FA
0008C8A3 01                         	dc.b	$01
0008C8A4 E1FD                       	smpsAlterNote       $FD
0008C8A6 ECF5                       	smpsPSGAlterVol     $F5
0008C8A8 9106                       	dc.b	nE1, $06
0008C8AA EC04                       	smpsPSGAlterVol     $04
0008C8AC E701                       	dc.b	smpsNoAttack, $01
0008C8AE EC07                       	smpsPSGAlterVol     $07
0008C8B0 8003                       	dc.b	nRst, $03
0008C8B2 ECF5                       	smpsPSGAlterVol     $F5
0008C8B4 9106                       	dc.b	nE1, $06
0008C8B6 EC04                       	smpsPSGAlterVol     $04
0008C8B8 E701                       	dc.b	smpsNoAttack, $01
0008C8BA EC07                       	smpsPSGAlterVol     $07
0008C8BC 8006                       	dc.b	nRst, $06
0008C8BE E100                       	smpsAlterNote       $00
0008C8C0 01                         	dc.b	$01
0008C8C1 E104                       	smpsAlterNote       $04
0008C8C3 01                         	dc.b	$01
0008C8C4 E103                       	smpsAlterNote       $03
0008C8C6 01                         	dc.b	$01
0008C8C7 E1FD                       	smpsAlterNote       $FD
0008C8C9 01                         	dc.b	$01
0008C8CA ECF5                       	smpsPSGAlterVol     $F5
0008C8CC 9107                       	dc.b	nE1, $07
0008C8CE EC0B                       	smpsPSGAlterVol     $0B
0008C8D0 8004                       	dc.b	nRst, $04
0008C8D2 ECF5                       	smpsPSGAlterVol     $F5
0008C8D4 9106                       	dc.b	nE1, $06
0008C8D6 EC0B                       	smpsPSGAlterVol     $0B
0008C8D8 8007                       	dc.b	nRst, $07
0008C8DA E103                       	smpsAlterNote       $03
0008C8DC 0101                       	dc.b	$01, $01
0008C8DE E100                       	smpsAlterNote       $00
0008C8E0 01                         	dc.b	$01
0008C8E1 E1FA                       	smpsAlterNote       $FA
0008C8E3 01                         	dc.b	$01
0008C8E4 E1FD                       	smpsAlterNote       $FD
0008C8E6 ECF5                       	smpsPSGAlterVol     $F5
0008C8E8 9106                       	dc.b	nE1, $06
0008C8EA EC04                       	smpsPSGAlterVol     $04
0008C8EC E701                       	dc.b	smpsNoAttack, $01
0008C8EE EC07                       	smpsPSGAlterVol     $07
0008C8F0 8003                       	dc.b	nRst, $03
0008C8F2 ECF5                       	smpsPSGAlterVol     $F5
0008C8F4 9106                       	dc.b	nE1, $06
0008C8F6 EC04                       	smpsPSGAlterVol     $04
0008C8F8 E701                       	dc.b	smpsNoAttack, $01
0008C8FA EC07                       	smpsPSGAlterVol     $07
0008C8FC 8003                       	dc.b	nRst, $03
0008C8FE ECF5                       	smpsPSGAlterVol     $F5
0008C900 9207                       	dc.b	nF1, $07
0008C902 EC0B                       	smpsPSGAlterVol     $0B
0008C904 8006                       	dc.b	nRst, $06
0008C906 E100                       	smpsAlterNote       $00
0008C908 01                         	dc.b	$01
0008C909 E104                       	smpsAlterNote       $04
0008C90B 01                         	dc.b	$01
0008C90C E103                       	smpsAlterNote       $03
0008C90E 01                         	dc.b	$01
0008C90F E1FD                       	smpsAlterNote       $FD
0008C911 01                         	dc.b	$01
0008C912 E1F9                       	smpsAlterNote       $F9
0008C914 01                         	dc.b	$01
0008C915 E1FD                       	smpsAlterNote       $FD
0008C917 01                         	dc.b	$01
0008C918 E100                       	smpsAlterNote       $00
0008C91A 01                         	dc.b	$01
0008C91B E104                       	smpsAlterNote       $04
0008C91D 01                         	dc.b	$01
0008C91E E1FD                       	smpsAlterNote       $FD
0008C920 ECF5                       	smpsPSGAlterVol     $F5
0008C922 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008C926 EC04                       	smpsPSGAlterVol     $04
0008C928 E701                       	dc.b	smpsNoAttack, $01
0008C92A EC07                       	smpsPSGAlterVol     $07
0008C92C 8009                       	dc.b	nRst, $09
0008C92E E100                       	smpsAlterNote       $00
0008C930 01                         	dc.b	$01
0008C931 E104                       	smpsAlterNote       $04
0008C933 01                         	dc.b	$01
0008C934 E103                       	smpsAlterNote       $03
0008C936 01                         	dc.b	$01
0008C937 E1FD                       	smpsAlterNote       $FD
0008C939 01                         	dc.b	$01
0008C93A E1F9                       	smpsAlterNote       $F9
0008C93C 01                         	dc.b	$01
0008C93D E1FD                       	smpsAlterNote       $FD
0008C93F 01                         	dc.b	$01
0008C940 E100                       	smpsAlterNote       $00
0008C942 01                         	dc.b	$01
0008C943 E104                       	smpsAlterNote       $04
0008C945 01                         	dc.b	$01
0008C946 E100                       	smpsAlterNote       $00
0008C948 01                         	dc.b	$01
0008C949 E1FA                       	smpsAlterNote       $FA
0008C94B 01                         	dc.b	$01
0008C94C E1F9                       	smpsAlterNote       $F9
0008C94E 01                         	dc.b	$01
0008C94F E1FD                       	smpsAlterNote       $FD
0008C951 01                         	dc.b	$01
0008C952 E103                       	smpsAlterNote       $03
0008C954 0101                       	dc.b	$01, $01
0008C956 E100                       	smpsAlterNote       $00
0008C958 01                         	dc.b	$01
0008C959 E1FD                       	smpsAlterNote       $FD
0008C95B ECF5                       	smpsPSGAlterVol     $F5
0008C95D 9202                       	dc.b	nF1, $02
0008C95F EC04                       	smpsPSGAlterVol     $04
0008C961 E701                       	dc.b	smpsNoAttack, $01
0008C963 ECFC                       	smpsPSGAlterVol     $FC
0008C965 9106                       	dc.b	nE1, $06
0008C967 EC04                       	smpsPSGAlterVol     $04
0008C969 E701                       	dc.b	smpsNoAttack, $01
0008C96B EC07                       	smpsPSGAlterVol     $07
0008C96D 8006                       	dc.b	nRst, $06
0008C96F E100                       	smpsAlterNote       $00
0008C971 01                         	dc.b	$01
0008C972 E104                       	smpsAlterNote       $04
0008C974 01                         	dc.b	$01
0008C975 E100                       	smpsAlterNote       $00
0008C977 01                         	dc.b	$01
0008C978 E1FD                       	smpsAlterNote       $FD
0008C97A 01                         	dc.b	$01
0008C97B E1F9                       	smpsAlterNote       $F9
0008C97D 01                         	dc.b	$01
0008C97E E1FD                       	smpsAlterNote       $FD
0008C980 01                         	dc.b	$01
0008C981 E103                       	smpsAlterNote       $03
0008C983 01                         	dc.b	$01
0008C984 E104                       	smpsAlterNote       $04
0008C986 01                         	dc.b	$01
0008C987 E1FD                       	smpsAlterNote       $FD
0008C989 ECF5                       	smpsPSGAlterVol     $F5
0008C98B 9102                       	dc.b	nE1, $02
0008C98D EC04                       	smpsPSGAlterVol     $04
0008C98F E701                       	dc.b	smpsNoAttack, $01
0008C991 ECFC                       	smpsPSGAlterVol     $FC
0008C993 920D                       	dc.b	nF1, $0D
0008C995 E100                       	smpsAlterNote       $00
0008C997 E701                       	dc.b	smpsNoAttack, $01
0008C999 E104                       	smpsAlterNote       $04
0008C99B E701                       	dc.b	smpsNoAttack, $01
0008C99D E100                       	smpsAlterNote       $00
0008C99F E701                       	dc.b	smpsNoAttack, $01
0008C9A1 E1FD                       	smpsAlterNote       $FD
0008C9A3 E701                       	dc.b	smpsNoAttack, $01
0008C9A5 E1F9                       	smpsAlterNote       $F9
0008C9A7 E701                       	dc.b	smpsNoAttack, $01
0008C9A9 E1FD                       	smpsAlterNote       $FD
0008C9AB E701                       	dc.b	smpsNoAttack, $01
0008C9AD E103                       	smpsAlterNote       $03
0008C9AF E701                       	dc.b	smpsNoAttack, $01
0008C9B1 E104                       	smpsAlterNote       $04
0008C9B3 E701                       	dc.b	smpsNoAttack, $01
0008C9B5 E100                       	smpsAlterNote       $00
0008C9B7 E701                       	dc.b	smpsNoAttack, $01
0008C9B9 E1FA                       	smpsAlterNote       $FA
0008C9BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9BF E1FD                       	smpsAlterNote       $FD
0008C9C1 E701                       	dc.b	smpsNoAttack, $01
0008C9C3 E103                       	smpsAlterNote       $03
0008C9C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9C9 E1FD                       	smpsAlterNote       $FD
0008C9CB E701                       	dc.b	smpsNoAttack, $01
0008C9CD E1F9                       	smpsAlterNote       $F9
0008C9CF E701                       	dc.b	smpsNoAttack, $01
0008C9D1 E1FA                       	smpsAlterNote       $FA
0008C9D3 E701                       	dc.b	smpsNoAttack, $01
0008C9D5 E100                       	smpsAlterNote       $00
0008C9D7 EC04                       	smpsPSGAlterVol     $04
0008C9D9 E701                       	dc.b	smpsNoAttack, $01
0008C9DB EC07                       	smpsPSGAlterVol     $07
0008C9DD E104                       	smpsAlterNote       $04
0008C9DF 8001                       	dc.b	nRst, $01
0008C9E1 E100                       	smpsAlterNote       $00
0008C9E3 01                         	dc.b	$01
0008C9E4 E1FD                       	smpsAlterNote       $FD
0008C9E6 01                         	dc.b	$01
0008C9E7 E1F9                       	smpsAlterNote       $F9
0008C9E9 01                         	dc.b	$01
0008C9EA E1FD                       	smpsAlterNote       $FD
0008C9EC 01                         	dc.b	$01
0008C9ED E103                       	smpsAlterNote       $03
0008C9EF 01                         	dc.b	$01
0008C9F0 E104                       	smpsAlterNote       $04
0008C9F2 01                         	dc.b	$01
0008C9F3 E1FD                       	smpsAlterNote       $FD
0008C9F5 ECF5                       	smpsPSGAlterVol     $F5
0008C9F7 9106                       	dc.b	nE1, $06
0008C9F9 EC04                       	smpsPSGAlterVol     $04
0008C9FB E701                       	dc.b	smpsNoAttack, $01
0008C9FD EC07                       	smpsPSGAlterVol     $07
0008C9FF 8003                       	dc.b	nRst, $03
0008CA01 ECF5                       	smpsPSGAlterVol     $F5
0008CA03 9106                       	dc.b	nE1, $06
0008CA05 EC04                       	smpsPSGAlterVol     $04
0008CA07 E701                       	dc.b	smpsNoAttack, $01
0008CA09 EC07                       	smpsPSGAlterVol     $07
0008CA0B 8006                       	dc.b	nRst, $06
0008CA0D E100                       	smpsAlterNote       $00
0008CA0F 01                         	dc.b	$01
0008CA10 E104                       	smpsAlterNote       $04
0008CA12 01                         	dc.b	$01
0008CA13 E100                       	smpsAlterNote       $00
0008CA15 01                         	dc.b	$01
0008CA16 E1FA                       	smpsAlterNote       $FA
0008CA18 01                         	dc.b	$01
0008CA19 E1FD                       	smpsAlterNote       $FD
0008CA1B ECF5                       	smpsPSGAlterVol     $F5
0008CA1D 9206                       	dc.b	nF1, $06
0008CA1F EC04                       	smpsPSGAlterVol     $04
0008CA21 E701                       	dc.b	smpsNoAttack, $01
0008CA23 EC07                       	smpsPSGAlterVol     $07
0008CA25 8003                       	dc.b	nRst, $03
0008CA27 ECF5                       	smpsPSGAlterVol     $F5
0008CA29 9207                       	dc.b	nF1, $07
0008CA2B EC0B                       	smpsPSGAlterVol     $0B
0008CA2D 8006                       	dc.b	nRst, $06
0008CA2F E100                       	smpsAlterNote       $00
0008CA31 01                         	dc.b	$01
0008CA32 E103                       	smpsAlterNote       $03
0008CA34 0101                       	dc.b	$01, $01
0008CA36 E1FD                       	smpsAlterNote       $FD
0008CA38 01                         	dc.b	$01
0008CA39 ECF5                       	smpsPSGAlterVol     $F5
0008CA3B 9107                       	dc.b	nE1, $07
0008CA3D EC0B                       	smpsPSGAlterVol     $0B
0008CA3F 8004                       	dc.b	nRst, $04
0008CA41 ECF5                       	smpsPSGAlterVol     $F5
0008CA43 9106                       	dc.b	nE1, $06
0008CA45 EC04                       	smpsPSGAlterVol     $04
0008CA47 E701                       	dc.b	smpsNoAttack, $01
0008CA49 EC07                       	smpsPSGAlterVol     $07
0008CA4B 8006                       	dc.b	nRst, $06
0008CA4D E103                       	smpsAlterNote       $03
0008CA4F 01                         	dc.b	$01
0008CA50 E104                       	smpsAlterNote       $04
0008CA52 01                         	dc.b	$01
0008CA53 E100                       	smpsAlterNote       $00
0008CA55 01                         	dc.b	$01
0008CA56 E1FA                       	smpsAlterNote       $FA
0008CA58 01                         	dc.b	$01
0008CA59 E1FD                       	smpsAlterNote       $FD
0008CA5B ECF5                       	smpsPSGAlterVol     $F5
0008CA5D 9106                       	dc.b	nE1, $06
0008CA5F EC04                       	smpsPSGAlterVol     $04
0008CA61 E701                       	dc.b	smpsNoAttack, $01
0008CA63 EC07                       	smpsPSGAlterVol     $07
0008CA65 8003                       	dc.b	nRst, $03
0008CA67 ECF5                       	smpsPSGAlterVol     $F5
0008CA69 9106                       	dc.b	nE1, $06
0008CA6B EC04                       	smpsPSGAlterVol     $04
0008CA6D E701                       	dc.b	smpsNoAttack, $01
0008CA6F EC07                       	smpsPSGAlterVol     $07
0008CA71 8003                       	dc.b	nRst, $03
0008CA73 ECF5                       	smpsPSGAlterVol     $F5
0008CA75 9207                       	dc.b	nF1, $07
0008CA77 EC0B                       	smpsPSGAlterVol     $0B
0008CA79 8006                       	dc.b	nRst, $06
0008CA7B E100                       	smpsAlterNote       $00
0008CA7D 01                         	dc.b	$01
0008CA7E E103                       	smpsAlterNote       $03
0008CA80 0101                       	dc.b	$01, $01
0008CA82 E1FD                       	smpsAlterNote       $FD
0008CA84 01                         	dc.b	$01
0008CA85 E1F9                       	smpsAlterNote       $F9
0008CA87 01                         	dc.b	$01
0008CA88 E1FA                       	smpsAlterNote       $FA
0008CA8A 01                         	dc.b	$01
0008CA8B E100                       	smpsAlterNote       $00
0008CA8D 01                         	dc.b	$01
0008CA8E E104                       	smpsAlterNote       $04
0008CA90 01                         	dc.b	$01
0008CA91 E1FD                       	smpsAlterNote       $FD
0008CA93 ECF5                       	smpsPSGAlterVol     $F5
0008CA95 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008CA99 EC04                       	smpsPSGAlterVol     $04
0008CA9B E701                       	dc.b	smpsNoAttack, $01
0008CA9D EC07                       	smpsPSGAlterVol     $07
0008CA9F 8009                       	dc.b	nRst, $09
0008CAA1 E100                       	smpsAlterNote       $00
0008CAA3 01                         	dc.b	$01
0008CAA4 E103                       	smpsAlterNote       $03
0008CAA6 0101                       	dc.b	$01, $01
0008CAA8 E1FD                       	smpsAlterNote       $FD
0008CAAA 01                         	dc.b	$01
0008CAAB E1F9                       	smpsAlterNote       $F9
0008CAAD 01                         	dc.b	$01
0008CAAE E1FA                       	smpsAlterNote       $FA
0008CAB0 01                         	dc.b	$01
0008CAB1 E100                       	smpsAlterNote       $00
0008CAB3 01                         	dc.b	$01
0008CAB4 E104                       	smpsAlterNote       $04
0008CAB6 01                         	dc.b	$01
0008CAB7 E100                       	smpsAlterNote       $00
0008CAB9 01                         	dc.b	$01
0008CABA E1FD                       	smpsAlterNote       $FD
0008CABC 01                         	dc.b	$01
0008CABD E1F9                       	smpsAlterNote       $F9
0008CABF 01                         	dc.b	$01
0008CAC0 E1FD                       	smpsAlterNote       $FD
0008CAC2 01                         	dc.b	$01
0008CAC3 E103                       	smpsAlterNote       $03
0008CAC5 01                         	dc.b	$01
0008CAC6 E104                       	smpsAlterNote       $04
0008CAC8 01                         	dc.b	$01
0008CAC9 E100                       	smpsAlterNote       $00
0008CACB 01                         	dc.b	$01
0008CACC E1FD                       	smpsAlterNote       $FD
0008CACE ECF5                       	smpsPSGAlterVol     $F5
0008CAD0 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008CAD4 EC04                       	smpsPSGAlterVol     $04
0008CAD6 E701                       	dc.b	smpsNoAttack, $01
0008CAD8 EC07                       	smpsPSGAlterVol     $07
0008CADA 8006                       	dc.b	nRst, $06
0008CADC E100                       	smpsAlterNote       $00
0008CADE 01                         	dc.b	$01
0008CADF E104                       	smpsAlterNote       $04
0008CAE1 01                         	dc.b	$01
0008CAE2 E103                       	smpsAlterNote       $03
0008CAE4 01                         	dc.b	$01
0008CAE5 E1FD                       	smpsAlterNote       $FD
0008CAE7 01                         	dc.b	$01
0008CAE8 E1F9                       	smpsAlterNote       $F9
0008CAEA 01                         	dc.b	$01
0008CAEB E1FD                       	smpsAlterNote       $FD
0008CAED 01                         	dc.b	$01
0008CAEE E100                       	smpsAlterNote       $00
0008CAF0 01                         	dc.b	$01
0008CAF1 E104                       	smpsAlterNote       $04
0008CAF3 01                         	dc.b	$01
0008CAF4 E1FD                       	smpsAlterNote       $FD
0008CAF6 ECF5                       	smpsPSGAlterVol     $F5
0008CAF8 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008CAFC E100                       	smpsAlterNote       $00
0008CAFE E701                       	dc.b	smpsNoAttack, $01
0008CB00 E104                       	smpsAlterNote       $04
0008CB02 E701                       	dc.b	smpsNoAttack, $01
0008CB04 E100                       	smpsAlterNote       $00
0008CB06 E701                       	dc.b	smpsNoAttack, $01
0008CB08 E1FD                       	smpsAlterNote       $FD
0008CB0A E701                       	dc.b	smpsNoAttack, $01
0008CB0C E1F9                       	smpsAlterNote       $F9
0008CB0E E701                       	dc.b	smpsNoAttack, $01
0008CB10 E1FD                       	smpsAlterNote       $FD
0008CB12 E701                       	dc.b	smpsNoAttack, $01
0008CB14 E103                       	smpsAlterNote       $03
0008CB16 E701                       	dc.b	smpsNoAttack, $01
0008CB18 E104                       	smpsAlterNote       $04
0008CB1A E701                       	dc.b	smpsNoAttack, $01
0008CB1C E100                       	smpsAlterNote       $00
0008CB1E E701                       	dc.b	smpsNoAttack, $01
0008CB20 E1FA                       	smpsAlterNote       $FA
0008CB22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB26 E1FD                       	smpsAlterNote       $FD
0008CB28 E701                       	dc.b	smpsNoAttack, $01
0008CB2A E103                       	smpsAlterNote       $03
0008CB2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB30 E100                       	smpsAlterNote       $00
0008CB32 E701                       	dc.b	smpsNoAttack, $01
0008CB34 E1FA                       	smpsAlterNote       $FA
0008CB36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB3A E100                       	smpsAlterNote       $00
0008CB3C EC04                       	smpsPSGAlterVol     $04
0008CB3E E701                       	dc.b	smpsNoAttack, $01
0008CB40 EC07                       	smpsPSGAlterVol     $07
0008CB42 E104                       	smpsAlterNote       $04
0008CB44 8001                       	dc.b	nRst, $01
0008CB46 E103                       	smpsAlterNote       $03
0008CB48 01                         	dc.b	$01
0008CB49 E1FD                       	smpsAlterNote       $FD
0008CB4B 01                         	dc.b	$01
0008CB4C E1F9                       	smpsAlterNote       $F9
0008CB4E 01                         	dc.b	$01
0008CB4F E1FD                       	smpsAlterNote       $FD
0008CB51 01                         	dc.b	$01
0008CB52 E100                       	smpsAlterNote       $00
0008CB54 01                         	dc.b	$01
0008CB55 E104                       	smpsAlterNote       $04
0008CB57 01                         	dc.b	$01
0008CB58 E1FD                       	smpsAlterNote       $FD
0008CB5A ECF5                       	smpsPSGAlterVol     $F5
0008CB5C 9106                       	dc.b	nE1, $06
0008CB5E EC04                       	smpsPSGAlterVol     $04
0008CB60 E701                       	dc.b	smpsNoAttack, $01
0008CB62 EC07                       	smpsPSGAlterVol     $07
0008CB64 8003                       	dc.b	nRst, $03
0008CB66 ECF5                       	smpsPSGAlterVol     $F5
0008CB68 9106                       	dc.b	nE1, $06
0008CB6A EC04                       	smpsPSGAlterVol     $04
0008CB6C E701                       	dc.b	smpsNoAttack, $01
0008CB6E EC07                       	smpsPSGAlterVol     $07
0008CB70 8006                       	dc.b	nRst, $06
0008CB72 E100                       	smpsAlterNote       $00
0008CB74 01                         	dc.b	$01
0008CB75 E104                       	smpsAlterNote       $04
0008CB77 01                         	dc.b	$01
0008CB78 E100                       	smpsAlterNote       $00
0008CB7A 01                         	dc.b	$01
0008CB7B E1FD                       	smpsAlterNote       $FD
0008CB7D 01                         	dc.b	$01
0008CB7E ECF5                       	smpsPSGAlterVol     $F5
0008CB80 9206                       	dc.b	nF1, $06
0008CB82 EC04                       	smpsPSGAlterVol     $04
0008CB84 E701                       	dc.b	smpsNoAttack, $01
0008CB86 EC07                       	smpsPSGAlterVol     $07
0008CB88 8003                       	dc.b	nRst, $03
0008CB8A ECF5                       	smpsPSGAlterVol     $F5
0008CB8C 9207                       	dc.b	nF1, $07
0008CB8E EC0B                       	smpsPSGAlterVol     $0B
0008CB90 8007                       	dc.b	nRst, $07
0008CB92 E103                       	smpsAlterNote       $03
0008CB94 0101                       	dc.b	$01, $01
0008CB96 E1FD                       	smpsAlterNote       $FD
0008CB98 01                         	dc.b	$01
0008CB99 E1FA                       	smpsAlterNote       $FA
0008CB9B 01                         	dc.b	$01
0008CB9C E1FD                       	smpsAlterNote       $FD
0008CB9E ECF5                       	smpsPSGAlterVol     $F5
0008CBA0 9106                       	dc.b	nE1, $06
0008CBA2 EC0B                       	smpsPSGAlterVol     $0B
0008CBA4 8004                       	dc.b	nRst, $04
0008CBA6 ECF5                       	smpsPSGAlterVol     $F5
0008CBA8 9106                       	dc.b	nE1, $06
0008CBAA EC04                       	smpsPSGAlterVol     $04
0008CBAC E701                       	dc.b	smpsNoAttack, $01
0008CBAE EC07                       	smpsPSGAlterVol     $07
0008CBB0 8006                       	dc.b	nRst, $06
0008CBB2 E100                       	smpsAlterNote       $00
0008CBB4 01                         	dc.b	$01
0008CBB5 E104                       	smpsAlterNote       $04
0008CBB7 01                         	dc.b	$01
0008CBB8 E100                       	smpsAlterNote       $00
0008CBBA 01                         	dc.b	$01
0008CBBB E1FA                       	smpsAlterNote       $FA
0008CBBD 01                         	dc.b	$01
0008CBBE E1FD                       	smpsAlterNote       $FD
0008CBC0 ECF5                       	smpsPSGAlterVol     $F5
0008CBC2 9206                       	dc.b	nF1, $06
0008CBC4 EC04                       	smpsPSGAlterVol     $04
0008CBC6 E701                       	dc.b	smpsNoAttack, $01
0008CBC8 EC07                       	smpsPSGAlterVol     $07
0008CBCA 8003                       	dc.b	nRst, $03
0008CBCC ECF5                       	smpsPSGAlterVol     $F5
0008CBCE 9206                       	dc.b	nF1, $06
0008CBD0 EC04                       	smpsPSGAlterVol     $04
0008CBD2 E701                       	dc.b	smpsNoAttack, $01
0008CBD4 EC07                       	smpsPSGAlterVol     $07
0008CBD6 8006                       	dc.b	nRst, $06
0008CBD8 E100                       	smpsAlterNote       $00
0008CBDA 01                         	dc.b	$01
0008CBDB E104                       	smpsAlterNote       $04
0008CBDD 01                         	dc.b	$01
0008CBDE E103                       	smpsAlterNote       $03
0008CBE0 01                         	dc.b	$01
0008CBE1 E1FD                       	smpsAlterNote       $FD
0008CBE3 01                         	dc.b	$01
0008CBE4 ECF5                       	smpsPSGAlterVol     $F5
0008CBE6 9107                       	dc.b	nE1, $07
0008CBE8 EC0B                       	smpsPSGAlterVol     $0B
0008CBEA 8004                       	dc.b	nRst, $04
0008CBEC ECF5                       	smpsPSGAlterVol     $F5
0008CBEE 9106                       	dc.b	nE1, $06
0008CBF0 EC0B                       	smpsPSGAlterVol     $0B
0008CBF2 8007                       	dc.b	nRst, $07
0008CBF4 E103                       	smpsAlterNote       $03
0008CBF6 0101                       	dc.b	$01, $01
0008CBF8 E100                       	smpsAlterNote       $00
0008CBFA 01                         	dc.b	$01
0008CBFB E1FA                       	smpsAlterNote       $FA
0008CBFD 01                         	dc.b	$01
0008CBFE E1FD                       	smpsAlterNote       $FD
0008CC00 ECF5                       	smpsPSGAlterVol     $F5
0008CC02 9206                       	dc.b	nF1, $06
0008CC04 EC04                       	smpsPSGAlterVol     $04
0008CC06 E701                       	dc.b	smpsNoAttack, $01
0008CC08 EC07                       	smpsPSGAlterVol     $07
0008CC0A 8003                       	dc.b	nRst, $03
0008CC0C ECF5                       	smpsPSGAlterVol     $F5
0008CC0E 9206                       	dc.b	nF1, $06
0008CC10 EC04                       	smpsPSGAlterVol     $04
0008CC12 E701                       	dc.b	smpsNoAttack, $01
0008CC14 EC07                       	smpsPSGAlterVol     $07
0008CC16 8006                       	dc.b	nRst, $06
0008CC18 E100                       	smpsAlterNote       $00
0008CC1A 01                         	dc.b	$01
0008CC1B E104                       	smpsAlterNote       $04
0008CC1D 01                         	dc.b	$01
0008CC1E E100                       	smpsAlterNote       $00
0008CC20 01                         	dc.b	$01
0008CC21 E1FD                       	smpsAlterNote       $FD
0008CC23 01                         	dc.b	$01
0008CC24 ECF5                       	smpsPSGAlterVol     $F5
0008CC26 9106                       	dc.b	nE1, $06
0008CC28 EC04                       	smpsPSGAlterVol     $04
0008CC2A E701                       	dc.b	smpsNoAttack, $01
0008CC2C EC07                       	smpsPSGAlterVol     $07
0008CC2E 8003                       	dc.b	nRst, $03
0008CC30 ECF5                       	smpsPSGAlterVol     $F5
0008CC32 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008CC36 EC04                       	smpsPSGAlterVol     $04
0008CC38 E701                       	dc.b	smpsNoAttack, $01
0008CC3A ECFC                       	smpsPSGAlterVol     $FC
0008CC3C 9103                       	dc.b	nE1, $03
0008CC3E EC04                       	smpsPSGAlterVol     $04
0008CC40 E701                       	dc.b	smpsNoAttack, $01
0008CC42 ECFC                       	smpsPSGAlterVol     $FC
0008CC44 9102                       	dc.b	nE1, $02
0008CC46 EC04                       	smpsPSGAlterVol     $04
0008CC48 E701                       	dc.b	smpsNoAttack, $01
0008CC4A ECFC                       	smpsPSGAlterVol     $FC
0008CC4C 9103                       	dc.b	nE1, $03
0008CC4E EC0B                       	smpsPSGAlterVol     $0B
0008CC50 800A                       	dc.b	nRst, $0A
0008CC52 E100                       	smpsAlterNote       $00
0008CC54 01                         	dc.b	$01
0008CC55 E104                       	smpsAlterNote       $04
0008CC57 01                         	dc.b	$01
0008CC58 E100                       	smpsAlterNote       $00
0008CC5A 01                         	dc.b	$01
0008CC5B E1FA                       	smpsAlterNote       $FA
0008CC5D 01                         	dc.b	$01
0008CC5E E1F9                       	smpsAlterNote       $F9
0008CC60 01                         	dc.b	$01
0008CC61 E1FD                       	smpsAlterNote       $FD
0008CC63 01                         	dc.b	$01
0008CC64 E103                       	smpsAlterNote       $03
0008CC66 0101                       	dc.b	$01, $01
0008CC68 E100                       	smpsAlterNote       $00
0008CC6A 01                         	dc.b	$01
0008CC6B E1FA                       	smpsAlterNote       $FA
0008CC6D 0101                       	dc.b	$01, $01
0008CC6F E1FD                       	smpsAlterNote       $FD
0008CC71 ECF5                       	smpsPSGAlterVol     $F5
0008CC73 9206                       	dc.b	nF1, $06
0008CC75 EC04                       	smpsPSGAlterVol     $04
0008CC77 E704                       	dc.b	smpsNoAttack, $04
0008CC79 ECFC                       	smpsPSGAlterVol     $FC
0008CC7B 9206                       	dc.b	nF1, $06
0008CC7D EC04                       	smpsPSGAlterVol     $04
0008CC7F E701                       	dc.b	smpsNoAttack, $01
0008CC81 EC07                       	smpsPSGAlterVol     $07
0008CC83 8006                       	dc.b	nRst, $06
0008CC85 E100                       	smpsAlterNote       $00
0008CC87 01                         	dc.b	$01
0008CC88 E104                       	smpsAlterNote       $04
0008CC8A 01                         	dc.b	$01
0008CC8B E103                       	smpsAlterNote       $03
0008CC8D 01                         	dc.b	$01
0008CC8E E1FD                       	smpsAlterNote       $FD
0008CC90 01                         	dc.b	$01
0008CC91 ECF5                       	smpsPSGAlterVol     $F5
0008CC93 9407                       	dc.b	nG1, $07
0008CC95 EC0B                       	smpsPSGAlterVol     $0B
0008CC97 8004                       	dc.b	nRst, $04
0008CC99 ECF5                       	smpsPSGAlterVol     $F5
0008CC9B 9406                       	dc.b	nG1, $06
0008CC9D EC0B                       	smpsPSGAlterVol     $0B
0008CC9F 8007                       	dc.b	nRst, $07
0008CCA1 E103                       	smpsAlterNote       $03
0008CCA3 0101                       	dc.b	$01, $01
0008CCA5 E1FD                       	smpsAlterNote       $FD
0008CCA7 01                         	dc.b	$01
0008CCA8 E1F9                       	smpsAlterNote       $F9
0008CCAA 01                         	dc.b	$01
0008CCAB E1FD                       	smpsAlterNote       $FD
0008CCAD ECF5                       	smpsPSGAlterVol     $F5
0008CCAF 9206                       	dc.b	nF1, $06
0008CCB1 EC04                       	smpsPSGAlterVol     $04
0008CCB3 E701                       	dc.b	smpsNoAttack, $01
0008CCB5 EC07                       	smpsPSGAlterVol     $07
0008CCB7 8003                       	dc.b	nRst, $03
0008CCB9 ECF5                       	smpsPSGAlterVol     $F5
0008CCBB 9206                       	dc.b	nF1, $06
0008CCBD EC04                       	smpsPSGAlterVol     $04
0008CCBF E701                       	dc.b	smpsNoAttack, $01
0008CCC1 EC07                       	smpsPSGAlterVol     $07
0008CCC3 8006                       	dc.b	nRst, $06
0008CCC5 E100                       	smpsAlterNote       $00
0008CCC7 01                         	dc.b	$01
0008CCC8 E104                       	smpsAlterNote       $04
0008CCCA 01                         	dc.b	$01
0008CCCB E100                       	smpsAlterNote       $00
0008CCCD 01                         	dc.b	$01
0008CCCE E1FA                       	smpsAlterNote       $FA
0008CCD0 01                         	dc.b	$01
0008CCD1 E1FD                       	smpsAlterNote       $FD
0008CCD3 ECF5                       	smpsPSGAlterVol     $F5
0008CCD5 9206                       	dc.b	nF1, $06
0008CCD7 EC04                       	smpsPSGAlterVol     $04
0008CCD9 E701                       	dc.b	smpsNoAttack, $01
0008CCDB EC07                       	smpsPSGAlterVol     $07
0008CCDD 8003                       	dc.b	nRst, $03
0008CCDF ECF5                       	smpsPSGAlterVol     $F5
0008CCE1 9107                       	dc.b	nE1, $07
0008CCE3 EC0B                       	smpsPSGAlterVol     $0B
0008CCE5 8006                       	dc.b	nRst, $06
0008CCE7 E100                       	smpsAlterNote       $00
0008CCE9 01                         	dc.b	$01
0008CCEA E103                       	smpsAlterNote       $03
0008CCEC 0101                       	dc.b	$01, $01
0008CCEE E1FD                       	smpsAlterNote       $FD
0008CCF0 01                         	dc.b	$01
0008CCF1 ECF5                       	smpsPSGAlterVol     $F5
0008CCF3 9207                       	dc.b	nF1, $07
0008CCF5 EC0B                       	smpsPSGAlterVol     $0B
0008CCF7 8004                       	dc.b	nRst, $04
0008CCF9 ECF5                       	smpsPSGAlterVol     $F5
0008CCFB 9206                       	dc.b	nF1, $06
0008CCFD EC04                       	smpsPSGAlterVol     $04
0008CCFF E701                       	dc.b	smpsNoAttack, $01
0008CD01 EC07                       	smpsPSGAlterVol     $07
0008CD03 8006                       	dc.b	nRst, $06
0008CD05 E103                       	smpsAlterNote       $03
0008CD07 01                         	dc.b	$01
0008CD08 E104                       	smpsAlterNote       $04
0008CD0A 01                         	dc.b	$01
0008CD0B E100                       	smpsAlterNote       $00
0008CD0D 01                         	dc.b	$01
0008CD0E E1FB                       	smpsAlterNote       $FB
0008CD10 01                         	dc.b	$01
0008CD11 E1FD                       	smpsAlterNote       $FD
0008CD13 ECF5                       	smpsPSGAlterVol     $F5
0008CD15 9406                       	dc.b	nG1, $06
0008CD17 EC04                       	smpsPSGAlterVol     $04
0008CD19 E701                       	dc.b	smpsNoAttack, $01
0008CD1B EC07                       	smpsPSGAlterVol     $07
0008CD1D 8003                       	dc.b	nRst, $03
0008CD1F ECF5                       	smpsPSGAlterVol     $F5
0008CD21 9406                       	dc.b	nG1, $06
0008CD23 EC04                       	smpsPSGAlterVol     $04
0008CD25 E701                       	dc.b	smpsNoAttack, $01
0008CD27 EC07                       	smpsPSGAlterVol     $07
0008CD29 8006                       	dc.b	nRst, $06
0008CD2B E100                       	smpsAlterNote       $00
0008CD2D 01                         	dc.b	$01
0008CD2E E104                       	smpsAlterNote       $04
0008CD30 01                         	dc.b	$01
0008CD31 E100                       	smpsAlterNote       $00
0008CD33 01                         	dc.b	$01
0008CD34 E1FD                       	smpsAlterNote       $FD
0008CD36 01                         	dc.b	$01
0008CD37 ECF5                       	smpsPSGAlterVol     $F5
0008CD39 9206                       	dc.b	nF1, $06
0008CD3B EC04                       	smpsPSGAlterVol     $04
0008CD3D E701                       	dc.b	smpsNoAttack, $01
0008CD3F EC07                       	smpsPSGAlterVol     $07
0008CD41 8003                       	dc.b	nRst, $03
0008CD43 ECF5                       	smpsPSGAlterVol     $F5
0008CD45 9207                       	dc.b	nF1, $07
0008CD47 EC0B                       	smpsPSGAlterVol     $0B
0008CD49 8007                       	dc.b	nRst, $07
0008CD4B E103                       	smpsAlterNote       $03
0008CD4D 0101                       	dc.b	$01, $01
0008CD4F E1FD                       	smpsAlterNote       $FD
0008CD51 01                         	dc.b	$01
0008CD52 E1FA                       	smpsAlterNote       $FA
0008CD54 01                         	dc.b	$01
0008CD55 E1FD                       	smpsAlterNote       $FD
0008CD57 ECF5                       	smpsPSGAlterVol     $F5
0008CD59 9206                       	dc.b	nF1, $06
0008CD5B EC0B                       	smpsPSGAlterVol     $0B
0008CD5D 8004                       	dc.b	nRst, $04
0008CD5F ECF5                       	smpsPSGAlterVol     $F5
0008CD61 9206                       	dc.b	nF1, $06
0008CD63 EC04                       	smpsPSGAlterVol     $04
0008CD65 E701                       	dc.b	smpsNoAttack, $01
0008CD67 EC07                       	smpsPSGAlterVol     $07
0008CD69 8006                       	dc.b	nRst, $06
0008CD6B E100                       	smpsAlterNote       $00
0008CD6D 01                         	dc.b	$01
0008CD6E E104                       	smpsAlterNote       $04
0008CD70 01                         	dc.b	$01
0008CD71 E100                       	smpsAlterNote       $00
0008CD73 01                         	dc.b	$01
0008CD74 E1FA                       	smpsAlterNote       $FA
0008CD76 01                         	dc.b	$01
0008CD77 E1FD                       	smpsAlterNote       $FD
0008CD79 ECF5                       	smpsPSGAlterVol     $F5
0008CD7B 9206                       	dc.b	nF1, $06
0008CD7D EC04                       	smpsPSGAlterVol     $04
0008CD7F E701                       	dc.b	smpsNoAttack, $01
0008CD81 EC07                       	smpsPSGAlterVol     $07
0008CD83 8003                       	dc.b	nRst, $03
0008CD85 ECF5                       	smpsPSGAlterVol     $F5
0008CD87 9207                       	dc.b	nF1, $07
0008CD89 EC0B                       	smpsPSGAlterVol     $0B
0008CD8B 8006                       	dc.b	nRst, $06
0008CD8D E100                       	smpsAlterNote       $00
0008CD8F 01                         	dc.b	$01
0008CD90 E103                       	smpsAlterNote       $03
0008CD92 0101                       	dc.b	$01, $01
0008CD94 E1FD                       	smpsAlterNote       $FD
0008CD96 01                         	dc.b	$01
0008CD97 ECF5                       	smpsPSGAlterVol     $F5
0008CD99 9207                       	dc.b	nF1, $07
0008CD9B EC0B                       	smpsPSGAlterVol     $0B
0008CD9D 8004                       	dc.b	nRst, $04
0008CD9F ECF5                       	smpsPSGAlterVol     $F5
0008CDA1 9206                       	dc.b	nF1, $06
0008CDA3 EC0B                       	smpsPSGAlterVol     $0B
0008CDA5 8007                       	dc.b	nRst, $07
0008CDA7 E103                       	smpsAlterNote       $03
0008CDA9 0101                       	dc.b	$01, $01
0008CDAB E100                       	smpsAlterNote       $00
0008CDAD 01                         	dc.b	$01
0008CDAE E1FA                       	smpsAlterNote       $FA
0008CDB0 01                         	dc.b	$01
0008CDB1 E1FD                       	smpsAlterNote       $FD
0008CDB3 ECF5                       	smpsPSGAlterVol     $F5
0008CDB5 9206                       	dc.b	nF1, $06
0008CDB7 EC04                       	smpsPSGAlterVol     $04
0008CDB9 E701                       	dc.b	smpsNoAttack, $01
0008CDBB EC07                       	smpsPSGAlterVol     $07
0008CDBD 8003                       	dc.b	nRst, $03
0008CDBF ECF5                       	smpsPSGAlterVol     $F5
0008CDC1 9206                       	dc.b	nF1, $06
0008CDC3 EC04                       	smpsPSGAlterVol     $04
0008CDC5 E701                       	dc.b	smpsNoAttack, $01
0008CDC7 EC07                       	smpsPSGAlterVol     $07
0008CDC9 8006                       	dc.b	nRst, $06
0008CDCB E100                       	smpsAlterNote       $00
0008CDCD 01                         	dc.b	$01
0008CDCE E104                       	smpsAlterNote       $04
0008CDD0 01                         	dc.b	$01
0008CDD1 E100                       	smpsAlterNote       $00
0008CDD3 01                         	dc.b	$01
0008CDD4 E1FD                       	smpsAlterNote       $FD
0008CDD6 01                         	dc.b	$01
0008CDD7 ECF5                       	smpsPSGAlterVol     $F5
0008CDD9 9206                       	dc.b	nF1, $06
0008CDDB EC04                       	smpsPSGAlterVol     $04
0008CDDD E701                       	dc.b	smpsNoAttack, $01
0008CDDF EC07                       	smpsPSGAlterVol     $07
0008CDE1 8003                       	dc.b	nRst, $03
0008CDE3 ECF5                       	smpsPSGAlterVol     $F5
0008CDE5 9207                       	dc.b	nF1, $07
0008CDE7 EC0B                       	smpsPSGAlterVol     $0B
0008CDE9 8007                       	dc.b	nRst, $07
0008CDEB E104                       	smpsAlterNote       $04
0008CDED 0101                       	dc.b	$01, $01
0008CDEF E1FB                       	smpsAlterNote       $FB
0008CDF1 01                         	dc.b	$01
0008CDF2 E1F6                       	smpsAlterNote       $F6
0008CDF4 0101                       	dc.b	$01, $01
0008CDF6 E1FF                       	smpsAlterNote       $FF
0008CDF8 01                         	dc.b	$01
0008CDF9 E105                       	smpsAlterNote       $05
0008CDFB 01                         	dc.b	$01
0008CDFC E104                       	smpsAlterNote       $04
0008CDFE 01                         	dc.b	$01
0008CDFF E1FB                       	smpsAlterNote       $FB
0008CE01 01                         	dc.b	$01
0008CE02 E1F5                       	smpsAlterNote       $F5
0008CE04 01                         	dc.b	$01
0008CE05 E1FC                       	smpsAlterNote       $FC
0008CE07 ECF5                       	smpsPSGAlterVol     $F5
0008CE09 8B0E                       	dc.b	nBb0, $0E
0008CE0B E102                       	smpsAlterNote       $02
0008CE0D EC0B                       	smpsPSGAlterVol     $0B
0008CE0F 8001                       	dc.b	nRst, $01
0008CE11 E101                       	smpsAlterNote       $01
0008CE13 01                         	dc.b	$01
0008CE14 E1FC                       	smpsAlterNote       $FC
0008CE16 01                         	dc.b	$01
0008CE17 E1F9                       	smpsAlterNote       $F9
0008CE19 0101                       	dc.b	$01, $01
0008CE1B E1FF                       	smpsAlterNote       $FF
0008CE1D 01                         	dc.b	$01
0008CE1E E102                       	smpsAlterNote       $02
0008CE20 01                         	dc.b	$01
0008CE21 E1FF                       	smpsAlterNote       $FF
0008CE23 01                         	dc.b	$01
0008CE24 E1FC                       	smpsAlterNote       $FC
0008CE26 01                         	dc.b	$01
0008CE27 E1F8                       	smpsAlterNote       $F8
0008CE29 01                         	dc.b	$01
0008CE2A E1FC                       	smpsAlterNote       $FC
0008CE2C 01                         	dc.b	$01
0008CE2D E101                       	smpsAlterNote       $01
0008CE2F 01                         	dc.b	$01
0008CE30 E102                       	smpsAlterNote       $02
0008CE32 01                         	dc.b	$01
0008CE33 E1FF                       	smpsAlterNote       $FF
0008CE35 01                         	dc.b	$01
0008CE36 E1FB                       	smpsAlterNote       $FB
0008CE38 ECF5                       	smpsPSGAlterVol     $F5
0008CE3A 8D0D                       	dc.b	nC1, $0D
0008CE3C E101                       	smpsAlterNote       $01
0008CE3E EC0B                       	smpsPSGAlterVol     $0B
0008CE40 8001                       	dc.b	nRst, $01
0008CE42 E102                       	smpsAlterNote       $02
0008CE44 01                         	dc.b	$01
0008CE45 E1FF                       	smpsAlterNote       $FF
0008CE47 01                         	dc.b	$01
0008CE48 E1F9                       	smpsAlterNote       $F9
0008CE4A 0101                       	dc.b	$01, $01
0008CE4C E1FC                       	smpsAlterNote       $FC
0008CE4E 01                         	dc.b	$01
0008CE4F E101                       	smpsAlterNote       $01
0008CE51 0101                       	dc.b	$01, $01
0008CE53 E1FC                       	smpsAlterNote       $FC
0008CE55 01                         	dc.b	$01
0008CE56 E1F9                       	smpsAlterNote       $F9
0008CE58 0101                       	dc.b	$01, $01
0008CE5A E1FF                       	smpsAlterNote       $FF
0008CE5C 01                         	dc.b	$01
0008CE5D E102                       	smpsAlterNote       $02
0008CE5F 01                         	dc.b	$01
0008CE60 E101                       	smpsAlterNote       $01
0008CE62 01                         	dc.b	$01
0008CE63 E1FC                       	smpsAlterNote       $FC
0008CE65 ECF5                       	smpsPSGAlterVol     $F5
0008CE67 8F0D                       	dc.b	nD1, $0D
0008CE69 E1FF                       	smpsAlterNote       $FF
0008CE6B EC04                       	smpsPSGAlterVol     $04
0008CE6D E701                       	dc.b	smpsNoAttack, $01
0008CE6F EC07                       	smpsPSGAlterVol     $07
0008CE71 E103                       	smpsAlterNote       $03
0008CE73 8001                       	dc.b	nRst, $01
0008CE75 E102                       	smpsAlterNote       $02
0008CE77 01                         	dc.b	$01
0008CE78 E1FD                       	smpsAlterNote       $FD
0008CE7A 01                         	dc.b	$01
0008CE7B E1F9                       	smpsAlterNote       $F9
0008CE7D 01                         	dc.b	$01
0008CE7E E1FD                       	smpsAlterNote       $FD
0008CE80 01                         	dc.b	$01
0008CE81 E100                       	smpsAlterNote       $00
0008CE83 01                         	dc.b	$01
0008CE84 E103                       	smpsAlterNote       $03
0008CE86 01                         	dc.b	$01
0008CE87 E100                       	smpsAlterNote       $00
0008CE89 01                         	dc.b	$01
0008CE8A E1FA                       	smpsAlterNote       $FA
0008CE8C 01                         	dc.b	$01
0008CE8D E1F9                       	smpsAlterNote       $F9
0008CE8F 01                         	dc.b	$01
0008CE90 E1FD                       	smpsAlterNote       $FD
0008CE92 01                         	dc.b	$01
0008CE93 E102                       	smpsAlterNote       $02
0008CE95 0101                       	dc.b	$01, $01
0008CE97 E100                       	smpsAlterNote       $00
0008CE99 01                         	dc.b	$01
0008CE9A E1FD                       	smpsAlterNote       $FD
0008CE9C ECF5                       	smpsPSGAlterVol     $F5
0008CE9E 910D                       	dc.b	nE1, $0D
0008CEA0 E103                       	smpsAlterNote       $03
0008CEA2 EC0B                       	smpsPSGAlterVol     $0B
0008CEA4 8001 01                    	dc.b	nRst, $01, $01
0008CEA7 E100                       	smpsAlterNote       $00
0008CEA9 01                         	dc.b	$01
0008CEAA E1FA                       	smpsAlterNote       $FA
0008CEAC 0101                       	dc.b	$01, $01
0008CEAE E100                       	smpsAlterNote       $00
0008CEB0 01                         	dc.b	$01
0008CEB1 E103                       	smpsAlterNote       $03
0008CEB3 01                         	dc.b	$01
0008CEB4 E1FD                       	smpsAlterNote       $FD
0008CEB6 ECF5                       	smpsPSGAlterVol     $F5
0008CEB8 9206                       	dc.b	nF1, $06
0008CEBA EC04                       	smpsPSGAlterVol     $04
0008CEBC E701                       	dc.b	smpsNoAttack, $01
0008CEBE EC07                       	smpsPSGAlterVol     $07
0008CEC0 8003                       	dc.b	nRst, $03
0008CEC2 ECF5                       	smpsPSGAlterVol     $F5
0008CEC4 9207                       	dc.b	nF1, $07
0008CEC6 EC0B                       	smpsPSGAlterVol     $0B
0008CEC8 8006                       	dc.b	nRst, $06
0008CECA E100                       	smpsAlterNote       $00
0008CECC 01                         	dc.b	$01
0008CECD E103                       	smpsAlterNote       $03
0008CECF 0101                       	dc.b	$01, $01
0008CED1 E1FD                       	smpsAlterNote       $FD
0008CED3 01                         	dc.b	$01
0008CED4 ECF5                       	smpsPSGAlterVol     $F5
0008CED6 9407                       	dc.b	nG1, $07
0008CED8 EC0B                       	smpsPSGAlterVol     $0B
0008CEDA 8004                       	dc.b	nRst, $04
0008CEDC ECF5                       	smpsPSGAlterVol     $F5
0008CEDE 9406                       	dc.b	nG1, $06
0008CEE0 EC04                       	smpsPSGAlterVol     $04
0008CEE2 E701                       	dc.b	smpsNoAttack, $01
0008CEE4 EC07                       	smpsPSGAlterVol     $07
0008CEE6 8006                       	dc.b	nRst, $06
0008CEE8 E103                       	smpsAlterNote       $03
0008CEEA 01                         	dc.b	$01
0008CEEB E104                       	smpsAlterNote       $04
0008CEED 01                         	dc.b	$01
0008CEEE E100                       	smpsAlterNote       $00
0008CEF0 01                         	dc.b	$01
0008CEF1 E1F9                       	smpsAlterNote       $F9
0008CEF3 01                         	dc.b	$01
0008CEF4 E1FD                       	smpsAlterNote       $FD
0008CEF6 ECF5                       	smpsPSGAlterVol     $F5
0008CEF8 9206                       	dc.b	nF1, $06
0008CEFA EC04                       	smpsPSGAlterVol     $04
0008CEFC E701                       	dc.b	smpsNoAttack, $01
0008CEFE EC07                       	smpsPSGAlterVol     $07
0008CF00 8003                       	dc.b	nRst, $03
0008CF02 ECF5                       	smpsPSGAlterVol     $F5
0008CF04 9206                       	dc.b	nF1, $06
0008CF06 EC04                       	smpsPSGAlterVol     $04
0008CF08 E701                       	dc.b	smpsNoAttack, $01
0008CF0A EC07                       	smpsPSGAlterVol     $07
0008CF0C 8006                       	dc.b	nRst, $06
0008CF0E E100                       	smpsAlterNote       $00
0008CF10 01                         	dc.b	$01
0008CF11 E104                       	smpsAlterNote       $04
0008CF13 01                         	dc.b	$01
0008CF14 E103                       	smpsAlterNote       $03
0008CF16 01                         	dc.b	$01
0008CF17 E1FD                       	smpsAlterNote       $FD
0008CF19 01                         	dc.b	$01
0008CF1A ECF5                       	smpsPSGAlterVol     $F5
0008CF1C 9407                       	dc.b	nG1, $07
0008CF1E EC0B                       	smpsPSGAlterVol     $0B
0008CF20 8004                       	dc.b	nRst, $04
0008CF22 ECF5                       	smpsPSGAlterVol     $F5
0008CF24 9406                       	dc.b	nG1, $06
0008CF26 EC0B                       	smpsPSGAlterVol     $0B
0008CF28 8007                       	dc.b	nRst, $07
0008CF2A E103                       	smpsAlterNote       $03
0008CF2C 0101                       	dc.b	$01, $01
0008CF2E E100                       	smpsAlterNote       $00
0008CF30 01                         	dc.b	$01
0008CF31 E1F9                       	smpsAlterNote       $F9
0008CF33 01                         	dc.b	$01
0008CF34 E1FD                       	smpsAlterNote       $FD
0008CF36 ECF5                       	smpsPSGAlterVol     $F5
0008CF38 9206                       	dc.b	nF1, $06
0008CF3A EC04                       	smpsPSGAlterVol     $04
0008CF3C E701                       	dc.b	smpsNoAttack, $01
0008CF3E EC07                       	smpsPSGAlterVol     $07
0008CF40 8003                       	dc.b	nRst, $03
0008CF42 ECF5                       	smpsPSGAlterVol     $F5
0008CF44 9206                       	dc.b	nF1, $06
0008CF46 EC04                       	smpsPSGAlterVol     $04
0008CF48 E701                       	dc.b	smpsNoAttack, $01
0008CF4A EC07                       	smpsPSGAlterVol     $07
0008CF4C 8006                       	dc.b	nRst, $06
0008CF4E E100                       	smpsAlterNote       $00
0008CF50 01                         	dc.b	$01
0008CF51 E104                       	smpsAlterNote       $04
0008CF53 01                         	dc.b	$01
0008CF54 E100                       	smpsAlterNote       $00
0008CF56 01                         	dc.b	$01
0008CF57 E1FB                       	smpsAlterNote       $FB
0008CF59 01                         	dc.b	$01
0008CF5A E1FD                       	smpsAlterNote       $FD
0008CF5C ECF5                       	smpsPSGAlterVol     $F5
0008CF5E 9406                       	dc.b	nG1, $06
0008CF60 EC04                       	smpsPSGAlterVol     $04
0008CF62 E701                       	dc.b	smpsNoAttack, $01
0008CF64 EC07                       	smpsPSGAlterVol     $07
0008CF66 8003                       	dc.b	nRst, $03
0008CF68 ECF5                       	smpsPSGAlterVol     $F5
0008CF6A 9407                       	dc.b	nG1, $07
0008CF6C EC0B                       	smpsPSGAlterVol     $0B
0008CF6E 8006                       	dc.b	nRst, $06
0008CF70 E100                       	smpsAlterNote       $00
0008CF72 01                         	dc.b	$01
0008CF73 E103                       	smpsAlterNote       $03
0008CF75 0101                       	dc.b	$01, $01
0008CF77 E1FD                       	smpsAlterNote       $FD
0008CF79 01                         	dc.b	$01
0008CF7A ECF5                       	smpsPSGAlterVol     $F5
0008CF7C 9207                       	dc.b	nF1, $07
0008CF7E EC0B                       	smpsPSGAlterVol     $0B
0008CF80 8004                       	dc.b	nRst, $04
0008CF82 ECF5                       	smpsPSGAlterVol     $F5
0008CF84 9206                       	dc.b	nF1, $06
0008CF86 EC04                       	smpsPSGAlterVol     $04
0008CF88 E701                       	dc.b	smpsNoAttack, $01
0008CF8A ECFC                       	smpsPSGAlterVol     $FC
0008CF8C E1FC                       	smpsAlterNote       $FC
0008CF8E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008CF92 EC04                       	smpsPSGAlterVol     $04
0008CF94 E701                       	dc.b	smpsNoAttack, $01
0008CF96 ECFC                       	smpsPSGAlterVol     $FC
0008CF98 9003                       	dc.b	nEb1, $03
0008CF9A E1FD                       	smpsAlterNote       $FD
0008CF9C 9403                       	dc.b	nG1, $03
0008CF9E EC04                       	smpsPSGAlterVol     $04
0008CFA0 E701                       	dc.b	smpsNoAttack, $01
0008CFA2 E1FE                       	smpsAlterNote       $FE
0008CFA4 ECFC                       	smpsPSGAlterVol     $FC
0008CFA6 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008CFAA EC04                       	smpsPSGAlterVol     $04
0008CFAC E701                       	dc.b	smpsNoAttack, $01
0008CFAE EC07                       	smpsPSGAlterVol     $07
0008CFB0 8009                       	dc.b	nRst, $09
0008CFB2 E100                       	smpsAlterNote       $00
0008CFB4 01                         	dc.b	$01
0008CFB5 F6F5 19                    	smpsJump            music84_Jump07
0008CFB8                            
0008CFB8                            ; PSG2 Data
0008CFB8                            music84_PSG2:
0008CFB8 E1FC                       	smpsAlterNote       $FC
0008CFBA EC04                       	smpsPSGAlterVol     $04
0008CFBC 8F03                       	dc.b	nD1, $03
0008CFBE E1FD                       	smpsAlterNote       $FD
0008CFC0 9203                       	dc.b	nF1, $03
0008CFC2 EC04                       	smpsPSGAlterVol     $04
0008CFC4 E701                       	dc.b	smpsNoAttack, $01
0008CFC6 E1FE                       	smpsAlterNote       $FE
0008CFC8 ECFC                       	smpsPSGAlterVol     $FC
0008CFCA 9603                       	dc.b	nA1, $03
0008CFCC E1FD                       	smpsAlterNote       $FD
0008CFCE 9103                       	dc.b	nE1, $03
0008CFD0 EC04                       	smpsPSGAlterVol     $04
0008CFD2 E701                       	dc.b	smpsNoAttack, $01
0008CFD4 ECFC                       	smpsPSGAlterVol     $FC
0008CFD6 9403                       	dc.b	nG1, $03
0008CFD8 E1FE                       	smpsAlterNote       $FE
0008CFDA 9703                       	dc.b	nBb1, $03
0008CFDC EC04                       	smpsPSGAlterVol     $04
0008CFDE E701                       	dc.b	smpsNoAttack, $01
0008CFE0 E1FF                       	smpsAlterNote       $FF
0008CFE2 ECFC                       	smpsPSGAlterVol     $FC
0008CFE4 9B02                       	dc.b	nD2, $02
0008CFE6 EC04                       	smpsPSGAlterVol     $04
0008CFE8 E701                       	dc.b	smpsNoAttack, $01
0008CFEA ECFC                       	smpsPSGAlterVol     $FC
0008CFEC E1FE                       	smpsAlterNote       $FE
0008CFEE 9A03                       	dc.b	nCs2, $03
0008CFF0 EC0B                       	smpsPSGAlterVol     $0B
0008CFF2 800A                       	dc.b	nRst, $0A
0008CFF4 E102                       	smpsAlterNote       $02
0008CFF6 01                         	dc.b	$01
0008CFF7 E10A                       	smpsAlterNote       $0A
0008CFF9 01                         	dc.b	$01
0008CFFA E102                       	smpsAlterNote       $02
0008CFFC 01                         	dc.b	$01
0008CFFD E1FC                       	smpsAlterNote       $FC
0008CFFF 01                         	dc.b	$01
0008D000 E10A                       	smpsAlterNote       $0A
0008D002 01                         	dc.b	$01
0008D003 E1FC                       	smpsAlterNote       $FC
0008D005 01                         	dc.b	$01
0008D006 E108                       	smpsAlterNote       $08
0008D008 01                         	dc.b	$01
0008D009 E10A                       	smpsAlterNote       $0A
0008D00B 01                         	dc.b	$01
0008D00C E102                       	smpsAlterNote       $02
0008D00E 01                         	dc.b	$01
0008D00F E1F7                       	smpsAlterNote       $F7
0008D011 0101                       	dc.b	$01, $01
0008D013 E102                       	smpsAlterNote       $02
0008D015 01                         	dc.b	$01
0008D016 E108                       	smpsAlterNote       $08
0008D018 0101                       	dc.b	$01, $01
0008D01A E1FC                       	smpsAlterNote       $FC
0008D01C 01                         	dc.b	$01
0008D01D E10A                       	smpsAlterNote       $0A
0008D01F 01                         	dc.b	$01
0008D020 E1F7                       	smpsAlterNote       $F7
0008D022 01                         	dc.b	$01
0008D023 E102                       	smpsAlterNote       $02
0008D025 01                         	dc.b	$01
0008D026 E10A                       	smpsAlterNote       $0A
0008D028 01                         	dc.b	$01
0008D029 E102                       	smpsAlterNote       $02
0008D02B 01                         	dc.b	$01
0008D02C E1FC                       	smpsAlterNote       $FC
0008D02E 01                         	dc.b	$01
0008D02F                            
0008D02F                            music84_Jump06:
0008D02F E10A                       	smpsAlterNote       $0A
0008D031 8001                       	dc.b	nRst, $01
0008D033 E1FC                       	smpsAlterNote       $FC
0008D035 01                         	dc.b	$01
0008D036 E108                       	smpsAlterNote       $08
0008D038 01                         	dc.b	$01
0008D039 E10A                       	smpsAlterNote       $0A
0008D03B 01                         	dc.b	$01
0008D03C E1FC                       	smpsAlterNote       $FC
0008D03E ECF5                       	smpsPSGAlterVol     $F5
0008D040 8F06                       	dc.b	nD1, $06
0008D042 EC04                       	smpsPSGAlterVol     $04
0008D044 E701                       	dc.b	smpsNoAttack, $01
0008D046 EC07                       	smpsPSGAlterVol     $07
0008D048 8003                       	dc.b	nRst, $03
0008D04A ECF5                       	smpsPSGAlterVol     $F5
0008D04C 8F06                       	dc.b	nD1, $06
0008D04E EC04                       	smpsPSGAlterVol     $04
0008D050 E701                       	dc.b	smpsNoAttack, $01
0008D052 EC07                       	smpsPSGAlterVol     $07
0008D054 8006                       	dc.b	nRst, $06
0008D056 E1FF                       	smpsAlterNote       $FF
0008D058 01                         	dc.b	$01
0008D059 E102                       	smpsAlterNote       $02
0008D05B 01                         	dc.b	$01
0008D05C E1FF                       	smpsAlterNote       $FF
0008D05E 01                         	dc.b	$01
0008D05F E1F9                       	smpsAlterNote       $F9
0008D061 01                         	dc.b	$01
0008D062 E1FC                       	smpsAlterNote       $FC
0008D064 ECF5                       	smpsPSGAlterVol     $F5
0008D066 9006                       	dc.b	nEb1, $06
0008D068 EC04                       	smpsPSGAlterVol     $04
0008D06A E701                       	dc.b	smpsNoAttack, $01
0008D06C EC07                       	smpsPSGAlterVol     $07
0008D06E 8003                       	dc.b	nRst, $03
0008D070 ECF5                       	smpsPSGAlterVol     $F5
0008D072 9007                       	dc.b	nEb1, $07
0008D074 EC0B                       	smpsPSGAlterVol     $0B
0008D076 8006                       	dc.b	nRst, $06
0008D078 E1FF                       	smpsAlterNote       $FF
0008D07A 01                         	dc.b	$01
0008D07B E103                       	smpsAlterNote       $03
0008D07D 0101                       	dc.b	$01, $01
0008D07F E1FC                       	smpsAlterNote       $FC
0008D081 01                         	dc.b	$01
0008D082 ECF5                       	smpsPSGAlterVol     $F5
0008D084 8F07                       	dc.b	nD1, $07
0008D086 EC0B                       	smpsPSGAlterVol     $0B
0008D088 8004                       	dc.b	nRst, $04
0008D08A ECF5                       	smpsPSGAlterVol     $F5
0008D08C 8F06                       	dc.b	nD1, $06
0008D08E EC04                       	smpsPSGAlterVol     $04
0008D090 E701                       	dc.b	smpsNoAttack, $01
0008D092 EC07                       	smpsPSGAlterVol     $07
0008D094 8006                       	dc.b	nRst, $06
0008D096 E102                       	smpsAlterNote       $02
0008D098 01                         	dc.b	$01
0008D099 E103                       	smpsAlterNote       $03
0008D09B 01                         	dc.b	$01
0008D09C E1FF                       	smpsAlterNote       $FF
0008D09E 01                         	dc.b	$01
0008D09F E1F9                       	smpsAlterNote       $F9
0008D0A1 01                         	dc.b	$01
0008D0A2 E1FC                       	smpsAlterNote       $FC
0008D0A4 ECF5                       	smpsPSGAlterVol     $F5
0008D0A6 8F06                       	dc.b	nD1, $06
0008D0A8 EC04                       	smpsPSGAlterVol     $04
0008D0AA E701                       	dc.b	smpsNoAttack, $01
0008D0AC EC07                       	smpsPSGAlterVol     $07
0008D0AE 8003                       	dc.b	nRst, $03
0008D0B0 ECF5                       	smpsPSGAlterVol     $F5
0008D0B2 8F06                       	dc.b	nD1, $06
0008D0B4 EC04                       	smpsPSGAlterVol     $04
0008D0B6 E701                       	dc.b	smpsNoAttack, $01
0008D0B8 EC07                       	smpsPSGAlterVol     $07
0008D0BA 8006                       	dc.b	nRst, $06
0008D0BC E1FF                       	smpsAlterNote       $FF
0008D0BE 01                         	dc.b	$01
0008D0BF E103                       	smpsAlterNote       $03
0008D0C1 01                         	dc.b	$01
0008D0C2 E1FF                       	smpsAlterNote       $FF
0008D0C4 01                         	dc.b	$01
0008D0C5 E1FC                       	smpsAlterNote       $FC
0008D0C7 01                         	dc.b	$01
0008D0C8 ECF5                       	smpsPSGAlterVol     $F5
0008D0CA 8F06                       	dc.b	nD1, $06
0008D0CC EC04                       	smpsPSGAlterVol     $04
0008D0CE E701                       	dc.b	smpsNoAttack, $01
0008D0D0 EC07                       	smpsPSGAlterVol     $07
0008D0D2 8003                       	dc.b	nRst, $03
0008D0D4 ECF5                       	smpsPSGAlterVol     $F5
0008D0D6 8F07                       	dc.b	nD1, $07
0008D0D8 EC0B                       	smpsPSGAlterVol     $0B
0008D0DA 8007                       	dc.b	nRst, $07
0008D0DC E101                       	smpsAlterNote       $01
0008D0DE 0101                       	dc.b	$01, $01
0008D0E0 E1FC                       	smpsAlterNote       $FC
0008D0E2 01                         	dc.b	$01
0008D0E3 E1F9                       	smpsAlterNote       $F9
0008D0E5 01                         	dc.b	$01
0008D0E6 E1FC                       	smpsAlterNote       $FC
0008D0E8 ECF5                       	smpsPSGAlterVol     $F5
0008D0EA 9006                       	dc.b	nEb1, $06
0008D0EC EC0B                       	smpsPSGAlterVol     $0B
0008D0EE 8004                       	dc.b	nRst, $04
0008D0F0 ECF5                       	smpsPSGAlterVol     $F5
0008D0F2 9006                       	dc.b	nEb1, $06
0008D0F4 EC04                       	smpsPSGAlterVol     $04
0008D0F6 E701                       	dc.b	smpsNoAttack, $01
0008D0F8 EC07                       	smpsPSGAlterVol     $07
0008D0FA 8006                       	dc.b	nRst, $06
0008D0FC E100                       	smpsAlterNote       $00
0008D0FE 01                         	dc.b	$01
0008D0FF E102                       	smpsAlterNote       $02
0008D101 01                         	dc.b	$01
0008D102 E100                       	smpsAlterNote       $00
0008D104 01                         	dc.b	$01
0008D105 E1FD                       	smpsAlterNote       $FD
0008D107 01                         	dc.b	$01
0008D108 E1FF                       	smpsAlterNote       $FF
0008D10A ECF5                       	smpsPSGAlterVol     $F5
0008D10C 9B06                       	dc.b	nD2, $06
0008D10E EC04                       	smpsPSGAlterVol     $04
0008D110 E701                       	dc.b	smpsNoAttack, $01
0008D112 EC07                       	smpsPSGAlterVol     $07
0008D114 8003                       	dc.b	nRst, $03
0008D116 ECF5                       	smpsPSGAlterVol     $F5
0008D118 9B07                       	dc.b	nD2, $07
0008D11A EC0B                       	smpsPSGAlterVol     $0B
0008D11C 8006                       	dc.b	nRst, $06
0008D11E E102                       	smpsAlterNote       $02
0008D120 01                         	dc.b	$01
0008D121 E106                       	smpsAlterNote       $06
0008D123 01                         	dc.b	$01
0008D124 E105                       	smpsAlterNote       $05
0008D126 01                         	dc.b	$01
0008D127 E1FF                       	smpsAlterNote       $FF
0008D129 01                         	dc.b	$01
0008D12A ECF5                       	smpsPSGAlterVol     $F5
0008D12C 9B07                       	dc.b	nD2, $07
0008D12E EC0B                       	smpsPSGAlterVol     $0B
0008D130 8004                       	dc.b	nRst, $04
0008D132 ECF5                       	smpsPSGAlterVol     $F5
0008D134 9B06                       	dc.b	nD2, $06
0008D136 EC0B                       	smpsPSGAlterVol     $0B
0008D138 8007                       	dc.b	nRst, $07
0008D13A E105                       	smpsAlterNote       $05
0008D13C 0101                       	dc.b	$01, $01
0008D13E E102                       	smpsAlterNote       $02
0008D140 01                         	dc.b	$01
0008D141 E1FC                       	smpsAlterNote       $FC
0008D143 01                         	dc.b	$01
0008D144 E1FF                       	smpsAlterNote       $FF
0008D146 ECF5                       	smpsPSGAlterVol     $F5
0008D148 9B06                       	dc.b	nD2, $06
0008D14A EC04                       	smpsPSGAlterVol     $04
0008D14C E701                       	dc.b	smpsNoAttack, $01
0008D14E EC07                       	smpsPSGAlterVol     $07
0008D150 8003                       	dc.b	nRst, $03
0008D152 ECF5                       	smpsPSGAlterVol     $F5
0008D154 9B06                       	dc.b	nD2, $06
0008D156 EC04                       	smpsPSGAlterVol     $04
0008D158 E701                       	dc.b	smpsNoAttack, $01
0008D15A EC07                       	smpsPSGAlterVol     $07
0008D15C 8006                       	dc.b	nRst, $06
0008D15E E102                       	smpsAlterNote       $02
0008D160 01                         	dc.b	$01
0008D161 E106                       	smpsAlterNote       $06
0008D163 01                         	dc.b	$01
0008D164 E102                       	smpsAlterNote       $02
0008D166 01                         	dc.b	$01
0008D167 E1FF                       	smpsAlterNote       $FF
0008D169 01                         	dc.b	$01
0008D16A ECF5                       	smpsPSGAlterVol     $F5
0008D16C 9B06                       	dc.b	nD2, $06
0008D16E EC04                       	smpsPSGAlterVol     $04
0008D170 E701                       	dc.b	smpsNoAttack, $01
0008D172 EC07                       	smpsPSGAlterVol     $07
0008D174 8003                       	dc.b	nRst, $03
0008D176 ECF5                       	smpsPSGAlterVol     $F5
0008D178 9B07                       	dc.b	nD2, $07
0008D17A EC0B                       	smpsPSGAlterVol     $0B
0008D17C 8007                       	dc.b	nRst, $07
0008D17E E105                       	smpsAlterNote       $05
0008D180 0101                       	dc.b	$01, $01
0008D182 E1FF                       	smpsAlterNote       $FF
0008D184 01                         	dc.b	$01
0008D185 E1FC                       	smpsAlterNote       $FC
0008D187 01                         	dc.b	$01
0008D188 E1FF                       	smpsAlterNote       $FF
0008D18A ECF5                       	smpsPSGAlterVol     $F5
0008D18C 9B06                       	dc.b	nD2, $06
0008D18E EC0B                       	smpsPSGAlterVol     $0B
0008D190 8004                       	dc.b	nRst, $04
0008D192 ECF5                       	smpsPSGAlterVol     $F5
0008D194 9B06                       	dc.b	nD2, $06
0008D196 EC04                       	smpsPSGAlterVol     $04
0008D198 E701                       	dc.b	smpsNoAttack, $01
0008D19A EC07                       	smpsPSGAlterVol     $07
0008D19C 8006                       	dc.b	nRst, $06
0008D19E E105                       	smpsAlterNote       $05
0008D1A0 01                         	dc.b	$01
0008D1A1 E106                       	smpsAlterNote       $06
0008D1A3 01                         	dc.b	$01
0008D1A4 E102                       	smpsAlterNote       $02
0008D1A6 01                         	dc.b	$01
0008D1A7 E1FC                       	smpsAlterNote       $FC
0008D1A9 01                         	dc.b	$01
0008D1AA E1FF                       	smpsAlterNote       $FF
0008D1AC ECF5                       	smpsPSGAlterVol     $F5
0008D1AE 9B06                       	dc.b	nD2, $06
0008D1B0 EC04                       	smpsPSGAlterVol     $04
0008D1B2 E701                       	dc.b	smpsNoAttack, $01
0008D1B4 EC07                       	smpsPSGAlterVol     $07
0008D1B6 8003                       	dc.b	nRst, $03
0008D1B8 ECF5                       	smpsPSGAlterVol     $F5
0008D1BA 9B06                       	dc.b	nD2, $06
0008D1BC EC04                       	smpsPSGAlterVol     $04
0008D1BE E701                       	dc.b	smpsNoAttack, $01
0008D1C0 EC07                       	smpsPSGAlterVol     $07
0008D1C2 8006                       	dc.b	nRst, $06
0008D1C4 E102                       	smpsAlterNote       $02
0008D1C6 01                         	dc.b	$01
0008D1C7 E106                       	smpsAlterNote       $06
0008D1C9 01                         	dc.b	$01
0008D1CA E105                       	smpsAlterNote       $05
0008D1CC 01                         	dc.b	$01
0008D1CD E1FF                       	smpsAlterNote       $FF
0008D1CF 01                         	dc.b	$01
0008D1D0 ECF5                       	smpsPSGAlterVol     $F5
0008D1D2 9B07                       	dc.b	nD2, $07
0008D1D4 EC0B                       	smpsPSGAlterVol     $0B
0008D1D6 8004                       	dc.b	nRst, $04
0008D1D8 ECF5                       	smpsPSGAlterVol     $F5
0008D1DA 9B06                       	dc.b	nD2, $06
0008D1DC EC0B                       	smpsPSGAlterVol     $0B
0008D1DE 8007                       	dc.b	nRst, $07
0008D1E0 E105                       	smpsAlterNote       $05
0008D1E2 0101                       	dc.b	$01, $01
0008D1E4 E102                       	smpsAlterNote       $02
0008D1E6 01                         	dc.b	$01
0008D1E7 E1FC                       	smpsAlterNote       $FC
0008D1E9 01                         	dc.b	$01
0008D1EA E1FF                       	smpsAlterNote       $FF
0008D1EC ECF5                       	smpsPSGAlterVol     $F5
0008D1EE 9B06                       	dc.b	nD2, $06
0008D1F0 EC04                       	smpsPSGAlterVol     $04
0008D1F2 E701                       	dc.b	smpsNoAttack, $01
0008D1F4 EC07                       	smpsPSGAlterVol     $07
0008D1F6 8003                       	dc.b	nRst, $03
0008D1F8 ECF5                       	smpsPSGAlterVol     $F5
0008D1FA 9B06                       	dc.b	nD2, $06
0008D1FC EC04                       	smpsPSGAlterVol     $04
0008D1FE E701                       	dc.b	smpsNoAttack, $01
0008D200 EC07                       	smpsPSGAlterVol     $07
0008D202 8006                       	dc.b	nRst, $06
0008D204 E102                       	smpsAlterNote       $02
0008D206 01                         	dc.b	$01
0008D207 E106                       	smpsAlterNote       $06
0008D209 01                         	dc.b	$01
0008D20A E102                       	smpsAlterNote       $02
0008D20C 01                         	dc.b	$01
0008D20D E1FF                       	smpsAlterNote       $FF
0008D20F 01                         	dc.b	$01
0008D210 ECF5                       	smpsPSGAlterVol     $F5
0008D212 9B06                       	dc.b	nD2, $06
0008D214 EC04                       	smpsPSGAlterVol     $04
0008D216 E701                       	dc.b	smpsNoAttack, $01
0008D218 EC07                       	smpsPSGAlterVol     $07
0008D21A 8003                       	dc.b	nRst, $03
0008D21C ECF5                       	smpsPSGAlterVol     $F5
0008D21E 9B07                       	dc.b	nD2, $07
0008D220 E1FE                       	smpsAlterNote       $FE
0008D222 9706                       	dc.b	nBb1, $06
0008D224 EC04                       	smpsPSGAlterVol     $04
0008D226 E701                       	dc.b	smpsNoAttack, $01
0008D228 ECFC                       	smpsPSGAlterVol     $FC
0008D22A 9703                       	dc.b	nBb1, $03
0008D22C EC04                       	smpsPSGAlterVol     $04
0008D22E E701                       	dc.b	smpsNoAttack, $01
0008D230 ECFC                       	smpsPSGAlterVol     $FC
0008D232 9702                       	dc.b	nBb1, $02
0008D234 EC04                       	smpsPSGAlterVol     $04
0008D236 E701                       	dc.b	smpsNoAttack, $01
0008D238 ECFC                       	smpsPSGAlterVol     $FC
0008D23A 9606                       	dc.b	nA1, $06
0008D23C EC04                       	smpsPSGAlterVol     $04
0008D23E E701                       	dc.b	smpsNoAttack, $01
0008D240 EC07                       	smpsPSGAlterVol     $07
0008D242 8006                       	dc.b	nRst, $06
0008D244 E101                       	smpsAlterNote       $01
0008D246 01                         	dc.b	$01
0008D247 E107                       	smpsAlterNote       $07
0008D249 01                         	dc.b	$01
0008D24A E101                       	smpsAlterNote       $01
0008D24C 01                         	dc.b	$01
0008D24D E1F8                       	smpsAlterNote       $F8
0008D24F 01                         	dc.b	$01
0008D250 E1F7                       	smpsAlterNote       $F7
0008D252 01                         	dc.b	$01
0008D253 E1FC                       	smpsAlterNote       $FC
0008D255 01                         	dc.b	$01
0008D256 E106                       	smpsAlterNote       $06
0008D258 01                         	dc.b	$01
0008D259 E107                       	smpsAlterNote       $07
0008D25B 01                         	dc.b	$01
0008D25C E101                       	smpsAlterNote       $01
0008D25E 01                         	dc.b	$01
0008D25F E1F8                       	smpsAlterNote       $F8
0008D261 0101                       	dc.b	$01, $01
0008D263 E1FC                       	smpsAlterNote       $FC
0008D265 ECF5                       	smpsPSGAlterVol     $F5
0008D267 8F06                       	dc.b	nD1, $06
0008D269 EC04                       	smpsPSGAlterVol     $04
0008D26B E701                       	dc.b	smpsNoAttack, $01
0008D26D EC07                       	smpsPSGAlterVol     $07
0008D26F 8003                       	dc.b	nRst, $03
0008D271 ECF5                       	smpsPSGAlterVol     $F5
0008D273 8F06                       	dc.b	nD1, $06
0008D275 EC04                       	smpsPSGAlterVol     $04
0008D277 E701                       	dc.b	smpsNoAttack, $01
0008D279 EC07                       	smpsPSGAlterVol     $07
0008D27B 8006                       	dc.b	nRst, $06
0008D27D E1FF                       	smpsAlterNote       $FF
0008D27F 01                         	dc.b	$01
0008D280 E102                       	smpsAlterNote       $02
0008D282 01                         	dc.b	$01
0008D283 E101                       	smpsAlterNote       $01
0008D285 01                         	dc.b	$01
0008D286 E1FC                       	smpsAlterNote       $FC
0008D288 01                         	dc.b	$01
0008D289 ECF5                       	smpsPSGAlterVol     $F5
0008D28B 9007                       	dc.b	nEb1, $07
0008D28D EC0B                       	smpsPSGAlterVol     $0B
0008D28F 8004                       	dc.b	nRst, $04
0008D291 ECF5                       	smpsPSGAlterVol     $F5
0008D293 9006                       	dc.b	nEb1, $06
0008D295 EC0B                       	smpsPSGAlterVol     $0B
0008D297 8007                       	dc.b	nRst, $07
0008D299 E103                       	smpsAlterNote       $03
0008D29B 0101                       	dc.b	$01, $01
0008D29D E1FC                       	smpsAlterNote       $FC
0008D29F 01                         	dc.b	$01
0008D2A0 E1F9                       	smpsAlterNote       $F9
0008D2A2 01                         	dc.b	$01
0008D2A3 E1FC                       	smpsAlterNote       $FC
0008D2A5 ECF5                       	smpsPSGAlterVol     $F5
0008D2A7 8F06                       	dc.b	nD1, $06
0008D2A9 EC04                       	smpsPSGAlterVol     $04
0008D2AB E701                       	dc.b	smpsNoAttack, $01
0008D2AD EC07                       	smpsPSGAlterVol     $07
0008D2AF 8003                       	dc.b	nRst, $03
0008D2B1 ECF5                       	smpsPSGAlterVol     $F5
0008D2B3 8F06                       	dc.b	nD1, $06
0008D2B5 EC04                       	smpsPSGAlterVol     $04
0008D2B7 E701                       	dc.b	smpsNoAttack, $01
0008D2B9 EC07                       	smpsPSGAlterVol     $07
0008D2BB 8006                       	dc.b	nRst, $06
0008D2BD E1FF                       	smpsAlterNote       $FF
0008D2BF 01                         	dc.b	$01
0008D2C0 E103                       	smpsAlterNote       $03
0008D2C2 01                         	dc.b	$01
0008D2C3 E1FF                       	smpsAlterNote       $FF
0008D2C5 01                         	dc.b	$01
0008D2C6 E1F9                       	smpsAlterNote       $F9
0008D2C8 01                         	dc.b	$01
0008D2C9 E1FC                       	smpsAlterNote       $FC
0008D2CB ECF5                       	smpsPSGAlterVol     $F5
0008D2CD 8F06                       	dc.b	nD1, $06
0008D2CF EC04                       	smpsPSGAlterVol     $04
0008D2D1 E701                       	dc.b	smpsNoAttack, $01
0008D2D3 EC07                       	smpsPSGAlterVol     $07
0008D2D5 8003                       	dc.b	nRst, $03
0008D2D7 ECF5                       	smpsPSGAlterVol     $F5
0008D2D9 8F07                       	dc.b	nD1, $07
0008D2DB EC0B                       	smpsPSGAlterVol     $0B
0008D2DD 8006                       	dc.b	nRst, $06
0008D2DF E1FF                       	smpsAlterNote       $FF
0008D2E1 01                         	dc.b	$01
0008D2E2 E102                       	smpsAlterNote       $02
0008D2E4 0101                       	dc.b	$01, $01
0008D2E6 E1FC                       	smpsAlterNote       $FC
0008D2E8 01                         	dc.b	$01
0008D2E9 ECF5                       	smpsPSGAlterVol     $F5
0008D2EB 8F07                       	dc.b	nD1, $07
0008D2ED EC0B                       	smpsPSGAlterVol     $0B
0008D2EF 8004                       	dc.b	nRst, $04
0008D2F1 ECF5                       	smpsPSGAlterVol     $F5
0008D2F3 8F06                       	dc.b	nD1, $06
0008D2F5 EC04                       	smpsPSGAlterVol     $04
0008D2F7 E701                       	dc.b	smpsNoAttack, $01
0008D2F9 EC07                       	smpsPSGAlterVol     $07
0008D2FB 8006                       	dc.b	nRst, $06
0008D2FD E101                       	smpsAlterNote       $01
0008D2FF 01                         	dc.b	$01
0008D300 E102                       	smpsAlterNote       $02
0008D302 01                         	dc.b	$01
0008D303 E1FF                       	smpsAlterNote       $FF
0008D305 01                         	dc.b	$01
0008D306 E1F9                       	smpsAlterNote       $F9
0008D308 01                         	dc.b	$01
0008D309 E1FC                       	smpsAlterNote       $FC
0008D30B ECF5                       	smpsPSGAlterVol     $F5
0008D30D 9006                       	dc.b	nEb1, $06
0008D30F EC04                       	smpsPSGAlterVol     $04
0008D311 E701                       	dc.b	smpsNoAttack, $01
0008D313 EC07                       	smpsPSGAlterVol     $07
0008D315 8003                       	dc.b	nRst, $03
0008D317 ECF5                       	smpsPSGAlterVol     $F5
0008D319 9006                       	dc.b	nEb1, $06
0008D31B EC04                       	smpsPSGAlterVol     $04
0008D31D E701                       	dc.b	smpsNoAttack, $01
0008D31F EC07                       	smpsPSGAlterVol     $07
0008D321 8006                       	dc.b	nRst, $06
0008D323 E100                       	smpsAlterNote       $00
0008D325 01                         	dc.b	$01
0008D326 E102                       	smpsAlterNote       $02
0008D328 01                         	dc.b	$01
0008D329 E100                       	smpsAlterNote       $00
0008D32B 01                         	dc.b	$01
0008D32C E1FF                       	smpsAlterNote       $FF
0008D32E 01                         	dc.b	$01
0008D32F ECF5                       	smpsPSGAlterVol     $F5
0008D331 9B06                       	dc.b	nD2, $06
0008D333 EC04                       	smpsPSGAlterVol     $04
0008D335 E701                       	dc.b	smpsNoAttack, $01
0008D337 EC07                       	smpsPSGAlterVol     $07
0008D339 8003                       	dc.b	nRst, $03
0008D33B ECF5                       	smpsPSGAlterVol     $F5
0008D33D 9B07                       	dc.b	nD2, $07
0008D33F EC0B                       	smpsPSGAlterVol     $0B
0008D341 8007                       	dc.b	nRst, $07
0008D343 E105                       	smpsAlterNote       $05
0008D345 0101                       	dc.b	$01, $01
0008D347 E1FF                       	smpsAlterNote       $FF
0008D349 01                         	dc.b	$01
0008D34A E1FC                       	smpsAlterNote       $FC
0008D34C 01                         	dc.b	$01
0008D34D E1FF                       	smpsAlterNote       $FF
0008D34F ECF5                       	smpsPSGAlterVol     $F5
0008D351 9B06                       	dc.b	nD2, $06
0008D353 EC0B                       	smpsPSGAlterVol     $0B
0008D355 8004                       	dc.b	nRst, $04
0008D357 ECF5                       	smpsPSGAlterVol     $F5
0008D359 9B06                       	dc.b	nD2, $06
0008D35B EC04                       	smpsPSGAlterVol     $04
0008D35D E701                       	dc.b	smpsNoAttack, $01
0008D35F EC07                       	smpsPSGAlterVol     $07
0008D361 8006                       	dc.b	nRst, $06
0008D363 E102                       	smpsAlterNote       $02
0008D365 01                         	dc.b	$01
0008D366 E106                       	smpsAlterNote       $06
0008D368 01                         	dc.b	$01
0008D369 E102                       	smpsAlterNote       $02
0008D36B 01                         	dc.b	$01
0008D36C E1FC                       	smpsAlterNote       $FC
0008D36E 01                         	dc.b	$01
0008D36F E1FF                       	smpsAlterNote       $FF
0008D371 ECF5                       	smpsPSGAlterVol     $F5
0008D373 9B06                       	dc.b	nD2, $06
0008D375 EC04                       	smpsPSGAlterVol     $04
0008D377 E701                       	dc.b	smpsNoAttack, $01
0008D379 EC07                       	smpsPSGAlterVol     $07
0008D37B 8003                       	dc.b	nRst, $03
0008D37D ECF5                       	smpsPSGAlterVol     $F5
0008D37F 9B07                       	dc.b	nD2, $07
0008D381 EC0B                       	smpsPSGAlterVol     $0B
0008D383 8006                       	dc.b	nRst, $06
0008D385 E102                       	smpsAlterNote       $02
0008D387 01                         	dc.b	$01
0008D388 E105                       	smpsAlterNote       $05
0008D38A 0101                       	dc.b	$01, $01
0008D38C E1FF                       	smpsAlterNote       $FF
0008D38E 01                         	dc.b	$01
0008D38F ECF5                       	smpsPSGAlterVol     $F5
0008D391 9B07                       	dc.b	nD2, $07
0008D393 EC0B                       	smpsPSGAlterVol     $0B
0008D395 8004                       	dc.b	nRst, $04
0008D397 ECF5                       	smpsPSGAlterVol     $F5
0008D399 9B06                       	dc.b	nD2, $06
0008D39B EC0B                       	smpsPSGAlterVol     $0B
0008D39D 8007                       	dc.b	nRst, $07
0008D39F E105                       	smpsAlterNote       $05
0008D3A1 0101                       	dc.b	$01, $01
0008D3A3 E102                       	smpsAlterNote       $02
0008D3A5 01                         	dc.b	$01
0008D3A6 E1FC                       	smpsAlterNote       $FC
0008D3A8 01                         	dc.b	$01
0008D3A9 E1FF                       	smpsAlterNote       $FF
0008D3AB ECF5                       	smpsPSGAlterVol     $F5
0008D3AD 9B06                       	dc.b	nD2, $06
0008D3AF EC04                       	smpsPSGAlterVol     $04
0008D3B1 E701                       	dc.b	smpsNoAttack, $01
0008D3B3 EC07                       	smpsPSGAlterVol     $07
0008D3B5 8003                       	dc.b	nRst, $03
0008D3B7 ECF5                       	smpsPSGAlterVol     $F5
0008D3B9 9B06                       	dc.b	nD2, $06
0008D3BB EC04                       	smpsPSGAlterVol     $04
0008D3BD E701                       	dc.b	smpsNoAttack, $01
0008D3BF EC07                       	smpsPSGAlterVol     $07
0008D3C1 8006                       	dc.b	nRst, $06
0008D3C3 E102                       	smpsAlterNote       $02
0008D3C5 01                         	dc.b	$01
0008D3C6 E106                       	smpsAlterNote       $06
0008D3C8 01                         	dc.b	$01
0008D3C9 E102                       	smpsAlterNote       $02
0008D3CB 01                         	dc.b	$01
0008D3CC E1FF                       	smpsAlterNote       $FF
0008D3CE 01                         	dc.b	$01
0008D3CF ECF5                       	smpsPSGAlterVol     $F5
0008D3D1 9B06                       	dc.b	nD2, $06
0008D3D3 EC04                       	smpsPSGAlterVol     $04
0008D3D5 E701                       	dc.b	smpsNoAttack, $01
0008D3D7 EC07                       	smpsPSGAlterVol     $07
0008D3D9 8003                       	dc.b	nRst, $03
0008D3DB ECF5                       	smpsPSGAlterVol     $F5
0008D3DD 9B07                       	dc.b	nD2, $07
0008D3DF EC0B                       	smpsPSGAlterVol     $0B
0008D3E1 8007                       	dc.b	nRst, $07
0008D3E3 E105                       	smpsAlterNote       $05
0008D3E5 0101                       	dc.b	$01, $01
0008D3E7 E1FF                       	smpsAlterNote       $FF
0008D3E9 01                         	dc.b	$01
0008D3EA E1FC                       	smpsAlterNote       $FC
0008D3EC 01                         	dc.b	$01
0008D3ED E1FF                       	smpsAlterNote       $FF
0008D3EF ECF5                       	smpsPSGAlterVol     $F5
0008D3F1 9B06                       	dc.b	nD2, $06
0008D3F3 EC0B                       	smpsPSGAlterVol     $0B
0008D3F5 8004                       	dc.b	nRst, $04
0008D3F7 ECF5                       	smpsPSGAlterVol     $F5
0008D3F9 9B06                       	dc.b	nD2, $06
0008D3FB EC04                       	smpsPSGAlterVol     $04
0008D3FD E701                       	dc.b	smpsNoAttack, $01
0008D3FF EC07                       	smpsPSGAlterVol     $07
0008D401 8006                       	dc.b	nRst, $06
0008D403 E102                       	smpsAlterNote       $02
0008D405 01                         	dc.b	$01
0008D406 E106                       	smpsAlterNote       $06
0008D408 01                         	dc.b	$01
0008D409 E102                       	smpsAlterNote       $02
0008D40B 01                         	dc.b	$01
0008D40C E1FC                       	smpsAlterNote       $FC
0008D40E 01                         	dc.b	$01
0008D40F E1FF                       	smpsAlterNote       $FF
0008D411 ECF5                       	smpsPSGAlterVol     $F5
0008D413 9B06                       	dc.b	nD2, $06
0008D415 EC04                       	smpsPSGAlterVol     $04
0008D417 E701                       	dc.b	smpsNoAttack, $01
0008D419 EC07                       	smpsPSGAlterVol     $07
0008D41B 8003                       	dc.b	nRst, $03
0008D41D ECF5                       	smpsPSGAlterVol     $F5
0008D41F 9B06                       	dc.b	nD2, $06
0008D421 EC04                       	smpsPSGAlterVol     $04
0008D423 E701                       	dc.b	smpsNoAttack, $01
0008D425 EC07                       	smpsPSGAlterVol     $07
0008D427 8006                       	dc.b	nRst, $06
0008D429 E102                       	smpsAlterNote       $02
0008D42B 01                         	dc.b	$01
0008D42C E106                       	smpsAlterNote       $06
0008D42E 01                         	dc.b	$01
0008D42F E105                       	smpsAlterNote       $05
0008D431 01                         	dc.b	$01
0008D432 E1FF                       	smpsAlterNote       $FF
0008D434 01                         	dc.b	$01
0008D435 ECF5                       	smpsPSGAlterVol     $F5
0008D437 9B07                       	dc.b	nD2, $07
0008D439 EC0B                       	smpsPSGAlterVol     $0B
0008D43B 8004                       	dc.b	nRst, $04
0008D43D ECF5                       	smpsPSGAlterVol     $F5
0008D43F 9B06                       	dc.b	nD2, $06
0008D441 EC0B                       	smpsPSGAlterVol     $0B
0008D443 8007                       	dc.b	nRst, $07
0008D445 E105                       	smpsAlterNote       $05
0008D447 0101                       	dc.b	$01, $01
0008D449 E101                       	smpsAlterNote       $01
0008D44B 01                         	dc.b	$01
0008D44C E1FB                       	smpsAlterNote       $FB
0008D44E 01                         	dc.b	$01
0008D44F E1FE                       	smpsAlterNote       $FE
0008D451 ECF5                       	smpsPSGAlterVol     $F5
0008D453 9A06                       	dc.b	nCs2, $06
0008D455 EC04                       	smpsPSGAlterVol     $04
0008D457 E701                       	dc.b	smpsNoAttack, $01
0008D459 EC07                       	smpsPSGAlterVol     $07
0008D45B 8003                       	dc.b	nRst, $03
0008D45D ECF5                       	smpsPSGAlterVol     $F5
0008D45F 9A06                       	dc.b	nCs2, $06
0008D461 EC04                       	smpsPSGAlterVol     $04
0008D463 E701                       	dc.b	smpsNoAttack, $01
0008D465 EC07                       	smpsPSGAlterVol     $07
0008D467 8003                       	dc.b	nRst, $03
0008D469 E1FC                       	smpsAlterNote       $FC
0008D46B ECF5                       	smpsPSGAlterVol     $F5
0008D46D 8F07                       	dc.b	nD1, $07
0008D46F EC0B                       	smpsPSGAlterVol     $0B
0008D471 8006                       	dc.b	nRst, $06
0008D473 E1FF                       	smpsAlterNote       $FF
0008D475 01                         	dc.b	$01
0008D476 E103                       	smpsAlterNote       $03
0008D478 01                         	dc.b	$01
0008D479 E102                       	smpsAlterNote       $02
0008D47B 01                         	dc.b	$01
0008D47C E1FC                       	smpsAlterNote       $FC
0008D47E 01                         	dc.b	$01
0008D47F E1F8                       	smpsAlterNote       $F8
0008D481 01                         	dc.b	$01
0008D482 E1FC                       	smpsAlterNote       $FC
0008D484 01                         	dc.b	$01
0008D485 E1FF                       	smpsAlterNote       $FF
0008D487 01                         	dc.b	$01
0008D488 E103                       	smpsAlterNote       $03
0008D48A 01                         	dc.b	$01
0008D48B E1FC                       	smpsAlterNote       $FC
0008D48D ECF5                       	smpsPSGAlterVol     $F5
0008D48F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D493 EC04                       	smpsPSGAlterVol     $04
0008D495 E701                       	dc.b	smpsNoAttack, $01
0008D497 EC07                       	smpsPSGAlterVol     $07
0008D499 8009                       	dc.b	nRst, $09
0008D49B E1FF                       	smpsAlterNote       $FF
0008D49D 01                         	dc.b	$01
0008D49E E103                       	smpsAlterNote       $03
0008D4A0 01                         	dc.b	$01
0008D4A1 E102                       	smpsAlterNote       $02
0008D4A3 01                         	dc.b	$01
0008D4A4 E1FC                       	smpsAlterNote       $FC
0008D4A6 01                         	dc.b	$01
0008D4A7 E1F8                       	smpsAlterNote       $F8
0008D4A9 01                         	dc.b	$01
0008D4AA E1FC                       	smpsAlterNote       $FC
0008D4AC 01                         	dc.b	$01
0008D4AD E1FF                       	smpsAlterNote       $FF
0008D4AF 01                         	dc.b	$01
0008D4B0 E103                       	smpsAlterNote       $03
0008D4B2 01                         	dc.b	$01
0008D4B3 E1FF                       	smpsAlterNote       $FF
0008D4B5 01                         	dc.b	$01
0008D4B6 E1F9                       	smpsAlterNote       $F9
0008D4B8 01                         	dc.b	$01
0008D4B9 E1F8                       	smpsAlterNote       $F8
0008D4BB 01                         	dc.b	$01
0008D4BC E1FC                       	smpsAlterNote       $FC
0008D4BE 01                         	dc.b	$01
0008D4BF E102                       	smpsAlterNote       $02
0008D4C1 0101                       	dc.b	$01, $01
0008D4C3 E1FF                       	smpsAlterNote       $FF
0008D4C5 01                         	dc.b	$01
0008D4C6 E1FC                       	smpsAlterNote       $FC
0008D4C8 ECF5                       	smpsPSGAlterVol     $F5
0008D4CA 8F02                       	dc.b	nD1, $02
0008D4CC EC04                       	smpsPSGAlterVol     $04
0008D4CE E701                       	dc.b	smpsNoAttack, $01
0008D4D0 ECFC                       	smpsPSGAlterVol     $FC
0008D4D2 E1FB                       	smpsAlterNote       $FB
0008D4D4 8D06                       	dc.b	nC1, $06
0008D4D6 EC04                       	smpsPSGAlterVol     $04
0008D4D8 E701                       	dc.b	smpsNoAttack, $01
0008D4DA EC07                       	smpsPSGAlterVol     $07
0008D4DC 8006                       	dc.b	nRst, $06
0008D4DE E1FE                       	smpsAlterNote       $FE
0008D4E0 01                         	dc.b	$01
0008D4E1 E102                       	smpsAlterNote       $02
0008D4E3 01                         	dc.b	$01
0008D4E4 E1FE                       	smpsAlterNote       $FE
0008D4E6 01                         	dc.b	$01
0008D4E7 E1FB                       	smpsAlterNote       $FB
0008D4E9 01                         	dc.b	$01
0008D4EA E1F7                       	smpsAlterNote       $F7
0008D4EC 01                         	dc.b	$01
0008D4ED E1FB                       	smpsAlterNote       $FB
0008D4EF 01                         	dc.b	$01
0008D4F0 E101                       	smpsAlterNote       $01
0008D4F2 01                         	dc.b	$01
0008D4F3 E102                       	smpsAlterNote       $02
0008D4F5 01                         	dc.b	$01
0008D4F6 E1FB                       	smpsAlterNote       $FB
0008D4F8 ECF5                       	smpsPSGAlterVol     $F5
0008D4FA 8D02                       	dc.b	nC1, $02
0008D4FC EC04                       	smpsPSGAlterVol     $04
0008D4FE E701                       	dc.b	smpsNoAttack, $01
0008D500 E1FC                       	smpsAlterNote       $FC
0008D502 ECFC                       	smpsPSGAlterVol     $FC
0008D504 8F0D                       	dc.b	nD1, $0D
0008D506 E1FF                       	smpsAlterNote       $FF
0008D508 E701                       	dc.b	smpsNoAttack, $01
0008D50A E103                       	smpsAlterNote       $03
0008D50C E701                       	dc.b	smpsNoAttack, $01
0008D50E E1FF                       	smpsAlterNote       $FF
0008D510 E701                       	dc.b	smpsNoAttack, $01
0008D512 E1FC                       	smpsAlterNote       $FC
0008D514 E701                       	dc.b	smpsNoAttack, $01
0008D516 E1F8                       	smpsAlterNote       $F8
0008D518 E701                       	dc.b	smpsNoAttack, $01
0008D51A E1FC                       	smpsAlterNote       $FC
0008D51C E701                       	dc.b	smpsNoAttack, $01
0008D51E E102                       	smpsAlterNote       $02
0008D520 E701                       	dc.b	smpsNoAttack, $01
0008D522 E103                       	smpsAlterNote       $03
0008D524 E701                       	dc.b	smpsNoAttack, $01
0008D526 E1FF                       	smpsAlterNote       $FF
0008D528 E701                       	dc.b	smpsNoAttack, $01
0008D52A E1F9                       	smpsAlterNote       $F9
0008D52C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D530 E1FC                       	smpsAlterNote       $FC
0008D532 E701                       	dc.b	smpsNoAttack, $01
0008D534 E102                       	smpsAlterNote       $02
0008D536 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D53A E1FC                       	smpsAlterNote       $FC
0008D53C E701                       	dc.b	smpsNoAttack, $01
0008D53E E1F9                       	smpsAlterNote       $F9
0008D540 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D544 E1FF                       	smpsAlterNote       $FF
0008D546 EC04                       	smpsPSGAlterVol     $04
0008D548 E701                       	dc.b	smpsNoAttack, $01
0008D54A EC07                       	smpsPSGAlterVol     $07
0008D54C E103                       	smpsAlterNote       $03
0008D54E 8001                       	dc.b	nRst, $01
0008D550 E102                       	smpsAlterNote       $02
0008D552 01                         	dc.b	$01
0008D553 E1FB                       	smpsAlterNote       $FB
0008D555 01                         	dc.b	$01
0008D556 E1F7                       	smpsAlterNote       $F7
0008D558 01                         	dc.b	$01
0008D559 E1FB                       	smpsAlterNote       $FB
0008D55B 01                         	dc.b	$01
0008D55C E102                       	smpsAlterNote       $02
0008D55E 01                         	dc.b	$01
0008D55F E103                       	smpsAlterNote       $03
0008D561 01                         	dc.b	$01
0008D562 E1FB                       	smpsAlterNote       $FB
0008D564 ECF5                       	smpsPSGAlterVol     $F5
0008D566 8E06                       	dc.b	nCs1, $06
0008D568 EC04                       	smpsPSGAlterVol     $04
0008D56A E701                       	dc.b	smpsNoAttack, $01
0008D56C EC07                       	smpsPSGAlterVol     $07
0008D56E 8003                       	dc.b	nRst, $03
0008D570 ECF5                       	smpsPSGAlterVol     $F5
0008D572 8E06                       	dc.b	nCs1, $06
0008D574 EC04                       	smpsPSGAlterVol     $04
0008D576 E701                       	dc.b	smpsNoAttack, $01
0008D578 EC07                       	smpsPSGAlterVol     $07
0008D57A 8006                       	dc.b	nRst, $06
0008D57C E1FE                       	smpsAlterNote       $FE
0008D57E 01                         	dc.b	$01
0008D57F E102                       	smpsAlterNote       $02
0008D581 01                         	dc.b	$01
0008D582 E1FE                       	smpsAlterNote       $FE
0008D584 01                         	dc.b	$01
0008D585 E1F9                       	smpsAlterNote       $F9
0008D587 01                         	dc.b	$01
0008D588 E1FC                       	smpsAlterNote       $FC
0008D58A ECF5                       	smpsPSGAlterVol     $F5
0008D58C 8F06                       	dc.b	nD1, $06
0008D58E EC04                       	smpsPSGAlterVol     $04
0008D590 E701                       	dc.b	smpsNoAttack, $01
0008D592 EC07                       	smpsPSGAlterVol     $07
0008D594 8003                       	dc.b	nRst, $03
0008D596 ECF5                       	smpsPSGAlterVol     $F5
0008D598 8F07                       	dc.b	nD1, $07
0008D59A EC0B                       	smpsPSGAlterVol     $0B
0008D59C 8006                       	dc.b	nRst, $06
0008D59E E1FF                       	smpsAlterNote       $FF
0008D5A0 01                         	dc.b	$01
0008D5A1 E102                       	smpsAlterNote       $02
0008D5A3 0101                       	dc.b	$01, $01
0008D5A5 E1FB                       	smpsAlterNote       $FB
0008D5A7 01                         	dc.b	$01
0008D5A8 ECF5                       	smpsPSGAlterVol     $F5
0008D5AA 8E07                       	dc.b	nCs1, $07
0008D5AC EC0B                       	smpsPSGAlterVol     $0B
0008D5AE 8004                       	dc.b	nRst, $04
0008D5B0 ECF5                       	smpsPSGAlterVol     $F5
0008D5B2 8E06                       	dc.b	nCs1, $06
0008D5B4 EC04                       	smpsPSGAlterVol     $04
0008D5B6 E701                       	dc.b	smpsNoAttack, $01
0008D5B8 EC07                       	smpsPSGAlterVol     $07
0008D5BA 8006                       	dc.b	nRst, $06
0008D5BC E101                       	smpsAlterNote       $01
0008D5BE 01                         	dc.b	$01
0008D5BF E102                       	smpsAlterNote       $02
0008D5C1 01                         	dc.b	$01
0008D5C2 E1FE                       	smpsAlterNote       $FE
0008D5C4 01                         	dc.b	$01
0008D5C5 E1F8                       	smpsAlterNote       $F8
0008D5C7 01                         	dc.b	$01
0008D5C8 E1FB                       	smpsAlterNote       $FB
0008D5CA ECF5                       	smpsPSGAlterVol     $F5
0008D5CC 8E06                       	dc.b	nCs1, $06
0008D5CE EC04                       	smpsPSGAlterVol     $04
0008D5D0 E701                       	dc.b	smpsNoAttack, $01
0008D5D2 EC07                       	smpsPSGAlterVol     $07
0008D5D4 8003                       	dc.b	nRst, $03
0008D5D6 ECF5                       	smpsPSGAlterVol     $F5
0008D5D8 8E06                       	dc.b	nCs1, $06
0008D5DA EC04                       	smpsPSGAlterVol     $04
0008D5DC E701                       	dc.b	smpsNoAttack, $01
0008D5DE EC07                       	smpsPSGAlterVol     $07
0008D5E0 8004                       	dc.b	nRst, $04
0008D5E2 E1FC                       	smpsAlterNote       $FC
0008D5E4 ECF5                       	smpsPSGAlterVol     $F5
0008D5E6 8F06                       	dc.b	nD1, $06
0008D5E8 EC0B                       	smpsPSGAlterVol     $0B
0008D5EA 8006                       	dc.b	nRst, $06
0008D5EC E1FF                       	smpsAlterNote       $FF
0008D5EE 01                         	dc.b	$01
0008D5EF E102                       	smpsAlterNote       $02
0008D5F1 0101                       	dc.b	$01, $01
0008D5F3 E1FC                       	smpsAlterNote       $FC
0008D5F5 01                         	dc.b	$01
0008D5F6 E1F8                       	smpsAlterNote       $F8
0008D5F8 01                         	dc.b	$01
0008D5F9 E1F9                       	smpsAlterNote       $F9
0008D5FB 01                         	dc.b	$01
0008D5FC E1FF                       	smpsAlterNote       $FF
0008D5FE 01                         	dc.b	$01
0008D5FF E103                       	smpsAlterNote       $03
0008D601 01                         	dc.b	$01
0008D602 E1FC                       	smpsAlterNote       $FC
0008D604 ECF5                       	smpsPSGAlterVol     $F5
0008D606 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008D60A EC04                       	smpsPSGAlterVol     $04
0008D60C E701                       	dc.b	smpsNoAttack, $01
0008D60E EC07                       	smpsPSGAlterVol     $07
0008D610 8009                       	dc.b	nRst, $09
0008D612 E1FF                       	smpsAlterNote       $FF
0008D614 01                         	dc.b	$01
0008D615 E102                       	smpsAlterNote       $02
0008D617 0101                       	dc.b	$01, $01
0008D619 E1FC                       	smpsAlterNote       $FC
0008D61B 01                         	dc.b	$01
0008D61C E1F8                       	smpsAlterNote       $F8
0008D61E 01                         	dc.b	$01
0008D61F E1F9                       	smpsAlterNote       $F9
0008D621 01                         	dc.b	$01
0008D622 E1FF                       	smpsAlterNote       $FF
0008D624 01                         	dc.b	$01
0008D625 E103                       	smpsAlterNote       $03
0008D627 01                         	dc.b	$01
0008D628 E1FF                       	smpsAlterNote       $FF
0008D62A 01                         	dc.b	$01
0008D62B E1FC                       	smpsAlterNote       $FC
0008D62D 01                         	dc.b	$01
0008D62E E1F8                       	smpsAlterNote       $F8
0008D630 01                         	dc.b	$01
0008D631 E1FC                       	smpsAlterNote       $FC
0008D633 01                         	dc.b	$01
0008D634 E102                       	smpsAlterNote       $02
0008D636 01                         	dc.b	$01
0008D637 E103                       	smpsAlterNote       $03
0008D639 01                         	dc.b	$01
0008D63A E1FF                       	smpsAlterNote       $FF
0008D63C 01                         	dc.b	$01
0008D63D E1FC                       	smpsAlterNote       $FC
0008D63F ECF5                       	smpsPSGAlterVol     $F5
0008D641 8F03                       	dc.b	nD1, $03
0008D643 E1FB                       	smpsAlterNote       $FB
0008D645 8D06                       	dc.b	nC1, $06
0008D647 EC04                       	smpsPSGAlterVol     $04
0008D649 E701                       	dc.b	smpsNoAttack, $01
0008D64B EC07                       	smpsPSGAlterVol     $07
0008D64D 8006                       	dc.b	nRst, $06
0008D64F E1FE                       	smpsAlterNote       $FE
0008D651 01                         	dc.b	$01
0008D652 E102                       	smpsAlterNote       $02
0008D654 01                         	dc.b	$01
0008D655 E101                       	smpsAlterNote       $01
0008D657 01                         	dc.b	$01
0008D658 E1FB                       	smpsAlterNote       $FB
0008D65A 01                         	dc.b	$01
0008D65B E1F7                       	smpsAlterNote       $F7
0008D65D 01                         	dc.b	$01
0008D65E E1FB                       	smpsAlterNote       $FB
0008D660 01                         	dc.b	$01
0008D661 E1FE                       	smpsAlterNote       $FE
0008D663 01                         	dc.b	$01
0008D664 E102                       	smpsAlterNote       $02
0008D666 01                         	dc.b	$01
0008D667 E1FB                       	smpsAlterNote       $FB
0008D669 ECF5                       	smpsPSGAlterVol     $F5
0008D66B 8D03                       	dc.b	nC1, $03
0008D66D E1FC                       	smpsAlterNote       $FC
0008D66F 8F0D                       	dc.b	nD1, $0D
0008D671 E1FF                       	smpsAlterNote       $FF
0008D673 E701                       	dc.b	smpsNoAttack, $01
0008D675 E103                       	smpsAlterNote       $03
0008D677 E701                       	dc.b	smpsNoAttack, $01
0008D679 E1FF                       	smpsAlterNote       $FF
0008D67B E701                       	dc.b	smpsNoAttack, $01
0008D67D E1FC                       	smpsAlterNote       $FC
0008D67F E701                       	dc.b	smpsNoAttack, $01
0008D681 E1F8                       	smpsAlterNote       $F8
0008D683 E701                       	dc.b	smpsNoAttack, $01
0008D685 E1FC                       	smpsAlterNote       $FC
0008D687 E701                       	dc.b	smpsNoAttack, $01
0008D689 E102                       	smpsAlterNote       $02
0008D68B E701                       	dc.b	smpsNoAttack, $01
0008D68D E103                       	smpsAlterNote       $03
0008D68F E701                       	dc.b	smpsNoAttack, $01
0008D691 E1FF                       	smpsAlterNote       $FF
0008D693 E701                       	dc.b	smpsNoAttack, $01
0008D695 E1F9                       	smpsAlterNote       $F9
0008D697 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D69B E1FC                       	smpsAlterNote       $FC
0008D69D E701                       	dc.b	smpsNoAttack, $01
0008D69F E102                       	smpsAlterNote       $02
0008D6A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6A5 E1FF                       	smpsAlterNote       $FF
0008D6A7 E701                       	dc.b	smpsNoAttack, $01
0008D6A9 E1F9                       	smpsAlterNote       $F9
0008D6AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6AF E1FF                       	smpsAlterNote       $FF
0008D6B1 EC04                       	smpsPSGAlterVol     $04
0008D6B3 E701                       	dc.b	smpsNoAttack, $01
0008D6B5 EC07                       	smpsPSGAlterVol     $07
0008D6B7 E103                       	smpsAlterNote       $03
0008D6B9 8001                       	dc.b	nRst, $01
0008D6BB E102                       	smpsAlterNote       $02
0008D6BD 01                         	dc.b	$01
0008D6BE E1FB                       	smpsAlterNote       $FB
0008D6C0 01                         	dc.b	$01
0008D6C1 E1F7                       	smpsAlterNote       $F7
0008D6C3 01                         	dc.b	$01
0008D6C4 E1FB                       	smpsAlterNote       $FB
0008D6C6 01                         	dc.b	$01
0008D6C7 E1FF                       	smpsAlterNote       $FF
0008D6C9 01                         	dc.b	$01
0008D6CA E103                       	smpsAlterNote       $03
0008D6CC 01                         	dc.b	$01
0008D6CD E1FB                       	smpsAlterNote       $FB
0008D6CF ECF5                       	smpsPSGAlterVol     $F5
0008D6D1 8E06                       	dc.b	nCs1, $06
0008D6D3 EC04                       	smpsPSGAlterVol     $04
0008D6D5 E701                       	dc.b	smpsNoAttack, $01
0008D6D7 EC07                       	smpsPSGAlterVol     $07
0008D6D9 8003                       	dc.b	nRst, $03
0008D6DB ECF5                       	smpsPSGAlterVol     $F5
0008D6DD 8E06                       	dc.b	nCs1, $06
0008D6DF EC04                       	smpsPSGAlterVol     $04
0008D6E1 E701                       	dc.b	smpsNoAttack, $01
0008D6E3 EC07                       	smpsPSGAlterVol     $07
0008D6E5 8006                       	dc.b	nRst, $06
0008D6E7 E1FE                       	smpsAlterNote       $FE
0008D6E9 01                         	dc.b	$01
0008D6EA E102                       	smpsAlterNote       $02
0008D6EC 01                         	dc.b	$01
0008D6ED E1FE                       	smpsAlterNote       $FE
0008D6EF 01                         	dc.b	$01
0008D6F0 E1FC                       	smpsAlterNote       $FC
0008D6F2 01                         	dc.b	$01
0008D6F3 ECF5                       	smpsPSGAlterVol     $F5
0008D6F5 8F06                       	dc.b	nD1, $06
0008D6F7 EC04                       	smpsPSGAlterVol     $04
0008D6F9 E701                       	dc.b	smpsNoAttack, $01
0008D6FB EC07                       	smpsPSGAlterVol     $07
0008D6FD 8003                       	dc.b	nRst, $03
0008D6FF ECF5                       	smpsPSGAlterVol     $F5
0008D701 8F07                       	dc.b	nD1, $07
0008D703 EC0B                       	smpsPSGAlterVol     $0B
0008D705 8007                       	dc.b	nRst, $07
0008D707 E102                       	smpsAlterNote       $02
0008D709 0101                       	dc.b	$01, $01
0008D70B E1FB                       	smpsAlterNote       $FB
0008D70D 01                         	dc.b	$01
0008D70E E1F8                       	smpsAlterNote       $F8
0008D710 01                         	dc.b	$01
0008D711 E1FB                       	smpsAlterNote       $FB
0008D713 ECF5                       	smpsPSGAlterVol     $F5
0008D715 8E06                       	dc.b	nCs1, $06
0008D717 EC0B                       	smpsPSGAlterVol     $0B
0008D719 8004                       	dc.b	nRst, $04
0008D71B ECF5                       	smpsPSGAlterVol     $F5
0008D71D 8E06                       	dc.b	nCs1, $06
0008D71F EC04                       	smpsPSGAlterVol     $04
0008D721 E701                       	dc.b	smpsNoAttack, $01
0008D723 EC07                       	smpsPSGAlterVol     $07
0008D725 8006                       	dc.b	nRst, $06
0008D727 E1FE                       	smpsAlterNote       $FE
0008D729 01                         	dc.b	$01
0008D72A E102                       	smpsAlterNote       $02
0008D72C 01                         	dc.b	$01
0008D72D E1FE                       	smpsAlterNote       $FE
0008D72F 01                         	dc.b	$01
0008D730 E1F9                       	smpsAlterNote       $F9
0008D732 01                         	dc.b	$01
0008D733 E1FC                       	smpsAlterNote       $FC
0008D735 ECF5                       	smpsPSGAlterVol     $F5
0008D737 8F06                       	dc.b	nD1, $06
0008D739 EC04                       	smpsPSGAlterVol     $04
0008D73B E701                       	dc.b	smpsNoAttack, $01
0008D73D EC07                       	smpsPSGAlterVol     $07
0008D73F 8003                       	dc.b	nRst, $03
0008D741 ECF5                       	smpsPSGAlterVol     $F5
0008D743 8F06                       	dc.b	nD1, $06
0008D745 EC04                       	smpsPSGAlterVol     $04
0008D747 E701                       	dc.b	smpsNoAttack, $01
0008D749 EC07                       	smpsPSGAlterVol     $07
0008D74B 8006                       	dc.b	nRst, $06
0008D74D E1FF                       	smpsAlterNote       $FF
0008D74F 01                         	dc.b	$01
0008D750 E103                       	smpsAlterNote       $03
0008D752 01                         	dc.b	$01
0008D753 E102                       	smpsAlterNote       $02
0008D755 01                         	dc.b	$01
0008D756 E1FB                       	smpsAlterNote       $FB
0008D758 01                         	dc.b	$01
0008D759 ECF5                       	smpsPSGAlterVol     $F5
0008D75B 8E07                       	dc.b	nCs1, $07
0008D75D EC0B                       	smpsPSGAlterVol     $0B
0008D75F 8004                       	dc.b	nRst, $04
0008D761 ECF5                       	smpsPSGAlterVol     $F5
0008D763 8E06                       	dc.b	nCs1, $06
0008D765 EC0B                       	smpsPSGAlterVol     $0B
0008D767 8007                       	dc.b	nRst, $07
0008D769 E101                       	smpsAlterNote       $01
0008D76B 0101                       	dc.b	$01, $01
0008D76D E1FE                       	smpsAlterNote       $FE
0008D76F 01                         	dc.b	$01
0008D770 E1F9                       	smpsAlterNote       $F9
0008D772 01                         	dc.b	$01
0008D773 E1FC                       	smpsAlterNote       $FC
0008D775 ECF5                       	smpsPSGAlterVol     $F5
0008D777 8F06                       	dc.b	nD1, $06
0008D779 EC04                       	smpsPSGAlterVol     $04
0008D77B E701                       	dc.b	smpsNoAttack, $01
0008D77D EC07                       	smpsPSGAlterVol     $07
0008D77F 8003                       	dc.b	nRst, $03
0008D781 ECF5                       	smpsPSGAlterVol     $F5
0008D783 8F06                       	dc.b	nD1, $06
0008D785 EC04                       	smpsPSGAlterVol     $04
0008D787 E701                       	dc.b	smpsNoAttack, $01
0008D789 EC07                       	smpsPSGAlterVol     $07
0008D78B 8006                       	dc.b	nRst, $06
0008D78D E1FF                       	smpsAlterNote       $FF
0008D78F 01                         	dc.b	$01
0008D790 E103                       	smpsAlterNote       $03
0008D792 01                         	dc.b	$01
0008D793 E1FF                       	smpsAlterNote       $FF
0008D795 01                         	dc.b	$01
0008D796 E1FB                       	smpsAlterNote       $FB
0008D798 01                         	dc.b	$01
0008D799 ECF5                       	smpsPSGAlterVol     $F5
0008D79B 8E06                       	dc.b	nCs1, $06
0008D79D EC04                       	smpsPSGAlterVol     $04
0008D79F E701                       	dc.b	smpsNoAttack, $01
0008D7A1 EC07                       	smpsPSGAlterVol     $07
0008D7A3 8003                       	dc.b	nRst, $03
0008D7A5 ECF5                       	smpsPSGAlterVol     $F5
0008D7A7 8E07                       	dc.b	nCs1, $07
0008D7A9 E1FF                       	smpsAlterNote       $FF
0008D7AB 9B06                       	dc.b	nD2, $06
0008D7AD EC04                       	smpsPSGAlterVol     $04
0008D7AF E701                       	dc.b	smpsNoAttack, $01
0008D7B1 ECFC                       	smpsPSGAlterVol     $FC
0008D7B3 9B03                       	dc.b	nD2, $03
0008D7B5 EC04                       	smpsPSGAlterVol     $04
0008D7B7 E701                       	dc.b	smpsNoAttack, $01
0008D7B9 ECFC                       	smpsPSGAlterVol     $FC
0008D7BB 9B02                       	dc.b	nD2, $02
0008D7BD EC04                       	smpsPSGAlterVol     $04
0008D7BF E701                       	dc.b	smpsNoAttack, $01
0008D7C1 ECFC                       	smpsPSGAlterVol     $FC
0008D7C3 E1FE                       	smpsAlterNote       $FE
0008D7C5 9A03                       	dc.b	nCs2, $03
0008D7C7 EC0B                       	smpsPSGAlterVol     $0B
0008D7C9 800A                       	dc.b	nRst, $0A
0008D7CB E102                       	smpsAlterNote       $02
0008D7CD 01                         	dc.b	$01
0008D7CE E10A                       	smpsAlterNote       $0A
0008D7D0 01                         	dc.b	$01
0008D7D1 E102                       	smpsAlterNote       $02
0008D7D3 01                         	dc.b	$01
0008D7D4 E1F7                       	smpsAlterNote       $F7
0008D7D6 01                         	dc.b	$01
0008D7D7 E10A                       	smpsAlterNote       $0A
0008D7D9 01                         	dc.b	$01
0008D7DA E1FC                       	smpsAlterNote       $FC
0008D7DC 01                         	dc.b	$01
0008D7DD E108                       	smpsAlterNote       $08
0008D7DF 0101                       	dc.b	$01, $01
0008D7E1 E102                       	smpsAlterNote       $02
0008D7E3 01                         	dc.b	$01
0008D7E4 E1F7                       	smpsAlterNote       $F7
0008D7E6 0101                       	dc.b	$01, $01
0008D7E8 E1FC                       	smpsAlterNote       $FC
0008D7EA ECF5                       	smpsPSGAlterVol     $F5
0008D7EC 8F06                       	dc.b	nD1, $06
0008D7EE EC04                       	smpsPSGAlterVol     $04
0008D7F0 E701                       	dc.b	smpsNoAttack, $01
0008D7F2 EC07                       	smpsPSGAlterVol     $07
0008D7F4 8003                       	dc.b	nRst, $03
0008D7F6 ECF5                       	smpsPSGAlterVol     $F5
0008D7F8 8F06                       	dc.b	nD1, $06
0008D7FA EC04                       	smpsPSGAlterVol     $04
0008D7FC E701                       	dc.b	smpsNoAttack, $01
0008D7FE EC07                       	smpsPSGAlterVol     $07
0008D800 8006                       	dc.b	nRst, $06
0008D802 E1FF                       	smpsAlterNote       $FF
0008D804 01                         	dc.b	$01
0008D805 E102                       	smpsAlterNote       $02
0008D807 01                         	dc.b	$01
0008D808 E101                       	smpsAlterNote       $01
0008D80A 01                         	dc.b	$01
0008D80B E1FC                       	smpsAlterNote       $FC
0008D80D 01                         	dc.b	$01
0008D80E ECF5                       	smpsPSGAlterVol     $F5
0008D810 9007                       	dc.b	nEb1, $07
0008D812 EC0B                       	smpsPSGAlterVol     $0B
0008D814 8004                       	dc.b	nRst, $04
0008D816 ECF5                       	smpsPSGAlterVol     $F5
0008D818 9006                       	dc.b	nEb1, $06
0008D81A EC0B                       	smpsPSGAlterVol     $0B
0008D81C 8007                       	dc.b	nRst, $07
0008D81E E103                       	smpsAlterNote       $03
0008D820 0101                       	dc.b	$01, $01
0008D822 E1FF                       	smpsAlterNote       $FF
0008D824 01                         	dc.b	$01
0008D825 E1F9                       	smpsAlterNote       $F9
0008D827 01                         	dc.b	$01
0008D828 E1FC                       	smpsAlterNote       $FC
0008D82A ECF5                       	smpsPSGAlterVol     $F5
0008D82C 8F06                       	dc.b	nD1, $06
0008D82E EC04                       	smpsPSGAlterVol     $04
0008D830 E701                       	dc.b	smpsNoAttack, $01
0008D832 EC07                       	smpsPSGAlterVol     $07
0008D834 8003                       	dc.b	nRst, $03
0008D836 ECF5                       	smpsPSGAlterVol     $F5
0008D838 8F06                       	dc.b	nD1, $06
0008D83A EC04                       	smpsPSGAlterVol     $04
0008D83C E701                       	dc.b	smpsNoAttack, $01
0008D83E EC07                       	smpsPSGAlterVol     $07
0008D840 8006                       	dc.b	nRst, $06
0008D842 E1FF                       	smpsAlterNote       $FF
0008D844 01                         	dc.b	$01
0008D845 E103                       	smpsAlterNote       $03
0008D847 01                         	dc.b	$01
0008D848 E1FF                       	smpsAlterNote       $FF
0008D84A 01                         	dc.b	$01
0008D84B E1F9                       	smpsAlterNote       $F9
0008D84D 01                         	dc.b	$01
0008D84E E1FC                       	smpsAlterNote       $FC
0008D850 ECF5                       	smpsPSGAlterVol     $F5
0008D852 8F06                       	dc.b	nD1, $06
0008D854 EC04                       	smpsPSGAlterVol     $04
0008D856 E701                       	dc.b	smpsNoAttack, $01
0008D858 EC07                       	smpsPSGAlterVol     $07
0008D85A 8003                       	dc.b	nRst, $03
0008D85C ECF5                       	smpsPSGAlterVol     $F5
0008D85E 8F07                       	dc.b	nD1, $07
0008D860 EC0B                       	smpsPSGAlterVol     $0B
0008D862 8006                       	dc.b	nRst, $06
0008D864 E1FF                       	smpsAlterNote       $FF
0008D866 01                         	dc.b	$01
0008D867 E102                       	smpsAlterNote       $02
0008D869 0101                       	dc.b	$01, $01
0008D86B E1FC                       	smpsAlterNote       $FC
0008D86D 01                         	dc.b	$01
0008D86E ECF5                       	smpsPSGAlterVol     $F5
0008D870 8F07                       	dc.b	nD1, $07
0008D872 EC0B                       	smpsPSGAlterVol     $0B
0008D874 8004                       	dc.b	nRst, $04
0008D876 ECF5                       	smpsPSGAlterVol     $F5
0008D878 8F06                       	dc.b	nD1, $06
0008D87A EC04                       	smpsPSGAlterVol     $04
0008D87C E701                       	dc.b	smpsNoAttack, $01
0008D87E EC07                       	smpsPSGAlterVol     $07
0008D880 8006                       	dc.b	nRst, $06
0008D882 E101                       	smpsAlterNote       $01
0008D884 01                         	dc.b	$01
0008D885 E102                       	smpsAlterNote       $02
0008D887 01                         	dc.b	$01
0008D888 E1FF                       	smpsAlterNote       $FF
0008D88A 01                         	dc.b	$01
0008D88B E1F9                       	smpsAlterNote       $F9
0008D88D 01                         	dc.b	$01
0008D88E E1FC                       	smpsAlterNote       $FC
0008D890 ECF5                       	smpsPSGAlterVol     $F5
0008D892 9006                       	dc.b	nEb1, $06
0008D894 EC04                       	smpsPSGAlterVol     $04
0008D896 E701                       	dc.b	smpsNoAttack, $01
0008D898 EC07                       	smpsPSGAlterVol     $07
0008D89A 8003                       	dc.b	nRst, $03
0008D89C ECF5                       	smpsPSGAlterVol     $F5
0008D89E 9006                       	dc.b	nEb1, $06
0008D8A0 EC04                       	smpsPSGAlterVol     $04
0008D8A2 E701                       	dc.b	smpsNoAttack, $01
0008D8A4 EC07                       	smpsPSGAlterVol     $07
0008D8A6 8006                       	dc.b	nRst, $06
0008D8A8 E100                       	smpsAlterNote       $00
0008D8AA 01                         	dc.b	$01
0008D8AB E102                       	smpsAlterNote       $02
0008D8AD 01                         	dc.b	$01
0008D8AE E100                       	smpsAlterNote       $00
0008D8B0 01                         	dc.b	$01
0008D8B1 E1FF                       	smpsAlterNote       $FF
0008D8B3 01                         	dc.b	$01
0008D8B4 ECF5                       	smpsPSGAlterVol     $F5
0008D8B6 9B06                       	dc.b	nD2, $06
0008D8B8 EC04                       	smpsPSGAlterVol     $04
0008D8BA E701                       	dc.b	smpsNoAttack, $01
0008D8BC EC07                       	smpsPSGAlterVol     $07
0008D8BE 8003                       	dc.b	nRst, $03
0008D8C0 ECF5                       	smpsPSGAlterVol     $F5
0008D8C2 9B07                       	dc.b	nD2, $07
0008D8C4 EC0B                       	smpsPSGAlterVol     $0B
0008D8C6 8007                       	dc.b	nRst, $07
0008D8C8 E105                       	smpsAlterNote       $05
0008D8CA 0101                       	dc.b	$01, $01
0008D8CC E1FF                       	smpsAlterNote       $FF
0008D8CE 01                         	dc.b	$01
0008D8CF E1FC                       	smpsAlterNote       $FC
0008D8D1 01                         	dc.b	$01
0008D8D2 E1FF                       	smpsAlterNote       $FF
0008D8D4 ECF5                       	smpsPSGAlterVol     $F5
0008D8D6 9B06                       	dc.b	nD2, $06
0008D8D8 EC0B                       	smpsPSGAlterVol     $0B
0008D8DA 8004                       	dc.b	nRst, $04
0008D8DC ECF5                       	smpsPSGAlterVol     $F5
0008D8DE 9B06                       	dc.b	nD2, $06
0008D8E0 EC04                       	smpsPSGAlterVol     $04
0008D8E2 E701                       	dc.b	smpsNoAttack, $01
0008D8E4 EC07                       	smpsPSGAlterVol     $07
0008D8E6 8006                       	dc.b	nRst, $06
0008D8E8 E102                       	smpsAlterNote       $02
0008D8EA 01                         	dc.b	$01
0008D8EB E106                       	smpsAlterNote       $06
0008D8ED 01                         	dc.b	$01
0008D8EE E102                       	smpsAlterNote       $02
0008D8F0 01                         	dc.b	$01
0008D8F1 E1FC                       	smpsAlterNote       $FC
0008D8F3 01                         	dc.b	$01
0008D8F4 E1FF                       	smpsAlterNote       $FF
0008D8F6 ECF5                       	smpsPSGAlterVol     $F5
0008D8F8 9B06                       	dc.b	nD2, $06
0008D8FA EC04                       	smpsPSGAlterVol     $04
0008D8FC E701                       	dc.b	smpsNoAttack, $01
0008D8FE EC07                       	smpsPSGAlterVol     $07
0008D900 8003                       	dc.b	nRst, $03
0008D902 ECF5                       	smpsPSGAlterVol     $F5
0008D904 9B07                       	dc.b	nD2, $07
0008D906 EC0B                       	smpsPSGAlterVol     $0B
0008D908 8006                       	dc.b	nRst, $06
0008D90A E102                       	smpsAlterNote       $02
0008D90C 01                         	dc.b	$01
0008D90D E105                       	smpsAlterNote       $05
0008D90F 0101                       	dc.b	$01, $01
0008D911 E1FF                       	smpsAlterNote       $FF
0008D913 01                         	dc.b	$01
0008D914 ECF5                       	smpsPSGAlterVol     $F5
0008D916 9B07                       	dc.b	nD2, $07
0008D918 EC0B                       	smpsPSGAlterVol     $0B
0008D91A 8004                       	dc.b	nRst, $04
0008D91C ECF5                       	smpsPSGAlterVol     $F5
0008D91E 9B06                       	dc.b	nD2, $06
0008D920 EC04                       	smpsPSGAlterVol     $04
0008D922 E701                       	dc.b	smpsNoAttack, $01
0008D924 EC07                       	smpsPSGAlterVol     $07
0008D926 8006                       	dc.b	nRst, $06
0008D928 E105                       	smpsAlterNote       $05
0008D92A 0101                       	dc.b	$01, $01
0008D92C E102                       	smpsAlterNote       $02
0008D92E 01                         	dc.b	$01
0008D92F E1FC                       	smpsAlterNote       $FC
0008D931 01                         	dc.b	$01
0008D932 E1FF                       	smpsAlterNote       $FF
0008D934 ECF5                       	smpsPSGAlterVol     $F5
0008D936 9B06                       	dc.b	nD2, $06
0008D938 EC04                       	smpsPSGAlterVol     $04
0008D93A E701                       	dc.b	smpsNoAttack, $01
0008D93C EC07                       	smpsPSGAlterVol     $07
0008D93E 8003                       	dc.b	nRst, $03
0008D940 ECF5                       	smpsPSGAlterVol     $F5
0008D942 9B06                       	dc.b	nD2, $06
0008D944 EC04                       	smpsPSGAlterVol     $04
0008D946 E701                       	dc.b	smpsNoAttack, $01
0008D948 EC07                       	smpsPSGAlterVol     $07
0008D94A 8006                       	dc.b	nRst, $06
0008D94C E102                       	smpsAlterNote       $02
0008D94E 01                         	dc.b	$01
0008D94F E106                       	smpsAlterNote       $06
0008D951 01                         	dc.b	$01
0008D952 E102                       	smpsAlterNote       $02
0008D954 01                         	dc.b	$01
0008D955 E1FF                       	smpsAlterNote       $FF
0008D957 01                         	dc.b	$01
0008D958 ECF5                       	smpsPSGAlterVol     $F5
0008D95A 9B06                       	dc.b	nD2, $06
0008D95C EC04                       	smpsPSGAlterVol     $04
0008D95E E701                       	dc.b	smpsNoAttack, $01
0008D960 EC07                       	smpsPSGAlterVol     $07
0008D962 8003                       	dc.b	nRst, $03
0008D964 ECF5                       	smpsPSGAlterVol     $F5
0008D966 9B07                       	dc.b	nD2, $07
0008D968 EC0B                       	smpsPSGAlterVol     $0B
0008D96A 8007                       	dc.b	nRst, $07
0008D96C E107                       	smpsAlterNote       $07
0008D96E 0101                       	dc.b	$01, $01
0008D970 E1FE                       	smpsAlterNote       $FE
0008D972 01                         	dc.b	$01
0008D973 E1FA                       	smpsAlterNote       $FA
0008D975 0101                       	dc.b	$01, $01
0008D977 E103                       	smpsAlterNote       $03
0008D979 01                         	dc.b	$01
0008D97A E109                       	smpsAlterNote       $09
0008D97C 01                         	dc.b	$01
0008D97D E107                       	smpsAlterNote       $07
0008D97F 01                         	dc.b	$01
0008D980 E1FE                       	smpsAlterNote       $FE
0008D982 01                         	dc.b	$01
0008D983 E108                       	smpsAlterNote       $08
0008D985 01                         	dc.b	$01
0008D986 E1FD                       	smpsAlterNote       $FD
0008D988 ECF5                       	smpsPSGAlterVol     $F5
0008D98A 940E                       	dc.b	nG1, $0E
0008D98C E103                       	smpsAlterNote       $03
0008D98E EC0B                       	smpsPSGAlterVol     $0B
0008D990 8001 01                    	dc.b	nRst, $01, $01
0008D993 E1FD                       	smpsAlterNote       $FD
0008D995 01                         	dc.b	$01
0008D996 E1FB                       	smpsAlterNote       $FB
0008D998 0101                       	dc.b	$01, $01
0008D99A E100                       	smpsAlterNote       $00
0008D99C 01                         	dc.b	$01
0008D99D E103                       	smpsAlterNote       $03
0008D99F 01                         	dc.b	$01
0008D9A0 E100                       	smpsAlterNote       $00
0008D9A2 01                         	dc.b	$01
0008D9A3 E1FD                       	smpsAlterNote       $FD
0008D9A5 01                         	dc.b	$01
0008D9A6 E1FA                       	smpsAlterNote       $FA
0008D9A8 01                         	dc.b	$01
0008D9A9 E1FD                       	smpsAlterNote       $FD
0008D9AB 01                         	dc.b	$01
0008D9AC E103                       	smpsAlterNote       $03
0008D9AE 0101                       	dc.b	$01, $01
0008D9B0 E100                       	smpsAlterNote       $00
0008D9B2 01                         	dc.b	$01
0008D9B3 E1FE                       	smpsAlterNote       $FE
0008D9B5 ECF5                       	smpsPSGAlterVol     $F5
0008D9B7 960D                       	dc.b	nA1, $0D
0008D9B9 E104                       	smpsAlterNote       $04
0008D9BB EC0B                       	smpsPSGAlterVol     $0B
0008D9BD 8001 01                    	dc.b	nRst, $01, $01
0008D9C0 E101                       	smpsAlterNote       $01
0008D9C2 01                         	dc.b	$01
0008D9C3 E1FB                       	smpsAlterNote       $FB
0008D9C5 0101                       	dc.b	$01, $01
0008D9C7 E1FE                       	smpsAlterNote       $FE
0008D9C9 01                         	dc.b	$01
0008D9CA E104                       	smpsAlterNote       $04
0008D9CC 0101                       	dc.b	$01, $01
0008D9CE E1FE                       	smpsAlterNote       $FE
0008D9D0 01                         	dc.b	$01
0008D9D1 E1FB                       	smpsAlterNote       $FB
0008D9D3 0101                       	dc.b	$01, $01
0008D9D5 E101                       	smpsAlterNote       $01
0008D9D7 01                         	dc.b	$01
0008D9D8 E104                       	smpsAlterNote       $04
0008D9DA 0101                       	dc.b	$01, $01
0008D9DC E1FE                       	smpsAlterNote       $FE
0008D9DE ECF5                       	smpsPSGAlterVol     $F5
0008D9E0 970D                       	dc.b	nBb1, $0D
0008D9E2 E101                       	smpsAlterNote       $01
0008D9E4 EC04                       	smpsPSGAlterVol     $04
0008D9E6 E701                       	dc.b	smpsNoAttack, $01
0008D9E8 EC07                       	smpsPSGAlterVol     $07
0008D9EA E104                       	smpsAlterNote       $04
0008D9EC 8001                       	dc.b	nRst, $01
0008D9EE E103                       	smpsAlterNote       $03
0008D9F0 01                         	dc.b	$01
0008D9F1 E1FE                       	smpsAlterNote       $FE
0008D9F3 01                         	dc.b	$01
0008D9F4 E1FA                       	smpsAlterNote       $FA
0008D9F6 01                         	dc.b	$01
0008D9F7 E1FE                       	smpsAlterNote       $FE
0008D9F9 01                         	dc.b	$01
0008D9FA E101                       	smpsAlterNote       $01
0008D9FC 01                         	dc.b	$01
0008D9FD E104                       	smpsAlterNote       $04
0008D9FF 01                         	dc.b	$01
0008DA00 E101                       	smpsAlterNote       $01
0008DA02 01                         	dc.b	$01
0008DA03 E1FB                       	smpsAlterNote       $FB
0008DA05 01                         	dc.b	$01
0008DA06 E1FA                       	smpsAlterNote       $FA
0008DA08 01                         	dc.b	$01
0008DA09 E1FE                       	smpsAlterNote       $FE
0008DA0B 01                         	dc.b	$01
0008DA0C E103                       	smpsAlterNote       $03
0008DA0E 0101                       	dc.b	$01, $01
0008DA10 E101                       	smpsAlterNote       $01
0008DA12 01                         	dc.b	$01
0008DA13 E1FE                       	smpsAlterNote       $FE
0008DA15 ECF5                       	smpsPSGAlterVol     $F5
0008DA17 990D                       	dc.b	nC2, $0D
0008DA19 E104                       	smpsAlterNote       $04
0008DA1B EC0B                       	smpsPSGAlterVol     $0B
0008DA1D 8001 01                    	dc.b	nRst, $01, $01
0008DA20 E102                       	smpsAlterNote       $02
0008DA22 01                         	dc.b	$01
0008DA23 E1FC                       	smpsAlterNote       $FC
0008DA25 0101                       	dc.b	$01, $01
0008DA27 E102                       	smpsAlterNote       $02
0008DA29 01                         	dc.b	$01
0008DA2A E104                       	smpsAlterNote       $04
0008DA2C 01                         	dc.b	$01
0008DA2D E1FF                       	smpsAlterNote       $FF
0008DA2F ECF5                       	smpsPSGAlterVol     $F5
0008DA31 9B06                       	dc.b	nD2, $06
0008DA33 EC04                       	smpsPSGAlterVol     $04
0008DA35 E701                       	dc.b	smpsNoAttack, $01
0008DA37 EC07                       	smpsPSGAlterVol     $07
0008DA39 8003                       	dc.b	nRst, $03
0008DA3B ECF5                       	smpsPSGAlterVol     $F5
0008DA3D 9B07                       	dc.b	nD2, $07
0008DA3F EC0B                       	smpsPSGAlterVol     $0B
0008DA41 8006                       	dc.b	nRst, $06
0008DA43 E101                       	smpsAlterNote       $01
0008DA45 01                         	dc.b	$01
0008DA46 E104                       	smpsAlterNote       $04
0008DA48 0101                       	dc.b	$01, $01
0008DA4A E1FE                       	smpsAlterNote       $FE
0008DA4C 01                         	dc.b	$01
0008DA4D E1FC                       	smpsAlterNote       $FC
0008DA4F 01                         	dc.b	$01
0008DA50 E1FE                       	smpsAlterNote       $FE
0008DA52 ECF5                       	smpsPSGAlterVol     $F5
0008DA54 9C06                       	dc.b	nEb2, $06
0008DA56 EC0B                       	smpsPSGAlterVol     $0B
0008DA58 8004                       	dc.b	nRst, $04
0008DA5A ECF5                       	smpsPSGAlterVol     $F5
0008DA5C 9C06                       	dc.b	nEb2, $06
0008DA5E EC04                       	smpsPSGAlterVol     $04
0008DA60 E701                       	dc.b	smpsNoAttack, $01
0008DA62 EC07                       	smpsPSGAlterVol     $07
0008DA64 8006                       	dc.b	nRst, $06
0008DA66 E105                       	smpsAlterNote       $05
0008DA68 01                         	dc.b	$01
0008DA69 E106                       	smpsAlterNote       $06
0008DA6B 01                         	dc.b	$01
0008DA6C E102                       	smpsAlterNote       $02
0008DA6E 01                         	dc.b	$01
0008DA6F E1FB                       	smpsAlterNote       $FB
0008DA71 01                         	dc.b	$01
0008DA72 E1FF                       	smpsAlterNote       $FF
0008DA74 ECF5                       	smpsPSGAlterVol     $F5
0008DA76 9B06                       	dc.b	nD2, $06
0008DA78 EC04                       	smpsPSGAlterVol     $04
0008DA7A E701                       	dc.b	smpsNoAttack, $01
0008DA7C EC07                       	smpsPSGAlterVol     $07
0008DA7E 8003                       	dc.b	nRst, $03
0008DA80 ECF5                       	smpsPSGAlterVol     $F5
0008DA82 9B06                       	dc.b	nD2, $06
0008DA84 EC04                       	smpsPSGAlterVol     $04
0008DA86 E701                       	dc.b	smpsNoAttack, $01
0008DA88 EC07                       	smpsPSGAlterVol     $07
0008DA8A 8006                       	dc.b	nRst, $06
0008DA8C E101                       	smpsAlterNote       $01
0008DA8E 01                         	dc.b	$01
0008DA8F E105                       	smpsAlterNote       $05
0008DA91 01                         	dc.b	$01
0008DA92 E104                       	smpsAlterNote       $04
0008DA94 01                         	dc.b	$01
0008DA95 E1FE                       	smpsAlterNote       $FE
0008DA97 01                         	dc.b	$01
0008DA98 ECF5                       	smpsPSGAlterVol     $F5
0008DA9A 9C07                       	dc.b	nEb2, $07
0008DA9C EC0B                       	smpsPSGAlterVol     $0B
0008DA9E 8004                       	dc.b	nRst, $04
0008DAA0 ECF5                       	smpsPSGAlterVol     $F5
0008DAA2 9C06                       	dc.b	nEb2, $06
0008DAA4 EC0B                       	smpsPSGAlterVol     $0B
0008DAA6 8007                       	dc.b	nRst, $07
0008DAA8 E105                       	smpsAlterNote       $05
0008DAAA 0101                       	dc.b	$01, $01
0008DAAC E102                       	smpsAlterNote       $02
0008DAAE 01                         	dc.b	$01
0008DAAF E1FB                       	smpsAlterNote       $FB
0008DAB1 01                         	dc.b	$01
0008DAB2 E1FF                       	smpsAlterNote       $FF
0008DAB4 ECF5                       	smpsPSGAlterVol     $F5
0008DAB6 9B06                       	dc.b	nD2, $06
0008DAB8 EC04                       	smpsPSGAlterVol     $04
0008DABA E701                       	dc.b	smpsNoAttack, $01
0008DABC EC07                       	smpsPSGAlterVol     $07
0008DABE 8003                       	dc.b	nRst, $03
0008DAC0 ECF5                       	smpsPSGAlterVol     $F5
0008DAC2 9B06                       	dc.b	nD2, $06
0008DAC4 EC04                       	smpsPSGAlterVol     $04
0008DAC6 E701                       	dc.b	smpsNoAttack, $01
0008DAC8 EC07                       	smpsPSGAlterVol     $07
0008DACA 8006                       	dc.b	nRst, $06
0008DACC E101                       	smpsAlterNote       $01
0008DACE 01                         	dc.b	$01
0008DACF E105                       	smpsAlterNote       $05
0008DAD1 01                         	dc.b	$01
0008DAD2 E101                       	smpsAlterNote       $01
0008DAD4 01                         	dc.b	$01
0008DAD5 E1FC                       	smpsAlterNote       $FC
0008DAD7 01                         	dc.b	$01
0008DAD8 E1FE                       	smpsAlterNote       $FE
0008DADA ECF5                       	smpsPSGAlterVol     $F5
0008DADC 9C06                       	dc.b	nEb2, $06
0008DADE EC04                       	smpsPSGAlterVol     $04
0008DAE0 E701                       	dc.b	smpsNoAttack, $01
0008DAE2 EC07                       	smpsPSGAlterVol     $07
0008DAE4 8003                       	dc.b	nRst, $03
0008DAE6 ECF5                       	smpsPSGAlterVol     $F5
0008DAE8 9C07                       	dc.b	nEb2, $07
0008DAEA EC0B                       	smpsPSGAlterVol     $0B
0008DAEC 8006                       	dc.b	nRst, $06
0008DAEE E102                       	smpsAlterNote       $02
0008DAF0 01                         	dc.b	$01
0008DAF1 E105                       	smpsAlterNote       $05
0008DAF3 0101                       	dc.b	$01, $01
0008DAF5 E1FF                       	smpsAlterNote       $FF
0008DAF7 01                         	dc.b	$01
0008DAF8 ECF5                       	smpsPSGAlterVol     $F5
0008DAFA 9B07                       	dc.b	nD2, $07
0008DAFC EC0B                       	smpsPSGAlterVol     $0B
0008DAFE 8004                       	dc.b	nRst, $04
0008DB00 ECF5                       	smpsPSGAlterVol     $F5
0008DB02 9B06                       	dc.b	nD2, $06
0008DB04 EC04                       	smpsPSGAlterVol     $04
0008DB06 E701                       	dc.b	smpsNoAttack, $01
0008DB08 EC07                       	smpsPSGAlterVol     $07
0008DB0A 8002                       	dc.b	nRst, $02
0008DB0C E1FC                       	smpsAlterNote       $FC
0008DB0E ECF5                       	smpsPSGAlterVol     $F5
0008DB10 9006                       	dc.b	nEb1, $06
0008DB12 EC04                       	smpsPSGAlterVol     $04
0008DB14 E701                       	dc.b	smpsNoAttack, $01
0008DB16 ECFC                       	smpsPSGAlterVol     $FC
0008DB18 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008DB1C EC04                       	smpsPSGAlterVol     $04
0008DB1E E701                       	dc.b	smpsNoAttack, $01
0008DB20 E1FD                       	smpsAlterNote       $FD
0008DB22 ECFC                       	smpsPSGAlterVol     $FC
0008DB24 9402                       	dc.b	nG1, $02
0008DB26 EC04                       	smpsPSGAlterVol     $04
0008DB28 E701                       	dc.b	smpsNoAttack, $01
0008DB2A E1FE                       	smpsAlterNote       $FE
0008DB2C ECFC                       	smpsPSGAlterVol     $FC
0008DB2E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008DB32 EC04                       	smpsPSGAlterVol     $04
0008DB34 E701                       	dc.b	smpsNoAttack, $01
0008DB36 EC07                       	smpsPSGAlterVol     $07
0008DB38 8008                       	dc.b	nRst, $08
0008DB3A F6F4 F3                    	smpsJump            music84_Jump06
0008DB3D                            
0008DB3D                            ; PSG3 Data
0008DB3D                            music84_PSG3:
0008DB3D F500                       	smpsPSGvoice        $00
0008DB3F E1FF                       	smpsAlterNote       $FF
0008DB41 EC0F                       	smpsPSGAlterVol     $0F
0008DB43 803A                       	dc.b	nRst, $3A
0008DB45                            
0008DB45                            music84_Jump05:
0008DB45 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008DB51 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008DB5B F6FF E8                    	smpsJump            music84_Jump05
0008DB5E                            
0008DB5E                            ; DAC Data
0008DB5E                            music84_DAC:
0008DB5E E0C0                       	smpsPan             panCenter, $00
0008DB60 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008DB6C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008DB78 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008DB84 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DB90 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DB9C 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008DBA8 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DBB4 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008DBC0 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DBCC 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008DBD8 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DBE4 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008DBF0 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008DBFC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008DC08 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008DC14 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008DC20 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008DC2C 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008DC38 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008DC44 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DC50 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DC5C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DC68 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008DC74 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008DC80 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008DC8C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008DC98 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008DCA4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DCB0 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DCBC 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DCC8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DCD4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DCE0 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008DCEC 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008DCF8 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008DD04 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DD10 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008DD1C 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008DD28 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008DD34 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008DD40 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008DD4C 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008DD58 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DD64 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008DD70 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008DD7C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DD88 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008DD94 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008DDA0 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008DDAC 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008DDB8 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008DDC4 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008DDD0 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008DDDC 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008DDE8 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008DDF4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008DE00 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008DE0C 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008DE18 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008DE24 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008DE30 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008DE3C 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008DE48 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008DE54 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008DE60 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008DE6C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008DE78 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008DE84 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008DE90 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008DE9C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008DEA8 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008DEB4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008DEC0 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008DECC 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008DED8 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008DEE4 E0C0                       	smpsPan             panCenter, $00
0008DEE6 F2                         	smpsStop
0008DEE7                            
0008DEE7                            music84_Voices:
0008DEE7                            ;	Voice $00
0008DEE7                            ;	$3D
0008DEE7                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008DEE7                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008DEE7                            	smpsVcAlgorithm     $05
0008DEE7                            	smpsVcFeedback      $07
0008DEE7                            	smpsVcUnusedBits    $00
0008DEE7                            	smpsVcDetune        $05, $04, $03, $04
0008DEE7                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DEE7                            	smpsVcRateScale     $00, $00, $00, $00
0008DEE7                            	smpsVcAttackRate    $11, $11, $11, $11
0008DEE7                            	smpsVcAmpMod        $00, $00, $00, $00
0008DEE7                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008DEE7                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008DEE7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DEE7                            	smpsVcReleaseRate   $08, $08, $08, $07
0008DEE7 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008DF00                            
0008DF00                            ;	Voice $01
0008DF00                            ;	$04
0008DF00                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008DF00                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008DF00                            	smpsVcAlgorithm     $04
0008DF00                            	smpsVcFeedback      $00
0008DF00                            	smpsVcUnusedBits    $00
0008DF00                            	smpsVcDetune        $04, $03, $04, $05
0008DF00                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008DF00                            	smpsVcRateScale     $00, $01, $00, $01
0008DF00                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008DF00                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF00                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008DF00                            	smpsVcDecayRate2    $05, $00, $05, $00
0008DF00                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008DF00                            	smpsVcReleaseRate   $06, $06, $06, $06
0008DF00 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008DF19                            
0008DF19                            ;	Voice $02
0008DF19                            ;	$30
0008DF19                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008DF19                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008DF19                            	smpsVcAlgorithm     $00
0008DF19                            	smpsVcFeedback      $06
0008DF19                            	smpsVcUnusedBits    $00
0008DF19                            	smpsVcDetune        $04, $02, $00, $06
0008DF19                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008DF19                            	smpsVcRateScale     $00, $00, $00, $00
0008DF19                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008DF19                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF19                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008DF19                            	smpsVcDecayRate2    $01, $01, $01, $01
0008DF19                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008DF19                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008DF19 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008DF32                            
0008DF32                            ;	Voice $03
0008DF32                            ;	$3A
0008DF32                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008DF32                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008DF32                            	smpsVcAlgorithm     $02
0008DF32                            	smpsVcFeedback      $07
0008DF32                            	smpsVcUnusedBits    $00
0008DF32                            	smpsVcDetune        $04, $06, $02, $00
0008DF32                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008DF32                            	smpsVcRateScale     $00, $00, $00, $00
0008DF32                            	smpsVcAttackRate    $18, $19, $14, $14
0008DF32                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF32                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008DF32                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DF32                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008DF32                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008DF32 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008DF4B                            
0008DF4B                            ;	Voice $04
0008DF4B                            ;	$3C
0008DF4B                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008DF4B                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008DF4B                            	smpsVcAlgorithm     $04
0008DF4B                            	smpsVcFeedback      $07
0008DF4B                            	smpsVcUnusedBits    $00
0008DF4B                            	smpsVcDetune        $07, $00, $00, $03
0008DF4B                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008DF4B                            	smpsVcRateScale     $00, $00, $00, $00
0008DF4B                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008DF4B                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF4B                            	smpsVcDecayRate1    $00, $00, $00, $00
0008DF4B                            	smpsVcDecayRate2    $00, $00, $00, $00
0008DF4B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008DF4B                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008DF4B 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008DF64                            
0008DF64                            ;	Voice $05
0008DF64                            ;	$38
0008DF64                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008DF64                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008DF64                            	smpsVcAlgorithm     $00
0008DF64                            	smpsVcFeedback      $07
0008DF64                            	smpsVcUnusedBits    $00
0008DF64                            	smpsVcDetune        $04, $06, $02, $00
0008DF64                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008DF64                            	smpsVcRateScale     $00, $00, $00, $00
0008DF64                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008DF64                            	smpsVcAmpMod        $00, $00, $00, $00
0008DF64                            	smpsVcDecayRate1    $00, $03, $00, $17
0008DF64                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008DF64                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008DF64                            	smpsVcReleaseRate   $08, $05, $05, $05
0008DF64 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008DF7D                            
0008DF7D                            
0008DF7E 00                         		even
0008DF7E                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0009218E                            		even
0009218E                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00095CE6 00                         		even
00095CE6                            Music87:	include	sound\music87.asm; Invincibility
00095CE6                            triple_Header:
00095CE6 =00000001                  smpsHeaderStartSong = 1
00095CE6 0000                       	smpsHeaderVoice     triple_Voices
00095CE8 0501                       	smpsHeaderChan      $05, $01
00095CEA 0200                       	smpsHeaderTempo     $02, $00
00095CEC                            
00095CF0 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00095CF4 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00095CF8 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00095CFC 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00095D00 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00095D06                            
00095D06                            ; DAC Data
00095D06                            triple_DAC:
00095D06 E0C0                       	smpsPan             panCenter, $00
00095D08 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00095D0E                            
00095D0E                            triple_Loop01:
00095D0E 8282 82                    	dc.b	dSnare, dSnare, dSnare
00095D11                            
00095D11                            triple_Loop00:
00095D11 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00095D1D 06                         	dc.b	$06
00095D1E F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00095D23 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00095D2F 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00095D36 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00095D3B 0303 1B                    	dc.b	$03, $03, $1B
00095D3E E0C0                       	smpsPan             panCenter, $00
00095D40 F6FF C4                    	smpsJump triple_DAC
00095D43                            
00095D43                            ; FM1 Data
00095D43                            triple_FM1:
00095D43 E0C0                       	smpsPan             panCenter, $00
00095D47 8018                       	dc.b	nRst, $18
00095D49                            
00095D49                            triple_Loop0B:
00095D49 AC06 B8                    	dc.b	nG3, $06, nG4
00095D4C F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00095D51                            
00095D51                            triple_Loop0C:
00095D51 A7B3                       	dc.b	nD3, nD4
00095D53 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00095D58                            
00095D58                            triple_Loop0D:
00095D58 A9B5                       	dc.b	nE3, nE4
00095D5A F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00095D5F A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00095D67 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00095D6C A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00095D78 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00095D84 AD                         	dc.b	nAb3
00095D85 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00095D8A 8018                       	dc.b	nRst, $18
00095D8C E0C0                       	smpsPan             panCenter, $00
00095D90 F6FF B1                    	smpsJump triple_FM1
00095D93                            
00095D93                            ; FM2 Data
00095D93                            triple_FM2:
00095D93 E0C0                       	smpsPan             panCenter, $00
00095D97 8018                       	dc.b	nRst, $18
00095D99                            
00095D99                            triple_Loop07:
00095D99 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095DA5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095DB1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00095DB6 8003                       	dc.b	nRst, $03
00095DB8                            
00095DB8                            triple_Loop08:
00095DB8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095DBE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00095DC3 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095DC9                            
00095DC9                            triple_Loop09:
00095DC9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095DD5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095DE1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00095DE6 8003                       	dc.b	nRst, $03
00095DE8                            
00095DE8                            triple_Loop0A:
00095DE8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095DEE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00095DF3 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095DF9 E0C0                       	smpsPan             panCenter, $00
00095DFD F6FF 94                    	smpsJump triple_FM2
00095E00                            
00095E00                            ; FM3 Data
00095E00                            triple_FM3:
00095E00 E0C0                       	smpsPan             panCenter, $00
00095E04 8018                       	dc.b	nRst, $18
00095E06                            
00095E06                            triple_Loop06:
00095E06 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00095E0D F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00095E12 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00095E1E BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00095E2A C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00095E2D F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00095E32 8018                       	dc.b	nRst, $18
00095E34 E0C0                       	smpsPan             panCenter, $00
00095E38 F6FF C6                    	smpsJump triple_FM3
00095E3B                            
00095E3B                            ; FM4 Data
00095E3B                            triple_FM4:
00095E3B E103                       	smpsAlterNote       $03
00095E3F E0C0                       	smpsPan             panCenter, $00
00095E41 8018                       	dc.b	nRst, $18
00095E43                            
00095E43                            triple_Loop02:
00095E43 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095E4F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095E5B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00095E60 8003                       	dc.b	nRst, $03
00095E62                            
00095E62                            triple_Loop03:
00095E62 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095E68 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00095E6D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00095E73                            
00095E73                            triple_Loop04:
00095E73 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00095E7F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00095E8B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00095E90 8003                       	dc.b	nRst, $03
00095E92                            
00095E92                            triple_Loop05:
00095E92 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00095E98 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00095E9D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00095EA3 E0C0                       	smpsPan             panCenter, $00
00095EA5 F6FF 94                    	smpsJump triple_FM4
00095EA8                            
00095EA8                            ; PSG1 Data
00095EA8                            triple_PSG1:
00095EA8 8018                       	dc.b	nRst, $18
00095EAA                            
00095EAA                            triple_Loop0E:
00095EAA A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095EB6 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095EC2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095ECE 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095ED2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00095ED7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095EE3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095EEF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095EFB 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095EFF                            
00095EFF                            triple_Loop0F:
00095EFF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095F05 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00095F0A 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00095F10                            
00095F10                            triple_Loop10:
00095F10 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095F1C 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095F28 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095F34 9402 8004                  	dc.b	nG1, $02, nRst, $04
00095F38 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00095F3D A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00095F49 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00095F55 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00095F61 9402 8007                  	dc.b	nG1, $02, nRst, $07
00095F65                            
00095F65                            triple_Loop11:
00095F65 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00095F6B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00095F70 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00095F76 F500                       	smpsPSGvoice        $00
00095F78 F6FF 2E                    	smpsJump triple_PSG1
00095F7B                            
00095F7B                            triple_Voices:
00095F7B                            ;	Voice $00
00095F7B                            ;	$3A
00095F7B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00095F7B                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00095F7B                            	smpsVcAlgorithm     $02
00095F7B                            	smpsVcFeedback      $07
00095F7B                            	smpsVcUnusedBits    $00
00095F7B                            	smpsVcDetune        $00, $00, $00, $00
00095F7B                            	smpsVcCoarseFreq    $01, $01, $07, $01
00095F7B                            	smpsVcRateScale     $01, $02, $02, $02
00095F7B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00095F7B                            	smpsVcAmpMod        $00, $00, $00, $00
00095F7B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00095F7B                            	smpsVcDecayRate2    $00, $00, $00, $00
00095F7B                            	smpsVcDecayLevel    $00, $01, $0F, $01
00095F7B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095F7B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00095F94                            
00095F94                            ;	Voice $01
00095F94                            ;	$20
00095F94                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00095F94                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00095F94                            	smpsVcAlgorithm     $00
00095F94                            	smpsVcFeedback      $04
00095F94                            	smpsVcUnusedBits    $00
00095F94                            	smpsVcDetune        $00, $00, $03, $07
00095F94                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00095F94                            	smpsVcRateScale     $03, $03, $03, $02
00095F94                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00095F94                            	smpsVcAmpMod        $00, $00, $00, $00
00095F94                            	smpsVcDecayRate1    $04, $04, $0A, $10
00095F94                            	smpsVcDecayRate2    $08, $08, $08, $0F
00095F94                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00095F94                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00095F94 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095F94 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00095FAE 00                         		even
00095FAE                            Music88:	incbin	sound\music88.bin; Extra Life
0009609C                            		even
0009609C                            Music89:	incbin	sound\music89.bin; Special Stage
00099F64 00                         		even
00099F64                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009A12E                            		even
0009A12E                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009A3C8                            		even
0009A3C8                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009A5E4                            		even
0009A5E4                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009A800                            		even
0009A800                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009AC6E 00                         		even
0009AC6E                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009B2AE 00                         		even
0009B2AE                            Music90:	incbin	sound\music90.bin ; Continue
0009B648 00                         		even
0009B648                            Music91:	incbin	sound\music91.bin ; Credits
0009C916                            		even
0009C916                            Music92:	incbin	sound\music92.bin ; Drowning
0009CA40                            		even
0009CA40                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
0009CB10                            		even
0009CB10                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
0009CB4A 00                         		even
0009CB4A                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
0009CB84 00                         		even
0009CB84                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009CBBE 00                         		even
0009CBBE                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009CBF8 00                         		even
0009CBF8                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009CC32 00                         		even
0009CC32                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009CC6C 00                         		even
0009CC6C                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009CCA6 00                         		even
0009CCA6                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009CCE0 00                         		even
0009CCE0                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009CD1A 00                         		even
0009CD1A                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009CD54 00                         		even
0009CD54                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009D244                            		even
0009D244                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
0009D27E 00                         		even
0009D27E                            ; ---------------------------------------------------------------------------
0009D27E                            ; Sound	effect pointers
0009D27E                            ; ---------------------------------------------------------------------------
0009D27E 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009D28A 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009D296 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009D2A2 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009D2AE 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009D2BA 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009D2C6 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009D2D2 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009D2DE 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009D2EA 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0009D2F6 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0009D302 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0009D30E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009D31A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0009D326 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0009D332 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0009D33E 0000 0000                  SoundD0Index:	dc.l SoundD0
0009D342                            SoundA0:	incbin	sound\soundA0.bin
0009D358                            		even
0009D358                            SoundA1:	incbin	sound\soundA1.bin
0009D382                            		even
0009D382                            SoundA2:	incbin	sound\soundA2.bin
0009D3A2                            		even
0009D3A2                            SoundA3:	incbin	sound\soundA3.bin
0009D3D4                            		even
0009D3D4                            SoundA4:	incbin	sound\soundA4.bin
0009D40A                            		even
0009D40A                            SoundA5:	incbin	sound\soundA5.bin
0009D436                            		even
0009D436                            SoundA6:	incbin	sound\soundA6.bin
0009D466                            		even
0009D466                            SoundA7:	incbin	sound\soundA7.bin
0009D496                            		even
0009D496                            SoundA8:	incbin	sound\soundA8.bin
0009D4CA                            		even
0009D4CA                            SoundA9:	incbin	sound\soundA9.bin
0009D4DC                            		even
0009D4DC                            SoundAA:	incbin	sound\soundAA.bin
0009D51E                            		even
0009D51E                            SoundAB:	incbin	sound\soundAB.bin
0009D53E                            		even
0009D53E                            SoundAC:	incbin	sound\soundAC.bin
0009D572                            		even
0009D572                            SoundAD:	incbin	sound\soundAD.bin
0009D5A8                            		even
0009D5A8                            SoundAE:	incbin	sound\soundAE.bin
0009D5F2                            		even
0009D5F2                            SoundAF:	incbin	sound\soundAF.bin
0009D620                            		even
0009D620                            SoundB0:	incbin	sound\soundB0.bin
0009D652                            		even
0009D652                            SoundB1:	incbin	sound\soundB1.bin
0009D67E                            		even
0009D67E                            SoundB2:	incbin	sound\soundB2.bin
0009D6CE                            		even
0009D6CE                            SoundB3:	incbin	sound\soundB3.bin
0009D718                            		even
0009D718                            SoundB4:	include	sound\soundB4.asm
0009D718                            SndB4_Bumper_Header:
0009D718 =00000001                  smpsHeaderStartSong = 1
0009D718 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
0009D71A 01                         	smpsHeaderTempoSFX  $01
0009D71B 03                         	smpsHeaderChanSFX   $03
0009D71C                            
0009D72E                            
0009D72E                            ; FM5 Data
0009D72E                            SndB4_Bumper_FM5:
0009D730 F600 00                    	smpsJump            SndB4_Bumper_Jump00
0009D733                            
0009D733                            ; FM4 Data
0009D733                            SndB4_Bumper_FM4:
0009D733 F2                         	smpsStop
0009D734                            
0009D734                            SndB4_Bumper_Jump00:
0009D734 A020                       	dc.b	nG2, $20
0009D736 F2                         	smpsStop
0009D737                            
0009D737                            ; FM3 Data
0009D737                            SndB4_Bumper_FM3:
0009D737 F2                         	smpsStop
0009D738                            
0009D738                            SndB4_Bumper_Voices:
0009D738                            ;	Voice $00
0009D738                            ;	$32
0009D738                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009D738                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009D738                            	smpsVcAlgorithm     $02
0009D738                            	smpsVcFeedback      $06
0009D738                            	smpsVcUnusedBits    $00
0009D738                            	smpsVcDetune        $07, $07, $02, $00
0009D738                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009D738                            	smpsVcRateScale     $00, $00, $00, $00
0009D738                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009D738                            	smpsVcAmpMod        $00, $00, $00, $00
0009D738                            	smpsVcDecayRate1    $08, $00, $00, $09
0009D738                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009D738                            	smpsVcDecayLevel    $00, $00, $00, $00
0009D738                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009D738 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009D738 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009D752 00                         		even
0009D752                            SoundB5:	incbin	sound\soundB5.bin
0009D770 00                         		even
0009D770                            SoundB6:	incbin	sound\soundB6.bin
0009D78E                            		even
0009D78E                            SoundB7:	incbin	sound\soundB7.bin
0009D7CA                            		even
0009D7CA                            SoundB8:	incbin	sound\soundB8.bin
0009D7E8                            		even
0009D7E8                            SoundB9:	incbin	sound\soundB9.bin
0009D84C                            		even
0009D84C                            SoundBA:	incbin	sound\soundBA.bin
0009D874                            		even
0009D874                            SoundBB:	incbin	sound\soundBB.bin
0009D8A0                            		even
0009D8A0                            SoundBC:	incbin	sound\soundBC.bin
0009D8E2                            		even
0009D8E2                            SoundBD:	incbin	sound\soundBD.bin
0009D936                            		even
0009D936                            SoundBE:	incbin	sound\soundBE.bin
0009D970                            		even
0009D970                            SoundBF:	incbin	sound\soundBF.bin
0009D9E2                            		even
0009D9E2                            SoundC0:	incbin	sound\soundC0.bin
0009DA10                            		even
0009DA10                            SoundC1:	incbin	sound\soundC1.bin
0009DA6A                            		even
0009DA6A                            SoundC2:	incbin	sound\soundC2.bin
0009DA94                            		even
0009DA94                            SoundC3:	incbin	sound\soundC3.bin
0009DB0E                            		even
0009DB0E                            SoundC4:	incbin	sound\soundC4.bin
0009DC0C                            		even
0009DC0C                            SoundC5:	incbin	sound\soundC5.bin
0009DC74                            		even
0009DC74                            SoundC6:	incbin	sound\soundC6.bin
0009DCB6                            		even
0009DCB6                            SoundC7:	incbin	sound\soundC7.bin
0009DCE4                            		even
0009DCE4                            SoundC8:	incbin	sound\soundC8.bin
0009DCF6                            		even
0009DCF6                            SoundC9:	incbin	sound\soundC9.bin
0009DD24                            		even
0009DD24                            SoundCA:	incbin	sound\soundCA.bin
0009DD52                            		even
0009DD52                            SoundCB:	incbin	sound\soundCB.bin
0009DD9E                            		even
0009DD9E                            SoundCC:	incbin	sound\C9.ssf
0009DDCC                            		even
0009DDCC                            SoundCD:	incbin	sound\soundCD.bin
0009DDDA                            		even
0009DDDA                            SoundCE:	incbin	sound\soundCE.bin
0009DDF8 00                         		even
0009DDF8                            SoundCF:	incbin	sound\soundCF.bin
0009DE30                            		even
0009DE30                            SoundD0:	incbin	sound\soundD0.bin
0009DE6A                            		even
0009DE6A                            SegaPCM:	incbin	sound\segapcm.bin
000B7FC0                            SegaPCM_end:	even
000B7FC0                            
000B7FC0                            IdiotPCM:	incbin	sound\youare.bin
000C2092 00                         IdiotPCM_end:	even
000C2092                            
000C2092                            Minecraft:	include	minecraft\code\main.asm
000C2092                            ; Minecraft: Very Legacy Console Edition
000C2092                            ; Main file
000C2092                            
000C2092                            	include	minecraft\code\variables.asm
000C2092                            ; Minecraft: Very Legacy Console Edition
000C2092                            ; Variable Definitions
000C2092                            
000C2092 =00000040                  MAP_HEIGHT	equ	64
000C2092 =00000100                  MAP_WIDTH	equ	256
000C2092                            
000C2092                            		rsset	$FF0000
000C2092 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C2092 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C2092                            
000C2092                            		rsset	$FFFF8000
000C2092 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C2092                            
000C2092 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C2092 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C2092 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C2092 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C2092 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C2092                            
000C2092                            MC_Init:
000C2092 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000C2096 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000C209C                            
000C209C 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000C20A0 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000C20A4 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000C20A8 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000C20AC                            
000C20AC                            
000C20AC                            
000C20AC 6000 FFFE                  		bra.w	*			; spin infinitely
000C20B0                            
000C20B0                            ; ===========================================================================
000C20B0                            ; ---------------------------------------------------------------------------
000C20B0                            ; Clear The Screen
000C20B0                            ; ---------------------------------------------------------------------------
000C20B0                            MC_ClearScreen:
000C20B0 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000C20B4                            
000C20B4 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000C20BA 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C20BE 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000C20C4 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C20CA                            
000C20CA 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C20CC 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000C20CE                            
000C20CE 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000C20D4 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C20D8 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000C20DE 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C20E4                            
000C20E4 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C20E6 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000C20E8                            
000C20E8 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000C20EE 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000C20F2 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000C20F8 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000C20FE                            
000C20FE 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000C2100 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000C2102                            
000C2102 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000C2106 4E75                       		rts				; return
000C2108                            ; ---------------------------------------------------------------------------
000C2108                            
000C2108                            ; ===========================================================================
000C2108                            ; ---------------------------------------------------------------------------
000C2108                            ; Load The Palette
000C2108                            ; ---------------------------------------------------------------------------
000C2108                            MC_LoadPalette:
000C2108 44D6                       		move.w	(a6),ccr		; is v-blank active?
000C210A 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000C210C                            
000C210C                            .updatePalette:
000C210C 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000C2112                            		
000C2112 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000C2116 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000C2118 E288                       		lsr.l	#1,d0			; divide by two
000C211A                            
000C211A 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000C211E 1200                       		move.b	d0,d1			; ^
000C2120 3C81                       		move.w	d1,(a6)			; ^
000C2122                            
000C2122 E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000C2124 323C 9600                  		move.w	#$9600,d1		; ^
000C2128 1200                       		move.b	d0,d1			; ^
000C212A 3C81                       		move.w	d1,(a6)			; ^
000C212C                            
000C212C E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000C212E 323C 9700                  		move.w	#$9700,d1		; ^
000C2132 1200                       		move.b	d0,d1			; ^
000C2134 3C81                       		move.w	d1,(a6)			; ^
000C2136                            
000C2136 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000C213C                            
000C213C                            .waitForScan:
000C213C                            	;	move.w	(a6),ccr		; is v-blank still active?
000C213C                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000C213C 4E75                       		rts				; return
000C213E                            ; ---------------------------------------------------------------------------
000C213E                            
000C213E                            MC_Palette:
000C213E 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000C215E 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000C217E 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C219E 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C219E 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C21BE                            ; end of 'ROM'
000C21BE                            EndOfRom:
000C21BE                            
000C21BE                            
